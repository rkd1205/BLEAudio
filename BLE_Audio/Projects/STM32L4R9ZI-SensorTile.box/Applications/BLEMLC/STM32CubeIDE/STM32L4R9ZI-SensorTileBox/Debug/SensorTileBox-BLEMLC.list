
SensorTileBox-BLEMLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e590  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004968  0801e760  0801e760  0002e760  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080230c8  080230c8  00040e48  2**0
                  CONTENTS
  4 .ARM          00000008  080230c8  080230c8  000330c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080230d0  080230d0  00040e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080230d0  080230d0  000330d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080230d8  080230d8  000330d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e48  20000000  080230e0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000200c  20000e48  08023f28  00040e48  2**2
                  ALLOC
 10 .noinit       00000004  20002e54  08023f28  00042e54  2**2
                  ALLOC
 11 ._user_heap_stack 0001c000  20002e58  08023f28  00042e58  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040e48  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00040e78  2**0
                  CONTENTS, READONLY
 14 .debug_line   0004b112  00000000  00000000  00040f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000126  00000000  00000000  0008c01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0008c641  00000000  00000000  0008c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000ba38  00000000  00000000  00118784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003b00  00000000  00000000  001241c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00021629  00000000  00000000  00127cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00006789  00000000  00000000  001492e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0003da7a  00000000  00000000  0014fa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000ec24  00000000  00000000  0018d4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000e48 	.word	0x20000e48
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801e738 	.word	0x0801e738

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000e4c 	.word	0x20000e4c
 80001fc:	0801e738 	.word	0x0801e738

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9da 	b.w	80010a4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f870 	bl	8000ddc <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_f2lz>:
 8000d08:	ee07 0a90 	vmov	s15, r0
 8000d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	d401      	bmi.n	8000d1a <__aeabi_f2lz+0x12>
 8000d16:	f000 b823 	b.w	8000d60 <__aeabi_f2ulz>
 8000d1a:	eef1 7a67 	vneg.f32	s15, s15
 8000d1e:	b508      	push	{r3, lr}
 8000d20:	ee17 0a90 	vmov	r0, s15
 8000d24:	f000 f81c 	bl	8000d60 <__aeabi_f2ulz>
 8000d28:	4240      	negs	r0, r0
 8000d2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2e:	bd08      	pop	{r3, pc}

08000d30 <__aeabi_d2lz>:
 8000d30:	b538      	push	{r3, r4, r5, lr}
 8000d32:	2200      	movs	r2, #0
 8000d34:	2300      	movs	r3, #0
 8000d36:	4604      	mov	r4, r0
 8000d38:	460d      	mov	r5, r1
 8000d3a:	f7ff fef7 	bl	8000b2c <__aeabi_dcmplt>
 8000d3e:	b928      	cbnz	r0, 8000d4c <__aeabi_d2lz+0x1c>
 8000d40:	4620      	mov	r0, r4
 8000d42:	4629      	mov	r1, r5
 8000d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d48:	f000 b82a 	b.w	8000da0 <__aeabi_d2ulz>
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d52:	f000 f825 	bl	8000da0 <__aeabi_d2ulz>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop

08000d60 <__aeabi_f2ulz>:
 8000d60:	b5d0      	push	{r4, r6, r7, lr}
 8000d62:	f7ff fc19 	bl	8000598 <__aeabi_f2d>
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__aeabi_f2ulz+0x38>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	460f      	mov	r7, r1
 8000d6e:	f7ff fc6b 	bl	8000648 <__aeabi_dmul>
 8000d72:	f7ff ff41 	bl	8000bf8 <__aeabi_d2uiz>
 8000d76:	4604      	mov	r4, r0
 8000d78:	f7ff fbec 	bl	8000554 <__aeabi_ui2d>
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <__aeabi_f2ulz+0x3c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f7ff fc62 	bl	8000648 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4630      	mov	r0, r6
 8000d8a:	4639      	mov	r1, r7
 8000d8c:	f7ff faa4 	bl	80002d8 <__aeabi_dsub>
 8000d90:	f7ff ff32 	bl	8000bf8 <__aeabi_d2uiz>
 8000d94:	4621      	mov	r1, r4
 8000d96:	bdd0      	pop	{r4, r6, r7, pc}
 8000d98:	3df00000 	.word	0x3df00000
 8000d9c:	41f00000 	.word	0x41f00000

08000da0 <__aeabi_d2ulz>:
 8000da0:	b5d0      	push	{r4, r6, r7, lr}
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__aeabi_d2ulz+0x34>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	4606      	mov	r6, r0
 8000da8:	460f      	mov	r7, r1
 8000daa:	f7ff fc4d 	bl	8000648 <__aeabi_dmul>
 8000dae:	f7ff ff23 	bl	8000bf8 <__aeabi_d2uiz>
 8000db2:	4604      	mov	r4, r0
 8000db4:	f7ff fbce 	bl	8000554 <__aeabi_ui2d>
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <__aeabi_d2ulz+0x38>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f7ff fc44 	bl	8000648 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	4639      	mov	r1, r7
 8000dc8:	f7ff fa86 	bl	80002d8 <__aeabi_dsub>
 8000dcc:	f7ff ff14 	bl	8000bf8 <__aeabi_d2uiz>
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd4:	3df00000 	.word	0x3df00000
 8000dd8:	41f00000 	.word	0x41f00000

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9e08      	ldr	r6, [sp, #32]
 8000de2:	460d      	mov	r5, r1
 8000de4:	4604      	mov	r4, r0
 8000de6:	460f      	mov	r7, r1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d14a      	bne.n	8000e82 <__udivmoddi4+0xa6>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	4694      	mov	ip, r2
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0xe2>
 8000df2:	fab2 f382 	clz	r3, r2
 8000df6:	b143      	cbz	r3, 8000e0a <__udivmoddi4+0x2e>
 8000df8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfc:	f1c3 0220 	rsb	r2, r3, #32
 8000e00:	409f      	lsls	r7, r3
 8000e02:	fa20 f202 	lsr.w	r2, r0, r2
 8000e06:	4317      	orrs	r7, r2
 8000e08:	409c      	lsls	r4, r3
 8000e0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e0e:	fa1f f58c 	uxth.w	r5, ip
 8000e12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e16:	0c22      	lsrs	r2, r4, #16
 8000e18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e20:	fb01 f005 	mul.w	r0, r1, r5
 8000e24:	4290      	cmp	r0, r2
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x62>
 8000e28:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000e30:	f080 811c 	bcs.w	800106c <__udivmoddi4+0x290>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f240 8119 	bls.w	800106c <__udivmoddi4+0x290>
 8000e3a:	3902      	subs	r1, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a12      	subs	r2, r2, r0
 8000e40:	b2a4      	uxth	r4, r4
 8000e42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4e:	fb00 f505 	mul.w	r5, r0, r5
 8000e52:	42a5      	cmp	r5, r4
 8000e54:	d90a      	bls.n	8000e6c <__udivmoddi4+0x90>
 8000e56:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e5e:	f080 8107 	bcs.w	8001070 <__udivmoddi4+0x294>
 8000e62:	42a5      	cmp	r5, r4
 8000e64:	f240 8104 	bls.w	8001070 <__udivmoddi4+0x294>
 8000e68:	4464      	add	r4, ip
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e70:	1b64      	subs	r4, r4, r5
 8000e72:	2100      	movs	r1, #0
 8000e74:	b11e      	cbz	r6, 8000e7e <__udivmoddi4+0xa2>
 8000e76:	40dc      	lsrs	r4, r3
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0xbc>
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	f000 80ed 	beq.w	8001066 <__udivmoddi4+0x28a>
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e92:	4608      	mov	r0, r1
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	fab3 f183 	clz	r1, r3
 8000e9c:	2900      	cmp	r1, #0
 8000e9e:	d149      	bne.n	8000f34 <__udivmoddi4+0x158>
 8000ea0:	42ab      	cmp	r3, r5
 8000ea2:	d302      	bcc.n	8000eaa <__udivmoddi4+0xce>
 8000ea4:	4282      	cmp	r2, r0
 8000ea6:	f200 80f8 	bhi.w	800109a <__udivmoddi4+0x2be>
 8000eaa:	1a84      	subs	r4, r0, r2
 8000eac:	eb65 0203 	sbc.w	r2, r5, r3
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4617      	mov	r7, r2
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d0e2      	beq.n	8000e7e <__udivmoddi4+0xa2>
 8000eb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ebc:	e7df      	b.n	8000e7e <__udivmoddi4+0xa2>
 8000ebe:	b902      	cbnz	r2, 8000ec2 <__udivmoddi4+0xe6>
 8000ec0:	deff      	udf	#255	; 0xff
 8000ec2:	fab2 f382 	clz	r3, r2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 8090 	bne.w	8000fec <__udivmoddi4+0x210>
 8000ecc:	1a8a      	subs	r2, r1, r2
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000edc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ee0:	0c22      	lsrs	r2, r4, #16
 8000ee2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ee6:	fb0e f005 	mul.w	r0, lr, r5
 8000eea:	4290      	cmp	r0, r2
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x124>
 8000eee:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x122>
 8000ef8:	4290      	cmp	r0, r2
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2b8>
 8000efe:	4645      	mov	r5, r8
 8000f00:	1a12      	subs	r2, r2, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f08:	fb07 2210 	mls	r2, r7, r0, r2
 8000f0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x14e>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x14c>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2c2>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f32:	e79f      	b.n	8000e74 <__udivmoddi4+0x98>
 8000f34:	f1c1 0720 	rsb	r7, r1, #32
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa05 f401 	lsl.w	r4, r5, r1
 8000f46:	fa20 f307 	lsr.w	r3, r0, r7
 8000f4a:	40fd      	lsrs	r5, r7
 8000f4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f50:	4323      	orrs	r3, r4
 8000f52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f56:	fa1f fe8c 	uxth.w	lr, ip
 8000f5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000f5e:	0c1c      	lsrs	r4, r3, #16
 8000f60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f64:	fb08 f50e 	mul.w	r5, r8, lr
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b0>
 8000f74:	eb1c 0404 	adds.w	r4, ip, r4
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2b4>
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2b4>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4464      	add	r4, ip
 8000f8c:	1b64      	subs	r4, r4, r5
 8000f8e:	b29d      	uxth	r5, r3
 8000f90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f94:	fb09 4413 	mls	r4, r9, r3, r4
 8000f98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1da>
 8000fa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2ac>
 8000fae:	45a6      	cmp	lr, r4
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2ac>
 8000fb2:	3b02      	subs	r3, #2
 8000fb4:	4464      	add	r4, ip
 8000fb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fba:	fba3 9502 	umull	r9, r5, r3, r2
 8000fbe:	eba4 040e 	sub.w	r4, r4, lr
 8000fc2:	42ac      	cmp	r4, r5
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46ae      	mov	lr, r5
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x29c>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x298>
 8000fcc:	b156      	cbz	r6, 8000fe4 <__udivmoddi4+0x208>
 8000fce:	ebb0 0208 	subs.w	r2, r0, r8
 8000fd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000fd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fda:	40ca      	lsrs	r2, r1
 8000fdc:	40cc      	lsrs	r4, r1
 8000fde:	4317      	orrs	r7, r2
 8000fe0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	f1c3 0120 	rsb	r1, r3, #32
 8000ff0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ff4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ffc:	409d      	lsls	r5, r3
 8000ffe:	432a      	orrs	r2, r5
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb1 f0f7 	udiv	r0, r1, r7
 800100c:	fb07 1510 	mls	r5, r7, r0, r1
 8001010:	0c11      	lsrs	r1, r2, #16
 8001012:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001016:	fb00 f50e 	mul.w	r5, r0, lr
 800101a:	428d      	cmp	r5, r1
 800101c:	fa04 f403 	lsl.w	r4, r4, r3
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x258>
 8001022:	eb1c 0101 	adds.w	r1, ip, r1
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b0>
 800102c:	428d      	cmp	r5, r1
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b0>
 8001030:	3802      	subs	r0, #2
 8001032:	4461      	add	r1, ip
 8001034:	1b49      	subs	r1, r1, r5
 8001036:	b292      	uxth	r2, r2
 8001038:	fbb1 f5f7 	udiv	r5, r1, r7
 800103c:	fb07 1115 	mls	r1, r7, r5, r1
 8001040:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001044:	fb05 f10e 	mul.w	r1, r5, lr
 8001048:	4291      	cmp	r1, r2
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x282>
 800104c:	eb1c 0202 	adds.w	r2, ip, r2
 8001050:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2a8>
 8001056:	4291      	cmp	r1, r2
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2a8>
 800105a:	3d02      	subs	r5, #2
 800105c:	4462      	add	r2, ip
 800105e:	1a52      	subs	r2, r2, r1
 8001060:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0xfc>
 8001066:	4631      	mov	r1, r6
 8001068:	4630      	mov	r0, r6
 800106a:	e708      	b.n	8000e7e <__udivmoddi4+0xa2>
 800106c:	4639      	mov	r1, r7
 800106e:	e6e6      	b.n	8000e3e <__udivmoddi4+0x62>
 8001070:	4610      	mov	r0, r2
 8001072:	e6fb      	b.n	8000e6c <__udivmoddi4+0x90>
 8001074:	4548      	cmp	r0, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f0>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001080:	3b01      	subs	r3, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f0>
 8001084:	4645      	mov	r5, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x282>
 8001088:	462b      	mov	r3, r5
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1da>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x258>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b0>
 8001094:	3d02      	subs	r5, #2
 8001096:	4462      	add	r2, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x124>
 800109a:	4608      	mov	r0, r1
 800109c:	e70a      	b.n	8000eb4 <__udivmoddi4+0xd8>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x14e>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ae:	e003      	b.n	80010b8 <LoopCopyDataInit>

080010b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010b6:	3104      	adds	r1, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80010bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c0:	d3f6      	bcc.n	80010b0 <CopyDataInit>
	ldr	r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010c4:	e002      	b.n	80010cc <LoopFillZerobss>

080010c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c8:	f842 3b04 	str.w	r3, [r2], #4

080010cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <LoopForever+0x16>)
	cmp	r2, r3
 80010ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d0:	d3f9      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010d2:	f00a fca9 	bl	800ba28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f01a fbb3 	bl	801b840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010da:	f002 fb41 	bl	8003760 <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80010e4:	080230e0 	.word	0x080230e0
	ldr	r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010ec:	20000e48 	.word	0x20000e48
	ldr	r2, =_sbss
 80010f0:	20000e48 	.word	0x20000e48
	ldr	r3, = _ebss
 80010f4:	20002e54 	.word	0x20002e54

080010f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_IRQHandler>
	...

080010fc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80010fc:	2001      	movs	r0, #1
 80010fe:	4770      	bx	lr

08001100 <_kill>:

int _kill(int pid, int sig)
{
 8001100:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001102:	f01a fb97 	bl	801b834 <__errno>
 8001106:	2316      	movs	r3, #22
 8001108:	6003      	str	r3, [r0, #0]
	return -1;
}
 800110a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110e:	bd08      	pop	{r3, pc}

08001110 <_exit>:

void _exit (int status)
{
 8001110:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001112:	f01a fb8f 	bl	801b834 <__errno>
 8001116:	2316      	movs	r3, #22
 8001118:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800111a:	e7fe      	b.n	800111a <_exit+0xa>

0800111c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	1e16      	subs	r6, r2, #0
 8001120:	dd07      	ble.n	8001132 <_read+0x16>
 8001122:	460c      	mov	r4, r1
 8001124:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	42a5      	cmp	r5, r4
 8001130:	d1f9      	bne.n	8001126 <_read+0xa>
	}

return len;
}
 8001132:	4630      	mov	r0, r6
 8001134:	bd70      	pop	{r4, r5, r6, pc}
 8001136:	bf00      	nop

08001138 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <_sbrk+0x30>)
{
 800113a:	b508      	push	{r3, lr}
 800113c:	4603      	mov	r3, r0
	if (heap_end == 0)
 800113e:	6810      	ldr	r0, [r2, #0]
 8001140:	b128      	cbz	r0, 800114e <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001142:	4403      	add	r3, r0
 8001144:	4669      	mov	r1, sp
 8001146:	428b      	cmp	r3, r1
 8001148:	d807      	bhi.n	800115a <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800114a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800114c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <_sbrk+0x34>)
 8001150:	6010      	str	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001152:	4403      	add	r3, r0
 8001154:	4669      	mov	r1, sp
 8001156:	428b      	cmp	r3, r1
 8001158:	d9f7      	bls.n	800114a <_sbrk+0x12>
		errno = ENOMEM;
 800115a:	f01a fb6b 	bl	801b834 <__errno>
 800115e:	230c      	movs	r3, #12
 8001160:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001166:	bd08      	pop	{r3, pc}
 8001168:	20000e64 	.word	0x20000e64
 800116c:	20002e58 	.word	0x20002e58

08001170 <_close>:

int _close(int file)
{
	return -1;
}
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800117e:	2000      	movs	r0, #0
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001184:	2001      	movs	r0, #1
 8001186:	4770      	bx	lr

08001188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001188:	2000      	movs	r0, #0
 800118a:	4770      	bx	lr

0800118c <FromHexToUCF>:
 */
static void FromHexToUCF(const char *In, uint32_t len, ucf_line_t *UCFProgram)
{
  uint32_t i, AH,AL,DH,DL;
  
  for (i = 0; i < len; i+=4) {
 800118c:	b399      	cbz	r1, 80011f6 <FromHexToUCF+0x6a>
{
 800118e:	b530      	push	{r4, r5, lr}
 8001190:	f06f 0503 	mvn.w	r5, #3
 8001194:	1d03      	adds	r3, r0, #4
 8001196:	1c94      	adds	r4, r2, #2
 8001198:	1a2d      	subs	r5, r5, r0
    char In1 = *In++;
 800119a:	f813 ec04 	ldrb.w	lr, [r3, #-4]
    char In2 = *In++;
 800119e:	f813 0c03 	ldrb.w	r0, [r3, #-3]
    char In3 = *In++;
 80011a2:	f813 cc02 	ldrb.w	ip, [r3, #-2]
    char In4 = *In++;
 80011a6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    AH = (In1 > '9') ? (In1 - 'A' + 10) : (In1 - '0');
 80011aa:	f1be 0f39 	cmp.w	lr, #57	; 0x39
 80011ae:	bf8c      	ite	hi
 80011b0:	f1ae 0e37 	subhi.w	lr, lr, #55	; 0x37
 80011b4:	f1ae 0e30 	subls.w	lr, lr, #48	; 0x30
    AL = (In2 > '9') ? (In2 - 'A' + 10) : (In2 - '0');
 80011b8:	2839      	cmp	r0, #57	; 0x39
 80011ba:	bf8c      	ite	hi
 80011bc:	3837      	subhi	r0, #55	; 0x37
 80011be:	3830      	subls	r0, #48	; 0x30
    DH = (In3 > '9') ? (In3 - 'A' + 10) : (In3 - '0');
 80011c0:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80011c4:	bf8c      	ite	hi
 80011c6:	f1ac 0c37 	subhi.w	ip, ip, #55	; 0x37
 80011ca:	f1ac 0c30 	subls.w	ip, ip, #48	; 0x30
    DL = (In4 > '9') ? (In4 - 'A' + 10) : (In4 - '0');
 80011ce:	2a39      	cmp	r2, #57	; 0x39
 80011d0:	bf8c      	ite	hi
 80011d2:	3a37      	subhi	r2, #55	; 0x37
 80011d4:	3a30      	subls	r2, #48	; 0x30
  for (i = 0; i < len; i+=4) {
 80011d6:	3304      	adds	r3, #4
    UCFProgram->address = (AH << 4 ) | AL;
    UCFProgram->data    = (DH << 4 ) | DL;
 80011d8:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  for (i = 0; i < len; i+=4) {
 80011dc:	eb05 0c03 	add.w	ip, r5, r3
    UCFProgram->address = (AH << 4 ) | AL;
 80011e0:	ea40 100e 	orr.w	r0, r0, lr, lsl #4
  for (i = 0; i < len; i+=4) {
 80011e4:	458c      	cmp	ip, r1
    UCFProgram->address = (AH << 4 ) | AL;
 80011e6:	f804 0c02 	strb.w	r0, [r4, #-2]
    UCFProgram->data    = (DH << 4 ) | DL;
 80011ea:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (i = 0; i < len; i+=4) {
 80011ee:	f104 0402 	add.w	r4, r4, #2
 80011f2:	d3d2      	bcc.n	800119a <FromHexToUCF+0xe>
    UCFProgram++;
  }
}
 80011f4:	bd30      	pop	{r4, r5, pc}
 80011f6:	4770      	bx	lr

080011f8 <ExtExtConfigUidCommandCallback>:
 * @param  uint8_t **UID STM32 UID Return value
 * @retval None
 */
static void ExtExtConfigUidCommandCallback(uint8_t **UID)
{
  *UID = (uint8_t *)STM32_UUID;
 80011f8:	4b01      	ldr	r3, [pc, #4]	; (8001200 <ExtExtConfigUidCommandCallback+0x8>)
 80011fa:	6003      	str	r3, [r0, #0]
}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	1fff7590 	.word	0x1fff7590

08001204 <ExtConfigVersionFwCommandCallback>:
 * @brief  Callback Function for answering to VersionFw command
 * @param  uint8_t *Answer Return String
 * @retval None
 */
static void ExtConfigVersionFwCommandCallback(uint8_t *Answer)
{
 8001204:	b510      	push	{r4, lr}
 8001206:	b084      	sub	sp, #16
  sprintf((char *)Answer,"%s_%s_%c.%c.%c",
 8001208:	2130      	movs	r1, #48	; 0x30
 800120a:	2235      	movs	r2, #53	; 0x35
 800120c:	2431      	movs	r4, #49	; 0x31
 800120e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <ExtConfigVersionFwCommandCallback+0x20>)
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <ExtConfigVersionFwCommandCallback+0x24>)
 8001216:	4905      	ldr	r1, [pc, #20]	; (800122c <ExtConfigVersionFwCommandCallback+0x28>)
 8001218:	9400      	str	r4, [sp, #0]
 800121a:	f01a f977 	bl	801b50c <siprintf>
      BLE_STM32_MICRO,
      BLE_FW_PACKAGENAME,
      BLE_VERSION_FW_MAJOR,
      BLE_VERSION_FW_MINOR,
      BLE_VERSION_FW_PATCH);
}
 800121e:	b004      	add	sp, #16
 8001220:	bd10      	pop	{r4, pc}
 8001222:	bf00      	nop
 8001224:	080207f8 	.word	0x080207f8
 8001228:	08020800 	.word	0x08020800
 800122c:	08020808 	.word	0x08020808

08001230 <ExtConfigHelpCommandCallback>:
  sprintf((char *)Answer,"List of available command:\n"
 8001230:	4901      	ldr	r1, [pc, #4]	; (8001238 <ExtConfigHelpCommandCallback+0x8>)
 8001232:	225a      	movs	r2, #90	; 0x5a
 8001234:	f01a bb33 	b.w	801b89e <memcpy>
 8001238:	08020818 	.word	0x08020818

0800123c <ExtConfigInfoCommandCallback>:
{
 800123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001240:	b091      	sub	sp, #68	; 0x44
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001242:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
{
 8001246:	4680      	mov	r8, r0
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001248:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 800124c:	f00b fe7a 	bl	800cf44 <getBlueNRGVersion>
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 8001250:	f8bd 403e 	ldrh.w	r4, [sp, #62]	; 0x3e
 8001254:	f89d 903d 	ldrb.w	r9, [sp, #61]	; 0x3d
    HAL_GetHalVersion() >>24,
 8001258:	f004 ff1a 	bl	8006090 <HAL_GetHalVersion>
 800125c:	4605      	mov	r5, r0
    (HAL_GetHalVersion() >>16)&0xFF,
 800125e:	f004 ff17 	bl	8006090 <HAL_GetHalVersion>
 8001262:	4606      	mov	r6, r0
    (HAL_GetHalVersion() >> 8)&0xFF,
 8001264:	f004 ff14 	bl	8006090 <HAL_GetHalVersion>
 8001268:	4607      	mov	r7, r0
    HAL_GetHalVersion()      &0xFF,
 800126a:	f004 ff11 	bl	8006090 <HAL_GetHalVersion>
  sprintf((char *)Answer,"STMicroelectronics %s:\n"
 800126e:	f004 030f 	and.w	r3, r4, #15
 8001272:	0e2d      	lsrs	r5, r5, #24
 8001274:	3361      	adds	r3, #97	; 0x61
 8001276:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800127a:	f009 010f 	and.w	r1, r9, #15
 800127e:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8001282:	b2c0      	uxtb	r0, r0
 8001284:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001288:	e9cd 1404 	strd	r1, r4, [sp, #16]
 800128c:	900b      	str	r0, [sp, #44]	; 0x2c
 800128e:	2430      	movs	r4, #48	; 0x30
 8001290:	2035      	movs	r0, #53	; 0x35
 8001292:	e9cd 0400 	strd	r0, r4, [sp]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <ExtConfigInfoCommandCallback+0x8c>)
 8001298:	4c0c      	ldr	r4, [pc, #48]	; (80012cc <ExtConfigInfoCommandCallback+0x90>)
 800129a:	9306      	str	r3, [sp, #24]
 800129c:	940d      	str	r4, [sp, #52]	; 0x34
 800129e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80012a2:	4c0b      	ldr	r4, [pc, #44]	; (80012d0 <ExtConfigInfoCommandCallback+0x94>)
 80012a4:	490b      	ldr	r1, [pc, #44]	; (80012d4 <ExtConfigInfoCommandCallback+0x98>)
 80012a6:	940c      	str	r4, [sp, #48]	; 0x30
 80012a8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80012ac:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80012b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012b4:	970a      	str	r7, [sp, #40]	; 0x28
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <ExtConfigInfoCommandCallback+0x9c>)
 80012b8:	9609      	str	r6, [sp, #36]	; 0x24
 80012ba:	2331      	movs	r3, #49	; 0x31
 80012bc:	4640      	mov	r0, r8
 80012be:	f01a f925 	bl	801b50c <siprintf>
}
 80012c2:	b011      	add	sp, #68	; 0x44
 80012c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012c8:	08020924 	.word	0x08020924
 80012cc:	0802090c 	.word	0x0802090c
 80012d0:	08020918 	.word	0x08020918
 80012d4:	08020874 	.word	0x08020874
 80012d8:	080207f8 	.word	0x080207f8

080012dc <NotifyEventInertial>:
  if(Event != BLE_NOTIFY_NOTHING)
 80012dc:	b900      	cbnz	r0, 80012e0 <NotifyEventInertial+0x4>
 80012de:	4770      	bx	lr
  if( (Event == BLE_NOTIFY_SUB) &&
 80012e0:	2801      	cmp	r0, #1
{
 80012e2:	b570      	push	{r4, r5, r6, lr}
  if( (Event == BLE_NOTIFY_SUB) &&
 80012e4:	d005      	beq.n	80012f2 <NotifyEventInertial+0x16>
  if( (Event == BLE_NOTIFY_UNSUB) &&
 80012e6:	2802      	cmp	r0, #2
 80012e8:	d102      	bne.n	80012f0 <NotifyEventInertial+0x14>
 80012ea:	4c14      	ldr	r4, [pc, #80]	; (800133c <NotifyEventInertial+0x60>)
 80012ec:	7823      	ldrb	r3, [r4, #0]
 80012ee:	b9ab      	cbnz	r3, 800131c <NotifyEventInertial+0x40>
}
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
      (!InertialTimerEnabled) )
 80012f2:	4c12      	ldr	r4, [pc, #72]	; (800133c <NotifyEventInertial+0x60>)
  if( (Event == BLE_NOTIFY_SUB) &&
 80012f4:	7823      	ldrb	r3, [r4, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1fa      	bne.n	80012f0 <NotifyEventInertial+0x14>
    uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80012fa:	4e11      	ldr	r6, [pc, #68]	; (8001340 <NotifyEventInertial+0x64>)
 80012fc:	6833      	ldr	r3, [r6, #0]
 80012fe:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    Init_MEMS();
 8001300:	f001 fd64 	bl	8002dcc <Init_MEMS>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8001304:	210c      	movs	r1, #12
 8001306:	4630      	mov	r0, r6
 8001308:	f008 fc26 	bl	8009b58 <HAL_TIM_OC_Start_IT>
 800130c:	b980      	cbnz	r0, 8001330 <NotifyEventInertial+0x54>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + STBOX1_UPDATE_INV));
 800130e:	6832      	ldr	r2, [r6, #0]
 8001310:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
    InertialTimerEnabled= 1;
 8001314:	2301      	movs	r3, #1
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + STBOX1_UPDATE_INV));
 8001316:	6415      	str	r5, [r2, #64]	; 0x40
    InertialTimerEnabled= 1;
 8001318:	7023      	strb	r3, [r4, #0]
}
 800131a:	bd70      	pop	{r4, r5, r6, pc}
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <NotifyEventInertial+0x64>)
 800131e:	210c      	movs	r1, #12
 8001320:	f008 fce0 	bl	8009ce4 <HAL_TIM_OC_Stop_IT>
 8001324:	b938      	cbnz	r0, 8001336 <NotifyEventInertial+0x5a>
    DeInit_MEMS();
 8001326:	f001 fd03 	bl	8002d30 <DeInit_MEMS>
    InertialTimerEnabled= 0;
 800132a:	2300      	movs	r3, #0
 800132c:	7023      	strb	r3, [r4, #0]
}
 800132e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001330:	f002 fa00 	bl	8003734 <Error_Handler>
 8001334:	e7eb      	b.n	800130e <NotifyEventInertial+0x32>
      Error_Handler();
 8001336:	f002 f9fd 	bl	8003734 <Error_Handler>
 800133a:	e7f4      	b.n	8001326 <NotifyEventInertial+0x4a>
 800133c:	20000e6c 	.word	0x20000e6c
 8001340:	20000e90 	.word	0x20000e90

08001344 <DisconnectionCompletedFunction>:
{
 8001344:	b538      	push	{r3, r4, r5, lr}
  connected = FALSE;
 8001346:	4c22      	ldr	r4, [pc, #136]	; (80013d0 <DisconnectionCompletedFunction+0x8c>)
  if(BatteryTimerEnabled)
 8001348:	78a3      	ldrb	r3, [r4, #2]
  connected = FALSE;
 800134a:	2100      	movs	r1, #0
 800134c:	7061      	strb	r1, [r4, #1]
  if(BatteryTimerEnabled)
 800134e:	bb3b      	cbnz	r3, 80013a0 <DisconnectionCompletedFunction+0x5c>
  if(InertialTimerEnabled){
 8001350:	7823      	ldrb	r3, [r4, #0]
 8001352:	bb73      	cbnz	r3, 80013b2 <DisconnectionCompletedFunction+0x6e>
  BLE_MANAGER_PRINTF("Call to DisconnectionCompletedFunction\r\n");
 8001354:	4c1f      	ldr	r4, [pc, #124]	; (80013d4 <DisconnectionCompletedFunction+0x90>)
 8001356:	4d20      	ldr	r5, [pc, #128]	; (80013d8 <DisconnectionCompletedFunction+0x94>)
 8001358:	f104 0e20 	add.w	lr, r4, #32
 800135c:	46a4      	mov	ip, r4
 800135e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001362:	45f4      	cmp	ip, lr
 8001364:	f105 0510 	add.w	r5, r5, #16
 8001368:	f104 0410 	add.w	r4, r4, #16
 800136c:	f845 0c10 	str.w	r0, [r5, #-16]
 8001370:	f845 1c0c 	str.w	r1, [r5, #-12]
 8001374:	f845 2c08 	str.w	r2, [r5, #-8]
 8001378:	f845 3c04 	str.w	r3, [r5, #-4]
 800137c:	d1ee      	bne.n	800135c <DisconnectionCompletedFunction+0x18>
 800137e:	cc03      	ldmia	r4!, {r0, r1}
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <DisconnectionCompletedFunction+0x98>)
 8001382:	2328      	movs	r3, #40	; 0x28
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	7822      	ldrb	r2, [r4, #0]
 8001388:	6028      	str	r0, [r5, #0]
 800138a:	6069      	str	r1, [r5, #4]
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <DisconnectionCompletedFunction+0x94>)
 800138e:	722a      	strb	r2, [r5, #8]
 8001390:	4619      	mov	r1, r3
 8001392:	f003 f8a7 	bl	80044e4 <CDC_Fill_Buffer>
}
 8001396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  BLE_MANAGER_DELAY(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f004 be66 	b.w	800606c <HAL_Delay>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <DisconnectionCompletedFunction+0x9c>)
 80013a2:	f008 fc9f 	bl	8009ce4 <HAL_TIM_OC_Stop_IT>
 80013a6:	b960      	cbnz	r0, 80013c2 <DisconnectionCompletedFunction+0x7e>
    BatteryTimerEnabled= 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70a3      	strb	r3, [r4, #2]
  if(InertialTimerEnabled){
 80013ac:	7823      	ldrb	r3, [r4, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0d0      	beq.n	8001354 <DisconnectionCompletedFunction+0x10>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <DisconnectionCompletedFunction+0x9c>)
 80013b4:	210c      	movs	r1, #12
 80013b6:	f008 fc95 	bl	8009ce4 <HAL_TIM_OC_Stop_IT>
 80013ba:	b928      	cbnz	r0, 80013c8 <DisconnectionCompletedFunction+0x84>
    InertialTimerEnabled= 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	7023      	strb	r3, [r4, #0]
 80013c0:	e7c8      	b.n	8001354 <DisconnectionCompletedFunction+0x10>
      Error_Handler();
 80013c2:	f002 f9b7 	bl	8003734 <Error_Handler>
 80013c6:	e7ef      	b.n	80013a8 <DisconnectionCompletedFunction+0x64>
      Error_Handler();
 80013c8:	f002 f9b4 	bl	8003734 <Error_Handler>
 80013cc:	e7f6      	b.n	80013bc <DisconnectionCompletedFunction+0x78>
 80013ce:	bf00      	nop
 80013d0:	20000e6c 	.word	0x20000e6c
 80013d4:	08020940 	.word	0x08020940
 80013d8:	200011ac 	.word	0x200011ac
 80013dc:	200012ac 	.word	0x200012ac
 80013e0:	20000e90 	.word	0x20000e90

080013e4 <NotifyEventBattery>:
  if(Event != BLE_NOTIFY_NOTHING)
 80013e4:	b900      	cbnz	r0, 80013e8 <NotifyEventBattery+0x4>
 80013e6:	4770      	bx	lr
  if( (Event == BLE_NOTIFY_SUB) &&
 80013e8:	2801      	cmp	r0, #1
{
 80013ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ec:	4604      	mov	r4, r0
  if( (Event == BLE_NOTIFY_SUB) &&
 80013ee:	d005      	beq.n	80013fc <NotifyEventBattery+0x18>
  if( (Event == BLE_NOTIFY_UNSUB) &&
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d102      	bne.n	80013fa <NotifyEventBattery+0x16>
 80013f4:	4c15      	ldr	r4, [pc, #84]	; (800144c <NotifyEventBattery+0x68>)
 80013f6:	78a3      	ldrb	r3, [r4, #2]
 80013f8:	b9b3      	cbnz	r3, 8001428 <NotifyEventBattery+0x44>
}
 80013fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (!BatteryTimerEnabled) )
 80013fc:	4d13      	ldr	r5, [pc, #76]	; (800144c <NotifyEventBattery+0x68>)
  if( (Event == BLE_NOTIFY_SUB) &&
 80013fe:	78ab      	ldrb	r3, [r5, #2]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1fa      	bne.n	80013fa <NotifyEventBattery+0x16>
    uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8001404:	4f12      	ldr	r7, [pc, #72]	; (8001450 <NotifyEventBattery+0x6c>)
 8001406:	683b      	ldr	r3, [r7, #0]
    BSP_BC_CmdSend(BATMS_ON);
 8001408:	200a      	movs	r0, #10
    uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 800140a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    BSP_BC_CmdSend(BATMS_ON);
 800140c:	f009 fe18 	bl	800b040 <BSP_BC_CmdSend>
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8001410:	2104      	movs	r1, #4
 8001412:	4638      	mov	r0, r7
    BatteryTimerEnabled= 1;
 8001414:	70ac      	strb	r4, [r5, #2]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 8001416:	f008 fb9f 	bl	8009b58 <HAL_TIM_OC_Start_IT>
 800141a:	b980      	cbnz	r0, 800143e <NotifyEventBattery+0x5a>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + STBOX1_UPDATE_BATTERY));
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	f506 561c 	add.w	r6, r6, #9984	; 0x2700
 8001422:	3610      	adds	r6, #16
 8001424:	6396      	str	r6, [r2, #56]	; 0x38
}
 8001426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_BC_CmdSend(BATMS_OFF);
 8001428:	2009      	movs	r0, #9
 800142a:	f009 fe09 	bl	800b040 <BSP_BC_CmdSend>
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_2) != HAL_OK){
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <NotifyEventBattery+0x6c>)
 8001430:	2104      	movs	r1, #4
 8001432:	f008 fc57 	bl	8009ce4 <HAL_TIM_OC_Stop_IT>
 8001436:	b928      	cbnz	r0, 8001444 <NotifyEventBattery+0x60>
    BatteryTimerEnabled= 0;
 8001438:	2300      	movs	r3, #0
 800143a:	70a3      	strb	r3, [r4, #2]
}
 800143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Error_Handler();
 800143e:	f002 f979 	bl	8003734 <Error_Handler>
 8001442:	e7eb      	b.n	800141c <NotifyEventBattery+0x38>
      Error_Handler();
 8001444:	f002 f976 	bl	8003734 <Error_Handler>
 8001448:	e7f6      	b.n	8001438 <NotifyEventBattery+0x54>
 800144a:	bf00      	nop
 800144c:	20000e6c 	.word	0x20000e6c
 8001450:	20000e90 	.word	0x20000e90

08001454 <ConnectionCompletedFunction>:
{
 8001454:	b538      	push	{r3, r4, r5, lr}
  connected = TRUE;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <ConnectionCompletedFunction+0x64>)
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <ConnectionCompletedFunction+0x68>)
  connected = TRUE;
 800145a:	2201      	movs	r2, #1
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 800145c:	2100      	movs	r1, #0
  connected = TRUE;
 800145e:	705a      	strb	r2, [r3, #1]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8001460:	f008 fc40 	bl	8009ce4 <HAL_TIM_OC_Stop_IT>
 8001464:	bb28      	cbnz	r0, 80014b2 <ConnectionCompletedFunction+0x5e>
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 8001466:	4d16      	ldr	r5, [pc, #88]	; (80014c0 <ConnectionCompletedFunction+0x6c>)
 8001468:	4c16      	ldr	r4, [pc, #88]	; (80014c4 <ConnectionCompletedFunction+0x70>)
  LedOffTargetPlatform();
 800146a:	f001 ff73 	bl	8003354 <LedOffTargetPlatform>
  BLE_MANAGER_PRINTF("Call to ConnectionCompletedFunction\r\n");
 800146e:	f105 0e20 	add.w	lr, r5, #32
 8001472:	46ac      	mov	ip, r5
 8001474:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001478:	45f4      	cmp	ip, lr
 800147a:	f104 0410 	add.w	r4, r4, #16
 800147e:	f105 0510 	add.w	r5, r5, #16
 8001482:	f844 0c10 	str.w	r0, [r4, #-16]
 8001486:	f844 1c0c 	str.w	r1, [r4, #-12]
 800148a:	f844 2c08 	str.w	r2, [r4, #-8]
 800148e:	f844 3c04 	str.w	r3, [r4, #-4]
 8001492:	d1ee      	bne.n	8001472 <ConnectionCompletedFunction+0x1e>
 8001494:	6828      	ldr	r0, [r5, #0]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <ConnectionCompletedFunction+0x74>)
 8001498:	6020      	str	r0, [r4, #0]
 800149a:	88aa      	ldrh	r2, [r5, #4]
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <ConnectionCompletedFunction+0x70>)
 800149e:	80a2      	strh	r2, [r4, #4]
 80014a0:	2125      	movs	r1, #37	; 0x25
 80014a2:	6019      	str	r1, [r3, #0]
 80014a4:	f003 f81e 	bl	80044e4 <CDC_Fill_Buffer>
}
 80014a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  BLE_MANAGER_DELAY(100);
 80014ac:	2064      	movs	r0, #100	; 0x64
 80014ae:	f004 bddd 	b.w	800606c <HAL_Delay>
    Error_Handler();
 80014b2:	f002 f93f 	bl	8003734 <Error_Handler>
 80014b6:	e7d6      	b.n	8001466 <ConnectionCompletedFunction+0x12>
 80014b8:	20000e6c 	.word	0x20000e6c
 80014bc:	20000e90 	.word	0x20000e90
 80014c0:	0802096c 	.word	0x0802096c
 80014c4:	200011ac 	.word	0x200011ac
 80014c8:	200012ac 	.word	0x200012ac

080014cc <counted_free>:
      if (ptr != NULL) {
 80014cc:	b118      	cbz	r0, 80014d6 <counted_free+0xa>
          malloc_count--;
 80014ce:	4a03      	ldr	r2, [pc, #12]	; (80014dc <counted_free+0x10>)
 80014d0:	6853      	ldr	r3, [r2, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
      free(ptr);
 80014d6:	f018 b8d9 	b.w	801968c <free>
 80014da:	bf00      	nop
 80014dc:	20000e6c 	.word	0x20000e6c

080014e0 <counted_malloc>:
  {
 80014e0:	b510      	push	{r4, lr}
 80014e2:	4604      	mov	r4, r0
      void *res = malloc(size);
 80014e4:	f018 f8ca 	bl	801967c <malloc>
      if (res != NULL) {
 80014e8:	b130      	cbz	r0, 80014f8 <counted_malloc+0x18>
          malloc_count++;
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <counted_malloc+0x1c>)
          malloc_size+=size;
 80014ec:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
          malloc_count++;
 80014f0:	3101      	adds	r1, #1
          malloc_size+=size;
 80014f2:	4422      	add	r2, r4
 80014f4:	e9c3 1201 	strd	r1, r2, [r3, #4]
  }
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	bf00      	nop
 80014fc:	20000e6c 	.word	0x20000e6c

08001500 <Decompress>:
{
 8001500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t dlen =     compressed[size - 1];
 8001504:	1843      	adds	r3, r0, r1
{
 8001506:	4680      	mov	r8, r0
  uint32_t dlen =     compressed[size - 1];
 8001508:	f813 4c01 	ldrb.w	r4, [r3, #-1]
  BLE_MANAGER_PRINTF("Uncompressed Size =%ld\r\n",un_size);
 800150c:	4e4f      	ldr	r6, [pc, #316]	; (800164c <Decompress+0x14c>)
  dlen = (256*dlen) + compressed[size - 4];
 800150e:	3904      	subs	r1, #4
{
 8001510:	4610      	mov	r0, r2
  dlen = (256*dlen) + compressed[size - 2];
 8001512:	f813 2c02 	ldrb.w	r2, [r3, #-2]
  dlen = (256*dlen) + compressed[size - 3];
 8001516:	f813 3c03 	ldrb.w	r3, [r3, #-3]
  dlen = (256*dlen) + compressed[size - 2];
 800151a:	eb02 2204 	add.w	r2, r2, r4, lsl #8
  dlen = (256*dlen) + compressed[size - 4];
 800151e:	f818 4001 	ldrb.w	r4, [r8, r1]
  dlen = (256*dlen) + compressed[size - 3];
 8001522:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  return dlen+1;  
 8001526:	3401      	adds	r4, #1
 8001528:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
 800152c:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
  BLE_MANAGER_PRINTF("Uncompressed Size =%ld\r\n",un_size);
 8001530:	4622      	mov	r2, r4
  *UnComSize = un_size;
 8001532:	6004      	str	r4, [r0, #0]
  dlen = (256*dlen) + compressed[size - 4];
 8001534:	eb08 0501 	add.w	r5, r8, r1
  BLE_MANAGER_PRINTF("Uncompressed Size =%ld\r\n",un_size);
 8001538:	4845      	ldr	r0, [pc, #276]	; (8001650 <Decompress+0x150>)
 800153a:	4946      	ldr	r1, [pc, #280]	; (8001654 <Decompress+0x154>)
 800153c:	f019 ffe6 	bl	801b50c <siprintf>
 8001540:	4601      	mov	r1, r0
 8001542:	6030      	str	r0, [r6, #0]
 8001544:	4842      	ldr	r0, [pc, #264]	; (8001650 <Decompress+0x150>)
 8001546:	f002 ffcd 	bl	80044e4 <CDC_Fill_Buffer>
  uncompressed = (uint8_t*)calloc(un_size, sizeof(uint8_t));
 800154a:	2101      	movs	r1, #1
 800154c:	4620      	mov	r0, r4
 800154e:	f018 f877 	bl	8019640 <calloc>
  if (uncompressed == NULL) {
 8001552:	4607      	mov	r7, r0
 8001554:	2800      	cmp	r0, #0
 8001556:	d054      	beq.n	8001602 <Decompress+0x102>
  uzlib_uncompress_init(&dest_struct,NULL,0);
 8001558:	2200      	movs	r2, #0
 800155a:	a801      	add	r0, sp, #4
 800155c:	4611      	mov	r1, r2
 800155e:	f011 ffc9 	bl	80134f4 <uzlib_uncompress_init>
  dest_struct.source_read_cb = NULL;
 8001562:	2300      	movs	r3, #0
  res = uzlib_gzip_parse_header(&dest_struct);
 8001564:	a801      	add	r0, sp, #4
  dest_struct.source_limit = compressed + size - 4;
 8001566:	e9cd 8501 	strd	r8, r5, [sp, #4]
  dest_struct.source_read_cb = NULL;
 800156a:	9303      	str	r3, [sp, #12]
  res = uzlib_gzip_parse_header(&dest_struct);
 800156c:	f011 fd7e 	bl	801306c <uzlib_gzip_parse_header>
  if (res != TINF_OK) {
 8001570:	bb90      	cbnz	r0, 80015d8 <Decompress+0xd8>
  dest_struct.dest_start = dest_struct.dest = uncompressed;
 8001572:	e9cd 7706 	strd	r7, r7, [sp, #24]
  while (un_size) {
 8001576:	e006      	b.n	8001586 <Decompress+0x86>
    dest_struct.dest_limit = dest_struct.dest + chunk_len;
 8001578:	9b07      	ldr	r3, [sp, #28]
 800157a:	3301      	adds	r3, #1
    un_size -= chunk_len;
 800157c:	3c01      	subs	r4, #1
    dest_struct.dest_limit = dest_struct.dest + chunk_len;
 800157e:	9308      	str	r3, [sp, #32]
    res = uzlib_uncompress_chksum(&dest_struct);
 8001580:	f012 f954 	bl	801382c <uzlib_uncompress_chksum>
    if (res != TINF_OK) {
 8001584:	bb08      	cbnz	r0, 80015ca <Decompress+0xca>
    res = uzlib_uncompress_chksum(&dest_struct);
 8001586:	a801      	add	r0, sp, #4
  while (un_size) {
 8001588:	2c00      	cmp	r4, #0
 800158a:	d1f5      	bne.n	8001578 <Decompress+0x78>
    BLE_MANAGER_PRINTF("Error in decompressing regConfig\r\n");
 800158c:	4f32      	ldr	r7, [pc, #200]	; (8001658 <Decompress+0x158>)
 800158e:	4d30      	ldr	r5, [pc, #192]	; (8001650 <Decompress+0x150>)
 8001590:	f107 0c20 	add.w	ip, r7, #32
 8001594:	463c      	mov	r4, r7
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	4564      	cmp	r4, ip
 800159a:	6028      	str	r0, [r5, #0]
 800159c:	6069      	str	r1, [r5, #4]
 800159e:	60aa      	str	r2, [r5, #8]
 80015a0:	60eb      	str	r3, [r5, #12]
 80015a2:	f107 0710 	add.w	r7, r7, #16
 80015a6:	f105 0510 	add.w	r5, r5, #16
 80015aa:	d1f3      	bne.n	8001594 <Decompress+0x94>
 80015ac:	883a      	ldrh	r2, [r7, #0]
 80015ae:	78bb      	ldrb	r3, [r7, #2]
 80015b0:	802a      	strh	r2, [r5, #0]
 80015b2:	2122      	movs	r1, #34	; 0x22
 80015b4:	70ab      	strb	r3, [r5, #2]
 80015b6:	4826      	ldr	r0, [pc, #152]	; (8001650 <Decompress+0x150>)
 80015b8:	6031      	str	r1, [r6, #0]
 80015ba:	f002 ff93 	bl	80044e4 <CDC_Fill_Buffer>
    return NULL;
 80015be:	2700      	movs	r7, #0
}
 80015c0:	4638      	mov	r0, r7
 80015c2:	f50d 6da1 	add.w	sp, sp, #1288	; 0x508
 80015c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (res != TINF_DONE) {
 80015ca:	2801      	cmp	r0, #1
 80015cc:	d1de      	bne.n	800158c <Decompress+0x8c>
}
 80015ce:	4638      	mov	r0, r7
 80015d0:	f50d 6da1 	add.w	sp, sp, #1288	; 0x508
 80015d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_MANAGER_PRINTF("Error in decompressing regConfig\r\n");
 80015d8:	4f1f      	ldr	r7, [pc, #124]	; (8001658 <Decompress+0x158>)
 80015da:	4d1d      	ldr	r5, [pc, #116]	; (8001650 <Decompress+0x150>)
 80015dc:	f107 0c20 	add.w	ip, r7, #32
 80015e0:	463c      	mov	r4, r7
 80015e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e4:	4564      	cmp	r4, ip
 80015e6:	f105 0510 	add.w	r5, r5, #16
 80015ea:	f107 0710 	add.w	r7, r7, #16
 80015ee:	f845 0c10 	str.w	r0, [r5, #-16]
 80015f2:	f845 1c0c 	str.w	r1, [r5, #-12]
 80015f6:	f845 2c08 	str.w	r2, [r5, #-8]
 80015fa:	f845 3c04 	str.w	r3, [r5, #-4]
 80015fe:	d1ef      	bne.n	80015e0 <Decompress+0xe0>
 8001600:	e7d4      	b.n	80015ac <Decompress+0xac>
    BLE_MANAGER_PRINTF("Error in memory allocation for decompression\r\n");
 8001602:	4c16      	ldr	r4, [pc, #88]	; (800165c <Decompress+0x15c>)
 8001604:	4d12      	ldr	r5, [pc, #72]	; (8001650 <Decompress+0x150>)
 8001606:	f104 0e20 	add.w	lr, r4, #32
 800160a:	46a4      	mov	ip, r4
 800160c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001610:	45f4      	cmp	ip, lr
 8001612:	f105 0510 	add.w	r5, r5, #16
 8001616:	f104 0410 	add.w	r4, r4, #16
 800161a:	f845 0c10 	str.w	r0, [r5, #-16]
 800161e:	f845 1c0c 	str.w	r1, [r5, #-12]
 8001622:	f845 2c08 	str.w	r2, [r5, #-8]
 8001626:	f845 3c04 	str.w	r3, [r5, #-4]
 800162a:	d1ee      	bne.n	800160a <Decompress+0x10a>
 800162c:	4623      	mov	r3, r4
 800162e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001630:	242e      	movs	r4, #46	; 0x2e
 8001632:	6034      	str	r4, [r6, #0]
 8001634:	60aa      	str	r2, [r5, #8]
 8001636:	881a      	ldrh	r2, [r3, #0]
 8001638:	789b      	ldrb	r3, [r3, #2]
 800163a:	6028      	str	r0, [r5, #0]
 800163c:	6069      	str	r1, [r5, #4]
 800163e:	81aa      	strh	r2, [r5, #12]
 8001640:	4621      	mov	r1, r4
 8001642:	73ab      	strb	r3, [r5, #14]
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <Decompress+0x150>)
 8001646:	f002 ff4d 	bl	80044e4 <CDC_Fill_Buffer>
    return NULL;
 800164a:	e7c0      	b.n	80015ce <Decompress+0xce>
 800164c:	200012ac 	.word	0x200012ac
 8001650:	200011ac 	.word	0x200011ac
 8001654:	08020994 	.word	0x08020994
 8001658:	080209e0 	.word	0x080209e0
 800165c:	080209b0 	.word	0x080209b0

08001660 <MachineLearningCoreReadRequest>:
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 8001662:	4d1f      	ldr	r5, [pc, #124]	; (80016e0 <MachineLearningCoreReadRequest+0x80>)
{
 8001664:	4604      	mov	r4, r0
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 8001666:	6828      	ldr	r0, [r5, #0]
{
 8001668:	b085      	sub	sp, #20
 800166a:	460e      	mov	r6, r1
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 800166c:	3020      	adds	r0, #32
 800166e:	a901      	add	r1, sp, #4
 8001670:	f004 f9de 	bl	8005a30 <lsm6dsox_all_sources_get>
  *mlc_status_mainpage = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8001674:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001678:	f89d 100a 	ldrb.w	r1, [sp, #10]
  STBOX1_PRINTF("Read On MLC\r\n");
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <MachineLearningCoreReadRequest+0x84>)
  *mlc_status_mainpage = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 800167e:	09d8      	lsrs	r0, r3, #7
 8001680:	f3c3 1c40 	ubfx	ip, r3, #5, #1
 8001684:	f3c3 1780 	ubfx	r7, r3, #6, #1
 8001688:	0083      	lsls	r3, r0, #2
 800168a:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800168e:	f001 0101 	and.w	r1, r1, #1
 8001692:	ea43 030c 	orr.w	r3, r3, ip
 8001696:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800169a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
                          (status.mlc1<<4) | (status.mlc2<<5) | (status.mlc3<<6) | (status.mlc4<<7));
 800169e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
 80016a2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016a6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
  STBOX1_PRINTF("Read On MLC\r\n");
 80016aa:	4f0f      	ldr	r7, [pc, #60]	; (80016e8 <MachineLearningCoreReadRequest+0x88>)
  *mlc_status_mainpage = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 80016ac:	7033      	strb	r3, [r6, #0]
  STBOX1_PRINTF("Read On MLC\r\n");
 80016ae:	230d      	movs	r3, #13
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	cf07      	ldmia	r7!, {r0, r1, r2}
 80016b4:	f8df c034 	ldr.w	ip, [pc, #52]	; 80016ec <MachineLearningCoreReadRequest+0x8c>
 80016b8:	f8cc 2008 	str.w	r2, [ip, #8]
 80016bc:	883a      	ldrh	r2, [r7, #0]
 80016be:	f8cc 0000 	str.w	r0, [ip]
 80016c2:	f8cc 1004 	str.w	r1, [ip, #4]
 80016c6:	f8ac 200c 	strh.w	r2, [ip, #12]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4660      	mov	r0, ip
 80016ce:	f002 ff09 	bl	80044e4 <CDC_Fill_Buffer>
  lsm6dsox_mlc_out_get(LSM6DSOX_Contex, mlc_out);
 80016d2:	6828      	ldr	r0, [r5, #0]
 80016d4:	4621      	mov	r1, r4
 80016d6:	3020      	adds	r0, #32
 80016d8:	f004 f8b4 	bl	8005844 <lsm6dsox_mlc_out_get>
}
 80016dc:	b005      	add	sp, #20
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e0:	20001eb4 	.word	0x20001eb4
 80016e4:	200012ac 	.word	0x200012ac
 80016e8:	08020a04 	.word	0x08020a04
 80016ec:	200011ac 	.word	0x200011ac

080016f0 <ActivityRecognitionReadRequest>:
  BLE_MANAGER_PRINTF("Read On AR\r\n");
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <ActivityRecognitionReadRequest+0x54>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <ActivityRecognitionReadRequest+0x58>)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  BLE_MANAGER_PRINTF("Read On AR\r\n");
 80016f6:	f04f 0c0c 	mov.w	ip, #12
 80016fa:	f8c2 c000 	str.w	ip, [r2]
{
 80016fe:	4606      	mov	r6, r0
 8001700:	460d      	mov	r5, r1
  BLE_MANAGER_PRINTF("Read On AR\r\n");
 8001702:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001704:	4c11      	ldr	r4, [pc, #68]	; (800174c <ActivityRecognitionReadRequest+0x5c>)
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 8001706:	4f12      	ldr	r7, [pc, #72]	; (8001750 <ActivityRecognitionReadRequest+0x60>)
  BLE_MANAGER_PRINTF("Read On AR\r\n");
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	6020      	str	r0, [r4, #0]
{
 800170c:	b087      	sub	sp, #28
  BLE_MANAGER_PRINTF("Read On AR\r\n");
 800170e:	6061      	str	r1, [r4, #4]
 8001710:	4620      	mov	r0, r4
 8001712:	4661      	mov	r1, ip
 8001714:	60a2      	str	r2, [r4, #8]
 8001716:	7323      	strb	r3, [r4, #12]
 8001718:	f002 fee4 	bl	80044e4 <CDC_Fill_Buffer>
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	a903      	add	r1, sp, #12
 8001720:	3020      	adds	r0, #32
 8001722:	f004 f985 	bl	8005a30 <lsm6dsox_all_sources_get>
  lsm6dsox_mlc_out_get(LSM6DSOX_Contex, mlc_out);
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	a901      	add	r1, sp, #4
 800172a:	3020      	adds	r0, #32
 800172c:	f004 f88a 	bl	8005844 <lsm6dsox_mlc_out_get>
  *ActivityCode = BLE_MappingToHAR_ouput_t[mlc_out[0]];
 8001730:	4908      	ldr	r1, [pc, #32]	; (8001754 <ActivityRecognitionReadRequest+0x64>)
 8001732:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001736:	5c8a      	ldrb	r2, [r1, r2]
 8001738:	7032      	strb	r2, [r6, #0]
  *Algorithm = HAR_MLC_LSM6DSOX_ID;
 800173a:	2303      	movs	r3, #3
 800173c:	702b      	strb	r3, [r5, #0]
}
 800173e:	b007      	add	sp, #28
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001742:	bf00      	nop
 8001744:	200012ac 	.word	0x200012ac
 8001748:	08020a14 	.word	0x08020a14
 800174c:	200011ac 	.word	0x200011ac
 8001750:	20001eb4 	.word	0x20001eb4
 8001754:	20000000 	.word	0x20000000

08001758 <FiniteStateMachineReadRequest>:
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 800175a:	4e22      	ldr	r6, [pc, #136]	; (80017e4 <FiniteStateMachineReadRequest+0x8c>)
 800175c:	6833      	ldr	r3, [r6, #0]
{
 800175e:	b085      	sub	sp, #20
 8001760:	4604      	mov	r4, r0
 8001762:	460f      	mov	r7, r1
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 8001764:	f103 0020 	add.w	r0, r3, #32
 8001768:	a901      	add	r1, sp, #4
{
 800176a:	4615      	mov	r5, r2
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 800176c:	f004 f960 	bl	8005a30 <lsm6dsox_all_sources_get>
  *fsm_status_a_mainpage = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8001770:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001774:	f89d 2008 	ldrb.w	r2, [sp, #8]
  STBOX1_PRINTF("Read On FSM\r\n");
 8001778:	f8df c074 	ldr.w	ip, [pc, #116]	; 80017f0 <FiniteStateMachineReadRequest+0x98>
  *fsm_status_a_mainpage = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 800177c:	094b      	lsrs	r3, r1, #5
 800177e:	f003 0306 	and.w	r3, r3, #6
 8001782:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001786:	430b      	orrs	r3, r1
 8001788:	f002 0101 	and.w	r1, r2, #1
 800178c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
                            (status.fsm5<<4)  | (status.fsm6<<5)  | (status.fsm7<<6)  | (status.fsm8<<7)  |
 8001790:	f3c2 0140 	ubfx	r1, r2, #1, #1
  *fsm_status_a_mainpage = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8001794:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                            (status.fsm5<<4)  | (status.fsm6<<5)  | (status.fsm7<<6)  | (status.fsm8<<7)  |
 8001798:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800179c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80017a0:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80017a4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80017a8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80017ac:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                            (status.fsm5<<12) | (status.fsm6<<13) | (status.fsm7<<14) | (status.fsm8<<15));
 80017b0:	b2db      	uxtb	r3, r3
  STBOX1_PRINTF("Read On FSM\r\n");
 80017b2:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <FiniteStateMachineReadRequest+0x90>)
  *fsm_status_a_mainpage = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 80017b4:	703b      	strb	r3, [r7, #0]
  *fsm_status_b_mainpage = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 80017b6:	702b      	strb	r3, [r5, #0]
  STBOX1_PRINTF("Read On FSM\r\n");
 80017b8:	250d      	movs	r5, #13
 80017ba:	6015      	str	r5, [r2, #0]
 80017bc:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <FiniteStateMachineReadRequest+0x94>)
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	f8bc 2000 	ldrh.w	r2, [ip]
 80017c8:	6018      	str	r0, [r3, #0]
 80017ca:	6059      	str	r1, [r3, #4]
 80017cc:	819a      	strh	r2, [r3, #12]
 80017ce:	4629      	mov	r1, r5
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fe87 	bl	80044e4 <CDC_Fill_Buffer>
  lsm6dsox_fsm_out_get(LSM6DSOX_Contex,(lsm6dsox_fsm_out_t*)fsm_out);
 80017d6:	6830      	ldr	r0, [r6, #0]
 80017d8:	4621      	mov	r1, r4
 80017da:	3020      	adds	r0, #32
 80017dc:	f004 f8ca 	bl	8005974 <lsm6dsox_fsm_out_get>
}
 80017e0:	b005      	add	sp, #20
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e4:	20001eb4 	.word	0x20001eb4
 80017e8:	200012ac 	.word	0x200012ac
 80017ec:	200011ac 	.word	0x200011ac
 80017f0:	08020a24 	.word	0x08020a24

080017f4 <NotifyEventMachineLearningCore>:
   if(Event == BLE_NOTIFY_SUB){
 80017f4:	2801      	cmp	r0, #1
{
 80017f6:	b538      	push	{r3, r4, r5, lr}
   if(Event == BLE_NOTIFY_SUB){
 80017f8:	d002      	beq.n	8001800 <NotifyEventMachineLearningCore+0xc>
  } else if(Event == BLE_NOTIFY_UNSUB) {
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d013      	beq.n	8001826 <NotifyEventMachineLearningCore+0x32>
}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
     MLC_Enabled= 1;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <NotifyEventMachineLearningCore+0x60>)
    BLE_MANAGER_PRINTF("Start MLC\r\n");
 8001802:	4c15      	ldr	r4, [pc, #84]	; (8001858 <NotifyEventMachineLearningCore+0x64>)
     MLC_Enabled= 1;
 8001804:	7310      	strb	r0, [r2, #12]
    Init_MEMS_MLC(1);
 8001806:	f001 fb21 	bl	8002e4c <Init_MEMS_MLC>
    BLE_MANAGER_PRINTF("Start MLC\r\n");
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <NotifyEventMachineLearningCore+0x68>)
 800180c:	4d14      	ldr	r5, [pc, #80]	; (8001860 <NotifyEventMachineLearningCore+0x6c>)
 800180e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001810:	230b      	movs	r3, #11
 8001812:	602b      	str	r3, [r5, #0]
 8001814:	6020      	str	r0, [r4, #0]
 8001816:	6061      	str	r1, [r4, #4]
 8001818:	60a2      	str	r2, [r4, #8]
 800181a:	4620      	mov	r0, r4
 800181c:	4619      	mov	r1, r3
}
 800181e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Start MLC\r\n");
 8001822:	f002 be5f 	b.w	80044e4 <CDC_Fill_Buffer>
    MLC_Enabled= 0;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <NotifyEventMachineLearningCore+0x60>)
    BLE_MANAGER_PRINTF("Stop MLC\r\n");
 8001828:	4d0d      	ldr	r5, [pc, #52]	; (8001860 <NotifyEventMachineLearningCore+0x6c>)
    MLC_Enabled= 0;
 800182a:	2200      	movs	r2, #0
 800182c:	731a      	strb	r2, [r3, #12]
    DeInit_MEMS();
 800182e:	f001 fa7f 	bl	8002d30 <DeInit_MEMS>
    BLE_MANAGER_PRINTF("Stop MLC\r\n");
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <NotifyEventMachineLearningCore+0x70>)
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <NotifyEventMachineLearningCore+0x64>)
 8001836:	cb03      	ldmia	r3!, {r0, r1}
 8001838:	240a      	movs	r4, #10
 800183a:	602c      	str	r4, [r5, #0]
 800183c:	881d      	ldrh	r5, [r3, #0]
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	6010      	str	r0, [r2, #0]
 8001842:	6051      	str	r1, [r2, #4]
 8001844:	8115      	strh	r5, [r2, #8]
 8001846:	7293      	strb	r3, [r2, #10]
 8001848:	4621      	mov	r1, r4
 800184a:	4610      	mov	r0, r2
}
 800184c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Stop MLC\r\n");
 8001850:	f002 be48 	b.w	80044e4 <CDC_Fill_Buffer>
 8001854:	20000e6c 	.word	0x20000e6c
 8001858:	200011ac 	.word	0x200011ac
 800185c:	08020a34 	.word	0x08020a34
 8001860:	200012ac 	.word	0x200012ac
 8001864:	08020a40 	.word	0x08020a40

08001868 <NotifyEventActRec>:
  if(Event == BLE_NOTIFY_SUB){
 8001868:	2801      	cmp	r0, #1
{
 800186a:	b538      	push	{r3, r4, r5, lr}
 800186c:	4603      	mov	r3, r0
  if(Event == BLE_NOTIFY_SUB){
 800186e:	d002      	beq.n	8001876 <NotifyEventActRec+0xe>
  } else if(Event == BLE_NOTIFY_UNSUB) {
 8001870:	2802      	cmp	r0, #2
 8001872:	d014      	beq.n	800189e <NotifyEventActRec+0x36>
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
    AR_Enabled= 1;
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <NotifyEventActRec+0x64>)
    BLE_MANAGER_PRINTF("Start MLC\r\n");
 8001878:	4c15      	ldr	r4, [pc, #84]	; (80018d0 <NotifyEventActRec+0x68>)
    AR_Enabled= 1;
 800187a:	7353      	strb	r3, [r2, #13]
    Init_MEMS_MLC(0 /* Use Default UCF program -> Activity Recognition */);
 800187c:	2000      	movs	r0, #0
 800187e:	f001 fae5 	bl	8002e4c <Init_MEMS_MLC>
    BLE_MANAGER_PRINTF("Start MLC\r\n");
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <NotifyEventActRec+0x6c>)
 8001884:	4d14      	ldr	r5, [pc, #80]	; (80018d8 <NotifyEventActRec+0x70>)
 8001886:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001888:	230b      	movs	r3, #11
 800188a:	602b      	str	r3, [r5, #0]
 800188c:	6020      	str	r0, [r4, #0]
 800188e:	6061      	str	r1, [r4, #4]
 8001890:	60a2      	str	r2, [r4, #8]
 8001892:	4620      	mov	r0, r4
 8001894:	4619      	mov	r1, r3
}
 8001896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Start MLC\r\n");
 800189a:	f002 be23 	b.w	80044e4 <CDC_Fill_Buffer>
    AR_Enabled= 0;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <NotifyEventActRec+0x64>)
    BLE_MANAGER_PRINTF("Stop MLC\r\n");
 80018a0:	4d0d      	ldr	r5, [pc, #52]	; (80018d8 <NotifyEventActRec+0x70>)
    AR_Enabled= 0;
 80018a2:	2200      	movs	r2, #0
 80018a4:	735a      	strb	r2, [r3, #13]
    DeInit_MEMS();
 80018a6:	f001 fa43 	bl	8002d30 <DeInit_MEMS>
    BLE_MANAGER_PRINTF("Stop MLC\r\n");
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <NotifyEventActRec+0x74>)
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <NotifyEventActRec+0x68>)
 80018ae:	cb03      	ldmia	r3!, {r0, r1}
 80018b0:	240a      	movs	r4, #10
 80018b2:	602c      	str	r4, [r5, #0]
 80018b4:	881d      	ldrh	r5, [r3, #0]
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	6010      	str	r0, [r2, #0]
 80018ba:	6051      	str	r1, [r2, #4]
 80018bc:	8115      	strh	r5, [r2, #8]
 80018be:	7293      	strb	r3, [r2, #10]
 80018c0:	4621      	mov	r1, r4
 80018c2:	4610      	mov	r0, r2
}
 80018c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Stop MLC\r\n");
 80018c8:	f002 be0c 	b.w	80044e4 <CDC_Fill_Buffer>
 80018cc:	20000e6c 	.word	0x20000e6c
 80018d0:	200011ac 	.word	0x200011ac
 80018d4:	08020a34 	.word	0x08020a34
 80018d8:	200012ac 	.word	0x200012ac
 80018dc:	08020a40 	.word	0x08020a40

080018e0 <NotifyEventFiniteStateMachine>:
   if(Event == BLE_NOTIFY_SUB){
 80018e0:	2801      	cmp	r0, #1
{
 80018e2:	b538      	push	{r3, r4, r5, lr}
 80018e4:	4603      	mov	r3, r0
   if(Event == BLE_NOTIFY_SUB){
 80018e6:	d002      	beq.n	80018ee <NotifyEventFiniteStateMachine+0xe>
  } else if(Event == BLE_NOTIFY_UNSUB) {
 80018e8:	2802      	cmp	r0, #2
 80018ea:	d014      	beq.n	8001916 <NotifyEventFiniteStateMachine+0x36>
}
 80018ec:	bd38      	pop	{r3, r4, r5, pc}
    FSM_Enabled= 1;
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <NotifyEventFiniteStateMachine+0x64>)
    BLE_MANAGER_PRINTF("Start FSM\r\n");
 80018f0:	4c15      	ldr	r4, [pc, #84]	; (8001948 <NotifyEventFiniteStateMachine+0x68>)
    FSM_Enabled= 1;
 80018f2:	7393      	strb	r3, [r2, #14]
    Init_MEMS_FSM(0);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f001 fbed 	bl	80030d4 <Init_MEMS_FSM>
    BLE_MANAGER_PRINTF("Start FSM\r\n");
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <NotifyEventFiniteStateMachine+0x6c>)
 80018fc:	4d14      	ldr	r5, [pc, #80]	; (8001950 <NotifyEventFiniteStateMachine+0x70>)
 80018fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001900:	230b      	movs	r3, #11
 8001902:	602b      	str	r3, [r5, #0]
 8001904:	6020      	str	r0, [r4, #0]
 8001906:	6061      	str	r1, [r4, #4]
 8001908:	60a2      	str	r2, [r4, #8]
 800190a:	4620      	mov	r0, r4
 800190c:	4619      	mov	r1, r3
}
 800190e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Start FSM\r\n");
 8001912:	f002 bde7 	b.w	80044e4 <CDC_Fill_Buffer>
    FSM_Enabled= 0;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <NotifyEventFiniteStateMachine+0x64>)
    BLE_MANAGER_PRINTF("Stop FSM\r\n");
 8001918:	4d0d      	ldr	r5, [pc, #52]	; (8001950 <NotifyEventFiniteStateMachine+0x70>)
    FSM_Enabled= 0;
 800191a:	2200      	movs	r2, #0
 800191c:	739a      	strb	r2, [r3, #14]
    DeInit_MEMS();
 800191e:	f001 fa07 	bl	8002d30 <DeInit_MEMS>
    BLE_MANAGER_PRINTF("Stop FSM\r\n");
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <NotifyEventFiniteStateMachine+0x74>)
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <NotifyEventFiniteStateMachine+0x68>)
 8001926:	cb03      	ldmia	r3!, {r0, r1}
 8001928:	240a      	movs	r4, #10
 800192a:	602c      	str	r4, [r5, #0]
 800192c:	881d      	ldrh	r5, [r3, #0]
 800192e:	789b      	ldrb	r3, [r3, #2]
 8001930:	6010      	str	r0, [r2, #0]
 8001932:	6051      	str	r1, [r2, #4]
 8001934:	8115      	strh	r5, [r2, #8]
 8001936:	7293      	strb	r3, [r2, #10]
 8001938:	4621      	mov	r1, r4
 800193a:	4610      	mov	r0, r2
}
 800193c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Stop FSM\r\n");
 8001940:	f002 bdd0 	b.w	80044e4 <CDC_Fill_Buffer>
 8001944:	20000e6c 	.word	0x20000e6c
 8001948:	200011ac 	.word	0x200011ac
 800194c:	08020a4c 	.word	0x08020a4c
 8001950:	200012ac 	.word	0x200012ac
 8001954:	08020a58 	.word	0x08020a58

08001958 <DebugConsoleParsing>:
{
 8001958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 if(SizeOfUpdateBlueFW!=0) {
 800195c:	4a95      	ldr	r2, [pc, #596]	; (8001bb4 <DebugConsoleParsing+0x25c>)
{
 800195e:	ed2d 8b04 	vpush	{d8-d9}
 if(SizeOfUpdateBlueFW!=0) {
 8001962:	6913      	ldr	r3, [r2, #16]
{
 8001964:	b095      	sub	sp, #84	; 0x54
 if(SizeOfUpdateBlueFW!=0) {
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 826e 	bne.w	8001e48 <DebugConsoleParsing+0x4f0>
    if(DecodingOneStream) {
 800196c:	460d      	mov	r5, r1
 800196e:	6951      	ldr	r1, [r2, #20]
 8001970:	9111      	str	r1, [sp, #68]	; 0x44
 8001972:	4604      	mov	r4, r0
 8001974:	2900      	cmp	r1, #0
 8001976:	f000 8274 	beq.w	8001e62 <DebugConsoleParsing+0x50a>
      memcpy(CompressedData+PointerToCompressData,att_data,data_length);
 800197a:	6997      	ldr	r7, [r2, #24]
 800197c:	69d0      	ldr	r0, [r2, #28]
      StreamLength -=data_length;
 800197e:	4e8e      	ldr	r6, [pc, #568]	; (8001bb8 <DebugConsoleParsing+0x260>)
      SendBackData=0;
 8001980:	9311      	str	r3, [sp, #68]	; 0x44
      memcpy(CompressedData+PointerToCompressData,att_data,data_length);
 8001982:	4621      	mov	r1, r4
 8001984:	4438      	add	r0, r7
 8001986:	462a      	mov	r2, r5
 8001988:	f019 ff89 	bl	801b89e <memcpy>
      StreamLength -=data_length;
 800198c:	6933      	ldr	r3, [r6, #16]
      PointerToCompressData+=data_length;
 800198e:	4a89      	ldr	r2, [pc, #548]	; (8001bb4 <DebugConsoleParsing+0x25c>)
      Term_Update(att_data,data_length);
 8001990:	4620      	mov	r0, r4
      StreamLength -=data_length;
 8001992:	1b5b      	subs	r3, r3, r5
      PointerToCompressData+=data_length;
 8001994:	442f      	add	r7, r5
      Term_Update(att_data,data_length);
 8001996:	4629      	mov	r1, r5
      PointerToCompressData+=data_length;
 8001998:	6197      	str	r7, [r2, #24]
      StreamLength -=data_length;
 800199a:	6133      	str	r3, [r6, #16]
      Term_Update(att_data,data_length);
 800199c:	f00b f978 	bl	800cc90 <Term_Update>
  if(StreamLength==0) {
 80019a0:	6934      	ldr	r4, [r6, #16]
 80019a2:	2c00      	cmp	r4, #0
 80019a4:	f040 8257 	bne.w	8001e56 <DebugConsoleParsing+0x4fe>
    BLE_MANAGER_PRINTF("End of Stream\r\n");
 80019a8:	4b84      	ldr	r3, [pc, #528]	; (8001bbc <DebugConsoleParsing+0x264>)
 80019aa:	4d85      	ldr	r5, [pc, #532]	; (8001bc0 <DebugConsoleParsing+0x268>)
 80019ac:	930d      	str	r3, [sp, #52]	; 0x34
 80019ae:	270f      	movs	r7, #15
 80019b0:	601f      	str	r7, [r3, #0]
 80019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b4:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8001bc8 <DebugConsoleParsing+0x270>
 80019b8:	f8c9 0000 	str.w	r0, [r9]
 80019bc:	f8c9 1004 	str.w	r1, [r9, #4]
 80019c0:	4648      	mov	r0, r9
 80019c2:	4639      	mov	r1, r7
 80019c4:	f8c9 300c 	str.w	r3, [r9, #12]
 80019c8:	f8c9 2008 	str.w	r2, [r9, #8]
 80019cc:	f002 fd8a 	bl	80044e4 <CDC_Fill_Buffer>
    DecodingOneStream =0;
 80019d0:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <DebugConsoleParsing+0x25c>)
    BLE_MANAGER_PRINTF("--- Json Start Decompression ---\r\n");
 80019d2:	4f7c      	ldr	r7, [pc, #496]	; (8001bc4 <DebugConsoleParsing+0x26c>)
    DecodingOneStream =0;
 80019d4:	615c      	str	r4, [r3, #20]
    StreamLength = -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019da:	6133      	str	r3, [r6, #16]
    BLE_MANAGER_PRINTF("--- Json Start Decompression ---\r\n");
 80019dc:	464d      	mov	r5, r9
 80019de:	f107 0620 	add.w	r6, r7, #32
 80019e2:	463c      	mov	r4, r7
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	42b4      	cmp	r4, r6
 80019e8:	f105 0510 	add.w	r5, r5, #16
 80019ec:	f107 0710 	add.w	r7, r7, #16
 80019f0:	f845 0c10 	str.w	r0, [r5, #-16]
 80019f4:	f845 1c0c 	str.w	r1, [r5, #-12]
 80019f8:	f845 2c08 	str.w	r2, [r5, #-8]
 80019fc:	f845 3c04 	str.w	r3, [r5, #-4]
 8001a00:	d1ef      	bne.n	80019e2 <DebugConsoleParsing+0x8a>
 8001a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    DeCompressedData = Decompress(CompressedData,PointerToCompressData,&UnComSize);
 8001a04:	4c6b      	ldr	r4, [pc, #428]	; (8001bb4 <DebugConsoleParsing+0x25c>)
    BLE_MANAGER_PRINTF("--- Json Start Decompression ---\r\n");
 8001a06:	4870      	ldr	r0, [pc, #448]	; (8001bc8 <DebugConsoleParsing+0x270>)
    BLE_MANAGER_PRINTF("--- Json End Decompression ---\r\n");
 8001a08:	4e70      	ldr	r6, [pc, #448]	; (8001bcc <DebugConsoleParsing+0x274>)
    BLE_MANAGER_PRINTF("--- Json Start Decompression ---\r\n");
 8001a0a:	2122      	movs	r1, #34	; 0x22
 8001a0c:	6019      	str	r1, [r3, #0]
 8001a0e:	883b      	ldrh	r3, [r7, #0]
 8001a10:	802b      	strh	r3, [r5, #0]
 8001a12:	78bb      	ldrb	r3, [r7, #2]
 8001a14:	70ab      	strb	r3, [r5, #2]
 8001a16:	f002 fd65 	bl	80044e4 <CDC_Fill_Buffer>
    DeCompressedData = Decompress(CompressedData,PointerToCompressData,&UnComSize);
 8001a1a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8001a1e:	aa13      	add	r2, sp, #76	; 0x4c
 8001a20:	f7ff fd6e 	bl	8001500 <Decompress>
    BLE_MANAGER_PRINTF("--- Json End Decompression ---\r\n");
 8001a24:	4d68      	ldr	r5, [pc, #416]	; (8001bc8 <DebugConsoleParsing+0x270>)
    DeCompressedData = Decompress(CompressedData,PointerToCompressData,&UnComSize);
 8001a26:	6220      	str	r0, [r4, #32]
    BLE_MANAGER_PRINTF("--- Json End Decompression ---\r\n");
 8001a28:	f106 0720 	add.w	r7, r6, #32
 8001a2c:	4634      	mov	r4, r6
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	42bc      	cmp	r4, r7
 8001a32:	f105 0510 	add.w	r5, r5, #16
 8001a36:	f106 0610 	add.w	r6, r6, #16
 8001a3a:	f845 0c10 	str.w	r0, [r5, #-16]
 8001a3e:	f845 1c0c 	str.w	r1, [r5, #-12]
 8001a42:	f845 2c08 	str.w	r2, [r5, #-8]
 8001a46:	f845 3c04 	str.w	r3, [r5, #-4]
 8001a4a:	d1ef      	bne.n	8001a2c <DebugConsoleParsing+0xd4>
 8001a4c:	7833      	ldrb	r3, [r6, #0]
 8001a4e:	702b      	strb	r3, [r5, #0]
 8001a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    free(CompressedData);
 8001a52:	4c58      	ldr	r4, [pc, #352]	; (8001bb4 <DebugConsoleParsing+0x25c>)
    BLE_MANAGER_PRINTF("--- Json End Decompression ---\r\n");
 8001a54:	485c      	ldr	r0, [pc, #368]	; (8001bc8 <DebugConsoleParsing+0x270>)
 8001a56:	2120      	movs	r1, #32
 8001a58:	6019      	str	r1, [r3, #0]
 8001a5a:	f002 fd43 	bl	80044e4 <CDC_Fill_Buffer>
    free(CompressedData);
 8001a5e:	69e0      	ldr	r0, [r4, #28]
 8001a60:	f017 fe14 	bl	801968c <free>
    if(DeCompressedData==NULL) {
 8001a64:	6a23      	ldr	r3, [r4, #32]
    CompressedData = NULL;
 8001a66:	2500      	movs	r5, #0
    PointerToCompressData=0;
 8001a68:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if(DeCompressedData==NULL) {
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 837a 	beq.w	8002166 <DebugConsoleParsing+0x80e>
      BLE_MANAGER_PRINTF("--- Json Start Parsing ---\r\n");
 8001a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a74:	4c56      	ldr	r4, [pc, #344]	; (8001bd0 <DebugConsoleParsing+0x278>)
 8001a76:	261c      	movs	r6, #28
 8001a78:	601e      	str	r6, [r3, #0]
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	f8c9 0000 	str.w	r0, [r9]
 8001a80:	f8c9 1004 	str.w	r1, [r9, #4]
 8001a84:	f8c9 2008 	str.w	r2, [r9, #8]
 8001a88:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a8a:	f8c9 300c 	str.w	r3, [r9, #12]
 8001a8e:	f8c9 0010 	str.w	r0, [r9, #16]
 8001a92:	7823      	ldrb	r3, [r4, #0]
 8001a94:	f8c9 1014 	str.w	r1, [r9, #20]
      root_value = json_parse_string((char *)DeCompressedData);
 8001a98:	4c46      	ldr	r4, [pc, #280]	; (8001bb4 <DebugConsoleParsing+0x25c>)
      BLE_MANAGER_PRINTF("--- Json Start Parsing ---\r\n");
 8001a9a:	484b      	ldr	r0, [pc, #300]	; (8001bc8 <DebugConsoleParsing+0x270>)
 8001a9c:	f8c9 2018 	str.w	r2, [r9, #24]
 8001aa0:	4631      	mov	r1, r6
 8001aa2:	f889 301c 	strb.w	r3, [r9, #28]
 8001aa6:	f002 fd1d 	bl	80044e4 <CDC_Fill_Buffer>
      json_set_allocation_functions(counted_malloc, counted_free);
 8001aaa:	494a      	ldr	r1, [pc, #296]	; (8001bd4 <DebugConsoleParsing+0x27c>)
 8001aac:	484a      	ldr	r0, [pc, #296]	; (8001bd8 <DebugConsoleParsing+0x280>)
 8001aae:	f010 fbc9 	bl	8012244 <json_set_allocation_functions>
      root_value = json_parse_string((char *)DeCompressedData);
 8001ab2:	6a20      	ldr	r0, [r4, #32]
 8001ab4:	f010 f958 	bl	8011d68 <json_parse_string>
 8001ab8:	4606      	mov	r6, r0
 8001aba:	ee09 0a10 	vmov	s18, r0
      free(DeCompressedData);
 8001abe:	6a20      	ldr	r0, [r4, #32]
 8001ac0:	f017 fde4 	bl	801968c <free>
      if(json_value_get_type(root_value) == JSONArray){
 8001ac4:	4630      	mov	r0, r6
      DeCompressedData = NULL;
 8001ac6:	6225      	str	r5, [r4, #32]
      if(json_value_get_type(root_value) == JSONArray){
 8001ac8:	f00f fc38 	bl	801133c <json_value_get_type>
 8001acc:	2805      	cmp	r0, #5
 8001ace:	f000 837e 	beq.w	80021ce <DebugConsoleParsing+0x876>
      flows = json_value_get_array(root_value);
 8001ad2:	ee19 0a10 	vmov	r0, s18
 8001ad6:	f00f fc3f 	bl	8011358 <json_value_get_array>
 8001ada:	ee08 0a90 	vmov	s17, r0
      BLE_MANAGER_PRINTF("Num flows=%d\r\n",json_array_get_count(flows));
 8001ade:	f00f fc29 	bl	8011334 <json_array_get_count>
 8001ae2:	493e      	ldr	r1, [pc, #248]	; (8001bdc <DebugConsoleParsing+0x284>)
        BLE_MANAGER_PRINTF("\tNumElementFlow=%d\r\n",json_object_get_count(flow));
 8001ae4:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8001bc8 <DebugConsoleParsing+0x270>
      BLE_MANAGER_PRINTF("Num flows=%d\r\n",json_array_get_count(flows));
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4837      	ldr	r0, [pc, #220]	; (8001bc8 <DebugConsoleParsing+0x270>)
 8001aec:	f019 fd0e 	bl	801b50c <siprintf>
 8001af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001af2:	4601      	mov	r1, r0
 8001af4:	6018      	str	r0, [r3, #0]
 8001af6:	4834      	ldr	r0, [pc, #208]	; (8001bc8 <DebugConsoleParsing+0x270>)
 8001af8:	f002 fcf4 	bl	80044e4 <CDC_Fill_Buffer>
      for(NumFlows=0; NumFlows<json_array_get_count(flows);NumFlows++) {
 8001afc:	2300      	movs	r3, #0
 8001afe:	ee18 0a90 	vmov	r0, s17
 8001b02:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b04:	f00f fc16 	bl	8011334 <json_array_get_count>
 8001b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b0a:	4298      	cmp	r0, r3
 8001b0c:	f240 8235 	bls.w	8001f7a <DebugConsoleParsing+0x622>
        flow = json_array_get_object(flows, NumFlows);
 8001b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001b12:	ee18 0a90 	vmov	r0, s17
 8001b16:	f00f fbfd 	bl	8011314 <json_array_get_object>
 8001b1a:	4606      	mov	r6, r0
        BLE_MANAGER_PRINTF("\tNumElementFlow=%d\r\n",json_object_get_count(flow));
 8001b1c:	f00f fbe4 	bl	80112e8 <json_object_get_count>
 8001b20:	492f      	ldr	r1, [pc, #188]	; (8001be0 <DebugConsoleParsing+0x288>)
 8001b22:	4602      	mov	r2, r0
 8001b24:	4658      	mov	r0, fp
 8001b26:	f019 fcf1 	bl	801b50c <siprintf>
 8001b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	6018      	str	r0, [r3, #0]
 8001b30:	4658      	mov	r0, fp
 8001b32:	f002 fcd7 	bl	80044e4 <CDC_Fill_Buffer>
        for(NumElementFlow=0;NumElementFlow<json_object_get_count(flow);NumElementFlow++) {
 8001b36:	f04f 0800 	mov.w	r8, #0
 8001b3a:	46b2      	mov	sl, r6
 8001b3c:	e001      	b.n	8001b42 <DebugConsoleParsing+0x1ea>
 8001b3e:	f108 0801 	add.w	r8, r8, #1
 8001b42:	4650      	mov	r0, sl
 8001b44:	f00f fbd0 	bl	80112e8 <json_object_get_count>
 8001b48:	4540      	cmp	r0, r8
 8001b4a:	f240 820b 	bls.w	8001f64 <DebugConsoleParsing+0x60c>
          BLE_MANAGER_PRINTF("\tElementName=%s\r\n",json_object_get_name(flow,NumElementFlow));
 8001b4e:	4641      	mov	r1, r8
 8001b50:	4650      	mov	r0, sl
 8001b52:	f00f fbcd 	bl	80112f0 <json_object_get_name>
 8001b56:	4923      	ldr	r1, [pc, #140]	; (8001be4 <DebugConsoleParsing+0x28c>)
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4658      	mov	r0, fp
 8001b5c:	f019 fcd6 	bl	801b50c <siprintf>
 8001b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b62:	4601      	mov	r1, r0
 8001b64:	6018      	str	r0, [r3, #0]
 8001b66:	4658      	mov	r0, fp
 8001b68:	f002 fcbc 	bl	80044e4 <CDC_Fill_Buffer>
           if(!strncmp("sensors",json_object_get_name(flow,NumElementFlow),7)) {
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	4650      	mov	r0, sl
 8001b70:	f00f fbbe 	bl	80112f0 <json_object_get_name>
 8001b74:	2207      	movs	r2, #7
 8001b76:	4601      	mov	r1, r0
 8001b78:	481b      	ldr	r0, [pc, #108]	; (8001be8 <DebugConsoleParsing+0x290>)
 8001b7a:	f019 fdee 	bl	801b75a <strncmp>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d1dc      	bne.n	8001b3e <DebugConsoleParsing+0x1e6>
             SensorsArray = json_object_get_array  (flow, "sensors");
 8001b84:	4918      	ldr	r1, [pc, #96]	; (8001be8 <DebugConsoleParsing+0x290>)
 8001b86:	4650      	mov	r0, sl
 8001b88:	f00f fb40 	bl	801120c <json_object_get_array>
 8001b8c:	4607      	mov	r7, r0
             BLE_MANAGER_PRINTF("\t\tNumSensors=%d\r\n",json_array_get_count(SensorsArray));
 8001b8e:	f00f fbd1 	bl	8011334 <json_array_get_count>
 8001b92:	4916      	ldr	r1, [pc, #88]	; (8001bec <DebugConsoleParsing+0x294>)
 8001b94:	4602      	mov	r2, r0
 8001b96:	4658      	mov	r0, fp
 8001b98:	f019 fcb8 	bl	801b50c <siprintf>
 8001b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	6018      	str	r0, [r3, #0]
 8001ba2:	4658      	mov	r0, fp
 8001ba4:	f002 fc9e 	bl	80044e4 <CDC_Fill_Buffer>
             for(NumSensors=0;NumSensors<json_array_get_count(SensorsArray);NumSensors++) {
 8001ba8:	ee08 aa10 	vmov	s16, sl
 8001bac:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8001bb0:	e0aa      	b.n	8001d08 <DebugConsoleParsing+0x3b0>
 8001bb2:	bf00      	nop
 8001bb4:	20000e6c 	.word	0x20000e6c
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	200012ac 	.word	0x200012ac
 8001bc0:	08020d98 	.word	0x08020d98
 8001bc4:	08020da8 	.word	0x08020da8
 8001bc8:	200011ac 	.word	0x200011ac
 8001bcc:	08020dcc 	.word	0x08020dcc
 8001bd0:	08020e00 	.word	0x08020e00
 8001bd4:	080014cd 	.word	0x080014cd
 8001bd8:	080014e1 	.word	0x080014e1
 8001bdc:	08020e34 	.word	0x08020e34
 8001be0:	08020e44 	.word	0x08020e44
 8001be4:	08020e5c 	.word	0x08020e5c
 8001be8:	08020e70 	.word	0x08020e70
 8001bec:	08020e78 	.word	0x08020e78
               if(!strncmp("S12",json_object_get_string(Sensor,"id"),3)) {
 8001bf0:	7843      	ldrb	r3, [r0, #1]
 8001bf2:	2b31      	cmp	r3, #49	; 0x31
 8001bf4:	f040 809a 	bne.w	8001d2c <DebugConsoleParsing+0x3d4>
 8001bf8:	7883      	ldrb	r3, [r0, #2]
 8001bfa:	2b32      	cmp	r3, #50	; 0x32
 8001bfc:	f040 8096 	bne.w	8001d2c <DebugConsoleParsing+0x3d4>
                 BLE_MANAGER_PRINTF("\t\t\tMLC Sensor ID found\r\n");
 8001c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c02:	4ebe      	ldr	r6, [pc, #760]	; (8001efc <DebugConsoleParsing+0x5a4>)
 8001c04:	f04f 0c18 	mov.w	ip, #24
 8001c08:	f8c3 c000 	str.w	ip, [r3]
 8001c0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c0e:	f8c9 0000 	str.w	r0, [r9]
 8001c12:	f8c9 1004 	str.w	r1, [r9, #4]
 8001c16:	ce03      	ldmia	r6!, {r0, r1}
 8001c18:	f8c9 300c 	str.w	r3, [r9, #12]
 8001c1c:	f8c9 0010 	str.w	r0, [r9, #16]
 8001c20:	7833      	ldrb	r3, [r6, #0]
 8001c22:	f8c9 1014 	str.w	r1, [r9, #20]
 8001c26:	4658      	mov	r0, fp
 8001c28:	4661      	mov	r1, ip
 8001c2a:	f8c9 2008 	str.w	r2, [r9, #8]
 8001c2e:	f889 3018 	strb.w	r3, [r9, #24]
 8001c32:	f002 fc57 	bl	80044e4 <CDC_Fill_Buffer>
                 regConfig = json_object_dotget_string(Sensor,"configuration.regConfig");
 8001c36:	49b2      	ldr	r1, [pc, #712]	; (8001f00 <DebugConsoleParsing+0x5a8>)
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f00f fb23 	bl	8011284 <json_object_dotget_string>
                 if(regConfig!=NULL) {
 8001c3e:	4606      	mov	r6, r0
 8001c40:	b380      	cbz	r0, 8001ca4 <DebugConsoleParsing+0x34c>
                   uint32_t Length = strlen(regConfig);
 8001c42:	f7fe fb3d 	bl	80002c0 <strlen>
                   BLE_MANAGER_PRINTF("\t\t\tMLC Reg Config [%ld] found\r\n",Length);
 8001c46:	49af      	ldr	r1, [pc, #700]	; (8001f04 <DebugConsoleParsing+0x5ac>)
 8001c48:	4602      	mov	r2, r0
                   uint32_t Length = strlen(regConfig);
 8001c4a:	4680      	mov	r8, r0
                   BLE_MANAGER_PRINTF("\t\t\tMLC Reg Config [%ld] found\r\n",Length);
 8001c4c:	4658      	mov	r0, fp
 8001c4e:	f019 fc5d 	bl	801b50c <siprintf>
 8001c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c54:	4601      	mov	r1, r0
 8001c56:	6018      	str	r0, [r3, #0]
 8001c58:	4658      	mov	r0, fp
 8001c5a:	f002 fc43 	bl	80044e4 <CDC_Fill_Buffer>
                   if(Length&0x3) {
 8001c5e:	f018 0303 	ands.w	r3, r8, #3
 8001c62:	f040 81cb 	bne.w	8001ffc <DebugConsoleParsing+0x6a4>
                     if(MLCCustomUCFFile!=NULL) {
 8001c66:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8001f58 <DebugConsoleParsing+0x600>
 8001c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8001c6c:	f8da 0000 	ldr.w	r0, [sl]
 8001c70:	b120      	cbz	r0, 8001c7c <DebugConsoleParsing+0x324>
                       free(MLCCustomUCFFile);
 8001c72:	f017 fd0b 	bl	801968c <free>
                       MLCCustomUCFFileLength=0;
 8001c76:	4aa4      	ldr	r2, [pc, #656]	; (8001f08 <DebugConsoleParsing+0x5b0>)
 8001c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c7a:	6013      	str	r3, [r2, #0]
                     MLCCustomUCFFile = (ucf_line_t*)calloc(Length>>2, sizeof(ucf_line_t));
 8001c7c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	2102      	movs	r1, #2
 8001c84:	930e      	str	r3, [sp, #56]	; 0x38
 8001c86:	f017 fcdb 	bl	8019640 <calloc>
                     if (MLCCustomUCFFile == NULL) {
 8001c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                     MLCCustomUCFFile = (ucf_line_t*)calloc(Length>>2, sizeof(ucf_line_t));
 8001c8c:	f8ca 0000 	str.w	r0, [sl]
 8001c90:	4602      	mov	r2, r0
                     if (MLCCustomUCFFile == NULL) {
 8001c92:	2800      	cmp	r0, #0
 8001c94:	f000 8400 	beq.w	8002498 <DebugConsoleParsing+0xb40>
                       FromHexToUCF(regConfig, Length, MLCCustomUCFFile);
 8001c98:	4630      	mov	r0, r6
                       MLCCustomUCFFileLength = Length>>2;
 8001c9a:	4e9b      	ldr	r6, [pc, #620]	; (8001f08 <DebugConsoleParsing+0x5b0>)
                       FromHexToUCF(regConfig, Length, MLCCustomUCFFile);
 8001c9c:	4641      	mov	r1, r8
                       MLCCustomUCFFileLength = Length>>2;
 8001c9e:	6033      	str	r3, [r6, #0]
                       FromHexToUCF(regConfig, Length, MLCCustomUCFFile);
 8001ca0:	f7ff fa74 	bl	800118c <FromHexToUCF>
                 mlcLabels = json_object_dotget_string(Sensor,"configuration.mlcLabels");
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	4999      	ldr	r1, [pc, #612]	; (8001f0c <DebugConsoleParsing+0x5b4>)
 8001ca8:	f00f faec 	bl	8011284 <json_object_dotget_string>
                 if(mlcLabels!=NULL) {
 8001cac:	4605      	mov	r5, r0
 8001cae:	b350      	cbz	r0, 8001d06 <DebugConsoleParsing+0x3ae>
                   uint32_t Length = strlen(mlcLabels);
 8001cb0:	f7fe fb06 	bl	80002c0 <strlen>
                   BLE_MANAGER_PRINTF("\t\t\tMLC Labels [%ld] found\r\n",Length);
 8001cb4:	4996      	ldr	r1, [pc, #600]	; (8001f10 <DebugConsoleParsing+0x5b8>)
                    if(MLCCustomLabels!=NULL) {
 8001cb6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8001f5c <DebugConsoleParsing+0x604>
                   BLE_MANAGER_PRINTF("\t\t\tMLC Labels [%ld] found\r\n",Length);
 8001cba:	4602      	mov	r2, r0
                   uint32_t Length = strlen(mlcLabels);
 8001cbc:	4606      	mov	r6, r0
                   BLE_MANAGER_PRINTF("\t\t\tMLC Labels [%ld] found\r\n",Length);
 8001cbe:	4658      	mov	r0, fp
 8001cc0:	f019 fc24 	bl	801b50c <siprintf>
 8001cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	6018      	str	r0, [r3, #0]
 8001cca:	4658      	mov	r0, fp
 8001ccc:	f002 fc0a 	bl	80044e4 <CDC_Fill_Buffer>
                    if(MLCCustomLabels!=NULL) {
 8001cd0:	f8d8 0000 	ldr.w	r0, [r8]
 8001cd4:	b108      	cbz	r0, 8001cda <DebugConsoleParsing+0x382>
                      free(MLCCustomLabels);
 8001cd6:	f017 fcd9 	bl	801968c <free>
                    MLCCustomLabels = (char *)calloc(Length+1, sizeof(char));
 8001cda:	1c73      	adds	r3, r6, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	2101      	movs	r1, #1
 8001ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8001ce2:	f017 fcad 	bl	8019640 <calloc>
                    if (MLCCustomLabels == NULL) {
 8001ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    MLCCustomLabels = (char *)calloc(Length+1, sizeof(char));
 8001ce8:	f8c8 0000 	str.w	r0, [r8]
 8001cec:	4682      	mov	sl, r0
                    if (MLCCustomLabels == NULL) {
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f000 83ae 	beq.w	8002450 <DebugConsoleParsing+0xaf8>
                      MLCCustomLabelsLength = Length+1;
 8001cf4:	4a87      	ldr	r2, [pc, #540]	; (8001f14 <DebugConsoleParsing+0x5bc>)
                      memcpy(MLCCustomLabels,mlcLabels,Length);
 8001cf6:	4629      	mov	r1, r5
                      MLCCustomLabelsLength = Length+1;
 8001cf8:	6013      	str	r3, [r2, #0]
                      memcpy(MLCCustomLabels,mlcLabels,Length);
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	f019 fdcf 	bl	801b89e <memcpy>
                      MLCCustomLabels[Length]='\n';
 8001d00:	230a      	movs	r3, #10
 8001d02:	f80a 3006 	strb.w	r3, [sl, r6]
             for(NumSensors=0;NumSensors<json_array_get_count(SensorsArray);NumSensors++) {
 8001d06:	3401      	adds	r4, #1
 8001d08:	4638      	mov	r0, r7
 8001d0a:	f00f fb13 	bl	8011334 <json_array_get_count>
 8001d0e:	42a0      	cmp	r0, r4
 8001d10:	f240 80ee 	bls.w	8001ef0 <DebugConsoleParsing+0x598>
               Sensor = json_array_get_object(SensorsArray, NumSensors);
 8001d14:	4621      	mov	r1, r4
 8001d16:	4638      	mov	r0, r7
 8001d18:	f00f fafc 	bl	8011314 <json_array_get_object>
               if(!strncmp("S12",json_object_get_string(Sensor,"id"),3)) {
 8001d1c:	497e      	ldr	r1, [pc, #504]	; (8001f18 <DebugConsoleParsing+0x5c0>)
               Sensor = json_array_get_object(SensorsArray, NumSensors);
 8001d1e:	4605      	mov	r5, r0
               if(!strncmp("S12",json_object_get_string(Sensor,"id"),3)) {
 8001d20:	f00f fa5c 	bl	80111dc <json_object_get_string>
 8001d24:	7803      	ldrb	r3, [r0, #0]
 8001d26:	2b53      	cmp	r3, #83	; 0x53
 8001d28:	f43f af62 	beq.w	8001bf0 <DebugConsoleParsing+0x298>
               } else if(!strncmp("S13",json_object_get_string(Sensor,"id"),3)) {
 8001d2c:	497a      	ldr	r1, [pc, #488]	; (8001f18 <DebugConsoleParsing+0x5c0>)
 8001d2e:	4628      	mov	r0, r5
 8001d30:	f00f fa54 	bl	80111dc <json_object_get_string>
 8001d34:	7803      	ldrb	r3, [r0, #0]
 8001d36:	2b53      	cmp	r3, #83	; 0x53
 8001d38:	d1e5      	bne.n	8001d06 <DebugConsoleParsing+0x3ae>
 8001d3a:	7843      	ldrb	r3, [r0, #1]
 8001d3c:	2b31      	cmp	r3, #49	; 0x31
 8001d3e:	d1e2      	bne.n	8001d06 <DebugConsoleParsing+0x3ae>
 8001d40:	7883      	ldrb	r3, [r0, #2]
 8001d42:	2b33      	cmp	r3, #51	; 0x33
 8001d44:	d1df      	bne.n	8001d06 <DebugConsoleParsing+0x3ae>
                 BLE_MANAGER_PRINTF("\t\t\tFSM Sensor ID found\r\n");
 8001d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d48:	4e74      	ldr	r6, [pc, #464]	; (8001f1c <DebugConsoleParsing+0x5c4>)
 8001d4a:	f04f 0c18 	mov.w	ip, #24
 8001d4e:	f8c3 c000 	str.w	ip, [r3]
 8001d52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d54:	f8c9 0000 	str.w	r0, [r9]
 8001d58:	f8c9 1004 	str.w	r1, [r9, #4]
 8001d5c:	ce03      	ldmia	r6!, {r0, r1}
 8001d5e:	f8c9 300c 	str.w	r3, [r9, #12]
 8001d62:	f8c9 0010 	str.w	r0, [r9, #16]
 8001d66:	7833      	ldrb	r3, [r6, #0]
 8001d68:	f8c9 1014 	str.w	r1, [r9, #20]
 8001d6c:	4658      	mov	r0, fp
 8001d6e:	4661      	mov	r1, ip
 8001d70:	f8c9 2008 	str.w	r2, [r9, #8]
 8001d74:	f889 3018 	strb.w	r3, [r9, #24]
 8001d78:	f002 fbb4 	bl	80044e4 <CDC_Fill_Buffer>
                 regConfig = json_object_dotget_string(Sensor,"configuration.regConfig");
 8001d7c:	4960      	ldr	r1, [pc, #384]	; (8001f00 <DebugConsoleParsing+0x5a8>)
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f00f fa80 	bl	8011284 <json_object_dotget_string>
                 if(regConfig!=NULL) {
 8001d84:	4606      	mov	r6, r0
 8001d86:	b360      	cbz	r0, 8001de2 <DebugConsoleParsing+0x48a>
                   uint32_t Length = strlen(regConfig);
 8001d88:	f7fe fa9a 	bl	80002c0 <strlen>
                   BLE_MANAGER_PRINTF("\t\t\tFSM Reg Config [%ld] found\r\n",Length);
 8001d8c:	4964      	ldr	r1, [pc, #400]	; (8001f20 <DebugConsoleParsing+0x5c8>)
 8001d8e:	4602      	mov	r2, r0
                   uint32_t Length = strlen(regConfig);
 8001d90:	4680      	mov	r8, r0
                   BLE_MANAGER_PRINTF("\t\t\tFSM Reg Config [%ld] found\r\n",Length);
 8001d92:	4658      	mov	r0, fp
 8001d94:	f019 fbba 	bl	801b50c <siprintf>
 8001d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	6018      	str	r0, [r3, #0]
 8001d9e:	4658      	mov	r0, fp
 8001da0:	f002 fba0 	bl	80044e4 <CDC_Fill_Buffer>
                   if(Length&0x3) {
 8001da4:	f018 0a03 	ands.w	sl, r8, #3
 8001da8:	f040 814e 	bne.w	8002048 <DebugConsoleParsing+0x6f0>
                     if(FSMCustomUCFFile!=NULL) {
 8001dac:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <DebugConsoleParsing+0x5cc>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	b120      	cbz	r0, 8001dbc <DebugConsoleParsing+0x464>
                       free(FSMCustomUCFFile);
 8001db2:	f017 fc6b 	bl	801968c <free>
                       FSMCustomUCFFileLength=0;
 8001db6:	4a5c      	ldr	r2, [pc, #368]	; (8001f28 <DebugConsoleParsing+0x5d0>)
 8001db8:	f8c2 a000 	str.w	sl, [r2]
                     FSMCustomUCFFile = (ucf_line_t*)calloc(Length>>2, sizeof(ucf_line_t));
 8001dbc:	ea4f 0a98 	mov.w	sl, r8, lsr #2
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4650      	mov	r0, sl
 8001dc4:	f017 fc3c 	bl	8019640 <calloc>
 8001dc8:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <DebugConsoleParsing+0x5cc>)
 8001dca:	4602      	mov	r2, r0
 8001dcc:	6018      	str	r0, [r3, #0]
                     if (FSMCustomUCFFile == NULL) {
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	f000 838b 	beq.w	80024ea <DebugConsoleParsing+0xb92>
                       FromHexToUCF(regConfig, Length, FSMCustomUCFFile);
 8001dd4:	4630      	mov	r0, r6
                       FSMCustomUCFFileLength = Length>>2;
 8001dd6:	4e54      	ldr	r6, [pc, #336]	; (8001f28 <DebugConsoleParsing+0x5d0>)
                       FromHexToUCF(regConfig, Length, FSMCustomUCFFile);
 8001dd8:	4641      	mov	r1, r8
                       FSMCustomUCFFileLength = Length>>2;
 8001dda:	f8c6 a000 	str.w	sl, [r6]
                       FromHexToUCF(regConfig, Length, FSMCustomUCFFile);
 8001dde:	f7ff f9d5 	bl	800118c <FromHexToUCF>
                 fsmLabels = json_object_dotget_string(Sensor,"configuration.fsmLabels");
 8001de2:	4628      	mov	r0, r5
 8001de4:	4951      	ldr	r1, [pc, #324]	; (8001f2c <DebugConsoleParsing+0x5d4>)
 8001de6:	f00f fa4d 	bl	8011284 <json_object_dotget_string>
                 if(fsmLabels!=NULL) {
 8001dea:	4605      	mov	r5, r0
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d08a      	beq.n	8001d06 <DebugConsoleParsing+0x3ae>
                   uint32_t Length = strlen(fsmLabels);
 8001df0:	f7fe fa66 	bl	80002c0 <strlen>
                   BLE_MANAGER_PRINTF("\t\t\tFSM Labels [%ld] found\r\n",Length);
 8001df4:	494e      	ldr	r1, [pc, #312]	; (8001f30 <DebugConsoleParsing+0x5d8>)
                    if(FSMCustomLabels!=NULL) {
 8001df6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001f60 <DebugConsoleParsing+0x608>
                   BLE_MANAGER_PRINTF("\t\t\tFSM Labels [%ld] found\r\n",Length);
 8001dfa:	4602      	mov	r2, r0
                   uint32_t Length = strlen(fsmLabels);
 8001dfc:	4606      	mov	r6, r0
                   BLE_MANAGER_PRINTF("\t\t\tFSM Labels [%ld] found\r\n",Length);
 8001dfe:	4658      	mov	r0, fp
 8001e00:	f019 fb84 	bl	801b50c <siprintf>
 8001e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e06:	4601      	mov	r1, r0
 8001e08:	6018      	str	r0, [r3, #0]
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f002 fb6a 	bl	80044e4 <CDC_Fill_Buffer>
                    if(FSMCustomLabels!=NULL) {
 8001e10:	f8d8 0000 	ldr.w	r0, [r8]
 8001e14:	b108      	cbz	r0, 8001e1a <DebugConsoleParsing+0x4c2>
                      free(FSMCustomLabels);
 8001e16:	f017 fc39 	bl	801968c <free>
                    FSMCustomLabels = (char *)calloc(Length+1, sizeof(char));
 8001e1a:	1c72      	adds	r2, r6, #1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	2101      	movs	r1, #1
 8001e20:	920e      	str	r2, [sp, #56]	; 0x38
 8001e22:	f017 fc0d 	bl	8019640 <calloc>
                    if (FSMCustomLabels == NULL) {
 8001e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    FSMCustomLabels = (char *)calloc(Length+1, sizeof(char));
 8001e28:	f8c8 0000 	str.w	r0, [r8]
 8001e2c:	4682      	mov	sl, r0
                    if (FSMCustomLabels == NULL) {
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	f000 8383 	beq.w	800253a <DebugConsoleParsing+0xbe2>
                      memcpy(FSMCustomLabels,fsmLabels,Length);
 8001e34:	4629      	mov	r1, r5
                      FSMCustomLabelsLength = Length+1;
 8001e36:	4d3f      	ldr	r5, [pc, #252]	; (8001f34 <DebugConsoleParsing+0x5dc>)
 8001e38:	602a      	str	r2, [r5, #0]
                      memcpy(FSMCustomLabels,fsmLabels,Length);
 8001e3a:	4632      	mov	r2, r6
 8001e3c:	f019 fd2f 	bl	801b89e <memcpy>
                      FSMCustomLabels[Length]='\n';
 8001e40:	220a      	movs	r2, #10
 8001e42:	f80a 2006 	strb.w	r2, [sl, r6]
 8001e46:	e75e      	b.n	8001d06 <DebugConsoleParsing+0x3ae>
  uint32_t SendBackData =1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	4e3b      	ldr	r6, [pc, #236]	; (8001f38 <DebugConsoleParsing+0x5e0>)
 8001e4c:	9311      	str	r3, [sp, #68]	; 0x44
  if(StreamLength==0) {
 8001e4e:	6934      	ldr	r4, [r6, #16]
 8001e50:	2c00      	cmp	r4, #0
 8001e52:	f43f ada9 	beq.w	80019a8 <DebugConsoleParsing+0x50>
}
 8001e56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001e58:	b015      	add	sp, #84	; 0x54
 8001e5a:	ecbd 8b04 	vpop	{d8-d9}
 8001e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(!strncmp("help",(char *)(att_data),4)) {
 8001e62:	4601      	mov	r1, r0
 8001e64:	2204      	movs	r2, #4
 8001e66:	4835      	ldr	r0, [pc, #212]	; (8001f3c <DebugConsoleParsing+0x5e4>)
 8001e68:	f019 fc77 	bl	801b75a <strncmp>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	f000 8111 	beq.w	8002094 <DebugConsoleParsing+0x73c>
  } else if(!strncmp("info",(char *)(att_data),4)) {
 8001e72:	4833      	ldr	r0, [pc, #204]	; (8001f40 <DebugConsoleParsing+0x5e8>)
 8001e74:	2204      	movs	r2, #4
 8001e76:	4621      	mov	r1, r4
 8001e78:	f019 fc6f 	bl	801b75a <strncmp>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	f000 8174 	beq.w	800216a <DebugConsoleParsing+0x812>
  } else if(!strncmp("DFU",(char *)(att_data),3)) {
 8001e82:	7823      	ldrb	r3, [r4, #0]
 8001e84:	2b44      	cmp	r3, #68	; 0x44
 8001e86:	f040 8112 	bne.w	80020ae <DebugConsoleParsing+0x756>
 8001e8a:	7862      	ldrb	r2, [r4, #1]
 8001e8c:	2a46      	cmp	r2, #70	; 0x46
 8001e8e:	f040 810e 	bne.w	80020ae <DebugConsoleParsing+0x756>
 8001e92:	78a2      	ldrb	r2, [r4, #2]
 8001e94:	2a55      	cmp	r2, #85	; 0x55
 8001e96:	f040 810a 	bne.w	80020ae <DebugConsoleParsing+0x756>
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\n5 sec for restarting\r\n\tin DFU mode\r\n");
 8001e9a:	4e2a      	ldr	r6, [pc, #168]	; (8001f44 <DebugConsoleParsing+0x5ec>)
 8001e9c:	4d2a      	ldr	r5, [pc, #168]	; (8001f48 <DebugConsoleParsing+0x5f0>)
 8001e9e:	f106 0720 	add.w	r7, r6, #32
 8001ea2:	4634      	mov	r4, r6
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	42bc      	cmp	r4, r7
 8001ea8:	f105 0510 	add.w	r5, r5, #16
 8001eac:	f106 0610 	add.w	r6, r6, #16
 8001eb0:	f845 0c10 	str.w	r0, [r5, #-16]
 8001eb4:	f845 1c0c 	str.w	r1, [r5, #-12]
 8001eb8:	f845 2c08 	str.w	r2, [r5, #-8]
 8001ebc:	f845 3c04 	str.w	r3, [r5, #-4]
 8001ec0:	d1ef      	bne.n	8001ea2 <DebugConsoleParsing+0x54a>
 8001ec2:	88b3      	ldrh	r3, [r6, #4]
 8001ec4:	79b2      	ldrb	r2, [r6, #6]
 8001ec6:	6830      	ldr	r0, [r6, #0]
 8001ec8:	80ab      	strh	r3, [r5, #4]
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <DebugConsoleParsing+0x5f4>)
 8001ecc:	71aa      	strb	r2, [r5, #6]
 8001ece:	6028      	str	r0, [r5, #0]
 8001ed0:	2126      	movs	r1, #38	; 0x26
    Term_Update(BufferToWrite,BytesToWrite);
 8001ed2:	481d      	ldr	r0, [pc, #116]	; (8001f48 <DebugConsoleParsing+0x5f0>)
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\n5 sec for restarting\r\n\tin DFU mode\r\n");
 8001ed4:	7019      	strb	r1, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8001ed6:	f00a fedb 	bl	800cc90 <Term_Update>
    HAL_Delay(5000);
 8001eda:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ede:	f004 f8c5 	bl	800606c <HAL_Delay>
    DFU_Var = DFU_MAGIC_NUM;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <DebugConsoleParsing+0x5f8>)
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <DebugConsoleParsing+0x5fc>)
 8001ee6:	4e14      	ldr	r6, [pc, #80]	; (8001f38 <DebugConsoleParsing+0x5e0>)
 8001ee8:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SystemReset();
 8001eea:	f004 ff75 	bl	8006dd8 <HAL_NVIC_SystemReset>
 8001eee:	e7ae      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
 8001ef0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8001ef4:	ee18 aa10 	vmov	sl, s16
 8001ef8:	e621      	b.n	8001b3e <DebugConsoleParsing+0x1e6>
 8001efa:	bf00      	nop
 8001efc:	08020e90 	.word	0x08020e90
 8001f00:	08020eac 	.word	0x08020eac
 8001f04:	08020ec4 	.word	0x08020ec4
 8001f08:	200012b4 	.word	0x200012b4
 8001f0c:	08020f40 	.word	0x08020f40
 8001f10:	08020f58 	.word	0x08020f58
 8001f14:	200012d0 	.word	0x200012d0
 8001f18:	08020e8c 	.word	0x08020e8c
 8001f1c:	08020fa4 	.word	0x08020fa4
 8001f20:	08020fc0 	.word	0x08020fc0
 8001f24:	200012b8 	.word	0x200012b8
 8001f28:	200012bc 	.word	0x200012bc
 8001f2c:	08021010 	.word	0x08021010
 8001f30:	08021028 	.word	0x08021028
 8001f34:	200012cc 	.word	0x200012cc
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	08020a64 	.word	0x08020a64
 8001f40:	08020ab0 	.word	0x08020ab0
 8001f44:	08020b40 	.word	0x08020b40
 8001f48:	20002138 	.word	0x20002138
 8001f4c:	20002238 	.word	0x20002238
 8001f50:	20002e54 	.word	0x20002e54
 8001f54:	abedbabe 	.word	0xabedbabe
 8001f58:	200012b0 	.word	0x200012b0
 8001f5c:	200012d8 	.word	0x200012d8
 8001f60:	200012d4 	.word	0x200012d4
      for(NumFlows=0; NumFlows<json_array_get_count(flows);NumFlows++) {
 8001f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f66:	ee18 0a90 	vmov	r0, s17
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f6e:	f00f f9e1 	bl	8011334 <json_array_get_count>
 8001f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f74:	4298      	cmp	r0, r3
 8001f76:	f63f adcb 	bhi.w	8001b10 <DebugConsoleParsing+0x1b8>
      json_value_free(root_value);
 8001f7a:	ee19 0a10 	vmov	r0, s18
 8001f7e:	f00f f9f3 	bl	8011368 <json_value_free>
      BLE_MANAGER_PRINTF("%ld Alloc Not Released\r\nTotal Mem Used=%ld\r\n",malloc_count,malloc_size);
 8001f82:	4bb5      	ldr	r3, [pc, #724]	; (8002258 <DebugConsoleParsing+0x900>)
 8001f84:	49b5      	ldr	r1, [pc, #724]	; (800225c <DebugConsoleParsing+0x904>)
 8001f86:	48b6      	ldr	r0, [pc, #728]	; (8002260 <DebugConsoleParsing+0x908>)
      BLE_MANAGER_PRINTF("--- Json End Parsing ---\r\n");
 8001f88:	4cb6      	ldr	r4, [pc, #728]	; (8002264 <DebugConsoleParsing+0x90c>)
      BLE_MANAGER_PRINTF("%ld Alloc Not Released\r\nTotal Mem Used=%ld\r\n",malloc_count,malloc_size);
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	6852      	ldr	r2, [r2, #4]
 8001f90:	f019 fabc 	bl	801b50c <siprintf>
 8001f94:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001f96:	4601      	mov	r1, r0
 8001f98:	6030      	str	r0, [r6, #0]
 8001f9a:	48b1      	ldr	r0, [pc, #708]	; (8002260 <DebugConsoleParsing+0x908>)
 8001f9c:	f002 faa2 	bl	80044e4 <CDC_Fill_Buffer>
      BLE_MANAGER_PRINTF("--- Json End Parsing ---\r\n");
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	251a      	movs	r5, #26
 8001fa4:	6035      	str	r5, [r6, #0]
 8001fa6:	f8c9 0000 	str.w	r0, [r9]
 8001faa:	f8c9 1004 	str.w	r1, [r9, #4]
 8001fae:	cc03      	ldmia	r4!, {r0, r1}
 8001fb0:	f8c9 300c 	str.w	r3, [r9, #12]
 8001fb4:	8823      	ldrh	r3, [r4, #0]
 8001fb6:	f8c9 0010 	str.w	r0, [r9, #16]
 8001fba:	f8c9 1014 	str.w	r1, [r9, #20]
 8001fbe:	f8a9 3018 	strh.w	r3, [r9, #24]
 8001fc2:	48a7      	ldr	r0, [pc, #668]	; (8002260 <DebugConsoleParsing+0x908>)
 8001fc4:	78a3      	ldrb	r3, [r4, #2]
 8001fc6:	f889 301a 	strb.w	r3, [r9, #26]
 8001fca:	4629      	mov	r1, r5
 8001fcc:	f8c9 2008 	str.w	r2, [r9, #8]
 8001fd0:	f002 fa88 	bl	80044e4 <CDC_Fill_Buffer>
      BytesToWrite =sprintf((char *)BufferToWrite,"Flow_parse_ok");
 8001fd4:	4ba4      	ldr	r3, [pc, #656]	; (8002268 <DebugConsoleParsing+0x910>)
 8001fd6:	4ca5      	ldr	r4, [pc, #660]	; (800226c <DebugConsoleParsing+0x914>)
 8001fd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001fda:	6020      	str	r0, [r4, #0]
 8001fdc:	48a4      	ldr	r0, [pc, #656]	; (8002270 <DebugConsoleParsing+0x918>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	6061      	str	r1, [r4, #4]
 8001fe2:	210d      	movs	r1, #13
 8001fe4:	7001      	strb	r1, [r0, #0]
 8001fe6:	60a2      	str	r2, [r4, #8]
 8001fe8:	81a3      	strh	r3, [r4, #12]
      Term_Update(BufferToWrite,BytesToWrite);
 8001fea:	4620      	mov	r0, r4
 8001fec:	f00a fe50 	bl	800cc90 <Term_Update>
}
 8001ff0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001ff2:	b015      	add	sp, #84	; 0x54
 8001ff4:	ecbd 8b04 	vpop	{d8-d9}
 8001ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                     BLE_MANAGER_PRINTF("Error Reg Config length not multiple of 4\r\n");
 8001ffc:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 80022c4 <DebugConsoleParsing+0x96c>
 8002000:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8002260 <DebugConsoleParsing+0x908>
 8002004:	f10e 0820 	add.w	r8, lr, #32
 8002008:	4676      	mov	r6, lr
 800200a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800200c:	4546      	cmp	r6, r8
 800200e:	f10c 0c10 	add.w	ip, ip, #16
 8002012:	f10e 0e10 	add.w	lr, lr, #16
 8002016:	f84c 0c10 	str.w	r0, [ip, #-16]
 800201a:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800201e:	f84c 2c08 	str.w	r2, [ip, #-8]
 8002022:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002026:	d1ef      	bne.n	8002008 <DebugConsoleParsing+0x6b0>
 8002028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800202a:	232b      	movs	r3, #43	; 0x2b
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8002032:	f8cc 0000 	str.w	r0, [ip]
 8002036:	f8cc 1004 	str.w	r1, [ip, #4]
 800203a:	f8cc 2008 	str.w	r2, [ip, #8]
 800203e:	4619      	mov	r1, r3
 8002040:	4658      	mov	r0, fp
 8002042:	f002 fa4f 	bl	80044e4 <CDC_Fill_Buffer>
 8002046:	e62d      	b.n	8001ca4 <DebugConsoleParsing+0x34c>
                     BLE_MANAGER_PRINTF("Error Reg Config length not multiple of 4\r\n");
 8002048:	f8df e278 	ldr.w	lr, [pc, #632]	; 80022c4 <DebugConsoleParsing+0x96c>
 800204c:	f8df c210 	ldr.w	ip, [pc, #528]	; 8002260 <DebugConsoleParsing+0x908>
 8002050:	f10e 0820 	add.w	r8, lr, #32
 8002054:	4676      	mov	r6, lr
 8002056:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002058:	4546      	cmp	r6, r8
 800205a:	f10c 0c10 	add.w	ip, ip, #16
 800205e:	f10e 0e10 	add.w	lr, lr, #16
 8002062:	f84c 0c10 	str.w	r0, [ip, #-16]
 8002066:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800206a:	f84c 2c08 	str.w	r2, [ip, #-8]
 800206e:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002072:	d1ef      	bne.n	8002054 <DebugConsoleParsing+0x6fc>
 8002074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002076:	232b      	movs	r3, #43	; 0x2b
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 800207e:	f8cc 0000 	str.w	r0, [ip]
 8002082:	f8cc 1004 	str.w	r1, [ip, #4]
 8002086:	f8cc 2008 	str.w	r2, [ip, #8]
 800208a:	4619      	mov	r1, r3
 800208c:	4658      	mov	r0, fp
 800208e:	f002 fa29 	bl	80044e4 <CDC_Fill_Buffer>
 8002092:	e6a6      	b.n	8001de2 <DebugConsoleParsing+0x48a>
    BytesToWrite =sprintf((char *)BufferToWrite,
 8002094:	4977      	ldr	r1, [pc, #476]	; (8002274 <DebugConsoleParsing+0x91c>)
 8002096:	4875      	ldr	r0, [pc, #468]	; (800226c <DebugConsoleParsing+0x914>)
 8002098:	2242      	movs	r2, #66	; 0x42
 800209a:	f019 fc00 	bl	801b89e <memcpy>
 800209e:	2141      	movs	r1, #65	; 0x41
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\n",
 80020a0:	4b73      	ldr	r3, [pc, #460]	; (8002270 <DebugConsoleParsing+0x918>)
    Term_Update(BufferToWrite,BytesToWrite);
 80020a2:	4872      	ldr	r0, [pc, #456]	; (800226c <DebugConsoleParsing+0x914>)
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\n",
 80020a4:	7019      	strb	r1, [r3, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 80020a6:	f00a fdf3 	bl	800cc90 <Term_Update>
    SendBackData=0;
 80020aa:	4e73      	ldr	r6, [pc, #460]	; (8002278 <DebugConsoleParsing+0x920>)
 80020ac:	e6cf      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
  } else if(!strncmp("uid",(char *)(att_data),3)) {
 80020ae:	2b75      	cmp	r3, #117	; 0x75
 80020b0:	d133      	bne.n	800211a <DebugConsoleParsing+0x7c2>
 80020b2:	7862      	ldrb	r2, [r4, #1]
 80020b4:	2a69      	cmp	r2, #105	; 0x69
 80020b6:	d130      	bne.n	800211a <DebugConsoleParsing+0x7c2>
 80020b8:	78a2      	ldrb	r2, [r4, #2]
 80020ba:	2a64      	cmp	r2, #100	; 0x64
 80020bc:	d12d      	bne.n	800211a <DebugConsoleParsing+0x7c2>
    uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 80020be:	486f      	ldr	r0, [pc, #444]	; (800227c <DebugConsoleParsing+0x924>)
                            uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 80020c0:	496f      	ldr	r1, [pc, #444]	; (8002280 <DebugConsoleParsing+0x928>)
    uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 80020c2:	6800      	ldr	r0, [r0, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\n",
 80020c4:	f891 3092 	ldrb.w	r3, [r1, #146]	; 0x92
 80020c8:	f891 2093 	ldrb.w	r2, [r1, #147]	; 0x93
    uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 80020cc:	f3c0 000b 	ubfx	r0, r0, #0, #12
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\n",
 80020d0:	900a      	str	r0, [sp, #40]	; 0x28
 80020d2:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
 80020d6:	9009      	str	r0, [sp, #36]	; 0x24
 80020d8:	f891 0099 	ldrb.w	r0, [r1, #153]	; 0x99
 80020dc:	9008      	str	r0, [sp, #32]
 80020de:	f891 009a 	ldrb.w	r0, [r1, #154]	; 0x9a
 80020e2:	9007      	str	r0, [sp, #28]
 80020e4:	f891 009b 	ldrb.w	r0, [r1, #155]	; 0x9b
 80020e8:	9006      	str	r0, [sp, #24]
 80020ea:	f891 0094 	ldrb.w	r0, [r1, #148]	; 0x94
 80020ee:	9005      	str	r0, [sp, #20]
 80020f0:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
 80020f4:	9004      	str	r0, [sp, #16]
 80020f6:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
 80020fa:	9003      	str	r0, [sp, #12]
 80020fc:	f891 0097 	ldrb.w	r0, [r1, #151]	; 0x97
 8002100:	9002      	str	r0, [sp, #8]
 8002102:	f891 0090 	ldrb.w	r0, [r1, #144]	; 0x90
 8002106:	9001      	str	r0, [sp, #4]
 8002108:	f891 1091 	ldrb.w	r1, [r1, #145]	; 0x91
 800210c:	9100      	str	r1, [sp, #0]
 800210e:	4857      	ldr	r0, [pc, #348]	; (800226c <DebugConsoleParsing+0x914>)
 8002110:	495c      	ldr	r1, [pc, #368]	; (8002284 <DebugConsoleParsing+0x92c>)
 8002112:	f019 f9fb 	bl	801b50c <siprintf>
 8002116:	211d      	movs	r1, #29
 8002118:	e7c2      	b.n	80020a0 <DebugConsoleParsing+0x748>
  } else if(!strncmp("Off",(char *)(att_data),3)) {
 800211a:	2b4f      	cmp	r3, #79	; 0x4f
 800211c:	d06c      	beq.n	80021f8 <DebugConsoleParsing+0x8a0>
  } else if(!strncmp("getFSMLabels",(char *)(att_data),12)) {
 800211e:	485a      	ldr	r0, [pc, #360]	; (8002288 <DebugConsoleParsing+0x930>)
 8002120:	220c      	movs	r2, #12
 8002122:	4621      	mov	r1, r4
 8002124:	f019 fb19 	bl	801b75a <strncmp>
 8002128:	4607      	mov	r7, r0
 800212a:	2800      	cmp	r0, #0
 800212c:	d16f      	bne.n	800220e <DebugConsoleParsing+0x8b6>
    if(FSMCustomLabels==NULL) {
 800212e:	4e57      	ldr	r6, [pc, #348]	; (800228c <DebugConsoleParsing+0x934>)
 8002130:	6830      	ldr	r0, [r6, #0]
 8002132:	2800      	cmp	r0, #0
 8002134:	f000 817e 	beq.w	8002434 <DebugConsoleParsing+0xadc>
      for(Counter=0;Counter<FSMCustomLabelsLength;Counter+=MaxBleCharStdOutLen) {
 8002138:	4d55      	ldr	r5, [pc, #340]	; (8002290 <DebugConsoleParsing+0x938>)
 800213a:	6829      	ldr	r1, [r5, #0]
 800213c:	2900      	cmp	r1, #0
 800213e:	d0b4      	beq.n	80020aa <DebugConsoleParsing+0x752>
        MinSize = (MinSize>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : MinSize;
 8002140:	4c54      	ldr	r4, [pc, #336]	; (8002294 <DebugConsoleParsing+0x93c>)
 8002142:	460a      	mov	r2, r1
 8002144:	7823      	ldrb	r3, [r4, #0]
 8002146:	e000      	b.n	800214a <DebugConsoleParsing+0x7f2>
        Term_Update((uint8_t *) (FSMCustomLabels+Counter),MinSize);
 8002148:	6830      	ldr	r0, [r6, #0]
        MinSize = FSMCustomLabelsLength-Counter;
 800214a:	1bd2      	subs	r2, r2, r7
        MinSize = (MinSize>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : MinSize;
 800214c:	4293      	cmp	r3, r2
 800214e:	bf28      	it	cs
 8002150:	4613      	movcs	r3, r2
        Term_Update((uint8_t *) (FSMCustomLabels+Counter),MinSize);
 8002152:	4438      	add	r0, r7
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	f00a fd9b 	bl	800cc90 <Term_Update>
      for(Counter=0;Counter<FSMCustomLabelsLength;Counter+=MaxBleCharStdOutLen) {
 800215a:	7823      	ldrb	r3, [r4, #0]
 800215c:	682a      	ldr	r2, [r5, #0]
 800215e:	441f      	add	r7, r3
 8002160:	42ba      	cmp	r2, r7
 8002162:	d8f1      	bhi.n	8002148 <DebugConsoleParsing+0x7f0>
 8002164:	e7a1      	b.n	80020aa <DebugConsoleParsing+0x752>
      BytesToWrite =sprintf((char *)BufferToWrite,"Flow_parse_ko");
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <DebugConsoleParsing+0x940>)
 8002168:	e735      	b.n	8001fd6 <DebugConsoleParsing+0x67e>
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\n"
 800216a:	2030      	movs	r0, #48	; 0x30
 800216c:	2135      	movs	r1, #53	; 0x35
 800216e:	4a4b      	ldr	r2, [pc, #300]	; (800229c <DebugConsoleParsing+0x944>)
 8002170:	4d3f      	ldr	r5, [pc, #252]	; (8002270 <DebugConsoleParsing+0x918>)
 8002172:	2331      	movs	r3, #49	; 0x31
 8002174:	e9cd 1000 	strd	r1, r0, [sp]
 8002178:	4949      	ldr	r1, [pc, #292]	; (80022a0 <DebugConsoleParsing+0x948>)
 800217a:	483c      	ldr	r0, [pc, #240]	; (800226c <DebugConsoleParsing+0x914>)
 800217c:	f019 f9c6 	bl	801b50c <siprintf>
 8002180:	214e      	movs	r1, #78	; 0x4e
    Term_Update(BufferToWrite,BytesToWrite);
 8002182:	483a      	ldr	r0, [pc, #232]	; (800226c <DebugConsoleParsing+0x914>)
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\n"
 8002184:	7029      	strb	r1, [r5, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8002186:	f00a fd83 	bl	800cc90 <Term_Update>
        HAL_GetHalVersion() >>24,
 800218a:	f003 ff81 	bl	8006090 <HAL_GetHalVersion>
 800218e:	4606      	mov	r6, r0
        (HAL_GetHalVersion() >>16)&0xFF,
 8002190:	f003 ff7e 	bl	8006090 <HAL_GetHalVersion>
 8002194:	4607      	mov	r7, r0
        (HAL_GetHalVersion() >> 8)&0xFF,
 8002196:	f003 ff7b 	bl	8006090 <HAL_GetHalVersion>
 800219a:	4604      	mov	r4, r0
        HAL_GetHalVersion()      &0xFF,
 800219c:	f003 ff78 	bl	8006090 <HAL_GetHalVersion>
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\n"
 80021a0:	4940      	ldr	r1, [pc, #256]	; (80022a4 <DebugConsoleParsing+0x94c>)
 80021a2:	9103      	str	r1, [sp, #12]
 80021a4:	b2c0      	uxtb	r0, r0
 80021a6:	4940      	ldr	r1, [pc, #256]	; (80022a8 <DebugConsoleParsing+0x950>)
 80021a8:	9001      	str	r0, [sp, #4]
 80021aa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80021ae:	0e32      	lsrs	r2, r6, #24
 80021b0:	f3c7 4307 	ubfx	r3, r7, #16, #8
 80021b4:	9102      	str	r1, [sp, #8]
 80021b6:	482d      	ldr	r0, [pc, #180]	; (800226c <DebugConsoleParsing+0x914>)
 80021b8:	493c      	ldr	r1, [pc, #240]	; (80022ac <DebugConsoleParsing+0x954>)
 80021ba:	9400      	str	r4, [sp, #0]
 80021bc:	f019 f9a6 	bl	801b50c <siprintf>
 80021c0:	b2c1      	uxtb	r1, r0
    Term_Update(BufferToWrite,BytesToWrite);
 80021c2:	482a      	ldr	r0, [pc, #168]	; (800226c <DebugConsoleParsing+0x914>)
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\n"
 80021c4:	7029      	strb	r1, [r5, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 80021c6:	4e2c      	ldr	r6, [pc, #176]	; (8002278 <DebugConsoleParsing+0x920>)
 80021c8:	f00a fd62 	bl	800cc90 <Term_Update>
 80021cc:	e63f      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
        BLE_MANAGER_PRINTF("root_value==ARRAY\r\n");
 80021ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021d0:	4c37      	ldr	r4, [pc, #220]	; (80022b0 <DebugConsoleParsing+0x958>)
 80021d2:	2513      	movs	r5, #19
 80021d4:	601d      	str	r5, [r3, #0]
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	f8c9 0000 	str.w	r0, [r9]
 80021dc:	6820      	ldr	r0, [r4, #0]
 80021de:	f8c9 1004 	str.w	r1, [r9, #4]
 80021e2:	f8c9 0010 	str.w	r0, [r9, #16]
 80021e6:	4629      	mov	r1, r5
 80021e8:	481d      	ldr	r0, [pc, #116]	; (8002260 <DebugConsoleParsing+0x908>)
 80021ea:	f8c9 2008 	str.w	r2, [r9, #8]
 80021ee:	f8c9 300c 	str.w	r3, [r9, #12]
 80021f2:	f002 f977 	bl	80044e4 <CDC_Fill_Buffer>
 80021f6:	e46c      	b.n	8001ad2 <DebugConsoleParsing+0x17a>
  } else if(!strncmp("Off",(char *)(att_data),3)) {
 80021f8:	7863      	ldrb	r3, [r4, #1]
 80021fa:	2b66      	cmp	r3, #102	; 0x66
 80021fc:	d18f      	bne.n	800211e <DebugConsoleParsing+0x7c6>
 80021fe:	78a3      	ldrb	r3, [r4, #2]
 8002200:	2b66      	cmp	r3, #102	; 0x66
 8002202:	d18c      	bne.n	800211e <DebugConsoleParsing+0x7c6>
    PowerOff=1;
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <DebugConsoleParsing+0x95c>)
 8002206:	4e1c      	ldr	r6, [pc, #112]	; (8002278 <DebugConsoleParsing+0x920>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]
    SendBackData=0;
 800220c:	e61f      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
  } else if(!strncmp("getMLCLabels",(char *)(att_data),12)) {
 800220e:	482a      	ldr	r0, [pc, #168]	; (80022b8 <DebugConsoleParsing+0x960>)
 8002210:	220c      	movs	r2, #12
 8002212:	4621      	mov	r1, r4
 8002214:	f019 faa1 	bl	801b75a <strncmp>
 8002218:	4605      	mov	r5, r0
 800221a:	2800      	cmp	r0, #0
 800221c:	d154      	bne.n	80022c8 <DebugConsoleParsing+0x970>
    if(MLCCustomLabels==NULL) {
 800221e:	4e27      	ldr	r6, [pc, #156]	; (80022bc <DebugConsoleParsing+0x964>)
 8002220:	6830      	ldr	r0, [r6, #0]
 8002222:	2800      	cmp	r0, #0
 8002224:	f000 810d 	beq.w	8002442 <DebugConsoleParsing+0xaea>
      for(Counter=0;Counter<MLCCustomLabelsLength;Counter+=MaxBleCharStdOutLen) {
 8002228:	4f25      	ldr	r7, [pc, #148]	; (80022c0 <DebugConsoleParsing+0x968>)
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	2900      	cmp	r1, #0
 800222e:	f43f af3c 	beq.w	80020aa <DebugConsoleParsing+0x752>
        MinSize = (MinSize>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : MinSize;
 8002232:	4c18      	ldr	r4, [pc, #96]	; (8002294 <DebugConsoleParsing+0x93c>)
 8002234:	7823      	ldrb	r3, [r4, #0]
 8002236:	e000      	b.n	800223a <DebugConsoleParsing+0x8e2>
        Term_Update((uint8_t *) (MLCCustomLabels+Counter),MinSize);
 8002238:	6830      	ldr	r0, [r6, #0]
        MinSize = MLCCustomLabelsLength-Counter;
 800223a:	1b49      	subs	r1, r1, r5
        MinSize = (MinSize>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : MinSize;
 800223c:	4299      	cmp	r1, r3
 800223e:	bf28      	it	cs
 8002240:	4619      	movcs	r1, r3
        Term_Update((uint8_t *) (MLCCustomLabels+Counter),MinSize);
 8002242:	4428      	add	r0, r5
 8002244:	b2c9      	uxtb	r1, r1
 8002246:	f00a fd23 	bl	800cc90 <Term_Update>
      for(Counter=0;Counter<MLCCustomLabelsLength;Counter+=MaxBleCharStdOutLen) {
 800224a:	7823      	ldrb	r3, [r4, #0]
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	441d      	add	r5, r3
 8002250:	42a9      	cmp	r1, r5
 8002252:	d8f1      	bhi.n	8002238 <DebugConsoleParsing+0x8e0>
 8002254:	e729      	b.n	80020aa <DebugConsoleParsing+0x752>
 8002256:	bf00      	nop
 8002258:	20000e6c 	.word	0x20000e6c
 800225c:	08021074 	.word	0x08021074
 8002260:	200011ac 	.word	0x200011ac
 8002264:	080210a4 	.word	0x080210a4
 8002268:	080210c0 	.word	0x080210c0
 800226c:	20002138 	.word	0x20002138
 8002270:	20002238 	.word	0x20002238
 8002274:	08020a6c 	.word	0x08020a6c
 8002278:	20000000 	.word	0x20000000
 800227c:	e0042000 	.word	0xe0042000
 8002280:	1fff7500 	.word	0x1fff7500
 8002284:	08020b68 	.word	0x08020b68
 8002288:	08020ba0 	.word	0x08020ba0
 800228c:	200012d4 	.word	0x200012d4
 8002290:	200012cc 	.word	0x200012cc
 8002294:	20002239 	.word	0x20002239
 8002298:	08020df0 	.word	0x08020df0
 800229c:	080207f8 	.word	0x080207f8
 80022a0:	08020ab8 	.word	0x08020ab8
 80022a4:	0802090c 	.word	0x0802090c
 80022a8:	08020918 	.word	0x08020918
 80022ac:	08020b08 	.word	0x08020b08
 80022b0:	08020e20 	.word	0x08020e20
 80022b4:	200013e4 	.word	0x200013e4
 80022b8:	08020c20 	.word	0x08020c20
 80022bc:	200012d8 	.word	0x200012d8
 80022c0:	200012d0 	.word	0x200012d0
 80022c4:	08020ee4 	.word	0x08020ee4
  } else if(!strncmp("delMLCCustom",(char *)(att_data),12)) {
 80022c8:	48a7      	ldr	r0, [pc, #668]	; (8002568 <DebugConsoleParsing+0xc10>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	4621      	mov	r1, r4
 80022ce:	f019 fa44 	bl	801b75a <strncmp>
 80022d2:	4606      	mov	r6, r0
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d13a      	bne.n	800234e <DebugConsoleParsing+0x9f6>
    if(MLCCustomLabels!=NULL) {
 80022d8:	4fa4      	ldr	r7, [pc, #656]	; (800256c <DebugConsoleParsing+0xc14>)
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	b1b8      	cbz	r0, 800230e <DebugConsoleParsing+0x9b6>
      free(MLCCustomLabels);
 80022de:	f017 f9d5 	bl	801968c <free>
      MLCCustomLabelsLength =0;
 80022e2:	4ba3      	ldr	r3, [pc, #652]	; (8002570 <DebugConsoleParsing+0xc18>)
      BytesToWrite =sprintf((char *)BufferToWrite,"MLCCustomLabels Deleted\n");
 80022e4:	4ca3      	ldr	r4, [pc, #652]	; (8002574 <DebugConsoleParsing+0xc1c>)
      MLCCustomLabelsLength =0;
 80022e6:	601e      	str	r6, [r3, #0]
      BytesToWrite =sprintf((char *)BufferToWrite,"MLCCustomLabels Deleted\n");
 80022e8:	4ba3      	ldr	r3, [pc, #652]	; (8002578 <DebugConsoleParsing+0xc20>)
      MLCCustomLabels=NULL;
 80022ea:	603e      	str	r6, [r7, #0]
      BytesToWrite =sprintf((char *)BufferToWrite,"MLCCustomLabels Deleted\n");
 80022ec:	2618      	movs	r6, #24
 80022ee:	701e      	strb	r6, [r3, #0]
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	4da2      	ldr	r5, [pc, #648]	; (800257c <DebugConsoleParsing+0xc24>)
 80022f4:	6028      	str	r0, [r5, #0]
 80022f6:	6069      	str	r1, [r5, #4]
 80022f8:	cc03      	ldmia	r4!, {r0, r1}
 80022fa:	60eb      	str	r3, [r5, #12]
 80022fc:	7823      	ldrb	r3, [r4, #0]
 80022fe:	6128      	str	r0, [r5, #16]
 8002300:	6169      	str	r1, [r5, #20]
 8002302:	60aa      	str	r2, [r5, #8]
      Term_Update(BufferToWrite,BytesToWrite);
 8002304:	4631      	mov	r1, r6
      BytesToWrite =sprintf((char *)BufferToWrite,"MLCCustomLabels Deleted\n");
 8002306:	762b      	strb	r3, [r5, #24]
      Term_Update(BufferToWrite,BytesToWrite);
 8002308:	4628      	mov	r0, r5
 800230a:	f00a fcc1 	bl	800cc90 <Term_Update>
    if(MLCCustomUCFFile!=NULL) {
 800230e:	4e9c      	ldr	r6, [pc, #624]	; (8002580 <DebugConsoleParsing+0xc28>)
 8002310:	6830      	ldr	r0, [r6, #0]
 8002312:	2800      	cmp	r0, #0
 8002314:	f43f aec9 	beq.w	80020aa <DebugConsoleParsing+0x752>
      free(MLCCustomUCFFile);
 8002318:	f017 f9b8 	bl	801968c <free>
      BytesToWrite =sprintf((char *)BufferToWrite,"MLCCustomUCFFile Deleted\n");
 800231c:	4c99      	ldr	r4, [pc, #612]	; (8002584 <DebugConsoleParsing+0xc2c>)
 800231e:	4d97      	ldr	r5, [pc, #604]	; (800257c <DebugConsoleParsing+0xc24>)
      MLCCustomUCFFileLength =0;
 8002320:	4a99      	ldr	r2, [pc, #612]	; (8002588 <DebugConsoleParsing+0xc30>)
      FSMCustomUCFFile=NULL;
 8002322:	2300      	movs	r3, #0
 8002324:	6033      	str	r3, [r6, #0]
      FSMCustomUCFFileLength =0;
 8002326:	6013      	str	r3, [r2, #0]
      BytesToWrite =sprintf((char *)BufferToWrite,"FSMCustomUCFFile Deleted\n");
 8002328:	4b93      	ldr	r3, [pc, #588]	; (8002578 <DebugConsoleParsing+0xc20>)
 800232a:	4e98      	ldr	r6, [pc, #608]	; (800258c <DebugConsoleParsing+0xc34>)
 800232c:	2719      	movs	r7, #25
 800232e:	701f      	strb	r7, [r3, #0]
 8002330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002332:	6028      	str	r0, [r5, #0]
 8002334:	6069      	str	r1, [r5, #4]
 8002336:	cc03      	ldmia	r4!, {r0, r1}
 8002338:	60eb      	str	r3, [r5, #12]
 800233a:	8823      	ldrh	r3, [r4, #0]
 800233c:	6128      	str	r0, [r5, #16]
 800233e:	6169      	str	r1, [r5, #20]
 8002340:	60aa      	str	r2, [r5, #8]
 8002342:	832b      	strh	r3, [r5, #24]
      Term_Update(BufferToWrite,BytesToWrite);
 8002344:	4639      	mov	r1, r7
 8002346:	4628      	mov	r0, r5
 8002348:	f00a fca2 	bl	800cc90 <Term_Update>
 800234c:	e57f      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
  } else if(!strncmp("delFSMCustom",(char *)(att_data),12)) {
 800234e:	4890      	ldr	r0, [pc, #576]	; (8002590 <DebugConsoleParsing+0xc38>)
 8002350:	220c      	movs	r2, #12
 8002352:	4621      	mov	r1, r4
 8002354:	f019 fa01 	bl	801b75a <strncmp>
 8002358:	4606      	mov	r6, r0
 800235a:	bb28      	cbnz	r0, 80023a8 <DebugConsoleParsing+0xa50>
    if(FSMCustomLabels!=NULL) {
 800235c:	4f8d      	ldr	r7, [pc, #564]	; (8002594 <DebugConsoleParsing+0xc3c>)
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	b1b8      	cbz	r0, 8002392 <DebugConsoleParsing+0xa3a>
      free(FSMCustomLabels);
 8002362:	f017 f993 	bl	801968c <free>
      FSMCustomLabelsLength =0;
 8002366:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <DebugConsoleParsing+0xc40>)
      BytesToWrite =sprintf((char *)BufferToWrite,"FSMCustomLabels Deleted\n");
 8002368:	4c8c      	ldr	r4, [pc, #560]	; (800259c <DebugConsoleParsing+0xc44>)
      FSMCustomLabelsLength =0;
 800236a:	601e      	str	r6, [r3, #0]
      BytesToWrite =sprintf((char *)BufferToWrite,"FSMCustomLabels Deleted\n");
 800236c:	4b82      	ldr	r3, [pc, #520]	; (8002578 <DebugConsoleParsing+0xc20>)
      FSMCustomLabels=NULL;
 800236e:	603e      	str	r6, [r7, #0]
      BytesToWrite =sprintf((char *)BufferToWrite,"FSMCustomLabels Deleted\n");
 8002370:	2618      	movs	r6, #24
 8002372:	701e      	strb	r6, [r3, #0]
 8002374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002376:	4d81      	ldr	r5, [pc, #516]	; (800257c <DebugConsoleParsing+0xc24>)
 8002378:	6028      	str	r0, [r5, #0]
 800237a:	6069      	str	r1, [r5, #4]
 800237c:	cc03      	ldmia	r4!, {r0, r1}
 800237e:	60eb      	str	r3, [r5, #12]
 8002380:	7823      	ldrb	r3, [r4, #0]
 8002382:	6128      	str	r0, [r5, #16]
 8002384:	6169      	str	r1, [r5, #20]
 8002386:	60aa      	str	r2, [r5, #8]
      Term_Update(BufferToWrite,BytesToWrite);
 8002388:	4631      	mov	r1, r6
      BytesToWrite =sprintf((char *)BufferToWrite,"FSMCustomLabels Deleted\n");
 800238a:	762b      	strb	r3, [r5, #24]
      Term_Update(BufferToWrite,BytesToWrite);
 800238c:	4628      	mov	r0, r5
 800238e:	f00a fc7f 	bl	800cc90 <Term_Update>
    if(FSMCustomUCFFile!=NULL) {
 8002392:	4e83      	ldr	r6, [pc, #524]	; (80025a0 <DebugConsoleParsing+0xc48>)
 8002394:	6830      	ldr	r0, [r6, #0]
 8002396:	2800      	cmp	r0, #0
 8002398:	f43f ae87 	beq.w	80020aa <DebugConsoleParsing+0x752>
      free(FSMCustomUCFFile);
 800239c:	f017 f976 	bl	801968c <free>
      BytesToWrite =sprintf((char *)BufferToWrite,"FSMCustomUCFFile Deleted\n");
 80023a0:	4c80      	ldr	r4, [pc, #512]	; (80025a4 <DebugConsoleParsing+0xc4c>)
 80023a2:	4d76      	ldr	r5, [pc, #472]	; (800257c <DebugConsoleParsing+0xc24>)
      FSMCustomUCFFileLength =0;
 80023a4:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <DebugConsoleParsing+0xc50>)
 80023a6:	e7bc      	b.n	8002322 <DebugConsoleParsing+0x9ca>
  } else if(!strncmp("SF",(char *)(att_data),2)) {
 80023a8:	7823      	ldrb	r3, [r4, #0]
    PointerByte[0]=att_data[5];
 80023aa:	4e78      	ldr	r6, [pc, #480]	; (800258c <DebugConsoleParsing+0xc34>)
  } else if(!strncmp("SF",(char *)(att_data),2)) {
 80023ac:	2b53      	cmp	r3, #83	; 0x53
 80023ae:	f040 8146 	bne.w	800263e <DebugConsoleParsing+0xce6>
 80023b2:	7863      	ldrb	r3, [r4, #1]
 80023b4:	2b46      	cmp	r3, #70	; 0x46
 80023b6:	f040 8142 	bne.w	800263e <DebugConsoleParsing+0xce6>
    PointerByte[0]=att_data[5];
 80023ba:	7963      	ldrb	r3, [r4, #5]
 80023bc:	7433      	strb	r3, [r6, #16]
    PointerByte[1]=att_data[4];
 80023be:	7923      	ldrb	r3, [r4, #4]
 80023c0:	7473      	strb	r3, [r6, #17]
    PointerByte[2]=att_data[3];
 80023c2:	78e3      	ldrb	r3, [r4, #3]
 80023c4:	74b3      	strb	r3, [r6, #18]
    PointerByte[3]=att_data[2];
 80023c6:	78a3      	ldrb	r3, [r4, #2]
    PointerByte[0]=att_data[9];
 80023c8:	7a61      	ldrb	r1, [r4, #9]
    PointerByte[1]=att_data[8];
 80023ca:	7a22      	ldrb	r2, [r4, #8]
    PointerByte[3]=att_data[2];
 80023cc:	74f3      	strb	r3, [r6, #19]
    PointerByte[0]=att_data[9];
 80023ce:	2300      	movs	r3, #0
 80023d0:	f361 0307 	bfi	r3, r1, #0, #8
    PointerByte[1]=att_data[8];
 80023d4:	f362 230f 	bfi	r3, r2, #8, #8
    PointerByte[2]=att_data[7];
 80023d8:	79e2      	ldrb	r2, [r4, #7]
    BLE_MANAGER_PRINTF("SF command Length=%ld, TS=%lu\r\n",*StreamLength,TimeStamp);
 80023da:	4974      	ldr	r1, [pc, #464]	; (80025ac <DebugConsoleParsing+0xc54>)
 80023dc:	4874      	ldr	r0, [pc, #464]	; (80025b0 <DebugConsoleParsing+0xc58>)
    PointerByte[2]=att_data[7];
 80023de:	f362 4317 	bfi	r3, r2, #16, #8
    PointerByte[3]=att_data[6];
 80023e2:	79a2      	ldrb	r2, [r4, #6]
 80023e4:	f362 631f 	bfi	r3, r2, #24, #8
    BLE_MANAGER_PRINTF("SF command Length=%ld, TS=%lu\r\n",*StreamLength,TimeStamp);
 80023e8:	6932      	ldr	r2, [r6, #16]
 80023ea:	f019 f88f 	bl	801b50c <siprintf>
 80023ee:	4b71      	ldr	r3, [pc, #452]	; (80025b4 <DebugConsoleParsing+0xc5c>)
 80023f0:	930d      	str	r3, [sp, #52]	; 0x34
 80023f2:	6018      	str	r0, [r3, #0]
 80023f4:	4601      	mov	r1, r0
 80023f6:	486e      	ldr	r0, [pc, #440]	; (80025b0 <DebugConsoleParsing+0xc58>)
 80023f8:	f002 f874 	bl	80044e4 <CDC_Fill_Buffer>
    *CompressedData = (uint8_t*) malloc((*StreamLength)*sizeof(uint8_t));
 80023fc:	6930      	ldr	r0, [r6, #16]
 80023fe:	f017 f93d 	bl	801967c <malloc>
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <DebugConsoleParsing+0xc60>)
 8002404:	61d8      	str	r0, [r3, #28]
    if((*CompressedData)==NULL) {
 8002406:	2800      	cmp	r0, #0
 8002408:	f000 80e6 	beq.w	80025d8 <DebugConsoleParsing+0xc80>
      BytesToWrite =sprintf((char *)BufferToWrite,"Flow_Req_Received");
 800240c:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <DebugConsoleParsing+0xc20>)
 800240e:	4c6b      	ldr	r4, [pc, #428]	; (80025bc <DebugConsoleParsing+0xc64>)
 8002410:	4d5a      	ldr	r5, [pc, #360]	; (800257c <DebugConsoleParsing+0xc24>)
 8002412:	2711      	movs	r7, #17
 8002414:	701f      	strb	r7, [r3, #0]
 8002416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002418:	60eb      	str	r3, [r5, #12]
 800241a:	8823      	ldrh	r3, [r4, #0]
 800241c:	6028      	str	r0, [r5, #0]
 800241e:	6069      	str	r1, [r5, #4]
 8002420:	60aa      	str	r2, [r5, #8]
 8002422:	822b      	strh	r3, [r5, #16]
      Term_Update(BufferToWrite,BytesToWrite);
 8002424:	4639      	mov	r1, r7
 8002426:	4628      	mov	r0, r5
 8002428:	f00a fc32 	bl	800cc90 <Term_Update>
    *DecodingOneStream =1;
 800242c:	4a62      	ldr	r2, [pc, #392]	; (80025b8 <DebugConsoleParsing+0xc60>)
 800242e:	2301      	movs	r3, #1
 8002430:	6153      	str	r3, [r2, #20]
 8002432:	e50c      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
      BytesToWrite =sprintf((char *)BufferToWrite,"<FSM_OUTS1>4D PosRec,0='N/A',16='Portrait Down',32='Portrait Up',64='Landscape Right',128='Landscape Left';\n");
 8002434:	4962      	ldr	r1, [pc, #392]	; (80025c0 <DebugConsoleParsing+0xc68>)
 8002436:	4851      	ldr	r0, [pc, #324]	; (800257c <DebugConsoleParsing+0xc24>)
 8002438:	226d      	movs	r2, #109	; 0x6d
 800243a:	f019 fa30 	bl	801b89e <memcpy>
 800243e:	216c      	movs	r1, #108	; 0x6c
 8002440:	e62e      	b.n	80020a0 <DebugConsoleParsing+0x748>
      BytesToWrite =sprintf((char *)BufferToWrite,"<MLC0_SRC>Activity Recognition,0='Stationary',1='Walking',4='Jogging',8='Biking',12='Driving';\n");
 8002442:	4960      	ldr	r1, [pc, #384]	; (80025c4 <DebugConsoleParsing+0xc6c>)
 8002444:	484d      	ldr	r0, [pc, #308]	; (800257c <DebugConsoleParsing+0xc24>)
 8002446:	2260      	movs	r2, #96	; 0x60
 8002448:	f019 fa29 	bl	801b89e <memcpy>
 800244c:	215f      	movs	r1, #95	; 0x5f
 800244e:	e627      	b.n	80020a0 <DebugConsoleParsing+0x748>
                      BLE_MANAGER_PRINTF("Error in memory allocation MLCCustomLabels\r\n");
 8002450:	4d5d      	ldr	r5, [pc, #372]	; (80025c8 <DebugConsoleParsing+0xc70>)
 8002452:	4e57      	ldr	r6, [pc, #348]	; (80025b0 <DebugConsoleParsing+0xc58>)
 8002454:	f105 0e20 	add.w	lr, r5, #32
 8002458:	46ac      	mov	ip, r5
 800245a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800245e:	45f4      	cmp	ip, lr
 8002460:	f106 0610 	add.w	r6, r6, #16
 8002464:	f105 0510 	add.w	r5, r5, #16
 8002468:	f846 0c10 	str.w	r0, [r6, #-16]
 800246c:	f846 1c0c 	str.w	r1, [r6, #-12]
 8002470:	f846 2c08 	str.w	r2, [r6, #-8]
 8002474:	f846 3c04 	str.w	r3, [r6, #-4]
 8002478:	d1ee      	bne.n	8002458 <DebugConsoleParsing+0xb00>
                      BLE_MANAGER_PRINTF("Error in memory allocation FSMCustomLabels\r\n");
 800247a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800247c:	462b      	mov	r3, r5
 800247e:	252c      	movs	r5, #44	; 0x2c
 8002480:	6015      	str	r5, [r2, #0]
 8002482:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	6030      	str	r0, [r6, #0]
 8002488:	6071      	str	r1, [r6, #4]
 800248a:	60b2      	str	r2, [r6, #8]
 800248c:	7333      	strb	r3, [r6, #12]
 800248e:	4629      	mov	r1, r5
 8002490:	4658      	mov	r0, fp
 8002492:	f002 f827 	bl	80044e4 <CDC_Fill_Buffer>
 8002496:	e436      	b.n	8001d06 <DebugConsoleParsing+0x3ae>
                       BLE_MANAGER_PRINTF("Error in memory allocation MLCCustomUCFFile\r\n");
 8002498:	4e4c      	ldr	r6, [pc, #304]	; (80025cc <DebugConsoleParsing+0xc74>)
 800249a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80025b0 <DebugConsoleParsing+0xc58>
 800249e:	f106 0e20 	add.w	lr, r6, #32
 80024a2:	46b4      	mov	ip, r6
 80024a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80024a8:	45f4      	cmp	ip, lr
 80024aa:	f108 0810 	add.w	r8, r8, #16
 80024ae:	f106 0610 	add.w	r6, r6, #16
 80024b2:	f848 0c10 	str.w	r0, [r8, #-16]
 80024b6:	f848 1c0c 	str.w	r1, [r8, #-12]
 80024ba:	f848 2c08 	str.w	r2, [r8, #-8]
 80024be:	f848 3c04 	str.w	r3, [r8, #-4]
 80024c2:	d1ee      	bne.n	80024a2 <DebugConsoleParsing+0xb4a>
 80024c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024c6:	232d      	movs	r3, #45	; 0x2d
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	ce07      	ldmia	r6!, {r0, r1, r2}
 80024cc:	f8c8 2008 	str.w	r2, [r8, #8]
 80024d0:	8832      	ldrh	r2, [r6, #0]
 80024d2:	f8c8 0000 	str.w	r0, [r8]
 80024d6:	f8c8 1004 	str.w	r1, [r8, #4]
 80024da:	f8a8 200c 	strh.w	r2, [r8, #12]
 80024de:	4619      	mov	r1, r3
 80024e0:	4658      	mov	r0, fp
 80024e2:	f001 ffff 	bl	80044e4 <CDC_Fill_Buffer>
 80024e6:	f7ff bbdd 	b.w	8001ca4 <DebugConsoleParsing+0x34c>
                       BLE_MANAGER_PRINTF("Error in memory allocation FSMCustomUCFFile\r\n");
 80024ea:	4e39      	ldr	r6, [pc, #228]	; (80025d0 <DebugConsoleParsing+0xc78>)
 80024ec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80025b0 <DebugConsoleParsing+0xc58>
 80024f0:	f106 0e20 	add.w	lr, r6, #32
 80024f4:	46b4      	mov	ip, r6
 80024f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80024fa:	45f4      	cmp	ip, lr
 80024fc:	f108 0810 	add.w	r8, r8, #16
 8002500:	f106 0610 	add.w	r6, r6, #16
 8002504:	f848 0c10 	str.w	r0, [r8, #-16]
 8002508:	f848 1c0c 	str.w	r1, [r8, #-12]
 800250c:	f848 2c08 	str.w	r2, [r8, #-8]
 8002510:	f848 3c04 	str.w	r3, [r8, #-4]
 8002514:	d1ee      	bne.n	80024f4 <DebugConsoleParsing+0xb9c>
 8002516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002518:	232d      	movs	r3, #45	; 0x2d
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	ce07      	ldmia	r6!, {r0, r1, r2}
 800251e:	f8c8 2008 	str.w	r2, [r8, #8]
 8002522:	8832      	ldrh	r2, [r6, #0]
 8002524:	f8c8 0000 	str.w	r0, [r8]
 8002528:	f8c8 1004 	str.w	r1, [r8, #4]
 800252c:	f8a8 200c 	strh.w	r2, [r8, #12]
 8002530:	4619      	mov	r1, r3
 8002532:	4658      	mov	r0, fp
 8002534:	f001 ffd6 	bl	80044e4 <CDC_Fill_Buffer>
 8002538:	e453      	b.n	8001de2 <DebugConsoleParsing+0x48a>
                      BLE_MANAGER_PRINTF("Error in memory allocation FSMCustomLabels\r\n");
 800253a:	4d26      	ldr	r5, [pc, #152]	; (80025d4 <DebugConsoleParsing+0xc7c>)
 800253c:	4e1c      	ldr	r6, [pc, #112]	; (80025b0 <DebugConsoleParsing+0xc58>)
 800253e:	f105 0e20 	add.w	lr, r5, #32
 8002542:	46ac      	mov	ip, r5
 8002544:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002548:	45f4      	cmp	ip, lr
 800254a:	f106 0610 	add.w	r6, r6, #16
 800254e:	f105 0510 	add.w	r5, r5, #16
 8002552:	f846 0c10 	str.w	r0, [r6, #-16]
 8002556:	f846 1c0c 	str.w	r1, [r6, #-12]
 800255a:	f846 2c08 	str.w	r2, [r6, #-8]
 800255e:	f846 3c04 	str.w	r3, [r6, #-4]
 8002562:	d1ee      	bne.n	8002542 <DebugConsoleParsing+0xbea>
 8002564:	e789      	b.n	800247a <DebugConsoleParsing+0xb22>
 8002566:	bf00      	nop
 8002568:	08020c90 	.word	0x08020c90
 800256c:	200012d8 	.word	0x200012d8
 8002570:	200012d0 	.word	0x200012d0
 8002574:	08020ca0 	.word	0x08020ca0
 8002578:	20002238 	.word	0x20002238
 800257c:	20002138 	.word	0x20002138
 8002580:	200012b0 	.word	0x200012b0
 8002584:	08020cbc 	.word	0x08020cbc
 8002588:	200012b4 	.word	0x200012b4
 800258c:	20000000 	.word	0x20000000
 8002590:	08020cd8 	.word	0x08020cd8
 8002594:	200012d4 	.word	0x200012d4
 8002598:	200012cc 	.word	0x200012cc
 800259c:	08020ce8 	.word	0x08020ce8
 80025a0:	200012b8 	.word	0x200012b8
 80025a4:	08020d04 	.word	0x08020d04
 80025a8:	200012bc 	.word	0x200012bc
 80025ac:	08020d20 	.word	0x08020d20
 80025b0:	200011ac 	.word	0x200011ac
 80025b4:	200012ac 	.word	0x200012ac
 80025b8:	20000e6c 	.word	0x20000e6c
 80025bc:	08020d84 	.word	0x08020d84
 80025c0:	08020bb0 	.word	0x08020bb0
 80025c4:	08020c30 	.word	0x08020c30
 80025c8:	08020f74 	.word	0x08020f74
 80025cc:	08020f10 	.word	0x08020f10
 80025d0:	08020fe0 	.word	0x08020fe0
 80025d4:	08021044 	.word	0x08021044
      BLE_MANAGER_PRINTF("Memory Allocation error for CompressedData\r\n");
 80025d8:	4c1a      	ldr	r4, [pc, #104]	; (8002644 <DebugConsoleParsing+0xcec>)
 80025da:	4d1b      	ldr	r5, [pc, #108]	; (8002648 <DebugConsoleParsing+0xcf0>)
 80025dc:	f104 0c20 	add.w	ip, r4, #32
 80025e0:	4627      	mov	r7, r4
 80025e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80025e4:	4567      	cmp	r7, ip
 80025e6:	f105 0510 	add.w	r5, r5, #16
 80025ea:	f104 0410 	add.w	r4, r4, #16
 80025ee:	f845 0c10 	str.w	r0, [r5, #-16]
 80025f2:	f845 1c0c 	str.w	r1, [r5, #-12]
 80025f6:	f845 2c08 	str.w	r2, [r5, #-8]
 80025fa:	f845 3c04 	str.w	r3, [r5, #-4]
 80025fe:	d1ef      	bne.n	80025e0 <DebugConsoleParsing+0xc88>
 8002600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002602:	4623      	mov	r3, r4
 8002604:	242c      	movs	r4, #44	; 0x2c
 8002606:	6014      	str	r4, [r2, #0]
 8002608:	cb07      	ldmia	r3!, {r0, r1, r2}
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	6028      	str	r0, [r5, #0]
 800260e:	6069      	str	r1, [r5, #4]
 8002610:	60aa      	str	r2, [r5, #8]
 8002612:	732b      	strb	r3, [r5, #12]
 8002614:	4621      	mov	r1, r4
 8002616:	480c      	ldr	r0, [pc, #48]	; (8002648 <DebugConsoleParsing+0xcf0>)
      BytesToWrite =sprintf((char *)BufferToWrite,"Allocation Error");
 8002618:	4c0c      	ldr	r4, [pc, #48]	; (800264c <DebugConsoleParsing+0xcf4>)
 800261a:	4d0d      	ldr	r5, [pc, #52]	; (8002650 <DebugConsoleParsing+0xcf8>)
      BLE_MANAGER_PRINTF("Memory Allocation error for CompressedData\r\n");
 800261c:	f001 ff62 	bl	80044e4 <CDC_Fill_Buffer>
      BytesToWrite =sprintf((char *)BufferToWrite,"Allocation Error");
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <DebugConsoleParsing+0xcfc>)
 8002622:	2710      	movs	r7, #16
 8002624:	701f      	strb	r7, [r3, #0]
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	60eb      	str	r3, [r5, #12]
 800262a:	7823      	ldrb	r3, [r4, #0]
 800262c:	6028      	str	r0, [r5, #0]
 800262e:	6069      	str	r1, [r5, #4]
 8002630:	60aa      	str	r2, [r5, #8]
 8002632:	742b      	strb	r3, [r5, #16]
      Term_Update(BufferToWrite,BytesToWrite);
 8002634:	4639      	mov	r1, r7
 8002636:	4628      	mov	r0, r5
 8002638:	f00a fb2a 	bl	800cc90 <Term_Update>
 800263c:	e6f6      	b.n	800242c <DebugConsoleParsing+0xad4>
  uint32_t SendBackData =1;
 800263e:	2301      	movs	r3, #1
 8002640:	9311      	str	r3, [sp, #68]	; 0x44
 8002642:	e404      	b.n	8001e4e <DebugConsoleParsing+0x4f6>
 8002644:	08020d40 	.word	0x08020d40
 8002648:	200011ac 	.word	0x200011ac
 800264c:	08020d70 	.word	0x08020d70
 8002650:	20002138 	.word	0x20002138
 8002654:	20002238 	.word	0x20002238

08002658 <BluetoothInit>:
{
 8002658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  BLE_StackValue.ConfigValueOffsets                   = CONFIG_DATA_PUBADDR_OFFSET;
 800265c:	4c99      	ldr	r4, [pc, #612]	; (80028c4 <BluetoothInit+0x26c>)
  BLE_StackValue.AuthenticationRequirements           = BONDING;
 800265e:	499a      	ldr	r1, [pc, #616]	; (80028c8 <BluetoothInit+0x270>)
  BLE_StackValue.EnableHighPowerMode= 1; /*  High Power */
 8002660:	4a9a      	ldr	r2, [pc, #616]	; (80028cc <BluetoothInit+0x274>)
{
 8002662:	b087      	sub	sp, #28
  sprintf(BLE_StackValue.BoardName,"%s%c%c%c","MLC_",
 8002664:	2530      	movs	r5, #48	; 0x30
 8002666:	2035      	movs	r0, #53	; 0x35
  BLE_StackValue.ConfigValueOffsets                   = CONFIG_DATA_PUBADDR_OFFSET;
 8002668:	f44f 3383 	mov.w	r3, #67072	; 0x10600
  sprintf(BLE_StackValue.BoardName,"%s%c%c%c","MLC_",
 800266c:	9501      	str	r5, [sp, #4]
  BLE_StackValue.ConfigValueOffsets                   = CONFIG_DATA_PUBADDR_OFFSET;
 800266e:	6023      	str	r3, [r4, #0]
  BLE_StackValue.SecurePIN=123456;
 8002670:	4d97      	ldr	r5, [pc, #604]	; (80028d0 <BluetoothInit+0x278>)
  sprintf(BLE_StackValue.BoardName,"%s%c%c%c","MLC_",
 8002672:	9000      	str	r0, [sp, #0]
  BLE_StackValue.EnableExtConfig = 1;
 8002674:	2301      	movs	r3, #1
  BLE_StackValue.EnableRandomSecurePIN = 0;
 8002676:	4897      	ldr	r0, [pc, #604]	; (80028d4 <BluetoothInit+0x27c>)
  BLE_StackValue.EnableExtConfig = 1;
 8002678:	7323      	strb	r3, [r4, #12]
  BLE_StackValue.EnableSecureConnection=0;
 800267a:	2300      	movs	r3, #0
  BLE_StackValue.EnableHighPowerMode= 1; /*  High Power */
 800267c:	e9c4 1201 	strd	r1, r2, [r4, #4]
  BLE_StackValue.EnableRandomSecurePIN = 0;
 8002680:	e9c4 5006 	strd	r5, r0, [r4, #24]
  BLE_StackValue.EnableSecureConnection=0;
 8002684:	7563      	strb	r3, [r4, #21]
  sprintf(BLE_StackValue.BoardName,"%s%c%c%c","MLC_",
 8002686:	4a94      	ldr	r2, [pc, #592]	; (80028d8 <BluetoothInit+0x280>)
 8002688:	4994      	ldr	r1, [pc, #592]	; (80028dc <BluetoothInit+0x284>)
      BLE_MANAGER_PRINTF("Do you want to reboot in DFU mode (y/n) [5sec]?");
 800268a:	4d95      	ldr	r5, [pc, #596]	; (80028e0 <BluetoothInit+0x288>)
  sprintf(BLE_StackValue.BoardName,"%s%c%c%c","MLC_",
 800268c:	2331      	movs	r3, #49	; 0x31
 800268e:	f104 000d 	add.w	r0, r4, #13
 8002692:	f018 ff3b 	bl	801b50c <siprintf>
      BLE_MANAGER_PRINTF("Do you want to reboot in DFU mode (y/n) [5sec]?");
 8002696:	f8df c268 	ldr.w	ip, [pc, #616]	; 8002900 <BluetoothInit+0x2a8>
 800269a:	462f      	mov	r7, r5
 800269c:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
 80026a0:	4666      	mov	r6, ip
 80026a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026a4:	4576      	cmp	r6, lr
 80026a6:	f107 0710 	add.w	r7, r7, #16
 80026aa:	46b4      	mov	ip, r6
 80026ac:	f847 0c10 	str.w	r0, [r7, #-16]
 80026b0:	f847 1c0c 	str.w	r1, [r7, #-12]
 80026b4:	f847 2c08 	str.w	r2, [r7, #-8]
 80026b8:	f847 3c04 	str.w	r3, [r7, #-4]
 80026bc:	d1f0      	bne.n	80026a0 <BluetoothInit+0x48>
 80026be:	4e89      	ldr	r6, [pc, #548]	; (80028e4 <BluetoothInit+0x28c>)
 80026c0:	4887      	ldr	r0, [pc, #540]	; (80028e0 <BluetoothInit+0x288>)
            DFU_Var = DFU_MAGIC_NUM;
 80026c2:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8002904 <BluetoothInit+0x2ac>
 80026c6:	4f88      	ldr	r7, [pc, #544]	; (80028e8 <BluetoothInit+0x290>)
      BLE_MANAGER_PRINTF("Do you want to reboot in DFU mode (y/n) [5sec]?");
 80026c8:	212f      	movs	r1, #47	; 0x2f
 80026ca:	6031      	str	r1, [r6, #0]
 80026cc:	f001 ff0a 	bl	80044e4 <CDC_Fill_Buffer>
      InitTick = HAL_GetTick();
 80026d0:	f003 fcc6 	bl	8006060 <HAL_GetTick>
 80026d4:	4681      	mov	r9, r0
        if(VCOM_read(Buffer, 16)) {
 80026d6:	2110      	movs	r1, #16
 80026d8:	a802      	add	r0, sp, #8
 80026da:	f000 fe43 	bl	8003364 <VCOM_read>
 80026de:	b168      	cbz	r0, 80026fc <BluetoothInit+0xa4>
          if(Buffer[0]=='y') {
 80026e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80026e4:	2b79      	cmp	r3, #121	; 0x79
 80026e6:	d122      	bne.n	800272e <BluetoothInit+0xd6>
            DFU_Var = DFU_MAGIC_NUM;
 80026e8:	f8c8 7000 	str.w	r7, [r8]
            HAL_NVIC_SystemReset();
 80026ec:	f004 fb74 	bl	8006dd8 <HAL_NVIC_SystemReset>
        if(VCOM_read(Buffer, 16)) {
 80026f0:	2110      	movs	r1, #16
 80026f2:	a802      	add	r0, sp, #8
 80026f4:	f000 fe36 	bl	8003364 <VCOM_read>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d1f1      	bne.n	80026e0 <BluetoothInit+0x88>
          HAL_Delay(10);
 80026fc:	200a      	movs	r0, #10
 80026fe:	f003 fcb5 	bl	800606c <HAL_Delay>
          if((HAL_GetTick()-InitTick)>5000) {
 8002702:	f003 fcad 	bl	8006060 <HAL_GetTick>
 8002706:	f241 3388 	movw	r3, #5000	; 0x1388
 800270a:	eba0 0009 	sub.w	r0, r0, r9
 800270e:	4298      	cmp	r0, r3
 8002710:	d9e1      	bls.n	80026d6 <BluetoothInit+0x7e>
            BLE_MANAGER_PRINTF("\r\n\tTimeOut\r\n");
 8002712:	4b76      	ldr	r3, [pc, #472]	; (80028ec <BluetoothInit+0x294>)
 8002714:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002716:	270c      	movs	r7, #12
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	6037      	str	r7, [r6, #0]
 800271c:	6028      	str	r0, [r5, #0]
 800271e:	6069      	str	r1, [r5, #4]
 8002720:	60aa      	str	r2, [r5, #8]
 8002722:	732b      	strb	r3, [r5, #12]
 8002724:	4639      	mov	r1, r7
 8002726:	486e      	ldr	r0, [pc, #440]	; (80028e0 <BluetoothInit+0x288>)
 8002728:	f001 fedc 	bl	80044e4 <CDC_Fill_Buffer>
      while(Answer==0) {
 800272c:	e007      	b.n	800273e <BluetoothInit+0xe6>
            BLE_MANAGER_PRINTF("\r\n\n");
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <BluetoothInit+0x298>)
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	6028      	str	r0, [r5, #0]
 8002734:	2103      	movs	r1, #3
 8002736:	486a      	ldr	r0, [pc, #424]	; (80028e0 <BluetoothInit+0x288>)
 8002738:	6031      	str	r1, [r6, #0]
 800273a:	f001 fed3 	bl	80044e4 <CDC_Fill_Buffer>
    BLE_MANAGER_PRINTF("Default BLE board Name [%s]\r\n",BLE_StackValue.BoardName);
 800273e:	4a6d      	ldr	r2, [pc, #436]	; (80028f4 <BluetoothInit+0x29c>)
 8002740:	496d      	ldr	r1, [pc, #436]	; (80028f8 <BluetoothInit+0x2a0>)
 8002742:	4867      	ldr	r0, [pc, #412]	; (80028e0 <BluetoothInit+0x288>)
    BLE_MANAGER_PRINTF("\tDo you want change it (y/n) [5sec]?");
 8002744:	4f66      	ldr	r7, [pc, #408]	; (80028e0 <BluetoothInit+0x288>)
    BLE_MANAGER_PRINTF("Default BLE board Name [%s]\r\n",BLE_StackValue.BoardName);
 8002746:	f018 fee1 	bl	801b50c <siprintf>
 800274a:	4601      	mov	r1, r0
 800274c:	6030      	str	r0, [r6, #0]
 800274e:	4864      	ldr	r0, [pc, #400]	; (80028e0 <BluetoothInit+0x288>)
 8002750:	f001 fec8 	bl	80044e4 <CDC_Fill_Buffer>
    BLE_MANAGER_PRINTF("\tDo you want change it (y/n) [5sec]?");
 8002754:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8002908 <BluetoothInit+0x2b0>
 8002758:	f10e 0820 	add.w	r8, lr, #32
 800275c:	46f4      	mov	ip, lr
 800275e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002762:	45c4      	cmp	ip, r8
 8002764:	6038      	str	r0, [r7, #0]
 8002766:	6079      	str	r1, [r7, #4]
 8002768:	60ba      	str	r2, [r7, #8]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	f10e 0e10 	add.w	lr, lr, #16
 8002770:	f107 0710 	add.w	r7, r7, #16
 8002774:	d1f2      	bne.n	800275c <BluetoothInit+0x104>
 8002776:	f8de 0000 	ldr.w	r0, [lr]
 800277a:	f89e 3004 	ldrb.w	r3, [lr, #4]
 800277e:	6038      	str	r0, [r7, #0]
 8002780:	713b      	strb	r3, [r7, #4]
 8002782:	2124      	movs	r1, #36	; 0x24
 8002784:	4856      	ldr	r0, [pc, #344]	; (80028e0 <BluetoothInit+0x288>)
 8002786:	6031      	str	r1, [r6, #0]
 8002788:	f001 feac 	bl	80044e4 <CDC_Fill_Buffer>
    InitTick = HAL_GetTick();
 800278c:	f003 fc68 	bl	8006060 <HAL_GetTick>
        if((HAL_GetTick()-InitTick)>5000) {
 8002790:	f241 3888 	movw	r8, #5000	; 0x1388
    InitTick = HAL_GetTick();
 8002794:	4607      	mov	r7, r0
    while(Answer==0) {
 8002796:	e006      	b.n	80027a6 <BluetoothInit+0x14e>
        HAL_Delay(10);
 8002798:	f003 fc68 	bl	800606c <HAL_Delay>
        if((HAL_GetTick()-InitTick)>5000) {
 800279c:	f003 fc60 	bl	8006060 <HAL_GetTick>
 80027a0:	1bc0      	subs	r0, r0, r7
 80027a2:	4540      	cmp	r0, r8
 80027a4:	d818      	bhi.n	80027d8 <BluetoothInit+0x180>
      if(VCOM_read(Buffer, 16)) {
 80027a6:	2110      	movs	r1, #16
 80027a8:	a802      	add	r0, sp, #8
 80027aa:	f000 fddb 	bl	8003364 <VCOM_read>
 80027ae:	4603      	mov	r3, r0
        HAL_Delay(10);
 80027b0:	200a      	movs	r0, #10
      if(VCOM_read(Buffer, 16)) {
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <BluetoothInit+0x140>
        if(Buffer[0]=='y') {
 80027b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80027ba:	2b79      	cmp	r3, #121	; 0x79
 80027bc:	d01e      	beq.n	80027fc <BluetoothInit+0x1a4>
          BLE_MANAGER_PRINTF("\r\n\n");
 80027be:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <BluetoothInit+0x298>)
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	6028      	str	r0, [r5, #0]
 80027c4:	2103      	movs	r1, #3
 80027c6:	4846      	ldr	r0, [pc, #280]	; (80028e0 <BluetoothInit+0x288>)
 80027c8:	6031      	str	r1, [r6, #0]
 80027ca:	f001 fe8b 	bl	80044e4 <CDC_Fill_Buffer>
}
 80027ce:	b007      	add	sp, #28
 80027d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  InitBleManager();
 80027d4:	f00a bbd2 	b.w	800cf7c <InitBleManager>
          BLE_MANAGER_PRINTF("\r\n\tTimeOut\r\n");
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <BluetoothInit+0x294>)
 80027da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027dc:	240c      	movs	r4, #12
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	6034      	str	r4, [r6, #0]
 80027e2:	6028      	str	r0, [r5, #0]
 80027e4:	6069      	str	r1, [r5, #4]
 80027e6:	60aa      	str	r2, [r5, #8]
 80027e8:	4621      	mov	r1, r4
 80027ea:	732b      	strb	r3, [r5, #12]
 80027ec:	483c      	ldr	r0, [pc, #240]	; (80028e0 <BluetoothInit+0x288>)
 80027ee:	f001 fe79 	bl	80044e4 <CDC_Fill_Buffer>
}
 80027f2:	b007      	add	sp, #28
 80027f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  InitBleManager();
 80027f8:	f00a bbc0 	b.w	800cf7c <InitBleManager>
          BLE_MANAGER_PRINTF("\r\n\tWrite the Name (7 Chars): _______\b\b\b\b\b\b\b");
 80027fc:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800290c <BluetoothInit+0x2b4>
 8002800:	4f37      	ldr	r7, [pc, #220]	; (80028e0 <BluetoothInit+0x288>)
 8002802:	f10c 0e20 	add.w	lr, ip, #32
 8002806:	4665      	mov	r5, ip
 8002808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280a:	4575      	cmp	r5, lr
 800280c:	f107 0710 	add.w	r7, r7, #16
 8002810:	f10c 0c10 	add.w	ip, ip, #16
 8002814:	f847 0c10 	str.w	r0, [r7, #-16]
 8002818:	f847 1c0c 	str.w	r1, [r7, #-12]
 800281c:	f847 2c08 	str.w	r2, [r7, #-8]
 8002820:	f847 3c04 	str.w	r3, [r7, #-4]
 8002824:	d1ef      	bne.n	8002806 <BluetoothInit+0x1ae>
 8002826:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 800282a:	232b      	movs	r3, #43	; 0x2b
 800282c:	6033      	str	r3, [r6, #0]
 800282e:	6038      	str	r0, [r7, #0]
 8002830:	6079      	str	r1, [r7, #4]
 8002832:	60ba      	str	r2, [r7, #8]
 8002834:	4619      	mov	r1, r3
 8002836:	482a      	ldr	r0, [pc, #168]	; (80028e0 <BluetoothInit+0x288>)
          int32_t NumBytes=0;
 8002838:	2500      	movs	r5, #0
          BLE_MANAGER_PRINTF("\r\n\tWrite the Name (7 Chars): _______\b\b\b\b\b\b\b");
 800283a:	f001 fe53 	bl	80044e4 <CDC_Fill_Buffer>
          while(NumBytes!=7) {
 800283e:	e006      	b.n	800284e <BluetoothInit+0x1f6>
                if(Buffer[0]=='\r') {
 8002840:	2b0d      	cmp	r3, #13
 8002842:	d02d      	beq.n	80028a0 <BluetoothInit+0x248>
                  BLE_StackValue.BoardName[NumBytes]=Buffer[0];
 8002844:	1962      	adds	r2, r4, r5
                  NumBytes++;
 8002846:	3501      	adds	r5, #1
                  BLE_StackValue.BoardName[NumBytes]=Buffer[0];
 8002848:	7353      	strb	r3, [r2, #13]
          while(NumBytes!=7) {
 800284a:	2d07      	cmp	r5, #7
 800284c:	d00d      	beq.n	800286a <BluetoothInit+0x212>
            if(VCOM_read(Buffer, 16)) {
 800284e:	2110      	movs	r1, #16
 8002850:	a802      	add	r0, sp, #8
 8002852:	f000 fd87 	bl	8003364 <VCOM_read>
 8002856:	2800      	cmp	r0, #0
 8002858:	d0f7      	beq.n	800284a <BluetoothInit+0x1f2>
              if(Buffer[0]!='\b') {
 800285a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800285e:	2b08      	cmp	r3, #8
 8002860:	d1ee      	bne.n	8002840 <BluetoothInit+0x1e8>
                if(NumBytes>0) {
 8002862:	b18d      	cbz	r5, 8002888 <BluetoothInit+0x230>
                  NumBytes--;
 8002864:	3d01      	subs	r5, #1
          while(NumBytes!=7) {
 8002866:	2d07      	cmp	r5, #7
 8002868:	d1f1      	bne.n	800284e <BluetoothInit+0x1f6>
          BLE_MANAGER_PRINTF("\r\n\tNew Name=[%s]\r\n\n",BLE_StackValue.BoardName);
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <BluetoothInit+0x29c>)
 800286c:	4923      	ldr	r1, [pc, #140]	; (80028fc <BluetoothInit+0x2a4>)
 800286e:	481c      	ldr	r0, [pc, #112]	; (80028e0 <BluetoothInit+0x288>)
 8002870:	f018 fe4c 	bl	801b50c <siprintf>
 8002874:	4601      	mov	r1, r0
 8002876:	481a      	ldr	r0, [pc, #104]	; (80028e0 <BluetoothInit+0x288>)
 8002878:	6031      	str	r1, [r6, #0]
 800287a:	f001 fe33 	bl	80044e4 <CDC_Fill_Buffer>
}
 800287e:	b007      	add	sp, #28
 8002880:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  InitBleManager();
 8002884:	f00a bb7a 	b.w	800cf7c <InitBleManager>
            if(VCOM_read(Buffer, 16)) {
 8002888:	2110      	movs	r1, #16
 800288a:	a802      	add	r0, sp, #8
 800288c:	f000 fd6a 	bl	8003364 <VCOM_read>
 8002890:	b188      	cbz	r0, 80028b6 <BluetoothInit+0x25e>
              if(Buffer[0]!='\b') {
 8002892:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d0f6      	beq.n	8002888 <BluetoothInit+0x230>
                if(Buffer[0]=='\r') {
 800289a:	2b0d      	cmp	r3, #13
 800289c:	d1d2      	bne.n	8002844 <BluetoothInit+0x1ec>
 800289e:	e001      	b.n	80028a4 <BluetoothInit+0x24c>
                  for(;NumBytes<7;NumBytes++) {
 80028a0:	2d06      	cmp	r5, #6
 80028a2:	dcd2      	bgt.n	800284a <BluetoothInit+0x1f2>
                    BLE_StackValue.BoardName[NumBytes]=' ';
 80028a4:	f105 000d 	add.w	r0, r5, #13
 80028a8:	4420      	add	r0, r4
 80028aa:	f1c5 0207 	rsb	r2, r5, #7
 80028ae:	2120      	movs	r1, #32
 80028b0:	f018 ff3e 	bl	801b730 <memset>
          while(NumBytes!=7) {
 80028b4:	e7d9      	b.n	800286a <BluetoothInit+0x212>
            if(VCOM_read(Buffer, 16)) {
 80028b6:	2110      	movs	r1, #16
 80028b8:	a802      	add	r0, sp, #8
 80028ba:	f000 fd53 	bl	8003364 <VCOM_read>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d1cb      	bne.n	800285a <BluetoothInit+0x202>
 80028c2:	e7c4      	b.n	800284e <BluetoothInit+0x1f6>
 80028c4:	20002288 	.word	0x20002288
 80028c8:	00010101 	.word	0x00010101
 80028cc:	01010401 	.word	0x01010401
 80028d0:	0001e240 	.word	0x0001e240
 80028d4:	01010000 	.word	0x01010000
 80028d8:	080210d0 	.word	0x080210d0
 80028dc:	080210d8 	.word	0x080210d8
 80028e0:	200011ac 	.word	0x200011ac
 80028e4:	200012ac 	.word	0x200012ac
 80028e8:	abedbabe 	.word	0xabedbabe
 80028ec:	08021114 	.word	0x08021114
 80028f0:	080211a8 	.word	0x080211a8
 80028f4:	20002295 	.word	0x20002295
 80028f8:	08021124 	.word	0x08021124
 80028fc:	08021198 	.word	0x08021198
 8002900:	080210e4 	.word	0x080210e4
 8002904:	20002e54 	.word	0x20002e54
 8002908:	08021144 	.word	0x08021144
 800290c:	0802116c 	.word	0x0802116c

08002910 <BLE_InitCustomService>:
void BLE_InitCustomService(void) {
 8002910:	b570      	push	{r4, r5, r6, lr}
  CustomDebugConsoleParsingCallback = &DebugConsoleParsing;
 8002912:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <BLE_InitCustomService+0x1b8>)
  CustomConnectionCompleted = &ConnectionCompletedFunction;
 8002914:	4c6d      	ldr	r4, [pc, #436]	; (8002acc <BLE_InitCustomService+0x1bc>)
  CustomDisconnectionCompleted = &DisconnectionCompletedFunction;
 8002916:	4b6e      	ldr	r3, [pc, #440]	; (8002ad0 <BLE_InitCustomService+0x1c0>)
  CustomDebugConsoleParsingCallback = &DebugConsoleParsing;
 8002918:	486e      	ldr	r0, [pc, #440]	; (8002ad4 <BLE_InitCustomService+0x1c4>)
  CustomConnectionCompleted = &ConnectionCompletedFunction;
 800291a:	4d6f      	ldr	r5, [pc, #444]	; (8002ad8 <BLE_InitCustomService+0x1c8>)
  CustomDebugConsoleParsingCallback = &DebugConsoleParsing;
 800291c:	6010      	str	r0, [r2, #0]
  CustomConnectionCompleted = &ConnectionCompletedFunction;
 800291e:	6025      	str	r5, [r4, #0]
  CustomReadRequestActRec = &ActivityRecognitionReadRequest;
 8002920:	486e      	ldr	r0, [pc, #440]	; (8002adc <BLE_InitCustomService+0x1cc>)
  CustomDisconnectionCompleted = &DisconnectionCompletedFunction;
 8002922:	4c6f      	ldr	r4, [pc, #444]	; (8002ae0 <BLE_InitCustomService+0x1d0>)
 8002924:	601c      	str	r4, [r3, #0]
  CustomReadMachineLearningCore= &MachineLearningCoreReadRequest;
 8002926:	4a6f      	ldr	r2, [pc, #444]	; (8002ae4 <BLE_InitCustomService+0x1d4>)
  CustomReadFiniteStateMachine= &FiniteStateMachineReadRequest;
 8002928:	4c6f      	ldr	r4, [pc, #444]	; (8002ae8 <BLE_InitCustomService+0x1d8>)
  CustomReadRequestActRec = &ActivityRecognitionReadRequest;
 800292a:	4d70      	ldr	r5, [pc, #448]	; (8002aec <BLE_InitCustomService+0x1dc>)
 800292c:	6005      	str	r5, [r0, #0]
  CustomNotifyEventBattery=             &NotifyEventBattery;
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <BLE_InitCustomService+0x1e0>)
  CustomReadMachineLearningCore= &MachineLearningCoreReadRequest;
 8002930:	4870      	ldr	r0, [pc, #448]	; (8002af4 <BLE_InitCustomService+0x1e4>)
  CustomReadFiniteStateMachine= &FiniteStateMachineReadRequest;
 8002932:	4d71      	ldr	r5, [pc, #452]	; (8002af8 <BLE_InitCustomService+0x1e8>)
  CustomReadMachineLearningCore= &MachineLearningCoreReadRequest;
 8002934:	6010      	str	r0, [r2, #0]
  CustomReadFiniteStateMachine= &FiniteStateMachineReadRequest;
 8002936:	6025      	str	r5, [r4, #0]
  CustomNotifyEventInertial=            &NotifyEventInertial;
 8002938:	4870      	ldr	r0, [pc, #448]	; (8002afc <BLE_InitCustomService+0x1ec>)
  CustomNotifyEventBattery=             &NotifyEventBattery;
 800293a:	4c71      	ldr	r4, [pc, #452]	; (8002b00 <BLE_InitCustomService+0x1f0>)
 800293c:	601c      	str	r4, [r3, #0]
  CustomNotifyEventActRec=              &NotifyEventActRec;
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <BLE_InitCustomService+0x1f4>)
  CustomNotifyEventFiniteStateMachine=  &NotifyEventFiniteStateMachine;
 8002940:	4c71      	ldr	r4, [pc, #452]	; (8002b08 <BLE_InitCustomService+0x1f8>)
  CustomNotifyEventInertial=            &NotifyEventInertial;
 8002942:	4d72      	ldr	r5, [pc, #456]	; (8002b0c <BLE_InitCustomService+0x1fc>)
 8002944:	6005      	str	r5, [r0, #0]
  CustomNotifyEventMachineLearningCore= &NotifyEventMachineLearningCore;
 8002946:	4b72      	ldr	r3, [pc, #456]	; (8002b10 <BLE_InitCustomService+0x200>)
  CustomNotifyEventActRec=              &NotifyEventActRec;
 8002948:	4872      	ldr	r0, [pc, #456]	; (8002b14 <BLE_InitCustomService+0x204>)
  CustomNotifyEventFiniteStateMachine=  &NotifyEventFiniteStateMachine;
 800294a:	4d73      	ldr	r5, [pc, #460]	; (8002b18 <BLE_InitCustomService+0x208>)
  CustomNotifyEventActRec=              &NotifyEventActRec;
 800294c:	6010      	str	r0, [r2, #0]
  CustomNotifyEventFiniteStateMachine=  &NotifyEventFiniteStateMachine;
 800294e:	6025      	str	r5, [r4, #0]
  CustomExtConfigUidCommandCallback  = &ExtExtConfigUidCommandCallback;
 8002950:	4872      	ldr	r0, [pc, #456]	; (8002b1c <BLE_InitCustomService+0x20c>)
  CustomNotifyEventMachineLearningCore= &NotifyEventMachineLearningCore;
 8002952:	4c73      	ldr	r4, [pc, #460]	; (8002b20 <BLE_InitCustomService+0x210>)
 8002954:	601c      	str	r4, [r3, #0]
  CustomExtConfigInfoCommandCallback = &ExtConfigInfoCommandCallback;
 8002956:	4a73      	ldr	r2, [pc, #460]	; (8002b24 <BLE_InitCustomService+0x214>)
  CustomExtConfigHelpCommandCallback = &ExtConfigHelpCommandCallback;
 8002958:	4c73      	ldr	r4, [pc, #460]	; (8002b28 <BLE_InitCustomService+0x218>)
  CustomExtConfigUidCommandCallback  = &ExtExtConfigUidCommandCallback;
 800295a:	4d74      	ldr	r5, [pc, #464]	; (8002b2c <BLE_InitCustomService+0x21c>)
  CustomExtConfigVersionFwCommandCallback = &ExtConfigVersionFwCommandCallback;
 800295c:	4b74      	ldr	r3, [pc, #464]	; (8002b30 <BLE_InitCustomService+0x220>)
  CustomExtConfigUidCommandCallback  = &ExtExtConfigUidCommandCallback;
 800295e:	6005      	str	r5, [r0, #0]
  if((BleManagerAddChar(BLE_InitInertialService(1,1,0))) == 0) {
 8002960:	2101      	movs	r1, #1
  CustomExtConfigInfoCommandCallback = &ExtConfigInfoCommandCallback;
 8002962:	4874      	ldr	r0, [pc, #464]	; (8002b34 <BLE_InitCustomService+0x224>)
  CustomExtConfigHelpCommandCallback = &ExtConfigHelpCommandCallback;
 8002964:	4d74      	ldr	r5, [pc, #464]	; (8002b38 <BLE_InitCustomService+0x228>)
  CustomExtConfigInfoCommandCallback = &ExtConfigInfoCommandCallback;
 8002966:	6010      	str	r0, [r2, #0]
  CustomExtConfigHelpCommandCallback = &ExtConfigHelpCommandCallback;
 8002968:	6025      	str	r5, [r4, #0]
  if((BleManagerAddChar(BLE_InitInertialService(1,1,0))) == 0) {
 800296a:	2200      	movs	r2, #0
  CustomExtConfigVersionFwCommandCallback = &ExtConfigVersionFwCommandCallback;
 800296c:	4c73      	ldr	r4, [pc, #460]	; (8002b3c <BLE_InitCustomService+0x22c>)
 800296e:	601c      	str	r4, [r3, #0]
  if((BleManagerAddChar(BLE_InitInertialService(1,1,0))) == 0) {
 8002970:	4608      	mov	r0, r1
 8002972:	f009 fba5 	bl	800c0c0 <BLE_InitInertialService>
 8002976:	f00a fad1 	bl	800cf1c <BleManagerAddChar>
 800297a:	b1c8      	cbz	r0, 80029b0 <BLE_InitCustomService+0xa0>
  if((BleManagerAddChar(BLE_InitActRecService())) == 0) {
 800297c:	f009 f89a 	bl	800bab4 <BLE_InitActRecService>
 8002980:	f00a facc 	bl	800cf1c <BleManagerAddChar>
 8002984:	b368      	cbz	r0, 80029e2 <BLE_InitCustomService+0xd2>
  if((BleManagerAddChar(BLE_InitFiniteStateMachineService(BLE_FSM_16_REG))) == 0) {
 8002986:	2001      	movs	r0, #1
 8002988:	f009 fa62 	bl	800be50 <BLE_InitFiniteStateMachineService>
 800298c:	f00a fac6 	bl	800cf1c <BleManagerAddChar>
 8002990:	2800      	cmp	r0, #0
 8002992:	d04a      	beq.n	8002a2a <BLE_InitCustomService+0x11a>
  if((BleManagerAddChar(BLE_InitMachineLearningCoreService(BLE_MLC_8_REG))) ==0 ) {
 8002994:	2001      	movs	r0, #1
 8002996:	f009 fd31 	bl	800c3fc <BLE_InitMachineLearningCoreService>
 800299a:	f00a fabf 	bl	800cf1c <BleManagerAddChar>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d05f      	beq.n	8002a62 <BLE_InitCustomService+0x152>
  if((BleManagerAddChar(BLE_InitBatteryService())) == 0) {
 80029a2:	f009 f99d 	bl	800bce0 <BLE_InitBatteryService>
 80029a6:	f00a fab9 	bl	800cf1c <BleManagerAddChar>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d074      	beq.n	8002a98 <BLE_InitCustomService+0x188>
}
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
    BLE_MANAGER_PRINTF("Error adding Inertial Service\r\n");
 80029b0:	4c63      	ldr	r4, [pc, #396]	; (8002b40 <BLE_InitCustomService+0x230>)
 80029b2:	4d64      	ldr	r5, [pc, #400]	; (8002b44 <BLE_InitCustomService+0x234>)
 80029b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b6:	6028      	str	r0, [r5, #0]
 80029b8:	6069      	str	r1, [r5, #4]
 80029ba:	60aa      	str	r2, [r5, #8]
 80029bc:	60eb      	str	r3, [r5, #12]
 80029be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c0:	4c61      	ldr	r4, [pc, #388]	; (8002b48 <BLE_InitCustomService+0x238>)
 80029c2:	6128      	str	r0, [r5, #16]
 80029c4:	201f      	movs	r0, #31
 80029c6:	6020      	str	r0, [r4, #0]
 80029c8:	61aa      	str	r2, [r5, #24]
 80029ca:	61eb      	str	r3, [r5, #28]
 80029cc:	6169      	str	r1, [r5, #20]
 80029ce:	4601      	mov	r1, r0
 80029d0:	4628      	mov	r0, r5
 80029d2:	f001 fd87 	bl	80044e4 <CDC_Fill_Buffer>
  if((BleManagerAddChar(BLE_InitActRecService())) == 0) {
 80029d6:	f009 f86d 	bl	800bab4 <BLE_InitActRecService>
 80029da:	f00a fa9f 	bl	800cf1c <BleManagerAddChar>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d1d1      	bne.n	8002986 <BLE_InitCustomService+0x76>
    BLE_MANAGER_PRINTF("Error adding Activity Recognition\r\n");
 80029e2:	4d5a      	ldr	r5, [pc, #360]	; (8002b4c <BLE_InitCustomService+0x23c>)
 80029e4:	4c57      	ldr	r4, [pc, #348]	; (8002b44 <BLE_InitCustomService+0x234>)
 80029e6:	f105 0e20 	add.w	lr, r5, #32
 80029ea:	46ac      	mov	ip, r5
 80029ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80029f0:	45f4      	cmp	ip, lr
 80029f2:	f104 0410 	add.w	r4, r4, #16
 80029f6:	f105 0510 	add.w	r5, r5, #16
 80029fa:	f844 0c10 	str.w	r0, [r4, #-16]
 80029fe:	f844 1c0c 	str.w	r1, [r4, #-12]
 8002a02:	f844 2c08 	str.w	r2, [r4, #-8]
 8002a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8002a0a:	d1ee      	bne.n	80029ea <BLE_InitCustomService+0xda>
 8002a0c:	6828      	ldr	r0, [r5, #0]
 8002a0e:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <BLE_InitCustomService+0x238>)
 8002a10:	6020      	str	r0, [r4, #0]
 8002a12:	2123      	movs	r1, #35	; 0x23
 8002a14:	484b      	ldr	r0, [pc, #300]	; (8002b44 <BLE_InitCustomService+0x234>)
 8002a16:	6019      	str	r1, [r3, #0]
 8002a18:	f001 fd64 	bl	80044e4 <CDC_Fill_Buffer>
  if((BleManagerAddChar(BLE_InitFiniteStateMachineService(BLE_FSM_16_REG))) == 0) {
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f009 fa17 	bl	800be50 <BLE_InitFiniteStateMachineService>
 8002a22:	f00a fa7b 	bl	800cf1c <BleManagerAddChar>
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d1b4      	bne.n	8002994 <BLE_InitCustomService+0x84>
    BLE_MANAGER_PRINTF("Error adding FSM Service\r\n");
 8002a2a:	4c49      	ldr	r4, [pc, #292]	; (8002b50 <BLE_InitCustomService+0x240>)
 8002a2c:	4d45      	ldr	r5, [pc, #276]	; (8002b44 <BLE_InitCustomService+0x234>)
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	6069      	str	r1, [r5, #4]
 8002a32:	4945      	ldr	r1, [pc, #276]	; (8002b48 <BLE_InitCustomService+0x238>)
 8002a34:	6028      	str	r0, [r5, #0]
 8002a36:	261a      	movs	r6, #26
 8002a38:	600e      	str	r6, [r1, #0]
 8002a3a:	cc03      	ldmia	r4!, {r0, r1}
 8002a3c:	60eb      	str	r3, [r5, #12]
 8002a3e:	8823      	ldrh	r3, [r4, #0]
 8002a40:	832b      	strh	r3, [r5, #24]
 8002a42:	78a3      	ldrb	r3, [r4, #2]
 8002a44:	60aa      	str	r2, [r5, #8]
 8002a46:	6128      	str	r0, [r5, #16]
 8002a48:	6169      	str	r1, [r5, #20]
 8002a4a:	76ab      	strb	r3, [r5, #26]
 8002a4c:	4631      	mov	r1, r6
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f001 fd48 	bl	80044e4 <CDC_Fill_Buffer>
  if((BleManagerAddChar(BLE_InitMachineLearningCoreService(BLE_MLC_8_REG))) ==0 ) {
 8002a54:	2001      	movs	r0, #1
 8002a56:	f009 fcd1 	bl	800c3fc <BLE_InitMachineLearningCoreService>
 8002a5a:	f00a fa5f 	bl	800cf1c <BleManagerAddChar>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d19f      	bne.n	80029a2 <BLE_InitCustomService+0x92>
    BLE_MANAGER_PRINTF("Error adding MLC Service\r\n");
 8002a62:	4c3c      	ldr	r4, [pc, #240]	; (8002b54 <BLE_InitCustomService+0x244>)
 8002a64:	4d37      	ldr	r5, [pc, #220]	; (8002b44 <BLE_InitCustomService+0x234>)
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	6069      	str	r1, [r5, #4]
 8002a6a:	4937      	ldr	r1, [pc, #220]	; (8002b48 <BLE_InitCustomService+0x238>)
 8002a6c:	6028      	str	r0, [r5, #0]
 8002a6e:	261a      	movs	r6, #26
 8002a70:	600e      	str	r6, [r1, #0]
 8002a72:	cc03      	ldmia	r4!, {r0, r1}
 8002a74:	60eb      	str	r3, [r5, #12]
 8002a76:	8823      	ldrh	r3, [r4, #0]
 8002a78:	832b      	strh	r3, [r5, #24]
 8002a7a:	78a3      	ldrb	r3, [r4, #2]
 8002a7c:	60aa      	str	r2, [r5, #8]
 8002a7e:	76ab      	strb	r3, [r5, #26]
 8002a80:	6128      	str	r0, [r5, #16]
 8002a82:	6169      	str	r1, [r5, #20]
 8002a84:	4628      	mov	r0, r5
 8002a86:	4631      	mov	r1, r6
 8002a88:	f001 fd2c 	bl	80044e4 <CDC_Fill_Buffer>
  if((BleManagerAddChar(BLE_InitBatteryService())) == 0) {
 8002a8c:	f009 f928 	bl	800bce0 <BLE_InitBatteryService>
 8002a90:	f00a fa44 	bl	800cf1c <BleManagerAddChar>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d18a      	bne.n	80029ae <BLE_InitCustomService+0x9e>
    BLE_MANAGER_PRINTF("Error adding Battery Service\r\n");
 8002a98:	4c2f      	ldr	r4, [pc, #188]	; (8002b58 <BLE_InitCustomService+0x248>)
 8002a9a:	4d2a      	ldr	r5, [pc, #168]	; (8002b44 <BLE_InitCustomService+0x234>)
 8002a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9e:	6028      	str	r0, [r5, #0]
 8002aa0:	6069      	str	r1, [r5, #4]
 8002aa2:	60aa      	str	r2, [r5, #8]
 8002aa4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002aa6:	6128      	str	r0, [r5, #16]
 8002aa8:	4827      	ldr	r0, [pc, #156]	; (8002b48 <BLE_InitCustomService+0x238>)
 8002aaa:	60eb      	str	r3, [r5, #12]
 8002aac:	231e      	movs	r3, #30
 8002aae:	6003      	str	r3, [r0, #0]
 8002ab0:	8820      	ldrh	r0, [r4, #0]
 8002ab2:	78a4      	ldrb	r4, [r4, #2]
 8002ab4:	83a8      	strh	r0, [r5, #28]
 8002ab6:	6169      	str	r1, [r5, #20]
 8002ab8:	61aa      	str	r2, [r5, #24]
 8002aba:	77ac      	strb	r4, [r5, #30]
 8002abc:	4628      	mov	r0, r5
 8002abe:	4619      	mov	r1, r3
}
 8002ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BLE_MANAGER_PRINTF("Error adding Battery Service\r\n");
 8002ac4:	f001 bd0e 	b.w	80044e4 <CDC_Fill_Buffer>
 8002ac8:	2000223c 	.word	0x2000223c
 8002acc:	2000234c 	.word	0x2000234c
 8002ad0:	20002350 	.word	0x20002350
 8002ad4:	08001959 	.word	0x08001959
 8002ad8:	08001455 	.word	0x08001455
 8002adc:	20001f40 	.word	0x20001f40
 8002ae0:	08001345 	.word	0x08001345
 8002ae4:	20002010 	.word	0x20002010
 8002ae8:	20001fa4 	.word	0x20001fa4
 8002aec:	080016f1 	.word	0x080016f1
 8002af0:	20001f44 	.word	0x20001f44
 8002af4:	08001661 	.word	0x08001661
 8002af8:	08001759 	.word	0x08001759
 8002afc:	20001fa8 	.word	0x20001fa8
 8002b00:	080013e5 	.word	0x080013e5
 8002b04:	20001f10 	.word	0x20001f10
 8002b08:	20001f74 	.word	0x20001f74
 8002b0c:	080012dd 	.word	0x080012dd
 8002b10:	20001fe0 	.word	0x20001fe0
 8002b14:	08001869 	.word	0x08001869
 8002b18:	080018e1 	.word	0x080018e1
 8002b1c:	20002380 	.word	0x20002380
 8002b20:	080017f5 	.word	0x080017f5
 8002b24:	20002384 	.word	0x20002384
 8002b28:	20002388 	.word	0x20002388
 8002b2c:	080011f9 	.word	0x080011f9
 8002b30:	20002390 	.word	0x20002390
 8002b34:	0800123d 	.word	0x0800123d
 8002b38:	08001231 	.word	0x08001231
 8002b3c:	08001205 	.word	0x08001205
 8002b40:	080211ac 	.word	0x080211ac
 8002b44:	200011ac 	.word	0x200011ac
 8002b48:	200012ac 	.word	0x200012ac
 8002b4c:	080211cc 	.word	0x080211cc
 8002b50:	080211f0 	.word	0x080211f0
 8002b54:	0802120c 	.word	0x0802120c
 8002b58:	08021228 	.word	0x08021228

08002b5c <BLE_SetCustomAdvertiseData>:
  manuf_data[BLE_MANAGER_CUSTOM_FIELD1]=0x0C;
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	73c3      	strb	r3, [r0, #15]
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop

08002b64 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  None
  * @retval None
  */
void InitTargetPlatform(void)
{
 8002b64:	b510      	push	{r4, lr}
  * @param  None
  * @retval None
  */
void LedInitTargetPlatform(void)
{
  BSP_LED_Init(LED_BLUE);
 8002b66:	2000      	movs	r0, #0
{
 8002b68:	b088      	sub	sp, #32
  BSP_LED_Init(LED_BLUE);
 8002b6a:	f008 f985 	bl	800ae78 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f008 f982 	bl	800ae78 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8002b74:	2101      	movs	r1, #1
 8002b76:	2000      	movs	r0, #0
 8002b78:	f008 fa12 	bl	800afa0 <BSP_PB_Init>
  BSP_BC_Init();
 8002b7c:	f008 fbfa 	bl	800b374 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8002b80:	f008 fc22 	bl	800b3c8 <BSP_BC_BatMS_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8002b84:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <InitTargetPlatform+0x1ac>)
 8002b86:	4a63      	ldr	r2, [pc, #396]	; (8002d14 <InitTargetPlatform+0x1b0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
  TimCCHandle.Instance = TIM1;
 8002b8a:	4863      	ldr	r0, [pc, #396]	; (8002d18 <InitTargetPlatform+0x1b4>)
 8002b8c:	4c63      	ldr	r4, [pc, #396]	; (8002d1c <InitTargetPlatform+0x1b8>)
 8002b8e:	6004      	str	r4, [r0, #0]
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	0b5b      	lsrs	r3, r3, #13
  TimCCHandle.Init.ClockDivision = 0;
 8002b96:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8002b98:	3b01      	subs	r3, #1
  TimCCHandle.Init.Period        = 65535;
 8002b9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b9e:	60c1      	str	r1, [r0, #12]
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8002ba0:	6043      	str	r3, [r0, #4]
  TimCCHandle.Init.ClockDivision = 0;
 8002ba2:	6102      	str	r2, [r0, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8002ba4:	6082      	str	r2, [r0, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK) {
 8002ba6:	f007 fa8b 	bl	800a0c0 <HAL_TIM_OC_Init>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	f040 80a0 	bne.w	8002cf0 <InitTargetPlatform+0x18c>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8002bb0:	2130      	movs	r1, #48	; 0x30
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8002bb2:	2202      	movs	r2, #2
  sConfig.Pulse = STBOX1_UPDATE_LED;
 8002bb4:	f242 7310 	movw	r3, #10000	; 0x2710
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8002bb8:	9101      	str	r1, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8002bba:	9203      	str	r2, [sp, #12]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK) {
 8002bbc:	4856      	ldr	r0, [pc, #344]	; (8002d18 <InitTargetPlatform+0x1b4>)
  sConfig.Pulse = STBOX1_UPDATE_LED;
 8002bbe:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK) {
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	a901      	add	r1, sp, #4
 8002bc4:	f007 faee 	bl	800a1a4 <HAL_TIM_OC_ConfigChannel>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f040 809d 	bne.w	8002d08 <InitTargetPlatform+0x1a4>
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK) {
 8002bce:	2204      	movs	r2, #4
  sConfig.Pulse = STBOX1_UPDATE_BATTERY;
 8002bd0:	f242 7310 	movw	r3, #10000	; 0x2710
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK) {
 8002bd4:	4850      	ldr	r0, [pc, #320]	; (8002d18 <InitTargetPlatform+0x1b4>)
  sConfig.Pulse = STBOX1_UPDATE_BATTERY;
 8002bd6:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK) {
 8002bd8:	eb0d 0102 	add.w	r1, sp, r2
 8002bdc:	f007 fae2 	bl	800a1a4 <HAL_TIM_OC_ConfigChannel>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f040 808e 	bne.w	8002d02 <InitTargetPlatform+0x19e>
  sConfig.Pulse = STBOX1_UPDATE_VCOM;
 8002be6:	2332      	movs	r3, #50	; 0x32
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK) {
 8002be8:	484b      	ldr	r0, [pc, #300]	; (8002d18 <InitTargetPlatform+0x1b4>)
  sConfig.Pulse = STBOX1_UPDATE_VCOM;
 8002bea:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK) {
 8002bec:	2208      	movs	r2, #8
 8002bee:	a901      	add	r1, sp, #4
 8002bf0:	f007 fad8 	bl	800a1a4 <HAL_TIM_OC_ConfigChannel>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	f040 8081 	bne.w	8002cfc <InitTargetPlatform+0x198>
  sConfig.Pulse = STBOX1_UPDATE_INV;
 8002bfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK) {
 8002bfe:	4846      	ldr	r0, [pc, #280]	; (8002d18 <InitTargetPlatform+0x1b4>)
  sConfig.Pulse = STBOX1_UPDATE_INV;
 8002c00:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK) {
 8002c02:	220c      	movs	r2, #12
 8002c04:	a901      	add	r1, sp, #4
 8002c06:	f007 facd 	bl	800a1a4 <HAL_TIM_OC_ConfigChannel>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d173      	bne.n	8002cf6 <InitTargetPlatform+0x192>
  MCR_HEART_BIT();
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f008 f98e 	bl	800af30 <BSP_LED_On>
 8002c14:	2001      	movs	r0, #1
 8002c16:	f008 f98b 	bl	800af30 <BSP_LED_On>
 8002c1a:	20c8      	movs	r0, #200	; 0xc8
 8002c1c:	f003 fa26 	bl	800606c <HAL_Delay>
 8002c20:	2000      	movs	r0, #0
 8002c22:	f008 f99b 	bl	800af5c <BSP_LED_Off>
 8002c26:	2001      	movs	r0, #1
 8002c28:	f008 f998 	bl	800af5c <BSP_LED_Off>
 8002c2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c30:	f003 fa1c 	bl	800606c <HAL_Delay>
 8002c34:	2000      	movs	r0, #0
 8002c36:	f008 f97b 	bl	800af30 <BSP_LED_On>
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f008 f978 	bl	800af30 <BSP_LED_On>
 8002c40:	20c8      	movs	r0, #200	; 0xc8
 8002c42:	f003 fa13 	bl	800606c <HAL_Delay>
 8002c46:	2000      	movs	r0, #0
 8002c48:	f008 f988 	bl	800af5c <BSP_LED_Off>
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f008 f985 	bl	800af5c <BSP_LED_Off>
 8002c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c56:	f003 fa09 	bl	800606c <HAL_Delay>
  MCR_HEART_BIT();
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f008 f968 	bl	800af30 <BSP_LED_On>
 8002c60:	2001      	movs	r0, #1
 8002c62:	f008 f965 	bl	800af30 <BSP_LED_On>
 8002c66:	20c8      	movs	r0, #200	; 0xc8
 8002c68:	f003 fa00 	bl	800606c <HAL_Delay>
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f008 f975 	bl	800af5c <BSP_LED_Off>
 8002c72:	2001      	movs	r0, #1
 8002c74:	f008 f972 	bl	800af5c <BSP_LED_Off>
 8002c78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c7c:	f003 f9f6 	bl	800606c <HAL_Delay>
 8002c80:	2000      	movs	r0, #0
 8002c82:	f008 f955 	bl	800af30 <BSP_LED_On>
 8002c86:	2001      	movs	r0, #1
 8002c88:	f008 f952 	bl	800af30 <BSP_LED_On>
 8002c8c:	20c8      	movs	r0, #200	; 0xc8
 8002c8e:	f003 f9ed 	bl	800606c <HAL_Delay>
 8002c92:	2000      	movs	r0, #0
 8002c94:	f008 f962 	bl	800af5c <BSP_LED_Off>
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f008 f95f 	bl	800af5c <BSP_LED_Off>
 8002c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ca2:	f003 f9e3 	bl	800606c <HAL_Delay>
  BSP_LED_On(LED_BLUE);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f008 f942 	bl	800af30 <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
 8002cac:	2001      	movs	r0, #1
 8002cae:	f008 f93f 	bl	800af30 <BSP_LED_On>
  HAL_PWREx_EnableVddUSB();
 8002cb2:	f005 f81b 	bl	8007cec <HAL_PWREx_EnableVddUSB>
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4919      	ldr	r1, [pc, #100]	; (8002d20 <InitTargetPlatform+0x1bc>)
 8002cba:	481a      	ldr	r0, [pc, #104]	; (8002d24 <InitTargetPlatform+0x1c0>)
 8002cbc:	f00f fc98 	bl	80125f0 <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 8002cc0:	4919      	ldr	r1, [pc, #100]	; (8002d28 <InitTargetPlatform+0x1c4>)
 8002cc2:	4818      	ldr	r0, [pc, #96]	; (8002d24 <InitTargetPlatform+0x1c0>)
 8002cc4:	f00f fcb8 	bl	8012638 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8002cc8:	4918      	ldr	r1, [pc, #96]	; (8002d2c <InitTargetPlatform+0x1c8>)
 8002cca:	4816      	ldr	r0, [pc, #88]	; (8002d24 <InitTargetPlatform+0x1c0>)
 8002ccc:	f00f fc40 	bl	8012550 <USBD_CDC_RegisterInterface>
  USBD_Start(&USBD_Device);
 8002cd0:	4814      	ldr	r0, [pc, #80]	; (8002d24 <InitTargetPlatform+0x1c0>)
 8002cd2:	f00f fcd7 	bl	8012684 <USBD_Start>
  HAL_Delay(5000);
 8002cd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cda:	f003 f9c7 	bl	800606c <HAL_Delay>
  BSP_LED_Off(LED_BLUE);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f008 f93c 	bl	800af5c <BSP_LED_Off>
  BSP_LED_Off(LED_GREEN);
 8002ce4:	2001      	movs	r0, #1
}
 8002ce6:	b008      	add	sp, #32
 8002ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LED_Off(LED_GREEN);
 8002cec:	f008 b936 	b.w	800af5c <BSP_LED_Off>
    Error_Handler();
 8002cf0:	f000 fd20 	bl	8003734 <Error_Handler>
 8002cf4:	e75c      	b.n	8002bb0 <InitTargetPlatform+0x4c>
    Error_Handler();
 8002cf6:	f000 fd1d 	bl	8003734 <Error_Handler>
 8002cfa:	e788      	b.n	8002c0e <InitTargetPlatform+0xaa>
    Error_Handler();
 8002cfc:	f000 fd1a 	bl	8003734 <Error_Handler>
 8002d00:	e77b      	b.n	8002bfa <InitTargetPlatform+0x96>
    Error_Handler();
 8002d02:	f000 fd17 	bl	8003734 <Error_Handler>
 8002d06:	e76e      	b.n	8002be6 <InitTargetPlatform+0x82>
    Error_Handler();
 8002d08:	f000 fd14 	bl	8003734 <Error_Handler>
 8002d0c:	e75f      	b.n	8002bce <InitTargetPlatform+0x6a>
 8002d0e:	bf00      	nop
 8002d10:	20000300 	.word	0x20000300
 8002d14:	d1b71759 	.word	0xd1b71759
 8002d18:	20000e90 	.word	0x20000e90
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	20000274 	.word	0x20000274
 8002d24:	20000edc 	.word	0x20000edc
 8002d28:	200003ec 	.word	0x200003ec
 8002d2c:	2000022c 	.word	0x2000022c

08002d30 <DeInit_MEMS>:
{
 8002d30:	b570      	push	{r4, r5, r6, lr}
  if (BSP_MOTION_SENSOR_DeInit(LSM6DSOX_0) == BSP_ERROR_NONE) {
 8002d32:	2000      	movs	r0, #0
 8002d34:	f008 fe34 	bl	800b9a0 <BSP_MOTION_SENSOR_DeInit>
 8002d38:	bb28      	cbnz	r0, 8002d86 <DeInit_MEMS+0x56>
    STBOX1_PRINTF("OK Deinit Accelero  Sensor\n\r");
 8002d3a:	4c20      	ldr	r4, [pc, #128]	; (8002dbc <DeInit_MEMS+0x8c>)
 8002d3c:	4d20      	ldr	r5, [pc, #128]	; (8002dc0 <DeInit_MEMS+0x90>)
 8002d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d40:	f505 7c47 	add.w	ip, r5, #796	; 0x31c
 8002d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002d48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d4c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8002d50:	261c      	movs	r6, #28
 8002d52:	4631      	mov	r1, r6
 8002d54:	f505 7047 	add.w	r0, r5, #796	; 0x31c
 8002d58:	f88c 3000 	strb.w	r3, [ip]
 8002d5c:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
 8002d60:	f001 fbc0 	bl	80044e4 <CDC_Fill_Buffer>
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8002d64:	2008      	movs	r0, #8
 8002d66:	f004 f825 	bl	8006db4 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d70:	f004 f966 	bl	8007040 <HAL_GPIO_DeInit>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8002d74:	2009      	movs	r0, #9
 8002d76:	f004 f81d 	bl	8006db4 <HAL_NVIC_DisableIRQ>
}
 8002d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <DeInit_MEMS+0x94>)
 8002d80:	2108      	movs	r1, #8
 8002d82:	f004 b95d 	b.w	8007040 <HAL_GPIO_DeInit>
    STBOX1_PRINTF("Error Deinit Accelero Sensor\n\r");
 8002d86:	4c10      	ldr	r4, [pc, #64]	; (8002dc8 <DeInit_MEMS+0x98>)
 8002d88:	4d0d      	ldr	r5, [pc, #52]	; (8002dc0 <DeInit_MEMS+0x90>)
 8002d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d8c:	f505 7c47 	add.w	ip, r5, #796	; 0x31c
 8002d90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d98:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8002d9c:	f82c 3b02 	strh.w	r3, [ip], #2
 8002da0:	261e      	movs	r6, #30
 8002da2:	0c1a      	lsrs	r2, r3, #16
 8002da4:	4631      	mov	r1, r6
 8002da6:	f88c 2000 	strb.w	r2, [ip]
 8002daa:	f505 7047 	add.w	r0, r5, #796	; 0x31c
 8002dae:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
 8002db2:	f001 fb97 	bl	80044e4 <CDC_Fill_Buffer>
    Error_Handler();
 8002db6:	f000 fcbd 	bl	8003734 <Error_Handler>
 8002dba:	e7d3      	b.n	8002d64 <DeInit_MEMS+0x34>
 8002dbc:	08021248 	.word	0x08021248
 8002dc0:	20000e90 	.word	0x20000e90
 8002dc4:	48001000 	.word	0x48001000
 8002dc8:	08021268 	.word	0x08021268

08002dcc <Init_MEMS>:
{
 8002dcc:	b570      	push	{r4, r5, r6, lr}
  if (BSP_MOTION_SENSOR_Init(LSM6DSOX_0, MOTION_ACCELERO|MOTION_GYRO) == BSP_ERROR_NONE) {
 8002dce:	2103      	movs	r1, #3
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f008 fd27 	bl	800b824 <BSP_MOTION_SENSOR_Init>
 8002dd6:	b9c8      	cbnz	r0, 8002e0c <Init_MEMS+0x40>
    STBOX1_PRINTF("OK Init Acc/Gyro  Sensor\n\r");
 8002dd8:	4c19      	ldr	r4, [pc, #100]	; (8002e40 <Init_MEMS+0x74>)
 8002dda:	4d1a      	ldr	r5, [pc, #104]	; (8002e44 <Init_MEMS+0x78>)
 8002ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dde:	f505 7c47 	add.w	ip, r5, #796	; 0x31c
 8002de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002de6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002dea:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8002dee:	f82c 2b02 	strh.w	r2, [ip], #2
 8002df2:	0c13      	lsrs	r3, r2, #16
 8002df4:	261a      	movs	r6, #26
 8002df6:	f88c 3000 	strb.w	r3, [ip]
 8002dfa:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
 8002dfe:	4631      	mov	r1, r6
 8002e00:	f505 7047 	add.w	r0, r5, #796	; 0x31c
}
 8002e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    STBOX1_PRINTF("OK Init Acc/Gyro  Sensor\n\r");
 8002e08:	f001 bb6c 	b.w	80044e4 <CDC_Fill_Buffer>
    STBOX1_PRINTF("Error Init Acc/Gyro Sensor\n\r");
 8002e0c:	4c0e      	ldr	r4, [pc, #56]	; (8002e48 <Init_MEMS+0x7c>)
 8002e0e:	4d0d      	ldr	r5, [pc, #52]	; (8002e44 <Init_MEMS+0x78>)
 8002e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e12:	f505 7c47 	add.w	ip, r5, #796	; 0x31c
 8002e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002e1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e1e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8002e22:	261c      	movs	r6, #28
 8002e24:	4631      	mov	r1, r6
 8002e26:	f505 7047 	add.w	r0, r5, #796	; 0x31c
 8002e2a:	f88c 3000 	strb.w	r3, [ip]
 8002e2e:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
 8002e32:	f001 fb57 	bl	80044e4 <CDC_Fill_Buffer>
}
 8002e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8002e3a:	f000 bc7b 	b.w	8003734 <Error_Handler>
 8002e3e:	bf00      	nop
 8002e40:	08021288 	.word	0x08021288
 8002e44:	20000e90 	.word	0x20000e90
 8002e48:	080212a4 	.word	0x080212a4

08002e4c <Init_MEMS_MLC>:
{
 8002e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (BSP_MOTION_SENSOR_Init(LSM6DSOX_0, MOTION_ACCELERO) == BSP_ERROR_NONE) {
 8002e50:	2102      	movs	r1, #2
{
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	4680      	mov	r8, r0
  if (BSP_MOTION_SENSOR_Init(LSM6DSOX_0, MOTION_ACCELERO) == BSP_ERROR_NONE) {
 8002e56:	2000      	movs	r0, #0
 8002e58:	f008 fce4 	bl	800b824 <BSP_MOTION_SENSOR_Init>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	f040 8106 	bne.w	800306e <Init_MEMS_MLC+0x222>
    STBOX1_PRINTF("OK Init Accelero  Sensor\n\r");
 8002e62:	4d8e      	ldr	r5, [pc, #568]	; (800309c <Init_MEMS_MLC+0x250>)
 8002e64:	4f8e      	ldr	r7, [pc, #568]	; (80030a0 <Init_MEMS_MLC+0x254>)
 8002e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e68:	f507 7647 	add.w	r6, r7, #796	; 0x31c
 8002e6c:	4634      	mov	r4, r6
 8002e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e74:	c403      	stmia	r4!, {r0, r1}
 8002e76:	f824 2b02 	strh.w	r2, [r4], #2
 8002e7a:	f04f 0c1a 	mov.w	ip, #26
 8002e7e:	0c12      	lsrs	r2, r2, #16
 8002e80:	4661      	mov	r1, ip
 8002e82:	7022      	strb	r2, [r4, #0]
 8002e84:	4630      	mov	r0, r6
 8002e86:	f8c7 c41c 	str.w	ip, [r7, #1052]	; 0x41c
 8002e8a:	f001 fb2b 	bl	80044e4 <CDC_Fill_Buffer>
  if((UseCustomIfAvailable==1) & (MLCCustomUCFFile!=NULL)) {
 8002e8e:	f1b8 0f01 	cmp.w	r8, #1
 8002e92:	f8d7 4420 	ldr.w	r4, [r7, #1056]	; 0x420
 8002e96:	f040 809e 	bne.w	8002fd6 <Init_MEMS_MLC+0x18a>
 8002e9a:	2c00      	cmp	r4, #0
 8002e9c:	f000 809b 	beq.w	8002fd6 <Init_MEMS_MLC+0x18a>
    STBOX1_PRINTF("-->Custom UCF Program for LSM6DSOX MLC\r\n");
 8002ea0:	f8df c218 	ldr.w	ip, [pc, #536]	; 80030bc <Init_MEMS_MLC+0x270>
    TotalNumberOfLine = MLCCustomUCFFileLength;
 8002ea4:	f8d7 8424 	ldr.w	r8, [r7, #1060]	; 0x424
    STBOX1_PRINTF("-->Custom UCF Program for LSM6DSOX MLC\r\n");
 8002ea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002eac:	4635      	mov	r5, r6
 8002eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002eba:	c503      	stmia	r5!, {r0, r1}
 8002ebc:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8002ec0:	702a      	strb	r2, [r5, #0]
 8002ec2:	4671      	mov	r1, lr
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f8c7 e41c 	str.w	lr, [r7, #1052]	; 0x41c
 8002eca:	f001 fb0b 	bl	80044e4 <CDC_Fill_Buffer>
  for (LineCounter=0; LineCounter<TotalNumberOfLine; LineCounter++) {
 8002ece:	f1b8 0f00 	cmp.w	r8, #0
 8002ed2:	dd02      	ble.n	8002eda <Init_MEMS_MLC+0x8e>
    RetValue = BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0,
 8002ed4:	7821      	ldrb	r1, [r4, #0]
 8002ed6:	7862      	ldrb	r2, [r4, #1]
 8002ed8:	e0a5      	b.n	8003026 <Init_MEMS_MLC+0x1da>
  STBOX1_PRINTF("Program loaded inside the LSM6DSOX MLC\n\r");
 8002eda:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80030c0 <Init_MEMS_MLC+0x274>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80030c4 <Init_MEMS_MLC+0x278>
  STBOX1_PRINTF("Program loaded inside the LSM6DSOX MLC\n\r");
 8002ee2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002ee6:	4634      	mov	r4, r6
 8002ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002ef4:	c403      	stmia	r4!, {r0, r1}
 8002ef6:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8002efa:	4671      	mov	r1, lr
 8002efc:	7022      	strb	r2, [r4, #0]
 8002efe:	4630      	mov	r0, r6
 8002f00:	f8c7 e41c 	str.w	lr, [r7, #1052]	; 0x41c
 8002f04:	f001 faee 	bl	80044e4 <CDC_Fill_Buffer>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    STBOX1_PRINTF("Enabled LSM6DSOX INT1 Detection \n\r");
 8002f0c:	4c65      	ldr	r4, [pc, #404]	; (80030a4 <Init_MEMS_MLC+0x258>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002f16:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	f04f 0a00 	mov.w	sl, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	f8cd a014 	str.w	sl, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f2a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f2c:	f44f 1b88 	mov.w	fp, #1114112	; 0x110000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	a903      	add	r1, sp, #12
 8002f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f38:	f8cd b010 	str.w	fp, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f003 ff78 	bl	8006e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002f40:	4652      	mov	r2, sl
 8002f42:	2105      	movs	r1, #5
 8002f44:	2008      	movs	r0, #8
 8002f46:	f003 fee9 	bl	8006d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002f4a:	2008      	movs	r0, #8
 8002f4c:	f003 ff24 	bl	8006d98 <HAL_NVIC_EnableIRQ>
    STBOX1_PRINTF("Enabled LSM6DSOX INT1 Detection \n\r");
 8002f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f52:	4635      	mov	r5, r6
 8002f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	802b      	strh	r3, [r5, #0]
 8002f5e:	f04f 0922 	mov.w	r9, #34	; 0x22
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	f805 3f02 	strb.w	r3, [r5, #2]!
 8002f68:	4649      	mov	r1, r9
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	f8c7 941c 	str.w	r9, [r7, #1052]	; 0x41c
 8002f70:	f001 fab8 	bl	80044e4 <CDC_Fill_Buffer>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f74:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f78:	484b      	ldr	r0, [pc, #300]	; (80030a8 <Init_MEMS_MLC+0x25c>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002f82:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f86:	f8cd b010 	str.w	fp, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	9302      	str	r3, [sp, #8]
 8002f90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	f8cd a014 	str.w	sl, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f96:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f9a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f9c:	f003 ff48 	bl	8006e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	2009      	movs	r0, #9
 8002fa6:	f003 feb9 	bl	8006d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002faa:	2009      	movs	r0, #9
 8002fac:	f003 fef4 	bl	8006d98 <HAL_NVIC_EnableIRQ>
    STBOX1_PRINTF("Enabled LSM6DSOX INT2 Detection \n\r");
 8002fb0:	f8c7 941c 	str.w	r9, [r7, #1052]	; 0x41c
 8002fb4:	4f3d      	ldr	r7, [pc, #244]	; (80030ac <Init_MEMS_MLC+0x260>)
 8002fb6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002fb8:	4634      	mov	r4, r6
 8002fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	8023      	strh	r3, [r4, #0]
 8002fc4:	0c1a      	lsrs	r2, r3, #16
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	4630      	mov	r0, r6
 8002fca:	702a      	strb	r2, [r5, #0]
 8002fcc:	f001 fa8a 	bl	80044e4 <CDC_Fill_Buffer>
}
 8002fd0:	b009      	add	sp, #36	; 0x24
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    STBOX1_PRINTF("-->Activity Recognition for LSM6DSOX MLC\r\n");
 8002fd6:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 80030c8 <Init_MEMS_MLC+0x27c>
    ProgramPointer = (ucf_line_t *)lsm6dsox_activity_recognition_for_mobile;
 8002fda:	4c35      	ldr	r4, [pc, #212]	; (80030b0 <Init_MEMS_MLC+0x264>)
    STBOX1_PRINTF("-->Activity Recognition for LSM6DSOX MLC\r\n");
 8002fdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fe0:	4635      	mov	r5, r6
 8002fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002fee:	c503      	stmia	r5!, {r0, r1}
 8002ff0:	f825 2b02 	strh.w	r2, [r5], #2
 8002ff4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8002ff8:	0c12      	lsrs	r2, r2, #16
 8002ffa:	4671      	mov	r1, lr
 8002ffc:	702a      	strb	r2, [r5, #0]
    TotalNumberOfLine = sizeof(lsm6dsox_activity_recognition_for_mobile) / sizeof(ucf_line_t);
 8002ffe:	f44f 680b 	mov.w	r8, #2224	; 0x8b0
    STBOX1_PRINTF("-->Activity Recognition for LSM6DSOX MLC\r\n");
 8003002:	4630      	mov	r0, r6
 8003004:	f8c7 e41c 	str.w	lr, [r7, #1052]	; 0x41c
 8003008:	f001 fa6c 	bl	80044e4 <CDC_Fill_Buffer>
    STBOX1_PRINTF("UCF Number Line=%ld\r\n",TotalNumberOfLine);
 800300c:	4642      	mov	r2, r8
 800300e:	4929      	ldr	r1, [pc, #164]	; (80030b4 <Init_MEMS_MLC+0x268>)
 8003010:	4630      	mov	r0, r6
 8003012:	f018 fa7b 	bl	801b50c <siprintf>
 8003016:	2116      	movs	r1, #22
 8003018:	4630      	mov	r0, r6
 800301a:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 800301e:	f001 fa61 	bl	80044e4 <CDC_Fill_Buffer>
 8003022:	2200      	movs	r2, #0
 8003024:	2110      	movs	r1, #16
      STBOX1_PRINTF("Error loading the Program to LSM6DSOX [%ld]->%lx\n\r",LineCounter,RetValue);
 8003026:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80030cc <Init_MEMS_MLC+0x280>
 800302a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80030d0 <Init_MEMS_MLC+0x284>
 800302e:	3402      	adds	r4, #2
  for (LineCounter=0; LineCounter<TotalNumberOfLine; LineCounter++) {
 8003030:	2500      	movs	r5, #0
 8003032:	e007      	b.n	8003044 <Init_MEMS_MLC+0x1f8>
 8003034:	3501      	adds	r5, #1
 8003036:	4545      	cmp	r5, r8
 8003038:	f6bf af4f 	bge.w	8002eda <Init_MEMS_MLC+0x8e>
    RetValue = BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0,
 800303c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8003040:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8003044:	2000      	movs	r0, #0
 8003046:	f008 fcdf 	bl	800ba08 <BSP_MOTION_SENSOR_Write_Register>
  for (LineCounter=0; LineCounter<TotalNumberOfLine; LineCounter++) {
 800304a:	3402      	adds	r4, #2
    if(RetValue!=BSP_ERROR_NONE) {
 800304c:	2800      	cmp	r0, #0
 800304e:	d0f1      	beq.n	8003034 <Init_MEMS_MLC+0x1e8>
      STBOX1_PRINTF("Error loading the Program to LSM6DSOX [%ld]->%lx\n\r",LineCounter,RetValue);
 8003050:	4603      	mov	r3, r0
 8003052:	462a      	mov	r2, r5
 8003054:	4651      	mov	r1, sl
 8003056:	4648      	mov	r0, r9
 8003058:	f018 fa58 	bl	801b50c <siprintf>
 800305c:	4601      	mov	r1, r0
 800305e:	4648      	mov	r0, r9
 8003060:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 8003064:	f001 fa3e 	bl	80044e4 <CDC_Fill_Buffer>
      Error_Handler();
 8003068:	f000 fb64 	bl	8003734 <Error_Handler>
 800306c:	e7e2      	b.n	8003034 <Init_MEMS_MLC+0x1e8>
    STBOX1_PRINTF("Error Init Accelero Sensor\n\r");
 800306e:	4d12      	ldr	r5, [pc, #72]	; (80030b8 <Init_MEMS_MLC+0x26c>)
 8003070:	4f0b      	ldr	r7, [pc, #44]	; (80030a0 <Init_MEMS_MLC+0x254>)
 8003072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003074:	f507 7647 	add.w	r6, r7, #796	; 0x31c
 8003078:	4634      	mov	r4, r6
 800307a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800307c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003080:	c407      	stmia	r4!, {r0, r1, r2}
 8003082:	f04f 0c1c 	mov.w	ip, #28
 8003086:	7023      	strb	r3, [r4, #0]
 8003088:	4661      	mov	r1, ip
 800308a:	4630      	mov	r0, r6
 800308c:	f8c7 c41c 	str.w	ip, [r7, #1052]	; 0x41c
 8003090:	f001 fa28 	bl	80044e4 <CDC_Fill_Buffer>
    Error_Handler();
 8003094:	f000 fb4e 	bl	8003734 <Error_Handler>
 8003098:	e6f9      	b.n	8002e8e <Init_MEMS_MLC+0x42>
 800309a:	bf00      	nop
 800309c:	080212c4 	.word	0x080212c4
 80030a0:	20000e90 	.word	0x20000e90
 80030a4:	080213d0 	.word	0x080213d0
 80030a8:	48001000 	.word	0x48001000
 80030ac:	080213f4 	.word	0x080213f4
 80030b0:	0801e7d0 	.word	0x0801e7d0
 80030b4:	08021358 	.word	0x08021358
 80030b8:	080212e0 	.word	0x080212e0
 80030bc:	08021300 	.word	0x08021300
 80030c0:	080213a4 	.word	0x080213a4
 80030c4:	40021000 	.word	0x40021000
 80030c8:	0802132c 	.word	0x0802132c
 80030cc:	08021370 	.word	0x08021370
 80030d0:	200011ac 	.word	0x200011ac

080030d4 <Init_MEMS_FSM>:
{
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (BSP_MOTION_SENSOR_Init(LSM6DSOX_0, MOTION_ACCELERO) == BSP_ERROR_NONE) {
 80030d8:	2102      	movs	r1, #2
{
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	4680      	mov	r8, r0
  if (BSP_MOTION_SENSOR_Init(LSM6DSOX_0, MOTION_ACCELERO) == BSP_ERROR_NONE) {
 80030de:	2000      	movs	r0, #0
 80030e0:	f008 fba0 	bl	800b824 <BSP_MOTION_SENSOR_Init>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	f040 8103 	bne.w	80032f0 <Init_MEMS_FSM+0x21c>
    STBOX1_PRINTF("OK Init Accelero  Sensor\n\r");
 80030ea:	4d8c      	ldr	r5, [pc, #560]	; (800331c <Init_MEMS_FSM+0x248>)
 80030ec:	4f8c      	ldr	r7, [pc, #560]	; (8003320 <Init_MEMS_FSM+0x24c>)
 80030ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f0:	f507 7647 	add.w	r6, r7, #796	; 0x31c
 80030f4:	4634      	mov	r4, r6
 80030f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030fc:	c403      	stmia	r4!, {r0, r1}
 80030fe:	f824 2b02 	strh.w	r2, [r4], #2
 8003102:	f04f 0c1a 	mov.w	ip, #26
 8003106:	0c12      	lsrs	r2, r2, #16
 8003108:	4661      	mov	r1, ip
 800310a:	7022      	strb	r2, [r4, #0]
 800310c:	4630      	mov	r0, r6
 800310e:	f8c7 c41c 	str.w	ip, [r7, #1052]	; 0x41c
 8003112:	f001 f9e7 	bl	80044e4 <CDC_Fill_Buffer>
  if((UseCustomIfAvailable==1) & (FSMCustomUCFFile!=NULL)) {
 8003116:	f1b8 0f01 	cmp.w	r8, #1
 800311a:	f8d7 4428 	ldr.w	r4, [r7, #1064]	; 0x428
 800311e:	f040 809e 	bne.w	800325e <Init_MEMS_FSM+0x18a>
 8003122:	2c00      	cmp	r4, #0
 8003124:	f000 809b 	beq.w	800325e <Init_MEMS_FSM+0x18a>
    STBOX1_PRINTF("-->Custom UCF Program for LSM6DSOX FSM\r\n");
 8003128:	f8df c210 	ldr.w	ip, [pc, #528]	; 800333c <Init_MEMS_FSM+0x268>
    TotalNumberOfLine = FSMCustomUCFFileLength;
 800312c:	f8d7 842c 	ldr.w	r8, [r7, #1068]	; 0x42c
    STBOX1_PRINTF("-->Custom UCF Program for LSM6DSOX FSM\r\n");
 8003130:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003134:	4635      	mov	r5, r6
 8003136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003138:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003142:	c503      	stmia	r5!, {r0, r1}
 8003144:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8003148:	702a      	strb	r2, [r5, #0]
 800314a:	4671      	mov	r1, lr
 800314c:	4630      	mov	r0, r6
 800314e:	f8c7 e41c 	str.w	lr, [r7, #1052]	; 0x41c
 8003152:	f001 f9c7 	bl	80044e4 <CDC_Fill_Buffer>
  for (LineCounter=0; LineCounter<TotalNumberOfLine; LineCounter++) {
 8003156:	f1b8 0f00 	cmp.w	r8, #0
 800315a:	dd02      	ble.n	8003162 <Init_MEMS_FSM+0x8e>
    RetValue = BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0,
 800315c:	7821      	ldrb	r1, [r4, #0]
 800315e:	7862      	ldrb	r2, [r4, #1]
 8003160:	e0a2      	b.n	80032a8 <Init_MEMS_FSM+0x1d4>
  STBOX1_PRINTF("Program loaded inside the LSM6DSOX FSM\n\r");
 8003162:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8003340 <Init_MEMS_FSM+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8003344 <Init_MEMS_FSM+0x270>
  STBOX1_PRINTF("Program loaded inside the LSM6DSOX FSM\n\r");
 800316a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800316e:	4634      	mov	r4, r6
 8003170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003172:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003178:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800317c:	c403      	stmia	r4!, {r0, r1}
 800317e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8003182:	4671      	mov	r1, lr
 8003184:	7022      	strb	r2, [r4, #0]
 8003186:	4630      	mov	r0, r6
 8003188:	f8c7 e41c 	str.w	lr, [r7, #1052]	; 0x41c
 800318c:	f001 f9aa 	bl	80044e4 <CDC_Fill_Buffer>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003190:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    STBOX1_PRINTF("Enabled LSM6DSOX INT1 Detection \n\r");
 8003194:	4c63      	ldr	r4, [pc, #396]	; (8003324 <Init_MEMS_FSM+0x250>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 800319e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	f04f 0a00 	mov.w	sl, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	f8cd a014 	str.w	sl, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031b2:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031b4:	f44f 1b88 	mov.w	fp, #1114112	; 0x110000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	a903      	add	r1, sp, #12
 80031ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031c0:	f8cd b010 	str.w	fp, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c4:	f003 fe34 	bl	8006e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80031c8:	4652      	mov	r2, sl
 80031ca:	2105      	movs	r1, #5
 80031cc:	2008      	movs	r0, #8
 80031ce:	f003 fda5 	bl	8006d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031d2:	2008      	movs	r0, #8
 80031d4:	f003 fde0 	bl	8006d98 <HAL_NVIC_EnableIRQ>
    STBOX1_PRINTF("Enabled LSM6DSOX INT1 Detection \n\r");
 80031d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031da:	4635      	mov	r5, r6
 80031dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	802b      	strh	r3, [r5, #0]
 80031e6:	f04f 0922 	mov.w	r9, #34	; 0x22
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f805 3f02 	strb.w	r3, [r5, #2]!
 80031f0:	4649      	mov	r1, r9
 80031f2:	4630      	mov	r0, r6
 80031f4:	f8c7 941c 	str.w	r9, [r7, #1052]	; 0x41c
 80031f8:	f001 f974 	bl	80044e4 <CDC_Fill_Buffer>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031fc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003200:	4849      	ldr	r0, [pc, #292]	; (8003328 <Init_MEMS_FSM+0x254>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 800320a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800320e:	f8cd b010 	str.w	fp, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	f8cd a014 	str.w	sl, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800321e:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003220:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003222:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003224:	f003 fe04 	bl	8006e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003228:	4652      	mov	r2, sl
 800322a:	2105      	movs	r1, #5
 800322c:	2009      	movs	r0, #9
 800322e:	f003 fd75 	bl	8006d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003232:	2009      	movs	r0, #9
 8003234:	f003 fdb0 	bl	8006d98 <HAL_NVIC_EnableIRQ>
    STBOX1_PRINTF("Enabled LSM6DSOX INT2 Detection \n\r");
 8003238:	f8c7 941c 	str.w	r9, [r7, #1052]	; 0x41c
 800323c:	4f3b      	ldr	r7, [pc, #236]	; (800332c <Init_MEMS_FSM+0x258>)
 800323e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003240:	4634      	mov	r4, r6
 8003242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003244:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	8023      	strh	r3, [r4, #0]
 800324c:	0c1a      	lsrs	r2, r3, #16
 800324e:	4649      	mov	r1, r9
 8003250:	4630      	mov	r0, r6
 8003252:	702a      	strb	r2, [r5, #0]
 8003254:	f001 f946 	bl	80044e4 <CDC_Fill_Buffer>
}
 8003258:	b009      	add	sp, #36	; 0x24
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    STBOX1_PRINTF("-->4D position recognition for LSM6DSOX FSM\r\n");
 800325e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8003348 <Init_MEMS_FSM+0x274>
    ProgramPointer = (ucf_line_t *)lsm6dsox_four_d;
 8003262:	4c33      	ldr	r4, [pc, #204]	; (8003330 <Init_MEMS_FSM+0x25c>)
    STBOX1_PRINTF("-->4D position recognition for LSM6DSOX FSM\r\n");
 8003264:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003268:	4635      	mov	r5, r6
 800326a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003272:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003276:	c507      	stmia	r5!, {r0, r1, r2}
 8003278:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 800327c:	4671      	mov	r1, lr
 800327e:	802b      	strh	r3, [r5, #0]
    TotalNumberOfLine = sizeof(lsm6dsox_four_d) / sizeof(ucf_line_t);
 8003280:	f04f 0838 	mov.w	r8, #56	; 0x38
    STBOX1_PRINTF("-->4D position recognition for LSM6DSOX FSM\r\n");
 8003284:	4630      	mov	r0, r6
 8003286:	f8c7 e41c 	str.w	lr, [r7, #1052]	; 0x41c
 800328a:	f001 f92b 	bl	80044e4 <CDC_Fill_Buffer>
    STBOX1_PRINTF("UCF Number Line=%ld\r\n",TotalNumberOfLine);
 800328e:	4642      	mov	r2, r8
 8003290:	4928      	ldr	r1, [pc, #160]	; (8003334 <Init_MEMS_FSM+0x260>)
 8003292:	4630      	mov	r0, r6
 8003294:	f018 f93a 	bl	801b50c <siprintf>
 8003298:	2114      	movs	r1, #20
 800329a:	4630      	mov	r0, r6
 800329c:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 80032a0:	f001 f920 	bl	80044e4 <CDC_Fill_Buffer>
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	2101      	movs	r1, #1
      STBOX1_PRINTF("Error loading the Program to LSM6DSOX [%ld]->%lx\n\r",LineCounter,RetValue);
 80032a8:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800334c <Init_MEMS_FSM+0x278>
 80032ac:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8003350 <Init_MEMS_FSM+0x27c>
 80032b0:	3402      	adds	r4, #2
  for (LineCounter=0; LineCounter<TotalNumberOfLine; LineCounter++) {
 80032b2:	2500      	movs	r5, #0
 80032b4:	e007      	b.n	80032c6 <Init_MEMS_FSM+0x1f2>
 80032b6:	3501      	adds	r5, #1
 80032b8:	4545      	cmp	r5, r8
 80032ba:	f6bf af52 	bge.w	8003162 <Init_MEMS_FSM+0x8e>
    RetValue = BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0,
 80032be:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80032c2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80032c6:	2000      	movs	r0, #0
 80032c8:	f008 fb9e 	bl	800ba08 <BSP_MOTION_SENSOR_Write_Register>
  for (LineCounter=0; LineCounter<TotalNumberOfLine; LineCounter++) {
 80032cc:	3402      	adds	r4, #2
    if(RetValue!=BSP_ERROR_NONE) {
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d0f1      	beq.n	80032b6 <Init_MEMS_FSM+0x1e2>
      STBOX1_PRINTF("Error loading the Program to LSM6DSOX [%ld]->%lx\n\r",LineCounter,RetValue);
 80032d2:	4603      	mov	r3, r0
 80032d4:	462a      	mov	r2, r5
 80032d6:	4651      	mov	r1, sl
 80032d8:	4648      	mov	r0, r9
 80032da:	f018 f917 	bl	801b50c <siprintf>
 80032de:	4601      	mov	r1, r0
 80032e0:	4648      	mov	r0, r9
 80032e2:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 80032e6:	f001 f8fd 	bl	80044e4 <CDC_Fill_Buffer>
      Error_Handler();
 80032ea:	f000 fa23 	bl	8003734 <Error_Handler>
 80032ee:	e7e2      	b.n	80032b6 <Init_MEMS_FSM+0x1e2>
    STBOX1_PRINTF("Error Init Accelero Sensor\n\r");
 80032f0:	4d11      	ldr	r5, [pc, #68]	; (8003338 <Init_MEMS_FSM+0x264>)
 80032f2:	4f0b      	ldr	r7, [pc, #44]	; (8003320 <Init_MEMS_FSM+0x24c>)
 80032f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f6:	f507 7647 	add.w	r6, r7, #796	; 0x31c
 80032fa:	4634      	mov	r4, r6
 80032fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003302:	c407      	stmia	r4!, {r0, r1, r2}
 8003304:	f04f 0c1c 	mov.w	ip, #28
 8003308:	7023      	strb	r3, [r4, #0]
 800330a:	4661      	mov	r1, ip
 800330c:	4630      	mov	r0, r6
 800330e:	f8c7 c41c 	str.w	ip, [r7, #1052]	; 0x41c
 8003312:	f001 f8e7 	bl	80044e4 <CDC_Fill_Buffer>
    Error_Handler();
 8003316:	f000 fa0d 	bl	8003734 <Error_Handler>
 800331a:	e6fc      	b.n	8003116 <Init_MEMS_FSM+0x42>
 800331c:	080212c4 	.word	0x080212c4
 8003320:	20000e90 	.word	0x20000e90
 8003324:	080213d0 	.word	0x080213d0
 8003328:	48001000 	.word	0x48001000
 800332c:	080213f4 	.word	0x080213f4
 8003330:	0801e760 	.word	0x0801e760
 8003334:	08021358 	.word	0x08021358
 8003338:	080212e0 	.word	0x080212e0
 800333c:	08021418 	.word	0x08021418
 8003340:	08021474 	.word	0x08021474
 8003344:	40021000 	.word	0x40021000
 8003348:	08021444 	.word	0x08021444
 800334c:	08021370 	.word	0x08021370
 8003350:	200011ac 	.word	0x200011ac

08003354 <LedOffTargetPlatform>:
  BSP_LED_Off(LED_BLUE);
 8003354:	2000      	movs	r0, #0
 8003356:	f007 be01 	b.w	800af5c <BSP_LED_Off>
 800335a:	bf00      	nop

0800335c <LedToggleTargetPlatform>:
  BSP_LED_Toggle(LED_BLUE);
 800335c:	2000      	movs	r0, #0
 800335e:	f007 be13 	b.w	800af88 <BSP_LED_Toggle>
 8003362:	bf00      	nop

08003364 <VCOM_read>:
 * @param  char *buffer Pointer to buffer.
 * @param  uint32_t len_maxData max. length.
 * @retval Number of really read data bytes.
 */
uint32_t VCOM_read(char *buffer, uint32_t len_max)
{
 8003364:	b570      	push	{r4, r5, r6, lr}
  /* VCOM data receive not completed or no VCOM data received at all. */
  if (VCOM_RxData == 0) {
 8003366:	4c1f      	ldr	r4, [pc, #124]	; (80033e4 <VCOM_read+0x80>)
 8003368:	f894 3430 	ldrb.w	r3, [r4, #1072]	; 0x430
 800336c:	b3a3      	cbz	r3, 80033d8 <VCOM_read+0x74>
    return 0;
  }

  /* ERROR: No VCOM data ready. */
  if (VCOM_RxLength == 0 || VCOM_RxBuffer == NULL) {
 800336e:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
 8003372:	4606      	mov	r6, r0
 8003374:	460d      	mov	r5, r1
 8003376:	b1bb      	cbz	r3, 80033a8 <VCOM_read+0x44>
 8003378:	f8d4 1438 	ldr.w	r1, [r4, #1080]	; 0x438
 800337c:	b1a1      	cbz	r1, 80033a8 <VCOM_read+0x44>
    Error_Handler();
  }

  /* Read all data */
  if (VCOM_RxLength <= len_max) {
 800337e:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
 8003382:	42ab      	cmp	r3, r5
 8003384:	d818      	bhi.n	80033b8 <VCOM_read+0x54>
    uint32_t len = VCOM_RxLength;
 8003386:	f8d4 5434 	ldr.w	r5, [r4, #1076]	; 0x434
    memcpy((uint8_t*)buffer, (uint8_t*)VCOM_RxBuffer, len);
 800338a:	4630      	mov	r0, r6
 800338c:	462a      	mov	r2, r5
 800338e:	f018 fa86 	bl	801b89e <memcpy>

    VCOM_RxData   = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    VCOM_RxBuffer = NULL;
 8003398:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    VCOM_RxLength = 0;
 800339c:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434

    CDC_Next_Packet_Rx();
 80033a0:	f001 f8c2 	bl	8004528 <CDC_Next_Packet_Rx>
    VCOM_RxBuffer += len_max;
    VCOM_RxLength -= len_max;

    return len_max;
  }
}
 80033a4:	4628      	mov	r0, r5
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80033a8:	f000 f9c4 	bl	8003734 <Error_Handler>
  if (VCOM_RxLength <= len_max) {
 80033ac:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    memcpy((uint8_t*)buffer, (uint8_t*)VCOM_RxBuffer, len);
 80033b0:	f8d4 1438 	ldr.w	r1, [r4, #1080]	; 0x438
  if (VCOM_RxLength <= len_max) {
 80033b4:	42ab      	cmp	r3, r5
 80033b6:	d9e6      	bls.n	8003386 <VCOM_read+0x22>
    memcpy((uint8_t*)buffer, (uint8_t*)VCOM_RxBuffer, len_max);
 80033b8:	462a      	mov	r2, r5
 80033ba:	4630      	mov	r0, r6
 80033bc:	f018 fa6f 	bl	801b89e <memcpy>
    VCOM_RxBuffer += len_max;
 80033c0:	f8d4 2438 	ldr.w	r2, [r4, #1080]	; 0x438
    VCOM_RxLength -= len_max;
 80033c4:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    VCOM_RxBuffer += len_max;
 80033c8:	442a      	add	r2, r5
    VCOM_RxLength -= len_max;
 80033ca:	1b5b      	subs	r3, r3, r5
    VCOM_RxBuffer += len_max;
 80033cc:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
    VCOM_RxLength -= len_max;
 80033d0:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
}
 80033d4:	4628      	mov	r0, r5
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    return 0;
 80033dc:	4615      	mov	r5, r2
}
 80033de:	4628      	mov	r0, r5
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	bf00      	nop
 80033e4:	20000e90 	.word	0x20000e90

080033e8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
    HAL_PWREx_EnableVddIO2();
 80033ec:	f004 fc86 	bl	8007cfc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HCI_TL_SPI_Init+0x78>)
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80033f2:	4e1c      	ldr	r6, [pc, #112]	; (8003464 <HCI_TL_SPI_Init+0x7c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80033fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fe:	f002 0208 	and.w	r2, r2, #8
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8003416:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800341a:	a903      	add	r1, sp, #12
 800341c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800341e:	9303      	str	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003424:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003428:	9304      	str	r3, [sp, #16]
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342a:	2501      	movs	r5, #1
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800342c:	f003 fd00 	bl	8006e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8003430:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8003434:	a903      	add	r1, sp, #12
 8003436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8003442:	f003 fcf5 	bl	8006e30 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8003446:	a903      	add	r1, sp, #12
 8003448:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800344a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8003452:	f003 fced 	bl	8006e30 <HAL_GPIO_Init>

  return BSP_SPI_Init();
 8003456:	f008 f8fb 	bl	800b650 <BSP_SPI2_Init>
}
 800345a:	b008      	add	sp, #32
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	48000c00 	.word	0x48000c00

08003468 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8003468:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800346a:	4808      	ldr	r0, [pc, #32]	; (800348c <HCI_TL_SPI_DeInit+0x24>)
 800346c:	2110      	movs	r1, #16
 800346e:	f003 fde7 	bl	8007040 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <HCI_TL_SPI_DeInit+0x24>)
 8003474:	2101      	movs	r1, #1
 8003476:	f003 fde3 	bl	8007040 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800347a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800347e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003482:	f003 fddd 	bl	8007040 <HAL_GPIO_DeInit>
  return 0;
}
 8003486:	2000      	movs	r0, #0
 8003488:	bd08      	pop	{r3, pc}
 800348a:	bf00      	nop
 800348c:	48000c00 	.word	0x48000c00

08003490 <HCI_TL_SPI_Reset>:
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003490:	2201      	movs	r2, #1
{
 8003492:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003494:	4611      	mov	r1, r2
 8003496:	480c      	ldr	r0, [pc, #48]	; (80034c8 <HCI_TL_SPI_Reset+0x38>)
 8003498:	f003 fe86 	bl	80071a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a6:	f003 fe7f 	bl	80071a8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80034aa:	2005      	movs	r0, #5
 80034ac:	f002 fdde 	bl	800606c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80034b0:	2201      	movs	r2, #1
 80034b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ba:	f003 fe75 	bl	80071a8 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80034be:	2005      	movs	r0, #5
 80034c0:	f002 fdd4 	bl	800606c <HAL_Delay>
  return 0;
}  
 80034c4:	2000      	movs	r0, #0
 80034c6:	bd08      	pop	{r3, pc}
 80034c8:	48000c00 	.word	0x48000c00

080034cc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80034cc:	b570      	push	{r4, r5, r6, lr}
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80034ce:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HCI_TL_SPI_Receive+0x7c>)
{
 80034d0:	4606      	mov	r6, r0
 80034d2:	460c      	mov	r4, r1
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80034d4:	e892 0003 	ldmia.w	r2, {r0, r1}
{
 80034d8:	b086      	sub	sp, #24
  uint8_t char_ff = 0xff;
 80034da:	22ff      	movs	r2, #255	; 0xff
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80034dc:	9002      	str	r0, [sp, #8]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80034de:	200a      	movs	r0, #10
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80034e0:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t char_ff = 0xff;
 80034e4:	f88d 2006 	strb.w	r2, [sp, #6]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80034e8:	f003 fc64 	bl	8006db4 <HAL_NVIC_DisableIRQ>
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80034ec:	4817      	ldr	r0, [pc, #92]	; (800354c <HCI_TL_SPI_Receive+0x80>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	2101      	movs	r1, #1
 80034f2:	f003 fe59 	bl	80071a8 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI_SendRecv(header_master, header_slave, HEADER_SIZE);
 80034f6:	2205      	movs	r2, #5
 80034f8:	a904      	add	r1, sp, #16
 80034fa:	a802      	add	r0, sp, #8
 80034fc:	f008 f80e 	bl	800b51c <BSP_SPI2_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8003500:	f8bd 5013 	ldrh.w	r5, [sp, #19]

  if(byte_count > 0) {
 8003504:	b1a5      	cbz	r5, 8003530 <HCI_TL_SPI_Receive+0x64>
    /* avoid to read more data that size of the buffer */

    if (byte_count > size){
 8003506:	42a5      	cmp	r5, r4
 8003508:	bf28      	it	cs
 800350a:	4625      	movcs	r5, r4
      byte_count = size;
    }

    for(len = 0; len < byte_count; len++) {
 800350c:	b185      	cbz	r5, 8003530 <HCI_TL_SPI_Receive+0x64>
 800350e:	2400      	movs	r4, #0
      BSP_SPI_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8003510:	2201      	movs	r2, #1
 8003512:	f10d 0107 	add.w	r1, sp, #7
 8003516:	f10d 0006 	add.w	r0, sp, #6
 800351a:	f007 ffff 	bl	800b51c <BSP_SPI2_SendRecv>
    for(len = 0; len < byte_count; len++) {
 800351e:	1c63      	adds	r3, r4, #1
 8003520:	b2da      	uxtb	r2, r3
      buffer[len] = read_char;
 8003522:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003526:	5531      	strb	r1, [r6, r4]
    for(len = 0; len < byte_count; len++) {
 8003528:	4295      	cmp	r5, r2
 800352a:	4614      	mov	r4, r2
 800352c:	d8f0      	bhi.n	8003510 <HCI_TL_SPI_Receive+0x44>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 800352e:	4615      	mov	r5, r2
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003530:	2201      	movs	r2, #1
 8003532:	4611      	mov	r1, r2
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <HCI_TL_SPI_Receive+0x80>)
 8003536:	f003 fe37 	bl	80071a8 <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);  
 800353a:	200a      	movs	r0, #10
 800353c:	f003 fc2c 	bl	8006d98 <HAL_NVIC_EnableIRQ>
}
 8003540:	4628      	mov	r0, r5
 8003542:	b006      	add	sp, #24
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	bf00      	nop
 8003548:	0801f930 	.word	0x0801f930
 800354c:	48000c00 	.word	0x48000c00

08003550 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8003550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t rx_bytes;

  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HCI_TL_SPI_Send+0xb0>)
    uint32_t tickstart_data_available = HAL_GetTick();
    
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003556:	4e2b      	ldr	r6, [pc, #172]	; (8003604 <HCI_TL_SPI_Send+0xb4>)
{
 8003558:	4681      	mov	r9, r0
 800355a:	4688      	mov	r8, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800355c:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8003560:	b085      	sub	sp, #20
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003562:	f88d 1004 	strb.w	r1, [sp, #4]
 8003566:	9000      	str	r0, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f002 fd7a 	bl	8006060 <HAL_GetTick>
 800356c:	4607      	mov	r7, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800356e:	200a      	movs	r0, #10
 8003570:	f003 fc20 	bl	8006db4 <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 8003574:	f002 fd74 	bl	8006060 <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003578:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 800357a:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800357c:	2101      	movs	r1, #1
 800357e:	4630      	mov	r0, r6
 8003580:	f003 fe12 	bl	80071a8 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable()) {
 8003584:	e005      	b.n	8003592 <HCI_TL_SPI_Send+0x42>
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION) {
 8003586:	f002 fd6b 	bl	8006060 <HAL_GetTick>
 800358a:	1b40      	subs	r0, r0, r5
 800358c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003590:	d80f      	bhi.n	80035b2 <HCI_TL_SPI_Send+0x62>
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003592:	481c      	ldr	r0, [pc, #112]	; (8003604 <HCI_TL_SPI_Send+0xb4>)
 8003594:	2110      	movs	r1, #16
 8003596:	f003 fe01 	bl	800719c <HAL_GPIO_ReadPin>
    while(!IsDataAvailable()) {
 800359a:	2801      	cmp	r0, #1
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800359c:	4604      	mov	r4, r0
    while(!IsDataAvailable()) {
 800359e:	d1f2      	bne.n	8003586 <HCI_TL_SPI_Send+0x36>
      BSP_SPI_SendRecv(header_master, header_slave, HEADER_SIZE);
 80035a0:	2205      	movs	r2, #5
 80035a2:	a902      	add	r1, sp, #8
 80035a4:	4668      	mov	r0, sp
 80035a6:	f007 ffb9 	bl	800b51c <BSP_SPI2_SendRecv>
      if(rx_bytes >= size) {
 80035aa:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 80035ae:	4543      	cmp	r3, r8
 80035b0:	d213      	bcs.n	80035da <HCI_TL_SPI_Send+0x8a>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80035b2:	2201      	movs	r2, #1
 80035b4:	4611      	mov	r1, r2
 80035b6:	4630      	mov	r0, r6
 80035b8:	f003 fdf6 	bl	80071a8 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION) {
 80035bc:	f002 fd50 	bl	8006060 <HAL_GetTick>
 80035c0:	1bc0      	subs	r0, r0, r7
 80035c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035c6:	d9d5      	bls.n	8003574 <HCI_TL_SPI_Send+0x24>
      result = -3;
 80035c8:	f06f 0402 	mvn.w	r4, #2
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);  
 80035cc:	200a      	movs	r0, #10
 80035ce:	f003 fbe3 	bl	8006d98 <HAL_NVIC_EnableIRQ>
}
 80035d2:	4620      	mov	r0, r4
 80035d4:	b005      	add	sp, #20
 80035d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        BSP_SPI_SendRecv(buffer, read_char_buf, size);
 80035da:	490b      	ldr	r1, [pc, #44]	; (8003608 <HCI_TL_SPI_Send+0xb8>)
 80035dc:	4642      	mov	r2, r8
 80035de:	4648      	mov	r0, r9
 80035e0:	f007 ff9c 	bl	800b51c <BSP_SPI2_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80035e4:	4622      	mov	r2, r4
 80035e6:	4621      	mov	r1, r4
 80035e8:	4806      	ldr	r0, [pc, #24]	; (8003604 <HCI_TL_SPI_Send+0xb4>)
 80035ea:	f003 fddd 	bl	80071a8 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION) {
 80035ee:	f002 fd37 	bl	8006060 <HAL_GetTick>
 80035f2:	1bc0      	subs	r0, r0, r7
 80035f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035f8:	bf98      	it	ls
 80035fa:	2400      	movls	r4, #0
 80035fc:	d9e6      	bls.n	80035cc <HCI_TL_SPI_Send+0x7c>
 80035fe:	e7e3      	b.n	80035c8 <HCI_TL_SPI_Send+0x78>
 8003600:	0801f938 	.word	0x0801f938
 8003604:	48000c00 	.word	0x48000c00
 8003608:	200012dc 	.word	0x200012dc

0800360c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 800360c:	b510      	push	{r4, lr}
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800360e:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <hci_tl_lowlevel_init+0x38>)
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <hci_tl_lowlevel_init+0x3c>)
  fops.Send    = HCI_TL_SPI_Send;
  fops.Receive = HCI_TL_SPI_Receive;
 8003612:	490e      	ldr	r1, [pc, #56]	; (800364c <hci_tl_lowlevel_init+0x40>)
  fops.Send    = HCI_TL_SPI_Send;
 8003614:	4c0e      	ldr	r4, [pc, #56]	; (8003650 <hci_tl_lowlevel_init+0x44>)
{
 8003616:	b088      	sub	sp, #32
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8003618:	e9cd 2301 	strd	r2, r3, [sp, #4]
  fops.Reset   = HCI_TL_SPI_Reset;
  fops.GetTick = BSP_GetTick;
  
  hci_register_io_bus (&fops);
 800361c:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <hci_tl_lowlevel_init+0x48>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <hci_tl_lowlevel_init+0x4c>)
  fops.GetTick = BSP_GetTick;
 8003622:	9307      	str	r3, [sp, #28]
  fops.Receive = HCI_TL_SPI_Receive;
 8003624:	e9cd 1404 	strd	r1, r4, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8003628:	9203      	str	r2, [sp, #12]
  hci_register_io_bus (&fops);
 800362a:	f00c fdf7 	bl	801021c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_NVIC_SetPriority(HCI_TL_SPI_EXTI_IRQn, 5, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	2105      	movs	r1, #5
 8003632:	200a      	movs	r0, #10
 8003634:	f003 fb72 	bl	8006d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003638:	200a      	movs	r0, #10
 800363a:	f003 fbad 	bl	8006d98 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800363e:	b008      	add	sp, #32
 8003640:	bd10      	pop	{r4, pc}
 8003642:	bf00      	nop
 8003644:	080033e9 	.word	0x080033e9
 8003648:	08003469 	.word	0x08003469
 800364c:	080034cd 	.word	0x080034cd
 8003650:	08003551 	.word	0x08003551
 8003654:	0800b549 	.word	0x0800b549
 8003658:	08003491 	.word	0x08003491

0800365c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800365c:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800365e:	4c06      	ldr	r4, [pc, #24]	; (8003678 <hci_tl_lowlevel_isr+0x1c>)
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable()) {
 8003660:	e001      	b.n	8003666 <hci_tl_lowlevel_isr+0xa>
    hci_notify_asynch_evt(NULL);
 8003662:	f00c fedf 	bl	8010424 <hci_notify_asynch_evt>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003666:	2110      	movs	r1, #16
 8003668:	4620      	mov	r0, r4
 800366a:	f003 fd97 	bl	800719c <HAL_GPIO_ReadPin>
  while(IsDataAvailable()) {
 800366e:	2801      	cmp	r0, #1
    hci_notify_asynch_evt(NULL);
 8003670:	f04f 0000 	mov.w	r0, #0
  while(IsDataAvailable()) {
 8003674:	d0f5      	beq.n	8003662 <hci_tl_lowlevel_isr+0x6>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8003676:	bd10      	pop	{r4, pc}
 8003678:	48000c00 	.word	0x48000c00

0800367c <dwtCyclesToTime1>:
  int us;
};

int dwtCyclesToTime1(uint64_t clks, struct dwtTime1 *t)
{
  if (!t)
 800367c:	2a00      	cmp	r2, #0
 800367e:	d056      	beq.n	800372e <dwtCyclesToTime1+0xb2>
{
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	4605      	mov	r5, r0
 8003686:	4688      	mov	r8, r1
 8003688:	4616      	mov	r6, r2
    return -1;
  uint32_t fcpu = HAL_RCC_GetHCLKFreq();
 800368a:	f005 f86b 	bl	8008764 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 800368e:	2300      	movs	r3, #0
  uint32_t fcpu = HAL_RCC_GetHCLKFreq();
 8003690:	4681      	mov	r9, r0
  uint64_t s  = clks / fcpu;
 8003692:	4602      	mov	r2, r0
 8003694:	4641      	mov	r1, r8
 8003696:	4628      	mov	r0, r5
 8003698:	f7fd fb1e 	bl	8000cd8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 800369c:	016c      	lsls	r4, r5, #5
 800369e:	ea4f 1348 	mov.w	r3, r8, lsl #5
 80036a2:	1b64      	subs	r4, r4, r5
 80036a4:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
 80036a8:	eb63 0a08 	sbc.w	sl, r3, r8
  uint64_t s  = clks / fcpu;
 80036ac:	4607      	mov	r7, r0
  uint64_t ms = (clks * 1000) / fcpu;
 80036ae:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80036b2:	00a0      	lsls	r0, r4, #2
 80036b4:	1940      	adds	r0, r0, r5
 80036b6:	ea41 7194 	orr.w	r1, r1, r4, lsr #30
 80036ba:	eb48 0101 	adc.w	r1, r8, r1
 80036be:	00c9      	lsls	r1, r1, #3
 80036c0:	464a      	mov	r2, r9
 80036c2:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 80036c6:	2300      	movs	r3, #0
 80036c8:	00c0      	lsls	r0, r0, #3
 80036ca:	f7fd fb05 	bl	8000cd8 <__aeabi_uldivmod>
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80036ce:	ea4f 234a 	mov.w	r3, sl, lsl #9
 80036d2:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80036d6:	0264      	lsls	r4, r4, #9
 80036d8:	1964      	adds	r4, r4, r5
 80036da:	eb48 0303 	adc.w	r3, r8, r3
  uint64_t ms = (clks * 1000) / fcpu;
 80036de:	4602      	mov	r2, r0
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80036e0:	0199      	lsls	r1, r3, #6
 80036e2:	01a0      	lsls	r0, r4, #6
 80036e4:	1b00      	subs	r0, r0, r4
 80036e6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
  ms -= (s * 1000);
 80036ea:	ebc7 1447 	rsb	r4, r7, r7, lsl #5
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80036ee:	eb61 0103 	sbc.w	r1, r1, r3
 80036f2:	1940      	adds	r0, r0, r5
  ms -= (s * 1000);
 80036f4:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 80036f8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80036fc:	eb48 0101 	adc.w	r1, r8, r1
 8003700:	464a      	mov	r2, r9
 8003702:	2300      	movs	r3, #0
 8003704:	f7fd fae8 	bl	8000cd8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
 8003708:	eb07 2344 	add.w	r3, r7, r4, lsl #9
 800370c:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8003710:	19db      	adds	r3, r3, r7
 8003712:	1ac0      	subs	r0, r0, r3
 8003714:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 8003718:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800371c:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
  t->us = us;
 8003720:	e9c6 5002 	strd	r5, r0, [r6, #8]
  t->s = s;
 8003724:	e9c6 9700 	strd	r9, r7, [r6]
  return 0;
 8003728:	2000      	movs	r0, #0
}
 800372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
 800372e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003732:	4770      	bx	lr

08003734 <Error_Handler>:
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  STBOX1_PRINTF("Error_Handler\r\n");
 8003734:	4d07      	ldr	r5, [pc, #28]	; (8003754 <Error_Handler+0x20>)
 8003736:	4c08      	ldr	r4, [pc, #32]	; (8003758 <Error_Handler+0x24>)
{
 8003738:	b508      	push	{r3, lr}
  STBOX1_PRINTF("Error_Handler\r\n");
 800373a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800373c:	4d07      	ldr	r5, [pc, #28]	; (800375c <Error_Handler+0x28>)
 800373e:	6020      	str	r0, [r4, #0]
 8003740:	200f      	movs	r0, #15
 8003742:	6028      	str	r0, [r5, #0]
 8003744:	6061      	str	r1, [r4, #4]
 8003746:	4601      	mov	r1, r0
 8003748:	4620      	mov	r0, r4
 800374a:	60a2      	str	r2, [r4, #8]
 800374c:	60e3      	str	r3, [r4, #12]
 800374e:	f000 fec9 	bl	80044e4 <CDC_Fill_Buffer>
  /* User may add here some code to deal with this error */
  while(1){
 8003752:	e7fe      	b.n	8003752 <Error_Handler+0x1e>
 8003754:	0801f940 	.word	0x0801f940
 8003758:	200011ac 	.word	0x200011ac
 800375c:	200012ac 	.word	0x200012ac

08003760 <main>:
{
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	ed2d 8b02 	vpush	{d8}
 8003768:	f5ad 3d9d 	sub.w	sp, sp, #80384	; 0x13a00
 800376c:	b08b      	sub	sp, #44	; 0x2c
 800376e:	f50d 339d 	add.w	r3, sp, #80384	; 0x13a00
 8003772:	3307      	adds	r3, #7
 8003774:	f023 0b1f 	bic.w	fp, r3, #31
	 ai_handle audio_nw = AI_HANDLE_NULL;
 8003778:	ab10      	add	r3, sp, #64	; 0x40
 800377a:	2400      	movs	r4, #0
 800377c:	601c      	str	r4, [r3, #0]
	 const ai_handle acts[] = { activations };
 800377e:	ab5f      	add	r3, sp, #380	; 0x17c
 8003780:	f8cb 3000 	str.w	r3, [fp]
  if(DFU_Var == DFU_MAGIC_NUM) {
 8003784:	4bc2      	ldr	r3, [pc, #776]	; (8003a90 <main+0x330>)
 8003786:	4ac3      	ldr	r2, [pc, #780]	; (8003a94 <main+0x334>)
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	4291      	cmp	r1, r2
 800378c:	d042      	beq.n	8003814 <main+0xb4>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800378e:	2400      	movs	r4, #0
 8003790:	ad22      	add	r5, sp, #136	; 0x88
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003792:	ae27      	add	r6, sp, #156	; 0x9c
  HAL_Init();
 8003794:	f002 fc48 	bl	8006028 <HAL_Init>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003798:	af38      	add	r7, sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800379a:	4621      	mov	r1, r4
 800379c:	2244      	movs	r2, #68	; 0x44
 800379e:	4630      	mov	r0, r6
 80037a0:	f017 ffc6 	bl	801b730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a4:	4621      	mov	r1, r4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a6:	e9c5 4400 	strd	r4, r4, [r5]
 80037aa:	e9c5 4402 	strd	r4, r4, [r5, #8]
 80037ae:	612c      	str	r4, [r5, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b0:	229c      	movs	r2, #156	; 0x9c
 80037b2:	4638      	mov	r0, r7
 80037b4:	f017 ffbc 	bl	801b730 <memset>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK) {
 80037b8:	4620      	mov	r0, r4
 80037ba:	f004 fa21 	bl	8007c00 <HAL_PWREx_ControlVoltageScaling>
 80037be:	4604      	mov	r4, r0
 80037c0:	b100      	cbz	r0, 80037c4 <main+0x64>
    while(1);
 80037c2:	e7fe      	b.n	80037c2 <main+0x62>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037c4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8003abc <main+0x35c>
  HAL_PWR_EnableBkUpAccess();
 80037c8:	f004 fa02 	bl	8007bd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037cc:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80037d0:	f023 0318 	bic.w	r3, r3, #24
 80037d4:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037d8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037da:	e9c6 330e 	strd	r3, r3, [r6, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037de:	62b3      	str	r3, [r6, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037e0:	6433      	str	r3, [r6, #64]	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80037e2:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037e4:	61f4      	str	r4, [r6, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80037e6:	6273      	str	r3, [r6, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037e8:	60b3      	str	r3, [r6, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037ea:	61b3      	str	r3, [r6, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ec:	2435      	movs	r4, #53	; 0x35
 80037ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f2:	e9c6 4300 	strd	r4, r3, [r6]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80037f6:	23b0      	movs	r3, #176	; 0xb0
 80037f8:	6233      	str	r3, [r6, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037fa:	f04f 0a03 	mov.w	sl, #3
 80037fe:	f04f 0904 	mov.w	r9, #4
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003802:	233c      	movs	r3, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003804:	e9c6 a90b 	strd	sl, r9, [r6, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003808:	6373      	str	r3, [r6, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800380a:	a827      	add	r0, sp, #156	; 0x9c
 800380c:	f004 fb86 	bl	8007f1c <HAL_RCC_OscConfig>
 8003810:	b1b8      	cbz	r0, 8003842 <main+0xe2>
    while(1);
 8003812:	e7fe      	b.n	8003812 <main+0xb2>
    DFU_Var = 0x00000000;
 8003814:	601c      	str	r4, [r3, #0]
    HAL_RCC_DeInit();
 8003816:	f004 fabb 	bl	8007d90 <HAL_RCC_DeInit>
    SysTick->CTRL = 0;
 800381a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800381e:	611c      	str	r4, [r3, #16]
    SysTick->LOAD = 0;
 8003820:	615c      	str	r4, [r3, #20]
    SysTick->VAL = 0;
 8003822:	619c      	str	r4, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003824:	b672      	cpsid	i
    __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 8003826:	4a9c      	ldr	r2, [pc, #624]	; (8003a98 <main+0x338>)
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6013      	str	r3, [r2, #0]
    __set_MSP(*(__IO uint32_t*) 0x1FFF0000);
 8003834:	4b99      	ldr	r3, [pc, #612]	; (8003a9c <main+0x33c>)
 8003836:	681a      	ldr	r2, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003838:	f382 8808 	msr	MSP, r2
    JumpToDFU();
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4798      	blx	r3
 8003840:	e7a5      	b.n	800378e <main+0x2e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8003842:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003844:	e9c5 a001 	strd	sl, r0, [r5, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003848:	e9c5 0003 	strd	r0, r0, [r5, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK   |
 800384c:	602b      	str	r3, [r5, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800384e:	2105      	movs	r1, #5
 8003850:	a822      	add	r0, sp, #136	; 0x88
 8003852:	f004 fe79 	bl	8008548 <HAL_RCC_ClockConfig>
 8003856:	b100      	cbz	r0, 800385a <main+0xfa>
    while(1);
 8003858:	e7fe      	b.n	8003858 <main+0xf8>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1   |
 800385a:	4b91      	ldr	r3, [pc, #580]	; (8003aa0 <main+0x340>)
 800385c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK|RCC_PLLSAI1_SAI1CLK;  
 800385e:	4b91      	ldr	r3, [pc, #580]	; (8003aa4 <main+0x344>)
 8003860:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;  
 8003862:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800386a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800386e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003876:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8003878:	f04f 0c05 	mov.w	ip, #5
 800387c:	2360      	movs	r3, #96	; 0x60
 800387e:	e9c7 c302 	strd	ip, r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8003882:	2319      	movs	r3, #25
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003884:	66f8      	str	r0, [r7, #108]	; 0x6c
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;  
 8003886:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800388a:	6778      	str	r0, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800388c:	e9c7 9905 	strd	r9, r9, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003890:	f8c7 a004 	str.w	sl, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8003894:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003896:	a838      	add	r0, sp, #224	; 0xe0
 8003898:	f005 f8a0 	bl	80089dc <HAL_RCCEx_PeriphCLKConfig>
 800389c:	2800      	cmp	r0, #0
 800389e:	f040 80db 	bne.w	8003a58 <main+0x2f8>
  InitTargetPlatform();
 80038a2:	f7ff f95f 	bl	8002b64 <InitTargetPlatform>
  __HAL_RCC_CRC_CLK_ENABLE();
 80038a6:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
    STBOX1_PRINTF("\r\n------------------------------------------------------------\r\n");
 80038aa:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8003ac0 <main+0x360>
 80038ae:	497e      	ldr	r1, [pc, #504]	; (8003aa8 <main+0x348>)
 80038b0:	487e      	ldr	r0, [pc, #504]	; (8003aac <main+0x34c>)
    STBOX1_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n\tCompiled %s %s"
 80038b2:	4d7f      	ldr	r5, [pc, #508]	; (8003ab0 <main+0x350>)
  STBOX1_PRINTF("------------------------------------------------------------\r\n");
 80038b4:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8003aac <main+0x34c>
  __HAL_RCC_CRC_CLK_ENABLE();
 80038b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038bc:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 80038c0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80038c4:	aa11      	add	r2, sp, #68	; 0x44
 80038c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	6813      	ldr	r3, [r2, #0]
    STBOX1_PRINTF("\r\n------------------------------------------------------------\r\n");
 80038ce:	2241      	movs	r2, #65	; 0x41
 80038d0:	f017 ffe5 	bl	801b89e <memcpy>
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	4875      	ldr	r0, [pc, #468]	; (8003aac <main+0x34c>)
 80038d8:	f8c9 1000 	str.w	r1, [r9]
 80038dc:	f000 fe02 	bl	80044e4 <CDC_Fill_Buffer>
    STBOX1_PRINTF("STMicroelectronics %s\r\n"
 80038e0:	4a74      	ldr	r2, [pc, #464]	; (8003ab4 <main+0x354>)
 80038e2:	9400      	str	r4, [sp, #0]
 80038e4:	2330      	movs	r3, #48	; 0x30
 80038e6:	f102 0108 	add.w	r1, r2, #8
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	486f      	ldr	r0, [pc, #444]	; (8003aac <main+0x34c>)
 80038ee:	2331      	movs	r3, #49	; 0x31
 80038f0:	f017 fe0c 	bl	801b50c <siprintf>
 80038f4:	214e      	movs	r1, #78	; 0x4e
 80038f6:	486d      	ldr	r0, [pc, #436]	; (8003aac <main+0x34c>)
 80038f8:	f8c9 1000 	str.w	r1, [r9]
 80038fc:	f000 fdf2 	bl	80044e4 <CDC_Fill_Buffer>
    STBOX1_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n\tCompiled %s %s"
 8003900:	f002 fbc6 	bl	8006090 <HAL_GetHalVersion>
 8003904:	4606      	mov	r6, r0
 8003906:	f002 fbc3 	bl	8006090 <HAL_GetHalVersion>
 800390a:	4607      	mov	r7, r0
 800390c:	f002 fbc0 	bl	8006090 <HAL_GetHalVersion>
 8003910:	4604      	mov	r4, r0
 8003912:	f002 fbbd 	bl	8006090 <HAL_GetHalVersion>
 8003916:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800391a:	f105 010c 	add.w	r1, r5, #12
 800391e:	b2c0      	uxtb	r0, r0
 8003920:	0e32      	lsrs	r2, r6, #24
 8003922:	9001      	str	r0, [sp, #4]
 8003924:	9400      	str	r4, [sp, #0]
 8003926:	f3c7 4307 	ubfx	r3, r7, #16, #8
 800392a:	9503      	str	r5, [sp, #12]
 800392c:	9102      	str	r1, [sp, #8]
 800392e:	485f      	ldr	r0, [pc, #380]	; (8003aac <main+0x34c>)
 8003930:	f1a5 013c 	sub.w	r1, r5, #60	; 0x3c
 8003934:	f017 fdea 	bl	801b50c <siprintf>
 8003938:	4601      	mov	r1, r0
 800393a:	f8c9 0000 	str.w	r0, [r9]
 800393e:	4650      	mov	r0, sl
 8003940:	f000 fdd0 	bl	80044e4 <CDC_Fill_Buffer>
  STBOX1_PRINTF("------------------------------------------------------------\r\n");
 8003944:	f105 0418 	add.w	r4, r5, #24
 8003948:	f105 0648 	add.w	r6, r5, #72	; 0x48
 800394c:	4655      	mov	r5, sl
 800394e:	4627      	mov	r7, r4
 8003950:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003952:	42b7      	cmp	r7, r6
 8003954:	f105 0510 	add.w	r5, r5, #16
 8003958:	f104 0410 	add.w	r4, r4, #16
 800395c:	f845 0c10 	str.w	r0, [r5, #-16]
 8003960:	f845 1c0c 	str.w	r1, [r5, #-12]
 8003964:	f845 2c08 	str.w	r2, [r5, #-8]
 8003968:	f845 3c04 	str.w	r3, [r5, #-4]
 800396c:	d1ef      	bne.n	800394e <main+0x1ee>
 800396e:	4623      	mov	r3, r4
 8003970:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003972:	263e      	movs	r6, #62	; 0x3e
 8003974:	f8c9 6000 	str.w	r6, [r9]
  STBOX1_PRINTF("\r\nInitializing Bluetooth\r\n");
 8003978:	4c4f      	ldr	r4, [pc, #316]	; (8003ab8 <main+0x358>)
  STBOX1_PRINTF("------------------------------------------------------------\r\n");
 800397a:	60aa      	str	r2, [r5, #8]
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	789b      	ldrb	r3, [r3, #2]
 8003980:	6028      	str	r0, [r5, #0]
 8003982:	6069      	str	r1, [r5, #4]
 8003984:	81aa      	strh	r2, [r5, #12]
 8003986:	4631      	mov	r1, r6
 8003988:	73ab      	strb	r3, [r5, #14]
 800398a:	4848      	ldr	r0, [pc, #288]	; (8003aac <main+0x34c>)
 800398c:	f000 fdaa 	bl	80044e4 <CDC_Fill_Buffer>
  STBOX1_PRINTF("\r\nInitializing Bluetooth\r\n");
 8003990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003992:	251a      	movs	r5, #26
 8003994:	f8c9 5000 	str.w	r5, [r9]
 8003998:	f8ca 0000 	str.w	r0, [sl]
 800399c:	f8ca 1004 	str.w	r1, [sl, #4]
 80039a0:	cc03      	ldmia	r4!, {r0, r1}
 80039a2:	f8ca 300c 	str.w	r3, [sl, #12]
 80039a6:	8823      	ldrh	r3, [r4, #0]
 80039a8:	f8aa 3018 	strh.w	r3, [sl, #24]
 80039ac:	78a3      	ldrb	r3, [r4, #2]
 80039ae:	f8ca 2008 	str.w	r2, [sl, #8]
 80039b2:	f88a 301a 	strb.w	r3, [sl, #26]
 80039b6:	f8ca 0010 	str.w	r0, [sl, #16]
 80039ba:	f8ca 1014 	str.w	r1, [sl, #20]
 80039be:	483b      	ldr	r0, [pc, #236]	; (8003aac <main+0x34c>)
 80039c0:	4629      	mov	r1, r5
  STBOX1_PRINTF("\r\nCreating Neural network\r\n");
 80039c2:	1d25      	adds	r5, r4, #4
  STBOX1_PRINTF("\r\nInitializing Bluetooth\r\n");
 80039c4:	f000 fd8e 	bl	80044e4 <CDC_Fill_Buffer>
  BluetoothInit();
 80039c8:	f7fe fe46 	bl	8002658 <BluetoothInit>
  STBOX1_PRINTF("\r\nCreating Neural network\r\n");
 80039cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ce:	261b      	movs	r6, #27
 80039d0:	f8c9 6000 	str.w	r6, [r9]
 80039d4:	f8ca 0000 	str.w	r0, [sl]
 80039d8:	f8ca 1004 	str.w	r1, [sl, #4]
 80039dc:	f8ca 2008 	str.w	r2, [sl, #8]
 80039e0:	cd07      	ldmia	r5!, {r0, r1, r2}
 80039e2:	f8ca 300c 	str.w	r3, [sl, #12]
 80039e6:	f8ca 0010 	str.w	r0, [sl, #16]
 80039ea:	f8ca 1014 	str.w	r1, [sl, #20]
 80039ee:	f8ca 2018 	str.w	r2, [sl, #24]
 80039f2:	4631      	mov	r1, r6
 80039f4:	482d      	ldr	r0, [pc, #180]	; (8003aac <main+0x34c>)
 80039f6:	f000 fd75 	bl	80044e4 <CDC_Fill_Buffer>
  ai_err = ai_audio_model_create_and_init(&audio_nw, acts, NULL);
 80039fa:	2200      	movs	r2, #0
 80039fc:	4659      	mov	r1, fp
 80039fe:	a810      	add	r0, sp, #64	; 0x40
 8003a00:	f010 f83c 	bl	8013a7c <ai_audio_model_create_and_init>
  if (ai_err.type != AI_ERROR_NONE) {
 8003a04:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8003a08:	d127      	bne.n	8003a5a <main+0x2fa>
  if (ai_audio_model_get_report(audio_nw, &report) != true) {
 8003a0a:	a938      	add	r1, sp, #224	; 0xe0
 8003a0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003a0e:	af10      	add	r7, sp, #64	; 0x40
 8003a10:	f00f ff4a 	bl	80138a8 <ai_audio_model_get_report>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d155      	bne.n	8003ac4 <main+0x364>
	  STBOX1_PRINTF("ai get report error\n");
 8003a18:	343c      	adds	r4, #60	; 0x3c
 8003a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a1c:	2514      	movs	r5, #20
 8003a1e:	f8c9 5000 	str.w	r5, [r9]
 8003a22:	f8ca 0000 	str.w	r0, [sl]
 8003a26:	f8ca 2008 	str.w	r2, [sl, #8]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	7922      	ldrb	r2, [r4, #4]
 8003a2e:	f8ca 1004 	str.w	r1, [sl, #4]
 8003a32:	f8ca 0010 	str.w	r0, [sl, #16]
 8003a36:	4629      	mov	r1, r5
 8003a38:	481c      	ldr	r0, [pc, #112]	; (8003aac <main+0x34c>)
 8003a3a:	f8ca 300c 	str.w	r3, [sl, #12]
 8003a3e:	f88a 2014 	strb.w	r2, [sl, #20]
 8003a42:	f000 fd4f 	bl	80044e4 <CDC_Fill_Buffer>
}
 8003a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a4a:	f50d 3d9d 	add.w	sp, sp, #80384	; 0x13a00
 8003a4e:	b00b      	add	sp, #44	; 0x2c
 8003a50:	ecbd 8b02 	vpop	{d8}
 8003a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(1);
 8003a58:	e7fe      	b.n	8003a58 <main+0x2f8>
	  STBOX1_PRINTF("ai init_and_create error\n");
 8003a5a:	3420      	adds	r4, #32
 8003a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a5e:	2519      	movs	r5, #25
 8003a60:	f8c9 5000 	str.w	r5, [r9]
 8003a64:	f8ca 0000 	str.w	r0, [sl]
 8003a68:	f8ca 1004 	str.w	r1, [sl, #4]
 8003a6c:	cc03      	ldmia	r4!, {r0, r1}
 8003a6e:	f8ca 300c 	str.w	r3, [sl, #12]
 8003a72:	8823      	ldrh	r3, [r4, #0]
 8003a74:	f8ca 0010 	str.w	r0, [sl, #16]
 8003a78:	f8ca 1014 	str.w	r1, [sl, #20]
 8003a7c:	f8ca 2008 	str.w	r2, [sl, #8]
 8003a80:	4629      	mov	r1, r5
 8003a82:	f8aa 3018 	strh.w	r3, [sl, #24]
 8003a86:	4809      	ldr	r0, [pc, #36]	; (8003aac <main+0x34c>)
 8003a88:	f000 fd2c 	bl	80044e4 <CDC_Fill_Buffer>
	  return -1;
 8003a8c:	e7db      	b.n	8003a46 <main+0x2e6>
 8003a8e:	bf00      	nop
 8003a90:	20002e54 	.word	0x20002e54
 8003a94:	abedbabe 	.word	0xabedbabe
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	1fff0000 	.word	0x1fff0000
 8003aa0:	000b6800 	.word	0x000b6800
 8003aa4:	01010000 	.word	0x01010000
 8003aa8:	0801f950 	.word	0x0801f950
 8003aac:	200011ac 	.word	0x200011ac
 8003ab0:	0801fa28 	.word	0x0801fa28
 8003ab4:	0801f994 	.word	0x0801f994
 8003ab8:	0801fa80 	.word	0x0801fa80
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	200012ac 	.word	0x200012ac
  STBOX1_PRINTF("Model name : %s\n", report.model_name);
 8003ac4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8003ac6:	48a1      	ldr	r0, [pc, #644]	; (8003d4c <main+0x5ec>)
    			  const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003ac8:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 8003d50 <main+0x5f0>
  STBOX1_PRINTF("Model name : %s\n", report.model_name);
 8003acc:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8003ad0:	f017 fd1c 	bl	801b50c <siprintf>
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	f8c9 0000 	str.w	r0, [r9]
 8003ada:	489c      	ldr	r0, [pc, #624]	; (8003d4c <main+0x5ec>)
 8003adc:	f000 fd02 	bl	80044e4 <CDC_Fill_Buffer>
  STBOX1_PRINTF("Model signature : %s\n", report.model_signature);
 8003ae0:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8003ae2:	489a      	ldr	r0, [pc, #616]	; (8003d4c <main+0x5ec>)
 8003ae4:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8003ae8:	f017 fd10 	bl	801b50c <siprintf>
  STBOX1_PRINTF("Model name : %s\n", report.model_name);
 8003aec:	ad38      	add	r5, sp, #224	; 0xe0
  STBOX1_PRINTF("Model signature : %s\n", report.model_signature);
 8003aee:	4601      	mov	r1, r0
 8003af0:	f8c9 0000 	str.w	r0, [r9]
 8003af4:	4895      	ldr	r0, [pc, #596]	; (8003d4c <main+0x5ec>)
 8003af6:	f000 fcf5 	bl	80044e4 <CDC_Fill_Buffer>
  ai_output = &report.outputs[0];
 8003afa:	e9d5 350d 	ldrd	r3, r5, [r5, #52]	; 0x34
  STBOX1_PRINTF("input[0] : (%ld, %ld, %ld)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	4892      	ldr	r0, [pc, #584]	; (8003d4c <main+0x5ec>)
 8003b02:	6853      	ldr	r3, [r2, #4]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8003b0a:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8003b0e:	f017 fcfd 	bl	801b50c <siprintf>
 8003b12:	4601      	mov	r1, r0
 8003b14:	f8c9 0000 	str.w	r0, [r9]
 8003b18:	488c      	ldr	r0, [pc, #560]	; (8003d4c <main+0x5ec>)
 8003b1a:	f000 fce3 	bl	80044e4 <CDC_Fill_Buffer>
  STBOX1_PRINTF("output[0] : (%ld, %ld, %ld)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 8003b1e:	69aa      	ldr	r2, [r5, #24]
 8003b20:	488a      	ldr	r0, [pc, #552]	; (8003d4c <main+0x5ec>)
 8003b22:	6853      	ldr	r3, [r2, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8003b2a:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 8003b2e:	f017 fced 	bl	801b50c <siprintf>
 8003b32:	4601      	mov	r1, r0
 8003b34:	f8c9 0000 	str.w	r0, [r9]
 8003b38:	4884      	ldr	r0, [pc, #528]	; (8003d4c <main+0x5ec>)
 8003b3a:	f000 fcd3 	bl	80044e4 <CDC_Fill_Buffer>
  ai_input = ai_audio_model_inputs_get(audio_nw, NULL);
 8003b3e:	4631      	mov	r1, r6
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f00f ff07 	bl	8013954 <ai_audio_model_inputs_get>
  ai_output = ai_audio_model_outputs_get(audio_nw, NULL);
 8003b46:	4631      	mov	r1, r6
  ai_input = ai_audio_model_inputs_get(audio_nw, NULL);
 8003b48:	4603      	mov	r3, r0
  ai_output = ai_audio_model_outputs_get(audio_nw, NULL);
 8003b4a:	6838      	ldr	r0, [r7, #0]
  ai_input = ai_audio_model_inputs_get(audio_nw, NULL);
 8003b4c:	9307      	str	r3, [sp, #28]
  ai_output = ai_audio_model_outputs_get(audio_nw, NULL);
 8003b4e:	f00f ff0d 	bl	801396c <ai_audio_model_outputs_get>
  ai_output[0].data = AI_HANDLE_PTR(&out_data);
 8003b52:	f10b 0320 	add.w	r3, fp, #32
  ai_output = ai_audio_model_outputs_get(audio_nw, NULL);
 8003b56:	900a      	str	r0, [sp, #40]	; 0x28
  ai_output[0].data = AI_HANDLE_PTR(&out_data);
 8003b58:	6043      	str	r3, [r0, #4]
  DWT->CYCCNT = 0;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //| DWT_CTRL_CPIEVTENA_Msk;
}

__STATIC_FORCEINLINE void dwtReset(void) {
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003b5a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003b5e:	e015      	b.n	8003b8c <main+0x42c>
    if(ButtonPressed) {
 8003b60:	686b      	ldr	r3, [r5, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 8132 	bne.w	8003dcc <main+0x66c>
    if(PowerOff){
 8003b68:	68ab      	ldr	r3, [r5, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 80d8 	bne.w	8003d20 <main+0x5c0>
    if(MEMSInterrupt) {
 8003b70:	68eb      	ldr	r3, [r5, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d171      	bne.n	8003c5a <main+0x4fa>
    if(RebootBoard) {
 8003b76:	692b      	ldr	r3, [r5, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d169      	bne.n	8003c50 <main+0x4f0>
    if(SendAccGyro) {
 8003b7c:	696b      	ldr	r3, [r5, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d139      	bne.n	8003bf6 <main+0x496>
    if(SendBatteryInfo) {
 8003b82:	69ab      	ldr	r3, [r5, #24]
 8003b84:	bb3b      	cbnz	r3, 8003bd6 <main+0x476>
    if(BlinkLed) {
 8003b86:	69eb      	ldr	r3, [r5, #28]
 8003b88:	bb03      	cbnz	r3, 8003bcc <main+0x46c>
    __WFI();
 8003b8a:	bf30      	wfi
	  if(set_connectable){
 8003b8c:	4a71      	ldr	r2, [pc, #452]	; (8003d54 <main+0x5f4>)
 8003b8e:	7813      	ldrb	r3, [r2, #0]
 8003b90:	b18b      	cbz	r3, 8003bb6 <main+0x456>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8003b92:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <main+0x5f8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
      set_connectable =0;
 8003b96:	2500      	movs	r5, #0
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8003b98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
      set_connectable =0;
 8003b9a:	7015      	strb	r5, [r2, #0]
      setConnectable();
 8003b9c:	f009 f960 	bl	800ce60 <setConnectable>
      if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8003ba0:	486d      	ldr	r0, [pc, #436]	; (8003d58 <main+0x5f8>)
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f005 ffd8 	bl	8009b58 <HAL_TIM_OC_Start_IT>
 8003ba8:	b970      	cbnz	r0, 8003bc8 <main+0x468>
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + STBOX1_UPDATE_LED));
 8003baa:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <main+0x5f8>)
 8003bac:	f504 541c 	add.w	r4, r4, #9984	; 0x2700
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	3410      	adds	r4, #16
 8003bb4:	6354      	str	r4, [r2, #52]	; 0x34
    if(hci_event) {
 8003bb6:	4d69      	ldr	r5, [pc, #420]	; (8003d5c <main+0x5fc>)
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0d0      	beq.n	8003b60 <main+0x400>
      hci_event =0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	602b      	str	r3, [r5, #0]
      hci_user_evt_proc();
 8003bc2:	f00c fc0d 	bl	80103e0 <hci_user_evt_proc>
 8003bc6:	e7cb      	b.n	8003b60 <main+0x400>
        Error_Handler();
 8003bc8:	f7ff fdb4 	bl	8003734 <Error_Handler>
      BlinkLed = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61eb      	str	r3, [r5, #28]
      LedToggleTargetPlatform();
 8003bd0:	f7ff fbc4 	bl	800335c <LedToggleTargetPlatform>
 8003bd4:	e7d9      	b.n	8003b8a <main+0x42a>
      SendBatteryInfo=0;
 8003bd6:	2300      	movs	r3, #0
  BSP_BC_GetVoltageAndLevel(&Voltage,&BatteryLevel);
 8003bd8:	a91b      	add	r1, sp, #108	; 0x6c
 8003bda:	a827      	add	r0, sp, #156	; 0x9c
      SendBatteryInfo=0;
 8003bdc:	61ab      	str	r3, [r5, #24]
  BSP_BC_GetVoltageAndLevel(&Voltage,&BatteryLevel);
 8003bde:	f007 fa51 	bl	800b084 <BSP_BC_GetVoltageAndLevel>
  BLE_BatteryUpdate(BatteryLevel,Voltage,0x8000 ,0x04 /* Unknown */);
 8003be2:	ab27      	add	r3, sp, #156	; 0x9c
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bea:	ab1b      	add	r3, sp, #108	; 0x6c
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	2304      	movs	r3, #4
 8003bf0:	f008 f8ba 	bl	800bd68 <BLE_BatteryUpdate>
}
 8003bf4:	e7c7      	b.n	8003b86 <main+0x426>
      SendAccGyro =0;
 8003bf6:	2400      	movs	r4, #0
  BSP_MOTION_SENSOR_GetAxes(LSM6DSOX_0,MOTION_ACCELERO,ACC_Value);
 8003bf8:	aa12      	add	r2, sp, #72	; 0x48
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	4620      	mov	r0, r4
      SendAccGyro =0;
 8003bfe:	616c      	str	r4, [r5, #20]
  BSP_MOTION_SENSOR_GetAxes(LSM6DSOX_0,MOTION_ACCELERO,ACC_Value);
 8003c00:	f007 fee0 	bl	800b9c4 <BSP_MOTION_SENSOR_GetAxes>
  BSP_MOTION_SENSOR_GetAxes(LSM6DSOX_0,MOTION_GYRO,GYR_Value);
 8003c04:	aa15      	add	r2, sp, #84	; 0x54
 8003c06:	2101      	movs	r1, #1
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f007 fedb 	bl	800b9c4 <BSP_MOTION_SENSOR_GetAxes>
      ACC_SensorValue.x= ACC_Value.x;
 8003c0e:	f60d 2328 	addw	r3, sp, #2600	; 0xa28
 8003c12:	a812      	add	r0, sp, #72	; 0x48
 8003c14:	f6a3 11c8 	subw	r1, r3, #2504	; 0x9c8
      MAG_SensorValue.x= 0;
 8003c18:	ae27      	add	r6, sp, #156	; 0x9c
      GYR_SensorValue.x= GYR_Value.x;
 8003c1a:	f6a3 12d4 	subw	r2, r3, #2516	; 0x9d4
      MAG_SensorValue.y= 0;
 8003c1e:	e9c6 4400 	strd	r4, r4, [r6]
      MAG_SensorValue.z= 0;
 8003c22:	60b4      	str	r4, [r6, #8]
      ACC_SensorValue.x= ACC_Value.x;
 8003c24:	6804      	ldr	r4, [r0, #0]
 8003c26:	600c      	str	r4, [r1, #0]
      GYR_SensorValue.x= GYR_Value.x;
 8003c28:	f6a3 13bc 	subw	r3, r3, #2492	; 0x9bc
      ACC_SensorValue.y= ACC_Value.y;
 8003c2c:	6844      	ldr	r4, [r0, #4]
      ACC_SensorValue.z= ACC_Value.z;
 8003c2e:	6880      	ldr	r0, [r0, #8]
      ACC_SensorValue.y= ACC_Value.y;
 8003c30:	604c      	str	r4, [r1, #4]
      ACC_SensorValue.z= ACC_Value.z;
 8003c32:	6088      	str	r0, [r1, #8]
      GYR_SensorValue.x= GYR_Value.x;
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	6019      	str	r1, [r3, #0]
      GYR_SensorValue.y= GYR_Value.y;
 8003c38:	6851      	ldr	r1, [r2, #4]
      GYR_SensorValue.z= GYR_Value.z;
 8003c3a:	6892      	ldr	r2, [r2, #8]
      GYR_SensorValue.y= GYR_Value.y;
 8003c3c:	6059      	str	r1, [r3, #4]
      GYR_SensorValue.z= GYR_Value.z;
 8003c3e:	609a      	str	r2, [r3, #8]
      BLE_AccGyroMagUpdate(&ACC_SensorValue,&GYR_SensorValue,&MAG_SensorValue);
 8003c40:	ab8a      	add	r3, sp, #552	; 0x228
 8003c42:	4632      	mov	r2, r6
 8003c44:	a91b      	add	r1, sp, #108	; 0x6c
 8003c46:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003c4a:	f008 fae5 	bl	800c218 <BLE_AccGyroMagUpdate>
 8003c4e:	e798      	b.n	8003b82 <main+0x422>
      RebootBoard=0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	612b      	str	r3, [r5, #16]
      HAL_NVIC_SystemReset();
 8003c54:	f003 f8c0 	bl	8006dd8 <HAL_NVIC_SystemReset>
 8003c58:	e790      	b.n	8003b7c <main+0x41c>
  STBOX1_PRINTF("MEMSCallback\n\r");
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <main+0x600>)
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 8003c5c:	4c41      	ldr	r4, [pc, #260]	; (8003d64 <main+0x604>)
  STBOX1_PRINTF("MEMSCallback\n\r");
 8003c5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c60:	260e      	movs	r6, #14
 8003c62:	f8c9 6000 	str.w	r6, [r9]
 8003c66:	f8ca 2008 	str.w	r2, [sl, #8]
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	789b      	ldrb	r3, [r3, #2]
 8003c6e:	f88a 300e 	strb.w	r3, [sl, #14]
 8003c72:	f8aa 200c 	strh.w	r2, [sl, #12]
 8003c76:	f8ca 0000 	str.w	r0, [sl]
 8003c7a:	f8ca 1004 	str.w	r1, [sl, #4]
 8003c7e:	4833      	ldr	r0, [pc, #204]	; (8003d4c <main+0x5ec>)
 8003c80:	4631      	mov	r1, r6
 8003c82:	f000 fc2f 	bl	80044e4 <CDC_Fill_Buffer>
  lsm6dsox_all_sources_get(LSM6DSOX_Contex, &status);
 8003c86:	6820      	ldr	r0, [r4, #0]
 8003c88:	a91b      	add	r1, sp, #108	; 0x6c
 8003c8a:	3020      	adds	r0, #32
 8003c8c:	f001 fed0 	bl	8005a30 <lsm6dsox_all_sources_get>
  MLCStatus = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8003c90:	f89d 6071 	ldrb.w	r6, [sp, #113]	; 0x71
 8003c94:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
  FSMStatus = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8003c98:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8003c9c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  MLCStatus = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8003ca0:	ab1b      	add	r3, sp, #108	; 0x6c
 8003ca2:	0973      	lsrs	r3, r6, #5
 8003ca4:	f003 0306 	and.w	r3, r3, #6
 8003ca8:	f3c6 1640 	ubfx	r6, r6, #5, #1
 8003cac:	4333      	orrs	r3, r6
  FSMStatus = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8003cae:	097e      	lsrs	r6, r7, #5
 8003cb0:	f006 0606 	and.w	r6, r6, #6
 8003cb4:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8003cb8:	433e      	orrs	r6, r7
  MLCStatus = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8003cba:	f000 0701 	and.w	r7, r0, #1
 8003cbe:	ea43 03c7 	orr.w	r3, r3, r7, lsl #3
  FSMStatus = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8003cc2:	f002 0701 	and.w	r7, r2, #1
 8003cc6:	ea46 06c7 	orr.w	r6, r6, r7, lsl #3
                       (status.mlc5<<4) | (status.mlc6<<5) | (status.mlc7<<6) | (status.mlc8<<7));
 8003cca:	f3c0 0740 	ubfx	r7, r0, #1, #1
  MLCStatus = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8003cce:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
                       (status.fsm5<<4)  | (status.fsm6<<5)  | (status.fsm7<<6)  | (status.fsm8<<7)  |
 8003cd2:	f3c2 0740 	ubfx	r7, r2, #1, #1
  FSMStatus = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8003cd6:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
                       (status.mlc5<<4) | (status.mlc6<<5) | (status.mlc7<<6) | (status.mlc8<<7));
 8003cda:	f3c0 0780 	ubfx	r7, r0, #2, #1
 8003cde:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
                       (status.fsm5<<4)  | (status.fsm6<<5)  | (status.fsm7<<6)  | (status.fsm8<<7)  |
 8003ce2:	f3c2 0780 	ubfx	r7, r2, #2, #1
 8003ce6:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
                       (status.mlc5<<4) | (status.mlc6<<5) | (status.mlc7<<6) | (status.mlc8<<7));
 8003cea:	f3c0 07c0 	ubfx	r7, r0, #3, #1
 8003cee:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8003cf2:	f3c0 1000 	ubfx	r0, r0, #4, #1
  MLCStatus = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8003cf6:	a915      	add	r1, sp, #84	; 0x54
                       (status.mlc5<<4) | (status.mlc6<<5) | (status.mlc7<<6) | (status.mlc8<<7));
 8003cf8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8003cfc:	b2db      	uxtb	r3, r3
  MLCStatus = ((status.mlc1)    | (status.mlc2<<1) | (status.mlc3<<2) | (status.mlc4<<3) |
 8003cfe:	700b      	strb	r3, [r1, #0]
                       (status.fsm5<<4)  | (status.fsm6<<5)  | (status.fsm7<<6)  | (status.fsm8<<7)  |
 8003d00:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8003d04:	ea46 1181 	orr.w	r1, r6, r1, lsl #6
 8003d08:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003d0c:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
  FSMStatus = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8003d10:	a918      	add	r1, sp, #96	; 0x60
                       (status.fsm13<<12) | (status.fsm14<<13) | (status.fsm15<<14) | (status.fsm16<<15));
 8003d12:	b2d2      	uxtb	r2, r2
  FSMStatus = ((status.fsm1)     | (status.fsm2<<1)  | (status.fsm3<<2)  | (status.fsm4<<3)  |
 8003d14:	700a      	strb	r2, [r1, #0]
  if(MLCStatus!=0) {
 8003d16:	bb4b      	cbnz	r3, 8003d6c <main+0x60c>
  } else  if(FSMStatus!=0) {
 8003d18:	b942      	cbnz	r2, 8003d2c <main+0x5cc>
      MEMSInterrupt =0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60eb      	str	r3, [r5, #12]
 8003d1e:	e72a      	b.n	8003b76 <main+0x416>
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003d20:	2017      	movs	r0, #23
 8003d22:	f007 f98d 	bl	800b040 <BSP_BC_CmdSend>
      PowerOff =0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60ab      	str	r3, [r5, #8]
 8003d2a:	e721      	b.n	8003b70 <main+0x410>
    lsm6dsox_fsm_out_get(LSM6DSOX_Contex, &fsm_out);
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	a927      	add	r1, sp, #156	; 0x9c
 8003d30:	3020      	adds	r0, #32
 8003d32:	f001 fe1f 	bl	8005974 <lsm6dsox_fsm_out_get>
    if(FSM_Enabled) {
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <main+0x608>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ed      	beq.n	8003d1a <main+0x5ba>
      BLE_FiniteStateMachineUpdate((uint8_t *)&fsm_out,&FSMStatus,/* this is dummy */ &FSMStatus);
 8003d3e:	aa18      	add	r2, sp, #96	; 0x60
 8003d40:	4611      	mov	r1, r2
 8003d42:	a827      	add	r0, sp, #156	; 0x9c
 8003d44:	f008 f8d0 	bl	800bee8 <BLE_FiniteStateMachineUpdate>
 8003d48:	e7e7      	b.n	8003d1a <main+0x5ba>
 8003d4a:	bf00      	nop
 8003d4c:	200011ac 	.word	0x200011ac
 8003d50:	30000000 	.word	0x30000000
 8003d54:	20002340 	.word	0x20002340
 8003d58:	20000e90 	.word	0x20000e90
 8003d5c:	200013dc 	.word	0x200013dc
 8003d60:	0801fd30 	.word	0x0801fd30
 8003d64:	20001eb4 	.word	0x20001eb4
 8003d68:	20000e7a 	.word	0x20000e7a
    lsm6dsox_mlc_out_get(LSM6DSOX_Contex, mlc_out);
 8003d6c:	6820      	ldr	r0, [r4, #0]
 8003d6e:	a927      	add	r1, sp, #156	; 0x9c
 8003d70:	3020      	adds	r0, #32
 8003d72:	f001 fd67 	bl	8005844 <lsm6dsox_mlc_out_get>
    if(MLC_Enabled) {
 8003d76:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <main+0x778>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 809c 	bne.w	8003eb8 <main+0x758>
    if(AR_Enabled) {
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <main+0x77c>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0c8      	beq.n	8003d1a <main+0x5ba>
      if (status.mlc1) {
 8003d88:	ab1b      	add	r3, sp, #108	; 0x6c
 8003d8a:	795b      	ldrb	r3, [r3, #5]
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	d5c4      	bpl.n	8003d1a <main+0x5ba>
        ActivityCode = BLE_MappingToHAR_ouput_t[mlc_out[0]];
 8003d90:	4a53      	ldr	r2, [pc, #332]	; (8003ee0 <main+0x780>)
 8003d92:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8003d96:	4c53      	ldr	r4, [pc, #332]	; (8003ee4 <main+0x784>)
 8003d98:	5cd2      	ldrb	r2, [r2, r3]
 8003d9a:	7022      	strb	r2, [r4, #0]
        if(ActivityCode!=BLE_AR_ERROR) {
 8003d9c:	2a08      	cmp	r2, #8
        ActivityCode = BLE_MappingToHAR_ouput_t[mlc_out[0]];
 8003d9e:	ae27      	add	r6, sp, #156	; 0x9c
        if(ActivityCode!=BLE_AR_ERROR) {
 8003da0:	d07b      	beq.n	8003e9a <main+0x73a>
          BLE_ActRecUpdate(ActivityCode, HAR_MLC_LSM6DSOX_ID);
 8003da2:	4610      	mov	r0, r2
 8003da4:	2103      	movs	r1, #3
 8003da6:	f007 feeb 	bl	800bb80 <BLE_ActRecUpdate>
          if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8003daa:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <main+0x788>)
            BytesToWrite =sprintf((char *)BufferToWrite,"Rec ActivityCode %02X [%02X]\n",ActivityCode,mlc_out[0]);
 8003dac:	7822      	ldrb	r2, [r4, #0]
          if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
            BytesToWrite =sprintf((char *)BufferToWrite,"Rec ActivityCode %02X [%02X]\n",ActivityCode,mlc_out[0]);
 8003db2:	7833      	ldrb	r3, [r6, #0]
          if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8003db4:	d066      	beq.n	8003e84 <main+0x724>
            STBOX1_PRINTF("Rec ActivityCode %02X [%02X]\r\n",ActivityCode,mlc_out[0]);
 8003db6:	494d      	ldr	r1, [pc, #308]	; (8003eec <main+0x78c>)
 8003db8:	484d      	ldr	r0, [pc, #308]	; (8003ef0 <main+0x790>)
 8003dba:	f017 fba7 	bl	801b50c <siprintf>
 8003dbe:	211a      	movs	r1, #26
 8003dc0:	484b      	ldr	r0, [pc, #300]	; (8003ef0 <main+0x790>)
 8003dc2:	f8c9 1000 	str.w	r1, [r9]
 8003dc6:	f000 fb8d 	bl	80044e4 <CDC_Fill_Buffer>
 8003dca:	e7a6      	b.n	8003d1a <main+0x5ba>
      STBOX1_PRINTF("Starting Inference\n");
 8003dcc:	4e49      	ldr	r6, [pc, #292]	; (8003ef4 <main+0x794>)
    	  STBOX1_PRINTF("Run Inference\n");
 8003dce:	4f48      	ldr	r7, [pc, #288]	; (8003ef0 <main+0x790>)
      STBOX1_PRINTF("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8003dd0:	ab38      	add	r3, sp, #224	; 0xe0
 8003dd2:	9304      	str	r3, [sp, #16]
      STBOX1_PRINTF("Starting Inference\n");
 8003dd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003dd6:	f04f 0c13 	mov.w	ip, #19
      ButtonPressed=0;
 8003dda:	2400      	movs	r4, #0
      STBOX1_PRINTF("Starting Inference\n");
 8003ddc:	f8c9 c000 	str.w	ip, [r9]
      tcumul = 0ULL;
 8003de0:	e9cd 4408 	strd	r4, r4, [sp, #32]
      ButtonPressed=0;
 8003de4:	606c      	str	r4, [r5, #4]
	uint64_t count = 0;
 8003de6:	9405      	str	r4, [sp, #20]
      for (iter = 0; iter < niter; iter++) {
 8003de8:	9406      	str	r4, [sp, #24]
      STBOX1_PRINTF("Starting Inference\n");
 8003dea:	f8ca 0000 	str.w	r0, [sl]
 8003dee:	6830      	ldr	r0, [r6, #0]
 8003df0:	f8ca 1004 	str.w	r1, [sl, #4]
 8003df4:	f8ca 2008 	str.w	r2, [sl, #8]
 8003df8:	4661      	mov	r1, ip
 8003dfa:	f8ca 300c 	str.w	r3, [sl, #12]
 8003dfe:	f8ca 0010 	str.w	r0, [sl, #16]
 8003e02:	4638      	mov	r0, r7
 8003e04:	f000 fb6e 	bl	80044e4 <CDC_Fill_Buffer>
      STBOX1_PRINTF("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8003e08:	9b04      	ldr	r3, [sp, #16]
 8003e0a:	f106 0088 	add.w	r0, r6, #136	; 0x88
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	900c      	str	r0, [sp, #48]	; 0x30
 8003e12:	1d31      	adds	r1, r6, #4
 8003e14:	2302      	movs	r3, #2
 8003e16:	4638      	mov	r0, r7
 8003e18:	f017 fb78 	bl	801b50c <siprintf>
 8003e1c:	4601      	mov	r1, r0
 8003e1e:	f8c9 0000 	str.w	r0, [r9]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f000 fb5e 	bl	80044e4 <CDC_Fill_Buffer>
#else
#if USE_CORE_CLOCK_ONLY == 1
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
#else
  cyclesCount.tick_start = HAL_GetTick();
 8003e28:	f002 f91a 	bl	8006060 <HAL_GetTick>
 8003e2c:	4a32      	ldr	r2, [pc, #200]	; (8003ef8 <main+0x798>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <main+0x79c>)
  cyclesCount.tick_start = HAL_GetTick();
 8003e30:	6090      	str	r0, [r2, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003e32:	2100      	movs	r1, #0
 8003e34:	6059      	str	r1, [r3, #4]
  return DWT->CYCCNT;
 8003e36:	685b      	ldr	r3, [r3, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 8003e38:	6053      	str	r3, [r2, #4]
    	  for (int i = 0; i < report.n_inputs; i++) {
 8003e3a:	460e      	mov	r6, r1
    		  if (report.inputs[i].data)
 8003e3c:	f04f 081c 	mov.w	r8, #28
#endif
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}
 8003e40:	e000      	b.n	8003e44 <main+0x6e4>
    	  for (int i = 0; i < report.n_inputs; i++) {
 8003e42:	3601      	adds	r6, #1
 8003e44:	9b04      	ldr	r3, [sp, #16]
 8003e46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003e48:	42b3      	cmp	r3, r6
 8003e4a:	dd63      	ble.n	8003f14 <main+0x7b4>
    		  ai_input = report.inputs;
 8003e4c:	9b04      	ldr	r3, [sp, #16]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	9307      	str	r3, [sp, #28]
    		  if (report.inputs[i].data)
 8003e52:	fb08 3b06 	mla	fp, r8, r6, r3
 8003e56:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	d1f1      	bne.n	8003e42 <main+0x6e2>
    			  const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003e5e:	f015 fcc9 	bl	80197f4 <rand>
 8003e62:	ee07 0a90 	vmov	s15, r0
 8003e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003e6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    			  	  *(ai_float *)(ai_input[i].data + i * 4) = v;
 8003e72:	f8db 3004 	ldr.w	r3, [fp, #4]
    			  const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8003e76:	eea7 7a88 	vfma.f32	s14, s15, s16
    			  	  *(ai_float *)(ai_input[i].data + i * 4) = v;
 8003e7a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003e7e:	ed83 7a00 	vstr	s14, [r3]
 8003e82:	e7de      	b.n	8003e42 <main+0x6e2>
            BytesToWrite =sprintf((char *)BufferToWrite,"Rec ActivityCode %02X [%02X]\n",ActivityCode,mlc_out[0]);
 8003e84:	491e      	ldr	r1, [pc, #120]	; (8003f00 <main+0x7a0>)
 8003e86:	481f      	ldr	r0, [pc, #124]	; (8003f04 <main+0x7a4>)
 8003e88:	f017 fb40 	bl	801b50c <siprintf>
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <main+0x7a8>)
            Term_Update(BufferToWrite,BytesToWrite);
 8003e8e:	481d      	ldr	r0, [pc, #116]	; (8003f04 <main+0x7a4>)
            BytesToWrite =sprintf((char *)BufferToWrite,"Rec ActivityCode %02X [%02X]\n",ActivityCode,mlc_out[0]);
 8003e90:	2119      	movs	r1, #25
 8003e92:	7019      	strb	r1, [r3, #0]
            Term_Update(BufferToWrite,BytesToWrite);
 8003e94:	f008 fefc 	bl	800cc90 <Term_Update>
 8003e98:	e73f      	b.n	8003d1a <main+0x5ba>
          if(BLE_StdTerm_Service==BLE_SERV_ENABLE) {
 8003e9a:	4913      	ldr	r1, [pc, #76]	; (8003ee8 <main+0x788>)
 8003e9c:	7809      	ldrb	r1, [r1, #0]
 8003e9e:	2901      	cmp	r1, #1
 8003ea0:	d00f      	beq.n	8003ec2 <main+0x762>
            STBOX1_PRINTF("Wrong ActivityCode %02X [%02X]\r\n",ActivityCode,mlc_out[0]);
 8003ea2:	491a      	ldr	r1, [pc, #104]	; (8003f0c <main+0x7ac>)
 8003ea4:	4812      	ldr	r0, [pc, #72]	; (8003ef0 <main+0x790>)
 8003ea6:	f017 fb31 	bl	801b50c <siprintf>
 8003eaa:	211c      	movs	r1, #28
 8003eac:	4810      	ldr	r0, [pc, #64]	; (8003ef0 <main+0x790>)
 8003eae:	f8c9 1000 	str.w	r1, [r9]
 8003eb2:	f000 fb17 	bl	80044e4 <CDC_Fill_Buffer>
 8003eb6:	e730      	b.n	8003d1a <main+0x5ba>
      BLE_MachineLearningCoreUpdate(mlc_out,&MLCStatus);
 8003eb8:	a915      	add	r1, sp, #84	; 0x54
 8003eba:	a827      	add	r0, sp, #156	; 0x9c
 8003ebc:	f008 fafc 	bl	800c4b8 <BLE_MachineLearningCoreUpdate>
 8003ec0:	e75e      	b.n	8003d80 <main+0x620>
            BytesToWrite =sprintf((char *)BufferToWrite,"Wrong ActivityCode %02X [%02X]\n",ActivityCode,mlc_out[0]);
 8003ec2:	4913      	ldr	r1, [pc, #76]	; (8003f10 <main+0x7b0>)
 8003ec4:	480f      	ldr	r0, [pc, #60]	; (8003f04 <main+0x7a4>)
 8003ec6:	f017 fb21 	bl	801b50c <siprintf>
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <main+0x7a8>)
            Term_Update(BufferToWrite,BytesToWrite);
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <main+0x7a4>)
            BytesToWrite =sprintf((char *)BufferToWrite,"Wrong ActivityCode %02X [%02X]\n",ActivityCode,mlc_out[0]);
 8003ece:	211b      	movs	r1, #27
 8003ed0:	7019      	strb	r1, [r3, #0]
            Term_Update(BufferToWrite,BytesToWrite);
 8003ed2:	f008 fedd 	bl	800cc90 <Term_Update>
 8003ed6:	e720      	b.n	8003d1a <main+0x5ba>
 8003ed8:	20000e78 	.word	0x20000e78
 8003edc:	20000e79 	.word	0x20000e79
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000014 	.word	0x20000014
 8003ee8:	20002021 	.word	0x20002021
 8003eec:	0801fd60 	.word	0x0801fd60
 8003ef0:	200011ac 	.word	0x200011ac
 8003ef4:	0801fb54 	.word	0x0801fb54
 8003ef8:	20001f04 	.word	0x20001f04
 8003efc:	e0001000 	.word	0xe0001000
 8003f00:	0801fd40 	.word	0x0801fd40
 8003f04:	20002138 	.word	0x20002138
 8003f08:	20002238 	.word	0x20002238
 8003f0c:	0801fda0 	.word	0x0801fda0
 8003f10:	0801fd80 	.word	0x0801fd80
    	  STBOX1_PRINTF("Run Inference\n");
 8003f14:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8004238 <main+0xad8>
 8003f18:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
 8003f1c:	230e      	movs	r3, #14
 8003f1e:	f8c9 3000 	str.w	r3, [r9]
 8003f22:	f8ca 1004 	str.w	r1, [sl, #4]
 8003f26:	4619      	mov	r1, r3
 8003f28:	f8b8 3000 	ldrh.w	r3, [r8]
 8003f2c:	f8aa 300c 	strh.w	r3, [sl, #12]
 8003f30:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003f34:	f88a 300e 	strb.w	r3, [sl, #14]
 8003f38:	f8ca 0000 	str.w	r0, [sl]
 8003f3c:	f8ca 2008 	str.w	r2, [sl, #8]
    	  n_batch = ai_audio_model_run(audio_nw, ai_input, ai_output);
 8003f40:	ae10      	add	r6, sp, #64	; 0x40
    	  STBOX1_PRINTF("Run Inference\n");
 8003f42:	4638      	mov	r0, r7
 8003f44:	f000 face 	bl	80044e4 <CDC_Fill_Buffer>
    	  dwtCyclesToTime1(count, &t);
 8003f48:	9905      	ldr	r1, [sp, #20]
 8003f4a:	aa1e      	add	r2, sp, #120	; 0x78
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff fb95 	bl	800367c <dwtCyclesToTime1>
    	  n_batch = ai_audio_model_run(audio_nw, ai_input, ai_output);
 8003f52:	6830      	ldr	r0, [r6, #0]
 8003f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f56:	9907      	ldr	r1, [sp, #28]
 8003f58:	f00f fdea 	bl	8013b30 <ai_audio_model_run>
    	   if (n_batch != 1) {
 8003f5c:	2801      	cmp	r0, #1
 8003f5e:	d00f      	beq.n	8003f80 <main+0x820>
    	 	  ai_err = ai_audio_model_get_error(audio_nw);
 8003f60:	6830      	ldr	r0, [r6, #0]
 8003f62:	f00f fcf5 	bl	8013950 <ai_audio_model_get_error>
    	 	  STBOX1_PRINTF("ai run error %d, %d\n", ai_err.type, ai_err.code);
 8003f66:	f108 0104 	add.w	r1, r8, #4
 8003f6a:	0a03      	lsrs	r3, r0, #8
 8003f6c:	b2c2      	uxtb	r2, r0
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f017 facc 	bl	801b50c <siprintf>
 8003f74:	4601      	mov	r1, r0
 8003f76:	f8c9 0000 	str.w	r0, [r9]
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	f000 fab2 	bl	80044e4 <CDC_Fill_Buffer>
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003f80:	4aa4      	ldr	r2, [pc, #656]	; (8004214 <main+0xab4>)
  return DWT->CYCCNT;
 8003f82:	4ba5      	ldr	r3, [pc, #660]	; (8004218 <main+0xab8>)
 8003f84:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003f86:	6853      	ldr	r3, [r2, #4]
 8003f88:	4616      	mov	r6, r2
 8003f8a:	1ae4      	subs	r4, r4, r3
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8003f8c:	f002 f868 	bl	8006060 <HAL_GetTick>
 8003f90:	68b3      	ldr	r3, [r6, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8003f92:	6832      	ldr	r2, [r6, #0]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8003f94:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8003f96:	4290      	cmp	r0, r2
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	9305      	str	r3, [sp, #20]
  if (tick_e > cyclesCount.dwt_max) {
 8003f9e:	d90d      	bls.n	8003fbc <main+0x85c>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7fc fe99 	bl	8000cd8 <__aeabi_uldivmod>
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003faa:	fba0 3203 	umull	r3, r2, r0, r3
 8003fae:	191b      	adds	r3, r3, r4
 8003fb0:	eba2 0101 	sub.w	r1, r2, r1
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	f141 0300 	adc.w	r3, r1, #0
 8003fba:	9305      	str	r3, [sp, #20]
    	   STBOX1_PRINTF("Inference output.. ");
 8003fbc:	4e97      	ldr	r6, [pc, #604]	; (800421c <main+0xabc>)
    	   dwtCyclesToTime1(count, &t2);
 8003fbe:	9905      	ldr	r1, [sp, #20]
 8003fc0:	aa22      	add	r2, sp, #136	; 0x88
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff fb5a 	bl	800367c <dwtCyclesToTime1>
    	   STBOX1_PRINTF("Inference output.. ");
 8003fc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003fca:	f04f 0c13 	mov.w	ip, #19
 8003fce:	f8c9 c000 	str.w	ip, [r9]
 8003fd2:	f8ca 0000 	str.w	r0, [sl]
 8003fd6:	6830      	ldr	r0, [r6, #0]
 8003fd8:	f8ca 2008 	str.w	r2, [sl, #8]
 8003fdc:	f8ca 1004 	str.w	r1, [sl, #4]
 8003fe0:	f8ca 300c 	str.w	r3, [sl, #12]
 8003fe4:	4661      	mov	r1, ip
 8003fe6:	f8ca 0010 	str.w	r0, [sl, #16]
 8003fea:	4638      	mov	r0, r7
 8003fec:	f000 fa7a 	bl	80044e4 <CDC_Fill_Buffer>
    	 	  STBOX1_PRINTF("%f,", out_data[i]);
 8003ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ff2:	6a18      	ldr	r0, [r3, #32]
 8003ff4:	f7fc fad0 	bl	8000598 <__aeabi_f2d>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	1d31      	adds	r1, r6, #4
 8004000:	f017 fa84 	bl	801b50c <siprintf>
 8004004:	4601      	mov	r1, r0
 8004006:	f8c9 0000 	str.w	r0, [r9]
 800400a:	4638      	mov	r0, r7
 800400c:	f000 fa6a 	bl	80044e4 <CDC_Fill_Buffer>
    	   STBOX1_PRINTF("\n");
 8004010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004012:	f04f 0801 	mov.w	r8, #1
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	930b      	str	r3, [sp, #44]	; 0x2c
 800401a:	f8c9 8000 	str.w	r8, [r9]
 800401e:	4641      	mov	r1, r8
 8004020:	f8aa 3000 	strh.w	r3, [sl]
 8004024:	4638      	mov	r0, r7
 8004026:	f000 fa5d 	bl	80044e4 <CDC_Fill_Buffer>
    	   STBOX1_PRINTF(" Time Take: %8d.%03dms (%ld cycles)\r\n",
 800402a:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800402e:	ab22      	add	r3, sp, #136	; 0x88
 8004030:	9400      	str	r4, [sp, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f8db 1008 	ldr.w	r1, [fp, #8]
 8004038:	f8db 300c 	ldr.w	r3, [fp, #12]
 800403c:	4638      	mov	r0, r7
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	1a52      	subs	r2, r2, r1
 8004042:	f106 010c 	add.w	r1, r6, #12
 8004046:	f017 fa61 	bl	801b50c <siprintf>
 800404a:	4601      	mov	r1, r0
 800404c:	f8c9 0000 	str.w	r0, [r9]
 8004050:	4638      	mov	r0, r7
 8004052:	f000 fa47 	bl	80044e4 <CDC_Fill_Buffer>
    	   STBOX1_PRINTF("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 8004056:	9b04      	ldr	r3, [sp, #16]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	920f      	str	r2, [sp, #60]	; 0x3c
 800405c:	f003 ff0c 	bl	8007e78 <HAL_RCC_GetSysClockFreq>
 8004060:	900e      	str	r0, [sp, #56]	; 0x38
 8004062:	f004 fb7f 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8004066:	496e      	ldr	r1, [pc, #440]	; (8004220 <main+0xac0>)
 8004068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800406a:	fbb3 f3f1 	udiv	r3, r3, r1
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	9b04      	ldr	r3, [sp, #16]
 8004072:	fbb0 f0f1 	udiv	r0, r0, r1
 8004076:	9001      	str	r0, [sp, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8004082:	9b06      	ldr	r3, [sp, #24]
 8004084:	4638      	mov	r0, r7
 8004086:	f017 fa41 	bl	801b50c <siprintf>
 800408a:	4601      	mov	r1, r0
 800408c:	f8c9 0000 	str.w	r0, [r9]
 8004090:	4638      	mov	r0, r7
 8004092:	f000 fa27 	bl	80044e4 <CDC_Fill_Buffer>
    	   STBOX1_PRINTF("\n");
 8004096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004098:	f8aa 2000 	strh.w	r2, [sl]
 800409c:	4641      	mov	r1, r8
 800409e:	4638      	mov	r0, r7
 80040a0:	f8c9 8000 	str.w	r8, [r9]
 80040a4:	f000 fa1e 	bl	80044e4 <CDC_Fill_Buffer>
    	   tcumul += count;
 80040a8:	9a08      	ldr	r2, [sp, #32]
 80040aa:	9905      	ldr	r1, [sp, #20]
 80040ac:	18a3      	adds	r3, r4, r2
 80040ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b0:	9308      	str	r3, [sp, #32]
 80040b2:	eb42 0201 	adc.w	r2, r2, r1
      for (iter = 0; iter < niter; iter++) {
 80040b6:	9906      	ldr	r1, [sp, #24]
    	   tcumul += count;
 80040b8:	9209      	str	r2, [sp, #36]	; 0x24
      for (iter = 0; iter < niter; iter++) {
 80040ba:	2900      	cmp	r1, #0
 80040bc:	f000 8099 	beq.w	80041f2 <main+0xa92>
      tcumul /= (uint64_t)iter;
 80040c0:	fa23 f408 	lsr.w	r4, r3, r8
 80040c4:	fa22 f108 	lsr.w	r1, r2, r8
      STBOX1_PRINTF("\r\n");
 80040c8:	2302      	movs	r3, #2
      tcumul /= (uint64_t)iter;
 80040ca:	ea44 74c2 	orr.w	r4, r4, r2, lsl #31
      STBOX1_PRINTF("\r\n");
 80040ce:	f8b6 207c 	ldrh.w	r2, [r6, #124]	; 0x7c
 80040d2:	f8c9 3000 	str.w	r3, [r9]
 80040d6:	f8aa 2000 	strh.w	r2, [sl]
 80040da:	f896 207e 	ldrb.w	r2, [r6, #126]	; 0x7e
 80040de:	f88a 2002 	strb.w	r2, [sl, #2]
      tcumul /= (uint64_t)iter;
 80040e2:	460f      	mov	r7, r1
      STBOX1_PRINTF("\r\n");
 80040e4:	484f      	ldr	r0, [pc, #316]	; (8004224 <main+0xac4>)
 80040e6:	4619      	mov	r1, r3
 80040e8:	f000 f9fc 	bl	80044e4 <CDC_Fill_Buffer>
      dwtCyclesToTime1(tcumul, &t);
 80040ec:	4639      	mov	r1, r7
 80040ee:	465a      	mov	r2, fp
 80040f0:	4620      	mov	r0, r4
 80040f2:	9705      	str	r7, [sp, #20]
 80040f4:	f7ff fac2 	bl	800367c <dwtCyclesToTime1>
      STBOX1_PRINTF("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 80040f8:	9f04      	ldr	r7, [sp, #16]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	9206      	str	r2, [sp, #24]
 80040fe:	f003 febb 	bl	8007e78 <HAL_RCC_GetSysClockFreq>
      STBOX1_PRINTF("\r\n");
 8004102:	f106 017c 	add.w	r1, r6, #124	; 0x7c
      STBOX1_PRINTF("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 8004106:	4680      	mov	r8, r0
      STBOX1_PRINTF("\r\n");
 8004108:	9104      	str	r1, [sp, #16]
      STBOX1_PRINTF("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %lu MACC)\r\n",
 800410a:	f004 fb2b 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 800410e:	9904      	ldr	r1, [sp, #16]
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	9a06      	ldr	r2, [sp, #24]
 8004114:	4f42      	ldr	r7, [pc, #264]	; (8004220 <main+0xac0>)
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	3948      	subs	r1, #72	; 0x48
 800411a:	2302      	movs	r3, #2
 800411c:	fbb0 f0f7 	udiv	r0, r0, r7
 8004120:	fbb8 f8f7 	udiv	r8, r8, r7
 8004124:	e9cd 8000 	strd	r8, r0, [sp]
 8004128:	483e      	ldr	r0, [pc, #248]	; (8004224 <main+0xac4>)
 800412a:	f017 f9ef 	bl	801b50c <siprintf>
 800412e:	4601      	mov	r1, r0
 8004130:	f8c9 0000 	str.w	r0, [r9]
 8004134:	483b      	ldr	r0, [pc, #236]	; (8004224 <main+0xac4>)
 8004136:	f000 f9d5 	bl	80044e4 <CDC_Fill_Buffer>
      STBOX1_PRINTF(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 800413a:	e9db 2101 	ldrd	r2, r1, [fp, #4]
 800413e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004142:	fb00 1202 	mla	r2, r0, r2, r1
 8004146:	f8db 300c 	ldr.w	r3, [fp, #12]
 800414a:	4836      	ldr	r0, [pc, #216]	; (8004224 <main+0xac4>)
 800414c:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8004150:	f017 f9dc 	bl	801b50c <siprintf>
 8004154:	4601      	mov	r1, r0
 8004156:	f8c9 0000 	str.w	r0, [r9]
 800415a:	4832      	ldr	r0, [pc, #200]	; (8004224 <main+0xac4>)
 800415c:	f000 f9c2 	bl	80044e4 <CDC_Fill_Buffer>
      if (tcumul / 100000) {
 8004160:	4a31      	ldr	r2, [pc, #196]	; (8004228 <main+0xac8>)
 8004162:	9905      	ldr	r1, [sp, #20]
 8004164:	2300      	movs	r3, #0
 8004166:	42a2      	cmp	r2, r4
 8004168:	418b      	sbcs	r3, r1
 800416a:	d245      	bcs.n	80041f8 <main+0xa98>
    	  STBOX1_PRINTF(" CPU cycles   : %ld%ld (average)\r\n",
 800416c:	4a2f      	ldr	r2, [pc, #188]	; (800422c <main+0xacc>)
 800416e:	2300      	movs	r3, #0
 8004170:	4620      	mov	r0, r4
 8004172:	f7fc fdb1 	bl	8000cd8 <__aeabi_uldivmod>
 8004176:	4b2d      	ldr	r3, [pc, #180]	; (800422c <main+0xacc>)
 8004178:	4602      	mov	r2, r0
 800417a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800417e:	4829      	ldr	r0, [pc, #164]	; (8004224 <main+0xac4>)
 8004180:	fb03 4312 	mls	r3, r3, r2, r4
 8004184:	f017 f9c2 	bl	801b50c <siprintf>
 8004188:	4601      	mov	r1, r0
 800418a:	f8c9 0000 	str.w	r0, [r9]
 800418e:	4825      	ldr	r0, [pc, #148]	; (8004224 <main+0xac4>)
 8004190:	f000 f9a8 	bl	80044e4 <CDC_Fill_Buffer>
      STBOX1_PRINTF(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8004194:	9b05      	ldr	r3, [sp, #20]
 8004196:	2664      	movs	r6, #100	; 0x64
 8004198:	fba4 8406 	umull	r8, r4, r4, r6
 800419c:	fb06 4403 	mla	r4, r6, r3, r4
 80041a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041a2:	ab1e      	add	r3, sp, #120	; 0x78
 80041a4:	4640      	mov	r0, r8
 80041a6:	2300      	movs	r3, #0
 80041a8:	4621      	mov	r1, r4
 80041aa:	f7fc fd95 	bl	8000cd8 <__aeabi_uldivmod>
 80041ae:	2325      	movs	r3, #37	; 0x25
 80041b0:	4602      	mov	r2, r0
 80041b2:	491f      	ldr	r1, [pc, #124]	; (8004230 <main+0xad0>)
 80041b4:	481b      	ldr	r0, [pc, #108]	; (8004224 <main+0xac4>)
 80041b6:	f017 f9a9 	bl	801b50c <siprintf>
 80041ba:	4601      	mov	r1, r0
 80041bc:	f8c9 0000 	str.w	r0, [r9]
 80041c0:	4818      	ldr	r0, [pc, #96]	; (8004224 <main+0xac4>)
 80041c2:	f000 f98f 	bl	80044e4 <CDC_Fill_Buffer>
      cmacc = (uint32_t)((tcumul * 100)/ report.n_macc);
 80041c6:	ab38      	add	r3, sp, #224	; 0xe0
 80041c8:	4640      	mov	r0, r8
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4621      	mov	r1, r4
 80041ce:	2300      	movs	r3, #0
 80041d0:	f7fc fd82 	bl	8000cd8 <__aeabi_uldivmod>
      STBOX1_PRINTF(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80041d4:	4917      	ldr	r1, [pc, #92]	; (8004234 <main+0xad4>)
 80041d6:	fbb0 f2f6 	udiv	r2, r0, r6
 80041da:	fb06 0312 	mls	r3, r6, r2, r0
 80041de:	4811      	ldr	r0, [pc, #68]	; (8004224 <main+0xac4>)
 80041e0:	f017 f994 	bl	801b50c <siprintf>
 80041e4:	4601      	mov	r1, r0
 80041e6:	f8c9 0000 	str.w	r0, [r9]
 80041ea:	480e      	ldr	r0, [pc, #56]	; (8004224 <main+0xac4>)
 80041ec:	f000 f97a 	bl	80044e4 <CDC_Fill_Buffer>
 80041f0:	e4ba      	b.n	8003b68 <main+0x408>
 80041f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80041f6:	e617      	b.n	8003e28 <main+0x6c8>
    	  STBOX1_PRINTF(" CPU cycles   : %ld (average)\r\n", (unsigned long)(tcumul));
 80041f8:	f106 01cc 	add.w	r1, r6, #204	; 0xcc
 80041fc:	4622      	mov	r2, r4
 80041fe:	4809      	ldr	r0, [pc, #36]	; (8004224 <main+0xac4>)
 8004200:	f017 f984 	bl	801b50c <siprintf>
 8004204:	4601      	mov	r1, r0
 8004206:	f8c9 0000 	str.w	r0, [r9]
 800420a:	4806      	ldr	r0, [pc, #24]	; (8004224 <main+0xac4>)
 800420c:	f000 f96a 	bl	80044e4 <CDC_Fill_Buffer>
 8004210:	e7c0      	b.n	8004194 <main+0xa34>
 8004212:	bf00      	nop
 8004214:	20001f04 	.word	0x20001f04
 8004218:	e0001000 	.word	0xe0001000
 800421c:	0801fbd4 	.word	0x0801fbd4
 8004220:	000f4240 	.word	0x000f4240
 8004224:	200011ac 	.word	0x200011ac
 8004228:	0001869f 	.word	0x0001869f
 800422c:	000186a0 	.word	0x000186a0
 8004230:	0801fcd0 	.word	0x0801fcd0
 8004234:	0801fcfc 	.word	0x0801fcfc
 8004238:	0801fbac 	.word	0x0801fbac

0800423c <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pin connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch(GPIO_Pin) {
 800423c:	3802      	subs	r0, #2
{
 800423e:	b508      	push	{r3, lr}
  switch(GPIO_Pin) {
 8004240:	280e      	cmp	r0, #14
 8004242:	d80c      	bhi.n	800425e <HAL_GPIO_EXTI_Callback+0x22>
 8004244:	e8df f000 	tbb	[pc, r0]
 8004248:	0b0c0b08 	.word	0x0b0c0b08
 800424c:	0b0c0b0b 	.word	0x0b0c0b0b
 8004250:	0b0b0b0b 	.word	0x0b0b0b0b
 8004254:	0b0b      	.short	0x0b0b
 8004256:	10          	.byte	0x10
 8004257:	00          	.byte	0x00
    case HCI_TL_SPI_EXTI_PIN:
      hci_tl_lowlevel_isr();
      hci_event=1;
    break;
    case USER_BUTTON_PIN:
      ButtonPressed = 1;    
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_GPIO_EXTI_Callback+0x38>)
 800425a:	2201      	movs	r2, #1
 800425c:	605a      	str	r2, [r3, #4]
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      MEMSInterrupt = 1;
    break;
  }
}
 800425e:	bd08      	pop	{r3, pc}
      MEMSInterrupt = 1;
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <HAL_GPIO_EXTI_Callback+0x38>)
 8004262:	2201      	movs	r2, #1
 8004264:	60da      	str	r2, [r3, #12]
}
 8004266:	bd08      	pop	{r3, pc}
      hci_tl_lowlevel_isr();
 8004268:	f7ff f9f8 	bl	800365c <hci_tl_lowlevel_isr>
      hci_event=1;
 800426c:	4b01      	ldr	r3, [pc, #4]	; (8004274 <HAL_GPIO_EXTI_Callback+0x38>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	bd08      	pop	{r3, pc}
 8004274:	200013dc 	.word	0x200013dc

08004278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode
  * @param  TIM_HandleTypeDef *htim TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b538      	push	{r3, r4, r5, lr}
  uint32_t uhCapture=0;
  /* TIM1_CH1 toggling with frequency = 1Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800427a:	7f04      	ldrb	r4, [r0, #28]
 800427c:	2c01      	cmp	r4, #1
{
 800427e:	4605      	mov	r5, r0
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004280:	d02e      	beq.n	80042e0 <HAL_TIM_OC_DelayElapsedCallback+0x68>

    BlinkLed =1;
  }

  /* TIM1_CH2 toggling with frequency = 0.5Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004282:	2c02      	cmp	r4, #2
 8004284:	d01d      	beq.n	80042c2 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + STBOX1_UPDATE_BATTERY));
    SendBatteryInfo=1;
  }

#ifdef STBOX1_ENABLE_PRINTF
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8004286:	2c04      	cmp	r4, #4
 8004288:	d00f      	beq.n	80042aa <HAL_TIM_OC_DelayElapsedCallback+0x32>
    CDC_PeriodElapsedCallback();
  }
#endif /* STBOX1_ENABLE_PRINTF */

  /* TIM1_CH4 toggling with frequency = 0.5Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800428a:	2c08      	cmp	r4, #8
 800428c:	d000      	beq.n	8004290 <HAL_TIM_OC_DelayElapsedCallback+0x18>
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + STBOX1_UPDATE_INV));
    SendAccGyro=1;
  }
}
 800428e:	bd38      	pop	{r3, r4, r5, pc}
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8004290:	210c      	movs	r1, #12
 8004292:	4628      	mov	r0, r5
 8004294:	f005 fda2 	bl	8009ddc <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + STBOX1_UPDATE_INV));
 8004298:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_TIM_OC_DelayElapsedCallback+0x84>)
    SendAccGyro=1;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + STBOX1_UPDATE_INV));
 800429c:	6811      	ldr	r1, [r2, #0]
 800429e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    SendAccGyro=1;
 80042a2:	2201      	movs	r2, #1
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + STBOX1_UPDATE_INV));
 80042a4:	6408      	str	r0, [r1, #64]	; 0x40
    SendAccGyro=1;
 80042a6:	615a      	str	r2, [r3, #20]
}
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80042aa:	2108      	movs	r1, #8
 80042ac:	4628      	mov	r0, r5
 80042ae:	f005 fd95 	bl	8009ddc <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + STBOX1_UPDATE_VCOM));
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3032      	adds	r0, #50	; 0x32
 80042b8:	63d8      	str	r0, [r3, #60]	; 0x3c
    CDC_PeriodElapsedCallback();
 80042ba:	f000 f94b 	bl	8004554 <CDC_PeriodElapsedCallback>
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80042be:	7f2c      	ldrb	r4, [r5, #28]
 80042c0:	e7e3      	b.n	800428a <HAL_TIM_OC_DelayElapsedCallback+0x12>
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80042c2:	2104      	movs	r1, #4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f005 fd89 	bl	8009ddc <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_2, (uhCapture + STBOX1_UPDATE_BATTERY));
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80042cc:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3010      	adds	r0, #16
 80042d4:	6398      	str	r0, [r3, #56]	; 0x38
    SendBatteryInfo=1;
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80042d8:	7f2c      	ldrb	r4, [r5, #28]
    SendBatteryInfo=1;
 80042da:	2201      	movs	r2, #1
 80042dc:	619a      	str	r2, [r3, #24]
 80042de:	e7d2      	b.n	8004286 <HAL_TIM_OC_DelayElapsedCallback+0xe>
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80042e0:	2100      	movs	r1, #0
 80042e2:	f005 fd7b 	bl	8009ddc <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + STBOX1_UPDATE_LED));
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80042e8:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80042ec:	681a      	ldr	r2, [r3, #0]
    BlinkLed =1;
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + STBOX1_UPDATE_LED));
 80042f0:	3010      	adds	r0, #16
 80042f2:	6350      	str	r0, [r2, #52]	; 0x34
    BlinkLed =1;
 80042f4:	61dc      	str	r4, [r3, #28]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80042f6:	7f2c      	ldrb	r4, [r5, #28]
 80042f8:	e7c3      	b.n	8004282 <HAL_TIM_OC_DelayElapsedCallback+0xa>
 80042fa:	bf00      	nop
 80042fc:	20000e90 	.word	0x20000e90
 8004300:	200013dc 	.word	0x200013dc

08004304 <HAL_TIM_OC_MspInit>:
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_TIM_OC_MspInit+0x30>)
{
 8004306:	b500      	push	{lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004308:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800430a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800430e:	6619      	str	r1, [r3, #96]	; 0x60
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8004312:	b083      	sub	sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004318:	9301      	str	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 800431a:	201b      	movs	r0, #27
 800431c:	2200      	movs	r2, #0
 800431e:	2108      	movs	r1, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004320:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8004322:	f002 fcfb 	bl	8006d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004326:	201b      	movs	r0, #27
}
 8004328:	b003      	add	sp, #12
 800432a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800432e:	f002 bd33 	b.w	8006d98 <HAL_NVIC_EnableIRQ>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004338:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800433a:	4c17      	ldr	r4, [pc, #92]	; (8004398 <HAL_PCD_MspInit+0x60>)
 800433c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004344:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8004346:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	9301      	str	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800434e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004352:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004354:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004356:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004358:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800435a:	2303      	movs	r3, #3
 800435c:	e9cd 5305 	strd	r5, r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004360:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004362:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004368:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800436a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436c:	f002 fd60 	bl	8006e30 <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004370:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004376:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004378:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800437a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800437e:	462a      	mov	r2, r5
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004380:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8004382:	2106      	movs	r1, #6
 8004384:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004386:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8004388:	f002 fcc8 	bl	8006d1c <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800438c:	2043      	movs	r0, #67	; 0x43
 800438e:	f002 fd03 	bl	8006d98 <HAL_NVIC_EnableIRQ>
}
 8004392:	b009      	add	sp, #36	; 0x24
 8004394:	bd30      	pop	{r4, r5, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000

0800439c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <HardFault_Handler>
 80043a2:	bf00      	nop

080043a4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80043a4:	e7fe      	b.n	80043a4 <MemManage_Handler>
 80043a6:	bf00      	nop

080043a8 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80043a8:	e7fe      	b.n	80043a8 <BusFault_Handler>
 80043aa:	bf00      	nop

080043ac <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <UsageFault_Handler>
 80043ae:	bf00      	nop

080043b0 <DebugMon_Handler>:
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop

080043b4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80043b4:	f001 be48 	b.w	8006048 <HAL_IncTick>

080043b8 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <OTG_FS_IRQHandler+0x8>)
 80043ba:	f002 bfc3 	b.w	8007344 <HAL_PCD_IRQHandler>
 80043be:	bf00      	nop
 80043c0:	2000168c 	.word	0x2000168c

080043c4 <EXTI1_IRQHandler>:
* @param  None
* @retval None
*/
void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80043c4:	2002      	movs	r0, #2
 80043c6:	f002 beff 	b.w	80071c8 <HAL_GPIO_EXTI_IRQHandler>
 80043ca:	bf00      	nop

080043cc <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80043cc:	2004      	movs	r0, #4
 80043ce:	f002 befb 	b.w	80071c8 <HAL_GPIO_EXTI_IRQHandler>
 80043d2:	bf00      	nop

080043d4 <EXTI3_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80043d4:	2008      	movs	r0, #8
 80043d6:	f002 bef7 	b.w	80071c8 <HAL_GPIO_EXTI_IRQHandler>
 80043da:	bf00      	nop

080043dc <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 80043dc:	2010      	movs	r0, #16
 80043de:	f002 bef3 	b.w	80071c8 <HAL_GPIO_EXTI_IRQHandler>
 80043e2:	bf00      	nop

080043e4 <TIM1_CC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimCCHandle);
 80043e4:	4801      	ldr	r0, [pc, #4]	; (80043ec <TIM1_CC_IRQHandler+0x8>)
 80043e6:	f005 bd19 	b.w	8009e1c <HAL_TIM_IRQHandler>
 80043ea:	bf00      	nop
 80043ec:	20000e90 	.word	0x20000e90

080043f0 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 80043f0:	2000      	movs	r0, #0
 80043f2:	4770      	bx	lr

080043f4 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
  switch (cmd) {
 80043f4:	2820      	cmp	r0, #32
 80043f6:	d013      	beq.n	8004420 <CDC_Itf_Control+0x2c>
 80043f8:	2821      	cmp	r0, #33	; 0x21
 80043fa:	d10f      	bne.n	800441c <CDC_Itf_Control+0x28>
    LineCoding.paritytype = pbuf[5];
    LineCoding.datatype   = pbuf[6];
    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <CDC_Itf_Control+0x4c>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	0a12      	lsrs	r2, r2, #8
 8004406:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8004408:	885a      	ldrh	r2, [r3, #2]
 800440a:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800440c:	78da      	ldrb	r2, [r3, #3]
 800440e:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8004410:	791a      	ldrb	r2, [r3, #4]
 8004412:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8004414:	795a      	ldrb	r2, [r3, #5]
 8004416:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8004418:	799b      	ldrb	r3, [r3, #6]
 800441a:	718b      	strb	r3, [r1, #6]
  default:
    break;
  }

  return (USBD_OK);
}
 800441c:	2000      	movs	r0, #0
 800441e:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <CDC_Itf_Control+0x4c>)
    LineCoding.format     = pbuf[4];
 8004422:	f891 c004 	ldrb.w	ip, [r1, #4]
    LineCoding.paritytype = pbuf[5];
 8004426:	7948      	ldrb	r0, [r1, #5]
    LineCoding.datatype   = pbuf[6];
 8004428:	798a      	ldrb	r2, [r1, #6]
{
 800442a:	b410      	push	{r4}
 800442c:	680c      	ldr	r4, [r1, #0]
    LineCoding.paritytype = pbuf[5];
 800442e:	7158      	strb	r0, [r3, #5]
    LineCoding.format     = pbuf[4];
 8004430:	f883 c004 	strb.w	ip, [r3, #4]
    LineCoding.datatype   = pbuf[6];
 8004434:	719a      	strb	r2, [r3, #6]
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004436:	601c      	str	r4, [r3, #0]
}
 8004438:	2000      	movs	r0, #0
 800443a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20000224 	.word	0x20000224

08004444 <CDC_Itf_Init>:
{
 8004444:	b538      	push	{r3, r4, r5, lr}
  uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8004446:	4d0c      	ldr	r5, [pc, #48]	; (8004478 <CDC_Itf_Init+0x34>)
 8004448:	682b      	ldr	r3, [r5, #0]
  if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 800444a:	2108      	movs	r1, #8
 800444c:	4628      	mov	r0, r5
  uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 800444e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_3) != HAL_OK){
 8004450:	f005 fb82 	bl	8009b58 <HAL_TIM_OC_Start_IT>
 8004454:	b968      	cbnz	r0, 8004472 <CDC_Itf_Init+0x2e>
  __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + STBOX1_UPDATE_VCOM));
 8004456:	682b      	ldr	r3, [r5, #0]
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 8004458:	4908      	ldr	r1, [pc, #32]	; (800447c <CDC_Itf_Init+0x38>)
 800445a:	4809      	ldr	r0, [pc, #36]	; (8004480 <CDC_Itf_Init+0x3c>)
  __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + STBOX1_UPDATE_VCOM));
 800445c:	3432      	adds	r4, #50	; 0x32
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 800445e:	2200      	movs	r2, #0
  __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_3, (uhCapture + STBOX1_UPDATE_VCOM));
 8004460:	63dc      	str	r4, [r3, #60]	; 0x3c
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 8004462:	f00e f87d 	bl	8012560 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8004466:	4907      	ldr	r1, [pc, #28]	; (8004484 <CDC_Itf_Init+0x40>)
 8004468:	4805      	ldr	r0, [pc, #20]	; (8004480 <CDC_Itf_Init+0x3c>)
 800446a:	f00e f885 	bl	8012578 <USBD_CDC_SetRxBuffer>
}
 800446e:	2000      	movs	r0, #0
 8004470:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler();
 8004472:	f7ff f95f 	bl	8003734 <Error_Handler>
 8004476:	e7ee      	b.n	8004456 <CDC_Itf_Init+0x12>
 8004478:	20000e90 	.word	0x20000e90
 800447c:	20001404 	.word	0x20001404
 8004480:	20000edc 	.word	0x20000edc
 8004484:	20001604 	.word	0x20001604

08004488 <CDC_Itf_Receive>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t *Buf, uint32_t *Len)
{
  VCOM_RxData   = 1;
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <CDC_Itf_Receive+0x4c>)
 800448a:	2201      	movs	r2, #1
{
 800448c:	b510      	push	{r4, lr}
  VCOM_RxData   = 1;
 800448e:	701a      	strb	r2, [r3, #0]
  VCOM_RxBuffer = Buf;
  VCOM_RxLength = *Len;
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <CDC_Itf_Receive+0x50>)
 8004492:	680a      	ldr	r2, [r1, #0]
 8004494:	601a      	str	r2, [r3, #0]
  /* Make Echo */
  CDC_Fill_Buffer(Buf, *Len);
 8004496:	680c      	ldr	r4, [r1, #0]
  VCOM_RxBuffer = Buf;
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <CDC_Itf_Receive+0x54>)
 800449a:	6010      	str	r0, [r2, #0]
  for (i = 0; i < TotalLen; i++) {
 800449c:	b1bc      	cbz	r4, 80044ce <CDC_Itf_Receive+0x46>
    if ((UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE == UserTxBufPtrOut) {
 800449e:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <CDC_Itf_Receive+0x58>)
 80044a0:	3c01      	subs	r4, #1
 80044a2:	f8d2 3280 	ldr.w	r3, [r2, #640]	; 0x280
 80044a6:	1e41      	subs	r1, r0, #1
 80044a8:	4404      	add	r4, r0
 80044aa:	e007      	b.n	80044bc <CDC_Itf_Receive+0x34>
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80044ac:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80044b0:	f802 c00e 	strb.w	ip, [r2, lr]
  for (i = 0; i < TotalLen; i++) {
 80044b4:	42a1      	cmp	r1, r4
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE;
 80044b6:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
  for (i = 0; i < TotalLen; i++) {
 80044ba:	d008      	beq.n	80044ce <CDC_Itf_Receive+0x46>
    if ((UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE == UserTxBufPtrOut) {
 80044bc:	f8d2 0284 	ldr.w	r0, [r2, #644]	; 0x284
 80044c0:	f103 0c01 	add.w	ip, r3, #1
 80044c4:	469e      	mov	lr, r3
 80044c6:	f3cc 0308 	ubfx	r3, ip, #0, #9
 80044ca:	4283      	cmp	r3, r0
 80044cc:	d1ee      	bne.n	80044ac <CDC_Itf_Receive+0x24>
  return (USBD_OK);
}
 80044ce:	2000      	movs	r0, #0
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	200012c0 	.word	0x200012c0
 80044d8:	200012c4 	.word	0x200012c4
 80044dc:	200012c8 	.word	0x200012c8
 80044e0:	20001404 	.word	0x20001404

080044e4 <CDC_Fill_Buffer>:
  for (i = 0; i < TotalLen; i++) {
 80044e4:	b1e1      	cbz	r1, 8004520 <CDC_Fill_Buffer+0x3c>
    if ((UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE == UserTxBufPtrOut) {
 80044e6:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <CDC_Fill_Buffer+0x40>)
 80044e8:	4401      	add	r1, r0
{
 80044ea:	b510      	push	{r4, lr}
    if ((UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE == UserTxBufPtrOut) {
 80044ec:	f8d2 3280 	ldr.w	r3, [r2, #640]	; 0x280
 80044f0:	3801      	subs	r0, #1
 80044f2:	1e4c      	subs	r4, r1, #1
 80044f4:	e007      	b.n	8004506 <CDC_Fill_Buffer+0x22>
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80044f6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80044fa:	f802 100e 	strb.w	r1, [r2, lr]
  for (i = 0; i < TotalLen; i++) {
 80044fe:	42a0      	cmp	r0, r4
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE;
 8004500:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
  for (i = 0; i < TotalLen; i++) {
 8004504:	d00a      	beq.n	800451c <CDC_Fill_Buffer+0x38>
    if ((UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE == UserTxBufPtrOut) {
 8004506:	f8d2 1284 	ldr.w	r1, [r2, #644]	; 0x284
 800450a:	f103 0c01 	add.w	ip, r3, #1
 800450e:	469e      	mov	lr, r3
 8004510:	f3cc 0308 	ubfx	r3, ip, #0, #9
 8004514:	428b      	cmp	r3, r1
 8004516:	d1ee      	bne.n	80044f6 <CDC_Fill_Buffer+0x12>
      return (USBD_FAIL);
 8004518:	2003      	movs	r0, #3
}
 800451a:	bd10      	pop	{r4, pc}
  return (USBD_OK);
 800451c:	2000      	movs	r0, #0
}
 800451e:	bd10      	pop	{r4, pc}
  return (USBD_OK);
 8004520:	2000      	movs	r0, #0
}
 8004522:	4770      	bx	lr
 8004524:	20001404 	.word	0x20001404

08004528 <CDC_Next_Packet_Rx>:
{
 8004528:	b508      	push	{r3, lr}
  if (VCOM_RxData == 1) {
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <CDC_Next_Packet_Rx+0x24>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d004      	beq.n	800453c <CDC_Next_Packet_Rx+0x14>
}
 8004532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return USBD_CDC_ReceivePacket(&USBD_Device);
 8004536:	4806      	ldr	r0, [pc, #24]	; (8004550 <CDC_Next_Packet_Rx+0x28>)
 8004538:	f00e b840 	b.w	80125bc <USBD_CDC_ReceivePacket>
    Error_Handler();
 800453c:	f7ff f8fa 	bl	8003734 <Error_Handler>
}
 8004540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return USBD_CDC_ReceivePacket(&USBD_Device);
 8004544:	4802      	ldr	r0, [pc, #8]	; (8004550 <CDC_Next_Packet_Rx+0x28>)
 8004546:	f00e b839 	b.w	80125bc <USBD_CDC_ReceivePacket>
 800454a:	bf00      	nop
 800454c:	200012c0 	.word	0x200012c0
 8004550:	20000edc 	.word	0x20000edc

08004554 <CDC_PeriodElapsedCallback>:
{
 8004554:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn) {
 8004556:	4c14      	ldr	r4, [pc, #80]	; (80045a8 <CDC_PeriodElapsedCallback+0x54>)
 8004558:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
 800455c:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
 8004560:	4293      	cmp	r3, r2
 8004562:	d01f      	beq.n	80045a4 <CDC_PeriodElapsedCallback+0x50>
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */{
 8004564:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
      buffsize = APP_TX_DATA_SIZE - UserTxBufPtrOut;
 8004568:	f8d4 5284 	ldr.w	r5, [r4, #644]	; 0x284
    buffptr = UserTxBufPtrOut;
 800456c:	f8d4 1284 	ldr.w	r1, [r4, #644]	; 0x284
    USBD_CDC_SetTxBuffer(&USBD_Device, &UserTxBuffer[buffptr], buffsize);
 8004570:	480e      	ldr	r0, [pc, #56]	; (80045ac <CDC_PeriodElapsedCallback+0x58>)
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */{
 8004572:	429a      	cmp	r2, r3
      buffsize = APP_TX_DATA_SIZE - UserTxBufPtrOut;
 8004574:	bf34      	ite	cc
 8004576:	f5c5 7500 	rsbcc	r5, r5, #512	; 0x200
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 800457a:	1b55      	subcs	r5, r2, r5
    USBD_CDC_SetTxBuffer(&USBD_Device, &UserTxBuffer[buffptr], buffsize);
 800457c:	462a      	mov	r2, r5
 800457e:	4421      	add	r1, r4
 8004580:	f00d ffee 	bl	8012560 <USBD_CDC_SetTxBuffer>
    if (USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK) {
 8004584:	4809      	ldr	r0, [pc, #36]	; (80045ac <CDC_PeriodElapsedCallback+0x58>)
 8004586:	f00e f801 	bl	801258c <USBD_CDC_TransmitPacket>
 800458a:	b958      	cbnz	r0, 80045a4 <CDC_PeriodElapsedCallback+0x50>
      UserTxBufPtrOut += buffsize;
 800458c:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
 8004590:	442b      	add	r3, r5
 8004592:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
      if (UserTxBufPtrOut >= APP_TX_DATA_SIZE) {
 8004596:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
 800459a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
        UserTxBufPtrOut = 0;
 800459e:	bf28      	it	cs
 80045a0:	f8c4 0284 	strcs.w	r0, [r4, #644]	; 0x284
}
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
 80045a6:	bf00      	nop
 80045a8:	20001404 	.word	0x20001404
 80045ac:	20000edc 	.word	0x20000edc

080045b0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80045b0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80045b4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045b8:	f00e b876 	b.w	80126a8 <USBD_LL_SetupStage>

080045bc <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80045bc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80045c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80045c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80045cc:	f00e b89c 	b.w	8012708 <USBD_LL_DataOutStage>

080045d0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80045d0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80045d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80045d8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045de:	f00e b8c7 	b.w	8012770 <USBD_LL_DataInStage>
 80045e2:	bf00      	nop

080045e4 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80045e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045e8:	f00e b960 	b.w	80128ac <USBD_LL_SOF>

080045ec <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80045ec:	b510      	push	{r4, lr}
 80045ee:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80045f0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045f4:	f00e f912 	bl	801281c <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80045f8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80045fc:	2101      	movs	r1, #1
}
 80045fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004602:	f00e b937 	b.w	8012874 <USBD_LL_SetSpeed>
 8004606:	bf00      	nop

08004608 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 8004608:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800460c:	f00e b936 	b.w	801287c <USBD_LL_Suspend>

08004610 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8004610:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004614:	f00e b93e 	b.w	8012894 <USBD_LL_Resume>

08004618 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8004618:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800461c:	f00e b96e 	b.w	80128fc <USBD_LL_IsoOUTIncomplete>

08004620 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8004620:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004624:	f00e b956 	b.w	80128d4 <USBD_LL_IsoINIncomplete>

08004628 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8004628:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800462c:	f00e b97a 	b.w	8012924 <USBD_LL_DevConnected>

08004630 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8004630:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004634:	f00e b978 	b.w	8012928 <USBD_LL_DevDisconnected>

08004638 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004638:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800463a:	4c15      	ldr	r4, [pc, #84]	; (8004690 <USBD_LL_Init+0x58>)
 800463c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8004640:	2500      	movs	r5, #0
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004642:	2302      	movs	r3, #2
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8004644:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  hpcd.Init.ep0_mps = 0x40;
 8004648:	2640      	movs	r6, #64	; 0x40
  pdev->pData = &hpcd;
 800464a:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  hpcd.Instance = USB_OTG_FS;
 800464e:	6022      	str	r2, [r4, #0]
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8004650:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 8004652:	2205      	movs	r2, #5
  hpcd.Init.Sof_enable = 0;
 8004654:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8004658:	60e3      	str	r3, [r4, #12]
  hpcd.Init.dev_endpoints = 5;
 800465a:	6062      	str	r2, [r4, #4]
  hpcd.Init.dma_enable = 0;
 800465c:	e9c4 5604 	strd	r5, r6, [r4, #16]
  hpcd.Init.lpm_enable = 0;
 8004660:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hpcd.Init.use_dedicated_ep1 = 0;
 8004664:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.battery_charging_enable = 0;
 8004666:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.vbus_sensing_enable = 0;
 8004668:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800466a:	f002 fdb9 	bl	80071e0 <HAL_PCD_Init>

  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	4620      	mov	r0, r4
 8004672:	f003 fa91 	bl	8007b98 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8004676:	4632      	mov	r2, r6
 8004678:	4629      	mov	r1, r5
 800467a:	4620      	mov	r0, r4
 800467c:	f003 fa66 	bl	8007b4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	2101      	movs	r1, #1
 8004684:	4620      	mov	r0, r4
 8004686:	f003 fa61 	bl	8007b4c <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800468a:	4628      	mov	r0, r5
 800468c:	bd70      	pop	{r4, r5, r6, pc}
 800468e:	bf00      	nop
 8004690:	2000168c 	.word	0x2000168c

08004694 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004694:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8004696:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800469a:	f002 fe37 	bl	800730c <HAL_PCD_Start>
  return USBD_OK;
}
 800469e:	2000      	movs	r0, #0
 80046a0:	bd08      	pop	{r3, pc}
 80046a2:	bf00      	nop

080046a4 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80046a4:	b508      	push	{r3, lr}
 80046a6:	4694      	mov	ip, r2
  HAL_PCD_EP_Open(pdev->pData,
 80046a8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80046ac:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 80046ae:	4663      	mov	r3, ip
 80046b0:	f003 f918 	bl	80078e4 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);

  return USBD_OK;
}
 80046b4:	2000      	movs	r0, #0
 80046b6:	bd08      	pop	{r3, pc}

080046b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046b8:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80046ba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80046be:	f003 f94f 	bl	8007960 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80046c2:	2000      	movs	r0, #0
 80046c4:	bd08      	pop	{r3, pc}
 80046c6:	bf00      	nop

080046c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046c8:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80046ca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80046ce:	f003 f9c3 	bl	8007a58 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80046d2:	2000      	movs	r0, #0
 80046d4:	bd08      	pop	{r3, pc}
 80046d6:	bf00      	nop

080046d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046d8:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80046da:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80046de:	f003 f9fd 	bl	8007adc <HAL_PCD_EP_ClrStall>
  return USBD_OK;
}
 80046e2:	2000      	movs	r0, #0
 80046e4:	bd08      	pop	{r3, pc}
 80046e6:	bf00      	nop

080046e8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;

  if((ep_addr & 0x80) == 0x80) {
 80046e8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80046ea:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80) {
 80046ee:	d406      	bmi.n	80046fe <USBD_LL_IsStallEP+0x16>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  } else {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80046f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80046f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80046f8:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 80046fc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80046fe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004702:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004706:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800470a:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 800470e:	4770      	bx	lr

08004710 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004710:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004712:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004716:	f003 f8d1 	bl	80078bc <HAL_PCD_SetAddress>
  return USBD_OK;
}
 800471a:	2000      	movs	r0, #0
 800471c:	bd08      	pop	{r3, pc}
 800471e:	bf00      	nop

08004720 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev,
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8004720:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004722:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004726:	f003 f975 	bl	8007a14 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800472a:	2000      	movs	r0, #0
 800472c:	bd08      	pop	{r3, pc}
 800472e:	bf00      	nop

08004730 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8004730:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004732:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004736:	f003 f941 	bl	80079bc <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800473a:	2000      	movs	r0, #0
 800473c:	bd08      	pop	{r3, pc}
 800473e:	bf00      	nop

08004740 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8004740:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004744:	f003 b95c 	b.w	8007a00 <HAL_PCD_EP_GetRxCount>

08004748 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8004748:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 800474a:	4801      	ldr	r0, [pc, #4]	; (8004750 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 800474c:	800b      	strh	r3, [r1, #0]
}
 800474e:	4770      	bx	lr
 8004750:	20000240 	.word	0x20000240

08004754 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004754:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8004756:	4801      	ldr	r0, [pc, #4]	; (800475c <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004758:	800b      	strh	r3, [r1, #0]
}
 800475a:	4770      	bx	lr
 800475c:	20000254 	.word	0x20000254

08004760 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004760:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8004762:	4c04      	ldr	r4, [pc, #16]	; (8004774 <USBD_VCP_ProductStrDescriptor+0x14>)
 8004764:	4804      	ldr	r0, [pc, #16]	; (8004778 <USBD_VCP_ProductStrDescriptor+0x18>)
{
 8004766:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8004768:	4621      	mov	r1, r4
 800476a:	f00e fb69 	bl	8012e40 <USBD_GetString>
  return USBD_StrDesc;
}
 800476e:	4620      	mov	r0, r4
 8004770:	bd10      	pop	{r4, pc}
 8004772:	bf00      	nop
 8004774:	20001a94 	.word	0x20001a94
 8004778:	080214a0 	.word	0x080214a0

0800477c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800477c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800477e:	4c04      	ldr	r4, [pc, #16]	; (8004790 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8004780:	4804      	ldr	r0, [pc, #16]	; (8004794 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 8004782:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004784:	4621      	mov	r1, r4
 8004786:	f00e fb5b 	bl	8012e40 <USBD_GetString>
  return USBD_StrDesc;
}
 800478a:	4620      	mov	r0, r4
 800478c:	bd10      	pop	{r4, pc}
 800478e:	bf00      	nop
 8004790:	20001a94 	.word	0x20001a94
 8004794:	080214c4 	.word	0x080214c4

08004798 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004798:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800479a:	4c04      	ldr	r4, [pc, #16]	; (80047ac <USBD_VCP_ConfigStrDescriptor+0x14>)
 800479c:	4804      	ldr	r0, [pc, #16]	; (80047b0 <USBD_VCP_ConfigStrDescriptor+0x18>)
{
 800479e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80047a0:	4621      	mov	r1, r4
 80047a2:	f00e fb4d 	bl	8012e40 <USBD_GetString>
  return USBD_StrDesc;
}
 80047a6:	4620      	mov	r0, r4
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop
 80047ac:	20001a94 	.word	0x20001a94
 80047b0:	080214d8 	.word	0x080214d8

080047b4 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80047b4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80047b6:	4c04      	ldr	r4, [pc, #16]	; (80047c8 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 80047b8:	4804      	ldr	r0, [pc, #16]	; (80047cc <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 80047ba:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80047bc:	4621      	mov	r1, r4
 80047be:	f00e fb3f 	bl	8012e40 <USBD_GetString>
  return USBD_StrDesc;
}
 80047c2:	4620      	mov	r0, r4
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop
 80047c8:	20001a94 	.word	0x20001a94
 80047cc:	080214e4 	.word	0x080214e4

080047d0 <USBD_VCP_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80047d0:	4820      	ldr	r0, [pc, #128]	; (8004854 <USBD_VCP_SerialStrDescriptor+0x84>)
 80047d2:	f8d0 3a10 	ldr.w	r3, [r0, #2576]	; 0xa10
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;

  deviceserial0 += deviceserial2;
 80047d6:	f8d0 2a18 	ldr.w	r2, [r0, #2584]	; 0xa18
{
 80047da:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0) {
 80047dc:	189b      	adds	r3, r3, r2
  *length = USB_SIZ_STRING_SERIAL;
 80047de:	f04f 041a 	mov.w	r4, #26
 80047e2:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0) {
 80047e4:	d101      	bne.n	80047ea <USBD_VCP_SerialStrDescriptor+0x1a>
}
 80047e6:	481c      	ldr	r0, [pc, #112]	; (8004858 <USBD_VCP_SerialStrDescriptor+0x88>)
 80047e8:	bd30      	pop	{r4, r5, pc}
 80047ea:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <USBD_VCP_SerialStrDescriptor+0x88>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80047ec:	f8d0 1a14 	ldr.w	r1, [r0, #2580]	; 0xa14
 80047f0:	f04f 0e00 	mov.w	lr, #0
 80047f4:	4610      	mov	r0, r2
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[ 2* idx + 1] = 0;
 80047f6:	4675      	mov	r5, lr
    if( ((value >> 28)) < 0xA ) {
 80047f8:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 80047fc:	ea4f 7c13 	mov.w	ip, r3, lsr #28
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004800:	f10c 0430 	add.w	r4, ip, #48	; 0x30
  for( idx = 0 ; idx < len ; idx ++) {
 8004804:	f10e 0e02 	add.w	lr, lr, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8004808:	bf2a      	itet	cs
 800480a:	f10c 0c37 	addcs.w	ip, ip, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 800480e:	7084      	strbcc	r4, [r0, #2]
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8004810:	f880 c002 	strbcs.w	ip, [r0, #2]
  for( idx = 0 ; idx < len ; idx ++) {
 8004814:	f1be 0f10 	cmp.w	lr, #16
    pbuf[ 2* idx + 1] = 0;
 8004818:	70c5      	strb	r5, [r0, #3]
    value = value << 4;
 800481a:	ea4f 1303 	mov.w	r3, r3, lsl #4
  for( idx = 0 ; idx < len ; idx ++) {
 800481e:	f100 0002 	add.w	r0, r0, #2
 8004822:	d1e9      	bne.n	80047f8 <USBD_VCP_SerialStrDescriptor+0x28>
 8004824:	2000      	movs	r0, #0
    pbuf[ 2* idx + 1] = 0;
 8004826:	4604      	mov	r4, r0
    if( ((value >> 28)) < 0xA ) {
 8004828:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800482c:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004830:	f103 0c30 	add.w	ip, r3, #48	; 0x30
  for( idx = 0 ; idx < len ; idx ++) {
 8004834:	f100 0002 	add.w	r0, r0, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8004838:	bf2a      	itet	cs
 800483a:	3337      	addcs	r3, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 800483c:	f882 c012 	strbcc.w	ip, [r2, #18]
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8004840:	7493      	strbcs	r3, [r2, #18]
  for( idx = 0 ; idx < len ; idx ++) {
 8004842:	2808      	cmp	r0, #8
    pbuf[ 2* idx + 1] = 0;
 8004844:	74d4      	strb	r4, [r2, #19]
    value = value << 4;
 8004846:	ea4f 1101 	mov.w	r1, r1, lsl #4
  for( idx = 0 ; idx < len ; idx ++) {
 800484a:	f102 0202 	add.w	r2, r2, #2
 800484e:	d1eb      	bne.n	8004828 <USBD_VCP_SerialStrDescriptor+0x58>
}
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <USBD_VCP_SerialStrDescriptor+0x88>)
 8004852:	bd30      	pop	{r4, r5, pc}
 8004854:	1fff7000 	.word	0x1fff7000
 8004858:	20000258 	.word	0x20000258

0800485c <LSM6DSOX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSOX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GetCapabilities(LSM6DSOX_Object_t *pObj, LSM6DSOX_Capabilities_t *Capabilities)
{
 800485c:	b410      	push	{r4}

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 800485e:	f240 1c01 	movw	ip, #257	; 0x101
 8004862:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <LSM6DSOX_GetCapabilities+0x28>)
 8004868:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxFS     = 0;
 800486a:	2000      	movs	r0, #0
  Capabilities->GyroMaxFS    = 2000;
 800486c:	e9c1 c400 	strd	ip, r4, [r1]
  Capabilities->AccMaxFS     = 16;
 8004870:	2410      	movs	r4, #16
  Capabilities->AccMaxOdr    = 6660.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 8004872:	2200      	movs	r2, #0
  Capabilities->MagMaxFS     = 0;
 8004874:	e9c1 4002 	strd	r4, r0, [r1, #8]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004878:	614b      	str	r3, [r1, #20]
  return LSM6DSOX_OK;
}
 800487a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxOdr    = 0.0f;
 800487e:	618a      	str	r2, [r1, #24]
}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	45d02000 	.word	0x45d02000

08004888 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004888:	b410      	push	{r4}
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800488a:	6944      	ldr	r4, [r0, #20]
 800488c:	7b00      	ldrb	r0, [r0, #12]
 800488e:	46a4      	mov	ip, r4
}
 8004890:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004894:	4760      	bx	ip
 8004896:	bf00      	nop

08004898 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004898:	b410      	push	{r4}
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800489a:	6904      	ldr	r4, [r0, #16]
 800489c:	7b00      	ldrb	r0, [r0, #12]
 800489e:	46a4      	mov	ip, r4
}
 80048a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80048a4:	4760      	bx	ip
 80048a6:	bf00      	nop

080048a8 <LSM6DSOX_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM6DSOX_4g
 80048a8:	2902      	cmp	r1, #2
{
 80048aa:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSOX_4g
 80048ac:	dd06      	ble.n	80048bc <LSM6DSOX_ACC_SetFullScale+0x14>
 80048ae:	2904      	cmp	r1, #4
 80048b0:	dd0d      	ble.n	80048ce <LSM6DSOX_ACC_SetFullScale+0x26>
 80048b2:	2909      	cmp	r1, #9
 80048b4:	bfb4      	ite	lt
 80048b6:	2103      	movlt	r1, #3
 80048b8:	2101      	movge	r1, #1
 80048ba:	e000      	b.n	80048be <LSM6DSOX_ACC_SetFullScale+0x16>
 80048bc:	2100      	movs	r1, #0
  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 80048be:	3020      	adds	r0, #32
 80048c0:	f000 fe74 	bl	80055ac <lsm6dsox_xl_full_scale_set>
 80048c4:	3800      	subs	r0, #0
 80048c6:	bf18      	it	ne
 80048c8:	2001      	movne	r0, #1
}
 80048ca:	4240      	negs	r0, r0
 80048cc:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSOX_4g
 80048ce:	2102      	movs	r1, #2
 80048d0:	e7f5      	b.n	80048be <LSM6DSOX_ACC_SetFullScale+0x16>
 80048d2:	bf00      	nop

080048d4 <LSM6DSOX_Init>:
{
 80048d4:	b570      	push	{r4, r5, r6, lr}
  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 80048d6:	f100 0420 	add.w	r4, r0, #32
{
 80048da:	4605      	mov	r5, r0
  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 ffea 	bl	80058b8 <lsm6dsox_i3c_disable_set>
 80048e4:	bb58      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 80048e6:	2101      	movs	r1, #1
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 ffcb 	bl	8005884 <lsm6dsox_auto_increment_set>
 80048ee:	bb30      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 80048f0:	2101      	movs	r1, #1
 80048f2:	4620      	mov	r0, r4
 80048f4:	f000 ff32 	bl	800575c <lsm6dsox_block_data_update_set>
 80048f8:	4601      	mov	r1, r0
 80048fa:	bb00      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 80048fc:	4620      	mov	r0, r4
 80048fe:	f001 f809 	bl	8005914 <lsm6dsox_fifo_mode_set>
 8004902:	4601      	mov	r1, r0
 8004904:	b9d8      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  pObj->acc_odr = LSM6DSOX_XL_ODR_104Hz;
 8004906:	2604      	movs	r6, #4
 8004908:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 800490c:	4620      	mov	r0, r4
 800490e:	f001 fa1b 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 8004912:	4601      	mov	r1, r0
 8004914:	b998      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), LSM6DSOX_2g) != LSM6DSOX_OK)
 8004916:	4620      	mov	r0, r4
 8004918:	f000 fe48 	bl	80055ac <lsm6dsox_xl_full_scale_set>
 800491c:	4601      	mov	r1, r0
 800491e:	b970      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  pObj->gyro_odr = LSM6DSOX_GY_ODR_104Hz;
 8004920:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8004924:	4620      	mov	r0, r4
 8004926:	f001 fab3 	bl	8005e90 <lsm6dsox_gy_data_rate_set>
 800492a:	b940      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), LSM6DSOX_2000dps) != LSM6DSOX_OK)
 800492c:	2106      	movs	r1, #6
 800492e:	4620      	mov	r0, r4
 8004930:	f000 fea2 	bl	8005678 <lsm6dsox_gy_full_scale_set>
 8004934:	b918      	cbnz	r0, 800493e <LSM6DSOX_Init+0x6a>
  pObj->is_initialized = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 800493c:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSOX_ERROR;
 800493e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004942:	bd70      	pop	{r4, r5, r6, pc}

08004944 <LSM6DSOX_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 8004944:	297d      	cmp	r1, #125	; 0x7d
{
 8004946:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 8004948:	dd0a      	ble.n	8004960 <LSM6DSOX_GYRO_SetFullScale+0x1c>
 800494a:	29fa      	cmp	r1, #250	; 0xfa
 800494c:	dd11      	ble.n	8004972 <LSM6DSOX_GYRO_SetFullScale+0x2e>
 800494e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8004952:	dd10      	ble.n	8004976 <LSM6DSOX_GYRO_SetFullScale+0x32>
 8004954:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004958:	bfd4      	ite	le
 800495a:	2104      	movle	r1, #4
 800495c:	2106      	movgt	r1, #6
 800495e:	e000      	b.n	8004962 <LSM6DSOX_GYRO_SetFullScale+0x1e>
 8004960:	2101      	movs	r1, #1
  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8004962:	3020      	adds	r0, #32
 8004964:	f000 fe88 	bl	8005678 <lsm6dsox_gy_full_scale_set>
 8004968:	3800      	subs	r0, #0
 800496a:	bf18      	it	ne
 800496c:	2001      	movne	r0, #1
}
 800496e:	4240      	negs	r0, r0
 8004970:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 8004972:	2100      	movs	r1, #0
 8004974:	e7f5      	b.n	8004962 <LSM6DSOX_GYRO_SetFullScale+0x1e>
 8004976:	2102      	movs	r1, #2
 8004978:	e7f3      	b.n	8004962 <LSM6DSOX_GYRO_SetFullScale+0x1e>
 800497a:	bf00      	nop

0800497c <LSM6DSOX_ReadID>:
{
 800497c:	b508      	push	{r3, lr}
  if (lsm6dsox_device_id_get(&(pObj->Ctx), Id) != LSM6DSOX_OK)
 800497e:	3020      	adds	r0, #32
 8004980:	f000 ff76 	bl	8005870 <lsm6dsox_device_id_get>
 8004984:	3800      	subs	r0, #0
 8004986:	bf18      	it	ne
 8004988:	2001      	movne	r0, #1
}
 800498a:	4240      	negs	r0, r0
 800498c:	bd08      	pop	{r3, pc}
 800498e:	bf00      	nop

08004990 <LSM6DSOX_ACC_GetOutputDataRate>:
{
 8004990:	b510      	push	{r4, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	460c      	mov	r4, r1
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8004996:	3020      	adds	r0, #32
 8004998:	f10d 0107 	add.w	r1, sp, #7
 800499c:	f000 fe3a 	bl	8005614 <lsm6dsox_xl_data_rate_get>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d130      	bne.n	8004a06 <LSM6DSOX_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 80049a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80049a8:	2b0b      	cmp	r3, #11
 80049aa:	d82c      	bhi.n	8004a06 <LSM6DSOX_ACC_GetOutputDataRate+0x76>
 80049ac:	e8df f003 	tbb	[pc, r3]
 80049b0:	13100d0a 	.word	0x13100d0a
 80049b4:	1f1c1916 	.word	0x1f1c1916
 80049b8:	06282522 	.word	0x06282522
      *Odr = 1.6f;
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <LSM6DSOX_ACC_GetOutputDataRate+0x7c>)
 80049be:	6023      	str	r3, [r4, #0]
}
 80049c0:	b002      	add	sp, #8
 80049c2:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 80049c4:	2300      	movs	r3, #0
 80049c6:	6023      	str	r3, [r4, #0]
      break;
 80049c8:	e7fa      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <LSM6DSOX_ACC_GetOutputDataRate+0x80>)
 80049cc:	6023      	str	r3, [r4, #0]
      break;
 80049ce:	e7f7      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <LSM6DSOX_ACC_GetOutputDataRate+0x84>)
 80049d2:	6023      	str	r3, [r4, #0]
      break;
 80049d4:	e7f4      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <LSM6DSOX_ACC_GetOutputDataRate+0x88>)
 80049d8:	6023      	str	r3, [r4, #0]
      break;
 80049da:	e7f1      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <LSM6DSOX_ACC_GetOutputDataRate+0x8c>)
 80049de:	6023      	str	r3, [r4, #0]
      break;
 80049e0:	e7ee      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <LSM6DSOX_ACC_GetOutputDataRate+0x90>)
 80049e4:	6023      	str	r3, [r4, #0]
      break;
 80049e6:	e7eb      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <LSM6DSOX_ACC_GetOutputDataRate+0x94>)
 80049ea:	6023      	str	r3, [r4, #0]
      break;
 80049ec:	e7e8      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 80049ee:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <LSM6DSOX_ACC_GetOutputDataRate+0x98>)
 80049f0:	6023      	str	r3, [r4, #0]
      break;
 80049f2:	e7e5      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 80049f4:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <LSM6DSOX_ACC_GetOutputDataRate+0x9c>)
 80049f6:	6023      	str	r3, [r4, #0]
      break;
 80049f8:	e7e2      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <LSM6DSOX_ACC_GetOutputDataRate+0xa0>)
 80049fc:	6023      	str	r3, [r4, #0]
      break;
 80049fe:	e7df      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <LSM6DSOX_ACC_GetOutputDataRate+0xa4>)
 8004a02:	6023      	str	r3, [r4, #0]
      break;
 8004a04:	e7dc      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8004a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a0a:	e7d9      	b.n	80049c0 <LSM6DSOX_ACC_GetOutputDataRate+0x30>
 8004a0c:	3fcccccd 	.word	0x3fcccccd
 8004a10:	41480000 	.word	0x41480000
 8004a14:	41d00000 	.word	0x41d00000
 8004a18:	42500000 	.word	0x42500000
 8004a1c:	42d00000 	.word	0x42d00000
 8004a20:	43500000 	.word	0x43500000
 8004a24:	43d08000 	.word	0x43d08000
 8004a28:	44504000 	.word	0x44504000
 8004a2c:	44d06000 	.word	0x44d06000
 8004a30:	45505000 	.word	0x45505000
 8004a34:	45d05800 	.word	0x45d05800

08004a38 <LSM6DSOX_ACC_GetSensitivity>:
{
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	460c      	mov	r4, r1
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8004a3e:	3020      	adds	r0, #32
 8004a40:	f10d 0107 	add.w	r1, sp, #7
 8004a44:	f000 fdcc 	bl	80055e0 <lsm6dsox_xl_full_scale_get>
 8004a48:	b9b8      	cbnz	r0, 8004a7a <LSM6DSOX_ACC_GetSensitivity+0x42>
  switch (full_scale)
 8004a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d813      	bhi.n	8004a7a <LSM6DSOX_ACC_GetSensitivity+0x42>
 8004a52:	e8df f003 	tbb	[pc, r3]
 8004a56:	0a06      	.short	0x0a06
 8004a58:	020e      	.short	0x020e
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_8G;
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <LSM6DSOX_ACC_GetSensitivity+0x48>)
 8004a5c:	6023      	str	r3, [r4, #0]
}
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_2G;
 8004a62:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <LSM6DSOX_ACC_GetSensitivity+0x4c>)
 8004a64:	6023      	str	r3, [r4, #0]
}
 8004a66:	b002      	add	sp, #8
 8004a68:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_16G;
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <LSM6DSOX_ACC_GetSensitivity+0x50>)
 8004a6c:	6023      	str	r3, [r4, #0]
}
 8004a6e:	b002      	add	sp, #8
 8004a70:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_4G;
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <LSM6DSOX_ACC_GetSensitivity+0x54>)
 8004a74:	6023      	str	r3, [r4, #0]
}
 8004a76:	b002      	add	sp, #8
 8004a78:	bd10      	pop	{r4, pc}
  switch (full_scale)
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a7e:	e7ee      	b.n	8004a5e <LSM6DSOX_ACC_GetSensitivity+0x26>
 8004a80:	3e79db23 	.word	0x3e79db23
 8004a84:	3d79db23 	.word	0x3d79db23
 8004a88:	3ef9db23 	.word	0x3ef9db23
 8004a8c:	3df9db23 	.word	0x3df9db23

08004a90 <LSM6DSOX_ACC_GetFullScale>:
{
 8004a90:	b510      	push	{r4, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	460c      	mov	r4, r1
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 8004a96:	3020      	adds	r0, #32
 8004a98:	f10d 0107 	add.w	r1, sp, #7
 8004a9c:	f000 fda0 	bl	80055e0 <lsm6dsox_xl_full_scale_get>
 8004aa0:	b9b8      	cbnz	r0, 8004ad2 <LSM6DSOX_ACC_GetFullScale+0x42>
  switch (fs_low_level)
 8004aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d813      	bhi.n	8004ad2 <LSM6DSOX_ACC_GetFullScale+0x42>
 8004aaa:	e8df f003 	tbb	[pc, r3]
 8004aae:	0a06      	.short	0x0a06
 8004ab0:	020e      	.short	0x020e
      *FullScale =  8;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	6023      	str	r3, [r4, #0]
}
 8004ab6:	b002      	add	sp, #8
 8004ab8:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 8004aba:	2302      	movs	r3, #2
 8004abc:	6023      	str	r3, [r4, #0]
}
 8004abe:	b002      	add	sp, #8
 8004ac0:	bd10      	pop	{r4, pc}
      *FullScale = 16;
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	6023      	str	r3, [r4, #0]
}
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8004aca:	2304      	movs	r3, #4
 8004acc:	6023      	str	r3, [r4, #0]
}
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad6:	e7ee      	b.n	8004ab6 <LSM6DSOX_ACC_GetFullScale+0x26>

08004ad8 <LSM6DSOX_ACC_GetAxesRaw>:
{
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	460c      	mov	r4, r1
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8004ade:	3020      	adds	r0, #32
 8004ae0:	4669      	mov	r1, sp
 8004ae2:	f000 fe75 	bl	80057d0 <lsm6dsox_acceleration_raw_get>
 8004ae6:	b950      	cbnz	r0, 8004afe <LSM6DSOX_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8004ae8:	f8bd 1000 	ldrh.w	r1, [sp]
  Value->y = data_raw.i16bit[1];
 8004aec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  Value->z = data_raw.i16bit[2];
 8004af0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8004af4:	8021      	strh	r1, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8004af6:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8004af8:	80a3      	strh	r3, [r4, #4]
}
 8004afa:	b002      	add	sp, #8
 8004afc:	bd10      	pop	{r4, pc}
    return LSM6DSOX_ERROR;
 8004afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b02:	e7fa      	b.n	8004afa <LSM6DSOX_ACC_GetAxesRaw+0x22>

08004b04 <LSM6DSOX_ACC_GetAxes>:
{
 8004b04:	b530      	push	{r4, r5, lr}
 8004b06:	b085      	sub	sp, #20
 8004b08:	4605      	mov	r5, r0
  float sensitivity = 0.0f;
 8004b0a:	2300      	movs	r3, #0
{
 8004b0c:	460c      	mov	r4, r1
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8004b0e:	3020      	adds	r0, #32
 8004b10:	a902      	add	r1, sp, #8
  float sensitivity = 0.0f;
 8004b12:	9301      	str	r3, [sp, #4]
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8004b14:	f000 fe5c 	bl	80057d0 <lsm6dsox_acceleration_raw_get>
 8004b18:	bb60      	cbnz	r0, 8004b74 <LSM6DSOX_ACC_GetAxes+0x70>
  if (LSM6DSOX_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8004b1a:	a901      	add	r1, sp, #4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7ff ff8b 	bl	8004a38 <LSM6DSOX_ACC_GetSensitivity>
 8004b22:	bb38      	cbnz	r0, 8004b74 <LSM6DSOX_ACC_GetAxes+0x70>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b24:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8004b28:	ed9d 6a01 	vldr	s12, [sp, #4]
 8004b2c:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b30:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004b34:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b38:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004b3c:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b4c:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b50:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b54:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b58:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b5c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b64:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b68:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b6c:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8004b70:	b005      	add	sp, #20
 8004b72:	bd30      	pop	{r4, r5, pc}
    return LSM6DSOX_ERROR;
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b78:	e7fa      	b.n	8004b70 <LSM6DSOX_ACC_GetAxes+0x6c>
 8004b7a:	bf00      	nop

08004b7c <LSM6DSOX_GYRO_GetOutputDataRate>:
{
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	460c      	mov	r4, r1
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8004b82:	3020      	adds	r0, #32
 8004b84:	f10d 0107 	add.w	r1, sp, #7
 8004b88:	f000 fdba 	bl	8005700 <lsm6dsox_gy_data_rate_get>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d12d      	bne.n	8004bec <LSM6DSOX_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8004b90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b94:	2b0a      	cmp	r3, #10
 8004b96:	d829      	bhi.n	8004bec <LSM6DSOX_GYRO_GetOutputDataRate+0x70>
 8004b98:	e8df f003 	tbb	[pc, r3]
 8004b9c:	13100d0a 	.word	0x13100d0a
 8004ba0:	1f1c1916 	.word	0x1f1c1916
 8004ba4:	2522      	.short	0x2522
 8004ba6:	06          	.byte	0x06
 8004ba7:	00          	.byte	0x00
      *Odr =  6667.0f;
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <LSM6DSOX_GYRO_GetOutputDataRate+0x78>)
 8004baa:	6023      	str	r3, [r4, #0]
}
 8004bac:	b002      	add	sp, #8
 8004bae:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6023      	str	r3, [r4, #0]
      break;
 8004bb4:	e7fa      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <LSM6DSOX_GYRO_GetOutputDataRate+0x7c>)
 8004bb8:	6023      	str	r3, [r4, #0]
      break;
 8004bba:	e7f7      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <LSM6DSOX_GYRO_GetOutputDataRate+0x80>)
 8004bbe:	6023      	str	r3, [r4, #0]
      break;
 8004bc0:	e7f4      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8004bc2:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <LSM6DSOX_GYRO_GetOutputDataRate+0x84>)
 8004bc4:	6023      	str	r3, [r4, #0]
      break;
 8004bc6:	e7f1      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <LSM6DSOX_GYRO_GetOutputDataRate+0x88>)
 8004bca:	6023      	str	r3, [r4, #0]
      break;
 8004bcc:	e7ee      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <LSM6DSOX_GYRO_GetOutputDataRate+0x8c>)
 8004bd0:	6023      	str	r3, [r4, #0]
      break;
 8004bd2:	e7eb      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <LSM6DSOX_GYRO_GetOutputDataRate+0x90>)
 8004bd6:	6023      	str	r3, [r4, #0]
      break;
 8004bd8:	e7e8      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <LSM6DSOX_GYRO_GetOutputDataRate+0x94>)
 8004bdc:	6023      	str	r3, [r4, #0]
      break;
 8004bde:	e7e5      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr =  1667.0f;
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <LSM6DSOX_GYRO_GetOutputDataRate+0x98>)
 8004be2:	6023      	str	r3, [r4, #0]
      break;
 8004be4:	e7e2      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
      *Odr =  3333.0f;
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <LSM6DSOX_GYRO_GetOutputDataRate+0x9c>)
 8004be8:	6023      	str	r3, [r4, #0]
      break;
 8004bea:	e7df      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf0:	e7dc      	b.n	8004bac <LSM6DSOX_GYRO_GetOutputDataRate+0x30>
 8004bf2:	bf00      	nop
 8004bf4:	45d05800 	.word	0x45d05800
 8004bf8:	41480000 	.word	0x41480000
 8004bfc:	41d00000 	.word	0x41d00000
 8004c00:	42500000 	.word	0x42500000
 8004c04:	42d00000 	.word	0x42d00000
 8004c08:	43500000 	.word	0x43500000
 8004c0c:	43d08000 	.word	0x43d08000
 8004c10:	44504000 	.word	0x44504000
 8004c14:	44d06000 	.word	0x44d06000
 8004c18:	45505000 	.word	0x45505000

08004c1c <LSM6DSOX_GYRO_GetSensitivity>:
{
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	460c      	mov	r4, r1
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8004c22:	3020      	adds	r0, #32
 8004c24:	f10d 0107 	add.w	r1, sp, #7
 8004c28:	f000 fd40 	bl	80056ac <lsm6dsox_gy_full_scale_get>
 8004c2c:	b948      	cbnz	r0, 8004c42 <LSM6DSOX_GYRO_GetSensitivity+0x26>
  switch (full_scale)
 8004c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d805      	bhi.n	8004c42 <LSM6DSOX_GYRO_GetSensitivity+0x26>
 8004c36:	e8df f003 	tbb	[pc, r3]
 8004c3a:	0c08      	.short	0x0c08
 8004c3c:	04140410 	.word	0x04140410
 8004c40:	18          	.byte	0x18
 8004c41:	00          	.byte	0x00
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004c46:	b002      	add	sp, #8
 8004c48:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_250DPS;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <LSM6DSOX_GYRO_GetSensitivity+0x58>)
 8004c4c:	6023      	str	r3, [r4, #0]
}
 8004c4e:	b002      	add	sp, #8
 8004c50:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_125DPS;
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <LSM6DSOX_GYRO_GetSensitivity+0x5c>)
 8004c54:	6023      	str	r3, [r4, #0]
}
 8004c56:	b002      	add	sp, #8
 8004c58:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_500DPS;
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <LSM6DSOX_GYRO_GetSensitivity+0x60>)
 8004c5c:	6023      	str	r3, [r4, #0]
}
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_1000DPS;
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <LSM6DSOX_GYRO_GetSensitivity+0x64>)
 8004c64:	6023      	str	r3, [r4, #0]
}
 8004c66:	b002      	add	sp, #8
 8004c68:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_2000DPS;
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <LSM6DSOX_GYRO_GetSensitivity+0x68>)
 8004c6c:	6023      	str	r3, [r4, #0]
}
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	bf00      	nop
 8004c74:	410c0000 	.word	0x410c0000
 8004c78:	408c0000 	.word	0x408c0000
 8004c7c:	418c0000 	.word	0x418c0000
 8004c80:	420c0000 	.word	0x420c0000
 8004c84:	428c0000 	.word	0x428c0000

08004c88 <LSM6DSOX_GYRO_GetFullScale>:
{
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	460c      	mov	r4, r1
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 8004c8e:	3020      	adds	r0, #32
 8004c90:	f10d 0107 	add.w	r1, sp, #7
 8004c94:	f000 fd0a 	bl	80056ac <lsm6dsox_gy_full_scale_get>
 8004c98:	b948      	cbnz	r0, 8004cae <LSM6DSOX_GYRO_GetFullScale+0x26>
  switch (fs_low_level)
 8004c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d805      	bhi.n	8004cae <LSM6DSOX_GYRO_GetFullScale+0x26>
 8004ca2:	e8df f003 	tbb	[pc, r3]
 8004ca6:	0c08      	.short	0x0c08
 8004ca8:	04150410 	.word	0x04150410
 8004cac:	1a          	.byte	0x1a
 8004cad:	00          	.byte	0x00
 8004cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004cb2:	b002      	add	sp, #8
 8004cb4:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8004cb6:	23fa      	movs	r3, #250	; 0xfa
 8004cb8:	6023      	str	r3, [r4, #0]
}
 8004cba:	b002      	add	sp, #8
 8004cbc:	bd10      	pop	{r4, pc}
      *FullScale =  125;
 8004cbe:	237d      	movs	r3, #125	; 0x7d
 8004cc0:	6023      	str	r3, [r4, #0]
}
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd10      	pop	{r4, pc}
      *FullScale =  500;
 8004cc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004cca:	6023      	str	r3, [r4, #0]
}
 8004ccc:	b002      	add	sp, #8
 8004cce:	bd10      	pop	{r4, pc}
      *FullScale = 1000;
 8004cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cd4:	6023      	str	r3, [r4, #0]
}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bd10      	pop	{r4, pc}
      *FullScale = 2000;
 8004cda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004cde:	6023      	str	r3, [r4, #0]
}
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd10      	pop	{r4, pc}

08004ce4 <LSM6DSOX_GYRO_GetAxesRaw>:
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	460c      	mov	r4, r1
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8004cea:	3020      	adds	r0, #32
 8004cec:	4669      	mov	r1, sp
 8004cee:	f000 fd4f 	bl	8005790 <lsm6dsox_angular_rate_raw_get>
 8004cf2:	b950      	cbnz	r0, 8004d0a <LSM6DSOX_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8004cf4:	f8bd 1000 	ldrh.w	r1, [sp]
  Value->y = data_raw.i16bit[1];
 8004cf8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  Value->z = data_raw.i16bit[2];
 8004cfc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8004d00:	8021      	strh	r1, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8004d02:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8004d04:	80a3      	strh	r3, [r4, #4]
}
 8004d06:	b002      	add	sp, #8
 8004d08:	bd10      	pop	{r4, pc}
    return LSM6DSOX_ERROR;
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d0e:	e7fa      	b.n	8004d06 <LSM6DSOX_GYRO_GetAxesRaw+0x22>

08004d10 <LSM6DSOX_GYRO_GetAxes>:
{
 8004d10:	b530      	push	{r4, r5, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	4605      	mov	r5, r0
 8004d16:	460c      	mov	r4, r1
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8004d18:	3020      	adds	r0, #32
 8004d1a:	a902      	add	r1, sp, #8
 8004d1c:	f000 fd38 	bl	8005790 <lsm6dsox_angular_rate_raw_get>
 8004d20:	bb60      	cbnz	r0, 8004d7c <LSM6DSOX_GYRO_GetAxes+0x6c>
  if (LSM6DSOX_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8004d22:	a901      	add	r1, sp, #4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7ff ff79 	bl	8004c1c <LSM6DSOX_GYRO_GetSensitivity>
 8004d2a:	bb38      	cbnz	r0, 8004d7c <LSM6DSOX_GYRO_GetAxes+0x6c>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d2c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8004d30:	ed9d 6a01 	vldr	s12, [sp, #4]
 8004d34:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d38:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004d3c:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d40:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004d44:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d54:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d58:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d5c:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d60:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d64:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d6c:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d70:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d74:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8004d78:	b005      	add	sp, #20
 8004d7a:	bd30      	pop	{r4, r5, pc}
    return LSM6DSOX_ERROR;
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d80:	e7fa      	b.n	8004d78 <LSM6DSOX_GYRO_GetAxes+0x68>
 8004d82:	bf00      	nop

08004d84 <LSM6DSOX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8004d84:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d00b      	beq.n	8004da4 <LSM6DSOX_ACC_Enable+0x20>
{
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	4604      	mov	r4, r0
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSOX_OK)
 8004d90:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 8004d94:	3020      	adds	r0, #32
 8004d96:	f000 ffd7 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 8004d9a:	b928      	cbnz	r0, 8004da8 <LSM6DSOX_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8004da2:	bd10      	pop	{r4, pc}
    return LSM6DSOX_OK;
 8004da4:	2000      	movs	r0, #0
}
 8004da6:	4770      	bx	lr
    return LSM6DSOX_ERROR;
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	bf00      	nop

08004db0 <LSM6DSOX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8004db0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d00b      	beq.n	8004dd0 <LSM6DSOX_GYRO_Enable+0x20>
{
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4604      	mov	r4, r0
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSOX_OK)
 8004dbc:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8004dc0:	3020      	adds	r0, #32
 8004dc2:	f001 f865 	bl	8005e90 <lsm6dsox_gy_data_rate_set>
 8004dc6:	b928      	cbnz	r0, 8004dd4 <LSM6DSOX_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8004dce:	bd10      	pop	{r4, pc}
    return LSM6DSOX_OK;
 8004dd0:	2000      	movs	r0, #0
}
 8004dd2:	4770      	bx	lr
    return LSM6DSOX_ERROR;
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	bf00      	nop

08004ddc <LSM6DSOX_ACC_Disable>:
{
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8004de0:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
 8004de4:	b900      	cbnz	r0, 8004de8 <LSM6DSOX_ACC_Disable+0xc>
}
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 8004de8:	f104 0520 	add.w	r5, r4, #32
 8004dec:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fc0f 	bl	8005614 <lsm6dsox_xl_data_rate_get>
 8004df6:	4601      	mov	r1, r0
 8004df8:	b930      	cbnz	r0, 8004e08 <LSM6DSOX_ACC_Disable+0x2c>
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 ffa4 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 8004e00:	b910      	cbnz	r0, 8004e08 <LSM6DSOX_ACC_Disable+0x2c>
  pObj->acc_is_enabled = 0;
 8004e02:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSOX_ERROR;
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
 8004e0e:	bf00      	nop

08004e10 <LSM6DSOX_GYRO_Disable>:
{
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 8004e14:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 8004e18:	b900      	cbnz	r0, 8004e1c <LSM6DSOX_GYRO_Disable+0xc>
}
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 8004e1c:	f104 0520 	add.w	r5, r4, #32
 8004e20:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 fc6b 	bl	8005700 <lsm6dsox_gy_data_rate_get>
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	b930      	cbnz	r0, 8004e3c <LSM6DSOX_GYRO_Disable+0x2c>
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f001 f82e 	bl	8005e90 <lsm6dsox_gy_data_rate_set>
 8004e34:	b910      	cbnz	r0, 8004e3c <LSM6DSOX_GYRO_Disable+0x2c>
  pObj->gyro_is_enabled = 0;
 8004e36:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSOX_ERROR;
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop

08004e44 <LSM6DSOX_DeInit>:
{
 8004e44:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8004e46:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8004e4a:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8004e4c:	b953      	cbnz	r3, 8004e64 <LSM6DSOX_DeInit+0x20>
  if (pObj->gyro_is_enabled == 0U)
 8004e4e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004e52:	b9d3      	cbnz	r3, 8004e8a <LSM6DSOX_DeInit+0x46>
  pObj->acc_odr = LSM6DSOX_XL_ODR_OFF;
 8004e54:	2000      	movs	r0, #0
 8004e56:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  pObj->gyro_odr = LSM6DSOX_GY_ODR_OFF;
 8004e5a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  pObj->is_initialized = 0;
 8004e5e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 8004e64:	f100 0520 	add.w	r5, r0, #32
 8004e68:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 fbd1 	bl	8005614 <lsm6dsox_xl_data_rate_get>
 8004e72:	4601      	mov	r1, r0
 8004e74:	b9c8      	cbnz	r0, 8004eaa <LSM6DSOX_DeInit+0x66>
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 ff66 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 8004e7c:	b9a8      	cbnz	r0, 8004eaa <LSM6DSOX_DeInit+0x66>
  if (pObj->gyro_is_enabled == 0U)
 8004e7e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  pObj->acc_is_enabled = 0;
 8004e82:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  if (pObj->gyro_is_enabled == 0U)
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0e4      	beq.n	8004e54 <LSM6DSOX_DeInit+0x10>
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 8004e8a:	f104 0520 	add.w	r5, r4, #32
 8004e8e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 fc34 	bl	8005700 <lsm6dsox_gy_data_rate_get>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	b930      	cbnz	r0, 8004eaa <LSM6DSOX_DeInit+0x66>
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fff7 	bl	8005e90 <lsm6dsox_gy_data_rate_set>
 8004ea2:	b910      	cbnz	r0, 8004eaa <LSM6DSOX_DeInit+0x66>
  pObj->gyro_is_enabled = 0;
 8004ea4:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return LSM6DSOX_OK;
 8004ea8:	e7d4      	b.n	8004e54 <LSM6DSOX_DeInit+0x10>
    return LSM6DSOX_ERROR;
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004eae:	bd38      	pop	{r3, r4, r5, pc}

08004eb0 <LSM6DSOX_RegisterBusIO>:
  if (pObj == NULL)
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d038      	beq.n	8004f26 <LSM6DSOX_RegisterBusIO+0x76>
{
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8004eb8:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8004ec0:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8004ec4:	7b0a      	ldrb	r2, [r1, #12]
 8004ec6:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004ec8:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 8004ecc:	e9c4 0204 	strd	r0, r2, [r4, #16]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004ed0:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004ed4:	4915      	ldr	r1, [pc, #84]	; (8004f2c <LSM6DSOX_RegisterBusIO+0x7c>)
 8004ed6:	6261      	str	r1, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004ed8:	4915      	ldr	r1, [pc, #84]	; (8004f30 <LSM6DSOX_RegisterBusIO+0x80>)
    pObj->IO.GetTick   = pIO->GetTick;
 8004eda:	61a0      	str	r0, [r4, #24]
    pObj->Ctx.handle   = pObj;
 8004edc:	e9c4 240a 	strd	r2, r4, [r4, #40]	; 0x28
{
 8004ee0:	b082      	sub	sp, #8
    pObj->Ctx.write_reg = WriteRegWrap;
 8004ee2:	6221      	str	r1, [r4, #32]
    if (pObj->IO.Init == NULL)
 8004ee4:	b1e3      	cbz	r3, 8004f20 <LSM6DSOX_RegisterBusIO+0x70>
    else if (pObj->IO.Init() != LSM6DSOX_OK)
 8004ee6:	4798      	blx	r3
 8004ee8:	b9d0      	cbnz	r0, 8004f20 <LSM6DSOX_RegisterBusIO+0x70>
      if (pObj->IO.BusType == LSM6DSOX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004eea:	68a3      	ldr	r3, [r4, #8]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d001      	beq.n	8004ef4 <LSM6DSOX_RegisterBusIO+0x44>
}
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8004ef4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f9      	bne.n	8004ef0 <LSM6DSOX_RegisterBusIO+0x40>
          if (LSM6DSOX_Write_Reg(pObj, LSM6DSOX_CTRL3_C, data) != LSM6DSOX_OK)
 8004efc:	f04f 0c0c 	mov.w	ip, #12
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 8004f00:	2301      	movs	r3, #1
 8004f02:	f10d 0207 	add.w	r2, sp, #7
 8004f06:	2112      	movs	r1, #18
 8004f08:	f104 0020 	add.w	r0, r4, #32
 8004f0c:	f88d c007 	strb.w	ip, [sp, #7]
 8004f10:	f000 fb44 	bl	800559c <lsm6dsox_write_reg>
            ret = LSM6DSOX_ERROR;
 8004f14:	2800      	cmp	r0, #0
 8004f16:	bf18      	it	ne
 8004f18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
}
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd10      	pop	{r4, pc}
    ret = LSM6DSOX_ERROR;
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f24:	e7e4      	b.n	8004ef0 <LSM6DSOX_RegisterBusIO+0x40>
 8004f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004f2a:	4770      	bx	lr
 8004f2c:	08004889 	.word	0x08004889
 8004f30:	08004899 	.word	0x08004899

08004f34 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>:
{
 8004f34:	b530      	push	{r4, r5, lr}
 8004f36:	ed2d 8b02 	vpush	{d8}
  switch (Mode)
 8004f3a:	2901      	cmp	r1, #1
{
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8004f42:	4604      	mov	r4, r0
  switch (Mode)
 8004f44:	f000 80ed 	beq.w	8005122 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8004f48:	2902      	cmp	r1, #2
 8004f4a:	f000 80ac 	beq.w	80050a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x172>
 8004f4e:	2900      	cmp	r1, #0
 8004f50:	d06d      	beq.n	800502e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
  if (pObj->acc_is_enabled == 1U)
 8004f52:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8004f56:	eddf 7acc 	vldr	s15, [pc, #816]	; 8005288 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x354>
  if (pObj->acc_is_enabled == 1U)
 8004f5a:	2901      	cmp	r1, #1
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8004f5c:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (pObj->acc_is_enabled == 1U)
 8004f60:	d054      	beq.n	800500c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xd8>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	d807      	bhi.n	8004f78 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x44>
 8004f68:	230b      	movs	r3, #11
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8004f6a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004f6e:	2000      	movs	r0, #0
}
 8004f70:	b005      	add	sp, #20
 8004f72:	ecbd 8b02 	vpop	{d8}
 8004f76:	bd30      	pop	{r4, r5, pc}
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8004f78:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8004f7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f84:	f240 8150 	bls.w	8005228 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f4>
 8004f88:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004f8c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	f240 8188 	bls.w	80052a8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x374>
 8004f98:	eddf 7abc 	vldr	s15, [pc, #752]	; 800528c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x358>
 8004f9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa4:	f240 8184 	bls.w	80052b0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x37c>
 8004fa8:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8005290 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x35c>
 8004fac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb4:	f240 819e 	bls.w	80052f4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3c0>
 8004fb8:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8005294 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x360>
 8004fbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc4:	f240 819a 	bls.w	80052fc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3c8>
 8004fc8:	eddf 7ab3 	vldr	s15, [pc, #716]	; 8005298 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x364>
 8004fcc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd4:	f240 8196 	bls.w	8005304 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3d0>
 8004fd8:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800529c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x368>
 8004fdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	f240 8192 	bls.w	800530c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3d8>
 8004fe8:	eddf 7aad 	vldr	s15, [pc, #692]	; 80052a0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36c>
 8004fec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff4:	f240 818c 	bls.w	8005310 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3dc>
 8004ff8:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80052a4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x370>
 8004ffc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	bf94      	ite	ls
 8005006:	2309      	movls	r3, #9
 8005008:	230a      	movhi	r3, #10
 800500a:	e7ae      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	f200 80c1 	bhi.w	8005196 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
 8005014:	210b      	movs	r1, #11
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8005016:	f104 0020 	add.w	r0, r4, #32
 800501a:	f000 fe95 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 800501e:	3800      	subs	r0, #0
 8005020:	bf18      	it	ne
 8005022:	2001      	movne	r0, #1
 8005024:	4240      	negs	r0, r0
}
 8005026:	b005      	add	sp, #20
 8005028:	ecbd 8b02 	vpop	{d8}
 800502c:	bd30      	pop	{r4, r5, pc}
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800502e:	f100 0520 	add.w	r5, r0, #32
 8005032:	aa02      	add	r2, sp, #8
 8005034:	2301      	movs	r3, #1
 8005036:	2114      	movs	r1, #20
 8005038:	4628      	mov	r0, r5
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	f000 faa6 	bl	800558c <lsm6dsox_read_reg>
 8005040:	2800      	cmp	r0, #0
 8005042:	f040 80a5 	bne.w	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (val1.xl_ulp_en)
 8005046:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800504a:	9a01      	ldr	r2, [sp, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	da12      	bge.n	8005076 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x142>
        if (pObj->acc_is_enabled == 1U)
 8005050:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005054:	2b01      	cmp	r3, #1
 8005056:	f000 812d 	beq.w	80052b4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x380>
        val1.xl_ulp_en = 0;
 800505a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800505e:	f36f 11c7 	bfc	r1, #7, #1
 8005062:	f88d 1008 	strb.w	r1, [sp, #8]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005066:	2301      	movs	r3, #1
 8005068:	2114      	movs	r1, #20
 800506a:	4628      	mov	r0, r5
 800506c:	f000 fa96 	bl	800559c <lsm6dsox_write_reg>
 8005070:	2800      	cmp	r0, #0
 8005072:	f040 808d 	bne.w	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005076:	2301      	movs	r3, #1
 8005078:	aa03      	add	r2, sp, #12
 800507a:	2115      	movs	r1, #21
 800507c:	4628      	mov	r0, r5
 800507e:	f000 fa85 	bl	800558c <lsm6dsox_read_reg>
 8005082:	2800      	cmp	r0, #0
 8005084:	f040 8084 	bne.w	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (val2.xl_hm_mode)
 8005088:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800508c:	06da      	lsls	r2, r3, #27
 800508e:	f100 80ec 	bmi.w	800526a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x336>
      if (Odr < 12.5f)
 8005092:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
        Odr = 12.5f;
 8005096:	eeb4 8a67 	vcmp.f32	s16, s15
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	bf48      	it	mi
 80050a0:	eeb0 8a67 	vmovmi.f32	s16, s15
 80050a4:	e755      	b.n	8004f52 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1e>
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 80050a6:	f100 0520 	add.w	r5, r0, #32
 80050aa:	2301      	movs	r3, #1
 80050ac:	aa03      	add	r2, sp, #12
 80050ae:	2115      	movs	r1, #21
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 fa6b 	bl	800558c <lsm6dsox_read_reg>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d16a      	bne.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (val2.xl_hm_mode)
 80050ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80050be:	06da      	lsls	r2, r3, #27
 80050c0:	f100 80c4 	bmi.w	800524c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>
      if (pObj->gyro_is_enabled == 1U)
 80050c4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f000 80af 	beq.w	800522c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f8>
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80050ce:	aa02      	add	r2, sp, #8
 80050d0:	2301      	movs	r3, #1
 80050d2:	2114      	movs	r1, #20
 80050d4:	4628      	mov	r0, r5
 80050d6:	9201      	str	r2, [sp, #4]
 80050d8:	f000 fa58 	bl	800558c <lsm6dsox_read_reg>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d157      	bne.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (!val1.xl_ulp_en)
 80050e0:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80050e4:	9a01      	ldr	r2, [sp, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db11      	blt.n	800510e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1da>
        if (pObj->acc_is_enabled == 1U)
 80050ea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	f000 80f4 	beq.w	80052dc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3a8>
        val1.xl_ulp_en = 1U;
 80050f4:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80050f8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80050fc:	f88d 1008 	strb.w	r1, [sp, #8]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005100:	2301      	movs	r3, #1
 8005102:	4628      	mov	r0, r5
 8005104:	2114      	movs	r1, #20
 8005106:	f000 fa49 	bl	800559c <lsm6dsox_write_reg>
 800510a:	2800      	cmp	r0, #0
 800510c:	d140      	bne.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (Odr > 208.0f)
 800510e:	eddf 7a61 	vldr	s15, [pc, #388]	; 8005294 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x360>
        Odr = 208.0f;
 8005112:	eeb4 8a67 	vcmp.f32	s16, s15
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	bfc8      	it	gt
 800511c:	eeb0 8a67 	vmovgt.f32	s16, s15
 8005120:	e717      	b.n	8004f52 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1e>
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005122:	f100 0520 	add.w	r5, r0, #32
 8005126:	aa02      	add	r2, sp, #8
 8005128:	460b      	mov	r3, r1
 800512a:	4628      	mov	r0, r5
 800512c:	2114      	movs	r1, #20
 800512e:	9201      	str	r2, [sp, #4]
 8005130:	f000 fa2c 	bl	800558c <lsm6dsox_read_reg>
 8005134:	bb60      	cbnz	r0, 8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (val1.xl_ulp_en)
 8005136:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800513a:	9a01      	ldr	r2, [sp, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	da10      	bge.n	8005162 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x22e>
        if (pObj->acc_is_enabled == 1U)
 8005140:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005144:	2b01      	cmp	r3, #1
 8005146:	f000 80bf 	beq.w	80052c8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x394>
        val1.xl_ulp_en = 0;
 800514a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800514e:	f36f 11c7 	bfc	r1, #7, #1
 8005152:	f88d 1008 	strb.w	r1, [sp, #8]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005156:	2301      	movs	r3, #1
 8005158:	2114      	movs	r1, #20
 800515a:	4628      	mov	r0, r5
 800515c:	f000 fa1e 	bl	800559c <lsm6dsox_write_reg>
 8005160:	b9b0      	cbnz	r0, 8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005162:	2301      	movs	r3, #1
 8005164:	aa03      	add	r2, sp, #12
 8005166:	2115      	movs	r1, #21
 8005168:	4628      	mov	r0, r5
 800516a:	f000 fa0f 	bl	800558c <lsm6dsox_read_reg>
 800516e:	b978      	cbnz	r0, 8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
      if (!val2.xl_hm_mode)
 8005170:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005174:	06d9      	lsls	r1, r3, #27
 8005176:	d4ca      	bmi.n	800510e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1da>
        val2.xl_hm_mode = 1U;
 8005178:	f043 0110 	orr.w	r1, r3, #16
 800517c:	f88d 100c 	strb.w	r1, [sp, #12]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005180:	2301      	movs	r3, #1
 8005182:	aa03      	add	r2, sp, #12
 8005184:	4628      	mov	r0, r5
 8005186:	2115      	movs	r1, #21
 8005188:	f000 fa08 	bl	800559c <lsm6dsox_write_reg>
 800518c:	2800      	cmp	r0, #0
 800518e:	d0be      	beq.n	800510e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1da>
        return LSM6DSOX_ERROR;
 8005190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005194:	e6ec      	b.n	8004f70 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3c>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8005196:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800519a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a2:	f67f af38 	bls.w	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
 80051a6:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80051aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b2:	d97b      	bls.n	80052ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x378>
 80051b4:	eddf 7a35 	vldr	s15, [pc, #212]	; 800528c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x358>
 80051b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	f240 8096 	bls.w	80052f0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3bc>
 80051c4:	eddf 7a32 	vldr	s15, [pc, #200]	; 8005290 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x35c>
 80051c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	f240 8092 	bls.w	80052f8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3c4>
 80051d4:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8005294 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x360>
 80051d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	f240 808e 	bls.w	8005300 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3cc>
 80051e4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005298 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x364>
 80051e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	f240 808a 	bls.w	8005308 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3d4>
 80051f4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800529c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x368>
 80051f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	f240 8088 	bls.w	8005314 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3e0>
 8005204:	eddf 7a26 	vldr	s15, [pc, #152]	; 80052a0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36c>
 8005208:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	f240 8082 	bls.w	8005318 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x3e4>
 8005214:	eddf 7a23 	vldr	s15, [pc, #140]	; 80052a4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x370>
 8005218:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	bf94      	ite	ls
 8005222:	2109      	movls	r1, #9
 8005224:	210a      	movhi	r1, #10
 8005226:	e6f6      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8005228:	2301      	movs	r3, #1
 800522a:	e69e      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 800522c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fa65 	bl	8005700 <lsm6dsox_gy_data_rate_get>
 8005236:	4601      	mov	r1, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	d1a9      	bne.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 800523c:	4628      	mov	r0, r5
 800523e:	f000 fe27 	bl	8005e90 <lsm6dsox_gy_data_rate_set>
 8005242:	2800      	cmp	r0, #0
 8005244:	d1a4      	bne.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
  pObj->gyro_is_enabled = 0;
 8005246:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return LSM6DSOX_OK;
 800524a:	e740      	b.n	80050ce <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x19a>
        val2.xl_hm_mode = 0;
 800524c:	4619      	mov	r1, r3
 800524e:	f360 1104 	bfi	r1, r0, #4, #1
 8005252:	f88d 100c 	strb.w	r1, [sp, #12]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005256:	2301      	movs	r3, #1
 8005258:	aa03      	add	r2, sp, #12
 800525a:	2115      	movs	r1, #21
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f99d 	bl	800559c <lsm6dsox_write_reg>
 8005262:	2800      	cmp	r0, #0
 8005264:	f43f af2e 	beq.w	80050c4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x190>
 8005268:	e792      	b.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
        val2.xl_hm_mode = 0;
 800526a:	4619      	mov	r1, r3
 800526c:	f360 1104 	bfi	r1, r0, #4, #1
 8005270:	f88d 100c 	strb.w	r1, [sp, #12]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005274:	2301      	movs	r3, #1
 8005276:	aa03      	add	r2, sp, #12
 8005278:	4628      	mov	r0, r5
 800527a:	2115      	movs	r1, #21
 800527c:	f000 f98e 	bl	800559c <lsm6dsox_write_reg>
 8005280:	2800      	cmp	r0, #0
 8005282:	f43f af06 	beq.w	8005092 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x15e>
 8005286:	e783      	b.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
 8005288:	3fcccccd 	.word	0x3fcccccd
 800528c:	42500000 	.word	0x42500000
 8005290:	42d00000 	.word	0x42d00000
 8005294:	43500000 	.word	0x43500000
 8005298:	43d08000 	.word	0x43d08000
 800529c:	44504000 	.word	0x44504000
 80052a0:	44d06000 	.word	0x44d06000
 80052a4:	45505000 	.word	0x45505000
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052a8:	2302      	movs	r3, #2
 80052aa:	e65e      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052ac:	2102      	movs	r1, #2
 80052ae:	e6b2      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052b0:	2303      	movs	r3, #3
 80052b2:	e65a      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80052b4:	4601      	mov	r1, r0
 80052b6:	4628      	mov	r0, r5
 80052b8:	9201      	str	r2, [sp, #4]
 80052ba:	f000 fd45 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 80052be:	9a01      	ldr	r2, [sp, #4]
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f43f aeca 	beq.w	800505a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x126>
 80052c6:	e763      	b.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80052c8:	4601      	mov	r1, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	9201      	str	r2, [sp, #4]
 80052ce:	f000 fd3b 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 80052d2:	9a01      	ldr	r2, [sp, #4]
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f43f af38 	beq.w	800514a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x216>
 80052da:	e759      	b.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80052dc:	4601      	mov	r1, r0
 80052de:	4628      	mov	r0, r5
 80052e0:	9201      	str	r2, [sp, #4]
 80052e2:	f000 fd31 	bl	8005d48 <lsm6dsox_xl_data_rate_set>
 80052e6:	9a01      	ldr	r2, [sp, #4]
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f43f af03 	beq.w	80050f4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1c0>
 80052ee:	e74f      	b.n	8005190 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x25c>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052f0:	2103      	movs	r1, #3
 80052f2:	e690      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052f4:	2304      	movs	r3, #4
 80052f6:	e638      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052f8:	2104      	movs	r1, #4
 80052fa:	e68c      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80052fc:	2305      	movs	r3, #5
 80052fe:	e634      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8005300:	2105      	movs	r1, #5
 8005302:	e688      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8005304:	2306      	movs	r3, #6
 8005306:	e630      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8005308:	2106      	movs	r1, #6
 800530a:	e684      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 800530c:	2307      	movs	r3, #7
 800530e:	e62c      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
 8005310:	2308      	movs	r3, #8
 8005312:	e62a      	b.n	8004f6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x36>
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8005314:	2107      	movs	r1, #7
 8005316:	e67e      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>
 8005318:	2108      	movs	r1, #8
 800531a:	e67c      	b.n	8005016 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xe2>

0800531c <LSM6DSOX_ACC_SetOutputDataRate>:
  return LSM6DSOX_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_ACC_HIGH_PERFORMANCE_MODE);
 800531c:	2100      	movs	r1, #0
 800531e:	f7ff be09 	b.w	8004f34 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>
 8005322:	bf00      	nop

08005324 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>:
{
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	ed2d 8b02 	vpush	{d8}
 800532a:	4604      	mov	r4, r0
 800532c:	b082      	sub	sp, #8
 800532e:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 8005332:	2900      	cmp	r1, #0
 8005334:	f000 80ba 	beq.w	80054ac <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x188>
 8005338:	2901      	cmp	r1, #1
 800533a:	460d      	mov	r5, r1
 800533c:	d118      	bne.n	8005370 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x4c>
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800533e:	f100 0620 	add.w	r6, r0, #32
 8005342:	460b      	mov	r3, r1
 8005344:	aa01      	add	r2, sp, #4
 8005346:	2116      	movs	r1, #22
 8005348:	4630      	mov	r0, r6
 800534a:	f000 f91f 	bl	800558c <lsm6dsox_read_reg>
 800534e:	2800      	cmp	r0, #0
 8005350:	f040 80c9 	bne.w	80054e6 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1c2>
      if (!val1.g_hm_mode)
 8005354:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f280 80c9 	bge.w	80054f0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1cc>
      if (Odr > 208.0f)
 800535e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8005544 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x220>
        Odr = 208.0f;
 8005362:	eeb4 8a67 	vcmp.f32	s16, s15
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	bfc8      	it	gt
 800536c:	eeb0 8a67 	vmovgt.f32	s16, s15
  if (pObj->gyro_is_enabled == 1U)
 8005370:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005374:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 8005378:	2901      	cmp	r1, #1
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 800537a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (pObj->gyro_is_enabled == 1U)
 800537e:	d04c      	beq.n	800541a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xf6>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005384:	d807      	bhi.n	8005396 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x72>
 8005386:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8005388:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800538c:	2000      	movs	r0, #0
}
 800538e:	b002      	add	sp, #8
 8005390:	ecbd 8b02 	vpop	{d8}
 8005394:	bd70      	pop	{r4, r5, r6, pc}
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005396:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800539a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a2:	f240 80a3 	bls.w	80054ec <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1c8>
 80053a6:	eddf 7a68 	vldr	s15, [pc, #416]	; 8005548 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x224>
 80053aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b2:	f240 80af 	bls.w	8005514 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1f0>
 80053b6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800554c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x228>
 80053ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c2:	f240 80ab 	bls.w	800551c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1f8>
 80053c6:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8005544 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x220>
 80053ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	f240 80a7 	bls.w	8005524 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x200>
 80053d6:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8005550 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x22c>
 80053da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	f240 80a3 	bls.w	800552c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x208>
 80053e6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005554 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x230>
 80053ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f2:	f240 809f 	bls.w	8005534 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x210>
 80053f6:	eddf 7a58 	vldr	s15, [pc, #352]	; 8005558 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x234>
 80053fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	f240 8099 	bls.w	8005538 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x214>
 8005406:	eddf 7a55 	vldr	s15, [pc, #340]	; 800555c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x238>
 800540a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	bf94      	ite	ls
 8005414:	2309      	movls	r3, #9
 8005416:	230a      	movhi	r3, #10
 8005418:	e7b6      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d939      	bls.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
 8005420:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8005424:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	d970      	bls.n	8005510 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1ec>
 800542e:	eddf 7a46 	vldr	s15, [pc, #280]	; 8005548 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x224>
 8005432:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d96d      	bls.n	8005518 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1f4>
 800543c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800554c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x228>
 8005440:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005448:	d96a      	bls.n	8005520 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1fc>
 800544a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8005544 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x220>
 800544e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	d967      	bls.n	8005528 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x204>
 8005458:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8005550 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x22c>
 800545c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005464:	d964      	bls.n	8005530 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x20c>
 8005466:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8005554 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x230>
 800546a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005472:	d963      	bls.n	800553c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x218>
 8005474:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005558 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x234>
 8005478:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005480:	d95e      	bls.n	8005540 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x21c>
 8005482:	eddf 7a36 	vldr	s15, [pc, #216]	; 800555c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x238>
 8005486:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	bf94      	ite	ls
 8005490:	2109      	movls	r1, #9
 8005492:	210a      	movhi	r1, #10
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8005494:	f104 0020 	add.w	r0, r4, #32
 8005498:	f000 fcfa 	bl	8005e90 <lsm6dsox_gy_data_rate_set>
 800549c:	3800      	subs	r0, #0
 800549e:	bf18      	it	ne
 80054a0:	2001      	movne	r0, #1
 80054a2:	4240      	negs	r0, r0
}
 80054a4:	b002      	add	sp, #8
 80054a6:	ecbd 8b02 	vpop	{d8}
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80054ac:	f100 0520 	add.w	r5, r0, #32
 80054b0:	2301      	movs	r3, #1
 80054b2:	aa01      	add	r2, sp, #4
 80054b4:	2116      	movs	r1, #22
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f868 	bl	800558c <lsm6dsox_read_reg>
 80054bc:	b998      	cbnz	r0, 80054e6 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1c2>
      if (val1.g_hm_mode)
 80054be:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f6bf af54 	bge.w	8005370 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x4c>
        val1.g_hm_mode = 0;
 80054c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054cc:	f360 11c7 	bfi	r1, r0, #7, #1
 80054d0:	f88d 1004 	strb.w	r1, [sp, #4]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80054d4:	aa01      	add	r2, sp, #4
 80054d6:	2301      	movs	r3, #1
 80054d8:	4628      	mov	r0, r5
 80054da:	2116      	movs	r1, #22
 80054dc:	f000 f85e 	bl	800559c <lsm6dsox_write_reg>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	f43f af45 	beq.w	8005370 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x4c>
        return LSM6DSOX_ERROR;
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ea:	e750      	b.n	800538e <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x6a>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 80054ec:	2302      	movs	r3, #2
 80054ee:	e74b      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
        val1.g_hm_mode = 1U;
 80054f0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80054f8:	f88d 1004 	strb.w	r1, [sp, #4]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80054fc:	462b      	mov	r3, r5
 80054fe:	aa01      	add	r2, sp, #4
 8005500:	4630      	mov	r0, r6
 8005502:	2116      	movs	r1, #22
 8005504:	f000 f84a 	bl	800559c <lsm6dsox_write_reg>
 8005508:	2800      	cmp	r0, #0
 800550a:	f43f af28 	beq.w	800535e <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x3a>
 800550e:	e7ea      	b.n	80054e6 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1c2>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005510:	2102      	movs	r1, #2
 8005512:	e7bf      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005514:	2303      	movs	r3, #3
 8005516:	e737      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005518:	2103      	movs	r1, #3
 800551a:	e7bb      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 800551c:	2304      	movs	r3, #4
 800551e:	e733      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005520:	2104      	movs	r1, #4
 8005522:	e7b7      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005524:	2305      	movs	r3, #5
 8005526:	e72f      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005528:	2105      	movs	r1, #5
 800552a:	e7b3      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 800552c:	2306      	movs	r3, #6
 800552e:	e72b      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005530:	2106      	movs	r1, #6
 8005532:	e7af      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8005534:	2307      	movs	r3, #7
 8005536:	e727      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
 8005538:	2308      	movs	r3, #8
 800553a:	e725      	b.n	8005388 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x64>
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 800553c:	2107      	movs	r1, #7
 800553e:	e7a9      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
 8005540:	2108      	movs	r1, #8
 8005542:	e7a7      	b.n	8005494 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x170>
 8005544:	43500000 	.word	0x43500000
 8005548:	42500000 	.word	0x42500000
 800554c:	42d00000 	.word	0x42d00000
 8005550:	43d08000 	.word	0x43d08000
 8005554:	44504000 	.word	0x44504000
 8005558:	44d06000 	.word	0x44d06000
 800555c:	45505000 	.word	0x45505000

08005560 <LSM6DSOX_GYRO_SetOutputDataRate>:
  return LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE);
 8005560:	2100      	movs	r1, #0
 8005562:	f7ff bedf 	b.w	8005324 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>
 8005566:	bf00      	nop

08005568 <LSM6DSOX_Write_Reg>:
{
 8005568:	b500      	push	{lr}
 800556a:	b083      	sub	sp, #12
 800556c:	4694      	mov	ip, r2
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 800556e:	2301      	movs	r3, #1
 8005570:	f10d 0207 	add.w	r2, sp, #7
 8005574:	3020      	adds	r0, #32
{
 8005576:	f88d c007 	strb.w	ip, [sp, #7]
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 800557a:	f000 f80f 	bl	800559c <lsm6dsox_write_reg>
 800557e:	3800      	subs	r0, #0
 8005580:	bf18      	it	ne
 8005582:	2001      	movne	r0, #1
}
 8005584:	4240      	negs	r0, r0
 8005586:	b003      	add	sp, #12
 8005588:	f85d fb04 	ldr.w	pc, [sp], #4

0800558c <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800558c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800558e:	6844      	ldr	r4, [r0, #4]
 8005590:	68c0      	ldr	r0, [r0, #12]
 8005592:	46a4      	mov	ip, r4

  return ret;
}
 8005594:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005598:	4760      	bx	ip
 800559a:	bf00      	nop

0800559c <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800559c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800559e:	6804      	ldr	r4, [r0, #0]
 80055a0:	68c0      	ldr	r0, [r0, #12]
 80055a2:	46a4      	mov	ip, r4

  return ret;
}
 80055a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055a8:	4760      	bx	ip
 80055aa:	bf00      	nop

080055ac <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4604      	mov	r4, r0
 80055b0:	b082      	sub	sp, #8
 80055b2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055b4:	68c0      	ldr	r0, [r0, #12]
 80055b6:	6866      	ldr	r6, [r4, #4]
 80055b8:	2301      	movs	r3, #1
 80055ba:	aa01      	add	r2, sp, #4
 80055bc:	2110      	movs	r1, #16
 80055be:	47b0      	blx	r6
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);

  if (ret == 0)
 80055c0:	b958      	cbnz	r0, 80055da <lsm6dsox_xl_full_scale_set+0x2e>
  {
    reg.fs_xl = (uint8_t) val;
 80055c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055c6:	6826      	ldr	r6, [r4, #0]
 80055c8:	68e0      	ldr	r0, [r4, #12]
    reg.fs_xl = (uint8_t) val;
 80055ca:	f365 0383 	bfi	r3, r5, #2, #2
 80055ce:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055d2:	aa01      	add	r2, sp, #4
 80055d4:	2301      	movs	r3, #1
 80055d6:	2110      	movs	r1, #16
 80055d8:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80055da:	b002      	add	sp, #8
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	bf00      	nop

080055e0 <lsm6dsox_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t *val)
{
 80055e0:	b530      	push	{r4, r5, lr}
 80055e2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055e4:	6845      	ldr	r5, [r0, #4]
 80055e6:	68c0      	ldr	r0, [r0, #12]
 80055e8:	2301      	movs	r3, #1
 80055ea:	aa01      	add	r2, sp, #4
{
 80055ec:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055ee:	2110      	movs	r1, #16
 80055f0:	47a8      	blx	r5
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);

  switch (reg.fs_xl)
 80055f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d006      	beq.n	800560c <lsm6dsox_xl_full_scale_get+0x2c>
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d004      	beq.n	800560c <lsm6dsox_xl_full_scale_get+0x2c>
 8005602:	f1a3 0301 	sub.w	r3, r3, #1
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	095b      	lsrs	r3, r3, #5
  {
    case LSM6DSOX_2g:
      *val = LSM6DSOX_2g;
 800560c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSOX_2g;
      break;
  }

  return ret;
}
 800560e:	b003      	add	sp, #12
 8005610:	bd30      	pop	{r4, r5, pc}
 8005612:	bf00      	nop

08005614 <lsm6dsox_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t *val)
{
 8005614:	b530      	push	{r4, r5, lr}
 8005616:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005618:	6845      	ldr	r5, [r0, #4]
 800561a:	68c0      	ldr	r0, [r0, #12]
 800561c:	2301      	movs	r3, #1
 800561e:	aa01      	add	r2, sp, #4
{
 8005620:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005622:	2110      	movs	r1, #16
 8005624:	47a8      	blx	r5
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);

  switch (reg.odr_xl)
 8005626:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	3b01      	subs	r3, #1
 800562e:	2b0a      	cmp	r3, #10
 8005630:	d81f      	bhi.n	8005672 <lsm6dsox_xl_data_rate_get+0x5e>
 8005632:	e8df f003 	tbb	[pc, r3]
 8005636:	0a06      	.short	0x0a06
 8005638:	12100e0c 	.word	0x12100e0c
 800563c:	1a181614 	.word	0x1a181614
 8005640:	1c          	.byte	0x1c
 8005641:	00          	.byte	0x00
 8005642:	2301      	movs	r3, #1
  {
    case LSM6DSOX_XL_ODR_OFF:
      *val = LSM6DSOX_XL_ODR_OFF;
 8005644:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSOX_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8005646:	b003      	add	sp, #12
 8005648:	bd30      	pop	{r4, r5, pc}
      break;
 800564a:	2302      	movs	r3, #2
 800564c:	e7fa      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 800564e:	2303      	movs	r3, #3
 8005650:	e7f8      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 8005652:	2304      	movs	r3, #4
 8005654:	e7f6      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 8005656:	2305      	movs	r3, #5
 8005658:	e7f4      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 800565a:	2306      	movs	r3, #6
 800565c:	e7f2      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 800565e:	2307      	movs	r3, #7
 8005660:	e7f0      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 8005662:	2308      	movs	r3, #8
 8005664:	e7ee      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 8005666:	2309      	movs	r3, #9
 8005668:	e7ec      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 800566a:	230a      	movs	r3, #10
 800566c:	e7ea      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
      break;
 800566e:	230b      	movs	r3, #11
 8005670:	e7e8      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
  switch (reg.odr_xl)
 8005672:	2300      	movs	r3, #0
 8005674:	e7e6      	b.n	8005644 <lsm6dsox_xl_data_rate_get+0x30>
 8005676:	bf00      	nop

08005678 <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	b082      	sub	sp, #8
 800567e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005680:	68c0      	ldr	r0, [r0, #12]
 8005682:	6866      	ldr	r6, [r4, #4]
 8005684:	2301      	movs	r3, #1
 8005686:	aa01      	add	r2, sp, #4
 8005688:	2111      	movs	r1, #17
 800568a:	47b0      	blx	r6
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);

  if (ret == 0)
 800568c:	b958      	cbnz	r0, 80056a6 <lsm6dsox_gy_full_scale_set+0x2e>
  {
    reg.fs_g = (uint8_t) val;
 800568e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005692:	6826      	ldr	r6, [r4, #0]
 8005694:	68e0      	ldr	r0, [r4, #12]
    reg.fs_g = (uint8_t) val;
 8005696:	f365 0343 	bfi	r3, r5, #1, #3
 800569a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800569e:	aa01      	add	r2, sp, #4
 80056a0:	2301      	movs	r3, #1
 80056a2:	2111      	movs	r1, #17
 80056a4:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80056a6:	b002      	add	sp, #8
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
 80056aa:	bf00      	nop

080056ac <lsm6dsox_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t *val)
{
 80056ac:	b530      	push	{r4, r5, lr}
 80056ae:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056b0:	6845      	ldr	r5, [r0, #4]
 80056b2:	68c0      	ldr	r0, [r0, #12]
 80056b4:	2301      	movs	r3, #1
 80056b6:	aa01      	add	r2, sp, #4
{
 80056b8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056ba:	2111      	movs	r1, #17
 80056bc:	47a8      	blx	r5
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);

  switch (reg.fs_g)
 80056be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056c2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d804      	bhi.n	80056d6 <lsm6dsox_gy_full_scale_get+0x2a>
 80056cc:	e8df f003 	tbb	[pc, r3]
 80056d0:	0f030b07 	.word	0x0f030b07
 80056d4:	1303      	.short	0x1303
 80056d6:	2300      	movs	r3, #0
  {
    case LSM6DSOX_250dps:
      *val = LSM6DSOX_250dps;
 80056d8:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSOX_250dps;
      break;
  }

  return ret;
}
 80056da:	b003      	add	sp, #12
 80056dc:	bd30      	pop	{r4, r5, pc}
  switch (reg.fs_g)
 80056de:	2301      	movs	r3, #1
      *val = LSM6DSOX_250dps;
 80056e0:	7023      	strb	r3, [r4, #0]
}
 80056e2:	b003      	add	sp, #12
 80056e4:	bd30      	pop	{r4, r5, pc}
      break;
 80056e6:	2302      	movs	r3, #2
      *val = LSM6DSOX_250dps;
 80056e8:	7023      	strb	r3, [r4, #0]
}
 80056ea:	b003      	add	sp, #12
 80056ec:	bd30      	pop	{r4, r5, pc}
      break;
 80056ee:	2304      	movs	r3, #4
      *val = LSM6DSOX_250dps;
 80056f0:	7023      	strb	r3, [r4, #0]
}
 80056f2:	b003      	add	sp, #12
 80056f4:	bd30      	pop	{r4, r5, pc}
      break;
 80056f6:	2306      	movs	r3, #6
      *val = LSM6DSOX_250dps;
 80056f8:	7023      	strb	r3, [r4, #0]
}
 80056fa:	b003      	add	sp, #12
 80056fc:	bd30      	pop	{r4, r5, pc}
 80056fe:	bf00      	nop

08005700 <lsm6dsox_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t *val)
{
 8005700:	b530      	push	{r4, r5, lr}
 8005702:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005704:	6845      	ldr	r5, [r0, #4]
 8005706:	68c0      	ldr	r0, [r0, #12]
 8005708:	2301      	movs	r3, #1
 800570a:	aa01      	add	r2, sp, #4
{
 800570c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800570e:	2111      	movs	r1, #17
 8005710:	47a8      	blx	r5
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);

  switch (reg.odr_g)
 8005712:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	3b01      	subs	r3, #1
 800571a:	2b09      	cmp	r3, #9
 800571c:	d81c      	bhi.n	8005758 <lsm6dsox_gy_data_rate_get+0x58>
 800571e:	e8df f003 	tbb	[pc, r3]
 8005722:	0905      	.short	0x0905
 8005724:	110f0d0b 	.word	0x110f0d0b
 8005728:	19171513 	.word	0x19171513
 800572c:	2301      	movs	r3, #1
  {
    case LSM6DSOX_GY_ODR_OFF:
      *val = LSM6DSOX_GY_ODR_OFF;
 800572e:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSOX_GY_ODR_OFF;
      break;
  }

  return ret;
}
 8005730:	b003      	add	sp, #12
 8005732:	bd30      	pop	{r4, r5, pc}
      break;
 8005734:	2302      	movs	r3, #2
 8005736:	e7fa      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 8005738:	2303      	movs	r3, #3
 800573a:	e7f8      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 800573c:	2304      	movs	r3, #4
 800573e:	e7f6      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 8005740:	2305      	movs	r3, #5
 8005742:	e7f4      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 8005744:	2306      	movs	r3, #6
 8005746:	e7f2      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 8005748:	2307      	movs	r3, #7
 800574a:	e7f0      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 800574c:	2308      	movs	r3, #8
 800574e:	e7ee      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 8005750:	2309      	movs	r3, #9
 8005752:	e7ec      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
      break;
 8005754:	230a      	movs	r3, #10
 8005756:	e7ea      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>
  switch (reg.odr_g)
 8005758:	2300      	movs	r3, #0
 800575a:	e7e8      	b.n	800572e <lsm6dsox_gy_data_rate_get+0x2e>

0800575c <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4604      	mov	r4, r0
 8005760:	b082      	sub	sp, #8
 8005762:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005764:	68c0      	ldr	r0, [r0, #12]
 8005766:	6866      	ldr	r6, [r4, #4]
 8005768:	2301      	movs	r3, #1
 800576a:	aa01      	add	r2, sp, #4
 800576c:	2112      	movs	r1, #18
 800576e:	47b0      	blx	r6
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);

  if (ret == 0)
 8005770:	b958      	cbnz	r0, 800578a <lsm6dsox_block_data_update_set+0x2e>
  {
    reg.bdu = val;
 8005772:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005776:	6826      	ldr	r6, [r4, #0]
 8005778:	68e0      	ldr	r0, [r4, #12]
    reg.bdu = val;
 800577a:	f365 1386 	bfi	r3, r5, #6, #1
 800577e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005782:	aa01      	add	r2, sp, #4
 8005784:	2301      	movs	r3, #1
 8005786:	2112      	movs	r1, #18
 8005788:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800578a:	b002      	add	sp, #8
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	bf00      	nop

08005790 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005790:	b530      	push	{r4, r5, lr}
 8005792:	b083      	sub	sp, #12
 8005794:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005796:	6845      	ldr	r5, [r0, #4]
 8005798:	68c0      	ldr	r0, [r0, #12]
 800579a:	466a      	mov	r2, sp
 800579c:	2306      	movs	r3, #6
 800579e:	2122      	movs	r1, #34	; 0x22
 80057a0:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80057a6:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057aa:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80057b2:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80057b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80057c0:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80057c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80057ca:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80057cc:	b003      	add	sp, #12
 80057ce:	bd30      	pop	{r4, r5, pc}

080057d0 <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80057d0:	b530      	push	{r4, r5, lr}
 80057d2:	b083      	sub	sp, #12
 80057d4:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057d6:	6845      	ldr	r5, [r0, #4]
 80057d8:	68c0      	ldr	r0, [r0, #12]
 80057da:	466a      	mov	r2, sp
 80057dc:	2306      	movs	r3, #6
 80057de:	2128      	movs	r1, #40	; 0x28
 80057e0:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80057e6:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057ea:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80057f2:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80057f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057fc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8005800:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005802:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005806:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800580a:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 800580c:	b003      	add	sp, #12
 800580e:	bd30      	pop	{r4, r5, pc}

08005810 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4604      	mov	r4, r0
 8005814:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005816:	2301      	movs	r3, #1
{
 8005818:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800581a:	68c0      	ldr	r0, [r0, #12]
 800581c:	6866      	ldr	r6, [r4, #4]
 800581e:	aa01      	add	r2, sp, #4
 8005820:	4619      	mov	r1, r3
 8005822:	47b0      	blx	r6
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 8005824:	b958      	cbnz	r0, 800583e <lsm6dsox_mem_bank_set+0x2e>
  {
    reg.reg_access = (uint8_t)val;
 8005826:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800582a:	68e0      	ldr	r0, [r4, #12]
    reg.reg_access = (uint8_t)val;
 800582c:	f365 1287 	bfi	r2, r5, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005830:	2301      	movs	r3, #1
 8005832:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8005834:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005838:	4619      	mov	r1, r3
 800583a:	aa01      	add	r2, sp, #4
 800583c:	47a8      	blx	r5
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
                             (uint8_t *)&reg, 1);
  }

  return ret;
}
 800583e:	b002      	add	sp, #8
 8005840:	bd70      	pop	{r4, r5, r6, pc}
 8005842:	bf00      	nop

08005844 <lsm6dsox_mlc_out_get>:
{
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	460d      	mov	r5, r1
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8005848:	2102      	movs	r1, #2
{
 800584a:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800584c:	f7ff ffe0 	bl	8005810 <lsm6dsox_mem_bank_set>
  if (ret == 0)
 8005850:	b960      	cbnz	r0, 800586c <lsm6dsox_mlc_out_get+0x28>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005852:	462a      	mov	r2, r5
 8005854:	68e0      	ldr	r0, [r4, #12]
 8005856:	6865      	ldr	r5, [r4, #4]
 8005858:	2308      	movs	r3, #8
 800585a:	2170      	movs	r1, #112	; 0x70
 800585c:	47a8      	blx	r5
  if (ret == 0)
 800585e:	b928      	cbnz	r0, 800586c <lsm6dsox_mlc_out_get+0x28>
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005860:	4601      	mov	r1, r0
 8005862:	4620      	mov	r0, r4
}
 8005864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005868:	f7ff bfd2 	b.w	8005810 <lsm6dsox_mem_bank_set>
}
 800586c:	bd38      	pop	{r3, r4, r5, pc}
 800586e:	bf00      	nop

08005870 <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005870:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005872:	6844      	ldr	r4, [r0, #4]
 8005874:	68c0      	ldr	r0, [r0, #12]
{
 8005876:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005878:	46a4      	mov	ip, r4
 800587a:	2301      	movs	r3, #1
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);

  return ret;
}
 800587c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005880:	210f      	movs	r1, #15
 8005882:	4760      	bx	ip

08005884 <lsm6dsox_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4604      	mov	r4, r0
 8005888:	b082      	sub	sp, #8
 800588a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800588c:	68c0      	ldr	r0, [r0, #12]
 800588e:	6866      	ldr	r6, [r4, #4]
 8005890:	2301      	movs	r3, #1
 8005892:	aa01      	add	r2, sp, #4
 8005894:	2112      	movs	r1, #18
 8005896:	47b0      	blx	r6
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);

  if (ret == 0)
 8005898:	b958      	cbnz	r0, 80058b2 <lsm6dsox_auto_increment_set+0x2e>
  {
    reg.if_inc = val;
 800589a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800589e:	6826      	ldr	r6, [r4, #0]
 80058a0:	68e0      	ldr	r0, [r4, #12]
    reg.if_inc = val;
 80058a2:	f365 0382 	bfi	r3, r5, #2, #1
 80058a6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058aa:	aa01      	add	r2, sp, #4
 80058ac:	2301      	movs	r3, #1
 80058ae:	2112      	movs	r1, #18
 80058b0:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80058b2:	b002      	add	sp, #8
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	bf00      	nop

080058b8 <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	b082      	sub	sp, #8
 80058be:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058c0:	68c0      	ldr	r0, [r0, #12]
 80058c2:	6866      	ldr	r6, [r4, #4]
 80058c4:	2301      	movs	r3, #1
 80058c6:	aa01      	add	r2, sp, #4
 80058c8:	2118      	movs	r1, #24
 80058ca:	47b0      	blx	r6
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 80058cc:	bb00      	cbnz	r0, 8005910 <lsm6dsox_i3c_disable_set+0x58>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80058ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058d2:	6826      	ldr	r6, [r4, #0]
 80058d4:	68e0      	ldr	r0, [r4, #12]
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80058d6:	09ea      	lsrs	r2, r5, #7
 80058d8:	f362 0341 	bfi	r3, r2, #1, #1
 80058dc:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058e0:	aa01      	add	r2, sp, #4
 80058e2:	2301      	movs	r3, #1
 80058e4:	2118      	movs	r1, #24
 80058e6:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80058e8:	b990      	cbnz	r0, 8005910 <lsm6dsox_i3c_disable_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058ea:	6866      	ldr	r6, [r4, #4]
 80058ec:	68e0      	ldr	r0, [r4, #12]
 80058ee:	2301      	movs	r3, #1
 80058f0:	466a      	mov	r2, sp
 80058f2:	2162      	movs	r1, #98	; 0x62
 80058f4:	47b0      	blx	r6
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80058f6:	b958      	cbnz	r0, 8005910 <lsm6dsox_i3c_disable_set+0x58>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80058f8:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058fc:	6826      	ldr	r6, [r4, #0]
 80058fe:	68e0      	ldr	r0, [r4, #12]
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005900:	f365 03c4 	bfi	r3, r5, #3, #2
 8005904:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005908:	466a      	mov	r2, sp
 800590a:	2301      	movs	r3, #1
 800590c:	2162      	movs	r1, #98	; 0x62
 800590e:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 8005910:	b002      	add	sp, #8
 8005912:	bd70      	pop	{r4, r5, r6, pc}

08005914 <lsm6dsox_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fifo_mode_set(stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4604      	mov	r4, r0
 8005918:	b082      	sub	sp, #8
 800591a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800591c:	68c0      	ldr	r0, [r0, #12]
 800591e:	6866      	ldr	r6, [r4, #4]
 8005920:	2301      	movs	r3, #1
 8005922:	aa01      	add	r2, sp, #4
 8005924:	210a      	movs	r1, #10
 8005926:	47b0      	blx	r6
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);

  if (ret == 0)
 8005928:	b958      	cbnz	r0, 8005942 <lsm6dsox_fifo_mode_set+0x2e>
  {
    reg.fifo_mode = (uint8_t)val;
 800592a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800592e:	6826      	ldr	r6, [r4, #0]
 8005930:	68e0      	ldr	r0, [r4, #12]
    reg.fifo_mode = (uint8_t)val;
 8005932:	f365 0302 	bfi	r3, r5, #0, #3
 8005936:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800593a:	aa01      	add	r2, sp, #4
 800593c:	2301      	movs	r3, #1
 800593e:	210a      	movs	r1, #10
 8005940:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005942:	b002      	add	sp, #8
 8005944:	bd70      	pop	{r4, r5, r6, pc}
 8005946:	bf00      	nop

08005948 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800594c:	2102      	movs	r1, #2
{
 800594e:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8005950:	f7ff ff5e 	bl	8005810 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 8005954:	b960      	cbnz	r0, 8005970 <lsm6dsox_fsm_enable_get+0x28>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005956:	462a      	mov	r2, r5
 8005958:	68e0      	ldr	r0, [r4, #12]
 800595a:	6865      	ldr	r5, [r4, #4]
 800595c:	2302      	movs	r3, #2
 800595e:	2146      	movs	r1, #70	; 0x46
 8005960:	47a8      	blx	r5
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
                            2);
  }

  if (ret == 0)
 8005962:	b928      	cbnz	r0, 8005970 <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005964:	4601      	mov	r1, r0
 8005966:	4620      	mov	r0, r4
  }

  return ret;
}
 8005968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800596c:	f7ff bf50 	b.w	8005810 <lsm6dsox_mem_bank_set>
}
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	bf00      	nop

08005974 <lsm6dsox_fsm_out_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_out_get(stmdev_ctx_t *ctx,
                             lsm6dsox_fsm_out_t *val)
{
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8005978:	2102      	movs	r1, #2
{
 800597a:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800597c:	f7ff ff48 	bl	8005810 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 8005980:	b960      	cbnz	r0, 800599c <lsm6dsox_fsm_out_get+0x28>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005982:	462a      	mov	r2, r5
 8005984:	68e0      	ldr	r0, [r4, #12]
 8005986:	6865      	ldr	r5, [r4, #4]
 8005988:	2310      	movs	r3, #16
 800598a:	214c      	movs	r1, #76	; 0x4c
 800598c:	47a8      	blx	r5
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_OUTS1, (uint8_t *)val, 16);
  }

  if (ret == 0)
 800598e:	b928      	cbnz	r0, 800599c <lsm6dsox_fsm_out_get+0x28>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005990:	4601      	mov	r1, r0
 8005992:	4620      	mov	r0, r4
  }

  return ret;
}
 8005994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005998:	f7ff bf3a 	b.w	8005810 <lsm6dsox_mem_bank_set>
}
 800599c:	bd38      	pop	{r3, r4, r5, pc}
 800599e:	bf00      	nop

080059a0 <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	460d      	mov	r5, r1
 80059a4:	b082      	sub	sp, #8
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80059a6:	2102      	movs	r1, #2
{
 80059a8:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80059aa:	f7ff ff31 	bl	8005810 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 80059ae:	b9c0      	cbnz	r0, 80059e2 <lsm6dsox_fsm_data_rate_get+0x42>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80059b0:	68e0      	ldr	r0, [r4, #12]
 80059b2:	6866      	ldr	r6, [r4, #4]
 80059b4:	2301      	movs	r3, #1
 80059b6:	aa01      	add	r2, sp, #4
 80059b8:	215f      	movs	r1, #95	; 0x5f
 80059ba:	47b0      	blx	r6
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80059bc:	b988      	cbnz	r0, 80059e2 <lsm6dsox_fsm_data_rate_get+0x42>
  {
    switch (reg.fsm_odr)
 80059be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d006      	beq.n	80059d8 <lsm6dsox_fsm_data_rate_get+0x38>
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d004      	beq.n	80059d8 <lsm6dsox_fsm_data_rate_get+0x38>
 80059ce:	f1a3 0301 	sub.w	r3, r3, #1
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	095b      	lsrs	r3, r3, #5
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 80059d8:	702b      	strb	r3, [r5, #0]
      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
        break;
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80059da:	2100      	movs	r1, #0
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff ff17 	bl	8005810 <lsm6dsox_mem_bank_set>
  }

  return ret;
}
 80059e2:	b002      	add	sp, #8
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	bf00      	nop

080059e8 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	460d      	mov	r5, r1
 80059ec:	b082      	sub	sp, #8
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80059ee:	2102      	movs	r1, #2
{
 80059f0:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80059f2:	f7ff ff0d 	bl	8005810 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 80059f6:	b9c0      	cbnz	r0, 8005a2a <lsm6dsox_mlc_data_rate_get+0x42>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80059f8:	68e0      	ldr	r0, [r4, #12]
 80059fa:	6866      	ldr	r6, [r4, #4]
 80059fc:	2301      	movs	r3, #1
 80059fe:	aa01      	add	r2, sp, #4
 8005a00:	2160      	movs	r1, #96	; 0x60
 8005a02:	47b0      	blx	r6
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005a04:	b988      	cbnz	r0, 8005a2a <lsm6dsox_mlc_data_rate_get+0x42>
  {
    switch (reg.mlc_odr)
 8005a06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a0a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d006      	beq.n	8005a20 <lsm6dsox_mlc_data_rate_get+0x38>
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d004      	beq.n	8005a20 <lsm6dsox_mlc_data_rate_get+0x38>
 8005a16:	f1a3 0301 	sub.w	r3, r3, #1
 8005a1a:	fab3 f383 	clz	r3, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8005a20:	702b      	strb	r3, [r5, #0]
      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
        break;
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005a22:	2100      	movs	r1, #0
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff fef3 	bl	8005810 <lsm6dsox_mem_bank_set>
  }

  return ret;
}
 8005a2a:	b002      	add	sp, #8
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	bf00      	nop

08005a30 <lsm6dsox_all_sources_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_all_sources_get(stmdev_ctx_t *ctx,
                                 lsm6dsox_all_sources_t *val)
{
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	b08d      	sub	sp, #52	; 0x34
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a36:	6846      	ldr	r6, [r0, #4]
{
 8005a38:	9102      	str	r1, [sp, #8]
 8005a3a:	4604      	mov	r4, r0
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	68c0      	ldr	r0, [r0, #12]
 8005a40:	aa08      	add	r2, sp, #32
 8005a42:	2114      	movs	r1, #20
 8005a44:	47b0      	blx	r6
  lsm6dsox_ctrl5_c_t                  ctrl5_c;
  uint8_t                             reg[12];
  int32_t                             ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);

  if (ret == 0)
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f040 813f 	bne.w	8005cca <lsm6dsox_all_sources_get+0x29a>
  {
    ctrl5_c.rounding_status = PROPERTY_ENABLE;
 8005a4c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a50:	6826      	ldr	r6, [r4, #0]
 8005a52:	68e0      	ldr	r0, [r4, #12]
    ctrl5_c.rounding_status = PROPERTY_ENABLE;
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	f88d 3020 	strb.w	r3, [sp, #32]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a5c:	aa08      	add	r2, sp, #32
 8005a5e:	2301      	movs	r3, #1
 8005a60:	2114      	movs	r1, #20
 8005a62:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  }

  if (ret == 0)
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f040 8130 	bne.w	8005cca <lsm6dsox_all_sources_get+0x29a>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a6a:	6866      	ldr	r6, [r4, #4]
 8005a6c:	68e0      	ldr	r0, [r4, #12]
 8005a6e:	230c      	movs	r3, #12
 8005a70:	aa09      	add	r2, sp, #36	; 0x24
 8005a72:	211a      	movs	r1, #26
 8005a74:	47b0      	blx	r6
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_ALL_INT_SRC, reg, 12);
  }

  if (ret == 0)
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f040 8127 	bne.w	8005cca <lsm6dsox_all_sources_get+0x29a>
    *target = *source;
 8005a7c:	f89d 6027 	ldrb.w	r6, [sp, #39]	; 0x27
 8005a80:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8005a84:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8005a88:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
 8005a8c:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
    val->sig_mot       = emb_func_status_mainpage.is_sigmot;
    val->fsm_lc        = emb_func_status_mainpage.is_fsm_lc;
    val->fsm1 = fsm_status_a_mainpage.is_fsm1;
    val->fsm2 = fsm_status_a_mainpage.is_fsm2;
    val->fsm3 = fsm_status_a_mainpage.is_fsm3;
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005a90:	9504      	str	r5, [sp, #16]
    val->six_d_xl = d6d_src.xl;
 8005a92:	f006 0c01 	and.w	ip, r6, #1
    val->six_d    = d6d_src.d6d_ia;
 8005a96:	f3c6 1380 	ubfx	r3, r6, #6, #1
    val->six_d_xh = d6d_src.xh;
 8005a9a:	f3c6 0e40 	ubfx	lr, r6, #1, #1
    val->six_d    = d6d_src.d6d_ia;
 8005a9e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    val->six_d_yl = d6d_src.yl;
 8005aa2:	f3c6 0880 	ubfx	r8, r6, #2, #1
    val->six_d    = d6d_src.d6d_ia;
 8005aa6:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
 8005aaa:	ea43 03c8 	orr.w	r3, r3, r8, lsl #3
    val->drdy_xl   = status_reg.xlda;
 8005aae:	f007 0707 	and.w	r7, r7, #7
 8005ab2:	ea4f 18d6 	mov.w	r8, r6, lsr #7
 8005ab6:	09c9      	lsrs	r1, r1, #7
 8005ab8:	ea47 07c8 	orr.w	r7, r7, r8, lsl #3
    *target = *source;
 8005abc:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
 8005ac0:	f89d e025 	ldrb.w	lr, [sp, #37]	; 0x25
 8005ac4:	f89d a02e 	ldrb.w	sl, [sp, #46]	; 0x2e
 8005ac8:	f89d 9029 	ldrb.w	r9, [sp, #41]	; 0x29
    val->drdy_xl   = status_reg.xlda;
 8005acc:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
    val->six_d_yh = d6d_src.yh;
 8005ad0:	f3c6 01c0 	ubfx	r1, r6, #3, #1
    val->six_d_zl = d6d_src.zl;
 8005ad4:	f3c6 1800 	ubfx	r8, r6, #4, #1
    val->six_d    = d6d_src.d6d_ia;
 8005ad8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005adc:	ea43 1348 	orr.w	r3, r3, r8, lsl #5
    val->fsm5 = fsm_status_a_mainpage.is_fsm5;
    val->fsm6 = fsm_status_a_mainpage.is_fsm6;
    val->fsm7 = fsm_status_a_mainpage.is_fsm7;
    val->fsm8 = fsm_status_a_mainpage.is_fsm8;
    val->fsm9  = fsm_status_b_mainpage.is_fsm9;
 8005ae0:	f00c 0101 	and.w	r1, ip, #1
    val->six_d_zh = d6d_src.zh;
 8005ae4:	f3c6 1640 	ubfx	r6, r6, #5, #1
    val->six_d    = d6d_src.d6d_ia;
 8005ae8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005aec:	0149      	lsls	r1, r1, #5
    *target = *source;
 8005aee:	f89d 602d 	ldrb.w	r6, [sp, #45]	; 0x2d
 8005af2:	9603      	str	r6, [sp, #12]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005af4:	ea41 01d5 	orr.w	r1, r1, r5, lsr #3
    val->fsm10 = fsm_status_b_mainpage.is_fsm10;
 8005af8:	f3cc 0640 	ubfx	r6, ip, #1, #1
    val->drdy_xl   = status_reg.xlda;
 8005afc:	f00e 0820 	and.w	r8, lr, #32
 8005b00:	ea47 0808 	orr.w	r8, r7, r8
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005b04:	ea41 1186 	orr.w	r1, r1, r6, lsl #6
    val->drdy_xl   = status_reg.xlda;
 8005b08:	f3ce 06c0 	ubfx	r6, lr, #3, #1
 8005b0c:	ea48 1886 	orr.w	r8, r8, r6, lsl #6
    val->fsm11 = fsm_status_b_mainpage.is_fsm11;
 8005b10:	f3cc 0680 	ubfx	r6, ip, #2, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005b14:	ea41 11c6 	orr.w	r1, r1, r6, lsl #7
    val->drdy_xl   = status_reg.xlda;
 8005b18:	f00e 0601 	and.w	r6, lr, #1
    *target = *source;
 8005b1c:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
 8005b20:	9501      	str	r5, [sp, #4]
    val->drdy_xl   = status_reg.xlda;
 8005b22:	ea48 18c6 	orr.w	r8, r8, r6, lsl #7
    val->six_d    = d6d_src.d6d_ia;
 8005b26:	f3ce 1680 	ubfx	r6, lr, #6, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
    val->mlc5 = mlc_status_mainpage.is_mlc5;
    val->mlc6 = mlc_status_mainpage.is_mlc6;
    val->mlc7 = mlc_status_mainpage.is_mlc7;
    val->mlc8 = mlc_status_mainpage.is_mlc8;
    val->sh_endop       = status_master_mainpage.sens_hub_endop;
 8005b2a:	9d03      	ldr	r5, [sp, #12]
    *target = *source;
 8005b2c:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
    val->six_d    = d6d_src.d6d_ia;
 8005b30:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
    *target = *source;
 8005b34:	465e      	mov	r6, fp
    val->sleep_state  = wake_up_src.sleep_state;
 8005b36:	f3ce 1b00 	ubfx	fp, lr, #4, #1
    val->six_d    = d6d_src.d6d_ia;
 8005b3a:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
    val->fsm12 = fsm_status_b_mainpage.is_fsm12;
 8005b3e:	f3cc 0bc0 	ubfx	fp, ip, #3, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005b42:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
    val->sh_endop       = status_master_mainpage.sens_hub_endop;
 8005b46:	f005 0b01 	and.w	fp, r5, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005b4a:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
 8005b4e:	ea4b 0bd6 	orr.w	fp, fp, r6, lsr #3
 8005b52:	f8cd b018 	str.w	fp, [sp, #24]
    val->sh_slave0_nack = status_master_mainpage.slave0_nack;
    val->sh_slave1_nack = status_master_mainpage.slave1_nack;
    val->sh_slave2_nack = status_master_mainpage.slave2_nack;
    val->sh_slave3_nack = status_master_mainpage.slave3_nack;
    val->sh_wr_once     = status_master_mainpage.wr_once_done;
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005b56:	f007 0b03 	and.w	fp, r7, #3
 8005b5a:	eb0a 2a0b 	add.w	sl, sl, fp, lsl #8
    val->drdy_xl   = status_reg.xlda;
 8005b5e:	f3ce 0b40 	ubfx	fp, lr, #1, #1
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005b62:	9d02      	ldr	r5, [sp, #8]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005b64:	9605      	str	r6, [sp, #20]
    val->drdy_xl   = status_reg.xlda;
 8005b66:	ea48 2b0b 	orr.w	fp, r8, fp, lsl #8
 8005b6a:	f3ce 0e80 	ubfx	lr, lr, #2, #1
 8005b6e:	ea4b 2e4e 	orr.w	lr, fp, lr, lsl #9
    val->step_detector = emb_func_status_mainpage.is_step_det;
 8005b72:	f3c9 08c0 	ubfx	r8, r9, #3, #1
    val->drdy_xl   = status_reg.xlda;
 8005b76:	4676      	mov	r6, lr
    val->six_d    = d6d_src.d6d_ia;
 8005b78:	ea43 2848 	orr.w	r8, r3, r8, lsl #9
    val->fsm13 = fsm_status_b_mainpage.is_fsm13;
 8005b7c:	f3cc 1e00 	ubfx	lr, ip, #4, #1
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005b80:	892b      	ldrh	r3, [r5, #8]
    val->sh_slave0_nack = status_master_mainpage.slave0_nack;
 8005b82:	9d03      	ldr	r5, [sp, #12]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005b84:	ea41 2e4e 	orr.w	lr, r1, lr, lsl #9
                     fifo_status1.diff_fifo;
    val->fifo_ovr_latched = fifo_status2.over_run_latched;
 8005b88:	f3c7 01c0 	ubfx	r1, r7, #3, #1
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005b8c:	ea4a 2181 	orr.w	r1, sl, r1, lsl #10
 8005b90:	f423 5a7f 	bic.w	sl, r3, #16320	; 0x3fc0
    val->tilt          = emb_func_status_mainpage.is_tilt;
 8005b94:	f3c9 1300 	ubfx	r3, r9, #4, #1
    val->six_d    = d6d_src.d6d_ia;
 8005b98:	ea48 2883 	orr.w	r8, r8, r3, lsl #10
    val->fsm14 = fsm_status_b_mainpage.is_fsm14;
 8005b9c:	f3cc 1340 	ubfx	r3, ip, #5, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005ba0:	ea4e 2e83 	orr.w	lr, lr, r3, lsl #10
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005ba4:	9b06      	ldr	r3, [sp, #24]
    val->sh_slave0_nack = status_master_mainpage.slave0_nack;
 8005ba6:	f3c5 0bc0 	ubfx	fp, r5, #3, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005baa:	ea43 1b8b 	orr.w	fp, r3, fp, lsl #6
    val->fifo_bdr         = fifo_status2.counter_bdr_ia;
 8005bae:	f3c7 1300 	ubfx	r3, r7, #4, #1
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005bb2:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
    val->drdy_xl   = status_reg.xlda;
 8005bb6:	9b01      	ldr	r3, [sp, #4]
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005bb8:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
 8005bbc:	f8cd a01c 	str.w	sl, [sp, #28]
    val->drdy_xl   = status_reg.xlda;
 8005bc0:	f3c3 1a40 	ubfx	sl, r3, #5, #1
    val->sig_mot       = emb_func_status_mainpage.is_sigmot;
 8005bc4:	f3c9 1340 	ubfx	r3, r9, #5, #1
    val->drdy_xl   = status_reg.xlda;
 8005bc8:	ea46 2a8a 	orr.w	sl, r6, sl, lsl #10
    val->six_d    = d6d_src.d6d_ia;
 8005bcc:	ea48 23c3 	orr.w	r3, r8, r3, lsl #11
    val->drdy_xl   = status_reg.xlda;
 8005bd0:	9e01      	ldr	r6, [sp, #4]
    val->fsm15 = fsm_status_b_mainpage.is_fsm15;
 8005bd2:	f3cc 1880 	ubfx	r8, ip, #6, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005bd6:	ea4e 28c8 	orr.w	r8, lr, r8, lsl #11
    val->fsm_lc        = emb_func_status_mainpage.is_fsm_lc;
 8005bda:	ea4f 19d9 	mov.w	r9, r9, lsr #7
    val->fifo_full        = fifo_status2.fifo_full_ia;
 8005bde:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    val->six_d    = d6d_src.d6d_ia;
 8005be2:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005be6:	ea41 310e 	orr.w	r1, r1, lr, lsl #12
    val->sh_slave1_nack = status_master_mainpage.slave1_nack;
 8005bea:	f3c5 1900 	ubfx	r9, r5, #4, #1
    val->drdy_xl   = status_reg.xlda;
 8005bee:	f3c6 1e00 	ubfx	lr, r6, #4, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005bf2:	ea4b 19c9 	orr.w	r9, fp, r9, lsl #7
    val->drdy_xl   = status_reg.xlda;
 8005bf6:	ea4a 2ace 	orr.w	sl, sl, lr, lsl #11
    val->sh_slave2_nack = status_master_mainpage.slave2_nack;
 8005bfa:	f3c5 1e40 	ubfx	lr, r5, #5, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005bfe:	ea49 2e0e 	orr.w	lr, r9, lr, lsl #8
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005c02:	9d07      	ldr	r5, [sp, #28]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c04:	9e02      	ldr	r6, [sp, #8]
    val->fifo_ovr         = fifo_status2.fifo_ovr_ia;
 8005c06:	f3c7 1980 	ubfx	r9, r7, #6, #1
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8005c0a:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
 8005c0e:	4329      	orrs	r1, r5
 8005c10:	8131      	strh	r1, [r6, #8]
    val->fifo_th          = fifo_status2.fifo_wtm_ia;
 8005c12:	09ff      	lsrs	r7, r7, #7
 8005c14:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8005c18:	f367 1186 	bfi	r1, r7, #6, #1
    val->fsm16 = fsm_status_b_mainpage.is_fsm16;
 8005c1c:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
    val->fsm1 = fsm_status_a_mainpage.is_fsm1;
 8005c20:	9f04      	ldr	r7, [sp, #16]
    val->fifo_th          = fifo_status2.fifo_wtm_ia;
 8005c22:	7271      	strb	r1, [r6, #9]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005c24:	ea48 3c0c 	orr.w	ip, r8, ip, lsl #12
    val->drdy_xl   = status_reg.xlda;
 8005c28:	9901      	ldr	r1, [sp, #4]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c2a:	f8b6 8006 	ldrh.w	r8, [r6, #6]
    val->mlc1 = mlc_status_mainpage.is_mlc1;
 8005c2e:	9e05      	ldr	r6, [sp, #20]
    val->sh_slave3_nack = status_master_mainpage.slave3_nack;
 8005c30:	9d03      	ldr	r5, [sp, #12]
    val->fsm1 = fsm_status_a_mainpage.is_fsm1;
 8005c32:	f007 0701 	and.w	r7, r7, #1
    val->six_d    = d6d_src.d6d_ia;
 8005c36:	ea43 3747 	orr.w	r7, r3, r7, lsl #13
    val->mlc1 = mlc_status_mainpage.is_mlc1;
 8005c3a:	f006 0301 	and.w	r3, r6, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005c3e:	ea4c 3c43 	orr.w	ip, ip, r3, lsl #13
    val->sh_slave3_nack = status_master_mainpage.slave3_nack;
 8005c42:	f3c5 1380 	ubfx	r3, r5, #6, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c46:	ea4e 2e43 	orr.w	lr, lr, r3, lsl #9
    val->sh_wr_once     = status_master_mainpage.wr_once_done;
 8005c4a:	09eb      	lsrs	r3, r5, #7
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c4c:	ea4e 2e83 	orr.w	lr, lr, r3, lsl #10
    val->drdy_xl   = status_reg.xlda;
 8005c50:	9b01      	ldr	r3, [sp, #4]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c52:	9d02      	ldr	r5, [sp, #8]
    val->drdy_xl   = status_reg.xlda;
 8005c54:	f001 0101 	and.w	r1, r1, #1
 8005c58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c5c:	ea4a 3101 	orr.w	r1, sl, r1, lsl #12
 8005c60:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    ctrl5_c.rounding_status = PROPERTY_DISABLE;
 8005c64:	f89d 3020 	ldrb.w	r3, [sp, #32]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c68:	f428 68ff 	bic.w	r8, r8, #2040	; 0x7f8
    ctrl5_c.rounding_status = PROPERTY_DISABLE;
 8005c6c:	f360 1304 	bfi	r3, r0, #4, #1
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c70:	f028 0807 	bic.w	r8, r8, #7
    val->fsm2 = fsm_status_a_mainpage.is_fsm2;
 8005c74:	9804      	ldr	r0, [sp, #16]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8005c76:	ea4e 0e08 	orr.w	lr, lr, r8
 8005c7a:	f8a5 e006 	strh.w	lr, [r5, #6]
    ctrl5_c.rounding_status = PROPERTY_DISABLE;
 8005c7e:	f88d 3020 	strb.w	r3, [sp, #32]
    val->fsm2 = fsm_status_a_mainpage.is_fsm2;
 8005c82:	f3c0 0340 	ubfx	r3, r0, #1, #1
    val->six_d    = d6d_src.d6d_ia;
 8005c86:	ea47 3783 	orr.w	r7, r7, r3, lsl #14
    val->fsm3 = fsm_status_a_mainpage.is_fsm3;
 8005c8a:	f3c0 0380 	ubfx	r3, r0, #2, #1
    val->six_d    = d6d_src.d6d_ia;
 8005c8e:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
    val->mlc2 = mlc_status_mainpage.is_mlc2;
 8005c92:	f3c6 0340 	ubfx	r3, r6, #1, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005c96:	ea4c 3c83 	orr.w	ip, ip, r3, lsl #14
    val->mlc3 = mlc_status_mainpage.is_mlc3;
 8005c9a:	f3c6 0380 	ubfx	r3, r6, #2, #1
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005c9e:	ea4c 3cc3 	orr.w	ip, ip, r3, lsl #15
    val->drdy_xl   = status_reg.xlda;
 8005ca2:	9b01      	ldr	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ca4:	68e0      	ldr	r0, [r4, #12]
    val->six_d    = d6d_src.d6d_ia;
 8005ca6:	806f      	strh	r7, [r5, #2]
    val->drdy_xl   = status_reg.xlda;
 8005ca8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005cac:	ea41 3383 	orr.w	r3, r1, r3, lsl #14
 8005cb0:	9901      	ldr	r1, [sp, #4]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8005cb2:	f8a5 c004 	strh.w	ip, [r5, #4]
    val->drdy_xl   = status_reg.xlda;
 8005cb6:	f3c1 06c0 	ubfx	r6, r1, #3, #1
 8005cba:	ea43 33c6 	orr.w	r3, r3, r6, lsl #15
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005cbe:	aa08      	add	r2, sp, #32
 8005cc0:	6826      	ldr	r6, [r4, #0]
    val->drdy_xl   = status_reg.xlda;
 8005cc2:	802b      	strh	r3, [r5, #0]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005cc4:	2114      	movs	r1, #20
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	47b0      	blx	r6
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  }

  return ret;
}
 8005cca:	b00d      	add	sp, #52	; 0x34
 8005ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005cd0 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	460d      	mov	r5, r1
 8005cd4:	b082      	sub	sp, #8
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8005cd6:	2102      	movs	r1, #2
{
 8005cd8:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8005cda:	f7ff fd99 	bl	8005810 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 8005cde:	bb80      	cbnz	r0, 8005d42 <lsm6dsox_embedded_sens_get+0x72>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ce0:	68e0      	ldr	r0, [r4, #12]
 8005ce2:	6866      	ldr	r6, [r4, #4]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	466a      	mov	r2, sp
 8005ce8:	2104      	movs	r1, #4
 8005cea:	47b0      	blx	r6
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8005cec:	bb48      	cbnz	r0, 8005d42 <lsm6dsox_embedded_sens_get+0x72>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005cee:	2301      	movs	r3, #1
 8005cf0:	aa01      	add	r2, sp, #4
 8005cf2:	2105      	movs	r1, #5
 8005cf4:	68e0      	ldr	r0, [r4, #12]
 8005cf6:	6866      	ldr	r6, [r4, #4]
 8005cf8:	47b0      	blx	r6
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
    emb_sens->fsm = emb_func_en_b.fsm_en;
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8005cfa:	f89d 1000 	ldrb.w	r1, [sp]
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8005cfe:	f89d 2004 	ldrb.w	r2, [sp, #4]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8005d02:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    emb_sens->step = emb_func_en_a.pedo_en;
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8005d06:	f3c1 1340 	ubfx	r3, r1, #5, #1
 8005d0a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    emb_sens->step = emb_func_en_a.pedo_en;
 8005d0e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8005d12:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8005d16:	f3c2 1100 	ubfx	r1, r2, #4, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8005d1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8005d1e:	f3c2 0c00 	ubfx	ip, r2, #0, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8005d22:	7829      	ldrb	r1, [r5, #0]
 8005d24:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8005d28:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8005d2c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005d30:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005d34:	430b      	orrs	r3, r1
 8005d36:	702b      	strb	r3, [r5, #0]
  }

  if (ret == 0)
 8005d38:	b918      	cbnz	r0, 8005d42 <lsm6dsox_embedded_sens_get+0x72>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7ff fd67 	bl	8005810 <lsm6dsox_mem_bank_set>
  }

  return ret;
}
 8005d42:	b002      	add	sp, #8
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	bf00      	nop

08005d48 <lsm6dsox_xl_data_rate_set>:
{
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	460d      	mov	r5, r1
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8005d4e:	a903      	add	r1, sp, #12
{
 8005d50:	4604      	mov	r4, r0
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8005d52:	f7ff fdf9 	bl	8005948 <lsm6dsox_fsm_enable_get>
  if (ret == 0)
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d166      	bne.n	8005e28 <lsm6dsox_xl_data_rate_set+0xe0>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d5a:	f89d 100c 	ldrb.w	r1, [sp, #12]
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d5e:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d62:	f3c1 0300 	ubfx	r3, r1, #0, #1
 8005d66:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d68:	f3c1 0280 	ubfx	r2, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d6c:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d6e:	f3c1 02c0 	ubfx	r2, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d72:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d74:	f3c1 1200 	ubfx	r2, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d78:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d7a:	f3c1 1240 	ubfx	r2, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d7e:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d80:	f3c1 1280 	ubfx	r2, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d84:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d86:	f89d 200d 	ldrb.w	r2, [sp, #13]
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d8a:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d8e:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d92:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005d94:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d98:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005d9a:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005d9e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005da0:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005da4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005da6:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005daa:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dac:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005db0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8005db2:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005db6:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8005db8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005dbc:	07da      	lsls	r2, r3, #31
 8005dbe:	d435      	bmi.n	8005e2c <lsm6dsox_xl_data_rate_set+0xe4>
        switch (fsm_odr)
 8005dc0:	462e      	mov	r6, r5
  emb_sens.mlc = PROPERTY_DISABLE;
 8005dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8005dc6:	a901      	add	r1, sp, #4
  emb_sens.mlc = PROPERTY_DISABLE;
 8005dc8:	f36f 03c3 	bfc	r3, #3, #1
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8005dcc:	4620      	mov	r0, r4
  emb_sens.mlc = PROPERTY_DISABLE;
 8005dce:	f88d 3004 	strb.w	r3, [sp, #4]
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8005dd2:	f7ff ff7d 	bl	8005cd0 <lsm6dsox_embedded_sens_get>
    if (emb_sens.mlc == PROPERTY_ENABLE)
 8005dd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005dda:	071b      	lsls	r3, r3, #28
 8005ddc:	d511      	bpl.n	8005e02 <lsm6dsox_xl_data_rate_set+0xba>
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8005dde:	f10d 010b 	add.w	r1, sp, #11
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff fe00 	bl	80059e8 <lsm6dsox_mlc_data_rate_get>
      if (ret == 0)
 8005de8:	b9f0      	cbnz	r0, 8005e28 <lsm6dsox_xl_data_rate_set+0xe0>
        switch (mlc_odr)
 8005dea:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d84b      	bhi.n	8005e8a <lsm6dsox_xl_data_rate_set+0x142>
 8005df2:	e8df f003 	tbb	[pc, r3]
 8005df6:	2f34      	.short	0x2f34
 8005df8:	2a02      	.short	0x2a02
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005dfa:	2d03      	cmp	r5, #3
 8005dfc:	bf38      	it	cc
 8005dfe:	2503      	movcc	r5, #3
 8005e00:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e02:	6865      	ldr	r5, [r4, #4]
 8005e04:	68e0      	ldr	r0, [r4, #12]
 8005e06:	2301      	movs	r3, #1
 8005e08:	aa02      	add	r2, sp, #8
 8005e0a:	2110      	movs	r1, #16
 8005e0c:	47a8      	blx	r5
  if (ret == 0)
 8005e0e:	b958      	cbnz	r0, 8005e28 <lsm6dsox_xl_data_rate_set+0xe0>
    reg.odr_xl = (uint8_t) odr_xl;
 8005e10:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e14:	6825      	ldr	r5, [r4, #0]
 8005e16:	68e0      	ldr	r0, [r4, #12]
    reg.odr_xl = (uint8_t) odr_xl;
 8005e18:	f366 1307 	bfi	r3, r6, #4, #4
 8005e1c:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e20:	aa02      	add	r2, sp, #8
 8005e22:	2301      	movs	r3, #1
 8005e24:	2110      	movs	r1, #16
 8005e26:	47a8      	blx	r5
}
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8005e2c:	f10d 010a 	add.w	r1, sp, #10
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff fdb5 	bl	80059a0 <lsm6dsox_fsm_data_rate_get>
      if (ret == 0)
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d1f6      	bne.n	8005e28 <lsm6dsox_xl_data_rate_set+0xe0>
        switch (fsm_odr)
 8005e3a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d8be      	bhi.n	8005dc0 <lsm6dsox_xl_data_rate_set+0x78>
 8005e42:	e8df f003 	tbb	[pc, r3]
 8005e46:	191d      	.short	0x191d
 8005e48:	1115      	.short	0x1115
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e4a:	2d04      	cmp	r5, #4
 8005e4c:	bf38      	it	cc
 8005e4e:	2504      	movcc	r5, #4
 8005e50:	462e      	mov	r6, r5
 8005e52:	e7d6      	b.n	8005e02 <lsm6dsox_xl_data_rate_set+0xba>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e54:	2d02      	cmp	r5, #2
 8005e56:	bf38      	it	cc
 8005e58:	2502      	movcc	r5, #2
 8005e5a:	462e      	mov	r6, r5
 8005e5c:	e7d1      	b.n	8005e02 <lsm6dsox_xl_data_rate_set+0xba>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e5e:	2d01      	cmp	r5, #1
 8005e60:	bf38      	it	cc
 8005e62:	2501      	movcc	r5, #1
 8005e64:	462e      	mov	r6, r5
  if (ret == 0)
 8005e66:	e7cc      	b.n	8005e02 <lsm6dsox_xl_data_rate_set+0xba>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e68:	2d03      	cmp	r5, #3
 8005e6a:	d8a9      	bhi.n	8005dc0 <lsm6dsox_xl_data_rate_set+0x78>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8005e6c:	2604      	movs	r6, #4
 8005e6e:	e7a8      	b.n	8005dc2 <lsm6dsox_xl_data_rate_set+0x7a>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e70:	2d02      	cmp	r5, #2
 8005e72:	d8a5      	bhi.n	8005dc0 <lsm6dsox_xl_data_rate_set+0x78>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8005e74:	2603      	movs	r6, #3
 8005e76:	e7a4      	b.n	8005dc2 <lsm6dsox_xl_data_rate_set+0x7a>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e78:	2d01      	cmp	r5, #1
 8005e7a:	d8a1      	bhi.n	8005dc0 <lsm6dsox_xl_data_rate_set+0x78>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8005e7c:	2602      	movs	r6, #2
 8005e7e:	e7a0      	b.n	8005dc2 <lsm6dsox_xl_data_rate_set+0x7a>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8005e80:	2d01      	cmp	r5, #1
 8005e82:	462e      	mov	r6, r5
 8005e84:	bf38      	it	cc
 8005e86:	2601      	movcc	r6, #1
  if (ret == 0)
 8005e88:	e79b      	b.n	8005dc2 <lsm6dsox_xl_data_rate_set+0x7a>
        switch (mlc_odr)
 8005e8a:	462e      	mov	r6, r5
 8005e8c:	e7b9      	b.n	8005e02 <lsm6dsox_xl_data_rate_set+0xba>
 8005e8e:	bf00      	nop

08005e90 <lsm6dsox_gy_data_rate_set>:
{
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	460d      	mov	r5, r1
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8005e96:	a903      	add	r1, sp, #12
{
 8005e98:	4604      	mov	r4, r0
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8005e9a:	f7ff fd55 	bl	8005948 <lsm6dsox_fsm_enable_get>
  if (ret == 0)
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d155      	bne.n	8005f4e <lsm6dsox_gy_data_rate_set+0xbe>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ea2:	f89d 100c 	ldrb.w	r1, [sp, #12]
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005ea6:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005eaa:	f3c1 0300 	ubfx	r3, r1, #0, #1
 8005eae:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005eb0:	f3c1 0280 	ubfx	r2, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005eb4:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005eb6:	f3c1 02c0 	ubfx	r2, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005eba:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ebc:	f3c1 1200 	ubfx	r2, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005ec0:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ec2:	f3c1 1240 	ubfx	r2, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ec6:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005ec8:	f3c1 1280 	ubfx	r2, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ecc:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ece:	f89d 200d 	ldrb.w	r2, [sp, #13]
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005ed2:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ed6:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005eda:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005edc:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ee0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005ee2:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005ee6:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005ee8:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005eec:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005eee:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005ef2:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005ef4:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005ef8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8005efa:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005efe:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8005f00:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f04:	07da      	lsls	r2, r3, #31
 8005f06:	d424      	bmi.n	8005f52 <lsm6dsox_gy_data_rate_set+0xc2>
        switch (fsm_odr)
 8005f08:	462e      	mov	r6, r5
  emb_sens.mlc = PROPERTY_DISABLE;
 8005f0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8005f0e:	a901      	add	r1, sp, #4
  emb_sens.mlc = PROPERTY_DISABLE;
 8005f10:	f36f 03c3 	bfc	r3, #3, #1
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8005f14:	4620      	mov	r0, r4
  emb_sens.mlc = PROPERTY_DISABLE;
 8005f16:	f88d 3004 	strb.w	r3, [sp, #4]
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8005f1a:	f7ff fed9 	bl	8005cd0 <lsm6dsox_embedded_sens_get>
    if (emb_sens.mlc == PROPERTY_ENABLE)
 8005f1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005f22:	071b      	lsls	r3, r3, #28
 8005f24:	d424      	bmi.n	8005f70 <lsm6dsox_gy_data_rate_set+0xe0>
  if (ret == 0)
 8005f26:	b990      	cbnz	r0, 8005f4e <lsm6dsox_gy_data_rate_set+0xbe>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f28:	6865      	ldr	r5, [r4, #4]
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	aa02      	add	r2, sp, #8
 8005f30:	2111      	movs	r1, #17
 8005f32:	47a8      	blx	r5
  if (ret == 0)
 8005f34:	b958      	cbnz	r0, 8005f4e <lsm6dsox_gy_data_rate_set+0xbe>
    reg.odr_g = (uint8_t) odr_gy;
 8005f36:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	68e0      	ldr	r0, [r4, #12]
    reg.odr_g = (uint8_t) odr_gy;
 8005f3e:	f366 1307 	bfi	r3, r6, #4, #4
 8005f42:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f46:	aa02      	add	r2, sp, #8
 8005f48:	2301      	movs	r3, #1
 8005f4a:	2111      	movs	r1, #17
 8005f4c:	47a8      	blx	r5
}
 8005f4e:	b004      	add	sp, #16
 8005f50:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8005f52:	f10d 010a 	add.w	r1, sp, #10
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff fd22 	bl	80059a0 <lsm6dsox_fsm_data_rate_get>
      if (ret == 0)
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d1f6      	bne.n	8005f4e <lsm6dsox_gy_data_rate_set+0xbe>
        switch (fsm_odr)
 8005f60:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d8cf      	bhi.n	8005f08 <lsm6dsox_gy_data_rate_set+0x78>
 8005f68:	e8df f003 	tbb	[pc, r3]
 8005f6c:	25292d31 	.word	0x25292d31
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8005f70:	f10d 010b 	add.w	r1, sp, #11
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff fd37 	bl	80059e8 <lsm6dsox_mlc_data_rate_get>
      if (ret == 0)
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d1e7      	bne.n	8005f4e <lsm6dsox_gy_data_rate_set+0xbe>
        switch (mlc_odr)
 8005f7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d828      	bhi.n	8005fd8 <lsm6dsox_gy_data_rate_set+0x148>
 8005f86:	e8df f003 	tbb	[pc, r3]
 8005f8a:	0c11      	.short	0x0c11
 8005f8c:	0207      	.short	0x0207
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005f8e:	2d04      	cmp	r5, #4
 8005f90:	bf38      	it	cc
 8005f92:	2504      	movcc	r5, #4
 8005f94:	462e      	mov	r6, r5
 8005f96:	e7c7      	b.n	8005f28 <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005f98:	2d03      	cmp	r5, #3
 8005f9a:	bf38      	it	cc
 8005f9c:	2503      	movcc	r5, #3
 8005f9e:	462e      	mov	r6, r5
 8005fa0:	e7c2      	b.n	8005f28 <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005fa2:	2d02      	cmp	r5, #2
 8005fa4:	bf38      	it	cc
 8005fa6:	2502      	movcc	r5, #2
 8005fa8:	462e      	mov	r6, r5
 8005faa:	e7bd      	b.n	8005f28 <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005fac:	2d01      	cmp	r5, #1
 8005fae:	bf38      	it	cc
 8005fb0:	2501      	movcc	r5, #1
 8005fb2:	462e      	mov	r6, r5
  if (ret == 0)
 8005fb4:	e7b8      	b.n	8005f28 <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005fb6:	2d03      	cmp	r5, #3
 8005fb8:	d8a6      	bhi.n	8005f08 <lsm6dsox_gy_data_rate_set+0x78>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8005fba:	2604      	movs	r6, #4
 8005fbc:	e7a5      	b.n	8005f0a <lsm6dsox_gy_data_rate_set+0x7a>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005fbe:	2d02      	cmp	r5, #2
 8005fc0:	d8a2      	bhi.n	8005f08 <lsm6dsox_gy_data_rate_set+0x78>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8005fc2:	2603      	movs	r6, #3
 8005fc4:	e7a1      	b.n	8005f0a <lsm6dsox_gy_data_rate_set+0x7a>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005fc6:	2d01      	cmp	r5, #1
 8005fc8:	d89e      	bhi.n	8005f08 <lsm6dsox_gy_data_rate_set+0x78>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8005fca:	2602      	movs	r6, #2
 8005fcc:	e79d      	b.n	8005f0a <lsm6dsox_gy_data_rate_set+0x7a>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8005fce:	2d01      	cmp	r5, #1
 8005fd0:	462e      	mov	r6, r5
 8005fd2:	bf38      	it	cc
 8005fd4:	2601      	movcc	r6, #1
  if (ret == 0)
 8005fd6:	e798      	b.n	8005f0a <lsm6dsox_gy_data_rate_set+0x7a>
        switch (mlc_odr)
 8005fd8:	462e      	mov	r6, r5
 8005fda:	e7a5      	b.n	8005f28 <lsm6dsox_gy_data_rate_set+0x98>

08005fdc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop

08005fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005fe2:	4e0f      	ldr	r6, [pc, #60]	; (8006020 <HAL_InitTick+0x40>)
 8005fe4:	7833      	ldrb	r3, [r6, #0]
 8005fe6:	b90b      	cbnz	r3, 8005fec <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005fec:	490d      	ldr	r1, [pc, #52]	; (8006024 <HAL_InitTick+0x44>)
 8005fee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff8:	6808      	ldr	r0, [r1, #0]
 8005ffa:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ffe:	f000 fefd 	bl	8006dfc <HAL_SYSTICK_Config>
 8006002:	4604      	mov	r4, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d1ef      	bne.n	8005fe8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006008:	2d0f      	cmp	r5, #15
 800600a:	d8ed      	bhi.n	8005fe8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800600c:	4602      	mov	r2, r0
 800600e:	4629      	mov	r1, r5
 8006010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006014:	f000 fe82 	bl	8006d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006018:	6075      	str	r5, [r6, #4]
 800601a:	4620      	mov	r0, r4
}
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	bf00      	nop
 8006020:	200002e8 	.word	0x200002e8
 8006024:	20000300 	.word	0x20000300

08006028 <HAL_Init>:
{
 8006028:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800602a:	2003      	movs	r0, #3
 800602c:	f000 fe64 	bl	8006cf8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006030:	200f      	movs	r0, #15
 8006032:	f7ff ffd5 	bl	8005fe0 <HAL_InitTick>
 8006036:	b110      	cbz	r0, 800603e <HAL_Init+0x16>
    status = HAL_ERROR;
 8006038:	2401      	movs	r4, #1
}
 800603a:	4620      	mov	r0, r4
 800603c:	bd10      	pop	{r4, pc}
 800603e:	4604      	mov	r4, r0
    HAL_MspInit();
 8006040:	f7ff ffcc 	bl	8005fdc <HAL_MspInit>
}
 8006044:	4620      	mov	r0, r4
 8006046:	bd10      	pop	{r4, pc}

08006048 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006048:	4a03      	ldr	r2, [pc, #12]	; (8006058 <HAL_IncTick+0x10>)
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <HAL_IncTick+0x14>)
 800604c:	6811      	ldr	r1, [r2, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	440b      	add	r3, r1
 8006052:	6013      	str	r3, [r2, #0]
}
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20001b94 	.word	0x20001b94
 800605c:	200002e8 	.word	0x200002e8

08006060 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006060:	4b01      	ldr	r3, [pc, #4]	; (8006068 <HAL_GetTick+0x8>)
 8006062:	6818      	ldr	r0, [r3, #0]
}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20001b94 	.word	0x20001b94

0800606c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006070:	f7ff fff6 	bl	8006060 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006074:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8006076:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8006078:	d002      	beq.n	8006080 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800607a:	4b04      	ldr	r3, [pc, #16]	; (800608c <HAL_Delay+0x20>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006080:	f7ff ffee 	bl	8006060 <HAL_GetTick>
 8006084:	1b43      	subs	r3, r0, r5
 8006086:	42a3      	cmp	r3, r4
 8006088:	d3fa      	bcc.n	8006080 <HAL_Delay+0x14>
  {
  }
}
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	200002e8 	.word	0x200002e8

08006090 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8006090:	4800      	ldr	r0, [pc, #0]	; (8006094 <HAL_GetHalVersion+0x4>)
 8006092:	4770      	bx	lr
 8006094:	010d0200 	.word	0x010d0200

08006098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006098:	b530      	push	{r4, r5, lr}
 800609a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800609c:	2300      	movs	r3, #0
 800609e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f000 80b3 	beq.w	800620c <HAL_ADC_Init+0x174>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060a6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80060a8:	4604      	mov	r4, r0
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	f000 8088 	beq.w	80061c0 <HAL_ADC_Init+0x128>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80060b0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80060b2:	6893      	ldr	r3, [r2, #8]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	d505      	bpl.n	80060c4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060b8:	6893      	ldr	r3, [r2, #8]
 80060ba:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80060be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060c2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060c4:	6893      	ldr	r3, [r2, #8]
 80060c6:	00dd      	lsls	r5, r3, #3
 80060c8:	d419      	bmi.n	80060fe <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060ca:	4b5e      	ldr	r3, [pc, #376]	; (8006244 <HAL_ADC_Init+0x1ac>)
 80060cc:	485e      	ldr	r0, [pc, #376]	; (8006248 <HAL_ADC_Init+0x1b0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80060d0:	6891      	ldr	r1, [r2, #8]
 80060d2:	099b      	lsrs	r3, r3, #6
 80060d4:	fba0 0303 	umull	r0, r3, r0, r3
 80060d8:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80060e2:	3301      	adds	r3, #1
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80060ea:	6091      	str	r1, [r2, #8]
 80060ec:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	b12b      	cbz	r3, 80060fe <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f9      	bne.n	80060f2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060fe:	6893      	ldr	r3, [r2, #8]
 8006100:	00d8      	lsls	r0, r3, #3
 8006102:	d44f      	bmi.n	80061a4 <HAL_ADC_Init+0x10c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006106:	f043 0310 	orr.w	r3, r3, #16
 800610a:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800610c:	6de3      	ldr	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800610e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006110:	4303      	orrs	r3, r0
 8006112:	65e3      	str	r3, [r4, #92]	; 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006114:	6893      	ldr	r3, [r2, #8]
 8006116:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800611a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800611c:	d149      	bne.n	80061b2 <HAL_ADC_Init+0x11a>
 800611e:	06d9      	lsls	r1, r3, #27
 8006120:	d447      	bmi.n	80061b2 <HAL_ADC_Init+0x11a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006122:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800612e:	6893      	ldr	r3, [r2, #8]
 8006130:	07db      	lsls	r3, r3, #31
 8006132:	d40a      	bmi.n	800614a <HAL_ADC_Init+0xb2>
 8006134:	4b45      	ldr	r3, [pc, #276]	; (800624c <HAL_ADC_Init+0x1b4>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	07dd      	lsls	r5, r3, #31
 800613a:	d406      	bmi.n	800614a <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800613c:	4944      	ldr	r1, [pc, #272]	; (8006250 <HAL_ADC_Init+0x1b8>)
 800613e:	6865      	ldr	r5, [r4, #4]
 8006140:	688b      	ldr	r3, [r1, #8]
 8006142:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006146:	432b      	orrs	r3, r5
 8006148:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800614a:	68e5      	ldr	r5, [r4, #12]
 800614c:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800614e:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8006152:	432b      	orrs	r3, r5
 8006154:	68a5      	ldr	r5, [r4, #8]
 8006156:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006158:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800615a:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 800615c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006164:	d04d      	beq.n	8006202 <HAL_ADC_Init+0x16a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006166:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006168:	b121      	cbz	r1, 8006174 <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800616a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800616c:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006170:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006172:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006174:	68d5      	ldr	r5, [r2, #12]
 8006176:	4937      	ldr	r1, [pc, #220]	; (8006254 <HAL_ADC_Init+0x1bc>)
 8006178:	4029      	ands	r1, r5
 800617a:	4319      	orrs	r1, r3
 800617c:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800617e:	6893      	ldr	r3, [r2, #8]
 8006180:	0759      	lsls	r1, r3, #29
 8006182:	d523      	bpl.n	80061cc <HAL_ADC_Init+0x134>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006184:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d042      	beq.n	8006212 <HAL_ADC_Init+0x17a>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800618c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800618e:	f023 030f 	bic.w	r3, r3, #15
 8006192:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80061a0:	b003      	add	sp, #12
 80061a2:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061a4:	6893      	ldr	r3, [r2, #8]
 80061a6:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061aa:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061b0:	d0b5      	beq.n	800611e <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80061b4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061b6:	f043 0310 	orr.w	r3, r3, #16
 80061ba:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80061bc:	b003      	add	sp, #12
 80061be:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80061c0:	f004 fe42 	bl	800ae48 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80061c4:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80061c6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80061ca:	e771      	b.n	80060b0 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061cc:	6893      	ldr	r3, [r2, #8]
 80061ce:	071b      	lsls	r3, r3, #28
 80061d0:	d4d9      	bmi.n	8006186 <HAL_ADC_Init+0xee>
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061d2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061d6:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061d8:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061da:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061dc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 80061e0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061e2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80061e6:	f021 0106 	bic.w	r1, r1, #6
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061ea:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061ec:	430b      	orrs	r3, r1
 80061ee:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80061f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d014      	beq.n	8006222 <HAL_ADC_Init+0x18a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80061f8:	6913      	ldr	r3, [r2, #16]
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	6113      	str	r3, [r2, #16]
 8006200:	e7c1      	b.n	8006186 <HAL_ADC_Init+0xee>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006202:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006204:	3901      	subs	r1, #1
 8006206:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800620a:	e7ac      	b.n	8006166 <HAL_ADC_Init+0xce>
    return HAL_ERROR;
 800620c:	2001      	movs	r0, #1
}
 800620e:	b003      	add	sp, #12
 8006210:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006212:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006214:	69e3      	ldr	r3, [r4, #28]
 8006216:	f021 010f 	bic.w	r1, r1, #15
 800621a:	3b01      	subs	r3, #1
 800621c:	430b      	orrs	r3, r1
 800621e:	6313      	str	r3, [r2, #48]	; 0x30
 8006220:	e7b8      	b.n	8006194 <HAL_ADC_Init+0xfc>
        MODIFY_REG(hadc->Instance->CFGR2,
 8006222:	6911      	ldr	r1, [r2, #16]
 8006224:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006226:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8006228:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800622c:	f021 0104 	bic.w	r1, r1, #4
 8006230:	432b      	orrs	r3, r5
 8006232:	430b      	orrs	r3, r1
 8006234:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006236:	430b      	orrs	r3, r1
 8006238:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800623a:	430b      	orrs	r3, r1
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	6113      	str	r3, [r2, #16]
 8006242:	e7a0      	b.n	8006186 <HAL_ADC_Init+0xee>
 8006244:	20000300 	.word	0x20000300
 8006248:	053e2d63 	.word	0x053e2d63
 800624c:	50040000 	.word	0x50040000
 8006250:	50040300 	.word	0x50040300
 8006254:	fff0c007 	.word	0xfff0c007

08006258 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8006258:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
 800625a:	4770      	bx	lr

0800625c <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800625c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	0752      	lsls	r2, r2, #29
{
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	4604      	mov	r4, r0
 8006266:	d536      	bpl.n	80062d6 <ADC_ConversionStop+0x7a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006268:	689a      	ldr	r2, [r3, #8]
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	0196      	lsls	r6, r2, #6
 800626e:	d504      	bpl.n	800627a <ADC_ConversionStop+0x1e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006270:	8b20      	ldrh	r0, [r4, #24]
 8006272:	f240 1201 	movw	r2, #257	; 0x101
 8006276:	4290      	cmp	r0, r2
 8006278:	d032      	beq.n	80062e0 <ADC_ConversionStop+0x84>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800627a:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	d00e      	beq.n	800629e <ADC_ConversionStop+0x42>
 8006280:	0756      	lsls	r6, r2, #29
 8006282:	d502      	bpl.n	800628a <ADC_ConversionStop+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	0790      	lsls	r0, r2, #30
 8006288:	d556      	bpl.n	8006338 <ADC_ConversionStop+0xdc>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800628a:	2901      	cmp	r1, #1
 800628c:	d03a      	beq.n	8006304 <ADC_ConversionStop+0xa8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	0712      	lsls	r2, r2, #28
 8006292:	d439      	bmi.n	8006308 <ADC_ConversionStop+0xac>

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006294:	2903      	cmp	r1, #3
 8006296:	bf14      	ite	ne
 8006298:	2504      	movne	r5, #4
 800629a:	250c      	moveq	r5, #12
 800629c:	e002      	b.n	80062a4 <ADC_ConversionStop+0x48>
 800629e:	0712      	lsls	r2, r2, #28
 80062a0:	d43e      	bmi.n	8006320 <ADC_ConversionStop+0xc4>
        break;
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80062a2:	2508      	movs	r5, #8
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80062a4:	f7ff fedc 	bl	8006060 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062a8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80062aa:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	421d      	tst	r5, r3
 80062b0:	d014      	beq.n	80062dc <ADC_ConversionStop+0x80>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80062b2:	f7ff fed5 	bl	8006060 <HAL_GetTick>
 80062b6:	1b83      	subs	r3, r0, r6
 80062b8:	2b05      	cmp	r3, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062ba:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80062bc:	d9f6      	bls.n	80062ac <ADC_ConversionStop+0x50>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	422a      	tst	r2, r5
 80062c2:	d0f3      	beq.n	80062ac <ADC_ConversionStop+0x50>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062c6:	f043 0310 	orr.w	r3, r3, #16
 80062ca:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80062ce:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062d0:	4303      	orrs	r3, r0
 80062d2:	65e3      	str	r3, [r4, #92]	; 0x5c

  }

  /* Return HAL status */
  return HAL_OK;
}
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	0710      	lsls	r0, r2, #28
 80062da:	d4c6      	bmi.n	800626a <ADC_ConversionStop+0xe>
  return HAL_OK;
 80062dc:	2000      	movs	r0, #0
}
 80062de:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	0655      	lsls	r5, r2, #25
 80062e4:	d406      	bmi.n	80062f4 <ADC_ConversionStop+0x98>
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <ADC_ConversionStop+0x104>)
 80062e8:	e001      	b.n	80062ee <ADC_ConversionStop+0x92>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80062ea:	3a01      	subs	r2, #1
 80062ec:	d0ea      	beq.n	80062c4 <ADC_ConversionStop+0x68>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	0648      	lsls	r0, r1, #25
 80062f2:	d5fa      	bpl.n	80062ea <ADC_ConversionStop+0x8e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80062f4:	2240      	movs	r2, #64	; 0x40
 80062f6:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	0751      	lsls	r1, r2, #29
 80062fc:	d502      	bpl.n	8006304 <ADC_ConversionStop+0xa8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	0795      	lsls	r5, r2, #30
 8006302:	d522      	bpl.n	800634a <ADC_ConversionStop+0xee>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006304:	2504      	movs	r5, #4
 8006306:	e7cd      	b.n	80062a4 <ADC_ConversionStop+0x48>
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	0796      	lsls	r6, r2, #30
 800630c:	d4c2      	bmi.n	8006294 <ADC_ConversionStop+0x38>
  MODIFY_REG(ADCx->CR,
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006314:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006318:	f042 0220 	orr.w	r2, r2, #32
 800631c:	609a      	str	r2, [r3, #8]
}
 800631e:	e7b9      	b.n	8006294 <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	0792      	lsls	r2, r2, #30
 8006324:	d4bd      	bmi.n	80062a2 <ADC_ConversionStop+0x46>
  MODIFY_REG(ADCx->CR,
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800632c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006330:	f042 0220 	orr.w	r2, r2, #32
 8006334:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8006336:	e7b4      	b.n	80062a2 <ADC_ConversionStop+0x46>
  MODIFY_REG(ADCx->CR,
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800633e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006342:	f042 0210 	orr.w	r2, r2, #16
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	e79f      	b.n	800628a <ADC_ConversionStop+0x2e>
  MODIFY_REG(ADCx->CR,
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006350:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006354:	f042 0210 	orr.w	r2, r2, #16
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006358:	2504      	movs	r5, #4
 800635a:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800635c:	e7a2      	b.n	80062a4 <ADC_ConversionStop+0x48>
 800635e:	bf00      	nop
 8006360:	a3400000 	.word	0xa3400000

08006364 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006364:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	07d2      	lsls	r2, r2, #31
 800636a:	d501      	bpl.n	8006370 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800636c:	2000      	movs	r0, #0
}
 800636e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006370:	6899      	ldr	r1, [r3, #8]
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <ADC_Enable+0x70>)
 8006374:	4211      	tst	r1, r2
{
 8006376:	b570      	push	{r4, r5, r6, lr}
 8006378:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800637a:	d008      	beq.n	800638e <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800637c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800637e:	f043 0310 	orr.w	r3, r3, #16
 8006382:	65b3      	str	r3, [r6, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006384:	6df3      	ldr	r3, [r6, #92]	; 0x5c
          return HAL_ERROR;
 8006386:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006388:	4303      	orrs	r3, r0
 800638a:	65f3      	str	r3, [r6, #92]	; 0x5c
}
 800638c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	4d11      	ldr	r5, [pc, #68]	; (80063d8 <ADC_Enable+0x74>)
 8006392:	402a      	ands	r2, r5
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800639a:	f7ff fe61 	bl	8006060 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800639e:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80063a0:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	07d0      	lsls	r0, r2, #31
 80063a6:	d413      	bmi.n	80063d0 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	07d1      	lsls	r1, r2, #31
 80063ac:	d404      	bmi.n	80063b8 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	402a      	ands	r2, r5
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063b8:	f7ff fe52 	bl	8006060 <HAL_GetTick>
 80063bc:	1b03      	subs	r3, r0, r4
 80063be:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063c0:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063c2:	d9ee      	bls.n	80063a2 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	07d2      	lsls	r2, r2, #31
 80063c8:	d5d8      	bpl.n	800637c <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	07d0      	lsls	r0, r2, #31
 80063ce:	d5eb      	bpl.n	80063a8 <ADC_Enable+0x44>
  return HAL_OK;
 80063d0:	2000      	movs	r0, #0
}
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	8000003f 	.word	0x8000003f
 80063d8:	7fffffc0 	.word	0x7fffffc0

080063dc <HAL_ADC_Start>:
{
 80063dc:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063de:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063e0:	689d      	ldr	r5, [r3, #8]
 80063e2:	f015 0504 	ands.w	r5, r5, #4
 80063e6:	d133      	bne.n	8006450 <HAL_ADC_Start+0x74>
    __HAL_LOCK(hadc);
 80063e8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	4604      	mov	r4, r0
 80063f0:	d02e      	beq.n	8006450 <HAL_ADC_Start+0x74>
 80063f2:	2301      	movs	r3, #1
 80063f4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80063f8:	f7ff ffb4 	bl	8006364 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80063fc:	bb50      	cbnz	r0, 8006454 <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 80063fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	65a3      	str	r3, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800640e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006410:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006412:	bf48      	it	mi
 8006414:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006416:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc);
 8006418:	bf52      	itee	pl
 800641a:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800641c:	f023 0306 	bicmi.w	r3, r3, #6
 8006420:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006422:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 8006424:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006426:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8006428:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800642c:	68d3      	ldr	r3, [r2, #12]
 800642e:	019b      	lsls	r3, r3, #6
 8006430:	d505      	bpl.n	800643e <HAL_ADC_Start+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006434:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800643c:	65a3      	str	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 800643e:	6893      	ldr	r3, [r2, #8]
 8006440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006448:	f043 0304 	orr.w	r3, r3, #4
 800644c:	6093      	str	r3, [r2, #8]
}
 800644e:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8006450:	2002      	movs	r0, #2
}
 8006452:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8006454:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop

0800645c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800645c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800645e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	0795      	lsls	r5, r2, #30
 8006464:	d502      	bpl.n	800646c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006466:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006468:	2000      	movs	r0, #0
}
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	07d4      	lsls	r4, r2, #31
 8006470:	d52b      	bpl.n	80064ca <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	f002 020d 	and.w	r2, r2, #13
 8006478:	2a01      	cmp	r2, #1
 800647a:	4604      	mov	r4, r0
 800647c:	d008      	beq.n	8006490 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800647e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006480:	f043 0310 	orr.w	r3, r3, #16
 8006484:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006486:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8006488:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800648a:	4303      	orrs	r3, r0
 800648c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800648e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006496:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800649a:	2103      	movs	r1, #3
 800649c:	f042 0202 	orr.w	r2, r2, #2
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80064a4:	f7ff fddc 	bl	8006060 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80064ae:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064b0:	d50b      	bpl.n	80064ca <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064b2:	f7ff fdd5 	bl	8006060 <HAL_GetTick>
 80064b6:	1b40      	subs	r0, r0, r5
 80064b8:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064ba:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064bc:	d902      	bls.n	80064c4 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	07d2      	lsls	r2, r2, #31
 80064c2:	d4dc      	bmi.n	800647e <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	07db      	lsls	r3, r3, #31
 80064c8:	d4f3      	bmi.n	80064b2 <ADC_Disable+0x56>
  return HAL_OK;
 80064ca:	2000      	movs	r0, #0
}
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop

080064d0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80064d0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d01d      	beq.n	8006514 <HAL_ADC_Stop+0x44>
 80064d8:	2301      	movs	r3, #1
{
 80064da:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80064dc:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80064de:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80064e2:	4604      	mov	r4, r0
 80064e4:	f7ff feba 	bl	800625c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80064e8:	b118      	cbz	r0, 80064f2 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80064ea:	2300      	movs	r3, #0
 80064ec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80064f0:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7ff ffb2 	bl	800645c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d1f6      	bne.n	80064ea <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80064fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800650c:	2300      	movs	r3, #0
 800650e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8006512:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8006514:	2002      	movs	r0, #2
}
 8006516:	4770      	bx	lr

08006518 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006518:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800651a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
{
 800651e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8006520:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006522:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8006524:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006526:	d03f      	beq.n	80065a8 <HAL_ADCEx_Calibration_Start+0x90>
 8006528:	2301      	movs	r3, #1
 800652a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	f7ff ff93 	bl	800645c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006536:	6da3      	ldr	r3, [r4, #88]	; 0x58
  if (tmp_hal_status == HAL_OK)
 8006538:	b9e0      	cbnz	r0, 8006574 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800653a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800653e:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006542:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8006544:	f043 0302 	orr.w	r3, r3, #2
 8006548:	65a3      	str	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 800654a:	6893      	ldr	r3, [r2, #8]
 800654c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006550:	f005 4180 	and.w	r1, r5, #1073741824	; 0x40000000
 8006554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006558:	4319      	orrs	r1, r3
 800655a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800655e:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006560:	6893      	ldr	r3, [r2, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	db0e      	blt.n	8006584 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006566:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006568:	f023 0303 	bic.w	r3, r3, #3
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	65a3      	str	r3, [r4, #88]	; 0x58
 8006572:	e002      	b.n	800657a <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006574:	f043 0310 	orr.w	r3, r3, #16
 8006578:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800657a:	2300      	movs	r3, #0
 800657c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8006580:	b003      	add	sp, #12
 8006582:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006590:	d3e6      	bcc.n	8006560 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8006592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006594:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8006598:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800659a:	f043 0310 	orr.w	r3, r3, #16
 800659e:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 80065a0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80065a4:	2001      	movs	r0, #1
 80065a6:	e7eb      	b.n	8006580 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 80065a8:	2002      	movs	r0, #2
}
 80065aa:	b003      	add	sp, #12
 80065ac:	bd30      	pop	{r4, r5, pc}
 80065ae:	bf00      	nop

080065b0 <HAL_ADCEx_InjectedStart>:
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80065b0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	0711      	lsls	r1, r2, #28
 80065b6:	d433      	bmi.n	8006620 <HAL_ADCEx_InjectedStart+0x70>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80065b8:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80065ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065bc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
{
 80065c0:	b510      	push	{r4, lr}
 80065c2:	4604      	mov	r4, r0
    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80065c4:	d02e      	beq.n	8006624 <HAL_ADCEx_InjectedStart+0x74>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80065c6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d036      	beq.n	800663c <HAL_ADCEx_InjectedStart+0x8c>
 80065ce:	2301      	movs	r3, #1
 80065d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80065d4:	4620      	mov	r0, r4
 80065d6:	f7ff fec5 	bl	8006364 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80065da:	bb58      	cbnz	r0, 8006634 <HAL_ADCEx_InjectedStart+0x84>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80065dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065de:	05da      	lsls	r2, r3, #23
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80065e0:	bf49      	itett	mi
 80065e2:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80065e4:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80065e6:	f023 0308 	bicmi.w	r3, r3, #8
 80065ea:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80065ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80065ee:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80065f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065fc:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80065fe:	2160      	movs	r1, #96	; 0x60

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006600:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8006602:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8006604:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8006608:	68d3      	ldr	r3, [r2, #12]
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800660a:	019b      	lsls	r3, r3, #6
 800660c:	d407      	bmi.n	800661e <HAL_ADCEx_InjectedStart+0x6e>
  MODIFY_REG(ADCx->CR,
 800660e:	6893      	ldr	r3, [r2, #8]
 8006610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006618:	f043 0308 	orr.w	r3, r3, #8
 800661c:	6093      	str	r3, [r2, #8]
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 800661e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006620:	2002      	movs	r0, #2
}
 8006622:	4770      	bx	lr
        && (tmp_config_injected_queue == 0UL)
 8006624:	2a00      	cmp	r2, #0
 8006626:	dbce      	blt.n	80065c6 <HAL_ADCEx_InjectedStart+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006628:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800662a:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 800662e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006630:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006632:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8006634:	2300      	movs	r3, #0
 8006636:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800663a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800663c:	2002      	movs	r0, #2
}
 800663e:	bd10      	pop	{r4, pc}

08006640 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006642:	6943      	ldr	r3, [r0, #20]
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 8006644:	2b08      	cmp	r3, #8
{
 8006646:	4606      	mov	r6, r0
 8006648:	460c      	mov	r4, r1
    tmp_Flag_End = ADC_FLAG_JEOC;
 800664a:	bf0c      	ite	eq
 800664c:	2540      	moveq	r5, #64	; 0x40
 800664e:	2520      	movne	r5, #32
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006650:	f7ff fd06 	bl	8006060 <HAL_GetTick>
 8006654:	6832      	ldr	r2, [r6, #0]
 8006656:	4607      	mov	r7, r0

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006658:	e001      	b.n	800665e <HAL_ADCEx_InjectedPollForConversion+0x1e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	1c63      	adds	r3, r4, #1
 800665c:	d122      	bne.n	80066a4 <HAL_ADCEx_InjectedPollForConversion+0x64>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800665e:	6813      	ldr	r3, [r2, #0]
 8006660:	422b      	tst	r3, r5
 8006662:	d0fa      	beq.n	800665a <HAL_ADCEx_InjectedPollForConversion+0x1a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006664:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006666:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800666a:	d12c      	bne.n	80066c6 <HAL_ADCEx_InjectedPollForConversion+0x86>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800666c:	68d3      	ldr	r3, [r2, #12]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800666e:	68d0      	ldr	r0, [r2, #12]
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006670:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8006672:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8006676:	65b1      	str	r1, [r6, #88]	; 0x58
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006678:	6811      	ldr	r1, [r2, #0]
 800667a:	064c      	lsls	r4, r1, #25
 800667c:	d50c      	bpl.n	8006698 <HAL_ADCEx_InjectedPollForConversion+0x58>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800667e:	0281      	lsls	r1, r0, #10
 8006680:	d40a      	bmi.n	8006698 <HAL_ADCEx_InjectedPollForConversion+0x58>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006682:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8006684:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006688:	65b1      	str	r1, [r6, #88]	; 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800668a:	6db1      	ldr	r1, [r6, #88]	; 0x58
 800668c:	05cb      	lsls	r3, r1, #23
 800668e:	d403      	bmi.n	8006698 <HAL_ADCEx_InjectedPollForConversion+0x58>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006690:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8006692:	f041 0101 	orr.w	r1, r1, #1
 8006696:	65b1      	str	r1, [r6, #88]	; 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 8006698:	2d40      	cmp	r5, #64	; 0x40
 800669a:	d023      	beq.n	80066e4 <HAL_ADCEx_InjectedPollForConversion+0xa4>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800669c:	2320      	movs	r3, #32
 800669e:	6013      	str	r3, [r2, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 80066a0:	2000      	movs	r0, #0
}
 80066a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80066a4:	f7ff fcdc 	bl	8006060 <HAL_GetTick>
 80066a8:	1bc0      	subs	r0, r0, r7
 80066aa:	42a0      	cmp	r0, r4
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80066ac:	6832      	ldr	r2, [r6, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80066ae:	d91f      	bls.n	80066f0 <HAL_ADCEx_InjectedPollForConversion+0xb0>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80066b0:	6813      	ldr	r3, [r2, #0]
 80066b2:	402b      	ands	r3, r5
 80066b4:	d1d3      	bne.n	800665e <HAL_ADCEx_InjectedPollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80066b6:	6db2      	ldr	r2, [r6, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80066b8:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80066bc:	f042 0204 	orr.w	r2, r2, #4
 80066c0:	65b2      	str	r2, [r6, #88]	; 0x58
          return HAL_TIMEOUT;
 80066c2:	2003      	movs	r0, #3
}
 80066c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c6:	68d3      	ldr	r3, [r2, #12]
 80066c8:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80066cc:	d116      	bne.n	80066fc <HAL_ADCEx_InjectedPollForConversion+0xbc>
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80066ce:	68d0      	ldr	r0, [r2, #12]
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80066d0:	6db1      	ldr	r1, [r6, #88]	; 0x58
 80066d2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80066d6:	65b1      	str	r1, [r6, #88]	; 0x58
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80066d8:	490c      	ldr	r1, [pc, #48]	; (800670c <HAL_ADCEx_InjectedPollForConversion+0xcc>)
 80066da:	4001      	ands	r1, r0
 80066dc:	2900      	cmp	r1, #0
 80066de:	d0cb      	beq.n	8006678 <HAL_ADCEx_InjectedPollForConversion+0x38>
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 80066e0:	2d40      	cmp	r5, #64	; 0x40
 80066e2:	d1db      	bne.n	800669c <HAL_ADCEx_InjectedPollForConversion+0x5c>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80066e4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80066e8:	d10e      	bne.n	8006708 <HAL_ADCEx_InjectedPollForConversion+0xc8>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80066ea:	2360      	movs	r3, #96	; 0x60
 80066ec:	6013      	str	r3, [r2, #0]
}
 80066ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80066f0:	2c00      	cmp	r4, #0
 80066f2:	d1b4      	bne.n	800665e <HAL_ADCEx_InjectedPollForConversion+0x1e>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	402b      	ands	r3, r5
 80066f8:	d1b1      	bne.n	800665e <HAL_ADCEx_InjectedPollForConversion+0x1e>
 80066fa:	e7dc      	b.n	80066b6 <HAL_ADCEx_InjectedPollForConversion+0x76>
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80066fc:	68d0      	ldr	r0, [r2, #12]
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80066fe:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8006700:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8006704:	65b1      	str	r1, [r6, #88]	; 0x58
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8006706:	e7c7      	b.n	8006698 <HAL_ADCEx_InjectedPollForConversion+0x58>
  return HAL_OK;
 8006708:	2000      	movs	r0, #0
}
 800670a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670c:	02002000 	.word	0x02002000

08006710 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8006710:	f5b1 7f05 	cmp.w	r1, #532	; 0x214
 8006714:	d00a      	beq.n	800672c <HAL_ADCEx_InjectedGetValue+0x1c>
 8006716:	f240 331a 	movw	r3, #794	; 0x31a
 800671a:	4299      	cmp	r1, r3
 800671c:	d00e      	beq.n	800673c <HAL_ADCEx_InjectedGetValue+0x2c>
 800671e:	f5b1 7f87 	cmp.w	r1, #270	; 0x10e
 8006722:	d007      	beq.n	8006734 <HAL_ADCEx_InjectedGetValue+0x24>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
      break;
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8006724:	6803      	ldr	r3, [r0, #0]
 8006726:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
      break;
  }

  /* Return ADC converted value */
  return tmp_jdr;
}
 800672a:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 800672c:	6803      	ldr	r3, [r0, #0]
 800672e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8006732:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8006734:	6803      	ldr	r3, [r0, #0]
 8006736:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 800673a:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 800673c:	6803      	ldr	r3, [r0, #0]
 800673e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8006742:	4770      	bx	lr

08006744 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8006744:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006746:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
{
 800674a:	4602      	mov	r2, r0
 800674c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800674e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8006750:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8006752:	9001      	str	r0, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006754:	6910      	ldr	r0, [r2, #16]
  __HAL_LOCK(hadc);
 8006756:	f000 8155 	beq.w	8006a04 <HAL_ADCEx_InjectedConfigChannel+0x2c0>
 800675a:	2301      	movs	r3, #1
 800675c:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006760:	b1e8      	cbz	r0, 800679e <HAL_ADCEx_InjectedConfigChannel+0x5a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8006762:	698b      	ldr	r3, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006764:	2b01      	cmp	r3, #1
 8006766:	d01a      	beq.n	800679e <HAL_ADCEx_InjectedConfigChannel+0x5a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006768:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800676a:	2800      	cmp	r0, #0
 800676c:	f040 80d9 	bne.w	8006922 <HAL_ADCEx_InjectedConfigChannel+0x1de>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006770:	6a08      	ldr	r0, [r1, #32]
 8006772:	2800      	cmp	r0, #0
 8006774:	f000 8216 	beq.w	8006ba4 <HAL_ADCEx_InjectedConfigChannel+0x460>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8006778:	1e5e      	subs	r6, r3, #1
 800677a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800677c:	f000 003c 	and.w	r0, r0, #60	; 0x3c
 8006780:	4330      	orrs	r0, r6
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8006782:	ea40 0304 	orr.w	r3, r0, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8006786:	e9d1 4500 	ldrd	r4, r5, [r1]
 800678a:	f005 051f 	and.w	r5, r5, #31
 800678e:	f3c4 6084 	ubfx	r0, r4, #26, #5
 8006792:	40a8      	lsls	r0, r5
    hadc->InjectionConfig.ChannelCount--;

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8006794:	4318      	orrs	r0, r3
    hadc->InjectionConfig.ChannelCount--;
 8006796:	6656      	str	r6, [r2, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006798:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800679a:	6610      	str	r0, [r2, #96]	; 0x60
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800679c:	e005      	b.n	80067aa <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800679e:	684b      	ldr	r3, [r1, #4]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	f000 80a9 	beq.w	80068f8 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80067a6:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80067a8:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067aa:	6898      	ldr	r0, [r3, #8]
 80067ac:	0707      	lsls	r7, r0, #28
 80067ae:	d40d      	bmi.n	80067cc <HAL_ADCEx_InjectedConfigChannel+0x88>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80067b0:	7f48      	ldrb	r0, [r1, #29]
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f040 8098 	bne.w	80068e8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80067b8:	7f08      	ldrb	r0, [r1, #28]
 80067ba:	68dd      	ldr	r5, [r3, #12]
 80067bc:	7f8e      	ldrb	r6, [r1, #30]
 80067be:	0500      	lsls	r0, r0, #20
 80067c0:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80067c4:	ea40 5046 	orr.w	r0, r0, r6, lsl #21
 80067c8:	4328      	orrs	r0, r5
 80067ca:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067cc:	6898      	ldr	r0, [r3, #8]
 80067ce:	f010 0004 	ands.w	r0, r0, #4
 80067d2:	d036      	beq.n	8006842 <HAL_ADCEx_InjectedConfigChannel+0xfe>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067d4:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067d6:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067d8:	689d      	ldr	r5, [r3, #8]
 80067da:	07ee      	lsls	r6, r5, #31
 80067dc:	d414      	bmi.n	8006808 <HAL_ADCEx_InjectedConfigChannel+0xc4>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80067de:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80067e0:	4dae      	ldr	r5, [pc, #696]	; (8006a9c <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80067e2:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 80067e6:	f007 0c18 	and.w	ip, r7, #24
 80067ea:	fa25 f50c 	lsr.w	r5, r5, ip
 80067ee:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 80067f2:	4025      	ands	r5, r4
 80067f4:	ea26 0c0e 	bic.w	ip, r6, lr
 80067f8:	ea45 050c 	orr.w	r5, r5, ip
 80067fc:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006800:	4da7      	ldr	r5, [pc, #668]	; (8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8006802:	42af      	cmp	r7, r5
 8006804:	f000 80c0 	beq.w	8006988 <HAL_ADCEx_InjectedConfigChannel+0x244>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8006808:	49a6      	ldr	r1, [pc, #664]	; (8006aa4 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 800680a:	420c      	tst	r4, r1
 800680c:	d014      	beq.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800680e:	4ea6      	ldr	r6, [pc, #664]	; (8006aa8 <HAL_ADCEx_InjectedConfigChannel+0x364>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8006810:	4da6      	ldr	r5, [pc, #664]	; (8006aac <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8006812:	68b1      	ldr	r1, [r6, #8]
 8006814:	42ac      	cmp	r4, r5
 8006816:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 800681a:	f000 80ce 	beq.w	80069ba <HAL_ADCEx_InjectedConfigChannel+0x276>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800681e:	4da4      	ldr	r5, [pc, #656]	; (8006ab0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8006820:	42ac      	cmp	r4, r5
 8006822:	f000 8094 	beq.w	800694e <HAL_ADCEx_InjectedConfigChannel+0x20a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006826:	4da3      	ldr	r5, [pc, #652]	; (8006ab4 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8006828:	42ac      	cmp	r4, r5
 800682a:	d105      	bne.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800682c:	0249      	lsls	r1, r1, #9
 800682e:	d403      	bmi.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006830:	49a1      	ldr	r1, [pc, #644]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8006832:	428b      	cmp	r3, r1
 8006834:	f000 820c 	beq.w	8006c50 <HAL_ADCEx_InjectedConfigChannel+0x50c>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006838:	2300      	movs	r3, #0
 800683a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 800683e:	b003      	add	sp, #12
 8006840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006842:	689d      	ldr	r5, [r3, #8]
 8006844:	f015 0508 	ands.w	r5, r5, #8
 8006848:	d1c6      	bne.n	80067d8 <HAL_ADCEx_InjectedConfigChannel+0x94>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800684a:	6a08      	ldr	r0, [r1, #32]
 800684c:	2800      	cmp	r0, #0
 800684e:	f040 808d 	bne.w	800696c <HAL_ADCEx_InjectedConfigChannel+0x228>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006852:	7f48      	ldrb	r0, [r1, #29]
 8006854:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006856:	68d8      	ldr	r0, [r3, #12]
 8006858:	bf0c      	ite	eq
 800685a:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800685e:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 8006862:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006864:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8006866:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 800686a:	2d01      	cmp	r5, #1
 800686c:	f000 818f 	beq.w	8006b8e <HAL_ADCEx_InjectedConfigChannel+0x44a>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006870:	691d      	ldr	r5, [r3, #16]
 8006872:	f025 0502 	bic.w	r5, r5, #2
 8006876:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006878:	688d      	ldr	r5, [r1, #8]
 800687a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800687e:	f000 8174 	beq.w	8006b6a <HAL_ADCEx_InjectedConfigChannel+0x426>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006882:	0de6      	lsrs	r6, r4, #23
 8006884:	f006 0604 	and.w	r6, r6, #4
 8006888:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800688c:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8006890:	f04f 0c07 	mov.w	ip, #7
 8006894:	40a5      	lsls	r5, r4
 8006896:	fa0c fc04 	lsl.w	ip, ip, r4
 800689a:	59bc      	ldr	r4, [r7, r6]
 800689c:	ea24 040c 	bic.w	r4, r4, ip
 80068a0:	432c      	orrs	r4, r5
 80068a2:	51bc      	str	r4, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80068a4:	695c      	ldr	r4, [r3, #20]
 80068a6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80068aa:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80068ac:	e9d1 5704 	ldrd	r5, r7, [r1, #16]
 80068b0:	2d04      	cmp	r5, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80068b2:	68dc      	ldr	r4, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80068b4:	f000 80ad 	beq.w	8006a12 <HAL_ADCEx_InjectedConfigChannel+0x2ce>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068b8:	f103 0660 	add.w	r6, r3, #96	; 0x60
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80068bc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80068c0:	0064      	lsls	r4, r4, #1
  MODIFY_REG(*preg,
 80068c2:	f856 e025 	ldr.w	lr, [r6, r5, lsl #2]
 80068c6:	f8df c200 	ldr.w	ip, [pc, #512]	; 8006ac8 <HAL_ADCEx_InjectedConfigChannel+0x384>
 80068ca:	40a7      	lsls	r7, r4
 80068cc:	680c      	ldr	r4, [r1, #0]
 80068ce:	ea0e 0c0c 	and.w	ip, lr, ip
 80068d2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80068d6:	ea44 040c 	orr.w	r4, r4, ip
 80068da:	433c      	orrs	r4, r7
 80068dc:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80068e0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80068e4:	680c      	ldr	r4, [r1, #0]
}
 80068e6:	e777      	b.n	80067d8 <HAL_ADCEx_InjectedConfigChannel+0x94>
      MODIFY_REG(hadc->Instance->CFGR,
 80068e8:	68d8      	ldr	r0, [r3, #12]
 80068ea:	7f8d      	ldrb	r5, [r1, #30]
 80068ec:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80068f0:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 80068f4:	60d8      	str	r0, [r3, #12]
 80068f6:	e769      	b.n	80067cc <HAL_ADCEx_InjectedConfigChannel+0x88>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80068f8:	6a0b      	ldr	r3, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80068fa:	680c      	ldr	r4, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8084 	beq.w	8006a0a <HAL_ADCEx_InjectedConfigChannel+0x2c6>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006902:	6a48      	ldr	r0, [r1, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006904:	f003 033c 	and.w	r3, r3, #60	; 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006908:	0ca5      	lsrs	r5, r4, #18
 800690a:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
 800690e:	4303      	orrs	r3, r0
 8006910:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	4e69      	ldr	r6, [pc, #420]	; (8006abc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8006916:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006918:	4030      	ands	r0, r6
 800691a:	4328      	orrs	r0, r5
 800691c:	64d8      	str	r0, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800691e:	6615      	str	r5, [r2, #96]	; 0x60
 8006920:	e743      	b.n	80067aa <HAL_ADCEx_InjectedConfigChannel+0x66>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8006922:	680c      	ldr	r4, [r1, #0]
 8006924:	684b      	ldr	r3, [r1, #4]
 8006926:	f3c4 6584 	ubfx	r5, r4, #26, #5
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8006930:	6e13      	ldr	r3, [r2, #96]	; 0x60
    hadc->InjectionConfig.ChannelCount--;
 8006932:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8006934:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8006936:	6650      	str	r0, [r2, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006938:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800693a:	6615      	str	r5, [r2, #96]	; 0x60
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800693c:	2800      	cmp	r0, #0
 800693e:	f47f af34 	bne.w	80067aa <HAL_ADCEx_InjectedConfigChannel+0x66>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006942:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006944:	4e5d      	ldr	r6, [pc, #372]	; (8006abc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8006946:	4030      	ands	r0, r6
 8006948:	4328      	orrs	r0, r5
 800694a:	64d8      	str	r0, [r3, #76]	; 0x4c
 800694c:	e72d      	b.n	80067aa <HAL_ADCEx_InjectedConfigChannel+0x66>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800694e:	01cc      	lsls	r4, r1, #7
 8006950:	f53f af72 	bmi.w	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006954:	4958      	ldr	r1, [pc, #352]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8006956:	428b      	cmp	r3, r1
 8006958:	f47f af6e 	bne.w	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800695c:	68b3      	ldr	r3, [r6, #8]
 800695e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006962:	433b      	orrs	r3, r7
 8006964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006968:	60b3      	str	r3, [r6, #8]
}
 800696a:	e765      	b.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800696c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800696e:	2800      	cmp	r0, #0
 8006970:	f43f af6f 	beq.w	8006852 <HAL_ADCEx_InjectedConfigChannel+0x10e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006974:	7f48      	ldrb	r0, [r1, #29]
 8006976:	2801      	cmp	r0, #1
 8006978:	f000 8165 	beq.w	8006c46 <HAL_ADCEx_InjectedConfigChannel+0x502>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800697c:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800697e:	68dd      	ldr	r5, [r3, #12]
 8006980:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8006984:	60dd      	str	r5, [r3, #12]
 8006986:	e76e      	b.n	8006866 <HAL_ADCEx_InjectedConfigChannel+0x122>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006988:	f1be 0f00 	cmp.w	lr, #0
 800698c:	f040 809e 	bne.w	8006acc <HAL_ADCEx_InjectedConfigChannel+0x388>
 8006990:	0ea4      	lsrs	r4, r4, #26
 8006992:	3401      	adds	r4, #1
 8006994:	f004 061f 	and.w	r6, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006998:	2e09      	cmp	r6, #9
 800699a:	f240 8126 	bls.w	8006bea <HAL_ADCEx_InjectedConfigChannel+0x4a6>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800699e:	06a5      	lsls	r5, r4, #26
 80069a0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80069a4:	3c1e      	subs	r4, #30
 80069a6:	2701      	movs	r7, #1
 80069a8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80069ac:	0524      	lsls	r4, r4, #20
 80069ae:	fa07 f606 	lsl.w	r6, r7, r6
 80069b2:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 80069b6:	4335      	orrs	r5, r6
 80069b8:	e0c0      	b.n	8006b3c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80069ba:	020d      	lsls	r5, r1, #8
 80069bc:	f53f af3c 	bmi.w	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069c0:	493d      	ldr	r1, [pc, #244]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 80069c2:	428b      	cmp	r3, r1
 80069c4:	f47f af38 	bne.w	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80069c8:	68b3      	ldr	r3, [r6, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80069ca:	493d      	ldr	r1, [pc, #244]	; (8006ac0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 80069cc:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80069d0:	433b      	orrs	r3, r7
 80069d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069d6:	60b3      	str	r3, [r6, #8]
 80069d8:	680b      	ldr	r3, [r1, #0]
 80069da:	493a      	ldr	r1, [pc, #232]	; (8006ac4 <HAL_ADCEx_InjectedConfigChannel+0x380>)
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	fba1 1303 	umull	r1, r3, r1, r3
 80069e2:	099b      	lsrs	r3, r3, #6
 80069e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	3318      	adds	r3, #24
 80069ec:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f43f af21 	beq.w	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
          wait_loop_index--;
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f9      	bne.n	80069f6 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8006a02:	e719      	b.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  __HAL_LOCK(hadc);
 8006a04:	2002      	movs	r0, #2
}
 8006a06:	b003      	add	sp, #12
 8006a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006a0a:	0ca5      	lsrs	r5, r4, #18
 8006a0c:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
 8006a10:	e77f      	b.n	8006912 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a12:	6e1c      	ldr	r4, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006a14:	680c      	ldr	r4, [r1, #0]
 8006a16:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006a18:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a1c:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	f000 80c2 	beq.w	8006baa <HAL_ADCEx_InjectedConfigChannel+0x466>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a26:	fa94 f6a4 	rbit	r6, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a2a:	b126      	cbz	r6, 8006a36 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006a2c:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a30:	42b5      	cmp	r5, r6
 8006a32:	f000 8115 	beq.w	8006c60 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8006a36:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8006a38:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a3a:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a3e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006a42:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a46:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8006a4a:	b127      	cbz	r7, 8006a56 <HAL_ADCEx_InjectedConfigChannel+0x312>
  return __builtin_clz(value);
 8006a4c:	fab7 f787 	clz	r7, r7
 8006a50:	42be      	cmp	r6, r7
 8006a52:	f000 811a 	beq.w	8006c8a <HAL_ADCEx_InjectedConfigChannel+0x546>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a56:	68ae      	ldr	r6, [r5, #8]
 8006a58:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a5a:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a5e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a62:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8006a66:	b127      	cbz	r7, 8006a72 <HAL_ADCEx_InjectedConfigChannel+0x32e>
  return __builtin_clz(value);
 8006a68:	fab7 f787 	clz	r7, r7
 8006a6c:	42be      	cmp	r6, r7
 8006a6e:	f000 811f 	beq.w	8006cb0 <HAL_ADCEx_InjectedConfigChannel+0x56c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a72:	68ee      	ldr	r6, [r5, #12]
 8006a74:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a76:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a78:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7c:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	f43f aea9 	beq.w	80067d8 <HAL_ADCEx_InjectedConfigChannel+0x94>
  return __builtin_clz(value);
 8006a86:	fab7 f787 	clz	r7, r7
 8006a8a:	42b7      	cmp	r7, r6
 8006a8c:	f47f aea4 	bne.w	80067d8 <HAL_ADCEx_InjectedConfigChannel+0x94>
  MODIFY_REG(*preg,
 8006a90:	682c      	ldr	r4, [r5, #0]
 8006a92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006a96:	602c      	str	r4, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8006a98:	680c      	ldr	r4, [r1, #0]
}
 8006a9a:	e69d      	b.n	80067d8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8006a9c:	0007ffff 	.word	0x0007ffff
 8006aa0:	407f0000 	.word	0x407f0000
 8006aa4:	80080000 	.word	0x80080000
 8006aa8:	50040300 	.word	0x50040300
 8006aac:	c7520000 	.word	0xc7520000
 8006ab0:	cb840000 	.word	0xcb840000
 8006ab4:	80000001 	.word	0x80000001
 8006ab8:	50040000 	.word	0x50040000
 8006abc:	82082000 	.word	0x82082000
 8006ac0:	20000300 	.word	0x20000300
 8006ac4:	053e2d63 	.word	0x053e2d63
 8006ac8:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006acc:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	f000 8094 	beq.w	8006bfe <HAL_ADCEx_InjectedConfigChannel+0x4ba>
  return __builtin_clz(value);
 8006ad6:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ada:	3501      	adds	r5, #1
 8006adc:	f005 051f 	and.w	r5, r5, #31
 8006ae0:	2d09      	cmp	r5, #9
 8006ae2:	f240 808c 	bls.w	8006bfe <HAL_ADCEx_InjectedConfigChannel+0x4ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006aea:	2d00      	cmp	r5, #0
 8006aec:	f000 80f4 	beq.w	8006cd8 <HAL_ADCEx_InjectedConfigChannel+0x594>
  return __builtin_clz(value);
 8006af0:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006af4:	3501      	adds	r5, #1
 8006af6:	06ad      	lsls	r5, r5, #26
 8006af8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afc:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	f000 80e7 	beq.w	8006cd4 <HAL_ADCEx_InjectedConfigChannel+0x590>
  return __builtin_clz(value);
 8006b06:	fab6 f686 	clz	r6, r6
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	f006 061f 	and.w	r6, r6, #31
 8006b10:	2701      	movs	r7, #1
 8006b12:	fa07 f606 	lsl.w	r6, r7, r6
 8006b16:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006b1c:	2c00      	cmp	r4, #0
 8006b1e:	f000 80de 	beq.w	8006cde <HAL_ADCEx_InjectedConfigChannel+0x59a>
  return __builtin_clz(value);
 8006b22:	fab4 f484 	clz	r4, r4
 8006b26:	1c66      	adds	r6, r4, #1
 8006b28:	f006 061f 	and.w	r6, r6, #31
 8006b2c:	2403      	movs	r4, #3
 8006b2e:	f06f 071d 	mvn.w	r7, #29
 8006b32:	fb14 7406 	smlabb	r4, r4, r6, r7
 8006b36:	0524      	lsls	r4, r4, #20
 8006b38:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b3c:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b3e:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8006b40:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b42:	f006 0604 	and.w	r6, r6, #4
 8006b46:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8006b4a:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8006b4e:	fa05 fc04 	lsl.w	ip, r5, r4
 8006b52:	f04f 0e07 	mov.w	lr, #7
 8006b56:	59bd      	ldr	r5, [r7, r6]
 8006b58:	fa0e f404 	lsl.w	r4, lr, r4
 8006b5c:	ea25 0404 	bic.w	r4, r5, r4
 8006b60:	ea44 040c 	orr.w	r4, r4, ip
 8006b64:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8006b66:	680c      	ldr	r4, [r1, #0]
}
 8006b68:	e64e      	b.n	8006808 <HAL_ADCEx_InjectedConfigChannel+0xc4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b6a:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8006b6c:	f3c4 5604 	ubfx	r6, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b70:	f005 0504 	and.w	r5, r5, #4
 8006b74:	f103 0414 	add.w	r4, r3, #20
  MODIFY_REG(*preg,
 8006b78:	2707      	movs	r7, #7
 8006b7a:	40b7      	lsls	r7, r6
 8006b7c:	5966      	ldr	r6, [r4, r5]
 8006b7e:	ea26 0607 	bic.w	r6, r6, r7
 8006b82:	5166      	str	r6, [r4, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006b84:	695c      	ldr	r4, [r3, #20]
 8006b86:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006b8a:	615c      	str	r4, [r3, #20]
}
 8006b8c:	e68e      	b.n	80068ac <HAL_ADCEx_InjectedConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->CFGR2,
 8006b8e:	e9d1 570b 	ldrd	r5, r7, [r1, #44]	; 0x2c
 8006b92:	691e      	ldr	r6, [r3, #16]
 8006b94:	433d      	orrs	r5, r7
 8006b96:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 8006b9a:	4335      	orrs	r5, r6
 8006b9c:	f045 0502 	orr.w	r5, r5, #2
 8006ba0:	611d      	str	r5, [r3, #16]
 8006ba2:	e669      	b.n	8006878 <HAL_ADCEx_InjectedConfigChannel+0x134>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	461e      	mov	r6, r3
 8006ba8:	e5ed      	b.n	8006786 <HAL_ADCEx_InjectedConfigChannel+0x42>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006baa:	f3c4 6784 	ubfx	r7, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006bae:	42bd      	cmp	r5, r7
 8006bb0:	d056      	beq.n	8006c60 <HAL_ADCEx_InjectedConfigChannel+0x51c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006bb2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8006bb4:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bb6:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006bba:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006bbe:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8006bc2:	42be      	cmp	r6, r7
 8006bc4:	d061      	beq.n	8006c8a <HAL_ADCEx_InjectedConfigChannel+0x546>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006bc6:	68ae      	ldr	r6, [r5, #8]
 8006bc8:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bca:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bce:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006bd2:	f3c4 6784 	ubfx	r7, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bd6:	42b7      	cmp	r7, r6
 8006bd8:	d06a      	beq.n	8006cb0 <HAL_ADCEx_InjectedConfigChannel+0x56c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006bda:	68ee      	ldr	r6, [r5, #12]
 8006bdc:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bde:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006be0:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006be4:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8006be8:	e74f      	b.n	8006a8a <HAL_ADCEx_InjectedConfigChannel+0x346>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006bea:	06a5      	lsls	r5, r4, #26
 8006bec:	2401      	movs	r4, #1
 8006bee:	40b4      	lsls	r4, r6
 8006bf0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006bf4:	4325      	orrs	r5, r4
 8006bf6:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8006bfa:	0524      	lsls	r4, r4, #20
 8006bfc:	e79e      	b.n	8006b3c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfe:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006c02:	2d00      	cmp	r5, #0
 8006c04:	d072      	beq.n	8006cec <HAL_ADCEx_InjectedConfigChannel+0x5a8>
  return __builtin_clz(value);
 8006c06:	fab5 f585 	clz	r5, r5
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	06ad      	lsls	r5, r5, #26
 8006c0e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c12:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	d066      	beq.n	8006ce8 <HAL_ADCEx_InjectedConfigChannel+0x5a4>
  return __builtin_clz(value);
 8006c1a:	fab6 f686 	clz	r6, r6
 8006c1e:	3601      	adds	r6, #1
 8006c20:	f006 061f 	and.w	r6, r6, #31
 8006c24:	2701      	movs	r7, #1
 8006c26:	fa07 f606 	lsl.w	r6, r7, r6
 8006c2a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	d056      	beq.n	8006ce2 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return __builtin_clz(value);
 8006c34:	fab4 f484 	clz	r4, r4
 8006c38:	3401      	adds	r4, #1
 8006c3a:	f004 041f 	and.w	r4, r4, #31
 8006c3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006c42:	0524      	lsls	r4, r4, #20
 8006c44:	e77a      	b.n	8006b3c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c46:	6d95      	ldr	r5, [r2, #88]	; 0x58
 8006c48:	f045 0520 	orr.w	r5, r5, #32
 8006c4c:	6595      	str	r5, [r2, #88]	; 0x58
        tmp_hal_status = HAL_ERROR;
 8006c4e:	e60a      	b.n	8006866 <HAL_ADCEx_InjectedConfigChannel+0x122>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c50:	68b3      	ldr	r3, [r6, #8]
 8006c52:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006c56:	433b      	orrs	r3, r7
 8006c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c5c:	60b3      	str	r3, [r6, #8]
}
 8006c5e:	e5eb      	b.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(*preg,
 8006c60:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8006c62:	461d      	mov	r5, r3
 8006c64:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006c68:	f845 4f60 	str.w	r4, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c6c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006c6e:	680c      	ldr	r4, [r1, #0]
 8006c70:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8006c72:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c76:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c7a:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006c7e:	2f00      	cmp	r7, #0
 8006c80:	f47f aee1 	bne.w	8006a46 <HAL_ADCEx_InjectedConfigChannel+0x302>
 8006c84:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8006c88:	e79b      	b.n	8006bc2 <HAL_ADCEx_InjectedConfigChannel+0x47e>
  MODIFY_REG(*preg,
 8006c8a:	f8dc 4000 	ldr.w	r4, [ip]
 8006c8e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006c92:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c96:	68ac      	ldr	r4, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006c98:	680c      	ldr	r4, [r1, #0]
 8006c9a:	68ae      	ldr	r6, [r5, #8]
 8006c9c:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ca0:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ca4:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006ca8:	2f00      	cmp	r7, #0
 8006caa:	f47f aeda 	bne.w	8006a62 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8006cae:	e790      	b.n	8006bd2 <HAL_ADCEx_InjectedConfigChannel+0x48e>
  MODIFY_REG(*preg,
 8006cb0:	f8dc 4000 	ldr.w	r4, [ip]
 8006cb4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006cb8:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006cbc:	68ec      	ldr	r4, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006cbe:	680c      	ldr	r4, [r1, #0]
 8006cc0:	68ee      	ldr	r6, [r5, #12]
 8006cc2:	f3c4 0712 	ubfx	r7, r4, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cc6:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006cc8:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006ccc:	2f00      	cmp	r7, #0
 8006cce:	f47f aed5 	bne.w	8006a7c <HAL_ADCEx_InjectedConfigChannel+0x338>
 8006cd2:	e787      	b.n	8006be4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8006cd4:	2602      	movs	r6, #2
 8006cd6:	e71e      	b.n	8006b16 <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 8006cd8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006cdc:	e70e      	b.n	8006afc <HAL_ADCEx_InjectedConfigChannel+0x3b8>
 8006cde:	4c05      	ldr	r4, [pc, #20]	; (8006cf4 <HAL_ADCEx_InjectedConfigChannel+0x5b0>)
 8006ce0:	e72c      	b.n	8006b3c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8006ce2:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8006ce6:	e729      	b.n	8006b3c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8006ce8:	2602      	movs	r6, #2
 8006cea:	e79e      	b.n	8006c2a <HAL_ADCEx_InjectedConfigChannel+0x4e6>
 8006cec:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006cf0:	e78f      	b.n	8006c12 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
 8006cf2:	bf00      	nop
 8006cf4:	fe500000 	.word	0xfe500000

08006cf8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cf8:	4907      	ldr	r1, [pc, #28]	; (8006d18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006cfa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cfc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cfe:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d06:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d08:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006d12:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	e000ed00 	.word	0xe000ed00

08006d1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d1c:	4b1c      	ldr	r3, [pc, #112]	; (8006d90 <HAL_NVIC_SetPriority+0x74>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d24:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d26:	f1c3 0e07 	rsb	lr, r3, #7
 8006d2a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d2e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d32:	bf28      	it	cs
 8006d34:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d38:	f1bc 0f06 	cmp.w	ip, #6
 8006d3c:	d91b      	bls.n	8006d76 <HAL_NVIC_SetPriority+0x5a>
 8006d3e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006d44:	fa0c fc03 	lsl.w	ip, ip, r3
 8006d48:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006d50:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006d54:	ea21 010c 	bic.w	r1, r1, ip
 8006d58:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006d5a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d5c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006d60:	db0c      	blt.n	8006d7c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d62:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006d66:	0109      	lsls	r1, r1, #4
 8006d68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006d6c:	b2c9      	uxtb	r1, r1
 8006d6e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006d72:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d76:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d78:	4613      	mov	r3, r2
 8006d7a:	e7e7      	b.n	8006d4c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_NVIC_SetPriority+0x78>)
 8006d7e:	f000 000f 	and.w	r0, r0, #15
 8006d82:	0109      	lsls	r1, r1, #4
 8006d84:	4403      	add	r3, r0
 8006d86:	b2c9      	uxtb	r1, r1
 8006d88:	7619      	strb	r1, [r3, #24]
 8006d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d8e:	bf00      	nop
 8006d90:	e000ed00 	.word	0xe000ed00
 8006d94:	e000ecfc 	.word	0xe000ecfc

08006d98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	db07      	blt.n	8006dac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d9c:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <HAL_NVIC_EnableIRQ+0x18>)
 8006d9e:	0941      	lsrs	r1, r0, #5
 8006da0:	2301      	movs	r3, #1
 8006da2:	f000 001f 	and.w	r0, r0, #31
 8006da6:	4083      	lsls	r3, r0
 8006da8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e100 	.word	0xe000e100

08006db4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006db4:	2800      	cmp	r0, #0
 8006db6:	db0c      	blt.n	8006dd2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006db8:	0943      	lsrs	r3, r0, #5
 8006dba:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <HAL_NVIC_DisableIRQ+0x20>)
 8006dbc:	f000 001f 	and.w	r0, r0, #31
 8006dc0:	3320      	adds	r3, #32
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4082      	lsls	r2, r0
 8006dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006dca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006dce:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006dd2:	4770      	bx	lr
 8006dd4:	e000e100 	.word	0xe000e100

08006dd8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006dd8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ddc:	4905      	ldr	r1, [pc, #20]	; (8006df4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006dde:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006de0:	68ca      	ldr	r2, [r1, #12]
 8006de2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60cb      	str	r3, [r1, #12]
 8006dea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006dee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006df0:	e7fd      	b.n	8006dee <HAL_NVIC_SystemReset+0x16>
 8006df2:	bf00      	nop
 8006df4:	e000ed00 	.word	0xe000ed00
 8006df8:	05fa0004 	.word	0x05fa0004

08006dfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dfc:	3801      	subs	r0, #1
 8006dfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006e02:	d210      	bcs.n	8006e26 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e04:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e0a:	4c08      	ldr	r4, [pc, #32]	; (8006e2c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e0c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e0e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8006e12:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e16:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e18:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e1a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e1c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8006e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e22:	6119      	str	r1, [r3, #16]
 8006e24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006e26:	2001      	movs	r0, #1
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	e000ed00 	.word	0xe000ed00

08006e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e34:	680c      	ldr	r4, [r1, #0]
{
 8006e36:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e38:	2c00      	cmp	r4, #0
 8006e3a:	f000 808c 	beq.w	8006f56 <HAL_GPIO_Init+0x126>
 8006e3e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e42:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8007038 <HAL_GPIO_Init+0x208>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e46:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800703c <HAL_GPIO_Init+0x20c>
  uint32_t position = 0x00u;
 8006e4a:	4663      	mov	r3, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e4c:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e4e:	2601      	movs	r6, #1
 8006e50:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8006e52:	ea16 0904 	ands.w	r9, r6, r4
 8006e56:	d077      	beq.n	8006f48 <HAL_GPIO_Init+0x118>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e5c:	f005 0203 	and.w	r2, r5, #3
 8006e60:	1e51      	subs	r1, r2, #1
 8006e62:	2901      	cmp	r1, #1
 8006e64:	d97a      	bls.n	8006f5c <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e66:	2a03      	cmp	r2, #3
 8006e68:	f040 80b5 	bne.w	8006fd6 <HAL_GPIO_Init+0x1a6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e6c:	fa02 f20c 	lsl.w	r2, r2, ip
 8006e70:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8006e72:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006e74:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006e76:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e78:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006e7c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e7e:	d063      	beq.n	8006f48 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e80:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 8006e8c:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 8006e90:	f002 0201 	and.w	r2, r2, #1
 8006e94:	9203      	str	r2, [sp, #12]
 8006e96:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006e98:	f023 0203 	bic.w	r2, r3, #3
 8006e9c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006ea0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006ea4:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8006ea8:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006eaa:	00b6      	lsls	r6, r6, #2
 8006eac:	270f      	movs	r7, #15
 8006eae:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006eb0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006eb4:	ea21 0107 	bic.w	r1, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006eb8:	d01f      	beq.n	8006efa <HAL_GPIO_Init+0xca>
 8006eba:	4f58      	ldr	r7, [pc, #352]	; (800701c <HAL_GPIO_Init+0x1ec>)
 8006ebc:	42b8      	cmp	r0, r7
 8006ebe:	f000 8094 	beq.w	8006fea <HAL_GPIO_Init+0x1ba>
 8006ec2:	4f57      	ldr	r7, [pc, #348]	; (8007020 <HAL_GPIO_Init+0x1f0>)
 8006ec4:	42b8      	cmp	r0, r7
 8006ec6:	f000 8095 	beq.w	8006ff4 <HAL_GPIO_Init+0x1c4>
 8006eca:	4f56      	ldr	r7, [pc, #344]	; (8007024 <HAL_GPIO_Init+0x1f4>)
 8006ecc:	42b8      	cmp	r0, r7
 8006ece:	f000 8087 	beq.w	8006fe0 <HAL_GPIO_Init+0x1b0>
 8006ed2:	4f55      	ldr	r7, [pc, #340]	; (8007028 <HAL_GPIO_Init+0x1f8>)
 8006ed4:	42b8      	cmp	r0, r7
 8006ed6:	f000 8097 	beq.w	8007008 <HAL_GPIO_Init+0x1d8>
 8006eda:	4f54      	ldr	r7, [pc, #336]	; (800702c <HAL_GPIO_Init+0x1fc>)
 8006edc:	42b8      	cmp	r0, r7
 8006ede:	f000 8098 	beq.w	8007012 <HAL_GPIO_Init+0x1e2>
 8006ee2:	4f53      	ldr	r7, [pc, #332]	; (8007030 <HAL_GPIO_Init+0x200>)
 8006ee4:	42b8      	cmp	r0, r7
 8006ee6:	f000 808a 	beq.w	8006ffe <HAL_GPIO_Init+0x1ce>
 8006eea:	4f52      	ldr	r7, [pc, #328]	; (8007034 <HAL_GPIO_Init+0x204>)
 8006eec:	42b8      	cmp	r0, r7
 8006eee:	bf0c      	ite	eq
 8006ef0:	2707      	moveq	r7, #7
 8006ef2:	2708      	movne	r7, #8
 8006ef4:	fa07 f606 	lsl.w	r6, r7, r6
 8006ef8:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006efa:	6091      	str	r1, [r2, #8]
        temp = EXTI->RTSR1;
 8006efc:	f8da 2008 	ldr.w	r2, [sl, #8]
        temp &= ~(iocurrent);
 8006f00:	ea6f 0109 	mvn.w	r1, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f04:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8006f06:	bf54      	ite	pl
 8006f08:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006f0a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8006f0e:	f8ca 2008 	str.w	r2, [sl, #8]

        temp = EXTI->FTSR1;
 8006f12:	f8da 200c 	ldr.w	r2, [sl, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f16:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 8006f18:	bf54      	ite	pl
 8006f1a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006f1c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 8006f20:	f8ca 200c 	str.w	r2, [sl, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006f24:	f8da 2004 	ldr.w	r2, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f28:	03ae      	lsls	r6, r5, #14
        temp &= ~(iocurrent);
 8006f2a:	bf54      	ite	pl
 8006f2c:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006f2e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = temp;
 8006f32:	f8ca 2004 	str.w	r2, [sl, #4]

        temp = EXTI->IMR1;
 8006f36:	f8da 2000 	ldr.w	r2, [sl]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f3a:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8006f3c:	bf54      	ite	pl
 8006f3e:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006f40:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8006f44:	f8ca 2000 	str.w	r2, [sl]
      }
    }

    position++;
 8006f48:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f4a:	fa34 f203 	lsrs.w	r2, r4, r3
 8006f4e:	f10c 0c02 	add.w	ip, ip, #2
 8006f52:	f47f af7c 	bne.w	8006e4e <HAL_GPIO_Init+0x1e>
  }
}
 8006f56:	b005      	add	sp, #20
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006f5c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006f60:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006f64:	2703      	movs	r7, #3
 8006f66:	fa07 f70c 	lsl.w	r7, r7, ip
 8006f6a:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006f6e:	fa01 f10c 	lsl.w	r1, r1, ip
 8006f72:	ea41 010e 	orr.w	r1, r1, lr
        GPIOx->OSPEEDR = temp;
 8006f76:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006f78:	43f9      	mvns	r1, r7
        temp = GPIOx->OTYPER;
 8006f7a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f7c:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f80:	f3c5 1600 	ubfx	r6, r5, #4, #1
 8006f84:	409e      	lsls	r6, r3
 8006f86:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8006f88:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8006f8a:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f8c:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f90:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f92:	fa06 f60c 	lsl.w	r6, r6, ip
 8006f96:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f98:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006f9a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f9c:	fa02 f20c 	lsl.w	r2, r2, ip
 8006fa0:	f47f af67 	bne.w	8006e72 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 8006fa4:	08df      	lsrs	r7, r3, #3
 8006fa6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006faa:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8006fae:	6a3e      	ldr	r6, [r7, #32]
 8006fb0:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fb2:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006fb6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fba:	fa06 f60e 	lsl.w	r6, r6, lr
 8006fbe:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006fc0:	260f      	movs	r6, #15
 8006fc2:	fa06 fe0e 	lsl.w	lr, r6, lr
 8006fc6:	9e00      	ldr	r6, [sp, #0]
 8006fc8:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fcc:	9e01      	ldr	r6, [sp, #4]
 8006fce:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8006fd2:	623e      	str	r6, [r7, #32]
 8006fd4:	e74d      	b.n	8006e72 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	fa01 f10c 	lsl.w	r1, r1, ip
 8006fdc:	43c9      	mvns	r1, r1
 8006fde:	e7d4      	b.n	8006f8a <HAL_GPIO_Init+0x15a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006fe0:	2703      	movs	r7, #3
 8006fe2:	fa07 f606 	lsl.w	r6, r7, r6
 8006fe6:	4331      	orrs	r1, r6
 8006fe8:	e787      	b.n	8006efa <HAL_GPIO_Init+0xca>
 8006fea:	2701      	movs	r7, #1
 8006fec:	fa07 f606 	lsl.w	r6, r7, r6
 8006ff0:	4331      	orrs	r1, r6
 8006ff2:	e782      	b.n	8006efa <HAL_GPIO_Init+0xca>
 8006ff4:	2702      	movs	r7, #2
 8006ff6:	fa07 f606 	lsl.w	r6, r7, r6
 8006ffa:	4331      	orrs	r1, r6
 8006ffc:	e77d      	b.n	8006efa <HAL_GPIO_Init+0xca>
 8006ffe:	2706      	movs	r7, #6
 8007000:	fa07 f606 	lsl.w	r6, r7, r6
 8007004:	4331      	orrs	r1, r6
 8007006:	e778      	b.n	8006efa <HAL_GPIO_Init+0xca>
 8007008:	2704      	movs	r7, #4
 800700a:	fa07 f606 	lsl.w	r6, r7, r6
 800700e:	4331      	orrs	r1, r6
 8007010:	e773      	b.n	8006efa <HAL_GPIO_Init+0xca>
 8007012:	2705      	movs	r7, #5
 8007014:	fa07 f606 	lsl.w	r6, r7, r6
 8007018:	4331      	orrs	r1, r6
 800701a:	e76e      	b.n	8006efa <HAL_GPIO_Init+0xca>
 800701c:	48000400 	.word	0x48000400
 8007020:	48000800 	.word	0x48000800
 8007024:	48000c00 	.word	0x48000c00
 8007028:	48001000 	.word	0x48001000
 800702c:	48001400 	.word	0x48001400
 8007030:	48001800 	.word	0x48001800
 8007034:	48001c00 	.word	0x48001c00
 8007038:	40021000 	.word	0x40021000
 800703c:	40010400 	.word	0x40010400

08007040 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007040:	2900      	cmp	r1, #0
 8007042:	f000 8099 	beq.w	8007178 <HAL_GPIO_DeInit+0x138>
{
 8007046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800704a:	4f4c      	ldr	r7, [pc, #304]	; (800717c <HAL_GPIO_DeInit+0x13c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800704c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8007194 <HAL_GPIO_DeInit+0x154>
 8007050:	f8df a144 	ldr.w	sl, [pc, #324]	; 8007198 <HAL_GPIO_DeInit+0x158>
{
 8007054:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8007056:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007058:	f04f 0801 	mov.w	r8, #1
 800705c:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent != 0x00u)
 8007060:	ea12 0e01 	ands.w	lr, r2, r1
 8007064:	d065      	beq.n	8007132 <HAL_GPIO_DeInit+0xf2>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8007066:	f023 0503 	bic.w	r5, r3, #3
 800706a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800706e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007072:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8007076:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800707a:	00a4      	lsls	r4, r4, #2
 800707c:	260f      	movs	r6, #15
 800707e:	40a6      	lsls	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007080:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007084:	9601      	str	r6, [sp, #4]
 8007086:	ea06 0c0c 	and.w	ip, r6, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800708a:	d019      	beq.n	80070c0 <HAL_GPIO_DeInit+0x80>
 800708c:	4548      	cmp	r0, r9
 800708e:	d057      	beq.n	8007140 <HAL_GPIO_DeInit+0x100>
 8007090:	4550      	cmp	r0, sl
 8007092:	d058      	beq.n	8007146 <HAL_GPIO_DeInit+0x106>
 8007094:	4e3a      	ldr	r6, [pc, #232]	; (8007180 <HAL_GPIO_DeInit+0x140>)
 8007096:	42b0      	cmp	r0, r6
 8007098:	d05f      	beq.n	800715a <HAL_GPIO_DeInit+0x11a>
 800709a:	4e3a      	ldr	r6, [pc, #232]	; (8007184 <HAL_GPIO_DeInit+0x144>)
 800709c:	42b0      	cmp	r0, r6
 800709e:	d061      	beq.n	8007164 <HAL_GPIO_DeInit+0x124>
 80070a0:	4e39      	ldr	r6, [pc, #228]	; (8007188 <HAL_GPIO_DeInit+0x148>)
 80070a2:	42b0      	cmp	r0, r6
 80070a4:	d054      	beq.n	8007150 <HAL_GPIO_DeInit+0x110>
 80070a6:	4e39      	ldr	r6, [pc, #228]	; (800718c <HAL_GPIO_DeInit+0x14c>)
 80070a8:	42b0      	cmp	r0, r6
 80070aa:	d060      	beq.n	800716e <HAL_GPIO_DeInit+0x12e>
 80070ac:	4e38      	ldr	r6, [pc, #224]	; (8007190 <HAL_GPIO_DeInit+0x150>)
 80070ae:	42b0      	cmp	r0, r6
 80070b0:	bf14      	ite	ne
 80070b2:	f04f 0b08 	movne.w	fp, #8
 80070b6:	f04f 0b07 	moveq.w	fp, #7
 80070ba:	fa0b f404 	lsl.w	r4, fp, r4
 80070be:	e000      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 80070c0:	2400      	movs	r4, #0
 80070c2:	45a4      	cmp	ip, r4
 80070c4:	d114      	bne.n	80070f0 <HAL_GPIO_DeInit+0xb0>
        EXTI->IMR1 &= ~(iocurrent);
 80070c6:	683c      	ldr	r4, [r7, #0]
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
        EXTI->RTSR1 &= ~(iocurrent);

        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80070c8:	9e01      	ldr	r6, [sp, #4]
        EXTI->IMR1 &= ~(iocurrent);
 80070ca:	ea24 040e 	bic.w	r4, r4, lr
 80070ce:	603c      	str	r4, [r7, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80070d0:	687c      	ldr	r4, [r7, #4]
 80070d2:	ea24 040e 	bic.w	r4, r4, lr
 80070d6:	607c      	str	r4, [r7, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80070d8:	68fc      	ldr	r4, [r7, #12]
 80070da:	ea24 040e 	bic.w	r4, r4, lr
 80070de:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80070e0:	68bc      	ldr	r4, [r7, #8]
 80070e2:	ea24 040e 	bic.w	r4, r4, lr
 80070e6:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80070e8:	68ac      	ldr	r4, [r5, #8]
 80070ea:	ea24 0406 	bic.w	r4, r4, r6
 80070ee:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80070f0:	6805      	ldr	r5, [r0, #0]
 80070f2:	005e      	lsls	r6, r3, #1
 80070f4:	2403      	movs	r4, #3
 80070f6:	40b4      	lsls	r4, r6
 80070f8:	4325      	orrs	r5, r4
 80070fa:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80070fc:	08dd      	lsrs	r5, r3, #3
 80070fe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007102:	f003 0e07 	and.w	lr, r3, #7
 8007106:	6a2e      	ldr	r6, [r5, #32]
 8007108:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800710c:	f04f 0c0f 	mov.w	ip, #15
 8007110:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007114:	ea26 060c 	bic.w	r6, r6, ip
 8007118:	622e      	str	r6, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800711a:	6885      	ldr	r5, [r0, #8]
 800711c:	ea25 0504 	bic.w	r5, r5, r4
 8007120:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007122:	6845      	ldr	r5, [r0, #4]
 8007124:	ea25 0202 	bic.w	r2, r5, r2
 8007128:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800712a:	68c2      	ldr	r2, [r0, #12]
 800712c:	ea22 0204 	bic.w	r2, r2, r4
 8007130:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007132:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8007134:	fa31 f203 	lsrs.w	r2, r1, r3
 8007138:	d190      	bne.n	800705c <HAL_GPIO_DeInit+0x1c>
  }
}
 800713a:	b003      	add	sp, #12
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007140:	fa08 f404 	lsl.w	r4, r8, r4
 8007144:	e7bd      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 8007146:	f04f 0b02 	mov.w	fp, #2
 800714a:	fa0b f404 	lsl.w	r4, fp, r4
 800714e:	e7b8      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 8007150:	f04f 0b05 	mov.w	fp, #5
 8007154:	fa0b f404 	lsl.w	r4, fp, r4
 8007158:	e7b3      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 800715a:	f04f 0b03 	mov.w	fp, #3
 800715e:	fa0b f404 	lsl.w	r4, fp, r4
 8007162:	e7ae      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 8007164:	f04f 0b04 	mov.w	fp, #4
 8007168:	fa0b f404 	lsl.w	r4, fp, r4
 800716c:	e7a9      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 800716e:	f04f 0b06 	mov.w	fp, #6
 8007172:	fa0b f404 	lsl.w	r4, fp, r4
 8007176:	e7a4      	b.n	80070c2 <HAL_GPIO_DeInit+0x82>
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40010400 	.word	0x40010400
 8007180:	48000c00 	.word	0x48000c00
 8007184:	48001000 	.word	0x48001000
 8007188:	48001400 	.word	0x48001400
 800718c:	48001800 	.word	0x48001800
 8007190:	48001c00 	.word	0x48001c00
 8007194:	48000400 	.word	0x48000400
 8007198:	48000800 	.word	0x48000800

0800719c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800719c:	6903      	ldr	r3, [r0, #16]
 800719e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80071a0:	bf14      	ite	ne
 80071a2:	2001      	movne	r0, #1
 80071a4:	2000      	moveq	r0, #0
 80071a6:	4770      	bx	lr

080071a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071a8:	b10a      	cbz	r2, 80071ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071aa:	6181      	str	r1, [r0, #24]
 80071ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071ae:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071b4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071b6:	ea01 0203 	and.w	r2, r1, r3
 80071ba:	ea21 0103 	bic.w	r1, r1, r3
 80071be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071c2:	6181      	str	r1, [r0, #24]
}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop

080071c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80071c8:	4a04      	ldr	r2, [pc, #16]	; (80071dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80071ca:	6951      	ldr	r1, [r2, #20]
 80071cc:	4201      	tst	r1, r0
 80071ce:	d100      	bne.n	80071d2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80071d0:	4770      	bx	lr
{
 80071d2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071d4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071d6:	f7fd f831 	bl	800423c <HAL_GPIO_EXTI_Callback>
  }
}
 80071da:	bd08      	pop	{r3, pc}
 80071dc:	40010400 	.word	0x40010400

080071e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f000 8088 	beq.w	80072fa <HAL_PCD_Init+0x11a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071ea:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80071ee:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071f0:	4605      	mov	r5, r0
 80071f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d079      	beq.n	80072ee <HAL_PCD_Init+0x10e>
 80071fa:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071fc:	2303      	movs	r3, #3
 80071fe:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007202:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007204:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007206:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800720a:	bf08      	it	eq
 800720c:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800720e:	f003 f92d 	bl	800a46c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007212:	f856 eb10 	ldr.w	lr, [r6], #16
 8007216:	46b4      	mov	ip, r6
 8007218:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800721c:	466c      	mov	r4, sp
 800721e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007220:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007226:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800722a:	e884 0003 	stmia.w	r4, {r0, r1}
 800722e:	1d2f      	adds	r7, r5, #4
 8007230:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007234:	4670      	mov	r0, lr
 8007236:	f003 f851 	bl	800a2dc <USB_CoreInit>
 800723a:	4604      	mov	r4, r0
 800723c:	b130      	cbz	r0, 800724c <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800723e:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007240:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8007242:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007244:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8007248:	b00b      	add	sp, #44	; 0x2c
 800724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800724c:	4601      	mov	r1, r0
 800724e:	6828      	ldr	r0, [r5, #0]
 8007250:	f003 f914 	bl	800a47c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007254:	6868      	ldr	r0, [r5, #4]
 8007256:	b358      	cbz	r0, 80072b0 <HAL_PCD_Init+0xd0>
 8007258:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800725a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800725e:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8007260:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8007264:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007268:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007270:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007274:	fa5f f28c 	uxtb.w	r2, ip
 8007278:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 800727a:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 800727e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007282:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8007286:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007288:	d3ea      	bcc.n	8007260 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800728a:	2200      	movs	r2, #0
 800728c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8007290:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007294:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8007296:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800729a:	b2cc      	uxtb	r4, r1
 800729c:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800729e:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 80072a2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072a6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ae:	d3ed      	bcc.n	800728c <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80072b2:	466c      	mov	r4, sp
 80072b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80072b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 80072be:	e884 0003 	stmia.w	r4, {r0, r1}
 80072c2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80072c6:	6828      	ldr	r0, [r5, #0]
 80072c8:	f003 f95e 	bl	800a588 <USB_DevInit>
 80072cc:	4604      	mov	r4, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d1b5      	bne.n	800723e <HAL_PCD_Init+0x5e>
  if (hpcd->Init.lpm_enable == 1U)
 80072d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80072d4:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072d8:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80072da:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80072dc:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80072e0:	d00f      	beq.n	8007302 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	f003 fcde 	bl	800aca4 <USB_DevDisconnect>
}
 80072e8:	4620      	mov	r0, r4
 80072ea:	b00b      	add	sp, #44	; 0x2c
 80072ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80072ee:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80072f2:	f7fd f821 	bl	8004338 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 80072f6:	6828      	ldr	r0, [r5, #0]
 80072f8:	e780      	b.n	80071fc <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 80072fa:	2401      	movs	r4, #1
}
 80072fc:	4620      	mov	r0, r4
 80072fe:	b00b      	add	sp, #44	; 0x2c
 8007300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007302:	4628      	mov	r0, r5
 8007304:	f000 fc4c 	bl	8007ba0 <HAL_PCDEx_ActivateLPM>
 8007308:	e7eb      	b.n	80072e2 <HAL_PCD_Init+0x102>
 800730a:	bf00      	nop

0800730c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800730c:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800730e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007312:	2b01      	cmp	r3, #1
{
 8007314:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007316:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007318:	d012      	beq.n	8007340 <HAL_PCD_Start+0x34>
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800731a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hpcd);
 800731c:	2201      	movs	r2, #1
  if (hpcd->Init.battery_charging_enable == 1U)
 800731e:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8007320:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8007324:	d103      	bne.n	800732e <HAL_PCD_Start+0x22>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007326:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800732c:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800732e:	f003 f895 	bl	800a45c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	f003 fca6 	bl	800ac84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007338:	2000      	movs	r0, #0
 800733a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800733e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007340:	2002      	movs	r0, #2
}
 8007342:	bd10      	pop	{r4, pc}

08007344 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007348:	6806      	ldr	r6, [r0, #0]
{
 800734a:	b085      	sub	sp, #20
 800734c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800734e:	4630      	mov	r0, r6
 8007350:	f003 fce6 	bl	800ad20 <USB_GetMode>
 8007354:	b110      	cbz	r0, 800735c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8007356:	b005      	add	sp, #20
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800735c:	4605      	mov	r5, r0
 800735e:	6820      	ldr	r0, [r4, #0]
 8007360:	f003 fcb0 	bl	800acc4 <USB_ReadInterrupts>
 8007364:	2800      	cmp	r0, #0
 8007366:	d0f6      	beq.n	8007356 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	f003 fcab 	bl	800acc4 <USB_ReadInterrupts>
 800736e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	bf1e      	ittt	ne
 8007376:	6943      	ldrne	r3, [r0, #20]
 8007378:	f003 0302 	andne.w	r3, r3, #2
 800737c:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800737e:	f003 fca1 	bl	800acc4 <USB_ReadInterrupts>
 8007382:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007386:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007388:	d012      	beq.n	80073b0 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800738a:	6983      	ldr	r3, [r0, #24]
 800738c:	f023 0310 	bic.w	r3, r3, #16
 8007390:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8007392:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007394:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8007398:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800739a:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800739e:	f000 825a 	beq.w	8007856 <HAL_PCD_IRQHandler+0x512>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	f000 819d 	beq.w	80076e2 <HAL_PCD_IRQHandler+0x39e>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073a8:	6983      	ldr	r3, [r0, #24]
 80073aa:	f043 0310 	orr.w	r3, r3, #16
 80073ae:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80073b0:	f003 fc88 	bl	800acc4 <USB_ReadInterrupts>
 80073b4:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80073b8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80073ba:	f040 80ba 	bne.w	8007532 <HAL_PCD_IRQHandler+0x1ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80073be:	f003 fc81 	bl	800acc4 <USB_ReadInterrupts>
 80073c2:	0347      	lsls	r7, r0, #13
 80073c4:	d476      	bmi.n	80074b4 <HAL_PCD_IRQHandler+0x170>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80073c6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80073c8:	f003 fc7c 	bl	800acc4 <USB_ReadInterrupts>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	db5d      	blt.n	800748c <HAL_PCD_IRQHandler+0x148>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	f003 fc77 	bl	800acc4 <USB_ReadInterrupts>
 80073d6:	0500      	lsls	r0, r0, #20
 80073d8:	d44d      	bmi.n	8007476 <HAL_PCD_IRQHandler+0x132>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80073da:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80073dc:	f003 fc72 	bl	800acc4 <USB_ReadInterrupts>
 80073e0:	0102      	lsls	r2, r0, #4
 80073e2:	d514      	bpl.n	800740e <HAL_PCD_IRQHandler+0xca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	6953      	ldr	r3, [r2, #20]
 80073e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ec:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80073ee:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f040 815f 	bne.w	80076b6 <HAL_PCD_IRQHandler+0x372>
        hpcd->LPM_State = LPM_L1;
 80073f8:	2101      	movs	r1, #1
 80073fa:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80073fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007400:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007404:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fbdf 	bl	8007bcc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800740e:	6820      	ldr	r0, [r4, #0]
 8007410:	f003 fc58 	bl	800acc4 <USB_ReadInterrupts>
 8007414:	04c3      	lsls	r3, r0, #19
 8007416:	f100 8103 	bmi.w	8007620 <HAL_PCD_IRQHandler+0x2dc>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800741a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800741c:	f003 fc52 	bl	800acc4 <USB_ReadInterrupts>
 8007420:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8007424:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007426:	f040 80e4 	bne.w	80075f2 <HAL_PCD_IRQHandler+0x2ae>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800742a:	f003 fc4b 	bl	800acc4 <USB_ReadInterrupts>
 800742e:	0707      	lsls	r7, r0, #28
 8007430:	f100 80d6 	bmi.w	80075e0 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	f003 fc45 	bl	800acc4 <USB_ReadInterrupts>
 800743a:	02c6      	lsls	r6, r0, #11
 800743c:	f100 80c6 	bmi.w	80075cc <HAL_PCD_IRQHandler+0x288>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	f003 fc3f 	bl	800acc4 <USB_ReadInterrupts>
 8007446:	0285      	lsls	r5, r0, #10
 8007448:	f100 80b6 	bmi.w	80075b8 <HAL_PCD_IRQHandler+0x274>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	f003 fc39 	bl	800acc4 <USB_ReadInterrupts>
 8007452:	0040      	lsls	r0, r0, #1
 8007454:	f100 80a7 	bmi.w	80075a6 <HAL_PCD_IRQHandler+0x262>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	f003 fc33 	bl	800acc4 <USB_ReadInterrupts>
 800745e:	0741      	lsls	r1, r0, #29
 8007460:	f57f af79 	bpl.w	8007356 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007468:	076a      	lsls	r2, r5, #29
 800746a:	f100 8215 	bmi.w	8007898 <HAL_PCD_IRQHandler+0x554>
      hpcd->Instance->GOTGINT |= temp;
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	432a      	orrs	r2, r5
 8007472:	605a      	str	r2, [r3, #4]
 8007474:	e76f      	b.n	8007356 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007476:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800747a:	07d9      	lsls	r1, r3, #31
 800747c:	f100 8208 	bmi.w	8007890 <HAL_PCD_IRQHandler+0x54c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	6943      	ldr	r3, [r0, #20]
 8007484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007488:	6143      	str	r3, [r0, #20]
 800748a:	e7a7      	b.n	80073dc <HAL_PCD_IRQHandler+0x98>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800748c:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8007498:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800749c:	2b01      	cmp	r3, #1
 800749e:	f000 8119 	beq.w	80076d4 <HAL_PCD_IRQHandler+0x390>
        HAL_PCD_ResumeCallback(hpcd);
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7fd f8b4 	bl	8004610 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80074a8:	6820      	ldr	r0, [r4, #0]
 80074aa:	6943      	ldr	r3, [r0, #20]
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	6143      	str	r3, [r0, #20]
 80074b2:	e78e      	b.n	80073d2 <HAL_PCD_IRQHandler+0x8e>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	f003 fc11 	bl	800acdc <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80074ba:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074bc:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 80074be:	f1b9 0f00 	cmp.w	r9, #0
 80074c2:	d081      	beq.n	80073c8 <HAL_PCD_IRQHandler+0x84>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074c4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80074c8:	46a0      	mov	r8, r4
 80074ca:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 80074ce:	f04f 0b00 	mov.w	fp, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074d2:	9400      	str	r4, [sp, #0]
 80074d4:	e009      	b.n	80074ea <HAL_PCD_IRQHandler+0x1a6>
      while (ep_intr != 0U)
 80074d6:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80074da:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 80074de:	f108 081c 	add.w	r8, r8, #28
 80074e2:	f10a 0a20 	add.w	sl, sl, #32
 80074e6:	f000 8113 	beq.w	8007710 <HAL_PCD_IRQHandler+0x3cc>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074ea:	f019 0f01 	tst.w	r9, #1
 80074ee:	d0f2      	beq.n	80074d6 <HAL_PCD_IRQHandler+0x192>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074f0:	fa5f f48b 	uxtb.w	r4, fp
 80074f4:	4621      	mov	r1, r4
 80074f6:	f003 fc03 	bl	800ad00 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074fa:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074fc:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074fe:	f100 818d 	bmi.w	800781c <HAL_PCD_IRQHandler+0x4d8>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007502:	072a      	lsls	r2, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007504:	bf44      	itt	mi
 8007506:	2308      	movmi	r3, #8
 8007508:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800750c:	06eb      	lsls	r3, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800750e:	bf44      	itt	mi
 8007510:	2310      	movmi	r3, #16
 8007512:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007516:	066f      	lsls	r7, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007518:	bf44      	itt	mi
 800751a:	2340      	movmi	r3, #64	; 0x40
 800751c:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007520:	07ae      	lsls	r6, r5, #30
 8007522:	f100 8173 	bmi.w	800780c <HAL_PCD_IRQHandler+0x4c8>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007526:	062d      	lsls	r5, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007528:	9b00      	ldr	r3, [sp, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800752a:	f100 80f5 	bmi.w	8007718 <HAL_PCD_IRQHandler+0x3d4>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	e7d1      	b.n	80074d6 <HAL_PCD_IRQHandler+0x192>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007532:	f003 fbcb 	bl	800accc <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8007536:	4607      	mov	r7, r0
 8007538:	2800      	cmp	r0, #0
 800753a:	f000 80e5 	beq.w	8007708 <HAL_PCD_IRQHandler+0x3c4>
 800753e:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007540:	9501      	str	r5, [sp, #4]
 8007542:	f506 6830 	add.w	r8, r6, #2816	; 0xb00
      epnum = 0U;
 8007546:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800754a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 800754e:	e006      	b.n	800755e <HAL_PCD_IRQHandler+0x21a>
      while (ep_intr != 0U)
 8007550:	087f      	lsrs	r7, r7, #1
        epnum++;
 8007552:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8007556:	f108 0820 	add.w	r8, r8, #32
 800755a:	f000 80d7 	beq.w	800770c <HAL_PCD_IRQHandler+0x3c8>
        if ((ep_intr & 0x1U) != 0U)
 800755e:	07fd      	lsls	r5, r7, #31
 8007560:	d5f6      	bpl.n	8007550 <HAL_PCD_IRQHandler+0x20c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007562:	fa5f f189 	uxtb.w	r1, r9
 8007566:	9100      	str	r1, [sp, #0]
 8007568:	f003 fbc0 	bl	800acec <USB_ReadDevOutEPInterrupt>
 800756c:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800756e:	f01b 0f01 	tst.w	fp, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007572:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007574:	9900      	ldr	r1, [sp, #0]
 8007576:	f040 8135 	bne.w	80077e4 <HAL_PCD_IRQHandler+0x4a0>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800757a:	f01b 0f08 	tst.w	fp, #8
 800757e:	f040 811b 	bne.w	80077b8 <HAL_PCD_IRQHandler+0x474>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007582:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007586:	bf1c      	itt	ne
 8007588:	2310      	movne	r3, #16
 800758a:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800758e:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007592:	bf1c      	itt	ne
 8007594:	2320      	movne	r3, #32
 8007596:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800759a:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800759e:	bf18      	it	ne
 80075a0:	f8c8 a008 	strne.w	sl, [r8, #8]
 80075a4:	e7d4      	b.n	8007550 <HAL_PCD_IRQHandler+0x20c>
      HAL_PCD_ConnectCallback(hpcd);
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7fd f83e 	bl	8004628 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	6943      	ldr	r3, [r0, #20]
 80075b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b4:	6143      	str	r3, [r0, #20]
 80075b6:	e750      	b.n	800745a <HAL_PCD_IRQHandler+0x116>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80075b8:	4620      	mov	r0, r4
 80075ba:	2100      	movs	r1, #0
 80075bc:	f7fd f82c 	bl	8004618 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	6943      	ldr	r3, [r0, #20]
 80075c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c8:	6143      	str	r3, [r0, #20]
 80075ca:	e740      	b.n	800744e <HAL_PCD_IRQHandler+0x10a>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80075cc:	4620      	mov	r0, r4
 80075ce:	2100      	movs	r1, #0
 80075d0:	f7fd f826 	bl	8004620 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	6943      	ldr	r3, [r0, #20]
 80075d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075dc:	6143      	str	r3, [r0, #20]
 80075de:	e730      	b.n	8007442 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SOFCallback(hpcd);
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7fc ffff 	bl	80045e4 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80075e6:	6820      	ldr	r0, [r4, #0]
 80075e8:	6943      	ldr	r3, [r0, #20]
 80075ea:	f003 0308 	and.w	r3, r3, #8
 80075ee:	6143      	str	r3, [r0, #20]
 80075f0:	e721      	b.n	8007436 <HAL_PCD_IRQHandler+0xf2>
      (void)USB_ActivateSetup(hpcd->Instance);
 80075f2:	f003 fb99 	bl	800ad28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	f003 f87c 	bl	800a6f4 <USB_GetDevSpeed>
 80075fc:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80075fe:	6825      	ldr	r5, [r4, #0]
 8007600:	f001 f8b0 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8007604:	7b22      	ldrb	r2, [r4, #12]
 8007606:	4601      	mov	r1, r0
 8007608:	4628      	mov	r0, r5
 800760a:	f002 fead 	bl	800a368 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800760e:	4620      	mov	r0, r4
 8007610:	f7fc ffec 	bl	80045ec <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	6943      	ldr	r3, [r0, #20]
 8007618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800761c:	6143      	str	r3, [r0, #20]
 800761e:	e704      	b.n	800742a <HAL_PCD_IRQHandler+0xe6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007620:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007624:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007626:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800762a:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800762c:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007630:	f002 ff5c 	bl	800a4ec <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007634:	6860      	ldr	r0, [r4, #4]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007636:	f506 6700 	add.w	r7, r6, #2048	; 0x800
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800763a:	b1d8      	cbz	r0, 8007674 <HAL_PCD_IRQHandler+0x330>
 800763c:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007640:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8007644:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800764c:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800764e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007652:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007656:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800765a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800765e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007662:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007664:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007668:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800766a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800766e:	f103 0320 	add.w	r3, r3, #32
 8007672:	d1e7      	bne.n	8007644 <HAL_PCD_IRQHandler+0x300>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007674:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007676:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007678:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800767c:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800767e:	b9f2      	cbnz	r2, 80076be <HAL_PCD_IRQHandler+0x37a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007686:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800768a:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	f043 030b 	orr.w	r3, r3, #11
 8007692:	613b      	str	r3, [r7, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007694:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007698:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800769a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800769e:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80076a2:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80076a6:	f003 fb51 	bl	800ad4c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	6943      	ldr	r3, [r0, #20]
 80076ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076b2:	6143      	str	r3, [r0, #20]
 80076b4:	e6b2      	b.n	800741c <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_SuspendCallback(hpcd);
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7fc ffa6 	bl	8004608 <HAL_PCD_SuspendCallback>
 80076bc:	e6a7      	b.n	800740e <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80076be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076c2:	f043 030b 	orr.w	r3, r3, #11
 80076c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80076ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076cc:	f043 030b 	orr.w	r3, r3, #11
 80076d0:	647b      	str	r3, [r7, #68]	; 0x44
 80076d2:	e7df      	b.n	8007694 <HAL_PCD_IRQHandler+0x350>
        hpcd->LPM_State = LPM_L0;
 80076d4:	2100      	movs	r1, #0
 80076d6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 fa76 	bl	8007bcc <HAL_PCDEx_LPM_Callback>
 80076e0:	e6e2      	b.n	80074a8 <HAL_PCD_IRQHandler+0x164>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80076e2:	2208      	movs	r2, #8
 80076e4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80076e8:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076ea:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80076ee:	f003 fa3d 	bl	800ab6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076f2:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 80076f6:	f3c7 130a 	ubfx	r3, r7, #4, #11
 80076fa:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076fe:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007700:	440b      	add	r3, r1
 8007702:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8007706:	e64f      	b.n	80073a8 <HAL_PCD_IRQHandler+0x64>
 8007708:	6820      	ldr	r0, [r4, #0]
 800770a:	e658      	b.n	80073be <HAL_PCD_IRQHandler+0x7a>
 800770c:	9d01      	ldr	r5, [sp, #4]
 800770e:	e656      	b.n	80073be <HAL_PCD_IRQHandler+0x7a>
 8007710:	e9dd 6501 	ldrd	r6, r5, [sp, #4]
 8007714:	9c00      	ldr	r4, [sp, #0]
 8007716:	e657      	b.n	80073c8 <HAL_PCD_IRQHandler+0x84>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007718:	681e      	ldr	r6, [r3, #0]
  if (ep->xfer_count > ep->xfer_len)
 800771a:	e9d8 5314 	ldrd	r5, r3, [r8, #80]	; 0x50
 800771e:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007720:	4630      	mov	r0, r6
  if (ep->xfer_count > ep->xfer_len)
 8007722:	f63f aed8 	bhi.w	80074d6 <HAL_PCD_IRQHandler+0x192>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007726:	f506 6710 	add.w	r7, r6, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800772a:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	9603      	str	r6, [sp, #12]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007730:	eb07 174b 	add.w	r7, r7, fp, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8007734:	eba5 0c03 	sub.w	ip, r5, r3
  len32b = (len + 3U) / 4U;
 8007738:	4594      	cmp	ip, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800773a:	69b9      	ldr	r1, [r7, #24]
  len32b = (len + 3U) / 4U;
 800773c:	bf28      	it	cs
 800773e:	4694      	movcs	ip, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007740:	fa1f fe81 	uxth.w	lr, r1
  len32b = (len + 3U) / 4U;
 8007744:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007748:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 800774c:	d21f      	bcs.n	800778e <HAL_PCD_IRQHandler+0x44a>
 800774e:	e0ad      	b.n	80078ac <HAL_PCD_IRQHandler+0x568>
 8007750:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8007754:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8007758:	429d      	cmp	r5, r3
 800775a:	bf28      	it	cs
 800775c:	461d      	movcs	r5, r3
 800775e:	b2ab      	uxth	r3, r5
 8007760:	4622      	mov	r2, r4
 8007762:	4630      	mov	r0, r6
 8007764:	f003 f9f2 	bl	800ab4c <USB_WritePacket>
    ep->xfer_buff  += len;
 8007768:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800776c:	69ba      	ldr	r2, [r7, #24]
    ep->xfer_buff  += len;
 800776e:	442b      	add	r3, r5
 8007770:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
    ep->xfer_count += len;
 8007774:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007778:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 800777a:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800777c:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800777e:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8007782:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007786:	f0c0 808c 	bcc.w	80078a2 <HAL_PCD_IRQHandler+0x55e>
  if (ep->xfer_len <= ep->xfer_count)
 800778a:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800778e:	429d      	cmp	r5, r3
    len = ep->xfer_len - ep->xfer_count;
 8007790:	eba5 0503 	sub.w	r5, r5, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007794:	d8dc      	bhi.n	8007750 <HAL_PCD_IRQHandler+0x40c>
 8007796:	9b00      	ldr	r3, [sp, #0]
 8007798:	681e      	ldr	r6, [r3, #0]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800779a:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800779c:	f00b 020f 	and.w	r2, fp, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077a0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077a4:	2401      	movs	r4, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077a6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077aa:	fa04 f202 	lsl.w	r2, r4, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077ae:	ea23 0302 	bic.w	r3, r3, r2
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077b2:	4630      	mov	r0, r6
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077b4:	634b      	str	r3, [r1, #52]	; 0x34
 80077b6:	e68e      	b.n	80074d6 <HAL_PCD_IRQHandler+0x192>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80077b8:	2308      	movs	r3, #8
 80077ba:	f8c8 3008 	str.w	r3, [r8, #8]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077be:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077c0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077c4:	483b      	ldr	r0, [pc, #236]	; (80078b4 <HAL_PCD_IRQHandler+0x570>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077c6:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077ca:	4282      	cmp	r2, r0
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077cc:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077ce:	d904      	bls.n	80077da <HAL_PCD_IRQHandler+0x496>
 80077d0:	0408      	lsls	r0, r1, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077d2:	bf44      	itt	mi
 80077d4:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80077d8:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80077da:	4620      	mov	r0, r4
 80077dc:	f7fc fee8 	bl	80045b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	e6ce      	b.n	8007582 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80077e4:	2301      	movs	r3, #1
 80077e6:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077ec:	4d32      	ldr	r5, [pc, #200]	; (80078b8 <HAL_PCD_IRQHandler+0x574>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077ee:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80077f2:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077f6:	42aa      	cmp	r2, r5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077f8:	f8d3 c008 	ldr.w	ip, [r3, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077fc:	d126      	bne.n	800784c <HAL_PCD_IRQHandler+0x508>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80077fe:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8007802:	d01e      	beq.n	8007842 <HAL_PCD_IRQHandler+0x4fe>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007804:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	e6b6      	b.n	800757a <HAL_PCD_IRQHandler+0x236>
            (void)USB_FlushTxFifo(USBx, epnum);
 800780c:	9801      	ldr	r0, [sp, #4]
 800780e:	4659      	mov	r1, fp
 8007810:	f002 fe6c 	bl	800a4ec <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007814:	2302      	movs	r3, #2
 8007816:	f8ca 3008 	str.w	r3, [sl, #8]
 800781a:	e684      	b.n	8007526 <HAL_PCD_IRQHandler+0x1e2>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800781c:	9a01      	ldr	r2, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800781e:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007820:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007824:	f00b 010f 	and.w	r1, fp, #15
 8007828:	fa00 f101 	lsl.w	r1, r0, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800782c:	ea23 0301 	bic.w	r3, r3, r1
 8007830:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007834:	4621      	mov	r1, r4
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007836:	f8ca 0008 	str.w	r0, [sl, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800783a:	9800      	ldr	r0, [sp, #0]
 800783c:	f7fc fec8 	bl	80045d0 <HAL_PCD_DataInStageCallback>
 8007840:	e65f      	b.n	8007502 <HAL_PCD_IRQHandler+0x1be>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007842:	f01c 0f20 	tst.w	ip, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007846:	bf1c      	itt	ne
 8007848:	2220      	movne	r2, #32
 800784a:	609a      	strne	r2, [r3, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800784c:	4620      	mov	r0, r4
 800784e:	f7fc feb5 	bl	80045bc <HAL_PCD_DataOutStageCallback>
 8007852:	6820      	ldr	r0, [r4, #0]
 8007854:	e691      	b.n	800757a <HAL_PCD_IRQHandler+0x236>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007856:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800785a:	421f      	tst	r7, r3
 800785c:	f43f ada4 	beq.w	80073a8 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007860:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8007864:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007868:	f3c7 120a 	ubfx	r2, r7, #4, #11
 800786c:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8007870:	4630      	mov	r0, r6
 8007872:	4617      	mov	r7, r2
 8007874:	f003 f97a 	bl	800ab6c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007878:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800787c:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800787e:	443a      	add	r2, r7
 8007880:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007884:	f8d8 2214 	ldr.w	r2, [r8, #532]	; 0x214
 8007888:	443a      	add	r2, r7
 800788a:	f8c8 2214 	str.w	r2, [r8, #532]	; 0x214
 800788e:	e58b      	b.n	80073a8 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8007890:	4620      	mov	r0, r4
 8007892:	f7fc feb9 	bl	8004608 <HAL_PCD_SuspendCallback>
 8007896:	e5f3      	b.n	8007480 <HAL_PCD_IRQHandler+0x13c>
        HAL_PCD_DisconnectCallback(hpcd);
 8007898:	4620      	mov	r0, r4
 800789a:	f7fc fec9 	bl	8004630 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	e5e5      	b.n	800746e <HAL_PCD_IRQHandler+0x12a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80078a2:	9a00      	ldr	r2, [sp, #0]
  if (ep->xfer_len <= ep->xfer_count)
 80078a4:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80078a8:	6816      	ldr	r6, [r2, #0]
 80078aa:	4630      	mov	r0, r6
  if (ep->xfer_len <= ep->xfer_count)
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	f4ff ae12 	bcc.w	80074d6 <HAL_PCD_IRQHandler+0x192>
 80078b2:	e772      	b.n	800779a <HAL_PCD_IRQHandler+0x456>
 80078b4:	4f54300a 	.word	0x4f54300a
 80078b8:	4f54310a 	.word	0x4f54310a

080078bc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80078bc:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80078c0:	2a01      	cmp	r2, #1
 80078c2:	d00d      	beq.n	80078e0 <HAL_PCD_SetAddress+0x24>
{
 80078c4:	b510      	push	{r4, lr}
 80078c6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80078c8:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078ca:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80078cc:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80078d0:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078d4:	f003 f9c6 	bl	800ac64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80078d8:	2000      	movs	r0, #0
 80078da:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80078de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80078e0:	2002      	movs	r0, #2
}
 80078e2:	4770      	bx	lr

080078e4 <HAL_PCD_EP_Open>:
{
 80078e4:	b510      	push	{r4, lr}
 80078e6:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80078ea:	0609      	lsls	r1, r1, #24
{
 80078ec:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80078ee:	d427      	bmi.n	8007940 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078f0:	f04f 0c1c 	mov.w	ip, #28
 80078f4:	fb0c 0c0e 	mla	ip, ip, lr, r0
 80078f8:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 80078fc:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8007900:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007904:	2000      	movs	r0, #0
 8007906:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800790a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800790c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800790e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8007912:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007914:	b10a      	cbz	r2, 800791a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8007916:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800791a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800791c:	bf04      	itt	eq
 800791e:	2300      	moveq	r3, #0
 8007920:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007922:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007926:	2b01      	cmp	r3, #1
 8007928:	d018      	beq.n	800795c <HAL_PCD_EP_Open+0x78>
 800792a:	2301      	movs	r3, #1
 800792c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	f002 fee9 	bl	800a708 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007936:	2300      	movs	r3, #0
 8007938:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  return ret;
 800793c:	4618      	mov	r0, r3
}
 800793e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007940:	201c      	movs	r0, #28
 8007942:	fb00 400e 	mla	r0, r0, lr, r4
 8007946:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800794a:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800794e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007952:	f04f 0c01 	mov.w	ip, #1
 8007956:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800795a:	e7d6      	b.n	800790a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800795c:	2002      	movs	r0, #2
}
 800795e:	bd10      	pop	{r4, pc}

08007960 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007960:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 8007964:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8007968:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800796c:	f04f 011c 	mov.w	r1, #28
{
 8007970:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 8007972:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8007976:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007978:	fb01 0103 	mla	r1, r1, r3, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800797c:	d113      	bne.n	80079a6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800797e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007982:	2000      	movs	r0, #0
 8007984:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007988:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800798a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800798e:	2b01      	cmp	r3, #1
 8007990:	d012      	beq.n	80079b8 <HAL_PCD_EP_Close+0x58>
 8007992:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007994:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007996:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800799a:	f002 ff01 	bl	800a7a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800799e:	2000      	movs	r0, #0
 80079a0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80079a4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079a6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80079a8:	2001      	movs	r0, #1
 80079aa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80079ae:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80079b0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d1ec      	bne.n	8007992 <HAL_PCD_EP_Close+0x32>
 80079b8:	2002      	movs	r0, #2
}
 80079ba:	bd10      	pop	{r4, pc}

080079bc <HAL_PCD_EP_Receive>:
{
 80079bc:	b510      	push	{r4, lr}
 80079be:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 80079c2:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80079c6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079ca:	211c      	movs	r1, #28
 80079cc:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_len = len;
 80079d0:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 80079d4:	2300      	movs	r3, #0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80079d6:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 80079d8:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079dc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_count = 0U;
 80079e0:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 80079e4:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80079e8:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079ec:	b91c      	cbnz	r4, 80079f6 <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80079ee:	f003 f81d 	bl	800aa2c <USB_EP0StartXfer>
}
 80079f2:	2000      	movs	r0, #0
 80079f4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079f6:	f002 ff35 	bl	800a864 <USB_EPStartXfer>
}
 80079fa:	2000      	movs	r0, #0
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop

08007a00 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007a00:	f001 010f 	and.w	r1, r1, #15
 8007a04:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007a08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8007a0c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <HAL_PCD_EP_Transmit>:
{
 8007a14:	b510      	push	{r4, lr}
 8007a16:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8007a1a:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8007a1e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a22:	211c      	movs	r1, #28
  ep->xfer_len = len;
 8007a24:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8007a28:	2300      	movs	r3, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a2a:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_count = 0U;
 8007a2e:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8007a32:	2301      	movs	r3, #1
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007a34:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 8007a36:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a3a:	313c      	adds	r1, #60	; 0x3c
  ep->is_in = 1U;
 8007a3c:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a40:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a44:	b91c      	cbnz	r4, 8007a4e <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007a46:	f002 fff1 	bl	800aa2c <USB_EP0StartXfer>
}
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a4e:	f002 ff09 	bl	800a864 <USB_EPStartXfer>
}
 8007a52:	2000      	movs	r0, #0
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	bf00      	nop

08007a58 <HAL_PCD_EP_SetStall>:
{
 8007a58:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a5a:	6843      	ldr	r3, [r0, #4]
 8007a5c:	f001 050f 	and.w	r5, r1, #15
 8007a60:	429d      	cmp	r5, r3
 8007a62:	d833      	bhi.n	8007acc <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8007a64:	060b      	lsls	r3, r1, #24
 8007a66:	4604      	mov	r4, r0
 8007a68:	d41c      	bmi.n	8007aa4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8007a6a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007a6e:	221c      	movs	r2, #28
 8007a70:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8007a74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8007a78:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007a82:	2301      	movs	r3, #1
 8007a84:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a86:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8007a88:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d01b      	beq.n	8007ac8 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a90:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007a92:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a96:	f003 f88b 	bl	800abb0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a9a:	b1cd      	cbz	r5, 8007ad0 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8007aa4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aa8:	211c      	movs	r1, #28
 8007aaa:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8007aae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ab2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ab4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8007aba:	2301      	movs	r3, #1
 8007abc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007abe:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8007ac0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d1e3      	bne.n	8007a90 <HAL_PCD_EP_SetStall+0x38>
 8007ac8:	2002      	movs	r0, #2
}
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007acc:	2001      	movs	r0, #1
}
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007ad6:	f003 f939 	bl	800ad4c <USB_EP0_OutStart>
 8007ada:	e7df      	b.n	8007a9c <HAL_PCD_EP_SetStall+0x44>

08007adc <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007adc:	6842      	ldr	r2, [r0, #4]
{
 8007ade:	b538      	push	{r3, r4, r5, lr}
 8007ae0:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d82e      	bhi.n	8007b46 <HAL_PCD_EP_ClrStall+0x6a>
    ep->is_in = 1U;
 8007ae8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8007aec:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007af0:	f04f 011c 	mov.w	r1, #28
 8007af4:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8007af6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007afa:	fb01 0103 	mla	r1, r1, r3, r0
  if ((0x80U & ep_addr) == 0x80U)
 8007afe:	d115      	bne.n	8007b2c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b00:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007b04:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8007b06:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8007b08:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8007b0c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b0e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007b10:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d014      	beq.n	8007b42 <HAL_PCD_EP_ClrStall+0x66>
 8007b18:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b1a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007b1c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b20:	f003 f874 	bl	800ac0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b24:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8007b28:	4628      	mov	r0, r5
}
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b2c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007b2e:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 8007b30:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8007b32:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->is_stall = 0U;
 8007b36:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b38:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007b3a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d1ea      	bne.n	8007b18 <HAL_PCD_EP_ClrStall+0x3c>
 8007b42:	2002      	movs	r0, #2
}
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007b46:	2001      	movs	r0, #1
}
 8007b48:	bd38      	pop	{r3, r4, r5, pc}
 8007b4a:	bf00      	nop

08007b4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b4c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b4e:	6804      	ldr	r4, [r0, #0]
 8007b50:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8007b52:	b931      	cbnz	r1, 8007b62 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b54:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8007b58:	62a2      	str	r2, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b60:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007b64:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b66:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007b6a:	d00b      	beq.n	8007b84 <HAL_PCDEx_SetTxFiFo+0x38>
 8007b6c:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b6e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007b72:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8007b76:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b78:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b7e:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007b82:	d3f4      	bcc.n	8007b6e <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007b84:	3140      	adds	r1, #64	; 0x40
 8007b86:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007b8a:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8007b8e:	6062      	str	r2, [r4, #4]
}
 8007b90:	2000      	movs	r0, #0
 8007b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8007b98:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8007b9a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8007b9c:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ba0:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8007ba2:	2100      	movs	r1, #0
{
 8007ba4:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8007ba6:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007baa:	6993      	ldr	r3, [r2, #24]
  hpcd->lpm_active = 1U;
 8007bac:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hpcd->lpm_active = 1U;
 8007bb2:	f8c0 43fc 	str.w	r4, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007bb6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bb8:	6d53      	ldr	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8007bba:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc2:	f043 0303 	orr.w	r3, r3, #3
}
 8007bc6:	4608      	mov	r0, r1
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bc8:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007bca:	4770      	bx	lr

08007bcc <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop

08007bd0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bd0:	4a02      	ldr	r2, [pc, #8]	; (8007bdc <HAL_PWR_EnableBkUpAccess+0xc>)
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd8:	6013      	str	r3, [r2, #0]
}
 8007bda:	4770      	bx	lr
 8007bdc:	40007000 	.word	0x40007000

08007be0 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <HAL_PWREx_GetVoltageRange+0x1c>)
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8007be8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007bec:	d004      	beq.n	8007bf8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007bee:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007bf2:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8007bf6:	0240      	lsls	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	40007000 	.word	0x40007000

08007c00 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c00:	4a37      	ldr	r2, [pc, #220]	; (8007ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007c02:	b960      	cbnz	r0, 8007c1e <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c0e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c12:	d01d      	beq.n	8007c50 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007c1c:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007c22:	d007      	beq.n	8007c34 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c24:	6813      	ldr	r3, [r2, #0]
 8007c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c2e:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c30:	6013      	str	r3, [r2, #0]
}
 8007c32:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c34:	6813      	ldr	r3, [r2, #0]
 8007c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c42:	d02b      	beq.n	8007c9c <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8007c48:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007c4e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c58:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007c5a:	4822      	ldr	r0, [pc, #136]	; (8007ce4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007c5c:	4922      	ldr	r1, [pc, #136]	; (8007ce8 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c66:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007c68:	6803      	ldr	r3, [r0, #0]
 8007c6a:	2032      	movs	r0, #50	; 0x32
 8007c6c:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c70:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007c72:	fba1 1303 	umull	r1, r3, r1, r3
 8007c76:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c78:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007c7a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c7e:	d506      	bpl.n	8007c8e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007c80:	e000      	b.n	8007c84 <HAL_PWREx_ControlVoltageScaling+0x84>
 8007c82:	b123      	cbz	r3, 8007c8e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007c84:	6951      	ldr	r1, [r2, #20]
 8007c86:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007c88:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c8c:	d4f9      	bmi.n	8007c82 <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c8e:	4b14      	ldr	r3, [pc, #80]	; (8007ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8007c94:	bf54      	ite	pl
 8007c96:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007c98:	2003      	movmi	r0, #3
 8007c9a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ca4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007ca6:	480f      	ldr	r0, [pc, #60]	; (8007ce4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007ca8:	490f      	ldr	r1, [pc, #60]	; (8007ce8 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cb2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007cb4:	6803      	ldr	r3, [r0, #0]
 8007cb6:	2032      	movs	r0, #50	; 0x32
 8007cb8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cbc:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007cbe:	fba1 1303 	umull	r1, r3, r1, r3
 8007cc2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cc4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007cc6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cca:	d5e0      	bpl.n	8007c8e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007ccc:	e001      	b.n	8007cd2 <HAL_PWREx_ControlVoltageScaling+0xd2>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0dd      	beq.n	8007c8e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007cd2:	6951      	ldr	r1, [r2, #20]
 8007cd4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007cd6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cda:	d5d8      	bpl.n	8007c8e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007cdc:	e7f7      	b.n	8007cce <HAL_PWREx_ControlVoltageScaling+0xce>
 8007cde:	bf00      	nop
 8007ce0:	40007000 	.word	0x40007000
 8007ce4:	20000300 	.word	0x20000300
 8007ce8:	431bde83 	.word	0x431bde83

08007cec <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007cec:	4a02      	ldr	r2, [pc, #8]	; (8007cf8 <HAL_PWREx_EnableVddUSB+0xc>)
 8007cee:	6853      	ldr	r3, [r2, #4]
 8007cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cf4:	6053      	str	r3, [r2, #4]
}
 8007cf6:	4770      	bx	lr
 8007cf8:	40007000 	.word	0x40007000

08007cfc <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007cfc:	4a02      	ldr	r2, [pc, #8]	; (8007d08 <HAL_PWREx_EnableVddIO2+0xc>)
 8007cfe:	6853      	ldr	r3, [r2, #4]
 8007d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d04:	6053      	str	r3, [r2, #4]
}
 8007d06:	4770      	bx	lr
 8007d08:	40007000 	.word	0x40007000

08007d0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007d0c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d0e:	4d1e      	ldr	r5, [pc, #120]	; (8007d88 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8007d10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007d12:	00db      	lsls	r3, r3, #3
{
 8007d14:	b083      	sub	sp, #12
 8007d16:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d18:	d519      	bpl.n	8007d4e <RCC_SetFlashLatencyFromMSIRange+0x42>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d1a:	f7ff ff61 	bl	8007be0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007d22:	d026      	beq.n	8007d72 <RCC_SetFlashLatencyFromMSIRange+0x66>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007d24:	2c7f      	cmp	r4, #127	; 0x7f
 8007d26:	d82b      	bhi.n	8007d80 <RCC_SetFlashLatencyFromMSIRange+0x74>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007d28:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8007d2c:	fab4 f484 	clz	r4, r4
 8007d30:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007d32:	4916      	ldr	r1, [pc, #88]	; (8007d8c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8007d34:	680b      	ldr	r3, [r1, #0]
 8007d36:	f023 030f 	bic.w	r3, r3, #15
 8007d3a:	4323      	orrs	r3, r4
 8007d3c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007d3e:	6808      	ldr	r0, [r1, #0]
 8007d40:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007d44:	1b00      	subs	r0, r0, r4
 8007d46:	bf18      	it	ne
 8007d48:	2001      	movne	r0, #1
 8007d4a:	b003      	add	sp, #12
 8007d4c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d4e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d54:	65ab      	str	r3, [r5, #88]	; 0x58
 8007d56:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8007d60:	f7ff ff3e 	bl	8007be0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d64:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d66:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d70:	d1d8      	bne.n	8007d24 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8007d72:	2c80      	cmp	r4, #128	; 0x80
 8007d74:	d906      	bls.n	8007d84 <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d76:	2ca0      	cmp	r4, #160	; 0xa0
 8007d78:	bf8c      	ite	hi
 8007d7a:	2402      	movhi	r4, #2
 8007d7c:	2401      	movls	r4, #1
 8007d7e:	e7d8      	b.n	8007d32 <RCC_SetFlashLatencyFromMSIRange+0x26>
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d80:	2402      	movs	r4, #2
 8007d82:	e7d6      	b.n	8007d32 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d84:	2400      	movs	r4, #0
 8007d86:	e7d4      	b.n	8007d32 <RCC_SetFlashLatencyFromMSIRange+0x26>
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	40022000 	.word	0x40022000

08007d90 <HAL_RCC_DeInit>:
{
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007d92:	4c34      	ldr	r4, [pc, #208]	; (8007e64 <HAL_RCC_DeInit+0xd4>)
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	f043 0301 	orr.w	r3, r3, #1
 8007d9a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007d9c:	f7fe f960 	bl	8006060 <HAL_GetTick>
 8007da0:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007da2:	e004      	b.n	8007dae <HAL_RCC_DeInit+0x1e>
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007da4:	f7fe f95c 	bl	8006060 <HAL_GetTick>
 8007da8:	1b40      	subs	r0, r0, r5
 8007daa:	2802      	cmp	r0, #2
 8007dac:	d816      	bhi.n	8007ddc <HAL_RCC_DeInit+0x4c>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	079b      	lsls	r3, r3, #30
 8007db2:	d5f7      	bpl.n	8007da4 <HAL_RCC_DeInit+0x14>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8007db4:	6823      	ldr	r3, [r4, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8007db6:	492c      	ldr	r1, [pc, #176]	; (8007e68 <HAL_RCC_DeInit+0xd8>)
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8007db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
  CLEAR_REG(RCC->CFGR);
 8007dc0:	2200      	movs	r2, #0
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8007dc2:	6023      	str	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);
 8007dc4:	60a2      	str	r2, [r4, #8]
  SystemCoreClock = MSI_VALUE;
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <HAL_RCC_DeInit+0xdc>)
 8007dc8:	4a29      	ldr	r2, [pc, #164]	; (8007e70 <HAL_RCC_DeInit+0xe0>)
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8007dca:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = MSI_VALUE;
 8007dcc:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8007dce:	f7fe f907 	bl	8005fe0 <HAL_InitTick>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b128      	cbz	r0, 8007de2 <HAL_RCC_DeInit+0x52>
    return HAL_ERROR;
 8007dd6:	2401      	movs	r4, #1
}
 8007dd8:	4620      	mov	r0, r4
 8007dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8007ddc:	2403      	movs	r4, #3
}
 8007dde:	4620      	mov	r0, r4
 8007de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8007de2:	f7fe f93d 	bl	8006060 <HAL_GetTick>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8007de6:	4e1f      	ldr	r6, [pc, #124]	; (8007e64 <HAL_RCC_DeInit+0xd4>)
  tickstart = HAL_GetTick();
 8007de8:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dea:	f241 3788 	movw	r7, #5000	; 0x1388
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8007dee:	e004      	b.n	8007dfa <HAL_RCC_DeInit+0x6a>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007df0:	f7fe f936 	bl	8006060 <HAL_GetTick>
 8007df4:	1b43      	subs	r3, r0, r5
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	d8f0      	bhi.n	8007ddc <HAL_RCC_DeInit+0x4c>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8007dfa:	68b3      	ldr	r3, [r6, #8]
 8007dfc:	f013 0f0c 	tst.w	r3, #12
 8007e00:	d1f6      	bne.n	8007df0 <HAL_RCC_DeInit+0x60>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8007e02:	6832      	ldr	r2, [r6, #0]
 8007e04:	4b1b      	ldr	r3, [pc, #108]	; (8007e74 <HAL_RCC_DeInit+0xe4>)
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8007e06:	4d17      	ldr	r5, [pc, #92]	; (8007e64 <HAL_RCC_DeInit+0xd4>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8007e08:	4013      	ands	r3, r2
 8007e0a:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8007e0c:	f7fe f928 	bl	8006060 <HAL_GetTick>
 8007e10:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8007e12:	e004      	b.n	8007e1e <HAL_RCC_DeInit+0x8e>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e14:	f7fe f924 	bl	8006060 <HAL_GetTick>
 8007e18:	1b83      	subs	r3, r0, r6
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d8de      	bhi.n	8007ddc <HAL_RCC_DeInit+0x4c>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	f013 5328 	ands.w	r3, r3, #704643072	; 0x2a000000
 8007e24:	d1f6      	bne.n	8007e14 <HAL_RCC_DeInit+0x84>
  CLEAR_REG(RCC->PLLCFGR);
 8007e26:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8007e28:	68ea      	ldr	r2, [r5, #12]
 8007e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e2e:	60ea      	str	r2, [r5, #12]
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8007e30:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8007e32:	692a      	ldr	r2, [r5, #16]
 8007e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e38:	612a      	str	r2, [r5, #16]
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8007e3a:	616b      	str	r3, [r5, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8007e3c:	696a      	ldr	r2, [r5, #20]
 8007e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e42:	616a      	str	r2, [r5, #20]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007e44:	682a      	ldr	r2, [r5, #0]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8007e46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007e4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e4e:	602a      	str	r2, [r5, #0]
  CLEAR_REG(RCC->CIER);
 8007e50:	61ab      	str	r3, [r5, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8007e52:	6229      	str	r1, [r5, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8007e54:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007e58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 8007e60:	e7bd      	b.n	8007dde <HAL_RCC_DeInit+0x4e>
 8007e62:	bf00      	nop
 8007e64:	40021000 	.word	0x40021000
 8007e68:	200002ec 	.word	0x200002ec
 8007e6c:	20000300 	.word	0x20000300
 8007e70:	003d0900 	.word	0x003d0900
 8007e74:	eafef4ff 	.word	0xeafef4ff

08007e78 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e78:	4a25      	ldr	r2, [pc, #148]	; (8007f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8007e7a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e7c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e7e:	f013 030c 	ands.w	r3, r3, #12
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCC_GetSysClockFreq+0x22>
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	d039      	beq.n	8007efc <HAL_RCC_GetSysClockFreq+0x84>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e88:	f44f 7088 	mov.w	r0, #272	; 0x110
 8007e8c:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007e8e:	40d8      	lsrs	r0, r3
 8007e90:	f010 0001 	ands.w	r0, r0, #1
 8007e94:	bf18      	it	ne
 8007e96:	4610      	movne	r0, r2
 8007e98:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e9a:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ea0:	bf54      	ite	pl
 8007ea2:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ea6:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8007ea8:	491b      	ldr	r1, [pc, #108]	; (8007f18 <HAL_RCC_GetSysClockFreq+0xa0>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007eaa:	bf54      	ite	pl
 8007eac:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007eb0:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8007eb4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007eb8:	b333      	cbz	r3, 8007f08 <HAL_RCC_GetSysClockFreq+0x90>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007eba:	2b0c      	cmp	r3, #12
 8007ebc:	d125      	bne.n	8007f0a <HAL_RCC_GetSysClockFreq+0x92>
{
 8007ebe:	b410      	push	{r4}
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ec0:	4c13      	ldr	r4, [pc, #76]	; (8007f10 <HAL_RCC_GetSysClockFreq+0x98>)
      pllvco = HSI_VALUE;
 8007ec2:	4a14      	ldr	r2, [pc, #80]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x9c>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ec4:	68e3      	ldr	r3, [r4, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ec6:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ec8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007ecc:	3b02      	subs	r3, #2
      pllvco = HSI_VALUE;
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	bf98      	it	ls
 8007ed2:	4610      	movls	r0, r2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ed4:	68e2      	ldr	r2, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ed6:	68e3      	ldr	r3, [r4, #12]
}
 8007ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007edc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ee0:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ee4:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ee8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007eea:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007eee:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ef0:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ef2:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8007ef6:	fbb2 f0f3 	udiv	r0, r2, r3
}
 8007efa:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007efc:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f00:	2a01      	cmp	r2, #1
 8007f02:	d0ca      	beq.n	8007e9a <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007f04:	2000      	movs	r0, #0
 8007f06:	e7da      	b.n	8007ebe <HAL_RCC_GetSysClockFreq+0x46>
}
 8007f08:	4770      	bx	lr
 8007f0a:	2000      	movs	r0, #0
  return sysclockfreq;
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40021000 	.word	0x40021000
 8007f14:	00f42400 	.word	0x00f42400
 8007f18:	0801fdec 	.word	0x0801fdec

08007f1c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f000 8239 	beq.w	8008394 <HAL_RCC_OscConfig+0x478>
{
 8007f22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f26:	4a99      	ldr	r2, [pc, #612]	; (800818c <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f28:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f2a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f2c:	68d6      	ldr	r6, [r2, #12]
 8007f2e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f30:	06d8      	lsls	r0, r3, #27
{
 8007f32:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f34:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f38:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f3c:	d52e      	bpl.n	8007f9c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	f000 812b 	beq.w	800819a <HAL_RCC_OscConfig+0x27e>
 8007f44:	2d0c      	cmp	r5, #12
 8007f46:	f000 8125 	beq.w	8008194 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f4a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8007f4c:	4f8f      	ldr	r7, [pc, #572]	; (800818c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 819b 	beq.w	800828a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_MSI_ENABLE();
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8007f5c:	f7fe f880 	bl	8006060 <HAL_GetTick>
 8007f60:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f62:	e006      	b.n	8007f72 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f64:	f7fe f87c 	bl	8006060 <HAL_GetTick>
 8007f68:	eba0 0008 	sub.w	r0, r0, r8
 8007f6c:	2802      	cmp	r0, #2
 8007f6e:	f200 819c 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	079b      	lsls	r3, r3, #30
 8007f76:	d5f5      	bpl.n	8007f64 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f043 0308 	orr.w	r3, r3, #8
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	6a22      	ldr	r2, [r4, #32]
 8007f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69e2      	ldr	r2, [r4, #28]
 8007f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f98:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	07d9      	lsls	r1, r3, #31
 8007f9e:	f100 80cc 	bmi.w	800813a <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fa2:	0799      	lsls	r1, r3, #30
 8007fa4:	d523      	bpl.n	8007fee <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007fa6:	2d04      	cmp	r5, #4
 8007fa8:	f000 815f 	beq.w	800826a <HAL_RCC_OscConfig+0x34e>
 8007fac:	2d0c      	cmp	r5, #12
 8007fae:	f000 8159 	beq.w	8008264 <HAL_RCC_OscConfig+0x348>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fb2:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8007fb4:	4e75      	ldr	r6, [pc, #468]	; (800818c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8192 	beq.w	80082e0 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_ENABLE();
 8007fbc:	6833      	ldr	r3, [r6, #0]
 8007fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8007fc4:	f7fe f84c 	bl	8006060 <HAL_GetTick>
 8007fc8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fca:	e005      	b.n	8007fd8 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fcc:	f7fe f848 	bl	8006060 <HAL_GetTick>
 8007fd0:	1bc0      	subs	r0, r0, r7
 8007fd2:	2802      	cmp	r0, #2
 8007fd4:	f200 8169 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fd8:	6833      	ldr	r3, [r6, #0]
 8007fda:	055b      	lsls	r3, r3, #21
 8007fdc:	d5f6      	bpl.n	8007fcc <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fde:	6873      	ldr	r3, [r6, #4]
 8007fe0:	6922      	ldr	r2, [r4, #16]
 8007fe2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007fe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007fea:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	0719      	lsls	r1, r3, #28
 8007ff0:	d519      	bpl.n	8008026 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ff2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8007ff4:	4e65      	ldr	r6, [pc, #404]	; (800818c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8120 	beq.w	800823c <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_LSI_ENABLE();
 8007ffc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8008000:	f043 0301 	orr.w	r3, r3, #1
 8008004:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008008:	f7fe f82a 	bl	8006060 <HAL_GetTick>
 800800c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800800e:	e005      	b.n	800801c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008010:	f7fe f826 	bl	8006060 <HAL_GetTick>
 8008014:	1bc0      	subs	r0, r0, r7
 8008016:	2802      	cmp	r0, #2
 8008018:	f200 8147 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800801c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8008020:	079a      	lsls	r2, r3, #30
 8008022:	d5f5      	bpl.n	8008010 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	075f      	lsls	r7, r3, #29
 8008028:	d53f      	bpl.n	80080aa <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800802a:	4b58      	ldr	r3, [pc, #352]	; (800818c <HAL_RCC_OscConfig+0x270>)
 800802c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800802e:	00d6      	lsls	r6, r2, #3
 8008030:	f100 8154 	bmi.w	80082dc <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008036:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800803a:	659a      	str	r2, [r3, #88]	; 0x58
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008046:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008048:	4f51      	ldr	r7, [pc, #324]	; (8008190 <HAL_RCC_OscConfig+0x274>)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	05d8      	lsls	r0, r3, #23
 800804e:	f140 81a3 	bpl.w	8008398 <HAL_RCC_OscConfig+0x47c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	2b01      	cmp	r3, #1
 8008056:	f000 8155 	beq.w	8008304 <HAL_RCC_OscConfig+0x3e8>
 800805a:	2b05      	cmp	r3, #5
 800805c:	f000 81c7 	beq.w	80083ee <HAL_RCC_OscConfig+0x4d2>
 8008060:	4f4a      	ldr	r7, [pc, #296]	; (800818c <HAL_RCC_OscConfig+0x270>)
 8008062:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800806e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008072:	f022 0204 	bic.w	r2, r2, #4
 8008076:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800807a:	2b00      	cmp	r3, #0
 800807c:	f040 8149 	bne.w	8008312 <HAL_RCC_OscConfig+0x3f6>
      tickstart = HAL_GetTick();
 8008080:	f7fd ffee 	bl	8006060 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008084:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008088:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800808a:	e006      	b.n	800809a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800808c:	f7fd ffe8 	bl	8006060 <HAL_GetTick>
 8008090:	eba0 0008 	sub.w	r0, r0, r8
 8008094:	4548      	cmp	r0, r9
 8008096:	f200 8108 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800809a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800809e:	079b      	lsls	r3, r3, #30
 80080a0:	d4f4      	bmi.n	800808c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	f040 818a 	bne.w	80083bc <HAL_RCC_OscConfig+0x4a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	069e      	lsls	r6, r3, #26
 80080ac:	d518      	bpl.n	80080e0 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 80080b0:	4e36      	ldr	r6, [pc, #216]	; (800818c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 815a 	beq.w	800836c <HAL_RCC_OscConfig+0x450>
      __HAL_RCC_HSI48_ENABLE();
 80080b8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80080bc:	f043 0301 	orr.w	r3, r3, #1
 80080c0:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80080c4:	f7fd ffcc 	bl	8006060 <HAL_GetTick>
 80080c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080ca:	e005      	b.n	80080d8 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080cc:	f7fd ffc8 	bl	8006060 <HAL_GetTick>
 80080d0:	1bc0      	subs	r0, r0, r7
 80080d2:	2802      	cmp	r0, #2
 80080d4:	f200 80e9 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080d8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80080dc:	0798      	lsls	r0, r3, #30
 80080de:	d5f5      	bpl.n	80080cc <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080e2:	b333      	cbz	r3, 8008132 <HAL_RCC_OscConfig+0x216>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	f000 8190 	beq.w	800840a <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80080ea:	2d0c      	cmp	r5, #12
 80080ec:	f000 8096 	beq.w	800821c <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_DISABLE();
 80080f0:	4b26      	ldr	r3, [pc, #152]	; (800818c <HAL_RCC_OscConfig+0x270>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80080f8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8008100:	d103      	bne.n	800810a <HAL_RCC_OscConfig+0x1ee>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	f022 0203 	bic.w	r2, r2, #3
 8008108:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800810a:	4c20      	ldr	r4, [pc, #128]	; (800818c <HAL_RCC_OscConfig+0x270>)
 800810c:	68e3      	ldr	r3, [r4, #12]
 800810e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008116:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8008118:	f7fd ffa2 	bl	8006060 <HAL_GetTick>
 800811c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800811e:	e005      	b.n	800812c <HAL_RCC_OscConfig+0x210>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008120:	f7fd ff9e 	bl	8006060 <HAL_GetTick>
 8008124:	1b40      	subs	r0, r0, r5
 8008126:	2802      	cmp	r0, #2
 8008128:	f200 80bf 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	019b      	lsls	r3, r3, #6
 8008130:	d4f6      	bmi.n	8008120 <HAL_RCC_OscConfig+0x204>
  return HAL_OK;
 8008132:	2000      	movs	r0, #0
}
 8008134:	b003      	add	sp, #12
 8008136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800813a:	2d08      	cmp	r5, #8
 800813c:	d074      	beq.n	8008228 <HAL_RCC_OscConfig+0x30c>
 800813e:	2d0c      	cmp	r5, #12
 8008140:	d070      	beq.n	8008224 <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008148:	f000 80b3 	beq.w	80082b2 <HAL_RCC_OscConfig+0x396>
 800814c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008150:	f000 8140 	beq.w	80083d4 <HAL_RCC_OscConfig+0x4b8>
 8008154:	4f0d      	ldr	r7, [pc, #52]	; (800818c <HAL_RCC_OscConfig+0x270>)
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800815c:	603a      	str	r2, [r7, #0]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008164:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 80a8 	bne.w	80082bc <HAL_RCC_OscConfig+0x3a0>
        tickstart = HAL_GetTick();
 800816c:	f7fd ff78 	bl	8006060 <HAL_GetTick>
 8008170:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008172:	e006      	b.n	8008182 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008174:	f7fd ff74 	bl	8006060 <HAL_GetTick>
 8008178:	eba0 0008 	sub.w	r0, r0, r8
 800817c:	2864      	cmp	r0, #100	; 0x64
 800817e:	f200 8094 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	0398      	lsls	r0, r3, #14
 8008186:	d4f5      	bmi.n	8008174 <HAL_RCC_OscConfig+0x258>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	e70a      	b.n	8007fa2 <HAL_RCC_OscConfig+0x86>
 800818c:	40021000 	.word	0x40021000
 8008190:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008194:	2e01      	cmp	r6, #1
 8008196:	f47f aed8 	bne.w	8007f4a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800819a:	4ba9      	ldr	r3, [pc, #676]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	0799      	lsls	r1, r3, #30
 80081a0:	d439      	bmi.n	8008216 <HAL_RCC_OscConfig+0x2fa>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081a2:	4ba7      	ldr	r3, [pc, #668]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 80081a4:	6a20      	ldr	r0, [r4, #32]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	0712      	lsls	r2, r2, #28
 80081aa:	bf56      	itet	pl
 80081ac:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80081b0:	681b      	ldrmi	r3, [r3, #0]
 80081b2:	091b      	lsrpl	r3, r3, #4
 80081b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081b8:	4298      	cmp	r0, r3
 80081ba:	f200 80bf 	bhi.w	800833c <HAL_RCC_OscConfig+0x420>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081be:	4ba0      	ldr	r3, [pc, #640]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	f042 0208 	orr.w	r2, r2, #8
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80081ce:	4302      	orrs	r2, r0
 80081d0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	69e1      	ldr	r1, [r4, #28]
 80081d6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80081da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80081de:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	f000 80f1 	beq.w	80083c8 <HAL_RCC_OscConfig+0x4ac>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081e6:	f7ff fe47 	bl	8007e78 <HAL_RCC_GetSysClockFreq>
 80081ea:	4b95      	ldr	r3, [pc, #596]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 80081ec:	4a95      	ldr	r2, [pc, #596]	; (8008444 <HAL_RCC_OscConfig+0x528>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80081f4:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80081f6:	4a94      	ldr	r2, [pc, #592]	; (8008448 <HAL_RCC_OscConfig+0x52c>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081f8:	f003 031f 	and.w	r3, r3, #31
 80081fc:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8008200:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008202:	4a92      	ldr	r2, [pc, #584]	; (800844c <HAL_RCC_OscConfig+0x530>)
 8008204:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8008206:	f7fd feeb 	bl	8005fe0 <HAL_InitTick>
        if(status != HAL_OK)
 800820a:	b940      	cbnz	r0, 800821e <HAL_RCC_OscConfig+0x302>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	07d9      	lsls	r1, r3, #31
 8008210:	f57f aec7 	bpl.w	8007fa2 <HAL_RCC_OscConfig+0x86>
 8008214:	e791      	b.n	800813a <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008216:	69a3      	ldr	r3, [r4, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1c2      	bne.n	80081a2 <HAL_RCC_OscConfig+0x286>
          return HAL_ERROR;
 800821c:	2001      	movs	r0, #1
}
 800821e:	b003      	add	sp, #12
 8008220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008224:	2e03      	cmp	r6, #3
 8008226:	d18c      	bne.n	8008142 <HAL_RCC_OscConfig+0x226>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008228:	4a85      	ldr	r2, [pc, #532]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	0392      	lsls	r2, r2, #14
 800822e:	f57f aeb8 	bpl.w	8007fa2 <HAL_RCC_OscConfig+0x86>
 8008232:	6862      	ldr	r2, [r4, #4]
 8008234:	2a00      	cmp	r2, #0
 8008236:	f47f aeb4 	bne.w	8007fa2 <HAL_RCC_OscConfig+0x86>
 800823a:	e7ef      	b.n	800821c <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_LSI_DISABLE();
 800823c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008248:	f7fd ff0a 	bl	8006060 <HAL_GetTick>
 800824c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800824e:	e004      	b.n	800825a <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008250:	f7fd ff06 	bl	8006060 <HAL_GetTick>
 8008254:	1bc0      	subs	r0, r0, r7
 8008256:	2802      	cmp	r0, #2
 8008258:	d827      	bhi.n	80082aa <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800825a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800825e:	079b      	lsls	r3, r3, #30
 8008260:	d4f6      	bmi.n	8008250 <HAL_RCC_OscConfig+0x334>
 8008262:	e6df      	b.n	8008024 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008264:	2e02      	cmp	r6, #2
 8008266:	f47f aea4 	bne.w	8007fb2 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800826a:	4a75      	ldr	r2, [pc, #468]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	0552      	lsls	r2, r2, #21
 8008270:	d502      	bpl.n	8008278 <HAL_RCC_OscConfig+0x35c>
 8008272:	68e2      	ldr	r2, [r4, #12]
 8008274:	2a00      	cmp	r2, #0
 8008276:	d0d1      	beq.n	800821c <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008278:	4971      	ldr	r1, [pc, #452]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 800827a:	6920      	ldr	r0, [r4, #16]
 800827c:	684a      	ldr	r2, [r1, #4]
 800827e:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8008282:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8008286:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008288:	e6b1      	b.n	8007fee <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8008292:	f7fd fee5 	bl	8006060 <HAL_GetTick>
 8008296:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	0798      	lsls	r0, r3, #30
 800829c:	d5b6      	bpl.n	800820c <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800829e:	f7fd fedf 	bl	8006060 <HAL_GetTick>
 80082a2:	eba0 0008 	sub.w	r0, r0, r8
 80082a6:	2802      	cmp	r0, #2
 80082a8:	d9f6      	bls.n	8008298 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80082aa:	2003      	movs	r0, #3
}
 80082ac:	b003      	add	sp, #12
 80082ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082b2:	4a63      	ldr	r2, [pc, #396]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 80082b4:	6813      	ldr	r3, [r2, #0]
 80082b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80082bc:	f7fd fed0 	bl	8006060 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082c0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008440 <HAL_RCC_OscConfig+0x524>
        tickstart = HAL_GetTick();
 80082c4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082c6:	e004      	b.n	80082d2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c8:	f7fd feca 	bl	8006060 <HAL_GetTick>
 80082cc:	1bc0      	subs	r0, r0, r7
 80082ce:	2864      	cmp	r0, #100	; 0x64
 80082d0:	d8eb      	bhi.n	80082aa <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082d2:	f8d8 3000 	ldr.w	r3, [r8]
 80082d6:	039b      	lsls	r3, r3, #14
 80082d8:	d5f6      	bpl.n	80082c8 <HAL_RCC_OscConfig+0x3ac>
 80082da:	e755      	b.n	8008188 <HAL_RCC_OscConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 80082dc:	2600      	movs	r6, #0
 80082de:	e6b3      	b.n	8008048 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80082e0:	6833      	ldr	r3, [r6, #0]
 80082e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80082e8:	f7fd feba 	bl	8006060 <HAL_GetTick>
 80082ec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082ee:	e004      	b.n	80082fa <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082f0:	f7fd feb6 	bl	8006060 <HAL_GetTick>
 80082f4:	1bc0      	subs	r0, r0, r7
 80082f6:	2802      	cmp	r0, #2
 80082f8:	d8d7      	bhi.n	80082aa <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082fa:	6833      	ldr	r3, [r6, #0]
 80082fc:	0558      	lsls	r0, r3, #21
 80082fe:	d4f7      	bmi.n	80082f0 <HAL_RCC_OscConfig+0x3d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	e674      	b.n	8007fee <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008304:	4a4e      	ldr	r2, [pc, #312]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 8008306:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8008312:	f7fd fea5 	bl	8006060 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008316:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8008440 <HAL_RCC_OscConfig+0x524>
      tickstart = HAL_GetTick();
 800831a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800831c:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008320:	e004      	b.n	800832c <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008322:	f7fd fe9d 	bl	8006060 <HAL_GetTick>
 8008326:	1bc0      	subs	r0, r0, r7
 8008328:	4548      	cmp	r0, r9
 800832a:	d8be      	bhi.n	80082aa <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800832c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8008330:	079a      	lsls	r2, r3, #30
 8008332:	d5f6      	bpl.n	8008322 <HAL_RCC_OscConfig+0x406>
    if(pwrclkchanged == SET)
 8008334:	2e00      	cmp	r6, #0
 8008336:	f43f aeb7 	beq.w	80080a8 <HAL_RCC_OscConfig+0x18c>
 800833a:	e03f      	b.n	80083bc <HAL_RCC_OscConfig+0x4a0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800833c:	f7ff fce6 	bl	8007d0c <RCC_SetFlashLatencyFromMSIRange>
 8008340:	2800      	cmp	r0, #0
 8008342:	f47f af6b 	bne.w	800821c <HAL_RCC_OscConfig+0x300>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008346:	4b3e      	ldr	r3, [pc, #248]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	f042 0208 	orr.w	r2, r2, #8
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	6a21      	ldr	r1, [r4, #32]
 8008354:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008358:	430a      	orrs	r2, r1
 800835a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	69e1      	ldr	r1, [r4, #28]
 8008360:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008364:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	e73c      	b.n	80081e6 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSI48_DISABLE();
 800836c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008378:	f7fd fe72 	bl	8006060 <HAL_GetTick>
 800837c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800837e:	e004      	b.n	800838a <HAL_RCC_OscConfig+0x46e>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008380:	f7fd fe6e 	bl	8006060 <HAL_GetTick>
 8008384:	1bc0      	subs	r0, r0, r7
 8008386:	2802      	cmp	r0, #2
 8008388:	d88f      	bhi.n	80082aa <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800838a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800838e:	0799      	lsls	r1, r3, #30
 8008390:	d4f6      	bmi.n	8008380 <HAL_RCC_OscConfig+0x464>
 8008392:	e6a5      	b.n	80080e0 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8008394:	2001      	movs	r0, #1
}
 8008396:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80083a0:	f7fd fe5e 	bl	8006060 <HAL_GetTick>
 80083a4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	05d9      	lsls	r1, r3, #23
 80083aa:	f53f ae52 	bmi.w	8008052 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ae:	f7fd fe57 	bl	8006060 <HAL_GetTick>
 80083b2:	eba0 0008 	sub.w	r0, r0, r8
 80083b6:	2802      	cmp	r0, #2
 80083b8:	d9f5      	bls.n	80083a6 <HAL_RCC_OscConfig+0x48a>
 80083ba:	e776      	b.n	80082aa <HAL_RCC_OscConfig+0x38e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80083bc:	4a20      	ldr	r2, [pc, #128]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 80083be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80083c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083c4:	6593      	str	r3, [r2, #88]	; 0x58
 80083c6:	e66f      	b.n	80080a8 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083c8:	f7ff fca0 	bl	8007d0c <RCC_SetFlashLatencyFromMSIRange>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f43f af0a 	beq.w	80081e6 <HAL_RCC_OscConfig+0x2ca>
 80083d2:	e723      	b.n	800821c <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083d8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083ea:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083ec:	e766      	b.n	80082bc <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ee:	4b14      	ldr	r3, [pc, #80]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 80083f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80083f4:	f042 0204 	orr.w	r2, r2, #4
 80083f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80083fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008408:	e783      	b.n	8008312 <HAL_RCC_OscConfig+0x3f6>
      pll_config = RCC->PLLCFGR;
 800840a:	4e0d      	ldr	r6, [pc, #52]	; (8008440 <HAL_RCC_OscConfig+0x524>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800840c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800840e:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008410:	f003 0103 	and.w	r1, r3, #3
 8008414:	4291      	cmp	r1, r2
 8008416:	d055      	beq.n	80084c4 <HAL_RCC_OscConfig+0x5a8>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008418:	2d0c      	cmp	r5, #12
 800841a:	f43f aeff 	beq.w	800821c <HAL_RCC_OscConfig+0x300>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800841e:	4d08      	ldr	r5, [pc, #32]	; (8008440 <HAL_RCC_OscConfig+0x524>)
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	f53f aefa 	bmi.w	800821c <HAL_RCC_OscConfig+0x300>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	f53f aef6 	bmi.w	800821c <HAL_RCC_OscConfig+0x300>
            __HAL_RCC_PLL_DISABLE();
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008436:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8008438:	f7fd fe12 	bl	8006060 <HAL_GetTick>
 800843c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800843e:	e00d      	b.n	800845c <HAL_RCC_OscConfig+0x540>
 8008440:	40021000 	.word	0x40021000
 8008444:	0801fe1c 	.word	0x0801fe1c
 8008448:	200002ec 	.word	0x200002ec
 800844c:	20000300 	.word	0x20000300
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fd fe06 	bl	8006060 <HAL_GetTick>
 8008454:	1b80      	subs	r0, r0, r6
 8008456:	2802      	cmp	r0, #2
 8008458:	f63f af27 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	019f      	lsls	r7, r3, #6
 8008460:	d4f6      	bmi.n	8008450 <HAL_RCC_OscConfig+0x534>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008462:	68e9      	ldr	r1, [r5, #12]
 8008464:	4b36      	ldr	r3, [pc, #216]	; (8008540 <HAL_RCC_OscConfig+0x624>)
 8008466:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008468:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800846a:	4e36      	ldr	r6, [pc, #216]	; (8008544 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800846c:	400b      	ands	r3, r1
 800846e:	4313      	orrs	r3, r2
 8008470:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 8008474:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008478:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800847c:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8008480:	3801      	subs	r0, #1
 8008482:	0849      	lsrs	r1, r1, #1
 8008484:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008488:	3901      	subs	r1, #1
 800848a:	0852      	lsrs	r2, r2, #1
 800848c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8008490:	3a01      	subs	r2, #1
 8008492:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008496:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800849e:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084a0:	68eb      	ldr	r3, [r5, #12]
 80084a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084a6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80084a8:	f7fd fdda 	bl	8006060 <HAL_GetTick>
 80084ac:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084ae:	e005      	b.n	80084bc <HAL_RCC_OscConfig+0x5a0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b0:	f7fd fdd6 	bl	8006060 <HAL_GetTick>
 80084b4:	1b00      	subs	r0, r0, r4
 80084b6:	2802      	cmp	r0, #2
 80084b8:	f63f aef7 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	0198      	lsls	r0, r3, #6
 80084c0:	d5f6      	bpl.n	80084b0 <HAL_RCC_OscConfig+0x594>
 80084c2:	e636      	b.n	8008132 <HAL_RCC_OscConfig+0x216>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80084c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80084ca:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80084cc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80084d0:	d1a2      	bne.n	8008418 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084d8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80084dc:	d19c      	bne.n	8008418 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80084de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084e4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80084e8:	d196      	bne.n	8008418 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80084ec:	0852      	lsrs	r2, r2, #1
 80084ee:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80084f2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80084f4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80084f8:	d18e      	bne.n	8008418 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80084fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80084fc:	0852      	lsrs	r2, r2, #1
 80084fe:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008502:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008504:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008508:	d186      	bne.n	8008418 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800850a:	6833      	ldr	r3, [r6, #0]
 800850c:	0199      	lsls	r1, r3, #6
 800850e:	f53f ae10 	bmi.w	8008132 <HAL_RCC_OscConfig+0x216>
          __HAL_RCC_PLL_ENABLE();
 8008512:	6833      	ldr	r3, [r6, #0]
 8008514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008518:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800851a:	68f3      	ldr	r3, [r6, #12]
 800851c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008520:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8008522:	f7fd fd9d 	bl	8006060 <HAL_GetTick>
 8008526:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008528:	e005      	b.n	8008536 <HAL_RCC_OscConfig+0x61a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800852a:	f7fd fd99 	bl	8006060 <HAL_GetTick>
 800852e:	1b00      	subs	r0, r0, r4
 8008530:	2802      	cmp	r0, #2
 8008532:	f63f aeba 	bhi.w	80082aa <HAL_RCC_OscConfig+0x38e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008536:	6833      	ldr	r3, [r6, #0]
 8008538:	019a      	lsls	r2, r3, #6
 800853a:	d5f6      	bpl.n	800852a <HAL_RCC_OscConfig+0x60e>
 800853c:	e5f9      	b.n	8008132 <HAL_RCC_OscConfig+0x216>
 800853e:	bf00      	nop
 8008540:	019d800c 	.word	0x019d800c
 8008544:	40021000 	.word	0x40021000

08008548 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008548:	2800      	cmp	r0, #0
 800854a:	f000 809b 	beq.w	8008684 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800854e:	4a7d      	ldr	r2, [pc, #500]	; (8008744 <HAL_RCC_ClockConfig+0x1fc>)
{
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008554:	6813      	ldr	r3, [r2, #0]
 8008556:	f003 030f 	and.w	r3, r3, #15
 800855a:	428b      	cmp	r3, r1
 800855c:	460d      	mov	r5, r1
 800855e:	4604      	mov	r4, r0
 8008560:	d20c      	bcs.n	800857c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	f023 030f 	bic.w	r3, r3, #15
 8008568:	430b      	orrs	r3, r1
 800856a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856c:	6813      	ldr	r3, [r2, #0]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	428b      	cmp	r3, r1
 8008574:	d002      	beq.n	800857c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008576:	2001      	movs	r0, #1
}
 8008578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	07df      	lsls	r7, r3, #31
 8008580:	d573      	bpl.n	800866a <HAL_RCC_ClockConfig+0x122>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008582:	6867      	ldr	r7, [r4, #4]
 8008584:	2f03      	cmp	r7, #3
 8008586:	d07f      	beq.n	8008688 <HAL_RCC_ClockConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008588:	4b6f      	ldr	r3, [pc, #444]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800858a:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800858c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800858e:	d076      	beq.n	800867e <HAL_RCC_ClockConfig+0x136>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008590:	2f00      	cmp	r7, #0
 8008592:	f040 8091 	bne.w	80086b8 <HAL_RCC_ClockConfig+0x170>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008596:	079e      	lsls	r6, r3, #30
 8008598:	d5ed      	bpl.n	8008576 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800859a:	f7ff fc6d 	bl	8007e78 <HAL_RCC_GetSysClockFreq>
 800859e:	4b6b      	ldr	r3, [pc, #428]	; (800874c <HAL_RCC_ClockConfig+0x204>)
 80085a0:	4298      	cmp	r0, r3
 80085a2:	f240 8084 	bls.w	80086ae <HAL_RCC_ClockConfig+0x166>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80085a6:	4a68      	ldr	r2, [pc, #416]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 80085a8:	6893      	ldr	r3, [r2, #8]
 80085aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b2:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80085b4:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085b8:	4e63      	ldr	r6, [pc, #396]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 80085ba:	68b3      	ldr	r3, [r6, #8]
 80085bc:	f023 0303 	bic.w	r3, r3, #3
 80085c0:	433b      	orrs	r3, r7
 80085c2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80085c4:	f7fd fd4c 	bl	8006060 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80085cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ce:	e004      	b.n	80085da <HAL_RCC_ClockConfig+0x92>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d0:	f7fd fd46 	bl	8006060 <HAL_GetTick>
 80085d4:	1bc0      	subs	r0, r0, r7
 80085d6:	4540      	cmp	r0, r8
 80085d8:	d86c      	bhi.n	80086b4 <HAL_RCC_ClockConfig+0x16c>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085da:	68b3      	ldr	r3, [r6, #8]
 80085dc:	6862      	ldr	r2, [r4, #4]
 80085de:	f003 030c 	and.w	r3, r3, #12
 80085e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80085e6:	d1f3      	bne.n	80085d0 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	0799      	lsls	r1, r3, #30
 80085ec:	d43f      	bmi.n	800866e <HAL_RCC_ClockConfig+0x126>
    if(hpre == RCC_SYSCLK_DIV2)
 80085ee:	f1b9 0f00 	cmp.w	r9, #0
 80085f2:	d003      	beq.n	80085fc <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085f4:	68b2      	ldr	r2, [r6, #8]
 80085f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085fa:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085fc:	4951      	ldr	r1, [pc, #324]	; (8008744 <HAL_RCC_ClockConfig+0x1fc>)
 80085fe:	680a      	ldr	r2, [r1, #0]
 8008600:	f002 020f 	and.w	r2, r2, #15
 8008604:	42aa      	cmp	r2, r5
 8008606:	d909      	bls.n	800861c <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008608:	680a      	ldr	r2, [r1, #0]
 800860a:	f022 020f 	bic.w	r2, r2, #15
 800860e:	432a      	orrs	r2, r5
 8008610:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008612:	680a      	ldr	r2, [r1, #0]
 8008614:	f002 020f 	and.w	r2, r2, #15
 8008618:	42aa      	cmp	r2, r5
 800861a:	d1ac      	bne.n	8008576 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800861c:	075a      	lsls	r2, r3, #29
 800861e:	d506      	bpl.n	800862e <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008620:	4949      	ldr	r1, [pc, #292]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 8008622:	68e0      	ldr	r0, [r4, #12]
 8008624:	688a      	ldr	r2, [r1, #8]
 8008626:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800862a:	4302      	orrs	r2, r0
 800862c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800862e:	071b      	lsls	r3, r3, #28
 8008630:	d507      	bpl.n	8008642 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008632:	4a45      	ldr	r2, [pc, #276]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 8008634:	6921      	ldr	r1, [r4, #16]
 8008636:	6893      	ldr	r3, [r2, #8]
 8008638:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800863c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008640:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008642:	f7ff fc19 	bl	8007e78 <HAL_RCC_GetSysClockFreq>
 8008646:	4a40      	ldr	r2, [pc, #256]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 8008648:	4c41      	ldr	r4, [pc, #260]	; (8008750 <HAL_RCC_ClockConfig+0x208>)
 800864a:	6892      	ldr	r2, [r2, #8]
 800864c:	4941      	ldr	r1, [pc, #260]	; (8008754 <HAL_RCC_ClockConfig+0x20c>)
 800864e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008652:	4603      	mov	r3, r0
 8008654:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8008656:	4840      	ldr	r0, [pc, #256]	; (8008758 <HAL_RCC_ClockConfig+0x210>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008658:	f002 021f 	and.w	r2, r2, #31
 800865c:	40d3      	lsrs	r3, r2
 800865e:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8008660:	6800      	ldr	r0, [r0, #0]
}
 8008662:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8008666:	f7fd bcbb 	b.w	8005fe0 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800866a:	079e      	lsls	r6, r3, #30
 800866c:	d5c6      	bpl.n	80085fc <HAL_RCC_ClockConfig+0xb4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800866e:	4936      	ldr	r1, [pc, #216]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 8008670:	68a0      	ldr	r0, [r4, #8]
 8008672:	688a      	ldr	r2, [r1, #8]
 8008674:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008678:	4302      	orrs	r2, r0
 800867a:	608a      	str	r2, [r1, #8]
 800867c:	e7be      	b.n	80085fc <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800867e:	039b      	lsls	r3, r3, #14
 8008680:	d48b      	bmi.n	800859a <HAL_RCC_ClockConfig+0x52>
 8008682:	e778      	b.n	8008576 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008684:	2001      	movs	r0, #1
}
 8008686:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008688:	4a2f      	ldr	r2, [pc, #188]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
 800868a:	6811      	ldr	r1, [r2, #0]
 800868c:	0188      	lsls	r0, r1, #6
 800868e:	f57f af72 	bpl.w	8008576 <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8008692:	68d1      	ldr	r1, [r2, #12]
 8008694:	f001 0103 	and.w	r1, r1, #3
 8008698:	2901      	cmp	r1, #1
 800869a:	d011      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x178>
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800869c:	68d1      	ldr	r1, [r2, #12]
 800869e:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 80086a2:	3902      	subs	r1, #2
 80086a4:	2901      	cmp	r1, #1
 80086a6:	d94a      	bls.n	800873e <HAL_RCC_ClockConfig+0x1f6>
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086a8:	68d3      	ldr	r3, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80086aa:	68d3      	ldr	r3, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086ac:	68d3      	ldr	r3, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80086ae:	f04f 0900 	mov.w	r9, #0
 80086b2:	e781      	b.n	80085b8 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 80086b4:	2003      	movs	r0, #3
 80086b6:	e75f      	b.n	8008578 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086b8:	0558      	lsls	r0, r3, #21
 80086ba:	f57f af5c 	bpl.w	8008576 <HAL_RCC_ClockConfig+0x2e>
 80086be:	e76c      	b.n	800859a <HAL_RCC_ClockConfig+0x52>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80086c0:	6811      	ldr	r1, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80086c2:	4826      	ldr	r0, [pc, #152]	; (800875c <HAL_RCC_ClockConfig+0x214>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80086c4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80086c6:	bf54      	ite	pl
 80086c8:	f8d2 1094 	ldrpl.w	r1, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80086cc:	6811      	ldrmi	r1, [r2, #0]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086ce:	4a1e      	ldr	r2, [pc, #120]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80086d0:	bf54      	ite	pl
 80086d2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80086d6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086da:	68d2      	ldr	r2, [r2, #12]
    msirange = MSIRangeTable[msirange];
 80086dc:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    pllvco = HSI_VALUE;
 80086e0:	491f      	ldr	r1, [pc, #124]	; (8008760 <HAL_RCC_ClockConfig+0x218>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086e2:	f002 0203 	and.w	r2, r2, #3
  switch (pllsource)
 80086e6:	3a02      	subs	r2, #2
    pllvco = HSI_VALUE;
 80086e8:	2a01      	cmp	r2, #1
 80086ea:	bf98      	it	ls
 80086ec:	468c      	movls	ip, r1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086ee:	4816      	ldr	r0, [pc, #88]	; (8008748 <HAL_RCC_ClockConfig+0x200>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80086f0:	4e16      	ldr	r6, [pc, #88]	; (800874c <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086f2:	68c1      	ldr	r1, [r0, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80086f4:	68c2      	ldr	r2, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086f6:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80086fa:	f3c2 2206 	ubfx	r2, r2, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086fe:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008700:	fb0c f202 	mul.w	r2, ip, r2
 8008704:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008708:	68c1      	ldr	r1, [r0, #12]
 800870a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800870e:	3101      	adds	r1, #1
 8008710:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 8008712:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008716:	42b2      	cmp	r2, r6
 8008718:	d9c9      	bls.n	80086ae <HAL_RCC_ClockConfig+0x166>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800871a:	6882      	ldr	r2, [r0, #8]
 800871c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8008720:	d004      	beq.n	800872c <HAL_RCC_ClockConfig+0x1e4>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8008722:	079a      	lsls	r2, r3, #30
 8008724:	d5c3      	bpl.n	80086ae <HAL_RCC_ClockConfig+0x166>
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1c0      	bne.n	80086ae <HAL_RCC_ClockConfig+0x166>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800872c:	6883      	ldr	r3, [r0, #8]
 800872e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008736:	6083      	str	r3, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008738:	f04f 0980 	mov.w	r9, #128	; 0x80
 800873c:	e73c      	b.n	80085b8 <HAL_RCC_ClockConfig+0x70>
    pllvco = HSI_VALUE;
 800873e:	f8df c020 	ldr.w	ip, [pc, #32]	; 8008760 <HAL_RCC_ClockConfig+0x218>
 8008742:	e7d4      	b.n	80086ee <HAL_RCC_ClockConfig+0x1a6>
 8008744:	40022000 	.word	0x40022000
 8008748:	40021000 	.word	0x40021000
 800874c:	04c4b400 	.word	0x04c4b400
 8008750:	0801fe1c 	.word	0x0801fe1c
 8008754:	20000300 	.word	0x20000300
 8008758:	200002ec 	.word	0x200002ec
 800875c:	0801fdec 	.word	0x0801fdec
 8008760:	00f42400 	.word	0x00f42400

08008764 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8008764:	4b01      	ldr	r3, [pc, #4]	; (800876c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000300 	.word	0x20000300

08008770 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008772:	4a06      	ldr	r2, [pc, #24]	; (800878c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008774:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008776:	4906      	ldr	r1, [pc, #24]	; (8008790 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008778:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800877c:	6808      	ldr	r0, [r1, #0]
 800877e:	5cd3      	ldrb	r3, [r2, r3]
 8008780:	f003 031f 	and.w	r3, r3, #31
}
 8008784:	40d8      	lsrs	r0, r3
 8008786:	4770      	bx	lr
 8008788:	40021000 	.word	0x40021000
 800878c:	0801fe2c 	.word	0x0801fe2c
 8008790:	20000300 	.word	0x20000300

08008794 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008796:	4b44      	ldr	r3, [pc, #272]	; (80088a8 <RCCEx_PLLSAI1_Config+0x114>)
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	0792      	lsls	r2, r2, #30
{
 800879c:	4604      	mov	r4, r0
 800879e:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087a0:	d007      	beq.n	80087b2 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	6802      	ldr	r2, [r0, #0]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d012      	beq.n	80087d4 <RCCEx_PLLSAI1_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80087ae:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80087b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80087b2:	6800      	ldr	r0, [r0, #0]
 80087b4:	2802      	cmp	r0, #2
 80087b6:	d04e      	beq.n	8008856 <RCCEx_PLLSAI1_Config+0xc2>
 80087b8:	2803      	cmp	r0, #3
 80087ba:	d045      	beq.n	8008848 <RCCEx_PLLSAI1_Config+0xb4>
 80087bc:	2801      	cmp	r0, #1
 80087be:	d1f6      	bne.n	80087ae <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	079b      	lsls	r3, r3, #30
 80087c4:	d5f4      	bpl.n	80087b0 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80087c6:	4a38      	ldr	r2, [pc, #224]	; (80088a8 <RCCEx_PLLSAI1_Config+0x114>)
 80087c8:	68d3      	ldr	r3, [r2, #12]
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	4303      	orrs	r3, r0
 80087d0:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 80087d2:	e001      	b.n	80087d8 <RCCEx_PLLSAI1_Config+0x44>
       ||
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0ea      	beq.n	80087ae <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 80087d8:	4d33      	ldr	r5, [pc, #204]	; (80088a8 <RCCEx_PLLSAI1_Config+0x114>)
 80087da:	682b      	ldr	r3, [r5, #0]
 80087dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087e0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80087e2:	f7fd fc3d 	bl	8006060 <HAL_GetTick>
 80087e6:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087e8:	e004      	b.n	80087f4 <RCCEx_PLLSAI1_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087ea:	f7fd fc39 	bl	8006060 <HAL_GetTick>
 80087ee:	1b83      	subs	r3, r0, r6
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d834      	bhi.n	800885e <RCCEx_PLLSAI1_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	011a      	lsls	r2, r3, #4
 80087f8:	d4f7      	bmi.n	80087ea <RCCEx_PLLSAI1_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	d131      	bne.n	8008862 <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	68a1      	ldr	r1, [r4, #8]
 8008802:	692a      	ldr	r2, [r5, #16]
 8008804:	06db      	lsls	r3, r3, #27
 8008806:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800880a:	4928      	ldr	r1, [pc, #160]	; (80088ac <RCCEx_PLLSAI1_Config+0x118>)
 800880c:	4011      	ands	r1, r2
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	430b      	orrs	r3, r1
 8008812:	3a01      	subs	r2, #1
 8008814:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008818:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800881a:	4d23      	ldr	r5, [pc, #140]	; (80088a8 <RCCEx_PLLSAI1_Config+0x114>)
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008822:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008824:	f7fd fc1c 	bl	8006060 <HAL_GetTick>
 8008828:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800882a:	e004      	b.n	8008836 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800882c:	f7fd fc18 	bl	8006060 <HAL_GetTick>
 8008830:	1b83      	subs	r3, r0, r6
 8008832:	2b02      	cmp	r3, #2
 8008834:	d813      	bhi.n	800885e <RCCEx_PLLSAI1_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	d5f7      	bpl.n	800882c <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800883c:	692b      	ldr	r3, [r5, #16]
 800883e:	69a2      	ldr	r2, [r4, #24]
 8008840:	4313      	orrs	r3, r2
 8008842:	2000      	movs	r0, #0
 8008844:	612b      	str	r3, [r5, #16]
}
 8008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	0395      	lsls	r5, r2, #14
 800884c:	d4bb      	bmi.n	80087c6 <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	0359      	lsls	r1, r3, #13
 8008852:	d5ac      	bpl.n	80087ae <RCCEx_PLLSAI1_Config+0x1a>
 8008854:	e7b7      	b.n	80087c6 <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	055e      	lsls	r6, r3, #21
 800885a:	d5a8      	bpl.n	80087ae <RCCEx_PLLSAI1_Config+0x1a>
 800885c:	e7b3      	b.n	80087c6 <RCCEx_PLLSAI1_Config+0x32>
    switch(PllSai1->PLLSAI1Source)
 800885e:	2003      	movs	r0, #3
}
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8008862:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008864:	692a      	ldr	r2, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8008866:	d00f      	beq.n	8008888 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <RCCEx_PLLSAI1_Config+0x11c>)
 800886a:	68a1      	ldr	r1, [r4, #8]
 800886c:	4013      	ands	r3, r2
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008874:	3a01      	subs	r2, #1
 8008876:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800887a:	6962      	ldr	r2, [r4, #20]
 800887c:	0852      	lsrs	r2, r2, #1
 800887e:	3a01      	subs	r2, #1
 8008880:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008884:	612b      	str	r3, [r5, #16]
 8008886:	e7c8      	b.n	800881a <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <RCCEx_PLLSAI1_Config+0x120>)
 800888a:	68a1      	ldr	r1, [r4, #8]
 800888c:	4013      	ands	r3, r2
 800888e:	6862      	ldr	r2, [r4, #4]
 8008890:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008894:	3a01      	subs	r2, #1
 8008896:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800889a:	6922      	ldr	r2, [r4, #16]
 800889c:	0852      	lsrs	r2, r2, #1
 800889e:	3a01      	subs	r2, #1
 80088a0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80088a4:	612b      	str	r3, [r5, #16]
 80088a6:	e7b8      	b.n	800881a <RCCEx_PLLSAI1_Config+0x86>
 80088a8:	40021000 	.word	0x40021000
 80088ac:	07ff800f 	.word	0x07ff800f
 80088b0:	f9ff800f 	.word	0xf9ff800f
 80088b4:	ff9f800f 	.word	0xff9f800f

080088b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088ba:	4b44      	ldr	r3, [pc, #272]	; (80089cc <RCCEx_PLLSAI2_Config+0x114>)
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	0792      	lsls	r2, r2, #30
{
 80088c0:	4604      	mov	r4, r0
 80088c2:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088c4:	d007      	beq.n	80088d6 <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	6802      	ldr	r2, [r0, #0]
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d012      	beq.n	80088f8 <RCCEx_PLLSAI2_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80088d2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80088d6:	6800      	ldr	r0, [r0, #0]
 80088d8:	2802      	cmp	r0, #2
 80088da:	d04e      	beq.n	800897a <RCCEx_PLLSAI2_Config+0xc2>
 80088dc:	2803      	cmp	r0, #3
 80088de:	d045      	beq.n	800896c <RCCEx_PLLSAI2_Config+0xb4>
 80088e0:	2801      	cmp	r0, #1
 80088e2:	d1f6      	bne.n	80088d2 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	079b      	lsls	r3, r3, #30
 80088e8:	d5f4      	bpl.n	80088d4 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80088ea:	4a38      	ldr	r2, [pc, #224]	; (80089cc <RCCEx_PLLSAI2_Config+0x114>)
 80088ec:	68d3      	ldr	r3, [r2, #12]
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	4303      	orrs	r3, r0
 80088f4:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 80088f6:	e001      	b.n	80088fc <RCCEx_PLLSAI2_Config+0x44>
       ||
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0ea      	beq.n	80088d2 <RCCEx_PLLSAI2_Config+0x1a>
    __HAL_RCC_PLLSAI2_DISABLE();
 80088fc:	4d33      	ldr	r5, [pc, #204]	; (80089cc <RCCEx_PLLSAI2_Config+0x114>)
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008904:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008906:	f7fd fbab 	bl	8006060 <HAL_GetTick>
 800890a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800890c:	e004      	b.n	8008918 <RCCEx_PLLSAI2_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800890e:	f7fd fba7 	bl	8006060 <HAL_GetTick>
 8008912:	1b83      	subs	r3, r0, r6
 8008914:	2b02      	cmp	r3, #2
 8008916:	d834      	bhi.n	8008982 <RCCEx_PLLSAI2_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	009a      	lsls	r2, r3, #2
 800891c:	d4f7      	bmi.n	800890e <RCCEx_PLLSAI2_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 800891e:	2f00      	cmp	r7, #0
 8008920:	d131      	bne.n	8008986 <RCCEx_PLLSAI2_Config+0xce>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	68a1      	ldr	r1, [r4, #8]
 8008926:	696a      	ldr	r2, [r5, #20]
 8008928:	06db      	lsls	r3, r3, #27
 800892a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800892e:	4928      	ldr	r1, [pc, #160]	; (80089d0 <RCCEx_PLLSAI2_Config+0x118>)
 8008930:	4011      	ands	r1, r2
 8008932:	6862      	ldr	r2, [r4, #4]
 8008934:	430b      	orrs	r3, r1
 8008936:	3a01      	subs	r2, #1
 8008938:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800893c:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800893e:	4d23      	ldr	r5, [pc, #140]	; (80089cc <RCCEx_PLLSAI2_Config+0x114>)
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008946:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008948:	f7fd fb8a 	bl	8006060 <HAL_GetTick>
 800894c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800894e:	e004      	b.n	800895a <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008950:	f7fd fb86 	bl	8006060 <HAL_GetTick>
 8008954:	1b83      	subs	r3, r0, r6
 8008956:	2b02      	cmp	r3, #2
 8008958:	d813      	bhi.n	8008982 <RCCEx_PLLSAI2_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	d5f7      	bpl.n	8008950 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008960:	696b      	ldr	r3, [r5, #20]
 8008962:	69a2      	ldr	r2, [r4, #24]
 8008964:	4313      	orrs	r3, r2
 8008966:	2000      	movs	r0, #0
 8008968:	616b      	str	r3, [r5, #20]
}
 800896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	0395      	lsls	r5, r2, #14
 8008970:	d4bb      	bmi.n	80088ea <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	0359      	lsls	r1, r3, #13
 8008976:	d5ac      	bpl.n	80088d2 <RCCEx_PLLSAI2_Config+0x1a>
 8008978:	e7b7      	b.n	80088ea <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	055e      	lsls	r6, r3, #21
 800897e:	d5a8      	bpl.n	80088d2 <RCCEx_PLLSAI2_Config+0x1a>
 8008980:	e7b3      	b.n	80088ea <RCCEx_PLLSAI2_Config+0x32>
    switch(PllSai2->PLLSAI2Source)
 8008982:	2003      	movs	r0, #3
}
 8008984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8008986:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008988:	696a      	ldr	r2, [r5, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 800898a:	d00f      	beq.n	80089ac <RCCEx_PLLSAI2_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800898c:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <RCCEx_PLLSAI2_Config+0x11c>)
 800898e:	68a1      	ldr	r1, [r4, #8]
 8008990:	4013      	ands	r3, r2
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008998:	3a01      	subs	r2, #1
 800899a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800899e:	6962      	ldr	r2, [r4, #20]
 80089a0:	0852      	lsrs	r2, r2, #1
 80089a2:	3a01      	subs	r2, #1
 80089a4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80089a8:	616b      	str	r3, [r5, #20]
 80089aa:	e7c8      	b.n	800893e <RCCEx_PLLSAI2_Config+0x86>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <RCCEx_PLLSAI2_Config+0x120>)
 80089ae:	68a1      	ldr	r1, [r4, #8]
 80089b0:	4013      	ands	r3, r2
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80089b8:	3a01      	subs	r2, #1
 80089ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80089be:	6922      	ldr	r2, [r4, #16]
 80089c0:	0852      	lsrs	r2, r2, #1
 80089c2:	3a01      	subs	r2, #1
 80089c4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80089c8:	616b      	str	r3, [r5, #20]
 80089ca:	e7b8      	b.n	800893e <RCCEx_PLLSAI2_Config+0x86>
 80089cc:	40021000 	.word	0x40021000
 80089d0:	07ff800f 	.word	0x07ff800f
 80089d4:	f9ff800f 	.word	0xf9ff800f
 80089d8:	ff9f800f 	.word	0xff9f800f

080089dc <HAL_RCCEx_PeriphCLKConfig>:
{
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80089e0:	6803      	ldr	r3, [r0, #0]
 80089e2:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 80089e6:	b082      	sub	sp, #8
 80089e8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80089ea:	d023      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80089ec:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80089ee:	2940      	cmp	r1, #64	; 0x40
 80089f0:	f000 8260 	beq.w	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80089f4:	d810      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80089f6:	2900      	cmp	r1, #0
 80089f8:	f000 8214 	beq.w	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x448>
 80089fc:	2920      	cmp	r1, #32
 80089fe:	f040 8282 	bne.w	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008a02:	2100      	movs	r1, #0
 8008a04:	3020      	adds	r0, #32
 8008a06:	f7ff ff57 	bl	80088b8 <RCCEx_PLLSAI2_Config>
 8008a0a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a0c:	2d00      	cmp	r5, #0
 8008a0e:	f040 824f 	bne.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a12:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	e004      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a18:	2960      	cmp	r1, #96	; 0x60
 8008a1a:	d002      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8008a1c:	2980      	cmp	r1, #128	; 0x80
 8008a1e:	f040 8272 	bne.w	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a22:	48b3      	ldr	r0, [pc, #716]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008a24:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8008a28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
 8008a32:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008a34:	04d8      	lsls	r0, r3, #19
 8008a36:	f140 8147 	bpl.w	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008a3a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008a3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008a40:	f000 822f 	beq.w	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008a44:	f200 8133 	bhi.w	8008cae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	f000 81f3 	beq.w	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8008a4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008a52:	f040 8255 	bne.w	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008a56:	2100      	movs	r1, #0
 8008a58:	f104 0020 	add.w	r0, r4, #32
 8008a5c:	f7ff ff2c 	bl	80088b8 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a60:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008a62:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	f040 812d 	bne.w	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a6a:	49a1      	ldr	r1, [pc, #644]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008a6c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008a6e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8008a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a76:	4302      	orrs	r2, r0
 8008a78:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a7c:	0399      	lsls	r1, r3, #14
 8008a7e:	f100 8127 	bmi.w	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a82:	07da      	lsls	r2, r3, #31
 8008a84:	d508      	bpl.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a86:	499a      	ldr	r1, [pc, #616]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008a88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008a8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008a8e:	f022 0203 	bic.w	r2, r2, #3
 8008a92:	4302      	orrs	r2, r0
 8008a94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a98:	079f      	lsls	r7, r3, #30
 8008a9a:	d508      	bpl.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a9c:	4994      	ldr	r1, [pc, #592]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008a9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008aa0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008aa4:	f022 020c 	bic.w	r2, r2, #12
 8008aa8:	4302      	orrs	r2, r0
 8008aaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008aae:	0758      	lsls	r0, r3, #29
 8008ab0:	d508      	bpl.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ab2:	498f      	ldr	r1, [pc, #572]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008ab4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008ab6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008aba:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008abe:	4302      	orrs	r2, r0
 8008ac0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ac4:	0719      	lsls	r1, r3, #28
 8008ac6:	d508      	bpl.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ac8:	4989      	ldr	r1, [pc, #548]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008aca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008acc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008ad0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ad4:	4302      	orrs	r2, r0
 8008ad6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ada:	06da      	lsls	r2, r3, #27
 8008adc:	d508      	bpl.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ade:	4984      	ldr	r1, [pc, #528]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008ae0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008ae2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008ae6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008aea:	4302      	orrs	r2, r0
 8008aec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008af0:	069f      	lsls	r7, r3, #26
 8008af2:	d508      	bpl.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008af4:	497e      	ldr	r1, [pc, #504]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008af6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008af8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008afc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b00:	4302      	orrs	r2, r0
 8008b02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b06:	0598      	lsls	r0, r3, #22
 8008b08:	d508      	bpl.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b0a:	4979      	ldr	r1, [pc, #484]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b0c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008b0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b12:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008b16:	4302      	orrs	r2, r0
 8008b18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b1c:	0559      	lsls	r1, r3, #21
 8008b1e:	d508      	bpl.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b20:	4973      	ldr	r1, [pc, #460]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b22:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008b24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b28:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008b2c:	4302      	orrs	r2, r0
 8008b2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b32:	065a      	lsls	r2, r3, #25
 8008b34:	d508      	bpl.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b36:	496e      	ldr	r1, [pc, #440]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b42:	4302      	orrs	r2, r0
 8008b44:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b48:	061f      	lsls	r7, r3, #24
 8008b4a:	d508      	bpl.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x182>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b4c:	4968      	ldr	r1, [pc, #416]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008b58:	4302      	orrs	r2, r0
 8008b5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b5e:	05d8      	lsls	r0, r3, #23
 8008b60:	d508      	bpl.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x198>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b62:	4963      	ldr	r1, [pc, #396]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b64:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008b66:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b6a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008b6e:	4302      	orrs	r2, r0
 8008b70:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b74:	02d9      	lsls	r1, r3, #11
 8008b76:	d508      	bpl.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b78:	495d      	ldr	r1, [pc, #372]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b7a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008b7c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8008b80:	f022 0203 	bic.w	r2, r2, #3
 8008b84:	4302      	orrs	r2, r0
 8008b86:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b8a:	049a      	lsls	r2, r3, #18
 8008b8c:	d510      	bpl.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b8e:	4958      	ldr	r1, [pc, #352]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008b90:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008b92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b96:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008b9a:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b9c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ba0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ba4:	f000 814c 	beq.w	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ba8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8008bac:	f000 8188 	beq.w	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008bb0:	031f      	lsls	r7, r3, #12
 8008bb2:	d51a      	bpl.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008bb4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008bb6:	4a4e      	ldr	r2, [pc, #312]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008bb8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008bbc:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8008bc0:	f000 8143 	beq.w	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8008bc4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8008bc8:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8008bcc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008bd0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8008bd4:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008bd6:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008bda:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008bde:	f040 80e7 	bne.w	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008be2:	68d1      	ldr	r1, [r2, #12]
 8008be4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008be8:	60d1      	str	r1, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bea:	0358      	lsls	r0, r3, #13
 8008bec:	d510      	bpl.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bee:	4940      	ldr	r1, [pc, #256]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008bf0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008bf2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008bf6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008bfa:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008bfc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c04:	f000 812a 	beq.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x480>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008c08:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8008c0c:	f000 8163 	beq.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c10:	0459      	lsls	r1, r3, #17
 8008c12:	d50d      	bpl.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c14:	4836      	ldr	r0, [pc, #216]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008c16:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008c1a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008c1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008c22:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c28:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c2c:	f000 8123 	beq.w	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x49a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c30:	03da      	lsls	r2, r3, #15
 8008c32:	d509      	bpl.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c34:	492e      	ldr	r1, [pc, #184]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008c36:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008c3a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8008c3e:	f022 0204 	bic.w	r2, r2, #4
 8008c42:	4302      	orrs	r2, r0
 8008c44:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008c48:	029f      	lsls	r7, r3, #10
 8008c4a:	d509      	bpl.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008c4c:	4928      	ldr	r1, [pc, #160]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008c4e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008c52:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8008c56:	f022 0218 	bic.w	r2, r2, #24
 8008c5a:	4302      	orrs	r2, r0
 8008c5c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c60:	0258      	lsls	r0, r3, #9
 8008c62:	f100 80b4 	bmi.w	8008dce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008c66:	021a      	lsls	r2, r3, #8
 8008c68:	d50d      	bpl.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8008c6a:	4821      	ldr	r0, [pc, #132]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008c6c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008c70:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8008c74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c78:	430a      	orrs	r2, r1
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8008c7a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8008c7e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8008c82:	f000 8103 	beq.w	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c86:	01db      	lsls	r3, r3, #7
 8008c88:	d50d      	bpl.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008c8a:	4a19      	ldr	r2, [pc, #100]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008c8c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8008c90:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8008c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c98:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008c9a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008c9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008ca2:	f000 80e0 	beq.w	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
}
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	b002      	add	sp, #8
 8008caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8008cae:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8008cb2:	d003      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8008cb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008cb8:	f040 8122 	bne.w	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008cbc:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	f43f aed3 	beq.w	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8008cc4:	4635      	mov	r5, r6
 8008cc6:	e000      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8008cc8:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cca:	0399      	lsls	r1, r3, #14
 8008ccc:	f57f aed9 	bpl.w	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008cd0:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008cd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cd4:	00d2      	lsls	r2, r2, #3
 8008cd6:	d55f      	bpl.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    FlagStatus       pwrclkchanged = RESET;
 8008cd8:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cdc:	4f05      	ldr	r7, [pc, #20]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008ce6:	f7fd f9bb 	bl	8006060 <HAL_GetTick>
 8008cea:	4680      	mov	r8, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008cec:	e00b      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008cee:	bf00      	nop
 8008cf0:	40021000 	.word	0x40021000
 8008cf4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cf8:	f7fd f9b2 	bl	8006060 <HAL_GetTick>
 8008cfc:	eba0 0308 	sub.w	r3, r0, r8
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	f200 808c 	bhi.w	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	05db      	lsls	r3, r3, #23
 8008d0a:	d5f5      	bpl.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    if(ret == HAL_OK)
 8008d0c:	2e00      	cmp	r6, #0
 8008d0e:	f040 80f3 	bne.w	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d12:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8008f0c <HAL_RCCEx_PeriphCLKConfig+0x530>
 8008d16:	f8da 3090 	ldr.w	r3, [sl, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008d1e:	d027      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8008d20:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d025      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d28:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d2c:	f8da 3090 	ldr.w	r3, [sl, #144]	; 0x90
 8008d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d34:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d38:	f8da 3090 	ldr.w	r3, [sl, #144]	; 0x90
 8008d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d40:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d44:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d46:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8008d4a:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d4e:	f140 80d5 	bpl.w	8008efc <HAL_RCCEx_PeriphCLKConfig+0x520>
        tickstart = HAL_GetTick();
 8008d52:	f7fd f985 	bl	8006060 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d56:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008d5a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d5c:	e004      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x38c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5e:	f7fd f97f 	bl	8006060 <HAL_GetTick>
 8008d62:	1bc0      	subs	r0, r0, r7
 8008d64:	4540      	cmp	r0, r8
 8008d66:	d85a      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d68:	f8da 3090 	ldr.w	r3, [sl, #144]	; 0x90
 8008d6c:	0799      	lsls	r1, r3, #30
 8008d6e:	d5f6      	bpl.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x382>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d70:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008d74:	4965      	ldr	r1, [pc, #404]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8008d76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008d7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8008d84:	f1b9 0f00 	cmp.w	r9, #0
 8008d88:	d004      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d8a:	4a60      	ldr	r2, [pc, #384]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8008d8c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d92:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	e674      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8008da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008daa:	f04f 0901 	mov.w	r9, #1
 8008dae:	e795      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008db0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8008db4:	f47f af19 	bne.w	8008bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008db8:	2101      	movs	r1, #1
 8008dba:	1d20      	adds	r0, r4, #4
 8008dbc:	f7ff fcea 	bl	8008794 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008dc0:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f43f af10 	beq.w	8008bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008dca:	4605      	mov	r5, r0
 8008dcc:	e70d      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_PLLSAI2_DISABLE();
 8008dce:	4f4f      	ldr	r7, [pc, #316]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008dd8:	f7fd f942 	bl	8006060 <HAL_GetTick>
 8008ddc:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008dde:	e005      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x410>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008de0:	f7fd f93e 	bl	8006060 <HAL_GetTick>
 8008de4:	eba0 0308 	sub.w	r3, r0, r8
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d87f      	bhi.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x510>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	0099      	lsls	r1, r3, #2
 8008df0:	d4f6      	bmi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    if(ret == HAL_OK)
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	d17d      	bne.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8008df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dfa:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008dfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008e02:	4313      	orrs	r3, r2
 8008e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008e08:	2102      	movs	r1, #2
 8008e0a:	f104 0020 	add.w	r0, r4, #32
 8008e0e:	f7ff fd53 	bl	80088b8 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008e12:	6823      	ldr	r3, [r4, #0]
    if(ret != HAL_OK)
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f43f af26 	beq.w	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	e723      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = HAL_TIMEOUT;
 8008e1e:	2503      	movs	r5, #3
 8008e20:	462e      	mov	r6, r5
 8008e22:	e7af      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e24:	3004      	adds	r0, #4
 8008e26:	f7ff fcb5 	bl	8008794 <RCCEx_PLLSAI1_Config>
 8008e2a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	f43f adf0 	beq.w	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8008e32:	e03d      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e34:	1d20      	adds	r0, r4, #4
 8008e36:	f7ff fcad 	bl	8008794 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e3a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e3c:	4606      	mov	r6, r0
      break;
 8008e3e:	e611      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e40:	68ca      	ldr	r2, [r1, #12]
 8008e42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e46:	60ca      	str	r2, [r1, #12]
 8008e48:	e6b2      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e4a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8008e4e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008e52:	68d1      	ldr	r1, [r2, #12]
 8008e54:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008e58:	60d1      	str	r1, [r2, #12]
 8008e5a:	e6c6      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e5c:	68ca      	ldr	r2, [r1, #12]
 8008e5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e62:	60ca      	str	r2, [r1, #12]
 8008e64:	e6d4      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e66:	68d3      	ldr	r3, [r2, #12]
}
 8008e68:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e6e:	60d3      	str	r3, [r2, #12]
}
 8008e70:	b002      	add	sp, #8
 8008e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008e76:	2102      	movs	r1, #2
 8008e78:	1d20      	adds	r0, r4, #4
 8008e7a:	f7ff fc8b 	bl	8008794 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e7e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8008e80:	4606      	mov	r6, r0
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f aed4 	beq.w	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x254>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e88:	4605      	mov	r5, r0
 8008e8a:	e6d1      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	f104 0020 	add.w	r0, r4, #32
 8008e92:	f7ff fd11 	bl	80088b8 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e96:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f43f aef4 	beq.w	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	e6f1      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ea2:	491a      	ldr	r1, [pc, #104]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8008ea4:	68ca      	ldr	r2, [r1, #12]
 8008ea6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008eaa:	60ca      	str	r2, [r1, #12]
      break;
 8008eac:	462e      	mov	r6, r5
 8008eae:	e5d9      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x88>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	e5bf      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008eb4:	4815      	ldr	r0, [pc, #84]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8008eb6:	68c2      	ldr	r2, [r0, #12]
 8008eb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008ebc:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8008ebe:	e5b0      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	1d20      	adds	r0, r4, #4
 8008ec4:	f7ff fc66 	bl	8008794 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008ec8:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8008eca:	4606      	mov	r6, r0
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f43f ae6f 	beq.w	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	e66c      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	1d20      	adds	r0, r4, #4
 8008eda:	f7ff fc5b 	bl	8008794 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ede:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f43f ae94 	beq.w	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ee8:	4605      	mov	r5, r0
 8008eea:	e691      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008eec:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 8008eee:	2503      	movs	r5, #3
 8008ef0:	e6b9      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	4635      	mov	r5, r6
 8008ef6:	e6b6      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8008ef8:	4635      	mov	r5, r6
 8008efa:	e743      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8008efc:	4613      	mov	r3, r2
 8008efe:	e739      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008f00:	2501      	movs	r5, #1
 8008f02:	462e      	mov	r6, r5
 8008f04:	e6e1      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f06:	2501      	movs	r5, #1
 8008f08:	e594      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008f0a:	bf00      	nop
 8008f0c:	40021000 	.word	0x40021000

08008f10 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f14:	b083      	sub	sp, #12
 8008f16:	461f      	mov	r7, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f18:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008f1a:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8008f1c:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008f20:	4606      	mov	r6, r0
 8008f22:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f24:	f7fd f89c 	bl	8006060 <HAL_GetTick>
 8008f28:	442f      	add	r7, r5
 8008f2a:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8008f2c:	f7fd f898 	bl	8006060 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f30:	4b2f      	ldr	r3, [pc, #188]	; (8008ff0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe0>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008f32:	f8d6 9000 	ldr.w	r9, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008f40:	0d1b      	lsrs	r3, r3, #20
 8008f42:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8008f46:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f48:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f4a:	464a      	mov	r2, r9
 8008f4c:	e001      	b.n	8008f52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x42>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f4e:	1c6b      	adds	r3, r5, #1
 8008f50:	d10e      	bne.n	8008f70 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
  while ((hspi->Instance->SR & Fifo) != State)
 8008f52:	6893      	ldr	r3, [r2, #8]
 8008f54:	4023      	ands	r3, r4
 8008f56:	d01d      	beq.n	8008f94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f58:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8008f5c:	d1f7      	bne.n	8008f4e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
      tmpreg8 = *ptmpreg8;
 8008f5e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8008f68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8008f6c:	1c6b      	adds	r3, r5, #1
 8008f6e:	d0f0      	beq.n	8008f52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f70:	f7fd f876 	bl	8006060 <HAL_GetTick>
 8008f74:	eba0 0008 	sub.w	r0, r0, r8
 8008f78:	42b8      	cmp	r0, r7
 8008f7a:	d20f      	bcs.n	8008f9c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f7c:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f7e:	6832      	ldr	r2, [r6, #0]
      {
        tmp_timeout = 0U;
 8008f80:	2b00      	cmp	r3, #0
      }
      count--;
 8008f82:	9b01      	ldr	r3, [sp, #4]
 8008f84:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008f88:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f8a:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 8008f8c:	bf08      	it	eq
 8008f8e:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8008f90:	4023      	ands	r3, r4
 8008f92:	d1e1      	bne.n	8008f58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x48>
    }
  }

  return HAL_OK;
 8008f94:	4618      	mov	r0, r3
}
 8008f96:	b003      	add	sp, #12
 8008f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f9c:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fa0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fa2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008faa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fac:	d013      	beq.n	8008fd6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fae:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8008fb0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008fb4:	d107      	bne.n	8008fc6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb6>
          SPI_RESET_CRC(hspi);
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fc4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008fc6:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8008fc8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8008fca:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008fce:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008fd2:	2003      	movs	r0, #3
 8008fd4:	e7df      	b.n	8008f96 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fd6:	68b2      	ldr	r2, [r6, #8]
 8008fd8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008fdc:	d002      	beq.n	8008fe4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fde:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008fe2:	d1e4      	bne.n	8008fae <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	e7df      	b.n	8008fae <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
 8008fee:	bf00      	nop
 8008ff0:	20000300 	.word	0x20000300

08008ff4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8008ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	4615      	mov	r5, r2
 8008ffc:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ffe:	f7fd f82f 	bl	8006060 <HAL_GetTick>
 8009002:	4425      	add	r5, r4
 8009004:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8009006:	f7fd f82b 	bl	8006060 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009012:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8009016:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009018:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800901a:	6832      	ldr	r2, [r6, #0]
 800901c:	e001      	b.n	8009022 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 800901e:	1c63      	adds	r3, r4, #1
 8009020:	d106      	bne.n	8009030 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009022:	6893      	ldr	r3, [r2, #8]
 8009024:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8009028:	d1f9      	bne.n	800901e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
  return HAL_OK;
 800902a:	4618      	mov	r0, r3
}
 800902c:	b003      	add	sp, #12
 800902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009030:	f7fd f816 	bl	8006060 <HAL_GetTick>
 8009034:	1bc0      	subs	r0, r0, r7
 8009036:	42a8      	cmp	r0, r5
 8009038:	d208      	bcs.n	800904c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800903a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800903c:	2b00      	cmp	r3, #0
      count--;
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8009044:	bf08      	it	eq
 8009046:	2500      	moveq	r5, #0
      count--;
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	e7e6      	b.n	800901a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800904c:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009050:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009052:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009056:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800905a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800905c:	d013      	beq.n	8009086 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800905e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8009060:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009064:	d107      	bne.n	8009076 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009074:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009076:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8009078:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800907a:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800907e:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8009082:	2003      	movs	r0, #3
 8009084:	e7d2      	b.n	800902c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009086:	68b2      	ldr	r2, [r6, #8]
 8009088:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800908c:	d002      	beq.n	8009094 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800908e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009092:	d1e4      	bne.n	800905e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	e7df      	b.n	800905e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800909e:	bf00      	nop
 80090a0:	20000300 	.word	0x20000300

080090a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090a6:	6843      	ldr	r3, [r0, #4]
 80090a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80090ac:	4604      	mov	r4, r0
 80090ae:	460e      	mov	r6, r1
 80090b0:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090b2:	d00c      	beq.n	80090ce <SPI_EndRxTransaction+0x2a>
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090b4:	463a      	mov	r2, r7
 80090b6:	4631      	mov	r1, r6
 80090b8:	4620      	mov	r0, r4
 80090ba:	f7ff ff9b 	bl	8008ff4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80090be:	4605      	mov	r5, r0
 80090c0:	b9c8      	cbnz	r0, 80090f6 <SPI_EndRxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090c8:	d01c      	beq.n	8009104 <SPI_EndRxTransaction+0x60>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 80090ca:	4628      	mov	r0, r5
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ce:	6883      	ldr	r3, [r0, #8]
 80090d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d4:	d002      	beq.n	80090dc <SPI_EndRxTransaction+0x38>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090da:	d1eb      	bne.n	80090b4 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e4:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090e6:	4631      	mov	r1, r6
 80090e8:	463a      	mov	r2, r7
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7ff ff82 	bl	8008ff4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80090f0:	4605      	mov	r5, r0
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d0e5      	beq.n	80090c2 <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80090f8:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090fa:	f043 0320 	orr.w	r3, r3, #32
 80090fe:	6623      	str	r3, [r4, #96]	; 0x60
}
 8009100:	4628      	mov	r0, r5
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009104:	68a3      	ldr	r3, [r4, #8]
 8009106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800910a:	d002      	beq.n	8009112 <SPI_EndRxTransaction+0x6e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800910c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009110:	d1db      	bne.n	80090ca <SPI_EndRxTransaction+0x26>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009112:	463b      	mov	r3, r7
 8009114:	4632      	mov	r2, r6
 8009116:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800911a:	4620      	mov	r0, r4
 800911c:	f7ff fef8 	bl	8008f10 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009120:	2800      	cmp	r0, #0
 8009122:	d0d2      	beq.n	80090ca <SPI_EndRxTransaction+0x26>
 8009124:	e7e7      	b.n	80090f6 <SPI_EndRxTransaction+0x52>
 8009126:	bf00      	nop

08009128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009128:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800912a:	4613      	mov	r3, r2
{
 800912c:	460d      	mov	r5, r1
 800912e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009130:	460a      	mov	r2, r1
 8009132:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8009136:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009138:	f7ff feea 	bl	8008f10 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800913c:	b970      	cbnz	r0, 800915c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800913e:	4632      	mov	r2, r6
 8009140:	4629      	mov	r1, r5
 8009142:	4620      	mov	r0, r4
 8009144:	f7ff ff56 	bl	8008ff4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009148:	b940      	cbnz	r0, 800915c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800914a:	4633      	mov	r3, r6
 800914c:	462a      	mov	r2, r5
 800914e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009152:	4620      	mov	r0, r4
 8009154:	f7ff fedc 	bl	8008f10 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009158:	b900      	cbnz	r0, 800915c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800915a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800915c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800915e:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8009162:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009164:	6623      	str	r3, [r4, #96]	; 0x60
}
 8009166:	bd70      	pop	{r4, r5, r6, pc}

08009168 <HAL_SPI_MspInit>:
}
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop

0800916c <HAL_SPI_Init>:
  if (hspi == NULL)
 800916c:	2800      	cmp	r0, #0
 800916e:	d074      	beq.n	800925a <HAL_SPI_Init+0xee>
{
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009176:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009178:	2800      	cmp	r0, #0
 800917a:	d055      	beq.n	8009228 <HAL_SPI_Init+0xbc>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800917c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800917e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009182:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009186:	2200      	movs	r2, #0
 8009188:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800918a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800918e:	2b00      	cmp	r3, #0
 8009190:	d056      	beq.n	8009240 <HAL_SPI_Init+0xd4>
  __HAL_SPI_DISABLE(hspi);
 8009192:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009194:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009196:	2302      	movs	r3, #2
 8009198:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800919c:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800919e:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80091a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a6:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091a8:	d944      	bls.n	8009234 <HAL_SPI_Init+0xc8>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091aa:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 80091ae:	d156      	bne.n	800925e <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091b0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091b2:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091b6:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 80091ba:	6862      	ldr	r2, [r4, #4]
 80091bc:	68a3      	ldr	r3, [r4, #8]
 80091be:	69a6      	ldr	r6, [r4, #24]
 80091c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091c4:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80091c8:	431a      	orrs	r2, r3
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	4313      	orrs	r3, r2
 80091d2:	6962      	ldr	r2, [r4, #20]
 80091d4:	f002 0201 	and.w	r2, r2, #1
 80091d8:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091dc:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091e8:	69e3      	ldr	r3, [r4, #28]
 80091ea:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80091ee:	6a23      	ldr	r3, [r4, #32]
 80091f0:	f003 0780 	and.w	r7, r3, #128	; 0x80
 80091f4:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80091f8:	4313      	orrs	r3, r2
 80091fa:	ea43 0308 	orr.w	r3, r3, r8
 80091fe:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009200:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009202:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009204:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009208:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800920a:	f000 0010 	and.w	r0, r0, #16
 800920e:	ea4e 0306 	orr.w	r3, lr, r6
 8009212:	4303      	orrs	r3, r0
 8009214:	ea43 030c 	orr.w	r3, r3, ip
 8009218:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800921a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800921c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800921e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009220:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800922e:	d0a8      	beq.n	8009182 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009230:	61e0      	str	r0, [r4, #28]
 8009232:	e7a6      	b.n	8009182 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009234:	d00b      	beq.n	800924e <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009236:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800923a:	2500      	movs	r5, #0
 800923c:	62a5      	str	r5, [r4, #40]	; 0x28
 800923e:	e7bc      	b.n	80091ba <HAL_SPI_Init+0x4e>
    HAL_SPI_MspInit(hspi);
 8009240:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8009242:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009246:	f7ff ff8f 	bl	8009168 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800924a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800924c:	e7a1      	b.n	8009192 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800924e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009250:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009254:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8009258:	e7af      	b.n	80091ba <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800925a:	2001      	movs	r0, #1
}
 800925c:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800925e:	f04f 0c00 	mov.w	ip, #0
 8009262:	e7ea      	b.n	800923a <HAL_SPI_Init+0xce>

08009264 <HAL_SPI_MspDeInit>:
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop

08009268 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8009268:	b190      	cbz	r0, 8009290 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800926a:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800926c:	2302      	movs	r3, #2
{
 800926e:	b510      	push	{r4, lr}
  hspi->State = HAL_SPI_STATE_BUSY;
 8009270:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009274:	6813      	ldr	r3, [r2, #0]
 8009276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800927a:	4604      	mov	r4, r0
 800927c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800927e:	f7ff fff1 	bl	8009264 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009282:	2000      	movs	r0, #0
 8009284:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8009286:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800928a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 800928e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009290:	2001      	movs	r0, #1
}
 8009292:	4770      	bx	lr

08009294 <HAL_SPI_Transmit>:
{
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800929a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800929e:	2801      	cmp	r0, #1
{
 80092a0:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80092a2:	d063      	beq.n	800936c <HAL_SPI_Transmit+0xd8>
 80092a4:	461d      	mov	r5, r3
 80092a6:	2301      	movs	r3, #1
 80092a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80092ac:	4688      	mov	r8, r1
 80092ae:	4617      	mov	r7, r2
 80092b0:	f7fc fed6 	bl	8006060 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80092b4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80092b8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80092ba:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80092bc:	b2d8      	uxtb	r0, r3
 80092be:	d009      	beq.n	80092d4 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80092c0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80092c2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80092c4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80092c6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80092ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80092ce:	b002      	add	sp, #8
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80092d4:	f1b8 0f00 	cmp.w	r8, #0
 80092d8:	d0f3      	beq.n	80092c2 <HAL_SPI_Transmit+0x2e>
 80092da:	2f00      	cmp	r7, #0
 80092dc:	d0f1      	beq.n	80092c2 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092de:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092e0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092e4:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092e6:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092ec:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxISR       = NULL;
 80092f0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80092f6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80092f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 80092fc:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80092fe:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009300:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    __HAL_SPI_DISABLE(hspi);
 8009304:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009306:	d05a      	beq.n	80093be <HAL_SPI_Transmit+0x12a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	0652      	lsls	r2, r2, #25
 800930c:	d403      	bmi.n	8009316 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009314:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009316:	68e2      	ldr	r2, [r4, #12]
 8009318:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800931c:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800931e:	d929      	bls.n	8009374 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009320:	2a00      	cmp	r2, #0
 8009322:	d055      	beq.n	80093d0 <HAL_SPI_Transmit+0x13c>
 8009324:	2f01      	cmp	r7, #1
 8009326:	d053      	beq.n	80093d0 <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8009328:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800932a:	b292      	uxth	r2, r2
 800932c:	b992      	cbnz	r2, 8009354 <HAL_SPI_Transmit+0xc0>
 800932e:	e072      	b.n	8009416 <HAL_SPI_Transmit+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009330:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009332:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009336:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8009338:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800933c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800933e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009342:	fa1f fc8c 	uxth.w	ip, ip
 8009346:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800934a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800934c:	b289      	uxth	r1, r1
 800934e:	2900      	cmp	r1, #0
 8009350:	d061      	beq.n	8009416 <HAL_SPI_Transmit+0x182>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	0797      	lsls	r7, r2, #30
 8009358:	d4ea      	bmi.n	8009330 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800935a:	f7fc fe81 	bl	8006060 <HAL_GetTick>
 800935e:	1b80      	subs	r0, r0, r6
 8009360:	42a8      	cmp	r0, r5
 8009362:	d3f2      	bcc.n	800934a <HAL_SPI_Transmit+0xb6>
 8009364:	1c68      	adds	r0, r5, #1
 8009366:	d0f0      	beq.n	800934a <HAL_SPI_Transmit+0xb6>
          errorcode = HAL_TIMEOUT;
 8009368:	2003      	movs	r0, #3
 800936a:	e7aa      	b.n	80092c2 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800936c:	2002      	movs	r0, #2
}
 800936e:	b002      	add	sp, #8
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009374:	2a00      	cmp	r2, #0
 8009376:	d035      	beq.n	80093e4 <HAL_SPI_Transmit+0x150>
 8009378:	2f01      	cmp	r7, #1
 800937a:	d033      	beq.n	80093e4 <HAL_SPI_Transmit+0x150>
    while (hspi->TxXferCount > 0U)
 800937c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800937e:	b29b      	uxth	r3, r3
 8009380:	b98b      	cbnz	r3, 80093a6 <HAL_SPI_Transmit+0x112>
 8009382:	e048      	b.n	8009416 <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 8009384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009386:	b29b      	uxth	r3, r3
 8009388:	2b01      	cmp	r3, #1
 800938a:	d939      	bls.n	8009400 <HAL_SPI_Transmit+0x16c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800938c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800938e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8009392:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8009394:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009396:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009398:	3b02      	subs	r3, #2
 800939a:	b29b      	uxth	r3, r3
 800939c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800939e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80093a0:	b289      	uxth	r1, r1
 80093a2:	2900      	cmp	r1, #0
 80093a4:	d037      	beq.n	8009416 <HAL_SPI_Transmit+0x182>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	6893      	ldr	r3, [r2, #8]
 80093aa:	0799      	lsls	r1, r3, #30
 80093ac:	d4ea      	bmi.n	8009384 <HAL_SPI_Transmit+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093ae:	f7fc fe57 	bl	8006060 <HAL_GetTick>
 80093b2:	1b80      	subs	r0, r0, r6
 80093b4:	42a8      	cmp	r0, r5
 80093b6:	d3f2      	bcc.n	800939e <HAL_SPI_Transmit+0x10a>
 80093b8:	1c6b      	adds	r3, r5, #1
 80093ba:	d0f0      	beq.n	800939e <HAL_SPI_Transmit+0x10a>
 80093bc:	e7d4      	b.n	8009368 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e79b      	b.n	8009308 <HAL_SPI_Transmit+0x74>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093d0:	4641      	mov	r1, r8
 80093d2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80093d6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80093d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093da:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80093dc:	3a01      	subs	r2, #1
 80093de:	b292      	uxth	r2, r2
 80093e0:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80093e2:	e7a1      	b.n	8009328 <HAL_SPI_Transmit+0x94>
      if (hspi->TxXferCount > 1U)
 80093e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80093e6:	b292      	uxth	r2, r2
 80093e8:	2a01      	cmp	r2, #1
 80093ea:	d92a      	bls.n	8009442 <HAL_SPI_Transmit+0x1ae>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093ec:	4641      	mov	r1, r8
 80093ee:	f831 2b02 	ldrh.w	r2, [r1], #2
 80093f2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80093f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093f6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80093f8:	3b02      	subs	r3, #2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80093fe:	e7bd      	b.n	800937c <HAL_SPI_Transmit+0xe8>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8009406:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8009408:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800940a:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800940c:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800940e:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8009410:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8009412:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009414:	e7c3      	b.n	800939e <HAL_SPI_Transmit+0x10a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009416:	4632      	mov	r2, r6
 8009418:	4629      	mov	r1, r5
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff fe84 	bl	8009128 <SPI_EndRxTxTransaction>
 8009420:	b108      	cbz	r0, 8009426 <HAL_SPI_Transmit+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009422:	2320      	movs	r3, #32
 8009424:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	b933      	cbnz	r3, 8009438 <HAL_SPI_Transmit+0x1a4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	68d3      	ldr	r3, [r2, #12]
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	6893      	ldr	r3, [r2, #8]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009438:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800943a:	3800      	subs	r0, #0
 800943c:	bf18      	it	ne
 800943e:	2001      	movne	r0, #1
error:
 8009440:	e73f      	b.n	80092c2 <HAL_SPI_Transmit+0x2e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009442:	f898 2000 	ldrb.w	r2, [r8]
 8009446:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8009448:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800944a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800944c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800944e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8009450:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8009452:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009454:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009456:	e791      	b.n	800937c <HAL_SPI_Transmit+0xe8>

08009458 <HAL_SPI_TransmitReceive>:
{
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800945e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8009462:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8009464:	2801      	cmp	r0, #1
 8009466:	f000 8097 	beq.w	8009598 <HAL_SPI_TransmitReceive+0x140>
 800946a:	461f      	mov	r7, r3
 800946c:	2301      	movs	r3, #1
 800946e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009472:	4689      	mov	r9, r1
 8009474:	4690      	mov	r8, r2
 8009476:	f7fc fdf3 	bl	8006060 <HAL_GetTick>
 800947a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800947c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8009480:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009482:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8009484:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009486:	d010      	beq.n	80094aa <HAL_SPI_TransmitReceive+0x52>
 8009488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800948c:	d008      	beq.n	80094a0 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800948e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009490:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8009492:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8009494:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009498:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800949c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094a0:	68a2      	ldr	r2, [r4, #8]
 80094a2:	2a00      	cmp	r2, #0
 80094a4:	d1f3      	bne.n	800948e <HAL_SPI_TransmitReceive+0x36>
 80094a6:	2904      	cmp	r1, #4
 80094a8:	d1f1      	bne.n	800948e <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094aa:	f1b9 0f00 	cmp.w	r9, #0
 80094ae:	d076      	beq.n	800959e <HAL_SPI_TransmitReceive+0x146>
 80094b0:	f1b8 0f00 	cmp.w	r8, #0
 80094b4:	d073      	beq.n	800959e <HAL_SPI_TransmitReceive+0x146>
 80094b6:	2f00      	cmp	r7, #0
 80094b8:	d071      	beq.n	800959e <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094ba:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80094be:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094c0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094c4:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094c6:	bf1c      	itt	ne
 80094c8:	2205      	movne	r2, #5
 80094ca:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094ce:	2200      	movs	r2, #0
 80094d0:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80094d2:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094d6:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 80094d8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80094dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80094e0:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094e2:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 80094e4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094e8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094ec:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80094ee:	d858      	bhi.n	80095a2 <HAL_SPI_TransmitReceive+0x14a>
 80094f0:	2f01      	cmp	r7, #1
 80094f2:	f000 80ea 	beq.w	80096ca <HAL_SPI_TransmitReceive+0x272>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094f6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80094fa:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094fc:	6811      	ldr	r1, [r2, #0]
 80094fe:	0649      	lsls	r1, r1, #25
 8009500:	f100 80a9 	bmi.w	8009656 <HAL_SPI_TransmitReceive+0x1fe>
    __HAL_SPI_ENABLE(hspi);
 8009504:	6811      	ldr	r1, [r2, #0]
 8009506:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800950a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80a5 	beq.w	800965c <HAL_SPI_TransmitReceive+0x204>
 8009512:	2f01      	cmp	r7, #1
 8009514:	f000 80a2 	beq.w	800965c <HAL_SPI_TransmitReceive+0x204>
        txallowed = 1U;
 8009518:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800951a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800951c:	b29b      	uxth	r3, r3
 800951e:	b92b      	cbnz	r3, 800952c <HAL_SPI_TransmitReceive+0xd4>
 8009520:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009524:	b29b      	uxth	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8086 	beq.w	8009638 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800952c:	6822      	ldr	r2, [r4, #0]
 800952e:	6893      	ldr	r3, [r2, #8]
 8009530:	0799      	lsls	r1, r3, #30
 8009532:	d505      	bpl.n	8009540 <HAL_SPI_TransmitReceive+0xe8>
 8009534:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009536:	b29b      	uxth	r3, r3
 8009538:	b113      	cbz	r3, 8009540 <HAL_SPI_TransmitReceive+0xe8>
 800953a:	2f00      	cmp	r7, #0
 800953c:	f040 80aa 	bne.w	8009694 <HAL_SPI_TransmitReceive+0x23c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009540:	6893      	ldr	r3, [r2, #8]
 8009542:	f013 0301 	ands.w	r3, r3, #1
 8009546:	d01e      	beq.n	8009586 <HAL_SPI_TransmitReceive+0x12e>
 8009548:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800954c:	b289      	uxth	r1, r1
 800954e:	b1d1      	cbz	r1, 8009586 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8009550:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8009554:	b289      	uxth	r1, r1
 8009556:	2901      	cmp	r1, #1
 8009558:	f240 808e 	bls.w	8009678 <HAL_SPI_TransmitReceive+0x220>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800955c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800955e:	68d0      	ldr	r0, [r2, #12]
 8009560:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009564:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009566:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800956a:	3902      	subs	r1, #2
 800956c:	b289      	uxth	r1, r1
 800956e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009572:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8009576:	b289      	uxth	r1, r1
 8009578:	2901      	cmp	r1, #1
        txallowed = 1U;
 800957a:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 800957c:	d803      	bhi.n	8009586 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800957e:	6853      	ldr	r3, [r2, #4]
 8009580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009584:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009586:	f7fc fd6b 	bl	8006060 <HAL_GetTick>
 800958a:	1b80      	subs	r0, r0, r6
 800958c:	42a8      	cmp	r0, r5
 800958e:	d3c4      	bcc.n	800951a <HAL_SPI_TransmitReceive+0xc2>
 8009590:	1c6b      	adds	r3, r5, #1
 8009592:	d0c2      	beq.n	800951a <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8009594:	2003      	movs	r0, #3
 8009596:	e77b      	b.n	8009490 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8009598:	2002      	movs	r0, #2
}
 800959a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800959e:	2001      	movs	r0, #1
 80095a0:	e776      	b.n	8009490 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095a2:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80095a6:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095a8:	6811      	ldr	r1, [r2, #0]
 80095aa:	0648      	lsls	r0, r1, #25
 80095ac:	d403      	bmi.n	80095b6 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 80095ae:	6811      	ldr	r1, [r2, #0]
 80095b0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80095b4:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d14a      	bne.n	8009650 <HAL_SPI_TransmitReceive+0x1f8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ba:	4649      	mov	r1, r9
 80095bc:	f831 3b02 	ldrh.w	r3, [r1], #2
 80095c0:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80095c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c4:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80095cc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	b91b      	cbnz	r3, 80095dc <HAL_SPI_TransmitReceive+0x184>
 80095d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80095d8:	b29b      	uxth	r3, r3
 80095da:	b36b      	cbz	r3, 8009638 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	6893      	ldr	r3, [r2, #8]
 80095e0:	079b      	lsls	r3, r3, #30
 80095e2:	d50d      	bpl.n	8009600 <HAL_SPI_TransmitReceive+0x1a8>
 80095e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	b153      	cbz	r3, 8009600 <HAL_SPI_TransmitReceive+0x1a8>
 80095ea:	b14f      	cbz	r7, 8009600 <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095ee:	f833 1b02 	ldrh.w	r1, [r3], #2
 80095f2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80095f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80095fc:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80095fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009600:	6893      	ldr	r3, [r2, #8]
 8009602:	f013 0301 	ands.w	r3, r3, #1
 8009606:	d00f      	beq.n	8009628 <HAL_SPI_TransmitReceive+0x1d0>
 8009608:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800960c:	b289      	uxth	r1, r1
 800960e:	b159      	cbz	r1, 8009628 <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 8009610:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009614:	68d2      	ldr	r2, [r2, #12]
 8009616:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800961a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800961c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009620:	3b01      	subs	r3, #1
 8009622:	b29b      	uxth	r3, r3
 8009624:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009628:	f7fc fd1a 	bl	8006060 <HAL_GetTick>
 800962c:	1b80      	subs	r0, r0, r6
 800962e:	42a8      	cmp	r0, r5
 8009630:	d3cd      	bcc.n	80095ce <HAL_SPI_TransmitReceive+0x176>
 8009632:	1c68      	adds	r0, r5, #1
 8009634:	d0cb      	beq.n	80095ce <HAL_SPI_TransmitReceive+0x176>
 8009636:	e7ad      	b.n	8009594 <HAL_SPI_TransmitReceive+0x13c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009638:	4632      	mov	r2, r6
 800963a:	4629      	mov	r1, r5
 800963c:	4620      	mov	r0, r4
 800963e:	f7ff fd73 	bl	8009128 <SPI_EndRxTxTransaction>
 8009642:	2800      	cmp	r0, #0
 8009644:	f43f af24 	beq.w	8009490 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009648:	2320      	movs	r3, #32
 800964a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800964c:	2001      	movs	r0, #1
 800964e:	e71f      	b.n	8009490 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009650:	2f01      	cmp	r7, #1
 8009652:	d1bb      	bne.n	80095cc <HAL_SPI_TransmitReceive+0x174>
 8009654:	e7b1      	b.n	80095ba <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009656:	2b00      	cmp	r3, #0
 8009658:	f47f af5e 	bne.w	8009518 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 800965c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800965e:	b29b      	uxth	r3, r3
 8009660:	2b01      	cmp	r3, #1
 8009662:	d93a      	bls.n	80096da <HAL_SPI_TransmitReceive+0x282>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009664:	4649      	mov	r1, r9
 8009666:	f831 3b02 	ldrh.w	r3, [r1], #2
 800966a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800966c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800966e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009670:	3b02      	subs	r3, #2
 8009672:	b29b      	uxth	r3, r3
 8009674:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009676:	e74f      	b.n	8009518 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 8009678:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800967a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800967c:	7b12      	ldrb	r2, [r2, #12]
 800967e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009682:	3301      	adds	r3, #1
 8009684:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8009686:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800968a:	3b01      	subs	r3, #1
 800968c:	b29b      	uxth	r3, r3
 800968e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009692:	e778      	b.n	8009586 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8009694:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800969a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800969c:	d909      	bls.n	80096b2 <HAL_SPI_TransmitReceive+0x25a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800969e:	f833 1b02 	ldrh.w	r1, [r3], #2
 80096a2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80096a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80096a8:	3b02      	subs	r3, #2
 80096aa:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80096ac:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 80096ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80096b0:	e746      	b.n	8009540 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80096b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80096b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80096ba:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80096bc:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80096be:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80096c0:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80096c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096c4:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80096c6:	2700      	movs	r7, #0
 80096c8:	e73a      	b.n	8009540 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096ca:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80096ce:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096d0:	6811      	ldr	r1, [r2, #0]
 80096d2:	0649      	lsls	r1, r1, #25
 80096d4:	f57f af16 	bpl.w	8009504 <HAL_SPI_TransmitReceive+0xac>
 80096d8:	e7c0      	b.n	800965c <HAL_SPI_TransmitReceive+0x204>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096da:	f899 3000 	ldrb.w	r3, [r9]
 80096de:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80096e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80096e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80096e4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80096e6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80096e8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80096ea:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80096ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80096ee:	e713      	b.n	8009518 <HAL_SPI_TransmitReceive+0xc0>

080096f0 <HAL_SPI_Receive>:
{
 80096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80096f4:	6846      	ldr	r6, [r0, #4]
 80096f6:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 80096fa:	b082      	sub	sp, #8
 80096fc:	4604      	mov	r4, r0
 80096fe:	4690      	mov	r8, r2
 8009700:	461d      	mov	r5, r3
 8009702:	460f      	mov	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009704:	d072      	beq.n	80097ec <HAL_SPI_Receive+0xfc>
  __HAL_LOCK(hspi);
 8009706:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800970a:	2b01      	cmp	r3, #1
 800970c:	d07a      	beq.n	8009804 <HAL_SPI_Receive+0x114>
 800970e:	2301      	movs	r3, #1
 8009710:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009714:	f7fc fca4 	bl	8006060 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009718:	f894 c05d 	ldrb.w	ip, [r4, #93]	; 0x5d
 800971c:	f1bc 0f01 	cmp.w	ip, #1
  tickstart = HAL_GetTick();
 8009720:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009722:	fa5f f08c 	uxtb.w	r0, ip
 8009726:	d009      	beq.n	800973c <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 8009728:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800972a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800972c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800972e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009732:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009736:	b002      	add	sp, #8
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800973c:	2f00      	cmp	r7, #0
 800973e:	d0f4      	beq.n	800972a <HAL_SPI_Receive+0x3a>
 8009740:	f1b8 0f00 	cmp.w	r8, #0
 8009744:	d0f1      	beq.n	800972a <HAL_SPI_Receive+0x3a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009746:	2104      	movs	r1, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009748:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800974a:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800974e:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009750:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009752:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferCount = Size;
 8009754:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009758:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800975a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800975e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009760:	87a3      	strh	r3, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009762:	684b      	ldr	r3, [r1, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009764:	6427      	str	r7, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009766:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800976a:	bf8c      	ite	hi
 800976c:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009770:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 8009774:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009778:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800977a:	68a3      	ldr	r3, [r4, #8]
 800977c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009780:	d107      	bne.n	8009792 <HAL_SPI_Receive+0xa2>
    __HAL_SPI_DISABLE(hspi);
 8009782:	680b      	ldr	r3, [r1, #0]
 8009784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009788:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 800978a:	680b      	ldr	r3, [r1, #0]
 800978c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009790:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009792:	680b      	ldr	r3, [r1, #0]
 8009794:	065f      	lsls	r7, r3, #25
 8009796:	d403      	bmi.n	80097a0 <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8009798:	680b      	ldr	r3, [r1, #0]
 800979a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979e:	600b      	str	r3, [r1, #0]
    while (hspi->RxXferCount > 0U)
 80097a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80097a4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    while (hspi->RxXferCount > 0U)
 80097a8:	b29b      	uxth	r3, r3
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80097aa:	d93c      	bls.n	8009826 <HAL_SPI_Receive+0x136>
    while (hspi->RxXferCount > 0U)
 80097ac:	b993      	cbnz	r3, 80097d4 <HAL_SPI_Receive+0xe4>
 80097ae:	e02d      	b.n	800980c <HAL_SPI_Receive+0x11c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097b2:	68ca      	ldr	r2, [r1, #12]
 80097b4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 80097b8:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097bc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80097be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80097c2:	fa1f fc8c 	uxth.w	ip, ip
 80097c6:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 80097ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	b1e3      	cbz	r3, 800980c <HAL_SPI_Receive+0x11c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097d2:	6821      	ldr	r1, [r4, #0]
 80097d4:	688b      	ldr	r3, [r1, #8]
 80097d6:	07da      	lsls	r2, r3, #31
 80097d8:	d4ea      	bmi.n	80097b0 <HAL_SPI_Receive+0xc0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097da:	f7fc fc41 	bl	8006060 <HAL_GetTick>
 80097de:	1b80      	subs	r0, r0, r6
 80097e0:	42a8      	cmp	r0, r5
 80097e2:	d3f2      	bcc.n	80097ca <HAL_SPI_Receive+0xda>
 80097e4:	1c6b      	adds	r3, r5, #1
 80097e6:	d0f0      	beq.n	80097ca <HAL_SPI_Receive+0xda>
          errorcode = HAL_TIMEOUT;
 80097e8:	2003      	movs	r0, #3
 80097ea:	e79e      	b.n	800972a <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097ec:	6883      	ldr	r3, [r0, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d189      	bne.n	8009706 <HAL_SPI_Receive+0x16>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097f2:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097f4:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097f6:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097f8:	f880 505d 	strb.w	r5, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097fc:	460a      	mov	r2, r1
 80097fe:	f7ff fe2b 	bl	8009458 <HAL_SPI_TransmitReceive>
 8009802:	e798      	b.n	8009736 <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 8009804:	2002      	movs	r0, #2
}
 8009806:	b002      	add	sp, #8
 8009808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800980c:	4632      	mov	r2, r6
 800980e:	4629      	mov	r1, r5
 8009810:	4620      	mov	r0, r4
 8009812:	f7ff fc47 	bl	80090a4 <SPI_EndRxTransaction>
 8009816:	b108      	cbz	r0, 800981c <HAL_SPI_Receive+0x12c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009818:	2320      	movs	r3, #32
 800981a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800981c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800981e:	3800      	subs	r0, #0
 8009820:	bf18      	it	ne
 8009822:	2001      	movne	r0, #1
error :
 8009824:	e781      	b.n	800972a <HAL_SPI_Receive+0x3a>
    while (hspi->RxXferCount > 0U)
 8009826:	b9a3      	cbnz	r3, 8009852 <HAL_SPI_Receive+0x162>
 8009828:	e7f0      	b.n	800980c <HAL_SPI_Receive+0x11c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800982a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800982c:	7b0a      	ldrb	r2, [r1, #12]
 800982e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8009830:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009834:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009836:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800983a:	3301      	adds	r3, #1
        hspi->RxXferCount--;
 800983c:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009840:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009842:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8009846:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0dd      	beq.n	800980c <HAL_SPI_Receive+0x11c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009850:	6821      	ldr	r1, [r4, #0]
 8009852:	688b      	ldr	r3, [r1, #8]
 8009854:	07d8      	lsls	r0, r3, #31
 8009856:	d4e8      	bmi.n	800982a <HAL_SPI_Receive+0x13a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009858:	f7fc fc02 	bl	8006060 <HAL_GetTick>
 800985c:	1b80      	subs	r0, r0, r6
 800985e:	42a8      	cmp	r0, r5
 8009860:	d3f1      	bcc.n	8009846 <HAL_SPI_Receive+0x156>
 8009862:	1c69      	adds	r1, r5, #1
 8009864:	d0ef      	beq.n	8009846 <HAL_SPI_Receive+0x156>
 8009866:	e7bf      	b.n	80097e8 <HAL_SPI_Receive+0xf8>

08009868 <HAL_SPI_GetState>:
  return hspi->State;
 8009868:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop

08009870 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009870:	6a03      	ldr	r3, [r0, #32]
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009878:	6a03      	ldr	r3, [r0, #32]
{
 800987a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800987e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009880:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009882:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009886:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800988a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800988c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800988e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8009892:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009894:	4d13      	ldr	r5, [pc, #76]	; (80098e4 <TIM_OC1_SetConfig+0x74>)
 8009896:	42a8      	cmp	r0, r5
 8009898:	d00f      	beq.n	80098ba <TIM_OC1_SetConfig+0x4a>
 800989a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800989e:	42a8      	cmp	r0, r5
 80098a0:	d00b      	beq.n	80098ba <TIM_OC1_SetConfig+0x4a>
 80098a2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80098a6:	42a8      	cmp	r0, r5
 80098a8:	d007      	beq.n	80098ba <TIM_OC1_SetConfig+0x4a>
 80098aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098ae:	42a8      	cmp	r0, r5
 80098b0:	d003      	beq.n	80098ba <TIM_OC1_SetConfig+0x4a>
 80098b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098b6:	42a8      	cmp	r0, r5
 80098b8:	d10d      	bne.n	80098d6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80098bc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80098c0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098c2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098c6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80098ca:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80098ce:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80098d2:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80098d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80098da:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80098dc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80098de:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80098e0:	6203      	str	r3, [r0, #32]
}
 80098e2:	4770      	bx	lr
 80098e4:	40012c00 	.word	0x40012c00

080098e8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098e8:	6a03      	ldr	r3, [r0, #32]
 80098ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f0:	6a03      	ldr	r3, [r0, #32]
{
 80098f2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009902:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009904:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8009906:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800990a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800990e:	4d15      	ldr	r5, [pc, #84]	; (8009964 <TIM_OC3_SetConfig+0x7c>)
 8009910:	42a8      	cmp	r0, r5
 8009912:	d010      	beq.n	8009936 <TIM_OC3_SetConfig+0x4e>
 8009914:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009918:	42a8      	cmp	r0, r5
 800991a:	d00c      	beq.n	8009936 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009920:	42a8      	cmp	r0, r5
 8009922:	d00f      	beq.n	8009944 <TIM_OC3_SetConfig+0x5c>
 8009924:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009928:	42a8      	cmp	r0, r5
 800992a:	d00b      	beq.n	8009944 <TIM_OC3_SetConfig+0x5c>
 800992c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009930:	42a8      	cmp	r0, r5
 8009932:	d10f      	bne.n	8009954 <TIM_OC3_SetConfig+0x6c>
 8009934:	e006      	b.n	8009944 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009936:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800993c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8009940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009944:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009948:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800994c:	ea46 0c05 	orr.w	ip, r6, r5
 8009950:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009954:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009956:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009958:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800995a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800995c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800995e:	6203      	str	r3, [r0, #32]
}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	40012c00 	.word	0x40012c00

08009968 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009968:	6a03      	ldr	r3, [r0, #32]
 800996a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800996e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009970:	6a03      	ldr	r3, [r0, #32]
{
 8009972:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009974:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009976:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009978:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800997a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800997e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009982:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009986:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8009988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800998c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009990:	4d0f      	ldr	r5, [pc, #60]	; (80099d0 <TIM_OC4_SetConfig+0x68>)
 8009992:	42a8      	cmp	r0, r5
 8009994:	d00f      	beq.n	80099b6 <TIM_OC4_SetConfig+0x4e>
 8009996:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800999a:	42a8      	cmp	r0, r5
 800999c:	d00b      	beq.n	80099b6 <TIM_OC4_SetConfig+0x4e>
 800999e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80099a2:	42a8      	cmp	r0, r5
 80099a4:	d007      	beq.n	80099b6 <TIM_OC4_SetConfig+0x4e>
 80099a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80099aa:	42a8      	cmp	r0, r5
 80099ac:	d003      	beq.n	80099b6 <TIM_OC4_SetConfig+0x4e>
 80099ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80099b2:	42a8      	cmp	r0, r5
 80099b4:	d104      	bne.n	80099c0 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099b6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099b8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099bc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099c0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80099c2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80099c4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80099c6:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 80099c8:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80099ca:	6203      	str	r3, [r0, #32]
}
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	40012c00 	.word	0x40012c00

080099d4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099d4:	6a03      	ldr	r3, [r0, #32]
 80099d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099da:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099dc:	6a03      	ldr	r3, [r0, #32]
{
 80099de:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099e2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80099ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80099ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80099f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099f6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099fa:	4d0f      	ldr	r5, [pc, #60]	; (8009a38 <TIM_OC5_SetConfig+0x64>)
 80099fc:	42a8      	cmp	r0, r5
 80099fe:	d00f      	beq.n	8009a20 <TIM_OC5_SetConfig+0x4c>
 8009a00:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a04:	42a8      	cmp	r0, r5
 8009a06:	d00b      	beq.n	8009a20 <TIM_OC5_SetConfig+0x4c>
 8009a08:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009a0c:	42a8      	cmp	r0, r5
 8009a0e:	d007      	beq.n	8009a20 <TIM_OC5_SetConfig+0x4c>
 8009a10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a14:	42a8      	cmp	r0, r5
 8009a16:	d003      	beq.n	8009a20 <TIM_OC5_SetConfig+0x4c>
 8009a18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a1c:	42a8      	cmp	r0, r5
 8009a1e:	d104      	bne.n	8009a2a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a20:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a22:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a26:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a2a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009a2c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8009a2e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009a30:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 8009a32:	6581      	str	r1, [r0, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8009a34:	6203      	str	r3, [r0, #32]
}
 8009a36:	4770      	bx	lr
 8009a38:	40012c00 	.word	0x40012c00

08009a3c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a3c:	6a03      	ldr	r3, [r0, #32]
 8009a3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a42:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a44:	6a03      	ldr	r3, [r0, #32]
{
 8009a46:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a48:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a4a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009a52:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a60:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a64:	4d0f      	ldr	r5, [pc, #60]	; (8009aa4 <TIM_OC6_SetConfig+0x68>)
 8009a66:	42a8      	cmp	r0, r5
 8009a68:	d00f      	beq.n	8009a8a <TIM_OC6_SetConfig+0x4e>
 8009a6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a6e:	42a8      	cmp	r0, r5
 8009a70:	d00b      	beq.n	8009a8a <TIM_OC6_SetConfig+0x4e>
 8009a72:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009a76:	42a8      	cmp	r0, r5
 8009a78:	d007      	beq.n	8009a8a <TIM_OC6_SetConfig+0x4e>
 8009a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a7e:	42a8      	cmp	r0, r5
 8009a80:	d003      	beq.n	8009a8a <TIM_OC6_SetConfig+0x4e>
 8009a82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a86:	42a8      	cmp	r0, r5
 8009a88:	d104      	bne.n	8009a94 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a8a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a8c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a90:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a94:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009a96:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8009a98:	6542      	str	r2, [r0, #84]	; 0x54

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009a9a:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 8009a9c:	65c1      	str	r1, [r0, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8009a9e:	6203      	str	r3, [r0, #32]
}
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	40012c00 	.word	0x40012c00

08009aa8 <HAL_TIM_Base_MspInit>:
}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop

08009aac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009aac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d126      	bne.n	8009b02 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ab6:	4919      	ldr	r1, [pc, #100]	; (8009b1c <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab8:	2202      	movs	r2, #2
 8009aba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009abe:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac8:	d01d      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
 8009aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ace:	d01a      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
 8009ad0:	4a13      	ldr	r2, [pc, #76]	; (8009b20 <HAL_TIM_Base_Start_IT+0x74>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d017      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
 8009ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d013      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
 8009ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00f      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
 8009ae6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d00b      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
 8009aee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <HAL_TIM_Base_Start_IT+0x5a>
    __HAL_TIM_ENABLE(htim);
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8009afc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	4770      	bx	lr
    return HAL_ERROR;
 8009b02:	2001      	movs	r0, #1
 8009b04:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b06:	6899      	ldr	r1, [r3, #8]
 8009b08:	4a06      	ldr	r2, [pc, #24]	; (8009b24 <HAL_TIM_Base_Start_IT+0x78>)
 8009b0a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0c:	2a06      	cmp	r2, #6
 8009b0e:	d002      	beq.n	8009b16 <HAL_TIM_Base_Start_IT+0x6a>
 8009b10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009b14:	d1ef      	bne.n	8009af6 <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8009b16:	2000      	movs	r0, #0
}
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40012c00 	.word	0x40012c00
 8009b20:	40000400 	.word	0x40000400
 8009b24:	00010007 	.word	0x00010007

08009b28 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009b28:	6803      	ldr	r3, [r0, #0]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	f022 0201 	bic.w	r2, r2, #1
 8009b30:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8009b32:	6a1a      	ldr	r2, [r3, #32]
 8009b34:	f241 1111 	movw	r1, #4369	; 0x1111
 8009b38:	420a      	tst	r2, r1
 8009b3a:	d108      	bne.n	8009b4e <HAL_TIM_Base_Stop_IT+0x26>
 8009b3c:	6a19      	ldr	r1, [r3, #32]
 8009b3e:	f240 4244 	movw	r2, #1092	; 0x444
 8009b42:	4211      	tst	r1, r2
 8009b44:	d103      	bne.n	8009b4e <HAL_TIM_Base_Stop_IT+0x26>
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	f022 0201 	bic.w	r2, r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8009b54:	2000      	movs	r0, #0
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIM_OC_Start_IT>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b58:	2910      	cmp	r1, #16
 8009b5a:	d80a      	bhi.n	8009b72 <HAL_TIM_OC_Start_IT+0x1a>
 8009b5c:	e8df f001 	tbb	[pc, r1]
 8009b60:	09090927 	.word	0x09090927
 8009b64:	0909092e 	.word	0x0909092e
 8009b68:	0909093b 	.word	0x0909093b
 8009b6c:	09090940 	.word	0x09090940
 8009b70:	49          	.byte	0x49
 8009b71:	00          	.byte	0x00
 8009b72:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d11e      	bne.n	8009bb8 <HAL_TIM_OC_Start_IT+0x60>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7a:	2910      	cmp	r1, #16
 8009b7c:	d80a      	bhi.n	8009b94 <HAL_TIM_OC_Start_IT+0x3c>
 8009b7e:	e8df f001 	tbb	[pc, r1]
 8009b82:	09a0      	.short	0x09a0
 8009b84:	09210909 	.word	0x09210909
 8009b88:	09840909 	.word	0x09840909
 8009b8c:	09450909 	.word	0x09450909
 8009b90:	0909      	.short	0x0909
 8009b92:	40          	.byte	0x40
 8009b93:	00          	.byte	0x00
 8009b94:	2202      	movs	r2, #2
  switch (Channel)
 8009b96:	1f0b      	subs	r3, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b98:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
  switch (Channel)
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d80b      	bhi.n	8009bb8 <HAL_TIM_OC_Start_IT+0x60>
 8009ba0:	e8df f003 	tbb	[pc, r3]
 8009ba4:	0a0a0a13 	.word	0x0a0a0a13
 8009ba8:	0a0a0a76 	.word	0x0a0a0a76
 8009bac:	37          	.byte	0x37
 8009bad:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bae:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	f000 8085 	beq.w	8009cc2 <HAL_TIM_OC_Start_IT+0x16a>
    return HAL_ERROR;
 8009bb8:	2001      	movs	r0, #1
}
 8009bba:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bbc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d1f9      	bne.n	8009bb8 <HAL_TIM_OC_Start_IT+0x60>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	f042 0204 	orr.w	r2, r2, #4
 8009bd2:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009bd4:	e022      	b.n	8009c1c <HAL_TIM_OC_Start_IT+0xc4>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bd6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d0cd      	beq.n	8009b7a <HAL_TIM_OC_Start_IT+0x22>
 8009bde:	e7eb      	b.n	8009bb8 <HAL_TIM_OC_Start_IT+0x60>
 8009be0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009be4:	3b01      	subs	r3, #1
 8009be6:	bf18      	it	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0c5      	beq.n	8009b7a <HAL_TIM_OC_Start_IT+0x22>
    return HAL_ERROR;
 8009bee:	2001      	movs	r0, #1
}
 8009bf0:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bf2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	bf18      	it	ne
 8009bfa:	2301      	movne	r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0bc      	beq.n	8009b7a <HAL_TIM_OC_Start_IT+0x22>
 8009c00:	e7f5      	b.n	8009bee <HAL_TIM_OC_Start_IT+0x96>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c02:	2302      	movs	r3, #2
 8009c04:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      status = HAL_ERROR;
 8009c08:	2001      	movs	r0, #1
 8009c0a:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c12:	6803      	ldr	r3, [r0, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	f042 0210 	orr.w	r2, r2, #16
 8009c1a:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c1c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c1e:	2201      	movs	r2, #1
 8009c20:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8009c22:	ea20 0002 	bic.w	r0, r0, r2
 8009c26:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c28:	6a18      	ldr	r0, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c2a:	492a      	ldr	r1, [pc, #168]	; (8009cd4 <HAL_TIM_OC_Start_IT+0x17c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c2c:	4302      	orrs	r2, r0
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c2e:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c30:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c32:	d033      	beq.n	8009c9c <HAL_TIM_OC_Start_IT+0x144>
 8009c34:	4a28      	ldr	r2, [pc, #160]	; (8009cd8 <HAL_TIM_OC_Start_IT+0x180>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d03e      	beq.n	8009cb8 <HAL_TIM_OC_Start_IT+0x160>
 8009c3a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d03a      	beq.n	8009cb8 <HAL_TIM_OC_Start_IT+0x160>
 8009c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d036      	beq.n	8009cb8 <HAL_TIM_OC_Start_IT+0x160>
 8009c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d032      	beq.n	8009cb8 <HAL_TIM_OC_Start_IT+0x160>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c56:	d025      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x14c>
 8009c58:	4a20      	ldr	r2, [pc, #128]	; (8009cdc <HAL_TIM_OC_Start_IT+0x184>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d022      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x14c>
 8009c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01e      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x14c>
 8009c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d01a      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x14c>
 8009c6e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d016      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x14c>
 8009c76:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d012      	beq.n	8009ca4 <HAL_TIM_OC_Start_IT+0x14c>
      __HAL_TIM_ENABLE(htim);
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	f042 0201 	orr.w	r2, r2, #1
 8009c84:	2000      	movs	r0, #0
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c90:	6803      	ldr	r3, [r0, #0]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	f042 0208 	orr.w	r2, r2, #8
 8009c98:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009c9a:	e7bf      	b.n	8009c1c <HAL_TIM_OC_Start_IT+0xc4>
      __HAL_TIM_MOE_ENABLE(htim);
 8009c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ca2:	645a      	str	r2, [r3, #68]	; 0x44
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca4:	6899      	ldr	r1, [r3, #8]
 8009ca6:	4a0e      	ldr	r2, [pc, #56]	; (8009ce0 <HAL_TIM_OC_Start_IT+0x188>)
 8009ca8:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009caa:	2a06      	cmp	r2, #6
 8009cac:	d002      	beq.n	8009cb4 <HAL_TIM_OC_Start_IT+0x15c>
 8009cae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009cb2:	d1e4      	bne.n	8009c7e <HAL_TIM_OC_Start_IT+0x126>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4770      	bx	lr
      __HAL_TIM_MOE_ENABLE(htim);
 8009cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cbe:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc0:	e7c7      	b.n	8009c52 <HAL_TIM_OC_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009cc2:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	f042 0202 	orr.w	r2, r2, #2
 8009cd0:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009cd2:	e7a3      	b.n	8009c1c <HAL_TIM_OC_Start_IT+0xc4>
 8009cd4:	40012c00 	.word	0x40012c00
 8009cd8:	40013400 	.word	0x40013400
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	00010007 	.word	0x00010007

08009ce4 <HAL_TIM_OC_Stop_IT>:
  switch (Channel)
 8009ce4:	290c      	cmp	r1, #12
 8009ce6:	d808      	bhi.n	8009cfa <HAL_TIM_OC_Stop_IT+0x16>
 8009ce8:	e8df f001 	tbb	[pc, r1]
 8009cec:	0707074e 	.word	0x0707074e
 8009cf0:	07070748 	.word	0x07070748
 8009cf4:	07070742 	.word	0x07070742
 8009cf8:	09          	.byte	0x09
 8009cf9:	00          	.byte	0x00
 8009cfa:	2001      	movs	r0, #1
}
 8009cfc:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009cfe:	6803      	ldr	r3, [r0, #0]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	f022 0210 	bic.w	r2, r2, #16
 8009d06:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8009d08:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d0a:	f04f 0c01 	mov.w	ip, #1
 8009d0e:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8009d12:	ea22 020c 	bic.w	r2, r2, ip
{
 8009d16:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8009d18:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d1a:	4a2f      	ldr	r2, [pc, #188]	; (8009dd8 <HAL_TIM_OC_Stop_IT+0xf4>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d1c:	6a1c      	ldr	r4, [r3, #32]
 8009d1e:	621c      	str	r4, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d037      	beq.n	8009d94 <HAL_TIM_OC_Stop_IT+0xb0>
 8009d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d033      	beq.n	8009d94 <HAL_TIM_OC_Stop_IT+0xb0>
 8009d2c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d02f      	beq.n	8009d94 <HAL_TIM_OC_Stop_IT+0xb0>
 8009d34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d02b      	beq.n	8009d94 <HAL_TIM_OC_Stop_IT+0xb0>
 8009d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d027      	beq.n	8009d94 <HAL_TIM_OC_Stop_IT+0xb0>
    __HAL_TIM_DISABLE(htim);
 8009d44:	6a1c      	ldr	r4, [r3, #32]
 8009d46:	f241 1211 	movw	r2, #4369	; 0x1111
 8009d4a:	4214      	tst	r4, r2
 8009d4c:	d108      	bne.n	8009d60 <HAL_TIM_OC_Stop_IT+0x7c>
 8009d4e:	6a1c      	ldr	r4, [r3, #32]
 8009d50:	f240 4244 	movw	r2, #1092	; 0x444
 8009d54:	4214      	tst	r4, r2
 8009d56:	d103      	bne.n	8009d60 <HAL_TIM_OC_Stop_IT+0x7c>
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	f022 0201 	bic.w	r2, r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d60:	2301      	movs	r3, #1
 8009d62:	bb31      	cbnz	r1, 8009db2 <HAL_TIM_OC_Stop_IT+0xce>
 8009d64:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 8009d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009d70:	6803      	ldr	r3, [r0, #0]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	f022 0208 	bic.w	r2, r2, #8
 8009d78:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009d7a:	e7c5      	b.n	8009d08 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009d7c:	6803      	ldr	r3, [r0, #0]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	f022 0204 	bic.w	r2, r2, #4
 8009d84:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009d86:	e7bf      	b.n	8009d08 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009d88:	6803      	ldr	r3, [r0, #0]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	f022 0202 	bic.w	r2, r2, #2
 8009d90:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009d92:	e7b9      	b.n	8009d08 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_MOE_DISABLE(htim);
 8009d94:	6a1c      	ldr	r4, [r3, #32]
 8009d96:	f241 1211 	movw	r2, #4369	; 0x1111
 8009d9a:	4214      	tst	r4, r2
 8009d9c:	d1d2      	bne.n	8009d44 <HAL_TIM_OC_Stop_IT+0x60>
 8009d9e:	6a1c      	ldr	r4, [r3, #32]
 8009da0:	f240 4244 	movw	r2, #1092	; 0x444
 8009da4:	4214      	tst	r4, r2
 8009da6:	d1cd      	bne.n	8009d44 <HAL_TIM_OC_Stop_IT+0x60>
 8009da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009dae:	645a      	str	r2, [r3, #68]	; 0x44
 8009db0:	e7c8      	b.n	8009d44 <HAL_TIM_OC_Stop_IT+0x60>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009db2:	2904      	cmp	r1, #4
 8009db4:	d009      	beq.n	8009dca <HAL_TIM_OC_Stop_IT+0xe6>
 8009db6:	2908      	cmp	r1, #8
 8009db8:	bf0c      	ite	eq
 8009dba:	f880 3040 	strbeq.w	r3, [r0, #64]	; 0x40
 8009dbe:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
}
 8009dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009dc6:	2000      	movs	r0, #0
}
 8009dc8:	4770      	bx	lr
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009dca:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 8009dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40012c00 	.word	0x40012c00

08009ddc <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8009ddc:	290c      	cmp	r1, #12
 8009dde:	d808      	bhi.n	8009df2 <HAL_TIM_ReadCapturedValue+0x16>
 8009de0:	e8df f001 	tbb	[pc, r1]
 8009de4:	07070712 	.word	0x07070712
 8009de8:	0707070f 	.word	0x0707070f
 8009dec:	0707070c 	.word	0x0707070c
 8009df0:	09          	.byte	0x09
 8009df1:	00          	.byte	0x00
 8009df2:	2000      	movs	r0, #0
}
 8009df4:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8009df6:	6803      	ldr	r3, [r0, #0]
 8009df8:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8009dfa:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8009dfc:	6803      	ldr	r3, [r0, #0]
 8009dfe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8009e00:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8009e02:	6803      	ldr	r3, [r0, #0]
 8009e04:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8009e06:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8009e08:	6803      	ldr	r3, [r0, #0]
 8009e0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop

08009e10 <HAL_TIM_IC_CaptureCallback>:
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop

08009e14 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop

08009e18 <HAL_TIM_TriggerCallback>:
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop

08009e1c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e1c:	6803      	ldr	r3, [r0, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	0791      	lsls	r1, r2, #30
{
 8009e22:	b510      	push	{r4, lr}
 8009e24:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e26:	d502      	bpl.n	8009e2e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	0792      	lsls	r2, r2, #30
 8009e2c:	d468      	bmi.n	8009f00 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e2e:	691a      	ldr	r2, [r3, #16]
 8009e30:	0752      	lsls	r2, r2, #29
 8009e32:	d502      	bpl.n	8009e3a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e34:	68da      	ldr	r2, [r3, #12]
 8009e36:	0750      	lsls	r0, r2, #29
 8009e38:	d44f      	bmi.n	8009eda <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	0711      	lsls	r1, r2, #28
 8009e3e:	d502      	bpl.n	8009e46 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	0712      	lsls	r2, r2, #28
 8009e44:	d437      	bmi.n	8009eb6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	06d0      	lsls	r0, r2, #27
 8009e4a:	d502      	bpl.n	8009e52 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	06d1      	lsls	r1, r2, #27
 8009e50:	d41e      	bmi.n	8009e90 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	07d2      	lsls	r2, r2, #31
 8009e56:	d502      	bpl.n	8009e5e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	07d0      	lsls	r0, r2, #31
 8009e5c:	d469      	bmi.n	8009f32 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e5e:	691a      	ldr	r2, [r3, #16]
 8009e60:	0611      	lsls	r1, r2, #24
 8009e62:	d502      	bpl.n	8009e6a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	0612      	lsls	r2, r2, #24
 8009e68:	d46b      	bmi.n	8009f42 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	05d0      	lsls	r0, r2, #23
 8009e6e:	d502      	bpl.n	8009e76 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	0611      	lsls	r1, r2, #24
 8009e74:	d46d      	bmi.n	8009f52 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e76:	691a      	ldr	r2, [r3, #16]
 8009e78:	0652      	lsls	r2, r2, #25
 8009e7a:	d502      	bpl.n	8009e82 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	0650      	lsls	r0, r2, #25
 8009e80:	d46f      	bmi.n	8009f62 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e82:	691a      	ldr	r2, [r3, #16]
 8009e84:	0691      	lsls	r1, r2, #26
 8009e86:	d502      	bpl.n	8009e8e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	0692      	lsls	r2, r2, #26
 8009e8c:	d449      	bmi.n	8009f22 <HAL_TIM_IRQHandler+0x106>
}
 8009e8e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e90:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e94:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e96:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009ea0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ea2:	d16f      	bne.n	8009f84 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea4:	f7fa f9e8 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f7ff ffb3 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009eb0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb2:	7722      	strb	r2, [r4, #28]
 8009eb4:	e7cd      	b.n	8009e52 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009eb6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eba:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ebc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ebe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8009ec4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ec6:	d15a      	bne.n	8009f7e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec8:	f7fa f9d6 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f7ff ffa1 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ed4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed6:	7722      	strb	r2, [r4, #28]
 8009ed8:	e7b5      	b.n	8009e46 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009eda:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ede:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ee0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009eea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009eec:	d144      	bne.n	8009f78 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eee:	f7fa f9c3 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f7ff ff8e 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009efa:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009efc:	7722      	strb	r2, [r4, #28]
 8009efe:	e79c      	b.n	8009e3a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f00:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f04:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f06:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f08:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	0799      	lsls	r1, r3, #30
 8009f0e:	d130      	bne.n	8009f72 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f10:	f7fa f9b2 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f14:	4620      	mov	r0, r4
 8009f16:	f7ff ff7d 	bl	8009e14 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f1a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f1c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f1e:	7722      	strb	r2, [r4, #28]
 8009f20:	e785      	b.n	8009e2e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f22:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009f26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f28:	611a      	str	r2, [r3, #16]
}
 8009f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009f2e:	f000 b9cf 	b.w	800a2d0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f32:	f06f 0201 	mvn.w	r2, #1
 8009f36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f001 faa1 	bl	800b480 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	e78d      	b.n	8009e5e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 f9c3 	bl	800a2d4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	e78b      	b.n	8009e6a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 f9bd 	bl	800a2d8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	e789      	b.n	8009e76 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f66:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7ff ff55 	bl	8009e18 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	e787      	b.n	8009e82 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8009f72:	f7ff ff4d 	bl	8009e10 <HAL_TIM_IC_CaptureCallback>
 8009f76:	e7d0      	b.n	8009f1a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f78:	f7ff ff4a 	bl	8009e10 <HAL_TIM_IC_CaptureCallback>
 8009f7c:	e7bc      	b.n	8009ef8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f7e:	f7ff ff47 	bl	8009e10 <HAL_TIM_IC_CaptureCallback>
 8009f82:	e7a6      	b.n	8009ed2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f84:	f7ff ff44 	bl	8009e10 <HAL_TIM_IC_CaptureCallback>
 8009f88:	e791      	b.n	8009eae <HAL_TIM_IRQHandler+0x92>
 8009f8a:	bf00      	nop

08009f8c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f8c:	4a32      	ldr	r2, [pc, #200]	; (800a058 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8009f8e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f90:	4290      	cmp	r0, r2
{
 8009f92:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f94:	d03d      	beq.n	800a012 <TIM_Base_SetConfig+0x86>
 8009f96:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009f9a:	d025      	beq.n	8009fe8 <TIM_Base_SetConfig+0x5c>
 8009f9c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009fa0:	4290      	cmp	r0, r2
 8009fa2:	d021      	beq.n	8009fe8 <TIM_Base_SetConfig+0x5c>
 8009fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fa8:	4290      	cmp	r0, r2
 8009faa:	d01d      	beq.n	8009fe8 <TIM_Base_SetConfig+0x5c>
 8009fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fb0:	4290      	cmp	r0, r2
 8009fb2:	d019      	beq.n	8009fe8 <TIM_Base_SetConfig+0x5c>
 8009fb4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009fb8:	4290      	cmp	r0, r2
 8009fba:	d047      	beq.n	800a04c <TIM_Base_SetConfig+0xc0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fbc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009fc0:	4290      	cmp	r0, r2
 8009fc2:	d03d      	beq.n	800a040 <TIM_Base_SetConfig+0xb4>
 8009fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fc8:	4290      	cmp	r0, r2
 8009fca:	d039      	beq.n	800a040 <TIM_Base_SetConfig+0xb4>
 8009fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fd0:	4290      	cmp	r0, r2
 8009fd2:	d035      	beq.n	800a040 <TIM_Base_SetConfig+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd4:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fd6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8009fd8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fde:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009fe0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009fe4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fe6:	e010      	b.n	800a00a <TIM_Base_SetConfig+0x7e>
    tmpcr1 |= Structure->CounterMode;
 8009fe8:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fea:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009ff0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ff6:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ff8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ffe:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a000:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800a002:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800a004:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a006:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a008:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800a00a:	2301      	movs	r3, #1
}
 800a00c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800a00e:	6143      	str	r3, [r0, #20]
}
 800a010:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a012:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 800a014:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a01a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800a01c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a020:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a022:	694a      	ldr	r2, [r1, #20]
 800a024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a028:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a02a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a02c:	688b      	ldr	r3, [r1, #8]
 800a02e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a030:	680b      	ldr	r3, [r1, #0]
 800a032:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a038:	2301      	movs	r3, #1
}
 800a03a:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800a03c:	6143      	str	r3, [r0, #20]
}
 800a03e:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a040:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a042:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a048:	4323      	orrs	r3, r4
 800a04a:	e7eb      	b.n	800a024 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= Structure->CounterMode;
 800a04c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a04e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a054:	e7e1      	b.n	800a01a <TIM_Base_SetConfig+0x8e>
 800a056:	bf00      	nop
 800a058:	40012c00 	.word	0x40012c00

0800a05c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a05c:	b370      	cbz	r0, 800a0bc <HAL_TIM_Base_Init+0x60>
{
 800a05e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a060:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a064:	4604      	mov	r4, r0
 800a066:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a06a:	b313      	cbz	r3, 800a0b2 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a06c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800a06e:	2302      	movs	r3, #2
 800a070:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a074:	f851 0b04 	ldr.w	r0, [r1], #4
 800a078:	f7ff ff88 	bl	8009f8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a07c:	2301      	movs	r3, #1
 800a07e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a082:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a086:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a08a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a08e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a092:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a09a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a09e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a0a6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a0aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a0ae:	2000      	movs	r0, #0
}
 800a0b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a0b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a0b6:	f7ff fcf7 	bl	8009aa8 <HAL_TIM_Base_MspInit>
 800a0ba:	e7d7      	b.n	800a06c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800a0bc:	2001      	movs	r0, #1
}
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800a0c0:	b370      	cbz	r0, 800a120 <HAL_TIM_OC_Init+0x60>
{
 800a0c2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a0c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0ce:	b313      	cbz	r3, 800a116 <HAL_TIM_OC_Init+0x56>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a0d0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a0d8:	f851 0b04 	ldr.w	r0, [r1], #4
 800a0dc:	f7ff ff56 	bl	8009f8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a0ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a0ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a0f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a0f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a106:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a10a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a10e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a112:	2000      	movs	r0, #0
}
 800a114:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a116:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800a11a:	f7fa f8f3 	bl	8004304 <HAL_TIM_OC_MspInit>
 800a11e:	e7d7      	b.n	800a0d0 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 800a120:	2001      	movs	r0, #1
}
 800a122:	4770      	bx	lr

0800a124 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a124:	6a03      	ldr	r3, [r0, #32]
 800a126:	f023 0310 	bic.w	r3, r3, #16
 800a12a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a12c:	6a03      	ldr	r3, [r0, #32]
{
 800a12e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800a130:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a132:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a136:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a13a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a13e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a142:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800a144:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a148:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a14c:	4d14      	ldr	r5, [pc, #80]	; (800a1a0 <TIM_OC2_SetConfig+0x7c>)
 800a14e:	42a8      	cmp	r0, r5
 800a150:	d010      	beq.n	800a174 <TIM_OC2_SetConfig+0x50>
 800a152:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a156:	42a8      	cmp	r0, r5
 800a158:	d00c      	beq.n	800a174 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a15a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800a15e:	42a8      	cmp	r0, r5
 800a160:	d00f      	beq.n	800a182 <TIM_OC2_SetConfig+0x5e>
 800a162:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a166:	42a8      	cmp	r0, r5
 800a168:	d00b      	beq.n	800a182 <TIM_OC2_SetConfig+0x5e>
 800a16a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a16e:	42a8      	cmp	r0, r5
 800a170:	d10f      	bne.n	800a192 <TIM_OC2_SetConfig+0x6e>
 800a172:	e006      	b.n	800a182 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a174:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800a176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a17a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a182:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a186:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a18a:	ea46 0c05 	orr.w	ip, r6, r5
 800a18e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800a192:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a194:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a196:	6182      	str	r2, [r0, #24]
}
 800a198:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800a19a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a19c:	6203      	str	r3, [r0, #32]
}
 800a19e:	4770      	bx	lr
 800a1a0:	40012c00 	.word	0x40012c00

0800a1a4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800a1a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d045      	beq.n	800a238 <HAL_TIM_OC_ConfigChannel+0x94>
{
 800a1ac:	b510      	push	{r4, lr}
 800a1ae:	4604      	mov	r4, r0
  switch (Channel)
 800a1b0:	2a14      	cmp	r2, #20
 800a1b2:	d80c      	bhi.n	800a1ce <HAL_TIM_OC_ConfigChannel+0x2a>
 800a1b4:	e8df f002 	tbb	[pc, r2]
 800a1b8:	0b0b0b18 	.word	0x0b0b0b18
 800a1bc:	0b0b0b20 	.word	0x0b0b0b20
 800a1c0:	0b0b0b28 	.word	0x0b0b0b28
 800a1c4:	0b0b0b30 	.word	0x0b0b0b30
 800a1c8:	0b0b0b38 	.word	0x0b0b0b38
 800a1cc:	10          	.byte	0x10
 800a1cd:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800a1d4:	2001      	movs	r0, #1
}
 800a1d6:	bd10      	pop	{r4, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1d8:	6800      	ldr	r0, [r0, #0]
 800a1da:	f7ff fc2f 	bl	8009a3c <TIM_OC6_SetConfig>
  __HAL_UNLOCK(htim);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a1e4:	2000      	movs	r0, #0
}
 800a1e6:	bd10      	pop	{r4, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1e8:	6800      	ldr	r0, [r0, #0]
 800a1ea:	f7ff fb41 	bl	8009870 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a1f4:	2000      	movs	r0, #0
}
 800a1f6:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1f8:	6800      	ldr	r0, [r0, #0]
 800a1fa:	f7ff ff93 	bl	800a124 <TIM_OC2_SetConfig>
  __HAL_UNLOCK(htim);
 800a1fe:	2300      	movs	r3, #0
 800a200:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a204:	2000      	movs	r0, #0
}
 800a206:	bd10      	pop	{r4, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a208:	6800      	ldr	r0, [r0, #0]
 800a20a:	f7ff fb6d 	bl	80098e8 <TIM_OC3_SetConfig>
  __HAL_UNLOCK(htim);
 800a20e:	2300      	movs	r3, #0
 800a210:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a214:	2000      	movs	r0, #0
}
 800a216:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a218:	6800      	ldr	r0, [r0, #0]
 800a21a:	f7ff fba5 	bl	8009968 <TIM_OC4_SetConfig>
  __HAL_UNLOCK(htim);
 800a21e:	2300      	movs	r3, #0
 800a220:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a224:	2000      	movs	r0, #0
}
 800a226:	bd10      	pop	{r4, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a228:	6800      	ldr	r0, [r0, #0]
 800a22a:	f7ff fbd3 	bl	80099d4 <TIM_OC5_SetConfig>
  __HAL_UNLOCK(htim);
 800a22e:	2300      	movs	r3, #0
 800a230:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a234:	2000      	movs	r0, #0
}
 800a236:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800a238:	2002      	movs	r0, #2
}
 800a23a:	4770      	bx	lr

0800a23c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a23c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a240:	2b01      	cmp	r3, #1
 800a242:	d03e      	beq.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 800a244:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a246:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a248:	4d1f      	ldr	r5, [pc, #124]	; (800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a24a:	2302      	movs	r3, #2
 800a24c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a250:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800a252:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a254:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a256:	d02a      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a258:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a25c:	42aa      	cmp	r2, r5
 800a25e:	d026      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a260:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a266:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a268:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800a26c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a26e:	d010      	beq.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a270:	4b16      	ldr	r3, [pc, #88]	; (800a2cc <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800a272:	429a      	cmp	r2, r3
 800a274:	d00d      	beq.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d009      	beq.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a282:	429a      	cmp	r2, r3
 800a284:	d005      	beq.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a286:	42aa      	cmp	r2, r5
 800a288:	d003      	beq.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a28a:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800a28e:	429a      	cmp	r2, r3
 800a290:	d104      	bne.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a292:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a294:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a298:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a29a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a29c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a2a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800a2a8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800a2aa:	4618      	mov	r0, r3
}
 800a2ac:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2ae:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2b4:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2b6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2bc:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800a2be:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2c0:	e7e7      	b.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 800a2c2:	2002      	movs	r0, #2
}
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40012c00 	.word	0x40012c00
 800a2cc:	40000400 	.word	0x40000400

0800a2d0 <HAL_TIMEx_CommutCallback>:
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop

0800a2d4 <HAL_TIMEx_BreakCallback>:
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop

0800a2d8 <HAL_TIMEx_Break2Callback>:
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop

0800a2dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2dc:	b084      	sub	sp, #16
 800a2de:	4684      	mov	ip, r0
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	a803      	add	r0, sp, #12
 800a2e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2e8:	f8dc 300c 	ldr.w	r3, [ip, #12]
  __IO uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <USB_CoreInit+0x88>)
  __IO uint32_t count = 0U;
 800a2ee:	2100      	movs	r1, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f4:	f8cc 300c 	str.w	r3, [ip, #12]
  __IO uint32_t count = 0U;
 800a2f8:	9101      	str	r1, [sp, #4]
 800a2fa:	e003      	b.n	800a304 <USB_CoreInit+0x28>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2fc:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	db19      	blt.n	800a338 <USB_CoreInit+0x5c>
    if (++count > 200000U)
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	3301      	adds	r3, #1
 800a308:	4293      	cmp	r3, r2
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	d9f6      	bls.n	800a2fc <USB_CoreInit+0x20>
      return HAL_TIMEOUT;
 800a30e:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 800a310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a312:	b943      	cbnz	r3, 800a326 <USB_CoreInit+0x4a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a314:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800a318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a31c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 800a320:	b002      	add	sp, #8
 800a322:	b004      	add	sp, #16
 800a324:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a326:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800a32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a32e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 800a332:	b002      	add	sp, #8
 800a334:	b004      	add	sp, #16
 800a336:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a33c:	f8dc 3010 	ldr.w	r3, [ip, #16]

  do
  {
    if (++count > 200000U)
 800a340:	4a08      	ldr	r2, [pc, #32]	; (800a364 <USB_CoreInit+0x88>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	f8cc 3010 	str.w	r3, [ip, #16]
 800a34a:	e004      	b.n	800a356 <USB_CoreInit+0x7a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a34c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800a350:	f010 0001 	ands.w	r0, r0, #1
 800a354:	d0dc      	beq.n	800a310 <USB_CoreInit+0x34>
    if (++count > 200000U)
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	3301      	adds	r3, #1
 800a35a:	4293      	cmp	r3, r2
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	d9f5      	bls.n	800a34c <USB_CoreInit+0x70>
 800a360:	e7d5      	b.n	800a30e <USB_CoreInit+0x32>
 800a362:	bf00      	nop
 800a364:	00030d40 	.word	0x00030d40

0800a368 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800a368:	2a02      	cmp	r2, #2
{
 800a36a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800a36c:	d00a      	beq.n	800a384 <USB_SetTurnaroundTime+0x1c>
 800a36e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800a378:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	430a      	orrs	r2, r1
}
 800a37e:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a380:	60da      	str	r2, [r3, #12]
}
 800a382:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a384:	4a26      	ldr	r2, [pc, #152]	; (800a420 <USB_SetTurnaroundTime+0xb8>)
 800a386:	4827      	ldr	r0, [pc, #156]	; (800a424 <USB_SetTurnaroundTime+0xbc>)
 800a388:	440a      	add	r2, r1
 800a38a:	4282      	cmp	r2, r0
 800a38c:	d932      	bls.n	800a3f4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a38e:	4a26      	ldr	r2, [pc, #152]	; (800a428 <USB_SetTurnaroundTime+0xc0>)
 800a390:	4826      	ldr	r0, [pc, #152]	; (800a42c <USB_SetTurnaroundTime+0xc4>)
 800a392:	440a      	add	r2, r1
 800a394:	4282      	cmp	r2, r0
 800a396:	d930      	bls.n	800a3fa <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a398:	4825      	ldr	r0, [pc, #148]	; (800a430 <USB_SetTurnaroundTime+0xc8>)
 800a39a:	f5a1 0274 	sub.w	r2, r1, #15990784	; 0xf40000
 800a39e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800a3a2:	4282      	cmp	r2, r0
 800a3a4:	d92c      	bls.n	800a400 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3a6:	4823      	ldr	r0, [pc, #140]	; (800a434 <USB_SetTurnaroundTime+0xcc>)
 800a3a8:	f1a1 7283 	sub.w	r2, r1, #17170432	; 0x1060000
 800a3ac:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 800a3b0:	4282      	cmp	r2, r0
 800a3b2:	d328      	bcc.n	800a406 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3b4:	4a20      	ldr	r2, [pc, #128]	; (800a438 <USB_SetTurnaroundTime+0xd0>)
 800a3b6:	4821      	ldr	r0, [pc, #132]	; (800a43c <USB_SetTurnaroundTime+0xd4>)
 800a3b8:	440a      	add	r2, r1
 800a3ba:	4282      	cmp	r2, r0
 800a3bc:	d926      	bls.n	800a40c <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a3be:	4a20      	ldr	r2, [pc, #128]	; (800a440 <USB_SetTurnaroundTime+0xd8>)
 800a3c0:	4820      	ldr	r0, [pc, #128]	; (800a444 <USB_SetTurnaroundTime+0xdc>)
 800a3c2:	440a      	add	r2, r1
 800a3c4:	4282      	cmp	r2, r0
 800a3c6:	d324      	bcc.n	800a412 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a3c8:	4a1f      	ldr	r2, [pc, #124]	; (800a448 <USB_SetTurnaroundTime+0xe0>)
 800a3ca:	4820      	ldr	r0, [pc, #128]	; (800a44c <USB_SetTurnaroundTime+0xe4>)
 800a3cc:	440a      	add	r2, r1
 800a3ce:	4282      	cmp	r2, r0
 800a3d0:	d3cd      	bcc.n	800a36e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a3d2:	481f      	ldr	r0, [pc, #124]	; (800a450 <USB_SetTurnaroundTime+0xe8>)
 800a3d4:	f1a1 72b7 	sub.w	r2, r1, #23986176	; 0x16e0000
 800a3d8:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 800a3dc:	4282      	cmp	r2, r0
 800a3de:	d31b      	bcc.n	800a418 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a3e0:	4a1c      	ldr	r2, [pc, #112]	; (800a454 <USB_SetTurnaroundTime+0xec>)
 800a3e2:	481d      	ldr	r0, [pc, #116]	; (800a458 <USB_SetTurnaroundTime+0xf0>)
 800a3e4:	440a      	add	r2, r1
 800a3e6:	4282      	cmp	r2, r0
 800a3e8:	bf34      	ite	cc
 800a3ea:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 800a3ee:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 800a3f2:	e7be      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a3f4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800a3f8:	e7bb      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a3fa:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800a3fe:	e7b8      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a400:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 800a404:	e7b5      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a406:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800a40a:	e7b2      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a40c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800a410:	e7af      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a412:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800a416:	e7ac      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a41c:	e7a9      	b.n	800a372 <USB_SetTurnaroundTime+0xa>
 800a41e:	bf00      	nop
 800a420:	ff275340 	.word	0xff275340
 800a424:	000c34ff 	.word	0x000c34ff
 800a428:	ff1b1e40 	.word	0xff1b1e40
 800a42c:	000f423f 	.word	0x000f423f
 800a430:	00124f7f 	.word	0x00124f7f
 800a434:	0013d620 	.word	0x0013d620
 800a438:	fee5b660 	.word	0xfee5b660
 800a43c:	0016e35f 	.word	0x0016e35f
 800a440:	feced300 	.word	0xfeced300
 800a444:	001b7740 	.word	0x001b7740
 800a448:	feb35bc0 	.word	0xfeb35bc0
 800a44c:	002191c0 	.word	0x002191c0
 800a450:	00387520 	.word	0x00387520
 800a454:	fe5954e0 	.word	0xfe5954e0
 800a458:	00419ce0 	.word	0x00419ce0

0800a45c <USB_EnableGlobalInt>:
{
 800a45c:	4603      	mov	r3, r0
}
 800a45e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a460:	689a      	ldr	r2, [r3, #8]
 800a462:	f042 0201 	orr.w	r2, r2, #1
 800a466:	609a      	str	r2, [r3, #8]
}
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop

0800a46c <USB_DisableGlobalInt>:
{
 800a46c:	4603      	mov	r3, r0
}
 800a46e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	f022 0201 	bic.w	r2, r2, #1
 800a476:	609a      	str	r2, [r3, #8]
}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <USB_SetCurrentMode>:
{
 800a47c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a47e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a480:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a482:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 800a486:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a488:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a48a:	d018      	beq.n	800a4be <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 800a48c:	b9a9      	cbnz	r1, 800a4ba <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a48e:	68c3      	ldr	r3, [r0, #12]
 800a490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 800a494:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a496:	60c3      	str	r3, [r0, #12]
 800a498:	e001      	b.n	800a49e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a49a:	2c32      	cmp	r4, #50	; 0x32
 800a49c:	d00d      	beq.n	800a4ba <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 800a49e:	2001      	movs	r0, #1
 800a4a0:	f7fb fde4 	bl	800606c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800a4a4:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a4a6:	07db      	lsls	r3, r3, #31
      ms++;
 800a4a8:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a4ac:	d4f5      	bmi.n	800a49a <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800a4ae:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800a4b2:	fab0 f080 	clz	r0, r0
 800a4b6:	0940      	lsrs	r0, r0, #5
}
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a4ba:	2001      	movs	r0, #1
}
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a4be:	68c3      	ldr	r3, [r0, #12]
 800a4c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 800a4c4:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a4c6:	60c3      	str	r3, [r0, #12]
 800a4c8:	e001      	b.n	800a4ce <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a4ca:	2c32      	cmp	r4, #50	; 0x32
 800a4cc:	d0f5      	beq.n	800a4ba <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	f7fb fdcc 	bl	800606c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800a4d4:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a4d6:	07da      	lsls	r2, r3, #31
      ms++;
 800a4d8:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a4dc:	d5f5      	bpl.n	800a4ca <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 800a4de:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800a4e2:	fab0 f080 	clz	r0, r0
 800a4e6:	0940      	lsrs	r0, r0, #5
 800a4e8:	e7e6      	b.n	800a4b8 <USB_SetCurrentMode+0x3c>
 800a4ea:	bf00      	nop

0800a4ec <USB_FlushTxFifo>:
{
 800a4ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800a4ee:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a4f0:	4a11      	ldr	r2, [pc, #68]	; (800a538 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	e002      	b.n	800a4fc <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4f6:	6903      	ldr	r3, [r0, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	db07      	blt.n	800a50c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	3301      	adds	r3, #1
 800a500:	4293      	cmp	r3, r2
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	d9f7      	bls.n	800a4f6 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800a506:	2003      	movs	r0, #3
}
 800a508:	b002      	add	sp, #8
 800a50a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a50c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800a50e:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a510:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800a514:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 800a516:	4a08      	ldr	r2, [pc, #32]	; (800a538 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a518:	6101      	str	r1, [r0, #16]
 800a51a:	e003      	b.n	800a524 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a51c:	6903      	ldr	r3, [r0, #16]
 800a51e:	f013 0320 	ands.w	r3, r3, #32
 800a522:	d005      	beq.n	800a530 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	3301      	adds	r3, #1
 800a528:	4293      	cmp	r3, r2
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	d9f6      	bls.n	800a51c <USB_FlushTxFifo+0x30>
 800a52e:	e7ea      	b.n	800a506 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800a530:	4618      	mov	r0, r3
}
 800a532:	b002      	add	sp, #8
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	00030d40 	.word	0x00030d40

0800a53c <USB_FlushRxFifo>:
{
 800a53c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800a53e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a540:	4a10      	ldr	r2, [pc, #64]	; (800a584 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	e002      	b.n	800a54c <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a546:	6903      	ldr	r3, [r0, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	db07      	blt.n	800a55c <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	3301      	adds	r3, #1
 800a550:	4293      	cmp	r3, r2
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	d9f7      	bls.n	800a546 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 800a556:	2003      	movs	r0, #3
}
 800a558:	b002      	add	sp, #8
 800a55a:	4770      	bx	lr
  count = 0U;
 800a55c:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a55e:	2310      	movs	r3, #16
  count = 0U;
 800a560:	9101      	str	r1, [sp, #4]
    if (++count > 200000U)
 800a562:	4a08      	ldr	r2, [pc, #32]	; (800a584 <USB_FlushRxFifo+0x48>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a564:	6103      	str	r3, [r0, #16]
 800a566:	e003      	b.n	800a570 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a568:	6903      	ldr	r3, [r0, #16]
 800a56a:	f013 0310 	ands.w	r3, r3, #16
 800a56e:	d005      	beq.n	800a57c <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	3301      	adds	r3, #1
 800a574:	4293      	cmp	r3, r2
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	d9f6      	bls.n	800a568 <USB_FlushRxFifo+0x2c>
 800a57a:	e7ec      	b.n	800a556 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 800a57c:	4618      	mov	r0, r3
}
 800a57e:	b002      	add	sp, #8
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	00030d40 	.word	0x00030d40

0800a588 <USB_DevInit>:
{
 800a588:	b084      	sub	sp, #16
 800a58a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a58e:	ac09      	add	r4, sp, #36	; 0x24
 800a590:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800a594:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 800a596:	2300      	movs	r3, #0
 800a598:	460e      	mov	r6, r1
{
 800a59a:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 800a59c:	4619      	mov	r1, r3
 800a59e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a5a2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800a5aa:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800a5ac:	d1f7      	bne.n	800a59e <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 800a5ae:	2f00      	cmp	r7, #0
 800a5b0:	f040 8096 	bne.w	800a6e0 <USB_DevInit+0x158>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5b4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800a5b8:	f504 6800 	add.w	r8, r4, #2048	; 0x800
 800a5bc:	f043 0302 	orr.w	r3, r3, #2
 800a5c0:	f8c8 3004 	str.w	r3, [r8, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5ca:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d2:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5da:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800a5dc:	2500      	movs	r5, #0
 800a5de:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a5e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e6:	f8c8 3000 	str.w	r3, [r8]
  USBx_DEVICE->DCFG |= speed;
 800a5ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ee:	f043 0303 	orr.w	r3, r3, #3
 800a5f2:	f8c8 3000 	str.w	r3, [r8]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5f6:	2110      	movs	r1, #16
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7ff ff77 	bl	800a4ec <USB_FlushTxFifo>
 800a5fe:	4681      	mov	r9, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a600:	4620      	mov	r0, r4
 800a602:	f7ff ff9b 	bl	800a53c <USB_FlushRxFifo>
 800a606:	ea49 0000 	orr.w	r0, r9, r0
 800a60a:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 800a60c:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 800a60e:	f8c8 5010 	str.w	r5, [r8, #16]
    ret = HAL_ERROR;
 800a612:	bf18      	it	ne
 800a614:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 800a616:	f8c8 5014 	str.w	r5, [r8, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a61a:	f8c8 501c 	str.w	r5, [r8, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a61e:	b1e6      	cbz	r6, 800a65a <USB_DevInit+0xd2>
 800a620:	462a      	mov	r2, r5
 800a622:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a626:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a62a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a62e:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
 800a632:	e008      	b.n	800a646 <USB_DevInit+0xbe>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a634:	601d      	str	r5, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a636:	3201      	adds	r2, #1
 800a638:	4296      	cmp	r6, r2
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a63a:	611d      	str	r5, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a63c:	f8c3 c008 	str.w	ip, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a640:	f103 0320 	add.w	r3, r3, #32
 800a644:	d02e      	beq.n	800a6a4 <USB_DevInit+0x11c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a646:	6819      	ldr	r1, [r3, #0]
 800a648:	2900      	cmp	r1, #0
 800a64a:	daf3      	bge.n	800a634 <USB_DevInit+0xac>
      if (i == 0U)
 800a64c:	b112      	cbz	r2, 800a654 <USB_DevInit+0xcc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a64e:	f8c3 e000 	str.w	lr, [r3]
 800a652:	e7f0      	b.n	800a636 <USB_DevInit+0xae>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a654:	f8c3 9000 	str.w	r9, [r3]
 800a658:	e7ed      	b.n	800a636 <USB_DevInit+0xae>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a65a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a65e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a662:	f8c8 3010 	str.w	r3, [r8, #16]
  USBx->GINTMSK = 0U;
 800a666:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a668:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800a66c:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a66e:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a670:	69a2      	ldr	r2, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a672:	4b1f      	ldr	r3, [pc, #124]	; (800a6f0 <USB_DevInit+0x168>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a674:	f042 0210 	orr.w	r2, r2, #16
 800a678:	61a2      	str	r2, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a67a:	69a2      	ldr	r2, [r4, #24]
 800a67c:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800a67e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a680:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a682:	b11a      	cbz	r2, 800a68c <USB_DevInit+0x104>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a684:	69a3      	ldr	r3, [r4, #24]
 800a686:	f043 0308 	orr.w	r3, r3, #8
 800a68a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a68c:	2f01      	cmp	r7, #1
 800a68e:	d105      	bne.n	800a69c <USB_DevInit+0x114>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a690:	69a3      	ldr	r3, [r4, #24]
 800a692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a696:	f043 0304 	orr.w	r3, r3, #4
 800a69a:	61a3      	str	r3, [r4, #24]
}
 800a69c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a0:	b004      	add	sp, #16
 800a6a2:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6aa:	4615      	mov	r5, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6ac:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a6b0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6b4:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
 800a6b8:	e008      	b.n	800a6cc <USB_DevInit+0x144>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6ba:	601d      	str	r5, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6bc:	3201      	adds	r2, #1
 800a6be:	4296      	cmp	r6, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6c0:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6c2:	f8c3 c008 	str.w	ip, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6c6:	f103 0320 	add.w	r3, r3, #32
 800a6ca:	d0c6      	beq.n	800a65a <USB_DevInit+0xd2>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6cc:	6819      	ldr	r1, [r3, #0]
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	daf3      	bge.n	800a6ba <USB_DevInit+0x132>
      if (i == 0U)
 800a6d2:	b112      	cbz	r2, 800a6da <USB_DevInit+0x152>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6d4:	f8c3 e000 	str.w	lr, [r3]
 800a6d8:	e7f0      	b.n	800a6bc <USB_DevInit+0x134>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a6da:	f8c3 9000 	str.w	r9, [r3]
 800a6de:	e7ed      	b.n	800a6bc <USB_DevInit+0x134>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6e6:	f504 6800 	add.w	r8, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6ec:	e776      	b.n	800a5dc <USB_DevInit+0x54>
 800a6ee:	bf00      	nop
 800a6f0:	803c3800 	.word	0x803c3800

0800a6f4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
    speed = 0xFU;
 800a6f8:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6fc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 800a700:	bf14      	ite	ne
 800a702:	2002      	movne	r0, #2
 800a704:	200f      	moveq	r0, #15
 800a706:	4770      	bx	lr

0800a708 <USB_ActivateEndpoint>:
{
 800a708:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800a70a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a70c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d022      	beq.n	800a758 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a712:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800a716:	f002 0c0f 	and.w	ip, r2, #15
 800a71a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a71e:	fa03 f30c 	lsl.w	r3, r3, ip
 800a722:	4323      	orrs	r3, r4
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a724:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a728:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a72c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	d40e      	bmi.n	800a752 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a734:	688b      	ldr	r3, [r1, #8]
 800a736:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
                                    ((uint32_t)ep->type << 18) |
 800a73a:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a73c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a740:	4303      	orrs	r3, r0
 800a742:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a74a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a74e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 800a752:	2000      	movs	r0, #0
 800a754:	bc30      	pop	{r4, r5}
 800a756:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a758:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800a75c:	f002 0c0f 	and.w	ip, r2, #15
 800a760:	fa03 f30c 	lsl.w	r3, r3, ip
 800a764:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800a768:	432b      	orrs	r3, r5
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a76a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a76e:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a770:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a774:	041c      	lsls	r4, r3, #16
 800a776:	d4ec      	bmi.n	800a752 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a778:	688b      	ldr	r3, [r1, #8]
 800a77a:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a77e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a780:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a784:	4323      	orrs	r3, r4
 800a786:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a78a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800a78e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a796:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800a79a:	bc30      	pop	{r4, r5}
 800a79c:	2000      	movs	r0, #0
 800a79e:	4770      	bx	lr

0800a7a0 <USB_DeactivateEndpoint>:
{
 800a7a0:	b410      	push	{r4}
  if (ep->is_in == 1U)
 800a7a2:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a7a4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a7a6:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7a8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800a7ac:	d02c      	beq.n	800a808 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7ae:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800a7b2:	2900      	cmp	r1, #0
 800a7b4:	db1b      	blt.n	800a7ee <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7b6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800a7ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c6:	ea24 0403 	bic.w	r4, r4, r3
 800a7ca:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7ce:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a7d2:	4922      	ldr	r1, [pc, #136]	; (800a85c <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7d4:	ea24 0303 	bic.w	r3, r4, r3
 800a7d8:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a7dc:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 800a7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a7e4:	4019      	ands	r1, r3
}
 800a7e6:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a7e8:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800a7ec:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a7ee:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800a7f2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800a7f6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a7fa:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800a7fe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a802:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 800a806:	e7d6      	b.n	800a7b6 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a808:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800a80c:	2900      	cmp	r1, #0
 800a80e:	da0b      	bge.n	800a828 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a810:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800a814:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800a818:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a81c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800a820:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a824:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a828:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800a82c:	f003 040f 	and.w	r4, r3, #15
 800a830:	2301      	movs	r3, #1
 800a832:	40a3      	lsls	r3, r4
 800a834:	ea21 0103 	bic.w	r1, r1, r3
 800a838:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a83c:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a840:	4907      	ldr	r1, [pc, #28]	; (800a860 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a842:	ea24 0303 	bic.w	r3, r4, r3
 800a846:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a84a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 800a84e:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a852:	4019      	ands	r1, r3
}
 800a854:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a856:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 800a85a:	4770      	bx	lr
 800a85c:	eff37800 	.word	0xeff37800
 800a860:	ec337800 	.word	0xec337800

0800a864 <USB_EPStartXfer>:
{
 800a864:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800a866:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a868:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a86a:	2c01      	cmp	r4, #1
 800a86c:	d052      	beq.n	800a914 <USB_EPStartXfer+0xb0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a86e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a872:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800a876:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800a87a:	0cd2      	lsrs	r2, r2, #19
 800a87c:	04d2      	lsls	r2, r2, #19
 800a87e:	f8cc 2010 	str.w	r2, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a882:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800a886:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800a88a:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800a88e:	f8cc 2010 	str.w	r2, [ip, #16]
    if (ep->xfer_len == 0U)
 800a892:	694a      	ldr	r2, [r1, #20]
 800a894:	b37a      	cbz	r2, 800a8f6 <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a896:	688c      	ldr	r4, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a898:	4d63      	ldr	r5, [pc, #396]	; (800aa28 <USB_EPStartXfer+0x1c4>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a89a:	4422      	add	r2, r4
 800a89c:	3a01      	subs	r2, #1
 800a89e:	fbb2 f2f4 	udiv	r2, r2, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8a2:	ea05 4ec2 	and.w	lr, r5, r2, lsl #19
 800a8a6:	b292      	uxth	r2, r2
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a8a8:	fb02 f404 	mul.w	r4, r2, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8ac:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800a8b0:	ea4e 0202 	orr.w	r2, lr, r2
 800a8b4:	f8cc 2010 	str.w	r2, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a8b8:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800a8bc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a8c0:	4314      	orrs	r4, r2
 800a8c2:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->type == EP_TYPE_ISOC)
 800a8c6:	78ca      	ldrb	r2, [r1, #3]
 800a8c8:	2a01      	cmp	r2, #1
 800a8ca:	d10c      	bne.n	800a8e6 <USB_EPStartXfer+0x82>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8cc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a8d0:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a8d4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a8d8:	bf0c      	ite	eq
 800a8da:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a8de:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800a8e2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a8e6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a8ea:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a8ee:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a8f6:	688a      	ldr	r2, [r1, #8]
 800a8f8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800a8fc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800a900:	4322      	orrs	r2, r4
 800a902:	f8cc 2010 	str.w	r2, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a906:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800a90a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a90e:	f8cc 2010 	str.w	r2, [ip, #16]
 800a912:	e7d8      	b.n	800a8c6 <USB_EPStartXfer+0x62>
    if (ep->xfer_len == 0U)
 800a914:	694a      	ldr	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a916:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
    if (ep->xfer_len == 0U)
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	d13b      	bne.n	800a996 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a91e:	f8dc 4910 	ldr.w	r4, [ip, #2320]	; 0x910
 800a922:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a926:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a92a:	f8cc 4910 	str.w	r4, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a92e:	f8dc 4910 	ldr.w	r4, [ip, #2320]	; 0x910
 800a932:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a936:	f8cc 4910 	str.w	r4, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a93a:	f8dc 4910 	ldr.w	r4, [ip, #2320]	; 0x910
 800a93e:	0ce4      	lsrs	r4, r4, #19
 800a940:	04e4      	lsls	r4, r4, #19
 800a942:	f8cc 4910 	str.w	r4, [ip, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a946:	f8dc 4900 	ldr.w	r4, [ip, #2304]	; 0x900
 800a94a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800a94e:	f8cc 4900 	str.w	r4, [ip, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800a952:	78cc      	ldrb	r4, [r1, #3]
 800a954:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a956:	f50c 6510 	add.w	r5, ip, #2304	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800a95a:	d1ca      	bne.n	800a8f2 <USB_EPStartXfer+0x8e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a95c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800a960:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a964:	682c      	ldr	r4, [r5, #0]
  count32b = ((uint32_t)len + 3U) / 4U;
 800a966:	b292      	uxth	r2, r2
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a968:	bf0c      	ite	eq
 800a96a:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a96e:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800a972:	602c      	str	r4, [r5, #0]
  count32b = ((uint32_t)len + 3U) / 4U;
 800a974:	1cd4      	adds	r4, r2, #3
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a976:	68ca      	ldr	r2, [r1, #12]
  for (i = 0U; i < count32b; i++)
 800a978:	08a1      	lsrs	r1, r4, #2
 800a97a:	d0ba      	beq.n	800a8f2 <USB_EPStartXfer+0x8e>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a97c:	eb00 3303 	add.w	r3, r0, r3, lsl #12
 800a980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a984:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a988:	f852 0b04 	ldr.w	r0, [r2], #4
 800a98c:	6018      	str	r0, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800a98e:	428a      	cmp	r2, r1
 800a990:	d1fa      	bne.n	800a988 <USB_EPStartXfer+0x124>
}
 800a992:	2000      	movs	r0, #0
 800a994:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a996:	f8dc 5910 	ldr.w	r5, [ip, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a99a:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a99c:	0ced      	lsrs	r5, r5, #19
 800a99e:	04ed      	lsls	r5, r5, #19
 800a9a0:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9a4:	f8dc 5910 	ldr.w	r5, [ip, #2320]	; 0x910
 800a9a8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800a9ac:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800a9b0:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a9b4:	4d1c      	ldr	r5, [pc, #112]	; (800aa28 <USB_EPStartXfer+0x1c4>)
 800a9b6:	f8dc 7910 	ldr.w	r7, [ip, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a9ba:	eb02 0e06 	add.w	lr, r2, r6
 800a9be:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800a9c2:	fbbe fef6 	udiv	lr, lr, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a9c6:	ea05 45ce 	and.w	r5, r5, lr, lsl #19
 800a9ca:	433d      	orrs	r5, r7
 800a9cc:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9d0:	f8dc 6910 	ldr.w	r6, [ip, #2320]	; 0x910
 800a9d4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800a9d8:	4335      	orrs	r5, r6
 800a9da:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800a9de:	78ce      	ldrb	r6, [r1, #3]
 800a9e0:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9e2:	f50c 6510 	add.w	r5, ip, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800a9e6:	d00f      	beq.n	800aa08 <USB_EPStartXfer+0x1a4>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9e8:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800a9ec:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a9f0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a9f4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800a9f8:	f003 030f 	and.w	r3, r3, #15
 800a9fc:	409c      	lsls	r4, r3
 800a9fe:	4314      	orrs	r4, r2
 800aa00:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 800aa04:	2000      	movs	r0, #0
 800aa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa08:	692c      	ldr	r4, [r5, #16]
 800aa0a:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800aa0e:	612c      	str	r4, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa10:	692c      	ldr	r4, [r5, #16]
 800aa12:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800aa16:	612c      	str	r4, [r5, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa18:	f8dc 4900 	ldr.w	r4, [ip, #2304]	; 0x900
 800aa1c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800aa20:	f8cc 4900 	str.w	r4, [ip, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800aa24:	e79a      	b.n	800a95c <USB_EPStartXfer+0xf8>
 800aa26:	bf00      	nop
 800aa28:	1ff80000 	.word	0x1ff80000

0800aa2c <USB_EP0StartXfer>:
{
 800aa2c:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800aa2e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800aa30:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800aa32:	2a01      	cmp	r2, #1
 800aa34:	d025      	beq.n	800aa82 <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa36:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800aa3a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800aa3e:	f8d0 2b10 	ldr.w	r2, [r0, #2832]	; 0xb10
    if (ep->xfer_len > 0U)
 800aa42:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa44:	0cd2      	lsrs	r2, r2, #19
 800aa46:	04d2      	lsls	r2, r2, #19
 800aa48:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa4a:	691a      	ldr	r2, [r3, #16]
 800aa4c:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800aa50:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800aa54:	611a      	str	r2, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800aa56:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800aa58:	b98c      	cbnz	r4, 800aa7e <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa5a:	6919      	ldr	r1, [r3, #16]
 800aa5c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800aa60:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa62:	6919      	ldr	r1, [r3, #16]
 800aa64:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa6c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800aa70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa74:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800aa78:	2000      	movs	r0, #0
 800aa7a:	bc70      	pop	{r4, r5, r6}
 800aa7c:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 800aa7e:	614a      	str	r2, [r1, #20]
 800aa80:	e7eb      	b.n	800aa5a <USB_EP0StartXfer+0x2e>
    if (ep->xfer_len == 0U)
 800aa82:	694c      	ldr	r4, [r1, #20]
 800aa84:	b394      	cbz	r4, 800aaec <USB_EP0StartXfer+0xc0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa86:	eb00 1243 	add.w	r2, r0, r3, lsl #5
      if (ep->xfer_len > ep->maxpacket)
 800aa8a:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa8c:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800aa90:	0ced      	lsrs	r5, r5, #19
 800aa92:	04ed      	lsls	r5, r5, #19
 800aa94:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa98:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800aa9c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800aaa0:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
      if (ep->xfer_len > ep->maxpacket)
 800aaa4:	42b4      	cmp	r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaa6:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aaaa:	f502 6510 	add.w	r5, r2, #2304	; 0x900
      if (ep->xfer_len > ep->maxpacket)
 800aaae:	d93c      	bls.n	800ab2a <USB_EP0StartXfer+0xfe>
        ep->xfer_len = ep->maxpacket;
 800aab0:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aab2:	6929      	ldr	r1, [r5, #16]
 800aab4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800aab8:	6129      	str	r1, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aaba:	692c      	ldr	r4, [r5, #16]
 800aabc:	f3c6 0112 	ubfx	r1, r6, #0, #19
 800aac0:	4321      	orrs	r1, r4
 800aac2:	6129      	str	r1, [r5, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aac4:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800aac8:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800aacc:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	d0d1      	beq.n	800aa78 <USB_EP0StartXfer+0x4c>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aad4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800aad8:	f003 010f 	and.w	r1, r3, #15
 800aadc:	2301      	movs	r3, #1
 800aade:	408b      	lsls	r3, r1
 800aae0:	4313      	orrs	r3, r2
 800aae2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800aae6:	bc70      	pop	{r4, r5, r6}
 800aae8:	2000      	movs	r0, #0
 800aaea:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
}
 800aaf0:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaf2:	f8d3 1910 	ldr.w	r1, [r3, #2320]	; 0x910
 800aaf6:	f021 51ff 	bic.w	r1, r1, #534773760	; 0x1fe00000
 800aafa:	f421 11c0 	bic.w	r1, r1, #1572864	; 0x180000
 800aafe:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab02:	f8d3 1910 	ldr.w	r1, [r3, #2320]	; 0x910
 800ab06:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800ab0a:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab0e:	f8d3 1910 	ldr.w	r1, [r3, #2320]	; 0x910
 800ab12:	0cc9      	lsrs	r1, r1, #19
 800ab14:	04c9      	lsls	r1, r1, #19
 800ab16:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800ab1e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 800ab22:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab24:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800ab28:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab2a:	6929      	ldr	r1, [r5, #16]
 800ab2c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800ab30:	6129      	str	r1, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab32:	6929      	ldr	r1, [r5, #16]
 800ab34:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800ab38:	430c      	orrs	r4, r1
 800ab3a:	612c      	str	r4, [r5, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab3c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800ab40:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800ab44:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800ab48:	e7c4      	b.n	800aad4 <USB_EP0StartXfer+0xa8>
 800ab4a:	bf00      	nop

0800ab4c <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800ab4c:	3303      	adds	r3, #3
  for (i = 0U; i < count32b; i++)
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	d009      	beq.n	800ab66 <USB_WritePacket+0x1a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab52:	3201      	adds	r2, #1
 800ab54:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800ab58:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800ab5c:	f851 3b04 	ldr.w	r3, [r1], #4
 800ab60:	6003      	str	r3, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800ab62:	428a      	cmp	r2, r1
 800ab64:	d1fa      	bne.n	800ab5c <USB_WritePacket+0x10>
}
 800ab66:	2000      	movs	r0, #0
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <USB_ReadPacket>:
{
 800ab6c:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800ab6e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800ab72:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800ab76:	d00b      	beq.n	800ab90 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab78:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800ab7c:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800ab88:	459e      	cmp	lr, r3
 800ab8a:	d1f9      	bne.n	800ab80 <USB_ReadPacket+0x14>
    pDest++;
 800ab8c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 800ab90:	b165      	cbz	r5, 800abac <USB_ReadPacket+0x40>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab92:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800ab96:	440d      	add	r5, r1
 800ab98:	6800      	ldr	r0, [r0, #0]
 800ab9a:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ab9c:	fa20 f203 	lsr.w	r2, r0, r3
 800aba0:	f801 2b01 	strb.w	r2, [r1], #1
    } while (remaining_bytes != 0U);
 800aba4:	42a9      	cmp	r1, r5
 800aba6:	f103 0308 	add.w	r3, r3, #8
 800abaa:	d1f7      	bne.n	800ab9c <USB_ReadPacket+0x30>
}
 800abac:	4608      	mov	r0, r1
 800abae:	bd30      	pop	{r4, r5, pc}

0800abb0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800abb0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800abb2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800abb4:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abb6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800abba:	d00c      	beq.n	800abd6 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abbc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800abc0:	2a00      	cmp	r2, #0
 800abc2:	db00      	blt.n	800abc6 <USB_EPSetStall+0x16>
 800abc4:	b9d3      	cbnz	r3, 800abfc <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800abc6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800abca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abce:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800abd2:	2000      	movs	r0, #0
 800abd4:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abd6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800abda:	2a00      	cmp	r2, #0
 800abdc:	db06      	blt.n	800abec <USB_EPSetStall+0x3c>
 800abde:	b12b      	cbz	r3, 800abec <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800abe0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800abe4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abe8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800abec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800abf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abf4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800abf8:	2000      	movs	r0, #0
 800abfa:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800abfc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac04:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800ac08:	e7dd      	b.n	800abc6 <USB_EPSetStall+0x16>
 800ac0a:	bf00      	nop

0800ac0c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800ac0c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ac0e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ac10:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ac16:	d013      	beq.n	800ac40 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac18:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac20:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac24:	78cb      	ldrb	r3, [r1, #3]
 800ac26:	3b02      	subs	r3, #2
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d901      	bls.n	800ac30 <USB_EPClearStall+0x24>
}
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac30:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac38:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac40:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ac44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac48:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac4c:	78cb      	ldrb	r3, [r1, #3]
 800ac4e:	3b02      	subs	r3, #2
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d8eb      	bhi.n	800ac2c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ac58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac5c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800ac60:	2000      	movs	r0, #0
 800ac62:	4770      	bx	lr

0800ac64 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800ac68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac6c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800ac74:	0109      	lsls	r1, r1, #4
 800ac76:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800ac7a:	4319      	orrs	r1, r3
 800ac7c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800ac80:	2000      	movs	r0, #0
 800ac82:	4770      	bx	lr

0800ac84 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac84:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 800ac88:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac8a:	f022 0203 	bic.w	r2, r2, #3
 800ac8e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac92:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ac96:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800ac9a:	f023 0302 	bic.w	r3, r3, #2
}
 800ac9e:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aca0:	604b      	str	r3, [r1, #4]
}
 800aca2:	4770      	bx	lr

0800aca4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aca4:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 800aca8:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acaa:	f022 0203 	bic.w	r2, r2, #3
 800acae:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acb2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800acb6:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800acba:	f043 0302 	orr.w	r3, r3, #2
}
 800acbe:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acc0:	604b      	str	r3, [r1, #4]
}
 800acc2:	4770      	bx	lr

0800acc4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800acc4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800acc6:	6980      	ldr	r0, [r0, #24]
}
 800acc8:	4010      	ands	r0, r2
 800acca:	4770      	bx	lr

0800accc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800accc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800acd0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acd4:	69c0      	ldr	r0, [r0, #28]
 800acd6:	4018      	ands	r0, r3
}
 800acd8:	0c00      	lsrs	r0, r0, #16
 800acda:	4770      	bx	lr

0800acdc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800acdc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ace0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ace4:	69c0      	ldr	r0, [r0, #28]
 800ace6:	4018      	ands	r0, r3
}
 800ace8:	b280      	uxth	r0, r0
 800acea:	4770      	bx	lr

0800acec <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800acec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acf0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800acf4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acf8:	6940      	ldr	r0, [r0, #20]
}
 800acfa:	4010      	ands	r0, r2
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop

0800ad00 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800ad00:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad04:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad08:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad0c:	f001 010f 	and.w	r1, r1, #15
 800ad10:	40cb      	lsrs	r3, r1
 800ad12:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad14:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	4313      	orrs	r3, r2
}
 800ad1c:	4018      	ands	r0, r3
 800ad1e:	4770      	bx	lr

0800ad20 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800ad20:	6940      	ldr	r0, [r0, #20]
}
 800ad22:	f000 0001 	and.w	r0, r0, #1
 800ad26:	4770      	bx	lr

0800ad28 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad28:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
{
 800ad2c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad2e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800ad32:	f022 0207 	bic.w	r2, r2, #7
 800ad36:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad3a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ad3e:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800ad42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}
 800ad46:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad48:	604b      	str	r3, [r1, #4]
}
 800ad4a:	4770      	bx	lr

0800ad4c <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad4c:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <USB_EP0_OutStart+0x3c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d811      	bhi.n	800ad78 <USB_EP0_OutStart+0x2c>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad54:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad5c:	6903      	ldr	r3, [r0, #16]
 800ad5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad62:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad64:	6903      	ldr	r3, [r0, #16]
 800ad66:	f043 0318 	orr.w	r3, r3, #24
 800ad6a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad6c:	6903      	ldr	r3, [r0, #16]
 800ad6e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad72:	6103      	str	r3, [r0, #16]
}
 800ad74:	2000      	movs	r0, #0
 800ad76:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad78:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800ad82:	dae9      	bge.n	800ad58 <USB_EP0_OutStart+0xc>
}
 800ad84:	2000      	movs	r0, #0
 800ad86:	4770      	bx	lr
 800ad88:	4f54300a 	.word	0x4f54300a

0800ad8c <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 800ad8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 800ad90:	4c29      	ldr	r4, [pc, #164]	; (800ae38 <BSP_ADC1_Initialization+0xac>)
 800ad92:	7825      	ldrb	r5, [r4, #0]
{
 800ad94:	b086      	sub	sp, #24
 800ad96:	4606      	mov	r6, r0
  if(ADC_UsedFor == ADC1_NOT_USED){
 800ad98:	b135      	cbz	r5, 800ada8 <BSP_ADC1_Initialization+0x1c>
      return BSP_ERROR_PERIPH_FAILURE;
    }
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 800ad9a:	ea46 0005 	orr.w	r0, r6, r5
 800ad9e:	7020      	strb	r0, [r4, #0]

  return BSP_ERROR_NONE;
 800ada0:	2000      	movs	r0, #0
}
 800ada2:	b006      	add	sp, #24
 800ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ada8:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <BSP_ADC1_Initialization+0xb0>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800adaa:	4825      	ldr	r0, [pc, #148]	; (800ae40 <BSP_ADC1_Initialization+0xb4>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800adac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adae:	f042 0220 	orr.w	r2, r2, #32
 800adb2:	64da      	str	r2, [r3, #76]	; 0x4c
 800adb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb6:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800adb8:	f003 0320 	and.w	r3, r3, #32
 800adbc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adbe:	2701      	movs	r7, #1
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800adc0:	f04f 0880 	mov.w	r8, #128	; 0x80
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800adc4:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800adc6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800adc8:	2302      	movs	r3, #2
 800adca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adcc:	e9cd 8701 	strd	r8, r7, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800add0:	f7fc f82e 	bl	8006e30 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);
 800add4:	481a      	ldr	r0, [pc, #104]	; (800ae40 <BSP_ADC1_Initialization+0xb4>)
 800add6:	4641      	mov	r1, r8
 800add8:	463a      	mov	r2, r7
 800adda:	f7fc f9e5 	bl	80071a8 <HAL_GPIO_WritePin>
    SensorTileADC.Instance = ADC1;
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <BSP_ADC1_Initialization+0xb8>)
 800ade0:	6063      	str	r3, [r4, #4]
    SensorTileADC.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ade2:	2304      	movs	r3, #4
    if(HAL_ADC_Init(&SensorTileADC) != HAL_OK)
 800ade4:	eb04 0803 	add.w	r8, r4, r3
    SensorTileADC.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ade8:	61a3      	str	r3, [r4, #24]
    SensorTileADC.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800adea:	6523      	str	r3, [r4, #80]	; 0x50
    SensorTileADC.Init.LowPowerAutoWait = DISABLE;
 800adec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf0:	83a3      	strh	r3, [r4, #28]
    if(HAL_ADC_Init(&SensorTileADC) != HAL_OK)
 800adf2:	4640      	mov	r0, r8
    SensorTileADC.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800adf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    SensorTileADC.Init.Resolution = ADC_RESOLUTION_12B;
 800adf8:	e9c4 5502 	strd	r5, r5, [r4, #8]
    SensorTileADC.Init.ScanConvMode = DISABLE;
 800adfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
    SensorTileADC.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ae00:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    SensorTileADC.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 800ae04:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    SensorTileADC.Init.NbrOfConversion = 1; 
 800ae08:	6227      	str	r7, [r4, #32]
    SensorTileADC.Init.NbrOfDiscConversion      = 1;
 800ae0a:	62a7      	str	r7, [r4, #40]	; 0x28
    SensorTileADC.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 800ae0c:	64e7      	str	r7, [r4, #76]	; 0x4c
    SensorTileADC.Init.DiscontinuousConvMode = DISABLE;
 800ae0e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
      SensorTileADC.Init.DMAContinuousRequests = DISABLE;
 800ae12:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      SensorTileADC.Init.OversamplingMode = DISABLE;
 800ae16:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SensorTileADC.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800ae1a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(HAL_ADC_Init(&SensorTileADC) != HAL_OK)
 800ae1c:	f7fb f93c 	bl	8006098 <HAL_ADC_Init>
 800ae20:	b930      	cbnz	r0, 800ae30 <BSP_ADC1_Initialization+0xa4>
    if (HAL_ADCEx_Calibration_Start(&SensorTileADC, ADC_SINGLE_ENDED) != HAL_OK)
 800ae22:	217f      	movs	r1, #127	; 0x7f
 800ae24:	4640      	mov	r0, r8
 800ae26:	f7fb fb77 	bl	8006518 <HAL_ADCEx_Calibration_Start>
 800ae2a:	b908      	cbnz	r0, 800ae30 <BSP_ADC1_Initialization+0xa4>
  ADC_UsedFor |= ADC_InitFor;
 800ae2c:	7825      	ldrb	r5, [r4, #0]
 800ae2e:	e7b4      	b.n	800ad9a <BSP_ADC1_Initialization+0xe>
					return BSP_ERROR_PERIPH_FAILURE;
 800ae30:	f06f 0003 	mvn.w	r0, #3
 800ae34:	e7b5      	b.n	800ada2 <BSP_ADC1_Initialization+0x16>
 800ae36:	bf00      	nop
 800ae38:	20001b98 	.word	0x20001b98
 800ae3c:	40021000 	.word	0x40021000
 800ae40:	48001400 	.word	0x48001400
 800ae44:	50040000 	.word	0x50040000

0800ae48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 800ae48:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <HAL_ADC_MspInit+0x2c>)
 800ae4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae50:	64da      	str	r2, [r3, #76]	; 0x4c
 800ae52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{ 
 800ae54:	b082      	sub	sp, #8
  __HAL_RCC_ADC_CLK_ENABLE();
 800ae56:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ae5a:	9201      	str	r2, [sp, #4]
 800ae5c:	9a01      	ldr	r2, [sp, #4]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 800ae5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ae62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ae66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ae6e:	b002      	add	sp, #8
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40021000 	.word	0x40021000

0800ae78 <BSP_LED_Init>:
*            @arg  LED2
*            @arg  LED3
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 800ae78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae7a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800ae7c:	b9d0      	cbnz	r0, 800aeb4 <BSP_LED_Init+0x3c>
 800ae7e:	4b29      	ldr	r3, [pc, #164]	; (800af24 <BSP_LED_Init+0xac>)
 800ae80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae82:	f042 0202 	orr.w	r2, r2, #2
 800ae86:	64da      	str	r2, [r3, #76]	; 0x4c
 800ae88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800ae92:	4a25      	ldr	r2, [pc, #148]	; (800af28 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800ae94:	4c25      	ldr	r4, [pc, #148]	; (800af2c <BSP_LED_Init+0xb4>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800ae96:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800ae9a:	9105      	str	r1, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae9c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae9e:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800aea0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aea4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800aea6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800aeac:	f7fb ffc0 	bl	8006e30 <HAL_GPIO_Init>

  /* If Red Led... switch off it */
  if(Led == LED3) {
    BSP_LED_Off(Led);
  }
}
 800aeb0:	b00b      	add	sp, #44	; 0x2c
 800aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800aeb4:	2801      	cmp	r0, #1
 800aeb6:	d10a      	bne.n	800aece <BSP_LED_Init+0x56>
 800aeb8:	4b1a      	ldr	r3, [pc, #104]	; (800af24 <BSP_LED_Init+0xac>)
 800aeba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aebc:	f042 0220 	orr.w	r2, r2, #32
 800aec0:	64da      	str	r2, [r3, #76]	; 0x4c
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	f003 0320 	and.w	r3, r3, #32
 800aec8:	9302      	str	r3, [sp, #8]
 800aeca:	9b02      	ldr	r3, [sp, #8]
 800aecc:	e7e1      	b.n	800ae92 <BSP_LED_Init+0x1a>
 800aece:	2802      	cmp	r0, #2
 800aed0:	d1df      	bne.n	800ae92 <BSP_LED_Init+0x1a>
 800aed2:	4c14      	ldr	r4, [pc, #80]	; (800af24 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800aed4:	4d15      	ldr	r5, [pc, #84]	; (800af2c <BSP_LED_Init+0xb4>)
  LEDx_GPIO_CLK_ENABLE(Led);
 800aed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aedc:	65a3      	str	r3, [r4, #88]	; 0x58
 800aede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aee4:	9303      	str	r3, [sp, #12]
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	f7fc ff08 	bl	8007cfc <HAL_PWREx_EnableVddIO2>
 800aeec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800aeee:	68a8      	ldr	r0, [r5, #8]
  LEDx_GPIO_CLK_ENABLE(Led);
 800aef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aef6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800aef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800aefe:	f44f 6680 	mov.w	r6, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af02:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af04:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800af06:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af08:	e9cd 7306 	strd	r7, r3, [sp, #24]
  LEDx_GPIO_CLK_ENABLE(Led);
 800af0c:	9a04      	ldr	r2, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af0e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800af10:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800af12:	f7fb ff8d 	bl	8006e30 <HAL_GPIO_Init>
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
  if(Led == LED3) {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800af16:	68a8      	ldr	r0, [r5, #8]
 800af18:	463a      	mov	r2, r7
 800af1a:	4631      	mov	r1, r6
 800af1c:	f7fc f944 	bl	80071a8 <HAL_GPIO_WritePin>
}
 800af20:	b00b      	add	sp, #44	; 0x2c
 800af22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af24:	40021000 	.word	0x40021000
 800af28:	0801fdc4 	.word	0x0801fdc4
 800af2c:	200002f0 	.word	0x200002f0

0800af30 <BSP_LED_On>:
  if(Led == LED3) {
 800af30:	2802      	cmp	r0, #2
 800af32:	d008      	beq.n	800af46 <BSP_LED_On+0x16>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800af34:	4a07      	ldr	r2, [pc, #28]	; (800af54 <BSP_LED_On+0x24>)
 800af36:	4b08      	ldr	r3, [pc, #32]	; (800af58 <BSP_LED_On+0x28>)
 800af38:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 800af3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800af40:	2201      	movs	r2, #1
 800af42:	f7fc b931 	b.w	80071a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800af46:	4b04      	ldr	r3, [pc, #16]	; (800af58 <BSP_LED_On+0x28>)
 800af48:	2200      	movs	r2, #0
 800af4a:	6898      	ldr	r0, [r3, #8]
 800af4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800af50:	f7fc b92a 	b.w	80071a8 <HAL_GPIO_WritePin>
 800af54:	0801fdc4 	.word	0x0801fdc4
 800af58:	200002f0 	.word	0x200002f0

0800af5c <BSP_LED_Off>:
  if(Led == LED3) {
 800af5c:	2802      	cmp	r0, #2
 800af5e:	d008      	beq.n	800af72 <BSP_LED_Off+0x16>
  } else {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800af60:	4a07      	ldr	r2, [pc, #28]	; (800af80 <BSP_LED_Off+0x24>)
 800af62:	4b08      	ldr	r3, [pc, #32]	; (800af84 <BSP_LED_Off+0x28>)
 800af64:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 800af68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f7fc b91b 	b.w	80071a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800af72:	4b04      	ldr	r3, [pc, #16]	; (800af84 <BSP_LED_Off+0x28>)
 800af74:	2201      	movs	r2, #1
 800af76:	6898      	ldr	r0, [r3, #8]
 800af78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800af7c:	f7fc b914 	b.w	80071a8 <HAL_GPIO_WritePin>
 800af80:	0801fdc4 	.word	0x0801fdc4
 800af84:	200002f0 	.word	0x200002f0

0800af88 <BSP_LED_Toggle>:
*            @arg  LED3
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800af88:	4a03      	ldr	r2, [pc, #12]	; (800af98 <BSP_LED_Toggle+0x10>)
 800af8a:	4b04      	ldr	r3, [pc, #16]	; (800af9c <BSP_LED_Toggle+0x14>)
 800af8c:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 800af90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800af94:	f7fc b90e 	b.w	80071b4 <HAL_GPIO_TogglePin>
 800af98:	0801fdc4 	.word	0x0801fdc4
 800af9c:	200002f0 	.word	0x200002f0

0800afa0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800afa0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afa2:	2300      	movs	r3, #0
{
 800afa4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afa6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800afaa:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /* Enable VddIO2 */
  __HAL_RCC_PWR_CLK_ENABLE();
 800afae:	4c22      	ldr	r4, [pc, #136]	; (800b038 <BSP_PB_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afb0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800afb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb8:	65a3      	str	r3, [r4, #88]	; 0x58
 800afba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
{
 800afc0:	4606      	mov	r6, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 800afc2:	9301      	str	r3, [sp, #4]
 800afc4:	9b01      	ldr	r3, [sp, #4]
{
 800afc6:	460d      	mov	r5, r1
  HAL_PWREx_EnableVddIO2();
 800afc8:	f7fc fe98 	bl	8007cfc <HAL_PWREx_EnableVddIO2>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800afcc:	b946      	cbnz	r6, 800afe0 <BSP_PB_Init+0x40>
 800afce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800afd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800afd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afdc:	9302      	str	r3, [sp, #8]
 800afde:	9b02      	ldr	r3, [sp, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800afe0:	b11d      	cbz	r5, 800afea <BSP_PB_Init+0x4a>
    GPIO_InitStruct.Pull   = GPIO_NOPULL;
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;

    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  else if (ButtonMode == BUTTON_MODE_EXTI)
 800afe2:	2d01      	cmp	r5, #1
 800afe4:	d00f      	beq.n	800b006 <BSP_PB_Init+0x66>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 800afe6:	b008      	add	sp, #32
 800afe8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800afea:	4b14      	ldr	r3, [pc, #80]	; (800b03c <BSP_PB_Init+0x9c>)
 800afec:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 800aff0:	2202      	movs	r2, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800aff2:	68d8      	ldr	r0, [r3, #12]
 800aff4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode   = GPIO_MODE_INPUT;
 800aff6:	e9cd 2503 	strd	r2, r5, [sp, #12]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800affa:	e9cd 5205 	strd	r5, r2, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800affe:	f7fb ff17 	bl	8006e30 <HAL_GPIO_Init>
}
 800b002:	b008      	add	sp, #32
 800b004:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b006:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <BSP_PB_Init+0x9c>)
 800b008:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 800b00c:	2202      	movs	r2, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b00e:	68d8      	ldr	r0, [r3, #12]
 800b010:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode   = GPIO_MODE_IT_FALLING;
 800b012:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
    GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800b016:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode   = GPIO_MODE_IT_FALLING;
 800b018:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800b01c:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b020:	f7fb ff06 	bl	8006e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 800b024:	4622      	mov	r2, r4
 800b026:	210f      	movs	r1, #15
 800b028:	2007      	movs	r0, #7
 800b02a:	f7fb fe77 	bl	8006d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800b02e:	2007      	movs	r0, #7
 800b030:	f7fb feb2 	bl	8006d98 <HAL_NVIC_EnableIRQ>
}
 800b034:	b008      	add	sp, #32
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	40021000 	.word	0x40021000
 800b03c:	200002f0 	.word	0x200002f0

0800b040 <BSP_BC_CmdSend>:
 * @brief Send a single wire command to the STBC02
 * @param stbc02_SwCmd The command to be sent
 * @retval BSP status
 */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	4604      	mov	r4, r0
  uint32_t tk = STBC02_GetTick();
 800b044:	f7fb f80c 	bl	8006060 <HAL_GetTick>
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 800b048:	4d0c      	ldr	r5, [pc, #48]	; (800b07c <BSP_BC_CmdSend+0x3c>)
  uint32_t tk = STBC02_GetTick();
 800b04a:	4606      	mov	r6, r0
  stbc02_SwState = start;
 800b04c:	2301      	movs	r3, #1
  
  /* Start the time base */
  HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 800b04e:	1d28      	adds	r0, r5, #4
  stbc02_SwCmdSel = stbc02_SwCmd;
 800b050:	702c      	strb	r4, [r5, #0]
  stbc02_SwState = start;
 800b052:	706b      	strb	r3, [r5, #1]
  HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 800b054:	f7fe fd2a 	bl	8009aac <HAL_TIM_Base_Start_IT>
  
  
  while(stbc02_SwState != idle)
 800b058:	e004      	b.n	800b064 <BSP_BC_CmdSend+0x24>
  {
    if ( (STBC02_GetTick() - tk) > 10 )
 800b05a:	f7fb f801 	bl	8006060 <HAL_GetTick>
 800b05e:	1b80      	subs	r0, r0, r6
 800b060:	280a      	cmp	r0, #10
 800b062:	d807      	bhi.n	800b074 <BSP_BC_CmdSend+0x34>
  while(stbc02_SwState != idle)
 800b064:	786c      	ldrb	r4, [r5, #1]
 800b066:	2c00      	cmp	r4, #0
 800b068:	d1f7      	bne.n	800b05a <BSP_BC_CmdSend+0x1a>
      return BSP_ERROR_COMPONENT_FAILURE;
  }
  
  /* Stop the time base */
  HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 800b06a:	4805      	ldr	r0, [pc, #20]	; (800b080 <BSP_BC_CmdSend+0x40>)
 800b06c:	f7fe fd5c 	bl	8009b28 <HAL_TIM_Base_Stop_IT>
  
  return BSP_ERROR_NONE;
 800b070:	4620      	mov	r0, r4
}
 800b072:	bd70      	pop	{r4, r5, r6, pc}
      return BSP_ERROR_COMPONENT_FAILURE;
 800b074:	f06f 0004 	mvn.w	r0, #4
}
 800b078:	bd70      	pop	{r4, r5, r6, pc}
 800b07a:	bf00      	nop
 800b07c:	20001c04 	.word	0x20001c04
 800b080:	20001c08 	.word	0x20001c08

0800b084 <BSP_BC_GetVoltageAndLevel>:
 * @param  uint32_t *Volt battery Voltage Value
 * @param  uint32_t *BatteryLevel Battery % Level
 * @retval BSP status
 */
int32_t BSP_BC_GetVoltageAndLevel(uint32_t *Volt,uint32_t *BatteryLevel)
{
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4605      	mov	r5, r0
  static int32_t VoltageWindowInit=0;
  static uint32_t WindowVoltage[WINDOW_VOLTAGE_DIM];
  static int32_t WindowPostion =0;

  /*##-3- Start the conversion process #######################################*/
  if (HAL_ADCEx_InjectedStart(&SensorTileADC) != HAL_OK) {
 800b088:	4839      	ldr	r0, [pc, #228]	; (800b170 <BSP_BC_GetVoltageAndLevel+0xec>)
{
 800b08a:	460c      	mov	r4, r1
  if (HAL_ADCEx_InjectedStart(&SensorTileADC) != HAL_OK) {
 800b08c:	f7fb fa90 	bl	80065b0 <HAL_ADCEx_InjectedStart>
 800b090:	2800      	cmp	r0, #0
 800b092:	d166      	bne.n	800b162 <BSP_BC_GetVoltageAndLevel+0xde>
    /* Start Conversation Error */
    return BSP_ERROR_COMPONENT_FAILURE;
  }
  
  /*##-4- Wait for the end of conversion #####################################*/
  if (HAL_ADCEx_InjectedPollForConversion(&SensorTileADC, 10) != HAL_OK){
 800b094:	4836      	ldr	r0, [pc, #216]	; (800b170 <BSP_BC_GetVoltageAndLevel+0xec>)
 800b096:	210a      	movs	r1, #10
 800b098:	f7fb fad2 	bl	8006640 <HAL_ADCEx_InjectedPollForConversion>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d163      	bne.n	800b168 <BSP_BC_GetVoltageAndLevel+0xe4>
    /* End Of Conversion flag not set on time */
    return BSP_ERROR_CLOCK_FAILURE;
  }

  /* Check if the continuous conversion of Injected channel is finished */
  if ((HAL_ADC_GetState(&SensorTileADC) & HAL_ADC_STATE_INJ_EOC) == HAL_ADC_STATE_INJ_EOC) {
 800b0a0:	4833      	ldr	r0, [pc, #204]	; (800b170 <BSP_BC_GetVoltageAndLevel+0xec>)
 800b0a2:	f7fb f8d9 	bl	8006258 <HAL_ADC_GetState>
 800b0a6:	0483      	lsls	r3, r0, #18
 800b0a8:	d44f      	bmi.n	800b14a <BSP_BC_GetVoltageAndLevel+0xc6>
 800b0aa:	4932      	ldr	r1, [pc, #200]	; (800b174 <BSP_BC_GetVoltageAndLevel+0xf0>)
    /*##-5- Get the converted value of Injected channel  ########################*/
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&SensorTileADC,ADC_INJECTED_RANK_1);
  }

  Voltage = (2700 * (uint32_t)uhADCxConvertedValue) / (4095);  // [0-2.7V]
 800b0ac:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
 800b0b0:	f640 238c 	movw	r3, #2700	; 0xa8c
 800b0b4:	b292      	uxth	r2, r2
 800b0b6:	fb03 f202 	mul.w	r2, r3, r2
 800b0ba:	4b2f      	ldr	r3, [pc, #188]	; (800b178 <BSP_BC_GetVoltageAndLevel+0xf4>)
 800b0bc:	fba3 0302 	umull	r0, r3, r3, r2
 800b0c0:	1ad2      	subs	r2, r2, r3
 800b0c2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b0c6:	0adb      	lsrs	r3, r3, #11
  Voltage = ((215+100)*Voltage)/100;   // [0-4.2V]
 800b0c8:	4a2c      	ldr	r2, [pc, #176]	; (800b17c <BSP_BC_GetVoltageAndLevel+0xf8>)
 800b0ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b0ce:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
  *Volt= Voltage;

  /* We Filter the Voltage for understanding the Battery % Level */

  /* Insert the new Value */
  WindowVoltage[WindowPostion]= Voltage;
 800b0d6:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800b0d8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
  WindowPostion++;
 800b0dc:	3201      	adds	r2, #1
  Voltage = ((215+100)*Voltage)/100;   // [0-4.2V]
 800b0de:	095b      	lsrs	r3, r3, #5
  /* Control if we have reached the end */
  if(WindowPostion==WINDOW_VOLTAGE_DIM) {
 800b0e0:	2a10      	cmp	r2, #16
  *Volt= Voltage;
 800b0e2:	602b      	str	r3, [r5, #0]
  WindowPostion++;
 800b0e4:	660a      	str	r2, [r1, #96]	; 0x60
  WindowVoltage[WindowPostion]= Voltage;
 800b0e6:	6643      	str	r3, [r0, #100]	; 0x64
  if(WindowPostion==WINDOW_VOLTAGE_DIM) {
 800b0e8:	d01d      	beq.n	800b126 <BSP_BC_GetVoltageAndLevel+0xa2>
    }
    WindowPostion     =0;
  }

  /* Make the mean of latest voltage values */
  if(VoltageWindowInit){
 800b0ea:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 800b0ee:	bb0a      	cbnz	r2, 800b134 <BSP_BC_GetVoltageAndLevel+0xb0>
    Voltage= MAX_VOLTAGE;
  } else  if(Voltage < MIN_VOLTAGE) {
    Voltage= MIN_VOLTAGE;
  }

  *BatteryLevel= (((Voltage - MIN_VOLTAGE) * 100)/(MAX_VOLTAGE - MIN_VOLTAGE));
 800b0f0:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	bf38      	it	cc
 800b0f8:	4613      	movcc	r3, r2
 800b0fa:	f241 0281 	movw	r2, #4225	; 0x1081
 800b0fe:	4293      	cmp	r3, r2
 800b100:	bf28      	it	cs
 800b102:	4613      	movcs	r3, r2
 800b104:	2264      	movs	r2, #100	; 0x64
 800b106:	fb02 f303 	mul.w	r3, r2, r3
 800b10a:	f5a3 239e 	sub.w	r3, r3, #323584	; 0x4f000
 800b10e:	4a1c      	ldr	r2, [pc, #112]	; (800b180 <BSP_BC_GetVoltageAndLevel+0xfc>)
 800b110:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800b114:	fba2 1203 	umull	r1, r2, r2, r3
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800b11e:	0a52      	lsrs	r2, r2, #9
 800b120:	6022      	str	r2, [r4, #0]

  return BSP_ERROR_NONE;
 800b122:	2000      	movs	r0, #0
}
 800b124:	bd38      	pop	{r3, r4, r5, pc}
    if(VoltageWindowInit==0) {
 800b126:	f8d1 30a4 	ldr.w	r3, [r1, #164]	; 0xa4
 800b12a:	b9bb      	cbnz	r3, 800b15c <BSP_BC_GetVoltageAndLevel+0xd8>
      VoltageWindowInit =1;
 800b12c:	2201      	movs	r2, #1
 800b12e:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    WindowPostion     =0;
 800b132:	660b      	str	r3, [r1, #96]	; 0x60
  if(VoltageWindowInit){
 800b134:	4a13      	ldr	r2, [pc, #76]	; (800b184 <BSP_BC_GetVoltageAndLevel+0x100>)
    Voltage =0;
 800b136:	2300      	movs	r3, #0
 800b138:	f102 0040 	add.w	r0, r2, #64	; 0x40
      Voltage+=WindowVoltage[Counter];
 800b13c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) {
 800b140:	4290      	cmp	r0, r2
      Voltage+=WindowVoltage[Counter];
 800b142:	440b      	add	r3, r1
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) {
 800b144:	d1fa      	bne.n	800b13c <BSP_BC_GetVoltageAndLevel+0xb8>
    Voltage>>=4;
 800b146:	091b      	lsrs	r3, r3, #4
 800b148:	e7d2      	b.n	800b0f0 <BSP_BC_GetVoltageAndLevel+0x6c>
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&SensorTileADC,ADC_INJECTED_RANK_1);
 800b14a:	2108      	movs	r1, #8
 800b14c:	4808      	ldr	r0, [pc, #32]	; (800b170 <BSP_BC_GetVoltageAndLevel+0xec>)
 800b14e:	f7fb fadf 	bl	8006710 <HAL_ADCEx_InjectedGetValue>
 800b152:	4908      	ldr	r1, [pc, #32]	; (800b174 <BSP_BC_GetVoltageAndLevel+0xf0>)
 800b154:	b280      	uxth	r0, r0
 800b156:	f8a1 005e 	strh.w	r0, [r1, #94]	; 0x5e
 800b15a:	e7a7      	b.n	800b0ac <BSP_BC_GetVoltageAndLevel+0x28>
    WindowPostion     =0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	660b      	str	r3, [r1, #96]	; 0x60
  if(VoltageWindowInit){
 800b160:	e7e8      	b.n	800b134 <BSP_BC_GetVoltageAndLevel+0xb0>
    return BSP_ERROR_COMPONENT_FAILURE;
 800b162:	f06f 0004 	mvn.w	r0, #4
}
 800b166:	bd38      	pop	{r3, r4, r5, pc}
    return BSP_ERROR_CLOCK_FAILURE;
 800b168:	f06f 0008 	mvn.w	r0, #8
}
 800b16c:	bd38      	pop	{r3, r4, r5, pc}
 800b16e:	bf00      	nop
 800b170:	20001b9c 	.word	0x20001b9c
 800b174:	20001c04 	.word	0x20001c04
 800b178:	00100101 	.word	0x00100101
 800b17c:	51eb851f 	.word	0x51eb851f
 800b180:	0cdd9aa7 	.word	0x0cdd9aa7
 800b184:	20001c64 	.word	0x20001c64

0800b188 <BC_IO_SW_SEL_Init>:
 */
void BC_IO_SW_SEL_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 800b188:	4b0e      	ldr	r3, [pc, #56]	; (800b1c4 <BC_IO_SW_SEL_Init+0x3c>)
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 800b18a:	480f      	ldr	r0, [pc, #60]	; (800b1c8 <BC_IO_SW_SEL_Init+0x40>)
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 800b18c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 800b18e:	b510      	push	{r4, lr}
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 800b190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b194:	64da      	str	r2, [r3, #76]	; 0x4c
 800b196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800b198:	b086      	sub	sp, #24
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 800b19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1a0:	2200      	movs	r2, #0
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 800b1a2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 800b1a4:	2110      	movs	r1, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1a6:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1a8:	2401      	movs	r4, #1
 800b1aa:	e9cd 1401 	strd	r1, r4, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 800b1b2:	f7fb fff9 	bl	80071a8 <HAL_GPIO_WritePin>

  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 800b1b6:	4804      	ldr	r0, [pc, #16]	; (800b1c8 <BC_IO_SW_SEL_Init+0x40>)
 800b1b8:	a901      	add	r1, sp, #4
 800b1ba:	f7fb fe39 	bl	8006e30 <HAL_GPIO_Init>
}
 800b1be:	b006      	add	sp, #24
 800b1c0:	bd10      	pop	{r4, pc}
 800b1c2:	bf00      	nop
 800b1c4:	40021000 	.word	0x40021000
 800b1c8:	48001800 	.word	0x48001800

0800b1cc <BC_CmdMng>:
 * @brief Single wire command manager for the STBC02
 * @note This function have to be called every 5 us
 * @retval None
 */
void BC_CmdMng(void)
{
 800b1cc:	b510      	push	{r4, lr}
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 800b1ce:	4c33      	ldr	r4, [pc, #204]	; (800b29c <BC_CmdMng+0xd0>)
 800b1d0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
  switch (stbc02_SwState)
 800b1d4:	7862      	ldrb	r2, [r4, #1]
  TIMx_Pulse++;
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	b29b      	uxth	r3, r3
  switch (stbc02_SwState)
 800b1da:	3a01      	subs	r2, #1
  TIMx_Pulse++;
 800b1dc:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
  switch (stbc02_SwState)
 800b1e0:	2a05      	cmp	r2, #5
 800b1e2:	d812      	bhi.n	800b20a <BC_CmdMng+0x3e>
 800b1e4:	e8df f002 	tbb	[pc, r2]
 800b1e8:	03030312 	.word	0x03030312
 800b1ec:	3021      	.short	0x3021
    TIMx_PulseTCS = TIMx_Pulse + (350/5);
    stbc02_sw_state_prv = stbc02_SwState;
    stbc02_SwState = wait;
    break;
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 800b1ee:	2110      	movs	r1, #16
 800b1f0:	482b      	ldr	r0, [pc, #172]	; (800b2a0 <BC_CmdMng+0xd4>)
 800b1f2:	f7fb ffdf 	bl	80071b4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (100/5);
 800b1f6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    stbc02_sw_state_prv = stbc02_SwState;
 800b1fa:	7861      	ldrb	r1, [r4, #1]
 800b1fc:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
    TIMx_PulseTCS = TIMx_Pulse + (100/5);
 800b200:	3314      	adds	r3, #20
    stbc02_SwState = wait;
 800b202:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (100/5);
 800b204:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
    stbc02_SwState = wait;
 800b208:	7062      	strb	r2, [r4, #1]
        __NOP();
      }
    }
    break;
  }
}
 800b20a:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 800b20c:	2110      	movs	r1, #16
 800b20e:	4824      	ldr	r0, [pc, #144]	; (800b2a0 <BC_CmdMng+0xd4>)
 800b210:	f7fb ffd0 	bl	80071b4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (350/5);
 800b214:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    stbc02_sw_state_prv = stbc02_SwState;
 800b218:	7861      	ldrb	r1, [r4, #1]
 800b21a:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
    TIMx_PulseTCS = TIMx_Pulse + (350/5);
 800b21e:	3346      	adds	r3, #70	; 0x46
    stbc02_SwState = wait;
 800b220:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (350/5);
 800b222:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
    stbc02_SwState = wait;
 800b226:	7062      	strb	r2, [r4, #1]
}
 800b228:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 800b22a:	2110      	movs	r1, #16
 800b22c:	481c      	ldr	r0, [pc, #112]	; (800b2a0 <BC_CmdMng+0xd4>)
 800b22e:	f7fb ffc1 	bl	80071b4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (500/5);
 800b232:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    stbc02_sw_state_prv = stbc02_SwState;
 800b236:	7861      	ldrb	r1, [r4, #1]
 800b238:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
    TIMx_PulseTCS = TIMx_Pulse + (500/5);
 800b23c:	3364      	adds	r3, #100	; 0x64
    stbc02_SwState = wait;
 800b23e:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (500/5);
 800b240:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
    stbc02_SwState = wait;
 800b244:	7062      	strb	r2, [r4, #1]
}
 800b246:	bd10      	pop	{r4, pc}
    if ( TIMx_Pulse > TIMx_PulseTCS )
 800b248:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d2dc      	bcs.n	800b20a <BC_CmdMng+0x3e>
      if ( stbc02_sw_state_prv == stop_h )
 800b250:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800b254:	2b05      	cmp	r3, #5
 800b256:	d015      	beq.n	800b284 <BC_CmdMng+0xb8>
        if ( stbc02_sw_state_prv == pulse_h )
 800b258:	2b03      	cmp	r3, #3
 800b25a:	d006      	beq.n	800b26a <BC_CmdMng+0x9e>
        stbc02_SwState = ++stbc02_sw_state_prv;
 800b25c:	3301      	adds	r3, #1
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800b264:	7063      	strb	r3, [r4, #1]
        __NOP();
 800b266:	bf00      	nop
}
 800b268:	bd10      	pop	{r4, pc}
          CmdPulse++;
 800b26a:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
          if ( CmdPulse < stbc02_SwCmdSel )
 800b26e:	7822      	ldrb	r2, [r4, #0]
          CmdPulse++;
 800b270:	3301      	adds	r3, #1
 800b272:	b2db      	uxtb	r3, r3
          if ( CmdPulse < stbc02_SwCmdSel )
 800b274:	429a      	cmp	r2, r3
          CmdPulse++;
 800b276:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
          if ( CmdPulse < stbc02_SwCmdSel )
 800b27a:	d80d      	bhi.n	800b298 <BC_CmdMng+0xcc>
            __NOP();
 800b27c:	bf00      	nop
        stbc02_SwState = ++stbc02_sw_state_prv;
 800b27e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800b282:	e7eb      	b.n	800b25c <BC_CmdMng+0x90>
        CmdPulse = 0;
 800b284:	2200      	movs	r2, #0
 800b286:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
        stbc02_SwState = idle;
 800b28a:	7062      	strb	r2, [r4, #1]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 800b28c:	4804      	ldr	r0, [pc, #16]	; (800b2a0 <BC_CmdMng+0xd4>)
}
 800b28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 800b292:	2110      	movs	r1, #16
 800b294:	f7fb bf88 	b.w	80071a8 <HAL_GPIO_WritePin>
 800b298:	2302      	movs	r3, #2
 800b29a:	e7e1      	b.n	800b260 <BC_CmdMng+0x94>
 800b29c:	20001c04 	.word	0x20001c04
 800b2a0:	48001800 	.word	0x48001800
 800b2a4:	00000000 	.word	0x00000000

0800b2a8 <BC_TIMx_Init>:
/**
 * @brief  Initializes the used timer
 * @retval None
 */
void BC_TIMx_Init(void)
{
 800b2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2aa:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b2b2:	9303      	str	r3, [sp, #12]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 800b2b4:	f7fd fa5c 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 800b2b8:	4b2b      	ldr	r3, [pc, #172]	; (800b368 <BC_TIMx_Init+0xc0>)
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	055b      	lsls	r3, r3, #21
 800b2be:	4605      	mov	r5, r0
 800b2c0:	bf48      	it	mi
 800b2c2:	0045      	lslmi	r5, r0, #1
  uint32_t prescaler = 0;
  uint32_t period = 0;
  
  do {
    prescaler++;
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f7f5 f945 	bl	8000554 <__aeabi_ui2d>
 800b2ca:	a325      	add	r3, pc, #148	; (adr r3, 800b360 <BC_TIMx_Init+0xb8>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f7f5 f9ba 	bl	8000648 <__aeabi_dmul>
 800b2d4:	f7f5 fc90 	bl	8000bf8 <__aeabi_d2uiz>
 800b2d8:	a721      	add	r7, pc, #132	; (adr r7, 800b360 <BC_TIMx_Init+0xb8>)
 800b2da:	e9d7 6700 	ldrd	r6, r7, [r7]
    prescaler++;
 800b2de:	2401      	movs	r4, #1
 800b2e0:	e00c      	b.n	800b2fc <BC_TIMx_Init+0x54>
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 800b2e2:	fbb5 f0f4 	udiv	r0, r5, r4
 800b2e6:	f7f5 f935 	bl	8000554 <__aeabi_ui2d>
 800b2ea:	4632      	mov	r2, r6
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	f7f5 f9ab 	bl	8000648 <__aeabi_dmul>
 800b2f2:	f7f5 fc81 	bl	8000bf8 <__aeabi_d2uiz>
    if (prescaler > 65535) {
 800b2f6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800b2fa:	d025      	beq.n	800b348 <BC_TIMx_Init+0xa0>
      while(1);
    }
  } while (period > 65535);
 800b2fc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b300:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    prescaler++;
 800b304:	f104 0401 	add.w	r4, r4, #1
  } while (period > 65535);
 800b308:	d2eb      	bcs.n	800b2e2 <BC_TIMx_Init+0x3a>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 800b30a:	4c18      	ldr	r4, [pc, #96]	; (800b36c <BC_TIMx_Init+0xc4>)
 800b30c:	4a18      	ldr	r2, [pc, #96]	; (800b370 <BC_TIMx_Init+0xc8>)
 800b30e:	6062      	str	r2, [r4, #4]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1);
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b310:	2200      	movs	r2, #0
 800b312:	e9c4 3202 	strd	r3, r2, [r4, #8]
void BC_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{

  if(htim->Instance==STBC02_USED_TIM) {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 800b316:	4d14      	ldr	r5, [pc, #80]	; (800b368 <BC_TIMx_Init+0xc0>)
  hstbc02_UsedTim.Init.Period = period;
 800b318:	6120      	str	r0, [r4, #16]
    STBC02_USED_TIM_CLK_ENABLE();
 800b31a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b31c:	f043 0320 	orr.w	r3, r3, #32
 800b320:	65ab      	str	r3, [r5, #88]	; 0x58
 800b322:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b324:	f003 0320 	and.w	r3, r3, #32

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 800b328:	2103      	movs	r1, #3
    STBC02_USED_TIM_CLK_ENABLE();
 800b32a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 800b32c:	2037      	movs	r0, #55	; 0x37
    STBC02_USED_TIM_CLK_ENABLE();
 800b32e:	9b00      	ldr	r3, [sp, #0]
  if (HAL_TIM_Base_Init(&hstbc02_UsedTim) != HAL_OK) {
 800b330:	3404      	adds	r4, #4
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 800b332:	f7fb fcf3 	bl	8006d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 800b336:	2037      	movs	r0, #55	; 0x37
 800b338:	f7fb fd2e 	bl	8006d98 <HAL_NVIC_EnableIRQ>
  if (HAL_TIM_Base_Init(&hstbc02_UsedTim) != HAL_OK) {
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7fe fe8d 	bl	800a05c <HAL_TIM_Base_Init>
 800b342:	4603      	mov	r3, r0
 800b344:	b108      	cbz	r0, 800b34a <BC_TIMx_Init+0xa2>
    while(1);
 800b346:	e7fe      	b.n	800b346 <BC_TIMx_Init+0x9e>
      while(1);
 800b348:	e7fe      	b.n	800b348 <BC_TIMx_Init+0xa0>
  if (HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig) != HAL_OK) {
 800b34a:	a901      	add	r1, sp, #4
 800b34c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b34e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b350:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig) != HAL_OK) {
 800b352:	f7fe ff73 	bl	800a23c <HAL_TIMEx_MasterConfigSynchronization>
 800b356:	b100      	cbz	r0, 800b35a <BC_TIMx_Init+0xb2>
    while(1);
 800b358:	e7fe      	b.n	800b358 <BC_TIMx_Init+0xb0>
}
 800b35a:	b005      	add	sp, #20
 800b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35e:	bf00      	nop
 800b360:	88e368f1 	.word	0x88e368f1
 800b364:	3ed4f8b5 	.word	0x3ed4f8b5
 800b368:	40021000 	.word	0x40021000
 800b36c:	20001c04 	.word	0x20001c04
 800b370:	40001400 	.word	0x40001400

0800b374 <BSP_BC_Init>:
{
 800b374:	b508      	push	{r3, lr}
  stbc02_ChgPinFreq = 0;
 800b376:	4b04      	ldr	r3, [pc, #16]	; (800b388 <BSP_BC_Init+0x14>)
 800b378:	2200      	movs	r2, #0
 800b37a:	655a      	str	r2, [r3, #84]	; 0x54
  BC_TIMx_Init();
 800b37c:	f7ff ff94 	bl	800b2a8 <BC_TIMx_Init>
}
 800b380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BC_IO_SW_SEL_Init();
 800b384:	f7ff bf00 	b.w	800b188 <BC_IO_SW_SEL_Init>
 800b388:	20001c04 	.word	0x20001c04

0800b38c <HAL_ADC_BC_MspInit>:
 * @brief  Initialize the ADC MSP.
 * @param BC_AdcHandle ADC handle
 * @retval None
 */
void HAL_ADC_BC_MspInit(void)
{
 800b38c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b38e:	2200      	movs	r2, #0
{
 800b390:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b392:	e9cd 2203 	strd	r2, r2, [sp, #12]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 800b396:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <HAL_ADC_BC_MspInit+0x34>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b398:	9205      	str	r2, [sp, #20]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 800b39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 800b39c:	4809      	ldr	r0, [pc, #36]	; (800b3c4 <HAL_ADC_BC_MspInit+0x38>)
  STBC02_BATMS_GPIO_CLK_ENABLE();
 800b39e:	f042 0204 	orr.w	r2, r2, #4
 800b3a2:	64da      	str	r2, [r3, #76]	; 0x4c
 800b3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a6:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 800b3aa:	220b      	movs	r2, #11
  STBC02_BATMS_GPIO_CLK_ENABLE();
 800b3ac:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 800b3ae:	2410      	movs	r4, #16
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 800b3b0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 800b3b2:	e9cd 4201 	strd	r4, r2, [sp, #4]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 800b3b6:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 800b3b8:	f7fb fd3a 	bl	8006e30 <HAL_GPIO_Init>
}
 800b3bc:	b006      	add	sp, #24
 800b3be:	bd10      	pop	{r4, pc}
 800b3c0:	40021000 	.word	0x40021000
 800b3c4:	48000800 	.word	0x48000800

0800b3c8 <BSP_BC_BatMS_Init>:
{
 800b3c8:	b500      	push	{lr}
  BSP_ADC1_Initialization(ADC1_FOR_BC);
 800b3ca:	2002      	movs	r0, #2
{
 800b3cc:	b08f      	sub	sp, #60	; 0x3c
  BSP_ADC1_Initialization(ADC1_FOR_BC);
 800b3ce:	f7ff fcdd 	bl	800ad8c <BSP_ADC1_Initialization>
 * @retval 0 in case of success
 * @retval 1 in case of failure
 */
static uint8_t Channel_ADC1_Init(void)
{ 
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800b3d2:	2234      	movs	r2, #52	; 0x34
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	a801      	add	r0, sp, #4
 800b3d8:	f010 f9aa 	bl	801b730 <memset>
  uint32_t PausedADC=0;

  /* Check if the ADC is running and Stop it for Injection Channel configuration */
  if (HAL_ADC_GetState(&SensorTileADC) & HAL_ADC_STATE_REG_BUSY) {
 800b3dc:	4826      	ldr	r0, [pc, #152]	; (800b478 <BSP_BC_BatMS_Init+0xb0>)
 800b3de:	f7fa ff3b 	bl	8006258 <HAL_ADC_GetState>
 800b3e2:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b3e6:	d11e      	bne.n	800b426 <BSP_BC_BatMS_Init+0x5e>
    HAL_ADC_Stop(&SensorTileADC);
    PausedADC=1;
  }

  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = STBC02_USED_ADC_CHANNEL;
 800b3e8:	4a24      	ldr	r2, [pc, #144]	; (800b47c <BSP_BC_BatMS_Init+0xb4>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800b3ea:	f8ad 0020 	strh.w	r0, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800b3ee:	2308      	movs	r3, #8
 800b3f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800b3f4:	2107      	movs	r1, #7
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800b3f6:	237f      	movs	r3, #127	; 0x7f
 800b3f8:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800b3fc:	2204      	movs	r2, #4
  sConfigInjected.InjectedNbrOfConversion = 1;
 800b3fe:	2301      	movs	r3, #1
  sConfigInjected.InjectedOffset = 0;
 800b400:	e9cd 2005 	strd	r2, r0, [sp, #20]
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 800b404:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  sConfigInjected.QueueInjectedContext = DISABLE;
 800b408:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800b40c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
  sConfigInjected.InjectedNbrOfConversion = 1;
 800b410:	9307      	str	r3, [sp, #28]

  HAL_ADC_BC_MspInit();
 800b412:	f7ff ffbb 	bl	800b38c <HAL_ADC_BC_MspInit>

  if (HAL_ADCEx_InjectedConfigChannel(&SensorTileADC, &sConfigInjected) != HAL_OK) {
 800b416:	4818      	ldr	r0, [pc, #96]	; (800b478 <BSP_BC_BatMS_Init+0xb0>)
 800b418:	a901      	add	r1, sp, #4
 800b41a:	f7fb f993 	bl	8006744 <HAL_ADCEx_InjectedConfigChannel>
}
 800b41e:	2000      	movs	r0, #0
 800b420:	b00f      	add	sp, #60	; 0x3c
 800b422:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_ADC_Stop(&SensorTileADC);
 800b426:	4814      	ldr	r0, [pc, #80]	; (800b478 <BSP_BC_BatMS_Init+0xb0>)
 800b428:	f7fb f852 	bl	80064d0 <HAL_ADC_Stop>
  sConfigInjected.InjectedChannel = STBC02_USED_ADC_CHANNEL;
 800b42c:	4913      	ldr	r1, [pc, #76]	; (800b47c <BSP_BC_BatMS_Init+0xb4>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800b42e:	2208      	movs	r2, #8
 800b430:	e9cd 1201 	strd	r1, r2, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800b434:	2007      	movs	r0, #7
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800b436:	227f      	movs	r2, #127	; 0x7f
  sConfigInjected.InjectedOffset = 0;
 800b438:	2300      	movs	r3, #0
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800b43a:	e9cd 0203 	strd	r0, r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800b43e:	2104      	movs	r1, #4
  sConfigInjected.InjectedNbrOfConversion = 1;
 800b440:	2201      	movs	r2, #1
  sConfigInjected.InjectedOffset = 0;
 800b442:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 800b446:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sConfigInjected.InjectedNbrOfConversion = 1;
 800b44a:	9207      	str	r2, [sp, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800b44c:	f8ad 3020 	strh.w	r3, [sp, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 800b450:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800b454:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  HAL_ADC_BC_MspInit();
 800b458:	f7ff ff98 	bl	800b38c <HAL_ADC_BC_MspInit>
  if (HAL_ADCEx_InjectedConfigChannel(&SensorTileADC, &sConfigInjected) != HAL_OK) {
 800b45c:	4806      	ldr	r0, [pc, #24]	; (800b478 <BSP_BC_BatMS_Init+0xb0>)
 800b45e:	a901      	add	r1, sp, #4
 800b460:	f7fb f970 	bl	8006744 <HAL_ADCEx_InjectedConfigChannel>
 800b464:	2800      	cmp	r0, #0
 800b466:	d1da      	bne.n	800b41e <BSP_BC_BatMS_Init+0x56>
    return 1;
  }

  /* Restart ADC if it was stopped before Injection Channel configuration */
  if (PausedADC) {
    HAL_ADC_Start(&SensorTileADC);
 800b468:	4803      	ldr	r0, [pc, #12]	; (800b478 <BSP_BC_BatMS_Init+0xb0>)
 800b46a:	f7fa ffb7 	bl	80063dc <HAL_ADC_Start>
}
 800b46e:	2000      	movs	r0, #0
 800b470:	b00f      	add	sp, #60	; 0x3c
 800b472:	f85d fb04 	ldr.w	pc, [sp], #4
 800b476:	bf00      	nop
 800b478:	20001b9c 	.word	0x20001b9c
 800b47c:	36902000 	.word	0x36902000

0800b480 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == STBC02_USED_TIM) {
 800b480:	4b03      	ldr	r3, [pc, #12]	; (800b490 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800b482:	6802      	ldr	r2, [r0, #0]
 800b484:	429a      	cmp	r2, r3
 800b486:	d000      	beq.n	800b48a <HAL_TIM_PeriodElapsedCallback+0xa>
    BC_CmdMng();
  }
}
 800b488:	4770      	bx	lr
    BC_CmdMng();
 800b48a:	f7ff be9f 	b.w	800b1cc <BC_CmdMng>
 800b48e:	bf00      	nop
 800b490:	40001400 	.word	0x40001400

0800b494 <TIM7_IRQHandler>:
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <TIM7_IRQHandler+0x8>)
 800b496:	f7fe bcc1 	b.w	8009e1c <HAL_TIM_IRQHandler>
 800b49a:	bf00      	nop
 800b49c:	20001c08 	.word	0x20001c08

0800b4a0 <BSP_SPI1_DeInit>:
}

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
  /* Peripheral clock disable */
  __HAL_RCC_SPI1_CLK_DISABLE();
 800b4a0:	4a09      	ldr	r2, [pc, #36]	; (800b4c8 <BSP_SPI1_DeInit+0x28>)
  /**SPI1 GPIO Configuration    
  PE13     ------> SPI1_SCK
  PE15     ------> SPI1_MOSI
  PE14     ------> SPI1_MISO 
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14);
 800b4a2:	480a      	ldr	r0, [pc, #40]	; (800b4cc <BSP_SPI1_DeInit+0x2c>)
{
 800b4a4:	b508      	push	{r3, lr}
  __HAL_RCC_SPI1_CLK_DISABLE();
 800b4a6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800b4a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14);
 800b4ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_SPI1_CLK_DISABLE();
 800b4b0:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14);
 800b4b2:	f7fb fdc5 	bl	8007040 <HAL_GPIO_DeInit>
  if (HAL_SPI_DeInit(&hbusspi1) == HAL_OK) {
 800b4b6:	4806      	ldr	r0, [pc, #24]	; (800b4d0 <BSP_SPI1_DeInit+0x30>)
 800b4b8:	f7fd fed6 	bl	8009268 <HAL_SPI_DeInit>
    ret = BSP_ERROR_NONE;
 800b4bc:	2800      	cmp	r0, #0
}
 800b4be:	bf14      	ite	ne
 800b4c0:	f06f 0007 	mvnne.w	r0, #7
 800b4c4:	2000      	moveq	r0, #0
 800b4c6:	bd08      	pop	{r3, pc}
 800b4c8:	40021000 	.word	0x40021000
 800b4cc:	48001000 	.word	0x48001000
 800b4d0:	20001d4c 	.word	0x20001d4c

0800b4d4 <BSP_SPI1_Send>:
{
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi1, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800b4d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800b4dc:	4601      	mov	r1, r0
  if(HAL_SPI_Transmit(&hbusspi1, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800b4de:	4622      	mov	r2, r4
 800b4e0:	4804      	ldr	r0, [pc, #16]	; (800b4f4 <BSP_SPI1_Send+0x20>)
 800b4e2:	f7fd fed7 	bl	8009294 <HAL_SPI_Transmit>
      ret = len;
 800b4e6:	2800      	cmp	r0, #0
}
 800b4e8:	bf0c      	ite	eq
 800b4ea:	4620      	moveq	r0, r4
 800b4ec:	f06f 0005 	mvnne.w	r0, #5
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20001d4c 	.word	0x20001d4c

0800b4f8 <BSP_SPI1_Recv>:
{
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
  if(HAL_SPI_Receive(&hbusspi1, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800b4fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800b500:	4601      	mov	r1, r0
  if(HAL_SPI_Receive(&hbusspi1, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800b502:	4622      	mov	r2, r4
 800b504:	4804      	ldr	r0, [pc, #16]	; (800b518 <BSP_SPI1_Recv+0x20>)
 800b506:	f7fe f8f3 	bl	80096f0 <HAL_SPI_Receive>
      ret = len;
 800b50a:	2800      	cmp	r0, #0
}
 800b50c:	bf0c      	ite	eq
 800b50e:	4620      	moveq	r0, r4
 800b510:	f06f 0005 	mvnne.w	r0, #5
 800b514:	bd10      	pop	{r4, pc}
 800b516:	bf00      	nop
 800b518:	20001d4c 	.word	0x20001d4c

0800b51c <BSP_SPI2_SendRecv>:
{
 800b51c:	b510      	push	{r4, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	4614      	mov	r4, r2
 800b522:	4684      	mov	ip, r0
  if(HAL_SPI_TransmitReceive(&hbusspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK) {
 800b524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800b528:	460a      	mov	r2, r1
  if(HAL_SPI_TransmitReceive(&hbusspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK) {
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	4661      	mov	r1, ip
 800b52e:	4623      	mov	r3, r4
 800b530:	4804      	ldr	r0, [pc, #16]	; (800b544 <BSP_SPI2_SendRecv+0x28>)
 800b532:	f7fd ff91 	bl	8009458 <HAL_SPI_TransmitReceive>
      ret = len;
 800b536:	2800      	cmp	r0, #0
}
 800b538:	bf0c      	ite	eq
 800b53a:	4620      	moveq	r0, r4
 800b53c:	f06f 0005 	mvnne.w	r0, #5
 800b540:	b002      	add	sp, #8
 800b542:	bd10      	pop	{r4, pc}
 800b544:	20001db0 	.word	0x20001db0

0800b548 <BSP_GetTick>:
  return HAL_GetTick();
 800b548:	f7fa bd8a 	b.w	8006060 <HAL_GetTick>

0800b54c <MX_SPI1_Init>:
{
 800b54c:	b510      	push	{r4, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 800b54e:	4c0f      	ldr	r4, [pc, #60]	; (800b58c <MX_SPI1_Init+0x40>)
 800b550:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800b554:	2200      	movs	r2, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 800b556:	e9c0 4100 	strd	r4, r1, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800b55a:	f44f 64e0 	mov.w	r4, #1792	; 0x700
  hspi->Init.NSS = SPI_NSS_SOFT;
 800b55e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800b562:	e9c0 2402 	strd	r2, r4, [r0, #8]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800b566:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b568:	2418      	movs	r4, #24
  hspi->Init.CRCPolynomial = 7;
 800b56a:	2107      	movs	r1, #7
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800b56c:	e9c0 2204 	strd	r2, r2, [r0, #16]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b570:	e9c0 4207 	strd	r4, r2, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b574:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b578:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b57c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800b57e:	f7fd fdf5 	bl	800916c <HAL_SPI_Init>
}
 800b582:	3800      	subs	r0, #0
 800b584:	bf18      	it	ne
 800b586:	2001      	movne	r0, #1
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	bf00      	nop
 800b58c:	40013000 	.word	0x40013000

0800b590 <BSP_SPI1_Init>:
{
 800b590:	b530      	push	{r4, r5, lr}
  hbusspi1.Instance  = SPI1;
 800b592:	4c1a      	ldr	r4, [pc, #104]	; (800b5fc <BSP_SPI1_Init+0x6c>)
 800b594:	4b1a      	ldr	r3, [pc, #104]	; (800b600 <BSP_SPI1_Init+0x70>)
 800b596:	f844 3f98 	str.w	r3, [r4, #152]!
{
 800b59a:	b089      	sub	sp, #36	; 0x24
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7fe f963 	bl	8009868 <HAL_SPI_GetState>
 800b5a2:	b110      	cbz	r0, 800b5aa <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800b5a4:	2000      	movs	r0, #0
}
 800b5a6:	b009      	add	sp, #36	; 0x24
 800b5a8:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 800b5aa:	4b16      	ldr	r3, [pc, #88]	; (800b604 <BSP_SPI1_Init+0x74>)
 800b5ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b5ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5b2:	661a      	str	r2, [r3, #96]	; 0x60
 800b5b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b5b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b5ba:	9201      	str	r2, [sp, #4]
 800b5bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b5be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5c0:	f042 0210 	orr.w	r2, r2, #16
 800b5c4:	64da      	str	r2, [r3, #76]	; 0x4c
 800b5c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5c8:	9005      	str	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b5ca:	f003 0310 	and.w	r3, r3, #16
 800b5ce:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 800b5d0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5da:	480b      	ldr	r0, [pc, #44]	; (800b608 <BSP_SPI1_Init+0x78>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b5dc:	9d02      	ldr	r5, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b5de:	2203      	movs	r2, #3
 800b5e0:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5e2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b5e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5e8:	f7fb fc22 	bl	8006e30 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f7ff ffad 	bl	800b54c <MX_SPI1_Init>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d0d6      	beq.n	800b5a4 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 800b5f6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800b5fa:	e7d4      	b.n	800b5a6 <BSP_SPI1_Init+0x16>
 800b5fc:	20001cb4 	.word	0x20001cb4
 800b600:	40013000 	.word	0x40013000
 800b604:	40021000 	.word	0x40021000
 800b608:	48001000 	.word	0x48001000

0800b60c <MX_SPI2_Init>:
}

/* SPI2 init function */ 
__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 800b60c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI2;
  hspi->Init.Mode = SPI_MODE_MASTER;
 800b60e:	4c0f      	ldr	r4, [pc, #60]	; (800b64c <MX_SPI2_Init+0x40>)
 800b610:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800b614:	2200      	movs	r2, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 800b616:	e9c0 4100 	strd	r4, r1, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800b61a:	f44f 64e0 	mov.w	r4, #1792	; 0x700
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800b61e:	2101      	movs	r1, #1
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800b620:	e9c0 2402 	strd	r2, r4, [r0, #8]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800b624:	e9c0 2104 	strd	r2, r1, [r0, #16]
  hspi->Init.NSS = SPI_NSS_SOFT;
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800b628:	f44f 7400 	mov.w	r4, #512	; 0x200
 800b62c:	2130      	movs	r1, #48	; 0x30
 800b62e:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 800b632:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800b634:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCPolynomial = 7;
 800b638:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b63c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800b640:	f7fd fd94 	bl	800916c <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 800b644:	3800      	subs	r0, #0
 800b646:	bf18      	it	ne
 800b648:	2001      	movne	r0, #1
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	40003800 	.word	0x40003800

0800b650 <BSP_SPI2_Init>:
{
 800b650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  hbusspi2.Instance  = SPI2;
 800b654:	4e2a      	ldr	r6, [pc, #168]	; (800b700 <BSP_SPI2_Init+0xb0>)
 800b656:	4b2b      	ldr	r3, [pc, #172]	; (800b704 <BSP_SPI2_Init+0xb4>)
 800b658:	4635      	mov	r5, r6
{
 800b65a:	b089      	sub	sp, #36	; 0x24
  hbusspi2.Instance  = SPI2;
 800b65c:	f845 3ffc 	str.w	r3, [r5, #252]!
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 800b660:	4628      	mov	r0, r5
 800b662:	f7fe f901 	bl	8009868 <HAL_SPI_GetState>
 800b666:	b148      	cbz	r0, 800b67c <BSP_SPI2_Init+0x2c>
  int32_t ret = BSP_ERROR_NONE;
 800b668:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE(&hbusspi2);
 800b66a:	f8d6 20fc 	ldr.w	r2, [r6, #252]	; 0xfc
 800b66e:	6813      	ldr	r3, [r2, #0]
 800b670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b674:	6013      	str	r3, [r2, #0]
}
 800b676:	b009      	add	sp, #36	; 0x24
 800b678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Enable Peripheral clock */
  __HAL_RCC_SPI2_CLK_ENABLE();
 800b67c:	4b22      	ldr	r3, [pc, #136]	; (800b708 <BSP_SPI2_Init+0xb8>)
 800b67e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b684:	659a      	str	r2, [r3, #88]	; 0x58
 800b686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b688:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b68c:	9200      	str	r2, [sp, #0]
 800b68e:	9a00      	ldr	r2, [sp, #0]
  /**SPI2 GPIO Configuration    
  PD1      ------> SPI2_SCK
  PC3      ------> SPI2_MOSI
  PD3      ------> SPI2_MISO 
  */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b692:	f042 0204 	orr.w	r2, r2, #4
 800b696:	64da      	str	r2, [r3, #76]	; 0x4c
 800b698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b69a:	f002 0204 	and.w	r2, r2, #4
 800b69e:	9201      	str	r2, [sp, #4]
 800b6a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b6a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6a4:	f042 0208 	orr.w	r2, r2, #8
 800b6a8:	64da      	str	r2, [r3, #76]	; 0x4c
 800b6aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ac:	9005      	str	r0, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b6ae:	f003 0308 	and.w	r3, r3, #8
 800b6b2:	9302      	str	r3, [sp, #8]
 800b6b4:	4604      	mov	r4, r0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6b6:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6ba:	4814      	ldr	r0, [pc, #80]	; (800b70c <BSP_SPI2_Init+0xbc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6bc:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6c0:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800b6c4:	230a      	movs	r3, #10
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b6c6:	2705      	movs	r7, #5
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6c8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800b6ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6cc:	f8cd 8018 	str.w	r8, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b6d0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b6d2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6d4:	f7fb fbac 	bl	8006e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;  
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6d8:	480d      	ldr	r0, [pc, #52]	; (800b710 <BSP_SPI2_Init+0xc0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6da:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b6de:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6e0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e2:	e9cd 9404 	strd	r9, r4, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;  
 800b6e6:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b6e8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6ea:	f7fb fba1 	bl	8006e30 <HAL_GPIO_Init>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7ff ff8c 	bl	800b60c <MX_SPI2_Init>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d0b7      	beq.n	800b668 <BSP_SPI2_Init+0x18>
      ret = BSP_ERROR_BUS_FAILURE;
 800b6f8:	f06f 0007 	mvn.w	r0, #7
 800b6fc:	e7b5      	b.n	800b66a <BSP_SPI2_Init+0x1a>
 800b6fe:	bf00      	nop
 800b700:	20001cb4 	.word	0x20001cb4
 800b704:	40003800 	.word	0x40003800
 800b708:	40021000 	.word	0x40021000
 800b70c:	48000c00 	.word	0x48000c00
 800b710:	48000800 	.word	0x48000800

0800b714 <BSP_LSM6DSOX_WriteReg>:

  return ret;
}

static int32_t BSP_LSM6DSOX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800b714:	b530      	push	{r4, r5, lr}
 800b716:	b083      	sub	sp, #12
 800b718:	468c      	mov	ip, r1
 800b71a:	4615      	mov	r5, r2
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b71c:	4811      	ldr	r0, [pc, #68]	; (800b764 <BSP_LSM6DSOX_WriteReg+0x50>)
  uint8_t dataReg = (uint8_t)Reg;
 800b71e:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b722:	2200      	movs	r2, #0
 800b724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 800b728:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b72a:	f7fb fd3d 	bl	80071a8 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800b72e:	2101      	movs	r1, #1
 800b730:	f10d 0007 	add.w	r0, sp, #7
 800b734:	f7ff fece 	bl	800b4d4 <BSP_SPI1_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI1_Send(pdata, len) != len)
 800b738:	4621      	mov	r1, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b73a:	2801      	cmp	r0, #1
  if (BSP_SPI1_Send(pdata, len) != len)
 800b73c:	4628      	mov	r0, r5
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b73e:	bf14      	ite	ne
 800b740:	f06f 0505 	mvnne.w	r5, #5
 800b744:	2500      	moveq	r5, #0
  if (BSP_SPI1_Send(pdata, len) != len)
 800b746:	f7ff fec5 	bl	800b4d4 <BSP_SPI1_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b74a:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b74c:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b74e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b752:	4804      	ldr	r0, [pc, #16]	; (800b764 <BSP_LSM6DSOX_WriteReg+0x50>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b754:	bf18      	it	ne
 800b756:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b75a:	f7fb fd25 	bl	80071a8 <HAL_GPIO_WritePin>

  return ret;
}
 800b75e:	4628      	mov	r0, r5
 800b760:	b003      	add	sp, #12
 800b762:	bd30      	pop	{r4, r5, pc}
 800b764:	48001000 	.word	0x48001000

0800b768 <BSP_LSM6DSOX_ReadReg>:

static int32_t BSP_LSM6DSOX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800b768:	b530      	push	{r4, r5, lr}
 800b76a:	b083      	sub	sp, #12
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  dataReg |= 0x80;
 800b76c:	f061 017f 	orn	r1, r1, #127	; 0x7f
{
 800b770:	4615      	mov	r5, r2
  dataReg |= 0x80;
 800b772:	f88d 1007 	strb.w	r1, [sp, #7]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b776:	2200      	movs	r2, #0
 800b778:	4810      	ldr	r0, [pc, #64]	; (800b7bc <BSP_LSM6DSOX_ReadReg+0x54>)
 800b77a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 800b77e:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b780:	f7fb fd12 	bl	80071a8 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800b784:	2101      	movs	r1, #1
 800b786:	f10d 0007 	add.w	r0, sp, #7
 800b78a:	f7ff fea3 	bl	800b4d4 <BSP_SPI1_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI1_Recv(pdata, len) != len)
 800b78e:	4621      	mov	r1, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b790:	2801      	cmp	r0, #1
  if (BSP_SPI1_Recv(pdata, len) != len)
 800b792:	4628      	mov	r0, r5
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b794:	bf14      	ite	ne
 800b796:	f06f 0505 	mvnne.w	r5, #5
 800b79a:	2500      	moveq	r5, #0
  if (BSP_SPI1_Recv(pdata, len) != len)
 800b79c:	f7ff feac 	bl	800b4f8 <BSP_SPI1_Recv>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b7a0:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b7a2:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b7a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b7a8:	4804      	ldr	r0, [pc, #16]	; (800b7bc <BSP_LSM6DSOX_ReadReg+0x54>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b7aa:	bf18      	it	ne
 800b7ac:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b7b0:	f7fb fcfa 	bl	80071a8 <HAL_GPIO_WritePin>

  return ret;
}
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	b003      	add	sp, #12
 800b7b8:	bd30      	pop	{r4, r5, pc}
 800b7ba:	bf00      	nop
 800b7bc:	48001000 	.word	0x48001000

0800b7c0 <BSP_LSM6DSOX_DeInit>:
{
 800b7c0:	b508      	push	{r3, lr}
  if(BSP_SPI1_DeInit() == BSP_ERROR_NONE)
 800b7c2:	f7ff fe6d 	bl	800b4a0 <BSP_SPI1_DeInit>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b7c6:	2800      	cmp	r0, #0
}
 800b7c8:	bf18      	it	ne
 800b7ca:	f06f 0005 	mvnne.w	r0, #5
 800b7ce:	bd08      	pop	{r3, pc}

0800b7d0 <BSP_LSM6DSOX_Init>:
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800b7d0:	4b12      	ldr	r3, [pc, #72]	; (800b81c <BSP_LSM6DSOX_Init+0x4c>)
  HAL_GPIO_Init(BSP_LSM6DSOX_CS_PORT, &GPIO_InitStruct);
 800b7d2:	4813      	ldr	r0, [pc, #76]	; (800b820 <BSP_LSM6DSOX_Init+0x50>)
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800b7d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
{  
 800b7d6:	b530      	push	{r4, r5, lr}
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800b7d8:	f041 0110 	orr.w	r1, r1, #16
 800b7dc:	64d9      	str	r1, [r3, #76]	; 0x4c
 800b7de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{  
 800b7e0:	b087      	sub	sp, #28
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800b7e2:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7e6:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  
 800b7e8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = BSP_LSM6DSOX_CS_PIN;
 800b7ea:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800b7ee:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(BSP_LSM6DSOX_CS_PORT, &GPIO_InitStruct);
 800b7f0:	a901      	add	r1, sp, #4
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800b7f2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f4:	e9cd 2203 	strd	r2, r2, [sp, #12]
  GPIO_InitStruct.Pin = BSP_LSM6DSOX_CS_PIN;
 800b7f8:	e9cd 4501 	strd	r4, r5, [sp, #4]
  HAL_GPIO_Init(BSP_LSM6DSOX_CS_PORT, &GPIO_InitStruct);
 800b7fc:	f7fb fb18 	bl	8006e30 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b800:	462a      	mov	r2, r5
 800b802:	4621      	mov	r1, r4
 800b804:	4806      	ldr	r0, [pc, #24]	; (800b820 <BSP_LSM6DSOX_Init+0x50>)
 800b806:	f7fb fccf 	bl	80071a8 <HAL_GPIO_WritePin>
  if(BSP_SPI1_Init() == BSP_ERROR_NONE)
 800b80a:	f7ff fec1 	bl	800b590 <BSP_SPI1_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b80e:	2800      	cmp	r0, #0
}
 800b810:	bf18      	it	ne
 800b812:	f06f 0005 	mvnne.w	r0, #5
 800b816:	b007      	add	sp, #28
 800b818:	bd30      	pop	{r4, r5, pc}
 800b81a:	bf00      	nop
 800b81c:	40021000 	.word	0x40021000
 800b820:	48001000 	.word	0x48001000

0800b824 <BSP_MOTION_SENSOR_Init>:
{
 800b824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	b090      	sub	sp, #64	; 0x40
  switch (Instance)
 800b82a:	2800      	cmp	r0, #0
 800b82c:	f040 809d 	bne.w	800b96a <BSP_MOTION_SENSOR_Init+0x146>
  io_ctx.BusType     = LSM6DSOX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800b830:	2301      	movs	r3, #1
  io_ctx.Init        = BSP_LSM6DSOX_Init;
 800b832:	4a51      	ldr	r2, [pc, #324]	; (800b978 <BSP_MOTION_SENSOR_Init+0x154>)
  io_ctx.BusType     = LSM6DSOX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800b834:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.DeInit      = BSP_LSM6DSOX_DeInit;
 800b836:	4b51      	ldr	r3, [pc, #324]	; (800b97c <BSP_MOTION_SENSOR_Init+0x158>)
  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800b838:	4e51      	ldr	r6, [pc, #324]	; (800b980 <BSP_MOTION_SENSOR_Init+0x15c>)
  io_ctx.Address     = 0x0;
 800b83a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
  io_ctx.DeInit      = BSP_LSM6DSOX_DeInit;
 800b83e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  io_ctx.WriteReg    = BSP_LSM6DSOX_WriteReg;
 800b842:	4b50      	ldr	r3, [pc, #320]	; (800b984 <BSP_MOTION_SENSOR_Init+0x160>)
  io_ctx.ReadReg     = BSP_LSM6DSOX_ReadReg;
 800b844:	4a50      	ldr	r2, [pc, #320]	; (800b988 <BSP_MOTION_SENSOR_Init+0x164>)
 800b846:	460f      	mov	r7, r1
  io_ctx.WriteReg    = BSP_LSM6DSOX_WriteReg;
 800b848:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800b84c:	a908      	add	r1, sp, #32
  io_ctx.GetTick     = BSP_GetTick;
 800b84e:	4b4f      	ldr	r3, [pc, #316]	; (800b98c <BSP_MOTION_SENSOR_Init+0x168>)
 800b850:	930e      	str	r3, [sp, #56]	; 0x38
  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800b852:	4630      	mov	r0, r6
 800b854:	f7f9 fb2c 	bl	8004eb0 <LSM6DSOX_RegisterBusIO>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d179      	bne.n	800b950 <BSP_MOTION_SENSOR_Init+0x12c>
  else if (LSM6DSOX_ReadID(&lsm6dsox_obj_0, &id) != LSM6DSOX_OK)
 800b85c:	f10d 0103 	add.w	r1, sp, #3
 800b860:	4630      	mov	r0, r6
 800b862:	f7f9 f88b 	bl	800497c <LSM6DSOX_ReadID>
 800b866:	2800      	cmp	r0, #0
 800b868:	d172      	bne.n	800b950 <BSP_MOTION_SENSOR_Init+0x12c>
  else if (id != LSM6DSOX_ID)
 800b86a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b86e:	2b6c      	cmp	r3, #108	; 0x6c
 800b870:	d16e      	bne.n	800b950 <BSP_MOTION_SENSOR_Init+0x12c>
    (void)LSM6DSOX_GetCapabilities(&lsm6dsox_obj_0, &cap);
 800b872:	a901      	add	r1, sp, #4
 800b874:	4630      	mov	r0, r6
 800b876:	f7f8 fff1 	bl	800485c <LSM6DSOX_GetCapabilities>
    MotionCtx[LSM6DSOX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b87a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b87e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800b882:	f89d 1005 	ldrb.w	r1, [sp, #5]
    MotionCompObj[LSM6DSOX_0] = &lsm6dsox_obj_0;
 800b886:	63f6      	str	r6, [r6, #60]	; 0x3c
    MotionCtx[LSM6DSOX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b888:	0053      	lsls	r3, r2, #1
 800b88a:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800b88e:	430b      	orrs	r3, r1
 800b890:	63b3      	str	r3, [r6, #56]	; 0x38
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b892:	07bc      	lsls	r4, r7, #30
    MotionDrv[LSM6DSOX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSOX_COMMON_Driver;
 800b894:	4b3e      	ldr	r3, [pc, #248]	; (800b990 <BSP_MOTION_SENSOR_Init+0x16c>)
 800b896:	6433      	str	r3, [r6, #64]	; 0x40
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b898:	d501      	bpl.n	800b89e <BSP_MOTION_SENSOR_Init+0x7a>
 800b89a:	2a01      	cmp	r2, #1
 800b89c:	d049      	beq.n	800b932 <BSP_MOTION_SENSOR_Init+0x10e>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b89e:	07fa      	lsls	r2, r7, #31
 800b8a0:	d42c      	bmi.n	800b8fc <BSP_MOTION_SENSOR_Init+0xd8>
  return ret;
 800b8a2:	4837      	ldr	r0, [pc, #220]	; (800b980 <BSP_MOTION_SENSOR_Init+0x15c>)
 800b8a4:	4b3a      	ldr	r3, [pc, #232]	; (800b990 <BSP_MOTION_SENSOR_Init+0x16c>)
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	a908      	add	r1, sp, #32
 800b8aa:	4798      	blx	r3
 800b8ac:	4681      	mov	r9, r0
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d15e      	bne.n	800b970 <BSP_MOTION_SENSOR_Init+0x14c>
      if (cap.Acc == 1U)
 800b8b2:	f89d 8020 	ldrb.w	r8, [sp, #32]
      if (cap.Gyro == 1U)
 800b8b6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
      if (cap.Acc == 1U)
 800b8ba:	f1a8 0801 	sub.w	r8, r8, #1
 800b8be:	fab8 f888 	clz	r8, r8
      if (cap.Gyro == 1U)
 800b8c2:	2b01      	cmp	r3, #1
      if (cap.Acc == 1U)
 800b8c4:	ea4f 1858 	mov.w	r8, r8, lsr #5
      if (cap.Magneto == 1U)
 800b8c8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
      if (cap.Acc == 1U)
 800b8cc:	ea4f 0848 	mov.w	r8, r8, lsl #1
        component_functions |= MOTION_GYRO;
 800b8d0:	bf08      	it	eq
 800b8d2:	f048 0801 	orreq.w	r8, r8, #1
      if (cap.Magneto == 1U)
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d101      	bne.n	800b8de <BSP_MOTION_SENSOR_Init+0xba>
        component_functions |= MOTION_MAGNETO;
 800b8da:	f048 0804 	orr.w	r8, r8, #4
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b8de:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b99c <BSP_MOTION_SENSOR_Init+0x178>
 800b8e2:	2503      	movs	r5, #3
 800b8e4:	2401      	movs	r4, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b8e6:	ea34 0307 	bics.w	r3, r4, r7
 800b8ea:	d012      	beq.n	800b912 <BSP_MOTION_SENSOR_Init+0xee>
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800b8ec:	3d01      	subs	r5, #1
    function = function << 1;
 800b8ee:	ea4f 0444 	mov.w	r4, r4, lsl #1
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800b8f2:	d1f8      	bne.n	800b8e6 <BSP_MOTION_SENSOR_Init+0xc2>
}
 800b8f4:	4648      	mov	r0, r9
 800b8f6:	b010      	add	sp, #64	; 0x40
 800b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	2901      	cmp	r1, #1
 800b900:	d1d1      	bne.n	800b8a6 <BSP_MOTION_SENSOR_Init+0x82>
      MotionFuncDrv[LSM6DSOX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_GYRO_Driver;
 800b902:	4a24      	ldr	r2, [pc, #144]	; (800b994 <BSP_MOTION_SENSOR_Init+0x170>)
      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800b904:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[LSM6DSOX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_GYRO_Driver;
 800b906:	6472      	str	r2, [r6, #68]	; 0x44
      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800b908:	4798      	blx	r3
 800b90a:	bb08      	cbnz	r0, 800b950 <BSP_MOTION_SENSOR_Init+0x12c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b90c:	e9d6 030f 	ldrd	r0, r3, [r6, #60]	; 0x3c
 800b910:	e7c9      	b.n	800b8a6 <BSP_MOTION_SENSOR_Init+0x82>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b912:	ea34 0308 	bics.w	r3, r4, r8
 800b916:	d1e9      	bne.n	800b8ec <BSP_MOTION_SENSOR_Init+0xc8>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b918:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800b91c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800b91e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4798      	blx	r3
 800b928:	2800      	cmp	r0, #0
 800b92a:	d0df      	beq.n	800b8ec <BSP_MOTION_SENSOR_Init+0xc8>
        return BSP_ERROR_COMPONENT_FAILURE;
 800b92c:	f06f 0904 	mvn.w	r9, #4
 800b930:	e7e0      	b.n	800b8f4 <BSP_MOTION_SENSOR_Init+0xd0>
      MotionFuncDrv[LSM6DSOX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_ACC_Driver;
 800b932:	4a19      	ldr	r2, [pc, #100]	; (800b998 <BSP_MOTION_SENSOR_Init+0x174>)
      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800b934:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[LSM6DSOX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_ACC_Driver;
 800b936:	64b2      	str	r2, [r6, #72]	; 0x48
      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800b938:	4630      	mov	r0, r6
 800b93a:	4798      	blx	r3
 800b93c:	b930      	cbnz	r0, 800b94c <BSP_MOTION_SENSOR_Init+0x128>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b93e:	07f8      	lsls	r0, r7, #31
 800b940:	d5e4      	bpl.n	800b90c <BSP_MOTION_SENSOR_Init+0xe8>
      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800b942:	e9d6 030f 	ldrd	r0, r3, [r6, #60]	; 0x3c
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b946:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800b94a:	e7d8      	b.n	800b8fe <BSP_MOTION_SENSOR_Init+0xda>
 800b94c:	07f9      	lsls	r1, r7, #31
 800b94e:	d405      	bmi.n	800b95c <BSP_MOTION_SENSOR_Init+0x138>
        return BSP_ERROR_NO_INIT;
 800b950:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
}
 800b954:	4648      	mov	r0, r9
 800b956:	b010      	add	sp, #64	; 0x40
 800b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b95c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d1f5      	bne.n	800b950 <BSP_MOTION_SENSOR_Init+0x12c>
      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800b964:	e9d6 030f 	ldrd	r0, r3, [r6, #60]	; 0x3c
 800b968:	e7cb      	b.n	800b902 <BSP_MOTION_SENSOR_Init+0xde>
      ret = BSP_ERROR_WRONG_PARAM;
 800b96a:	f06f 0901 	mvn.w	r9, #1
 800b96e:	e7c1      	b.n	800b8f4 <BSP_MOTION_SENSOR_Init+0xd0>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b970:	f06f 0906 	mvn.w	r9, #6
 800b974:	e7be      	b.n	800b8f4 <BSP_MOTION_SENSOR_Init+0xd0>
 800b976:	bf00      	nop
 800b978:	0800b7d1 	.word	0x0800b7d1
 800b97c:	0800b7c1 	.word	0x0800b7c1
 800b980:	20001e78 	.word	0x20001e78
 800b984:	0800b715 	.word	0x0800b715
 800b988:	0800b769 	.word	0x0800b769
 800b98c:	0800b549 	.word	0x0800b549
 800b990:	200002d8 	.word	0x200002d8
 800b994:	20000290 	.word	0x20000290
 800b998:	200002b4 	.word	0x200002b4
 800b99c:	0801fdd8 	.word	0x0801fdd8

0800b9a0 <BSP_MOTION_SENSOR_DeInit>:
  if (Instance >= MOTION_INSTANCES_NBR)
 800b9a0:	b950      	cbnz	r0, 800b9b8 <BSP_MOTION_SENSOR_DeInit+0x18>
{
 800b9a2:	b508      	push	{r3, lr}
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b9a4:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <BSP_MOTION_SENSOR_DeInit+0x20>)
 800b9a6:	e9d3 020f 	ldrd	r0, r2, [r3, #60]	; 0x3c
 800b9aa:	6853      	ldr	r3, [r2, #4]
 800b9ac:	4798      	blx	r3
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	bf18      	it	ne
 800b9b2:	f06f 0004 	mvnne.w	r0, #4
}
 800b9b6:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b9b8:	f06f 0001 	mvn.w	r0, #1
}
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20001e78 	.word	0x20001e78

0800b9c4 <BSP_MOTION_SENSOR_GetAxes>:
  if (Instance >= MOTION_INSTANCES_NBR)
 800b9c4:	b9c8      	cbnz	r0, 800b9fa <BSP_MOTION_SENSOR_GetAxes+0x36>
{
 800b9c6:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b9c8:	4c0d      	ldr	r4, [pc, #52]	; (800ba00 <BSP_MOTION_SENSOR_GetAxes+0x3c>)
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b9d0:	ea03 0c02 	and.w	ip, r3, r2
 800b9d4:	4393      	bics	r3, r2
 800b9d6:	d10d      	bne.n	800b9f4 <BSP_MOTION_SENSOR_GetAxes+0x30>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <BSP_MOTION_SENSOR_GetAxes+0x40>)
 800b9da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b9dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b9e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b9e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	bf18      	it	ne
 800b9ee:	f06f 0004 	mvnne.w	r0, #4
}
 800b9f2:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b9f4:	f06f 0001 	mvn.w	r0, #1
}
 800b9f8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b9fa:	f06f 0001 	mvn.w	r0, #1
}
 800b9fe:	4770      	bx	lr
 800ba00:	20001e78 	.word	0x20001e78
 800ba04:	0801fdd8 	.word	0x0801fdd8

0800ba08 <BSP_MOTION_SENSOR_Write_Register>:
 */
int32_t BSP_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
  int32_t ret;

  switch (Instance)
 800ba08:	b948      	cbnz	r0, 800ba1e <BSP_MOTION_SENSOR_Write_Register+0x16>
{
 800ba0a:	b508      	push	{r3, lr}
      break;
#endif      
      
#if (USE_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case LSM6DSOX_0:
      if (LSM6DSOX_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800ba0c:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <BSP_MOTION_SENSOR_Write_Register+0x1c>)
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	f7f9 fdaa 	bl	8005568 <LSM6DSOX_Write_Reg>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba14:	2800      	cmp	r0, #0
 800ba16:	bf18      	it	ne
 800ba18:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800ba1c:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800ba1e:	f06f 0001 	mvn.w	r0, #1
}
 800ba22:	4770      	bx	lr
 800ba24:	20001eb4 	.word	0x20001eb4

0800ba28 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba28:	4911      	ldr	r1, [pc, #68]	; (800ba70 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800ba2a:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800ba30:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800ba34:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800ba3a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800ba3c:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800ba3e:	f042 0201 	orr.w	r2, r2, #1
 800ba42:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800ba44:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800ba4c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 800ba50:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ba54:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800ba56:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ba58:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba5a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 800ba5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ba62:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 800ba64:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba66:	608c      	str	r4, [r1, #8]
#endif
}
 800ba68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	e000ed00 	.word	0xe000ed00
 800ba74:	40021000 	.word	0x40021000

0800ba78 <_write>:

int _write(int fd, const void *buff, int count)
{
  bool status = true;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800ba78:	2a00      	cmp	r2, #0
 800ba7a:	db01      	blt.n	800ba80 <_write+0x8>
  if (_ioWriteAllowed)
    status = port_io_write((uint8_t *)buff, count);
#endif

  return (status ? count : 0);
}
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	4770      	bx	lr
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800ba80:	3801      	subs	r0, #1
 800ba82:	2801      	cmp	r0, #1
 800ba84:	d9fa      	bls.n	800ba7c <_write+0x4>
{
 800ba86:	b508      	push	{r3, lr}
    errno = EBADF;
 800ba88:	f00f fed4 	bl	801b834 <__errno>
 800ba8c:	2309      	movs	r3, #9
    return -1;
 800ba8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = EBADF;
 800ba92:	6003      	str	r3, [r0, #0]
}
 800ba94:	4610      	mov	r0, r2
 800ba96:	bd08      	pop	{r3, pc}

0800ba98 <AttrMod_Request_ActRec>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_ActRec(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if(CustomNotifyEventActRec!=NULL) {
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <AttrMod_Request_ActRec+0x18>)
{
 800ba9a:	9a00      	ldr	r2, [sp, #0]
  if(CustomNotifyEventActRec!=NULL) {
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	b12b      	cbz	r3, 800baac <AttrMod_Request_ActRec+0x14>
    if (att_data[0] == 01U) {
 800baa0:	7810      	ldrb	r0, [r2, #0]
 800baa2:	2801      	cmp	r0, #1
 800baa4:	d001      	beq.n	800baaa <AttrMod_Request_ActRec+0x12>
      CustomNotifyEventActRec(BLE_NOTIFY_SUB);
    } else if (att_data[0] == 0U){
 800baa6:	b908      	cbnz	r0, 800baac <AttrMod_Request_ActRec+0x14>
      CustomNotifyEventActRec(BLE_NOTIFY_UNSUB);
 800baa8:	2002      	movs	r0, #2
 800baaa:	4718      	bx	r3
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->ActRec=%s", (att_data[0] == 01U) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	20001f10 	.word	0x20001f10

0800bab4 <BLE_InitActRecService>:
{
 800bab4:	b570      	push	{r4, r5, r6, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800bab6:	4c29      	ldr	r4, [pc, #164]	; (800bb5c <BLE_InitActRecService+0xa8>)
 800bab8:	2228      	movs	r2, #40	; 0x28
 800baba:	2100      	movs	r1, #0
 800babc:	f104 0008 	add.w	r0, r4, #8
 800bac0:	f00f fe36 	bl	801b730 <memset>
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_ActRec;
 800bac4:	4826      	ldr	r0, [pc, #152]	; (800bb60 <BLE_InitActRecService+0xac>)
 800bac6:	6260      	str	r0, [r4, #36]	; 0x24
  BleCharPointer->Read_Request_CB= Read_Request_ActRec;
 800bac8:	4826      	ldr	r0, [pc, #152]	; (800bb64 <BLE_InitActRecService+0xb0>)
 800baca:	62a0      	str	r0, [r4, #40]	; 0x28
  COPY_ACT_REC_CHAR_UUID((BleCharPointer->uuid));
 800bacc:	4826      	ldr	r0, [pc, #152]	; (800bb68 <BLE_InitActRecService+0xb4>)
 800bace:	6060      	str	r0, [r4, #4]
 800bad0:	f64a 4036 	movw	r0, #44086	; 0xac36
 800bad4:	8160      	strh	r0, [r4, #10]
 800bad6:	f241 10e1 	movw	r0, #4577	; 0x11e1
 800bada:	81a0      	strh	r0, [r4, #12]
 800badc:	2010      	movs	r0, #16
 800bade:	2202      	movs	r2, #2
 800bae0:	7420      	strb	r0, [r4, #16]
  if(CustomReadRequestActRec == NULL) {
 800bae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  COPY_ACT_REC_CHAR_UUID((BleCharPointer->uuid));
 800bae4:	7222      	strb	r2, [r4, #8]
  BleCharPointer->Char_Value_Length=2+1+1; /* 2 byte timestamp, 1 byte action, 1 byte algorithm */
 800bae6:	2004      	movs	r0, #4
  COPY_ACT_REC_CHAR_UUID((BleCharPointer->uuid));
 800bae8:	2301      	movs	r3, #1
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800baea:	7522      	strb	r2, [r4, #20]
  BleCharPointer->Char_Value_Length=2+1+1; /* 2 byte timestamp, 1 byte action, 1 byte algorithm */
 800baec:	82e0      	strh	r0, [r4, #22]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800baee:	f241 0204 	movw	r2, #4100	; 0x1004
  BleCharPointer->Char_Properties = ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800baf2:	2012      	movs	r0, #18
  COPY_ACT_REC_CHAR_UUID((BleCharPointer->uuid));
 800baf4:	73a3      	strb	r3, [r4, #14]
  BleCharPointer->Char_Properties = ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800baf6:	7620      	strb	r0, [r4, #24]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800baf8:	8362      	strh	r2, [r4, #26]
  BleCharPointer->Is_Variable=1;
 800bafa:	7723      	strb	r3, [r4, #28]
  if(CustomReadRequestActRec == NULL) {
 800bafc:	b311      	cbz	r1, 800bb44 <BLE_InitActRecService+0x90>
 800bafe:	4e1b      	ldr	r6, [pc, #108]	; (800bb6c <BLE_InitActRecService+0xb8>)
  BLE_MANAGER_PRINTF("BLE Activity Recognition features ok\r\n");
 800bb00:	4d1b      	ldr	r5, [pc, #108]	; (800bb70 <BLE_InitActRecService+0xbc>)
 800bb02:	4c1c      	ldr	r4, [pc, #112]	; (800bb74 <BLE_InitActRecService+0xc0>)
 800bb04:	f105 0e20 	add.w	lr, r5, #32
 800bb08:	46ac      	mov	ip, r5
 800bb0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb0e:	45f4      	cmp	ip, lr
 800bb10:	f104 0410 	add.w	r4, r4, #16
 800bb14:	f105 0510 	add.w	r5, r5, #16
 800bb18:	f844 0c10 	str.w	r0, [r4, #-16]
 800bb1c:	f844 1c0c 	str.w	r1, [r4, #-12]
 800bb20:	f844 2c08 	str.w	r2, [r4, #-8]
 800bb24:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb28:	d1ee      	bne.n	800bb08 <BLE_InitActRecService+0x54>
 800bb2a:	88ab      	ldrh	r3, [r5, #4]
 800bb2c:	6828      	ldr	r0, [r5, #0]
 800bb2e:	80a3      	strh	r3, [r4, #4]
 800bb30:	79ab      	ldrb	r3, [r5, #6]
 800bb32:	6020      	str	r0, [r4, #0]
 800bb34:	2126      	movs	r1, #38	; 0x26
 800bb36:	71a3      	strb	r3, [r4, #6]
 800bb38:	480e      	ldr	r0, [pc, #56]	; (800bb74 <BLE_InitActRecService+0xc0>)
 800bb3a:	6031      	str	r1, [r6, #0]
 800bb3c:	f7f8 fcd2 	bl	80044e4 <CDC_Fill_Buffer>
}
 800bb40:	480d      	ldr	r0, [pc, #52]	; (800bb78 <BLE_InitActRecService+0xc4>)
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
    BLE_MANAGER_PRINTF("Warning: Read request Activity Recognition function not defined\r\n");
 800bb44:	490d      	ldr	r1, [pc, #52]	; (800bb7c <BLE_InitActRecService+0xc8>)
 800bb46:	4e09      	ldr	r6, [pc, #36]	; (800bb6c <BLE_InitActRecService+0xb8>)
 800bb48:	480a      	ldr	r0, [pc, #40]	; (800bb74 <BLE_InitActRecService+0xc0>)
 800bb4a:	2242      	movs	r2, #66	; 0x42
 800bb4c:	f00f fea7 	bl	801b89e <memcpy>
 800bb50:	2141      	movs	r1, #65	; 0x41
 800bb52:	4808      	ldr	r0, [pc, #32]	; (800bb74 <BLE_InitActRecService+0xc0>)
 800bb54:	6031      	str	r1, [r6, #0]
 800bb56:	f7f8 fcc5 	bl	80044e4 <CDC_Fill_Buffer>
 800bb5a:	e7d1      	b.n	800bb00 <BLE_InitActRecService+0x4c>
 800bb5c:	20001f10 	.word	0x20001f10
 800bb60:	0800ba99 	.word	0x0800ba99
 800bb64:	0800bc41 	.word	0x0800bc41
 800bb68:	a5d5c51b 	.word	0xa5d5c51b
 800bb6c:	200012ac 	.word	0x200012ac
 800bb70:	08021538 	.word	0x08021538
 800bb74:	200011ac 	.word	0x200011ac
 800bb78:	20001f14 	.word	0x20001f14
 800bb7c:	080214f4 	.word	0x080214f4

0800bb80 <BLE_ActRecUpdate>:
{  
 800bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb82:	b083      	sub	sp, #12
 800bb84:	460c      	mov	r4, r1
 800bb86:	4605      	mov	r5, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bb88:	f7fa fa6a 	bl	8006060 <HAL_GetTick>
 800bb8c:	08c0      	lsrs	r0, r0, #3
 800bb8e:	f88d 0004 	strb.w	r0, [sp, #4]
 800bb92:	f7fa fa65 	bl	8006060 <HAL_GetTick>
  if(Algorithm == HAR_ALGO_IDX_NONE) {
 800bb96:	2cff      	cmp	r4, #255	; 0xff
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bb98:	ea4f 20d0 	mov.w	r0, r0, lsr #11
 800bb9c:	f88d 0005 	strb.w	r0, [sp, #5]
    dimByte = 4U;
 800bba0:	bf18      	it	ne
 800bba2:	2204      	movne	r2, #4
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharActRec, 0, dimByte, buff);
 800bba4:	481e      	ldr	r0, [pc, #120]	; (800bc20 <BLE_ActRecUpdate+0xa0>)
    buff[3] = (uint8_t)Algorithm;
 800bba6:	bf14      	ite	ne
 800bba8:	f88d 4007 	strbne.w	r4, [sp, #7]
    dimByte = 3U;
 800bbac:	2203      	moveq	r2, #3
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharActRec, 0, dimByte, buff);
 800bbae:	ab01      	add	r3, sp, #4
 800bbb0:	2100      	movs	r1, #0
  buff[2] = (uint8_t)ActivityCode;
 800bbb2:	f88d 5006 	strb.w	r5, [sp, #6]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharActRec, 0, dimByte, buff);
 800bbb6:	f000 ffb1 	bl	800cb1c <safe_aci_gatt_update_char_value>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800bbba:	4604      	mov	r4, r0
 800bbbc:	b1b8      	cbz	r0, 800bbee <BLE_ActRecUpdate+0x6e>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800bbbe:	4b19      	ldr	r3, [pc, #100]	; (800bc24 <BLE_ActRecUpdate+0xa4>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d016      	beq.n	800bbf4 <BLE_ActRecUpdate+0x74>
      BLE_MANAGER_PRINTF("Error Updating ActRec Char\r\n");
 800bbc6:	4b18      	ldr	r3, [pc, #96]	; (800bc28 <BLE_ActRecUpdate+0xa8>)
 800bbc8:	4d18      	ldr	r5, [pc, #96]	; (800bc2c <BLE_ActRecUpdate+0xac>)
 800bbca:	4e19      	ldr	r6, [pc, #100]	; (800bc30 <BLE_ActRecUpdate+0xb0>)
 800bbcc:	271c      	movs	r7, #28
 800bbce:	601f      	str	r7, [r3, #0]
 800bbd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbd2:	6030      	str	r0, [r6, #0]
 800bbd4:	6071      	str	r1, [r6, #4]
 800bbd6:	60b2      	str	r2, [r6, #8]
 800bbd8:	cd07      	ldmia	r5!, {r0, r1, r2}
 800bbda:	60f3      	str	r3, [r6, #12]
 800bbdc:	782b      	ldrb	r3, [r5, #0]
 800bbde:	6130      	str	r0, [r6, #16]
 800bbe0:	6171      	str	r1, [r6, #20]
 800bbe2:	61b2      	str	r2, [r6, #24]
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	7733      	strb	r3, [r6, #28]
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7f8 fc7b 	bl	80044e4 <CDC_Fill_Buffer>
}
 800bbee:	4620      	mov	r0, r4
 800bbf0:	b003      	add	sp, #12
 800bbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating ActRec Char\n");
 800bbf4:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <BLE_ActRecUpdate+0xb4>)
 800bbf6:	4d10      	ldr	r5, [pc, #64]	; (800bc38 <BLE_ActRecUpdate+0xb8>)
 800bbf8:	4e10      	ldr	r6, [pc, #64]	; (800bc3c <BLE_ActRecUpdate+0xbc>)
 800bbfa:	271b      	movs	r7, #27
 800bbfc:	701f      	strb	r7, [r3, #0]
 800bbfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc00:	6030      	str	r0, [r6, #0]
 800bc02:	6071      	str	r1, [r6, #4]
 800bc04:	60b2      	str	r2, [r6, #8]
 800bc06:	cd07      	ldmia	r5!, {r0, r1, r2}
 800bc08:	60f3      	str	r3, [r6, #12]
 800bc0a:	6130      	str	r0, [r6, #16]
 800bc0c:	6171      	str	r1, [r6, #20]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800bc0e:	4630      	mov	r0, r6
 800bc10:	4639      	mov	r1, r7
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating ActRec Char\n");
 800bc12:	61b2      	str	r2, [r6, #24]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800bc14:	f000 ffa6 	bl	800cb64 <Stderr_Update>
}
 800bc18:	4620      	mov	r0, r4
 800bc1a:	b003      	add	sp, #12
 800bc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20001f14 	.word	0x20001f14
 800bc24:	20002020 	.word	0x20002020
 800bc28:	200012ac 	.word	0x200012ac
 800bc2c:	0802157c 	.word	0x0802157c
 800bc30:	200011ac 	.word	0x200011ac
 800bc34:	20002238 	.word	0x20002238
 800bc38:	08021560 	.word	0x08021560
 800bc3c:	20002138 	.word	0x20002138

0800bc40 <Read_Request_ActRec>:
 * @retval None
 */

#if (BLUE_CORE != BLUENRG_LP)
static void Read_Request_ActRec(void *VoidCharPointer,uint16_t handle)
{
 800bc40:	b530      	push	{r4, r5, lr}
  if(CustomReadRequestActRec != NULL) {
 800bc42:	4b1c      	ldr	r3, [pc, #112]	; (800bcb4 <Read_Request_ActRec+0x74>)
 800bc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 800bc46:	b083      	sub	sp, #12
  if(CustomReadRequestActRec != NULL) {
 800bc48:	b163      	cbz	r3, 800bc64 <Read_Request_ActRec+0x24>
    BLE_AR_output_t ActivityCode;
    BLE_AR_algoIdx_t Algorithm;
    CustomReadRequestActRec(&ActivityCode, &Algorithm);
 800bc4a:	f10d 0107 	add.w	r1, sp, #7
 800bc4e:	f10d 0006 	add.w	r0, sp, #6
 800bc52:	4798      	blx	r3
    BLE_ActRecUpdate(ActivityCode,Algorithm);
 800bc54:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800bc58:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800bc5c:	f7ff ff90 	bl	800bb80 <BLE_ActRecUpdate>
  } else {
    BLE_MANAGER_PRINTF("\r\n\nRead request ActRec function not defined\r\n\n");
  }
}
 800bc60:	b003      	add	sp, #12
 800bc62:	bd30      	pop	{r4, r5, pc}
    BLE_MANAGER_PRINTF("\r\n\nRead request ActRec function not defined\r\n\n");
 800bc64:	4d14      	ldr	r5, [pc, #80]	; (800bcb8 <Read_Request_ActRec+0x78>)
 800bc66:	4c15      	ldr	r4, [pc, #84]	; (800bcbc <Read_Request_ActRec+0x7c>)
 800bc68:	f105 0e20 	add.w	lr, r5, #32
 800bc6c:	46ac      	mov	ip, r5
 800bc6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc72:	45f4      	cmp	ip, lr
 800bc74:	f104 0410 	add.w	r4, r4, #16
 800bc78:	f105 0510 	add.w	r5, r5, #16
 800bc7c:	f844 0c10 	str.w	r0, [r4, #-16]
 800bc80:	f844 1c0c 	str.w	r1, [r4, #-12]
 800bc84:	f844 2c08 	str.w	r2, [r4, #-8]
 800bc88:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc8c:	d1ee      	bne.n	800bc6c <Read_Request_ActRec+0x2c>
 800bc8e:	cd07      	ldmia	r5!, {r0, r1, r2}
 800bc90:	6020      	str	r0, [r4, #0]
 800bc92:	480b      	ldr	r0, [pc, #44]	; (800bcc0 <Read_Request_ActRec+0x80>)
 800bc94:	232e      	movs	r3, #46	; 0x2e
 800bc96:	6003      	str	r3, [r0, #0]
 800bc98:	8828      	ldrh	r0, [r5, #0]
 800bc9a:	81a0      	strh	r0, [r4, #12]
 800bc9c:	78ad      	ldrb	r5, [r5, #2]
 800bc9e:	4807      	ldr	r0, [pc, #28]	; (800bcbc <Read_Request_ActRec+0x7c>)
 800bca0:	6061      	str	r1, [r4, #4]
 800bca2:	4619      	mov	r1, r3
 800bca4:	60a2      	str	r2, [r4, #8]
 800bca6:	73a5      	strb	r5, [r4, #14]
}
 800bca8:	b003      	add	sp, #12
 800bcaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    BLE_MANAGER_PRINTF("\r\n\nRead request ActRec function not defined\r\n\n");
 800bcae:	f7f8 bc19 	b.w	80044e4 <CDC_Fill_Buffer>
 800bcb2:	bf00      	nop
 800bcb4:	20001f10 	.word	0x20001f10
 800bcb8:	0802159c 	.word	0x0802159c
 800bcbc:	200011ac 	.word	0x200011ac
 800bcc0:	200012ac 	.word	0x200012ac

0800bcc4 <AttrMod_Request_Battery>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_Battery(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if(CustomNotifyEventBattery!=NULL) {
 800bcc4:	4b05      	ldr	r3, [pc, #20]	; (800bcdc <AttrMod_Request_Battery+0x18>)
{
 800bcc6:	9a00      	ldr	r2, [sp, #0]
  if(CustomNotifyEventBattery!=NULL) {
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	b12b      	cbz	r3, 800bcd8 <AttrMod_Request_Battery+0x14>
    if (att_data[0] == 01U) {
 800bccc:	7810      	ldrb	r0, [r2, #0]
 800bcce:	2801      	cmp	r0, #1
 800bcd0:	d001      	beq.n	800bcd6 <AttrMod_Request_Battery+0x12>
      CustomNotifyEventBattery(BLE_NOTIFY_SUB);
    } else if (att_data[0] == 0U){
 800bcd2:	b908      	cbnz	r0, 800bcd8 <AttrMod_Request_Battery+0x14>
      CustomNotifyEventBattery(BLE_NOTIFY_UNSUB);
 800bcd4:	2002      	movs	r0, #2
 800bcd6:	4718      	bx	r3
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->Bat=%s", (att_data[0] == 01U) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20001f44 	.word	0x20001f44

0800bce0 <BLE_InitBatteryService>:
{
 800bce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800bce4:	4c1a      	ldr	r4, [pc, #104]	; (800bd50 <BLE_InitBatteryService+0x70>)
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 800bce6:	4d1b      	ldr	r5, [pc, #108]	; (800bd54 <BLE_InitBatteryService+0x74>)
 800bce8:	4e1b      	ldr	r6, [pc, #108]	; (800bd58 <BLE_InitBatteryService+0x78>)
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800bcea:	2228      	movs	r2, #40	; 0x28
 800bcec:	2100      	movs	r1, #0
 800bcee:	f104 0008 	add.w	r0, r4, #8
 800bcf2:	f00f fd1d 	bl	801b730 <memset>
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	7223      	strb	r3, [r4, #8]
 800bcfa:	74a3      	strb	r3, [r4, #18]
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800bcfc:	7523      	strb	r3, [r4, #20]
  BleCharPointer->Char_Value_Length=2+2+2+2+1;
 800bcfe:	2309      	movs	r3, #9
 800bd00:	82e3      	strh	r3, [r4, #22]
  BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800bd02:	2310      	movs	r3, #16
 800bd04:	7623      	strb	r3, [r4, #24]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800bd06:	f241 0304 	movw	r3, #4100	; 0x1004
 800bd0a:	8363      	strh	r3, [r4, #26]
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 800bd0c:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <BLE_InitBatteryService+0x7c>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Battery;
 800bd0e:	4a14      	ldr	r2, [pc, #80]	; (800bd60 <BLE_InitBatteryService+0x80>)
 800bd10:	6262      	str	r2, [r4, #36]	; 0x24
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 800bd12:	2719      	movs	r7, #25
 800bd14:	601f      	str	r7, [r3, #0]
  COPY_BATTERY_CHAR_UUID((BleCharPointer->uuid));
 800bd16:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <BLE_InitBatteryService+0x84>)
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	f64a 4336 	movw	r3, #44086	; 0xac36
 800bd1e:	8163      	strh	r3, [r4, #10]
 800bd20:	f241 13e1 	movw	r3, #4577	; 0x11e1
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	2301      	movs	r3, #1
 800bd28:	73a3      	strb	r3, [r4, #14]
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 800bd2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd2c:	6030      	str	r0, [r6, #0]
 800bd2e:	6071      	str	r1, [r6, #4]
 800bd30:	cd03      	ldmia	r5!, {r0, r1}
 800bd32:	60f3      	str	r3, [r6, #12]
 800bd34:	6130      	str	r0, [r6, #16]
 800bd36:	882b      	ldrh	r3, [r5, #0]
 800bd38:	6171      	str	r1, [r6, #20]
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800bd3a:	f104 0804 	add.w	r8, r4, #4
  BLE_MANAGER_PRINTF("BLE Battery features ok\r\n");
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	60b2      	str	r2, [r6, #8]
 800bd44:	8333      	strh	r3, [r6, #24]
 800bd46:	f7f8 fbcd 	bl	80044e4 <CDC_Fill_Buffer>
}
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	20001f44 	.word	0x20001f44
 800bd54:	080215cc 	.word	0x080215cc
 800bd58:	200011ac 	.word	0x200011ac
 800bd5c:	200012ac 	.word	0x200012ac
 800bd60:	0800bcc5 	.word	0x0800bcc5
 800bd64:	a5d5c51b 	.word	0xa5d5c51b

0800bd68 <BLE_BatteryUpdate>:
{  
 800bd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	4616      	mov	r6, r2
 800bd70:	461d      	mov	r5, r3
 800bd72:	4604      	mov	r4, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bd74:	f7fa f974 	bl	8006060 <HAL_GetTick>
 800bd78:	08c0      	lsrs	r0, r0, #3
 800bd7a:	f88d 0004 	strb.w	r0, [sp, #4]
 800bd7e:	f7fa f96f 	bl	8006060 <HAL_GetTick>
  STORE_LE_16(buff+2,(BatteryLevel*10U));
 800bd82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800bd86:	0064      	lsls	r4, r4, #1
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bd88:	0ac0      	lsrs	r0, r0, #11
 800bd8a:	f88d 0005 	strb.w	r0, [sp, #5]
  STORE_LE_16(buff+2,(BatteryLevel*10U));
 800bd8e:	f88d 4006 	strb.w	r4, [sp, #6]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharBattery, 0, 2+2+2+2+1,buff);
 800bd92:	4820      	ldr	r0, [pc, #128]	; (800be14 <BLE_BatteryUpdate+0xac>)
  STORE_LE_16(buff+4,(Voltage));
 800bd94:	f8ad 7008 	strh.w	r7, [sp, #8]
  STORE_LE_16(buff+2,(BatteryLevel*10U));
 800bd98:	0a24      	lsrs	r4, r4, #8
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharBattery, 0, 2+2+2+2+1,buff);
 800bd9a:	ab01      	add	r3, sp, #4
 800bd9c:	2209      	movs	r2, #9
 800bd9e:	2100      	movs	r1, #0
  STORE_LE_16(buff+2,(BatteryLevel*10U));
 800bda0:	f88d 4007 	strb.w	r4, [sp, #7]
  STORE_LE_16(buff+6,(Current));
 800bda4:	f8ad 600a 	strh.w	r6, [sp, #10]
  buff[8] = (uint8_t)Status;
 800bda8:	f88d 500c 	strb.w	r5, [sp, #12]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharBattery, 0, 2+2+2+2+1,buff);
 800bdac:	f000 feb6 	bl	800cb1c <safe_aci_gatt_update_char_value>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	b1b0      	cbz	r0, 800bde2 <BLE_BatteryUpdate+0x7a>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800bdb4:	4b18      	ldr	r3, [pc, #96]	; (800be18 <BLE_BatteryUpdate+0xb0>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d015      	beq.n	800bde8 <BLE_BatteryUpdate+0x80>
      BLE_MANAGER_PRINTF("Error Updating Bat Char\r\n");
 800bdbc:	4b17      	ldr	r3, [pc, #92]	; (800be1c <BLE_BatteryUpdate+0xb4>)
 800bdbe:	4d18      	ldr	r5, [pc, #96]	; (800be20 <BLE_BatteryUpdate+0xb8>)
 800bdc0:	4e18      	ldr	r6, [pc, #96]	; (800be24 <BLE_BatteryUpdate+0xbc>)
 800bdc2:	2719      	movs	r7, #25
 800bdc4:	601f      	str	r7, [r3, #0]
 800bdc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdc8:	6030      	str	r0, [r6, #0]
 800bdca:	6071      	str	r1, [r6, #4]
 800bdcc:	cd03      	ldmia	r5!, {r0, r1}
 800bdce:	60f3      	str	r3, [r6, #12]
 800bdd0:	882b      	ldrh	r3, [r5, #0]
 800bdd2:	6130      	str	r0, [r6, #16]
 800bdd4:	6171      	str	r1, [r6, #20]
 800bdd6:	60b2      	str	r2, [r6, #8]
 800bdd8:	4630      	mov	r0, r6
 800bdda:	4639      	mov	r1, r7
 800bddc:	8333      	strh	r3, [r6, #24]
 800bdde:	f7f8 fb81 	bl	80044e4 <CDC_Fill_Buffer>
}
 800bde2:	4620      	mov	r0, r4
 800bde4:	b005      	add	sp, #20
 800bde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 800bde8:	4b0f      	ldr	r3, [pc, #60]	; (800be28 <BLE_BatteryUpdate+0xc0>)
 800bdea:	4d10      	ldr	r5, [pc, #64]	; (800be2c <BLE_BatteryUpdate+0xc4>)
 800bdec:	4e10      	ldr	r6, [pc, #64]	; (800be30 <BLE_BatteryUpdate+0xc8>)
 800bdee:	2718      	movs	r7, #24
 800bdf0:	701f      	strb	r7, [r3, #0]
 800bdf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdf4:	6030      	str	r0, [r6, #0]
 800bdf6:	6071      	str	r1, [r6, #4]
 800bdf8:	cd03      	ldmia	r5!, {r0, r1}
 800bdfa:	60f3      	str	r3, [r6, #12]
 800bdfc:	782b      	ldrb	r3, [r5, #0]
 800bdfe:	6130      	str	r0, [r6, #16]
 800be00:	6171      	str	r1, [r6, #20]
 800be02:	60b2      	str	r2, [r6, #8]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 800be08:	7633      	strb	r3, [r6, #24]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800be0a:	f000 feab 	bl	800cb64 <Stderr_Update>
}
 800be0e:	4620      	mov	r0, r4
 800be10:	b005      	add	sp, #20
 800be12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be14:	20001f48 	.word	0x20001f48
 800be18:	20002020 	.word	0x20002020
 800be1c:	200012ac 	.word	0x200012ac
 800be20:	08021604 	.word	0x08021604
 800be24:	200011ac 	.word	0x200011ac
 800be28:	20002238 	.word	0x20002238
 800be2c:	080215e8 	.word	0x080215e8
 800be30:	20002138 	.word	0x20002138

0800be34 <AttrMod_Request_FiniteStateMachine>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_FiniteStateMachine(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if(CustomNotifyEventFiniteStateMachine != NULL)
 800be34:	4b05      	ldr	r3, [pc, #20]	; (800be4c <AttrMod_Request_FiniteStateMachine+0x18>)
{
 800be36:	9a00      	ldr	r2, [sp, #0]
  if(CustomNotifyEventFiniteStateMachine != NULL)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	b12b      	cbz	r3, 800be48 <AttrMod_Request_FiniteStateMachine+0x14>
  {
    if (att_data[0] == 01U) {
 800be3c:	7810      	ldrb	r0, [r2, #0]
 800be3e:	2801      	cmp	r0, #1
 800be40:	d001      	beq.n	800be46 <AttrMod_Request_FiniteStateMachine+0x12>
      CustomNotifyEventFiniteStateMachine(BLE_NOTIFY_SUB);
    } else if (att_data[0] == 0U){
 800be42:	b908      	cbnz	r0, 800be48 <AttrMod_Request_FiniteStateMachine+0x14>
      CustomNotifyEventFiniteStateMachine(BLE_NOTIFY_UNSUB);
 800be44:	2002      	movs	r0, #2
 800be46:	4718      	bx	r3
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->FSM=%s", (att_data[0] == 01U) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20001f74 	.word	0x20001f74

0800be50 <BLE_InitFiniteStateMachineService>:
{
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800be52:	4c1d      	ldr	r4, [pc, #116]	; (800bec8 <BLE_InitFiniteStateMachineService+0x78>)
  BLE_MANAGER_PRINTF("BLE FSM features ok\r\n");
 800be54:	4d1d      	ldr	r5, [pc, #116]	; (800becc <BLE_InitFiniteStateMachineService+0x7c>)
 800be56:	4e1e      	ldr	r6, [pc, #120]	; (800bed0 <BLE_InitFiniteStateMachineService+0x80>)
{
 800be58:	4607      	mov	r7, r0
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800be5a:	2228      	movs	r2, #40	; 0x28
 800be5c:	2100      	movs	r1, #0
 800be5e:	f104 0008 	add.w	r0, r4, #8
 800be62:	f00f fc65 	bl	801b730 <memset>
  BleNumReg = NumReg;
 800be66:	4a1b      	ldr	r2, [pc, #108]	; (800bed4 <BLE_InitFiniteStateMachineService+0x84>)
 800be68:	7017      	strb	r7, [r2, #0]
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_FiniteStateMachine;
 800be6a:	4a1b      	ldr	r2, [pc, #108]	; (800bed8 <BLE_InitFiniteStateMachineService+0x88>)
 800be6c:	6262      	str	r2, [r4, #36]	; 0x24
  BleCharPointer->Read_Request_CB = Read_Request_FiniteStateMachine;
 800be6e:	4a1b      	ldr	r2, [pc, #108]	; (800bedc <BLE_InitFiniteStateMachineService+0x8c>)
 800be70:	62a2      	str	r2, [r4, #40]	; 0x28
  COPY_FINITE_STATE_MACHINE_CHAR_UUID((BleCharPointer->uuid));
 800be72:	4a1b      	ldr	r2, [pc, #108]	; (800bee0 <BLE_InitFiniteStateMachineService+0x90>)
 800be74:	6062      	str	r2, [r4, #4]
 800be76:	f64a 4236 	movw	r2, #44086	; 0xac36
 800be7a:	2302      	movs	r3, #2
 800be7c:	8162      	strh	r2, [r4, #10]
 800be7e:	f241 12e1 	movw	r2, #4577	; 0x11e1
    BleCharPointer->Char_Value_Length=2+16+2;
 800be82:	2f01      	cmp	r7, #1
  COPY_FINITE_STATE_MACHINE_CHAR_UUID((BleCharPointer->uuid));
 800be84:	7223      	strb	r3, [r4, #8]
 800be86:	81a2      	strh	r2, [r4, #12]
 800be88:	73a3      	strb	r3, [r4, #14]
 800be8a:	f04f 0210 	mov.w	r2, #16
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800be8e:	7523      	strb	r3, [r4, #20]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800be90:	f241 0304 	movw	r3, #4100	; 0x1004
  COPY_FINITE_STATE_MACHINE_CHAR_UUID((BleCharPointer->uuid));
 800be94:	7422      	strb	r2, [r4, #16]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800be96:	8363      	strh	r3, [r4, #26]
    BleCharPointer->Char_Value_Length=2+16+2;
 800be98:	bf14      	ite	ne
 800be9a:	220b      	movne	r2, #11
 800be9c:	2214      	moveq	r2, #20
  BLE_MANAGER_PRINTF("BLE FSM features ok\r\n");
 800be9e:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <BLE_InitFiniteStateMachineService+0x94>)
 800bea0:	82e2      	strh	r2, [r4, #22]
 800bea2:	2715      	movs	r7, #21
  BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800bea4:	2212      	movs	r2, #18
  BLE_MANAGER_PRINTF("BLE FSM features ok\r\n");
 800bea6:	601f      	str	r7, [r3, #0]
  BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800bea8:	7622      	strb	r2, [r4, #24]
  BLE_MANAGER_PRINTF("BLE FSM features ok\r\n");
 800beaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800beac:	6030      	str	r0, [r6, #0]
 800beae:	6828      	ldr	r0, [r5, #0]
 800beb0:	6071      	str	r1, [r6, #4]
 800beb2:	60f3      	str	r3, [r6, #12]
 800beb4:	6130      	str	r0, [r6, #16]
 800beb6:	88ab      	ldrh	r3, [r5, #4]
 800beb8:	60b2      	str	r2, [r6, #8]
 800beba:	4639      	mov	r1, r7
 800bebc:	4630      	mov	r0, r6
 800bebe:	82b3      	strh	r3, [r6, #20]
 800bec0:	f7f8 fb10 	bl	80044e4 <CDC_Fill_Buffer>
}
 800bec4:	1d20      	adds	r0, r4, #4
 800bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec8:	20001f74 	.word	0x20001f74
 800becc:	08021620 	.word	0x08021620
 800bed0:	200011ac 	.word	0x200011ac
 800bed4:	20000304 	.word	0x20000304
 800bed8:	0800be35 	.word	0x0800be35
 800bedc:	0800c021 	.word	0x0800c021
 800bee0:	a5d5c51b 	.word	0xa5d5c51b
 800bee4:	200012ac 	.word	0x200012ac

0800bee8 <BLE_FiniteStateMachineUpdate>:
{
 800bee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beea:	b087      	sub	sp, #28
 800beec:	460d      	mov	r5, r1
 800beee:	4616      	mov	r6, r2
 800bef0:	4604      	mov	r4, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bef2:	f7fa f8b5 	bl	8006060 <HAL_GetTick>
 800bef6:	08c0      	lsrs	r0, r0, #3
 800bef8:	f88d 0004 	strb.w	r0, [sp, #4]
 800befc:	f7fa f8b0 	bl	8006060 <HAL_GetTick>
  if(BleNumReg==BLE_FSM_16_REG) {
 800bf00:	4b3e      	ldr	r3, [pc, #248]	; (800bffc <BLE_FiniteStateMachineUpdate+0x114>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bf04:	0ac0      	lsrs	r0, r0, #11
  if(BleNumReg==BLE_FSM_16_REG) {
 800bf06:	2b01      	cmp	r3, #1
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800bf08:	f88d 0005 	strb.w	r0, [sp, #5]
  if(BleNumReg==BLE_FSM_16_REG) {
 800bf0c:	d039      	beq.n	800bf82 <BLE_FiniteStateMachineUpdate+0x9a>
    memcpy(buff+2,fsm_out, 8U*sizeof(uint8_t));
 800bf0e:	6821      	ldr	r1, [r4, #0]
 800bf10:	6862      	ldr	r2, [r4, #4]
 800bf12:	f8cd 1006 	str.w	r1, [sp, #6]
    buff[10] = *fsm_status_a_mainpage;
 800bf16:	782c      	ldrb	r4, [r5, #0]
    memcpy(buff+2,fsm_out, 8U*sizeof(uint8_t));
 800bf18:	f8cd 200a 	str.w	r2, [sp, #10]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFiniteStateMachine, 0, 2+8+1, buff);
 800bf1c:	4838      	ldr	r0, [pc, #224]	; (800c000 <BLE_FiniteStateMachineUpdate+0x118>)
    buff[10] = *fsm_status_a_mainpage;
 800bf1e:	f88d 400e 	strb.w	r4, [sp, #14]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFiniteStateMachine, 0, 2+8+1, buff);
 800bf22:	ab01      	add	r3, sp, #4
 800bf24:	220b      	movs	r2, #11
 800bf26:	2100      	movs	r1, #0
 800bf28:	f000 fdf8 	bl	800cb1c <safe_aci_gatt_update_char_value>
 800bf2c:	4606      	mov	r6, r0
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800bf2e:	b32e      	cbz	r6, 800bf7c <BLE_FiniteStateMachineUpdate+0x94>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800bf30:	4b34      	ldr	r3, [pc, #208]	; (800c004 <BLE_FiniteStateMachineUpdate+0x11c>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d03e      	beq.n	800bfb6 <BLE_FiniteStateMachineUpdate+0xce>
      BLE_MANAGER_PRINTF("Error Updating Finite State Machine Char\r\n");
 800bf38:	4d33      	ldr	r5, [pc, #204]	; (800c008 <BLE_FiniteStateMachineUpdate+0x120>)
 800bf3a:	4c34      	ldr	r4, [pc, #208]	; (800c00c <BLE_FiniteStateMachineUpdate+0x124>)
 800bf3c:	f105 0720 	add.w	r7, r5, #32
 800bf40:	46ac      	mov	ip, r5
 800bf42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bf46:	45bc      	cmp	ip, r7
 800bf48:	f104 0410 	add.w	r4, r4, #16
 800bf4c:	f105 0510 	add.w	r5, r5, #16
 800bf50:	f844 0c10 	str.w	r0, [r4, #-16]
 800bf54:	f844 1c0c 	str.w	r1, [r4, #-12]
 800bf58:	f844 2c08 	str.w	r2, [r4, #-8]
 800bf5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf60:	d1ee      	bne.n	800bf40 <BLE_FiniteStateMachineUpdate+0x58>
 800bf62:	cd03      	ldmia	r5!, {r0, r1}
 800bf64:	882b      	ldrh	r3, [r5, #0]
 800bf66:	8123      	strh	r3, [r4, #8]
 800bf68:	78aa      	ldrb	r2, [r5, #2]
 800bf6a:	4b29      	ldr	r3, [pc, #164]	; (800c010 <BLE_FiniteStateMachineUpdate+0x128>)
 800bf6c:	6020      	str	r0, [r4, #0]
 800bf6e:	6061      	str	r1, [r4, #4]
 800bf70:	72a2      	strb	r2, [r4, #10]
 800bf72:	212a      	movs	r1, #42	; 0x2a
 800bf74:	4825      	ldr	r0, [pc, #148]	; (800c00c <BLE_FiniteStateMachineUpdate+0x124>)
 800bf76:	6019      	str	r1, [r3, #0]
 800bf78:	f7f8 fab4 	bl	80044e4 <CDC_Fill_Buffer>
}
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	b007      	add	sp, #28
 800bf80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(buff+2,fsm_out, 16U*sizeof(uint8_t));
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	f8cd 3006 	str.w	r3, [sp, #6]
 800bf88:	6863      	ldr	r3, [r4, #4]
 800bf8a:	68e2      	ldr	r2, [r4, #12]
    buff[19] = *fsm_status_b_mainpage;
 800bf8c:	7831      	ldrb	r1, [r6, #0]
    memcpy(buff+2,fsm_out, 16U*sizeof(uint8_t));
 800bf8e:	f8cd 300a 	str.w	r3, [sp, #10]
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	f8cd 300e 	str.w	r3, [sp, #14]
    buff[18] = *fsm_status_a_mainpage;
 800bf98:	782c      	ldrb	r4, [r5, #0]
    memcpy(buff+2,fsm_out, 16U*sizeof(uint8_t));
 800bf9a:	f8cd 2012 	str.w	r2, [sp, #18]
    buff[19] = *fsm_status_b_mainpage;
 800bf9e:	f88d 1017 	strb.w	r1, [sp, #23]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFiniteStateMachine, 0, 2+16+2, buff);
 800bfa2:	4817      	ldr	r0, [pc, #92]	; (800c000 <BLE_FiniteStateMachineUpdate+0x118>)
    buff[18] = *fsm_status_a_mainpage;
 800bfa4:	f88d 4016 	strb.w	r4, [sp, #22]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharFiniteStateMachine, 0, 2+16+2, buff);
 800bfa8:	ab01      	add	r3, sp, #4
 800bfaa:	2214      	movs	r2, #20
 800bfac:	2100      	movs	r1, #0
 800bfae:	f000 fdb5 	bl	800cb1c <safe_aci_gatt_update_char_value>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	e7bb      	b.n	800bf2e <BLE_FiniteStateMachineUpdate+0x46>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Finite State Machine Char\n");
 800bfb6:	4f17      	ldr	r7, [pc, #92]	; (800c014 <BLE_FiniteStateMachineUpdate+0x12c>)
 800bfb8:	4d17      	ldr	r5, [pc, #92]	; (800c018 <BLE_FiniteStateMachineUpdate+0x130>)
 800bfba:	f107 0c20 	add.w	ip, r7, #32
 800bfbe:	463c      	mov	r4, r7
 800bfc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfc2:	4564      	cmp	r4, ip
 800bfc4:	f105 0510 	add.w	r5, r5, #16
 800bfc8:	f107 0710 	add.w	r7, r7, #16
 800bfcc:	f845 0c10 	str.w	r0, [r5, #-16]
 800bfd0:	f845 1c0c 	str.w	r1, [r5, #-12]
 800bfd4:	f845 2c08 	str.w	r2, [r5, #-8]
 800bfd8:	f845 3c04 	str.w	r3, [r5, #-4]
 800bfdc:	d1ef      	bne.n	800bfbe <BLE_FiniteStateMachineUpdate+0xd6>
 800bfde:	cf03      	ldmia	r7!, {r0, r1}
 800bfe0:	6028      	str	r0, [r5, #0]
 800bfe2:	480e      	ldr	r0, [pc, #56]	; (800c01c <BLE_FiniteStateMachineUpdate+0x134>)
 800bfe4:	883a      	ldrh	r2, [r7, #0]
 800bfe6:	2329      	movs	r3, #41	; 0x29
 800bfe8:	7003      	strb	r3, [r0, #0]
 800bfea:	6069      	str	r1, [r5, #4]
 800bfec:	812a      	strh	r2, [r5, #8]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800bfee:	4619      	mov	r1, r3
 800bff0:	4809      	ldr	r0, [pc, #36]	; (800c018 <BLE_FiniteStateMachineUpdate+0x130>)
 800bff2:	f000 fdb7 	bl	800cb64 <Stderr_Update>
}
 800bff6:	4630      	mov	r0, r6
 800bff8:	b007      	add	sp, #28
 800bffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffc:	20000304 	.word	0x20000304
 800c000:	20001f78 	.word	0x20001f78
 800c004:	20002020 	.word	0x20002020
 800c008:	08021664 	.word	0x08021664
 800c00c:	200011ac 	.word	0x200011ac
 800c010:	200012ac 	.word	0x200012ac
 800c014:	08021638 	.word	0x08021638
 800c018:	20002138 	.word	0x20002138
 800c01c:	20002238 	.word	0x20002238

0800c020 <Read_Request_FiniteStateMachine>:
{
 800c020:	b530      	push	{r4, r5, lr}
  if(CustomReadFiniteStateMachine != NULL) {
 800c022:	4b1c      	ldr	r3, [pc, #112]	; (800c094 <Read_Request_FiniteStateMachine+0x74>)
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 800c026:	b087      	sub	sp, #28
  if(CustomReadFiniteStateMachine != NULL) {
 800c028:	b173      	cbz	r3, 800c048 <Read_Request_FiniteStateMachine+0x28>
    CustomReadFiniteStateMachine(fsm_out, &fsm_status_a_mainpage,&fsm_status_b_mainpage);
 800c02a:	f10d 0207 	add.w	r2, sp, #7
 800c02e:	f10d 0106 	add.w	r1, sp, #6
 800c032:	a802      	add	r0, sp, #8
 800c034:	4798      	blx	r3
    BLE_FiniteStateMachineUpdate(fsm_out, &fsm_status_a_mainpage,&fsm_status_b_mainpage);
 800c036:	f10d 0207 	add.w	r2, sp, #7
 800c03a:	f10d 0106 	add.w	r1, sp, #6
 800c03e:	a802      	add	r0, sp, #8
 800c040:	f7ff ff52 	bl	800bee8 <BLE_FiniteStateMachineUpdate>
}
 800c044:	b007      	add	sp, #28
 800c046:	bd30      	pop	{r4, r5, pc}
    BLE_MANAGER_PRINTF("\r\n\nRead request FiniteStateMachine function not defined\r\n\n");
 800c048:	4d13      	ldr	r5, [pc, #76]	; (800c098 <Read_Request_FiniteStateMachine+0x78>)
 800c04a:	4c14      	ldr	r4, [pc, #80]	; (800c09c <Read_Request_FiniteStateMachine+0x7c>)
 800c04c:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800c050:	46ac      	mov	ip, r5
 800c052:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c056:	45f4      	cmp	ip, lr
 800c058:	f104 0410 	add.w	r4, r4, #16
 800c05c:	f105 0510 	add.w	r5, r5, #16
 800c060:	f844 0c10 	str.w	r0, [r4, #-16]
 800c064:	f844 1c0c 	str.w	r1, [r4, #-12]
 800c068:	f844 2c08 	str.w	r2, [r4, #-8]
 800c06c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c070:	d1ee      	bne.n	800c050 <Read_Request_FiniteStateMachine+0x30>
 800c072:	cd03      	ldmia	r5!, {r0, r1}
 800c074:	4a0a      	ldr	r2, [pc, #40]	; (800c0a0 <Read_Request_FiniteStateMachine+0x80>)
 800c076:	233a      	movs	r3, #58	; 0x3a
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	882a      	ldrh	r2, [r5, #0]
 800c07c:	8122      	strh	r2, [r4, #8]
 800c07e:	6020      	str	r0, [r4, #0]
 800c080:	78aa      	ldrb	r2, [r5, #2]
 800c082:	4806      	ldr	r0, [pc, #24]	; (800c09c <Read_Request_FiniteStateMachine+0x7c>)
 800c084:	6061      	str	r1, [r4, #4]
 800c086:	4619      	mov	r1, r3
 800c088:	72a2      	strb	r2, [r4, #10]
}
 800c08a:	b007      	add	sp, #28
 800c08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    BLE_MANAGER_PRINTF("\r\n\nRead request FiniteStateMachine function not defined\r\n\n");
 800c090:	f7f8 ba28 	b.w	80044e4 <CDC_Fill_Buffer>
 800c094:	20001f74 	.word	0x20001f74
 800c098:	08021690 	.word	0x08021690
 800c09c:	200011ac 	.word	0x200011ac
 800c0a0:	200012ac 	.word	0x200012ac

0800c0a4 <AttrMod_Request_Inertial>:
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Inertial(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if(CustomNotifyEventInertial!=NULL) {
 800c0a4:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <AttrMod_Request_Inertial+0x18>)
{
 800c0a6:	9a00      	ldr	r2, [sp, #0]
  if(CustomNotifyEventInertial!=NULL) {
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	b12b      	cbz	r3, 800c0b8 <AttrMod_Request_Inertial+0x14>
    if (att_data[0] == 01U) {
 800c0ac:	7810      	ldrb	r0, [r2, #0]
 800c0ae:	2801      	cmp	r0, #1
 800c0b0:	d001      	beq.n	800c0b6 <AttrMod_Request_Inertial+0x12>
      CustomNotifyEventInertial(BLE_NOTIFY_SUB);
    } else if (att_data[0] == 0U){
 800c0b2:	b908      	cbnz	r0, 800c0b8 <AttrMod_Request_Inertial+0x14>
      CustomNotifyEventInertial(BLE_NOTIFY_UNSUB);
 800c0b4:	2002      	movs	r0, #2
 800c0b6:	4718      	bx	r3
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Acc/Gyro/Mag=%s", (att_data[0] == 01U) ? " ON\r\n" : " OFF\r\n");
  }
#endif
}
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20001fa8 	.word	0x20001fa8

0800c0c0 <BLE_InitInertialService>:
{
 800c0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  InertialCharSize=2;
 800c0c4:	4c4b      	ldr	r4, [pc, #300]	; (800c1f4 <BLE_InitInertialService+0x134>)
 800c0c6:	f04f 0802 	mov.w	r8, #2
  if( (AccEnable == 1U) ||
 800c0ca:	2801      	cmp	r0, #1
{
 800c0cc:	460d      	mov	r5, r1
 800c0ce:	4616      	mov	r6, r2
  InertialCharSize=2;
 800c0d0:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
  InertialFeaturesEnabled.AccIsEnable = AccEnable;
 800c0d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  InertialFeaturesEnabled.GyroIsEnable= GyroEnable;
 800c0d8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  InertialFeaturesEnabled.MagIsEnabled= MagEnabled;
 800c0dc:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
  if( (AccEnable == 1U) ||
 800c0e0:	d04b      	beq.n	800c17a <BLE_InitInertialService+0xba>
 800c0e2:	2901      	cmp	r1, #1
 800c0e4:	d001      	beq.n	800c0ea <BLE_InitInertialService+0x2a>
     (GyroEnable == 1U)   ||
 800c0e6:	2a01      	cmp	r2, #1
 800c0e8:	d162      	bne.n	800c1b0 <BLE_InitInertialService+0xf0>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800c0ea:	2228      	movs	r2, #40	; 0x28
 800c0ec:	4842      	ldr	r0, [pc, #264]	; (800c1f8 <BLE_InitInertialService+0x138>)
 800c0ee:	4f43      	ldr	r7, [pc, #268]	; (800c1fc <BLE_InitInertialService+0x13c>)
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	f00f fb1d 	bl	801b730 <memset>
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Inertial;
 800c0f6:	4a42      	ldr	r2, [pc, #264]	; (800c200 <BLE_InitInertialService+0x140>)
 800c0f8:	6262      	str	r2, [r4, #36]	; 0x24
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c0fa:	4a42      	ldr	r2, [pc, #264]	; (800c204 <BLE_InitInertialService+0x144>)
 800c0fc:	6062      	str	r2, [r4, #4]
 800c0fe:	f64a 4236 	movw	r2, #44086	; 0xac36
 800c102:	8162      	strh	r2, [r4, #10]
 800c104:	f241 12e1 	movw	r2, #4577	; 0x11e1
 800c108:	2302      	movs	r3, #2
 800c10a:	81a2      	strh	r2, [r4, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	7223      	strb	r3, [r4, #8]
 800c110:	73a2      	strb	r2, [r4, #14]
    if(GyroEnable == 1U){
 800c112:	2d01      	cmp	r5, #1
 800c114:	d107      	bne.n	800c126 <BLE_InitInertialService+0x66>
      BleCharPointer->uuid[14] |= 0x40U;
 800c116:	7ca2      	ldrb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800c118:	3306      	adds	r3, #6
      BleCharPointer->uuid[14] |= 0x40U;
 800c11a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
      InertialCharSize+= 3U * 2U;
 800c11e:	b2db      	uxtb	r3, r3
      BleCharPointer->uuid[14] |= 0x40U;
 800c120:	74a2      	strb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800c122:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(MagEnabled == 1U){
 800c126:	2e01      	cmp	r6, #1
 800c128:	d107      	bne.n	800c13a <BLE_InitInertialService+0x7a>
      BleCharPointer->uuid[14] |= 0x20U;
 800c12a:	7ca2      	ldrb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800c12c:	3306      	adds	r3, #6
      BleCharPointer->uuid[14] |= 0x20U;
 800c12e:	f042 0220 	orr.w	r2, r2, #32
      InertialCharSize+= 3U * 2U;
 800c132:	b2db      	uxtb	r3, r3
      BleCharPointer->uuid[14] |= 0x20U;
 800c134:	74a2      	strb	r2, [r4, #18]
      InertialCharSize+= 3U * 2U;
 800c136:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    BleCharPointer->Char_Value_Length= InertialCharSize;
 800c13a:	82e3      	strh	r3, [r4, #22]
    BleCharPointer->Char_Properties=CHAR_PROP_NOTIFY;
 800c13c:	2310      	movs	r3, #16
 800c13e:	7623      	strb	r3, [r4, #24]
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800c140:	f241 0304 	movw	r3, #4100	; 0x1004
 800c144:	8363      	strh	r3, [r4, #26]
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800c146:	2202      	movs	r2, #2
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 800c148:	4b2f      	ldr	r3, [pc, #188]	; (800c208 <BLE_InitInertialService+0x148>)
 800c14a:	4d30      	ldr	r5, [pc, #192]	; (800c20c <BLE_InitInertialService+0x14c>)
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800c14c:	7522      	strb	r2, [r4, #20]
    BLE_MANAGER_PRINTF("BLE Inertial features ok\r\n");
 800c14e:	241a      	movs	r4, #26
 800c150:	601c      	str	r4, [r3, #0]
 800c152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c154:	4e2e      	ldr	r6, [pc, #184]	; (800c210 <BLE_InitInertialService+0x150>)
 800c156:	6030      	str	r0, [r6, #0]
 800c158:	6071      	str	r1, [r6, #4]
 800c15a:	cd03      	ldmia	r5!, {r0, r1}
 800c15c:	60f3      	str	r3, [r6, #12]
 800c15e:	882b      	ldrh	r3, [r5, #0]
 800c160:	8333      	strh	r3, [r6, #24]
 800c162:	78ab      	ldrb	r3, [r5, #2]
 800c164:	6130      	str	r0, [r6, #16]
 800c166:	6171      	str	r1, [r6, #20]
 800c168:	60b2      	str	r2, [r6, #8]
 800c16a:	4621      	mov	r1, r4
 800c16c:	76b3      	strb	r3, [r6, #26]
 800c16e:	4630      	mov	r0, r6
 800c170:	f7f8 f9b8 	bl	80044e4 <CDC_Fill_Buffer>
    BleCharPointer = &BleCharInertial;
 800c174:	4638      	mov	r0, r7
}
 800c176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17a:	4607      	mov	r7, r0
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800c17c:	2228      	movs	r2, #40	; 0x28
 800c17e:	2100      	movs	r1, #0
 800c180:	f104 0008 	add.w	r0, r4, #8
 800c184:	f00f fad4 	bl	801b730 <memset>
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c188:	f64a 4336 	movw	r3, #44086	; 0xac36
      BleCharPointer->uuid[14] |= 0x80U;
 800c18c:	2280      	movs	r2, #128	; 0x80
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c18e:	8163      	strh	r3, [r4, #10]
      BleCharPointer->uuid[14] |= 0x80U;
 800c190:	74a2      	strb	r2, [r4, #18]
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c192:	f241 13e1 	movw	r3, #4577	; 0x11e1
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Inertial;
 800c196:	4a1a      	ldr	r2, [pc, #104]	; (800c200 <BLE_InitInertialService+0x140>)
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c198:	81a3      	strh	r3, [r4, #12]
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Inertial;
 800c19a:	6262      	str	r2, [r4, #36]	; 0x24
      InertialCharSize+= 3U * 2U;
 800c19c:	2308      	movs	r3, #8
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c19e:	4a19      	ldr	r2, [pc, #100]	; (800c204 <BLE_InitInertialService+0x144>)
 800c1a0:	73a7      	strb	r7, [r4, #14]
 800c1a2:	f884 8008 	strb.w	r8, [r4, #8]
      InertialCharSize+= 3U * 2U;
 800c1a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    COPY_INERTIAL_CHAR_UUID((BleCharPointer->uuid));
 800c1aa:	6062      	str	r2, [r4, #4]
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800c1ac:	1d27      	adds	r7, r4, #4
 800c1ae:	e7b0      	b.n	800c112 <BLE_InitInertialService+0x52>
    BLE_MANAGER_PRINTF(" ERROR: None inertial features is enabled\r\n");
 800c1b0:	4e18      	ldr	r6, [pc, #96]	; (800c214 <BLE_InitInertialService+0x154>)
 800c1b2:	4d17      	ldr	r5, [pc, #92]	; (800c210 <BLE_InitInertialService+0x150>)
 800c1b4:	f106 0720 	add.w	r7, r6, #32
 800c1b8:	4634      	mov	r4, r6
 800c1ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1bc:	42bc      	cmp	r4, r7
 800c1be:	f105 0510 	add.w	r5, r5, #16
 800c1c2:	f106 0610 	add.w	r6, r6, #16
 800c1c6:	f845 0c10 	str.w	r0, [r5, #-16]
 800c1ca:	f845 1c0c 	str.w	r1, [r5, #-12]
 800c1ce:	f845 2c08 	str.w	r2, [r5, #-8]
 800c1d2:	f845 3c04 	str.w	r3, [r5, #-4]
 800c1d6:	d1ef      	bne.n	800c1b8 <BLE_InitInertialService+0xf8>
 800c1d8:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c1da:	4c0b      	ldr	r4, [pc, #44]	; (800c208 <BLE_InitInertialService+0x148>)
 800c1dc:	232b      	movs	r3, #43	; 0x2b
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	6028      	str	r0, [r5, #0]
 800c1e2:	6069      	str	r1, [r5, #4]
 800c1e4:	60aa      	str	r2, [r5, #8]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4809      	ldr	r0, [pc, #36]	; (800c210 <BLE_InitInertialService+0x150>)
 800c1ea:	f7f8 f97b 	bl	80044e4 <CDC_Fill_Buffer>
  BleCharTypeDef *BleCharPointer= NULL;
 800c1ee:	2000      	movs	r0, #0
}
 800c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f4:	20001fa8 	.word	0x20001fa8
 800c1f8:	20001fb0 	.word	0x20001fb0
 800c1fc:	20001fac 	.word	0x20001fac
 800c200:	0800c0a5 	.word	0x0800c0a5
 800c204:	a5d5c51b 	.word	0xa5d5c51b
 800c208:	200012ac 	.word	0x200012ac
 800c20c:	080216cc 	.word	0x080216cc
 800c210:	200011ac 	.word	0x200011ac
 800c214:	080216e8 	.word	0x080216e8

0800c218 <BLE_AccGyroMagUpdate>:
{
 800c218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c21c:	b087      	sub	sp, #28
 800c21e:	460e      	mov	r6, r1
 800c220:	4614      	mov	r4, r2
 800c222:	4605      	mov	r5, r0
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 800c224:	f7f9 ff1c 	bl	8006060 <HAL_GetTick>
 800c228:	08c3      	lsrs	r3, r0, #3
 800c22a:	f88d 3004 	strb.w	r3, [sp, #4]
 800c22e:	f7f9 ff17 	bl	8006060 <HAL_GetTick>
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 800c232:	4f61      	ldr	r7, [pc, #388]	; (800c3b8 <BLE_AccGyroMagUpdate+0x1a0>)
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 800c234:	0ac3      	lsrs	r3, r0, #11
 800c236:	f88d 3005 	strb.w	r3, [sp, #5]
  if(InertialFeaturesEnabled.AccIsEnable == 1U) {
 800c23a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d07e      	beq.n	800c340 <BLE_AccGyroMagUpdate+0x128>
  BuffPos= 2;
 800c242:	2302      	movs	r3, #2
  if(InertialFeaturesEnabled.GyroIsEnable == 1U) {
 800c244:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c248:	2a01      	cmp	r2, #1
 800c24a:	d138      	bne.n	800c2be <BLE_AccGyroMagUpdate+0xa6>
    Gyro->z/=100;
 800c24c:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
    Gyro->x/=100;
 800c250:	6830      	ldr	r0, [r6, #0]
 800c252:	4d5a      	ldr	r5, [pc, #360]	; (800c3bc <BLE_AccGyroMagUpdate+0x1a4>)
    BuffPos+= 2U;
 800c254:	f103 0e02 	add.w	lr, r3, #2
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->y));
 800c258:	f10d 0c18 	add.w	ip, sp, #24
 800c25c:	fa5c fe8e 	uxtab	lr, ip, lr
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 800c260:	f10d 0818 	add.w	r8, sp, #24
    BuffPos+= 2U;
 800c264:	f103 0c04 	add.w	ip, r3, #4
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 800c268:	fa58 fc8c 	uxtab	ip, r8, ip
    Gyro->x/=100;
 800c26c:	fb85 9800 	smull	r9, r8, r5, r0
 800c270:	17c0      	asrs	r0, r0, #31
 800c272:	ebc0 1068 	rsb	r0, r0, r8, asr #5
    Gyro->y/=100;
 800c276:	fb85 9801 	smull	r9, r8, r5, r1
 800c27a:	17c9      	asrs	r1, r1, #31
 800c27c:	ebc1 1168 	rsb	r1, r1, r8, asr #5
    Gyro->z/=100;
 800c280:	fb85 8502 	smull	r8, r5, r5, r2
 800c284:	17d2      	asrs	r2, r2, #31
 800c286:	ebc2 1265 	rsb	r2, r2, r5, asr #5
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->x));
 800c28a:	f103 0518 	add.w	r5, r3, #24
 800c28e:	446d      	add	r5, sp
    Gyro->x/=100;
 800c290:	6030      	str	r0, [r6, #0]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->x));
 800c292:	f805 0c14 	strb.w	r0, [r5, #-20]
 800c296:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c29a:	f805 0c13 	strb.w	r0, [r5, #-19]
    Gyro->z/=100;
 800c29e:	e9c6 1201 	strd	r1, r2, [r6, #4]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->y));
 800c2a2:	f80e 1c14 	strb.w	r1, [lr, #-20]
 800c2a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c2aa:	f80e 1c13 	strb.w	r1, [lr, #-19]
    BuffPos+= 2U;
 800c2ae:	3306      	adds	r3, #6
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 800c2b0:	f80c 2c14 	strb.w	r2, [ip, #-20]
 800c2b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    BuffPos+= 2U;
 800c2b8:	b2db      	uxtb	r3, r3
    STORE_LE_16(buff+BuffPos, ((uint16_t)Gyro->z));
 800c2ba:	f80c 2c13 	strb.w	r2, [ip, #-19]
  if(InertialFeaturesEnabled.MagIsEnabled == 1U) {
 800c2be:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c2c2:	2a01      	cmp	r2, #1
 800c2c4:	d11e      	bne.n	800c304 <BLE_AccGyroMagUpdate+0xec>
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->x));
 800c2c6:	f103 0118 	add.w	r1, r3, #24
 800c2ca:	6822      	ldr	r2, [r4, #0]
 800c2cc:	4469      	add	r1, sp
 800c2ce:	f801 2c14 	strb.w	r2, [r1, #-20]
 800c2d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c2d6:	f801 2c13 	strb.w	r2, [r1, #-19]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->z));
 800c2da:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
    BuffPos+= 2U;
 800c2de:	1c9a      	adds	r2, r3, #2
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 800c2e0:	ac06      	add	r4, sp, #24
 800c2e2:	fa54 f282 	uxtab	r2, r4, r2
    BuffPos+= 2U;
 800c2e6:	3304      	adds	r3, #4
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 800c2e8:	f802 1c14 	strb.w	r1, [r2, #-20]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->z));
 800c2ec:	fa54 f383 	uxtab	r3, r4, r3
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->y));
 800c2f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c2f4:	f802 1c13 	strb.w	r1, [r2, #-19]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Mag->z));
 800c2f8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800c2fc:	f803 0c14 	strb.w	r0, [r3, #-20]
 800c300:	f803 2c13 	strb.w	r2, [r3, #-19]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharInertial, 0, InertialCharSize, buff);
 800c304:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c308:	482d      	ldr	r0, [pc, #180]	; (800c3c0 <BLE_AccGyroMagUpdate+0x1a8>)
 800c30a:	ab01      	add	r3, sp, #4
 800c30c:	2100      	movs	r1, #0
 800c30e:	f000 fc05 	bl	800cb1c <safe_aci_gatt_update_char_value>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800c312:	4604      	mov	r4, r0
 800c314:	b180      	cbz	r0, 800c338 <BLE_AccGyroMagUpdate+0x120>
    if(ret != (tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES) {
 800c316:	2864      	cmp	r0, #100	; 0x64
 800c318:	d01d      	beq.n	800c356 <BLE_AccGyroMagUpdate+0x13e>
      if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800c31a:	4b2a      	ldr	r3, [pc, #168]	; (800c3c4 <BLE_AccGyroMagUpdate+0x1ac>)
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d028      	beq.n	800c374 <BLE_AccGyroMagUpdate+0x15c>
        BLE_MANAGER_PRINTF("Error: Updating Acc/Gyro/Mag Char ret=%x\r\n",ret);
 800c322:	4929      	ldr	r1, [pc, #164]	; (800c3c8 <BLE_AccGyroMagUpdate+0x1b0>)
 800c324:	4602      	mov	r2, r0
 800c326:	4829      	ldr	r0, [pc, #164]	; (800c3cc <BLE_AccGyroMagUpdate+0x1b4>)
 800c328:	f00f f8f0 	bl	801b50c <siprintf>
 800c32c:	4b28      	ldr	r3, [pc, #160]	; (800c3d0 <BLE_AccGyroMagUpdate+0x1b8>)
 800c32e:	4601      	mov	r1, r0
 800c330:	4826      	ldr	r0, [pc, #152]	; (800c3cc <BLE_AccGyroMagUpdate+0x1b4>)
 800c332:	6019      	str	r1, [r3, #0]
 800c334:	f7f8 f8d6 	bl	80044e4 <CDC_Fill_Buffer>
}
 800c338:	4620      	mov	r0, r4
 800c33a:	b007      	add	sp, #28
 800c33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->x));
 800c340:	882b      	ldrh	r3, [r5, #0]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->y));
 800c342:	88aa      	ldrh	r2, [r5, #4]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->x));
 800c344:	f8ad 3006 	strh.w	r3, [sp, #6]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->z));
 800c348:	892b      	ldrh	r3, [r5, #8]
 800c34a:	f8ad 300a 	strh.w	r3, [sp, #10]
    STORE_LE_16(buff+BuffPos, ((uint16_t)Acc->y));
 800c34e:	f8ad 2008 	strh.w	r2, [sp, #8]
    BuffPos+= 2U;
 800c352:	2308      	movs	r3, #8
 800c354:	e776      	b.n	800c244 <BLE_AccGyroMagUpdate+0x2c>
      BLE_MANAGER_PRINTF("Error: Updating Acc/Gyro/Mag Char ret=%x\r\n",ret);
 800c356:	4622      	mov	r2, r4
 800c358:	491b      	ldr	r1, [pc, #108]	; (800c3c8 <BLE_AccGyroMagUpdate+0x1b0>)
 800c35a:	481c      	ldr	r0, [pc, #112]	; (800c3cc <BLE_AccGyroMagUpdate+0x1b4>)
 800c35c:	f00f f8d6 	bl	801b50c <siprintf>
 800c360:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <BLE_AccGyroMagUpdate+0x1b8>)
 800c362:	481a      	ldr	r0, [pc, #104]	; (800c3cc <BLE_AccGyroMagUpdate+0x1b4>)
 800c364:	212a      	movs	r1, #42	; 0x2a
 800c366:	6019      	str	r1, [r3, #0]
 800c368:	f7f8 f8bc 	bl	80044e4 <CDC_Fill_Buffer>
}
 800c36c:	4620      	mov	r0, r4
 800c36e:	b007      	add	sp, #28
 800c370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\n");
 800c374:	4e17      	ldr	r6, [pc, #92]	; (800c3d4 <BLE_AccGyroMagUpdate+0x1bc>)
 800c376:	4d18      	ldr	r5, [pc, #96]	; (800c3d8 <BLE_AccGyroMagUpdate+0x1c0>)
 800c378:	f106 0720 	add.w	r7, r6, #32
 800c37c:	46b4      	mov	ip, r6
 800c37e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c382:	45bc      	cmp	ip, r7
 800c384:	f105 0510 	add.w	r5, r5, #16
 800c388:	f106 0610 	add.w	r6, r6, #16
 800c38c:	f845 0c10 	str.w	r0, [r5, #-16]
 800c390:	f845 1c0c 	str.w	r1, [r5, #-12]
 800c394:	f845 2c08 	str.w	r2, [r5, #-8]
 800c398:	f845 3c04 	str.w	r3, [r5, #-4]
 800c39c:	d1ee      	bne.n	800c37c <BLE_AccGyroMagUpdate+0x164>
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <BLE_AccGyroMagUpdate+0x1c4>)
 800c3a0:	8832      	ldrh	r2, [r6, #0]
 800c3a2:	802a      	strh	r2, [r5, #0]
 800c3a4:	2121      	movs	r1, #33	; 0x21
        Stderr_Update(BufferToWrite,BytesToWrite);
 800c3a6:	480c      	ldr	r0, [pc, #48]	; (800c3d8 <BLE_AccGyroMagUpdate+0x1c0>)
        BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\n");
 800c3a8:	7019      	strb	r1, [r3, #0]
        Stderr_Update(BufferToWrite,BytesToWrite);
 800c3aa:	f000 fbdb 	bl	800cb64 <Stderr_Update>
}
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	b007      	add	sp, #28
 800c3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20001fa8 	.word	0x20001fa8
 800c3bc:	51eb851f 	.word	0x51eb851f
 800c3c0:	20001fac 	.word	0x20001fac
 800c3c4:	20002020 	.word	0x20002020
 800c3c8:	08021738 	.word	0x08021738
 800c3cc:	200011ac 	.word	0x200011ac
 800c3d0:	200012ac 	.word	0x200012ac
 800c3d4:	08021714 	.word	0x08021714
 800c3d8:	20002138 	.word	0x20002138
 800c3dc:	20002238 	.word	0x20002238

0800c3e0 <AttrMod_Request_MachineLearningCore>:
 * @param  uint8_t *att_data attribute data
 * @retval None
 */
static void AttrMod_Request_MachineLearningCore(void *VoidCharPointer, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
  if(CustomNotifyEventMachineLearningCore != NULL)
 800c3e0:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <AttrMod_Request_MachineLearningCore+0x18>)
{
 800c3e2:	9a00      	ldr	r2, [sp, #0]
  if(CustomNotifyEventMachineLearningCore != NULL)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	b12b      	cbz	r3, 800c3f4 <AttrMod_Request_MachineLearningCore+0x14>
  {
    if (att_data[0] == 01U) {
 800c3e8:	7810      	ldrb	r0, [r2, #0]
 800c3ea:	2801      	cmp	r0, #1
 800c3ec:	d001      	beq.n	800c3f2 <AttrMod_Request_MachineLearningCore+0x12>
      CustomNotifyEventMachineLearningCore(BLE_NOTIFY_SUB);
    } else if (att_data[0] == 0U){
 800c3ee:	b908      	cbnz	r0, 800c3f4 <AttrMod_Request_MachineLearningCore+0x14>
      CustomNotifyEventMachineLearningCore(BLE_NOTIFY_UNSUB);
 800c3f0:	2002      	movs	r0, #2
 800c3f2:	4718      	bx	r3
   Term_Update(BufferToWrite,BytesToWrite);
 } else {
   BLE_MANAGER_PRINTF("--->MLC=%s", (att_data[0] == 01U) ? " ON\r\n" : " OFF\r\n");
 }
#endif
}
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	20001fe0 	.word	0x20001fe0

0800c3fc <BLE_InitMachineLearningCoreService>:
{
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800c3fe:	4c24      	ldr	r4, [pc, #144]	; (800c490 <BLE_InitMachineLearningCoreService+0x94>)
{
 800c400:	4605      	mov	r5, r0
  memset(BleCharPointer,0,sizeof(BleCharTypeDef));  
 800c402:	2228      	movs	r2, #40	; 0x28
 800c404:	2100      	movs	r1, #0
 800c406:	f104 0008 	add.w	r0, r4, #8
 800c40a:	f00f f991 	bl	801b730 <memset>
  BleNumReg = NumReg;
 800c40e:	4921      	ldr	r1, [pc, #132]	; (800c494 <BLE_InitMachineLearningCoreService+0x98>)
  BleCharPointer->AttrMod_Request_CB = AttrMod_Request_MachineLearningCore;
 800c410:	4821      	ldr	r0, [pc, #132]	; (800c498 <BLE_InitMachineLearningCoreService+0x9c>)
  BleNumReg = NumReg;
 800c412:	700d      	strb	r5, [r1, #0]
  BleCharPointer->Read_Request_CB = Read_Request_MachineLearningCore;
 800c414:	4921      	ldr	r1, [pc, #132]	; (800c49c <BLE_InitMachineLearningCoreService+0xa0>)
  if(CustomReadMachineLearningCore == NULL) {
 800c416:	6b22      	ldr	r2, [r4, #48]	; 0x30
  BleCharPointer->Read_Request_CB = Read_Request_MachineLearningCore;
 800c418:	e9c4 0109 	strd	r0, r1, [r4, #36]	; 0x24
  COPY_MACHINE_LEARNING_CORE_CHAR_UUID((BleCharPointer->uuid));
 800c41c:	4820      	ldr	r0, [pc, #128]	; (800c4a0 <BLE_InitMachineLearningCoreService+0xa4>)
 800c41e:	6060      	str	r0, [r4, #4]
 800c420:	f64a 4136 	movw	r1, #44086	; 0xac36
 800c424:	2302      	movs	r3, #2
 800c426:	f241 10e1 	movw	r0, #4577	; 0x11e1
    BleCharPointer->Char_Value_Length=2+8+1;
 800c42a:	2d01      	cmp	r5, #1
  COPY_MACHINE_LEARNING_CORE_CHAR_UUID((BleCharPointer->uuid));
 800c42c:	8161      	strh	r1, [r4, #10]
 800c42e:	f04f 010f 	mov.w	r1, #15
 800c432:	81a0      	strh	r0, [r4, #12]
 800c434:	7223      	strb	r3, [r4, #8]
 800c436:	73a3      	strb	r3, [r4, #14]
 800c438:	7421      	strb	r1, [r4, #16]
    BleCharPointer->Char_Value_Length=2+8+1;
 800c43a:	bf14      	ite	ne
 800c43c:	2007      	movne	r0, #7
 800c43e:	200b      	moveq	r0, #11
  BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800c440:	2112      	movs	r1, #18
  BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800c442:	7523      	strb	r3, [r4, #20]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800c444:	f241 0304 	movw	r3, #4100	; 0x1004
 800c448:	82e0      	strh	r0, [r4, #22]
  BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800c44a:	7621      	strb	r1, [r4, #24]
  BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800c44c:	8363      	strh	r3, [r4, #26]
  if(CustomReadMachineLearningCore == NULL) {
 800c44e:	b19a      	cbz	r2, 800c478 <BLE_InitMachineLearningCoreService+0x7c>
 800c450:	4f14      	ldr	r7, [pc, #80]	; (800c4a4 <BLE_InitMachineLearningCoreService+0xa8>)
  BLE_MANAGER_PRINTF("BLE MLC features ok\r\n");
 800c452:	4c15      	ldr	r4, [pc, #84]	; (800c4a8 <BLE_InitMachineLearningCoreService+0xac>)
 800c454:	4d15      	ldr	r5, [pc, #84]	; (800c4ac <BLE_InitMachineLearningCoreService+0xb0>)
 800c456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c458:	2615      	movs	r6, #21
 800c45a:	603e      	str	r6, [r7, #0]
 800c45c:	6028      	str	r0, [r5, #0]
 800c45e:	60aa      	str	r2, [r5, #8]
 800c460:	6820      	ldr	r0, [r4, #0]
 800c462:	88a2      	ldrh	r2, [r4, #4]
 800c464:	6069      	str	r1, [r5, #4]
 800c466:	6128      	str	r0, [r5, #16]
 800c468:	4631      	mov	r1, r6
 800c46a:	4628      	mov	r0, r5
 800c46c:	60eb      	str	r3, [r5, #12]
 800c46e:	82aa      	strh	r2, [r5, #20]
 800c470:	f7f8 f838 	bl	80044e4 <CDC_Fill_Buffer>
}
 800c474:	480e      	ldr	r0, [pc, #56]	; (800c4b0 <BLE_InitMachineLearningCoreService+0xb4>)
 800c476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_MANAGER_PRINTF("Warning: Read request Machine Learning Core function not defined\r\n");
 800c478:	490e      	ldr	r1, [pc, #56]	; (800c4b4 <BLE_InitMachineLearningCoreService+0xb8>)
 800c47a:	4f0a      	ldr	r7, [pc, #40]	; (800c4a4 <BLE_InitMachineLearningCoreService+0xa8>)
 800c47c:	480b      	ldr	r0, [pc, #44]	; (800c4ac <BLE_InitMachineLearningCoreService+0xb0>)
 800c47e:	2243      	movs	r2, #67	; 0x43
 800c480:	f00f fa0d 	bl	801b89e <memcpy>
 800c484:	2142      	movs	r1, #66	; 0x42
 800c486:	4809      	ldr	r0, [pc, #36]	; (800c4ac <BLE_InitMachineLearningCoreService+0xb0>)
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	f7f8 f82b 	bl	80044e4 <CDC_Fill_Buffer>
 800c48e:	e7e0      	b.n	800c452 <BLE_InitMachineLearningCoreService+0x56>
 800c490:	20001fe0 	.word	0x20001fe0
 800c494:	20000305 	.word	0x20000305
 800c498:	0800c3e1 	.word	0x0800c3e1
 800c49c:	0800c5d5 	.word	0x0800c5d5
 800c4a0:	a5d5c51b 	.word	0xa5d5c51b
 800c4a4:	200012ac 	.word	0x200012ac
 800c4a8:	080217a8 	.word	0x080217a8
 800c4ac:	200011ac 	.word	0x200011ac
 800c4b0:	20001fe4 	.word	0x20001fe4
 800c4b4:	08021764 	.word	0x08021764

0800c4b8 <BLE_MachineLearningCoreUpdate>:
{
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	460d      	mov	r5, r1
 800c4be:	4604      	mov	r4, r0
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800c4c0:	f7f9 fdce 	bl	8006060 <HAL_GetTick>
 800c4c4:	08c0      	lsrs	r0, r0, #3
 800c4c6:	f88d 0004 	strb.w	r0, [sp, #4]
 800c4ca:	f7f9 fdc9 	bl	8006060 <HAL_GetTick>
  if(BleNumReg==BLE_MLC_8_REG) {
 800c4ce:	4b38      	ldr	r3, [pc, #224]	; (800c5b0 <BLE_MachineLearningCoreUpdate+0xf8>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800c4d2:	0ac0      	lsrs	r0, r0, #11
  if(BleNumReg==BLE_MLC_8_REG) {
 800c4d4:	2b01      	cmp	r3, #1
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800c4d6:	f88d 0005 	strb.w	r0, [sp, #5]
  if(BleNumReg==BLE_MLC_8_REG) {
 800c4da:	d034      	beq.n	800c546 <BLE_MachineLearningCoreUpdate+0x8e>
    buff[6] = *mlc_status_mainpage;
 800c4dc:	7829      	ldrb	r1, [r5, #0]
    memcpy(buff+2,mlc_out, 4U*sizeof(uint8_t));
 800c4de:	6824      	ldr	r4, [r4, #0]
    buff[6] = *mlc_status_mainpage;
 800c4e0:	f88d 100a 	strb.w	r1, [sp, #10]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharMachineLearningCore, 0, 2+4+1, buff);
 800c4e4:	4833      	ldr	r0, [pc, #204]	; (800c5b4 <BLE_MachineLearningCoreUpdate+0xfc>)
    memcpy(buff+2,mlc_out, 4U*sizeof(uint8_t));
 800c4e6:	f8cd 4006 	str.w	r4, [sp, #6]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharMachineLearningCore, 0, 2+4+1, buff);
 800c4ea:	ab01      	add	r3, sp, #4
 800c4ec:	2207      	movs	r2, #7
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	f000 fb14 	bl	800cb1c <safe_aci_gatt_update_char_value>
 800c4f4:	4606      	mov	r6, r0
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800c4f6:	b31e      	cbz	r6, 800c540 <BLE_MachineLearningCoreUpdate+0x88>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800c4f8:	4b2f      	ldr	r3, [pc, #188]	; (800c5b8 <BLE_MachineLearningCoreUpdate+0x100>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d033      	beq.n	800c568 <BLE_MachineLearningCoreUpdate+0xb0>
      BLE_MANAGER_PRINTF("Error Updating Machine Learning Core Char\r\n");
 800c500:	4d2e      	ldr	r5, [pc, #184]	; (800c5bc <BLE_MachineLearningCoreUpdate+0x104>)
 800c502:	4c2f      	ldr	r4, [pc, #188]	; (800c5c0 <BLE_MachineLearningCoreUpdate+0x108>)
 800c504:	f105 0720 	add.w	r7, r5, #32
 800c508:	46ac      	mov	ip, r5
 800c50a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c50e:	45bc      	cmp	ip, r7
 800c510:	f104 0410 	add.w	r4, r4, #16
 800c514:	f105 0510 	add.w	r5, r5, #16
 800c518:	f844 0c10 	str.w	r0, [r4, #-16]
 800c51c:	f844 1c0c 	str.w	r1, [r4, #-12]
 800c520:	f844 2c08 	str.w	r2, [r4, #-8]
 800c524:	f844 3c04 	str.w	r3, [r4, #-4]
 800c528:	d1ee      	bne.n	800c508 <BLE_MachineLearningCoreUpdate+0x50>
 800c52a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c52c:	6020      	str	r0, [r4, #0]
 800c52e:	4825      	ldr	r0, [pc, #148]	; (800c5c4 <BLE_MachineLearningCoreUpdate+0x10c>)
 800c530:	232b      	movs	r3, #43	; 0x2b
 800c532:	6003      	str	r3, [r0, #0]
 800c534:	6061      	str	r1, [r4, #4]
 800c536:	4822      	ldr	r0, [pc, #136]	; (800c5c0 <BLE_MachineLearningCoreUpdate+0x108>)
 800c538:	60a2      	str	r2, [r4, #8]
 800c53a:	4619      	mov	r1, r3
 800c53c:	f7f7 ffd2 	bl	80044e4 <CDC_Fill_Buffer>
}
 800c540:	4630      	mov	r0, r6
 800c542:	b005      	add	sp, #20
 800c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(buff+2,mlc_out, 8U*sizeof(uint8_t));
 800c546:	6821      	ldr	r1, [r4, #0]
 800c548:	6862      	ldr	r2, [r4, #4]
 800c54a:	f8cd 1006 	str.w	r1, [sp, #6]
    buff[10] = *mlc_status_mainpage;
 800c54e:	782c      	ldrb	r4, [r5, #0]
    memcpy(buff+2,mlc_out, 8U*sizeof(uint8_t));
 800c550:	f8cd 200a 	str.w	r2, [sp, #10]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharMachineLearningCore, 0, 2+8+1, buff);
 800c554:	4817      	ldr	r0, [pc, #92]	; (800c5b4 <BLE_MachineLearningCoreUpdate+0xfc>)
    buff[10] = *mlc_status_mainpage;
 800c556:	f88d 400e 	strb.w	r4, [sp, #14]
    ret = ACI_GATT_UPDATE_CHAR_VALUE(&BleCharMachineLearningCore, 0, 2+8+1, buff);
 800c55a:	ab01      	add	r3, sp, #4
 800c55c:	220b      	movs	r2, #11
 800c55e:	2100      	movs	r1, #0
 800c560:	f000 fadc 	bl	800cb1c <safe_aci_gatt_update_char_value>
 800c564:	4606      	mov	r6, r0
 800c566:	e7c6      	b.n	800c4f6 <BLE_MachineLearningCoreUpdate+0x3e>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Machine Learning Core Char\n");
 800c568:	4f17      	ldr	r7, [pc, #92]	; (800c5c8 <BLE_MachineLearningCoreUpdate+0x110>)
 800c56a:	4d18      	ldr	r5, [pc, #96]	; (800c5cc <BLE_MachineLearningCoreUpdate+0x114>)
 800c56c:	f107 0c20 	add.w	ip, r7, #32
 800c570:	463c      	mov	r4, r7
 800c572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c574:	4564      	cmp	r4, ip
 800c576:	f105 0510 	add.w	r5, r5, #16
 800c57a:	f107 0710 	add.w	r7, r7, #16
 800c57e:	f845 0c10 	str.w	r0, [r5, #-16]
 800c582:	f845 1c0c 	str.w	r1, [r5, #-12]
 800c586:	f845 2c08 	str.w	r2, [r5, #-8]
 800c58a:	f845 3c04 	str.w	r3, [r5, #-4]
 800c58e:	d1ef      	bne.n	800c570 <BLE_MachineLearningCoreUpdate+0xb8>
 800c590:	cf03      	ldmia	r7!, {r0, r1}
 800c592:	883b      	ldrh	r3, [r7, #0]
 800c594:	812b      	strh	r3, [r5, #8]
 800c596:	78ba      	ldrb	r2, [r7, #2]
 800c598:	4b0d      	ldr	r3, [pc, #52]	; (800c5d0 <BLE_MachineLearningCoreUpdate+0x118>)
 800c59a:	6028      	str	r0, [r5, #0]
 800c59c:	6069      	str	r1, [r5, #4]
 800c59e:	72aa      	strb	r2, [r5, #10]
 800c5a0:	212a      	movs	r1, #42	; 0x2a
      Stderr_Update(BufferToWrite,BytesToWrite);
 800c5a2:	480a      	ldr	r0, [pc, #40]	; (800c5cc <BLE_MachineLearningCoreUpdate+0x114>)
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Machine Learning Core Char\n");
 800c5a4:	7019      	strb	r1, [r3, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800c5a6:	f000 fadd 	bl	800cb64 <Stderr_Update>
}
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	b005      	add	sp, #20
 800c5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b0:	20000305 	.word	0x20000305
 800c5b4:	20001fe4 	.word	0x20001fe4
 800c5b8:	20002020 	.word	0x20002020
 800c5bc:	080217ec 	.word	0x080217ec
 800c5c0:	200011ac 	.word	0x200011ac
 800c5c4:	200012ac 	.word	0x200012ac
 800c5c8:	080217c0 	.word	0x080217c0
 800c5cc:	20002138 	.word	0x20002138
 800c5d0:	20002238 	.word	0x20002238

0800c5d4 <Read_Request_MachineLearningCore>:
{
 800c5d4:	b530      	push	{r4, r5, lr}
  if(CustomReadMachineLearningCore != NULL) {
 800c5d6:	4b19      	ldr	r3, [pc, #100]	; (800c63c <Read_Request_MachineLearningCore+0x68>)
 800c5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 800c5da:	b085      	sub	sp, #20
  if(CustomReadMachineLearningCore != NULL) {
 800c5dc:	b153      	cbz	r3, 800c5f4 <Read_Request_MachineLearningCore+0x20>
    CustomReadMachineLearningCore(mlc_out, &mlc_status_mainpage);
 800c5de:	f10d 0107 	add.w	r1, sp, #7
 800c5e2:	a802      	add	r0, sp, #8
 800c5e4:	4798      	blx	r3
    BLE_MachineLearningCoreUpdate(mlc_out, &mlc_status_mainpage);
 800c5e6:	f10d 0107 	add.w	r1, sp, #7
 800c5ea:	a802      	add	r0, sp, #8
 800c5ec:	f7ff ff64 	bl	800c4b8 <BLE_MachineLearningCoreUpdate>
}
 800c5f0:	b005      	add	sp, #20
 800c5f2:	bd30      	pop	{r4, r5, pc}
    BLE_MANAGER_PRINTF("\r\n\nRead request MachineLearningCore function not defined\r\n\n");
 800c5f4:	4d12      	ldr	r5, [pc, #72]	; (800c640 <Read_Request_MachineLearningCore+0x6c>)
 800c5f6:	4c13      	ldr	r4, [pc, #76]	; (800c644 <Read_Request_MachineLearningCore+0x70>)
 800c5f8:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800c5fc:	46ac      	mov	ip, r5
 800c5fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c602:	45f4      	cmp	ip, lr
 800c604:	f104 0410 	add.w	r4, r4, #16
 800c608:	f105 0510 	add.w	r5, r5, #16
 800c60c:	f844 0c10 	str.w	r0, [r4, #-16]
 800c610:	f844 1c0c 	str.w	r1, [r4, #-12]
 800c614:	f844 2c08 	str.w	r2, [r4, #-8]
 800c618:	f844 3c04 	str.w	r3, [r4, #-4]
 800c61c:	d1ee      	bne.n	800c5fc <Read_Request_MachineLearningCore+0x28>
 800c61e:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c620:	4d09      	ldr	r5, [pc, #36]	; (800c648 <Read_Request_MachineLearningCore+0x74>)
 800c622:	233b      	movs	r3, #59	; 0x3b
 800c624:	602b      	str	r3, [r5, #0]
 800c626:	6020      	str	r0, [r4, #0]
 800c628:	4806      	ldr	r0, [pc, #24]	; (800c644 <Read_Request_MachineLearningCore+0x70>)
 800c62a:	6061      	str	r1, [r4, #4]
 800c62c:	4619      	mov	r1, r3
 800c62e:	60a2      	str	r2, [r4, #8]
}
 800c630:	b005      	add	sp, #20
 800c632:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    BLE_MANAGER_PRINTF("\r\n\nRead request MachineLearningCore function not defined\r\n\n");
 800c636:	f7f7 bf55 	b.w	80044e4 <CDC_Fill_Buffer>
 800c63a:	bf00      	nop
 800c63c:	20001fe0 	.word	0x20001fe0
 800c640:	08021818 	.word	0x08021818
 800c644:	200011ac 	.word	0x200011ac
 800c648:	200012ac 	.word	0x200012ac

0800c64c <AttrMod_Request_Config>:
* @param  uint8_t data_length length of the data
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Config(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 800c64c:	9800      	ldr	r0, [sp, #0]
  if (att_data[0] == (uint8_t)01) {
 800c64e:	7802      	ldrb	r2, [r0, #0]
 800c650:	2a01      	cmp	r2, #1
{
 800c652:	4619      	mov	r1, r3
    BLE_Conf_Service= BLE_SERV_ENABLE;
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <AttrMod_Request_Config+0x20>)
  if (att_data[0] == (uint8_t)01) {
 800c656:	d003      	beq.n	800c660 <AttrMod_Request_Config+0x14>
  } else if (att_data[0] == 0U){
 800c658:	b112      	cbz	r2, 800c660 <AttrMod_Request_Config+0x14>
    BLE_Conf_Service= BLE_SERV_NOT_ENABLE;
  }
  
  if(CustomAttrModConfigCallback!=NULL) {
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	b123      	cbz	r3, 800c668 <AttrMod_Request_Config+0x1c>
    CustomAttrModConfigCallback(att_data,data_length);
 800c65e:	4718      	bx	r3
    BLE_Conf_Service= BLE_SERV_NOT_ENABLE;
 800c660:	701a      	strb	r2, [r3, #0]
  if(CustomAttrModConfigCallback!=NULL) {
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1fa      	bne.n	800c65e <AttrMod_Request_Config+0x12>
    Term_Update(BufferToWrite,BytesToWrite);
  } else {
    BLE_MANAGER_PRINTF("--->Conf=%s\r\n", (BLE_Conf_Service == BLE_SERV_ENABLE) ? "ON" : "OFF");
  }
#endif
}
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	20002014 	.word	0x20002014

0800c670 <Write_Request_Config>:
* @retval None
*/
static void Write_Request_Config(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{ 
  /* Received one write command from Client on Configuration characteristc */
  if(CustomWriteRequestConfigCallback!=NULL) {
 800c670:	4a03      	ldr	r2, [pc, #12]	; (800c680 <Write_Request_Config+0x10>)
{ 
 800c672:	9800      	ldr	r0, [sp, #0]
  if(CustomWriteRequestConfigCallback!=NULL) {
 800c674:	6892      	ldr	r2, [r2, #8]
{ 
 800c676:	4619      	mov	r1, r3
  if(CustomWriteRequestConfigCallback!=NULL) {
 800c678:	b102      	cbz	r2, 800c67c <Write_Request_Config+0xc>
    CustomWriteRequestConfigCallback(att_data,data_length);
 800c67a:	4710      	bx	r2
  }
}
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20002014 	.word	0x20002014

0800c684 <AttrMod_Request_StdErr>:
* @param  uint8_t data_length length of the data
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_StdErr(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 800c684:	9b00      	ldr	r3, [sp, #0]
  if (att_data[0] == 01U) {
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d000      	beq.n	800c68e <AttrMod_Request_StdErr+0xa>
    BLE_StdErr_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
 800c68c:	b90b      	cbnz	r3, 800c692 <AttrMod_Request_StdErr+0xe>
    BLE_StdErr_Service= BLE_SERV_NOT_ENABLE;
 800c68e:	4a01      	ldr	r2, [pc, #4]	; (800c694 <AttrMod_Request_StdErr+0x10>)
 800c690:	7313      	strb	r3, [r2, #12]
  }
}
 800c692:	4770      	bx	lr
 800c694:	20002014 	.word	0x20002014

0800c698 <AttrMod_Request_Term>:
* @param  uint8_t data_length length of the data
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_Term(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 800c698:	9b00      	ldr	r3, [sp, #0]
  if (att_data[0] == 01U) {
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d000      	beq.n	800c6a2 <AttrMod_Request_Term+0xa>
    BLE_StdTerm_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
 800c6a0:	b90b      	cbnz	r3, 800c6a6 <AttrMod_Request_Term+0xe>
    BLE_StdTerm_Service= BLE_SERV_NOT_ENABLE;
 800c6a2:	4a01      	ldr	r2, [pc, #4]	; (800c6a8 <AttrMod_Request_Term+0x10>)
 800c6a4:	7353      	strb	r3, [r2, #13]
  }
}
 800c6a6:	4770      	bx	lr
 800c6a8:	20002014 	.word	0x20002014

0800c6ac <AttrMod_Request_ExtConfig>:
* @param  uint8_t data_length length of the data
* @param  uint8_t *att_data attribute data
* @retval None
*/
static void AttrMod_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 800c6ac:	9b00      	ldr	r3, [sp, #0]
  if (att_data[0] == 01U) {
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d000      	beq.n	800c6b6 <AttrMod_Request_ExtConfig+0xa>
    BLE_ExtConf_Service= BLE_SERV_ENABLE;
  } else if (att_data[0] == 0U){
 800c6b4:	b90b      	cbnz	r3, 800c6ba <AttrMod_Request_ExtConfig+0xe>
    BLE_ExtConf_Service= BLE_SERV_NOT_ENABLE;
 800c6b6:	4a01      	ldr	r2, [pc, #4]	; (800c6bc <AttrMod_Request_ExtConfig+0x10>)
 800c6b8:	7393      	strb	r3, [r2, #14]
  }
}
 800c6ba:	4770      	bx	lr
 800c6bc:	20002014 	.word	0x20002014

0800c6c0 <APP_UserEvtRx>:
/** @brief HCI Transport layer user function
* @param void *pData pointer to HCI event data
* @retval None
*/
static void APP_UserEvtRx(void *pData)
{
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t i;
  
  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
  
  if(hci_pckt->type == (uint8_t)HCI_EVENT_PKT) {
 800c6c2:	7803      	ldrb	r3, [r0, #0]
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d000      	beq.n	800c6ca <APP_UserEvtRx+0xa>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800c6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(event_pckt->evt == (uint8_t)EVT_LE_META_EVENT) {
 800c6ca:	7843      	ldrb	r3, [r0, #1]
 800c6cc:	2b3e      	cmp	r3, #62	; 0x3e
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	d021      	beq.n	800c716 <APP_UserEvtRx+0x56>
    } else if(event_pckt->evt == (uint8_t)EVT_VENDOR) {
 800c6d2:	2bff      	cmp	r3, #255	; 0xff
 800c6d4:	d00f      	beq.n	800c6f6 <APP_UserEvtRx+0x36>
 800c6d6:	4c17      	ldr	r4, [pc, #92]	; (800c734 <APP_UserEvtRx+0x74>)
          hci_events_table[i].process((void *)event_pckt->data);
 800c6d8:	1cc7      	adds	r7, r0, #3
 800c6da:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800c6de:	e000      	b.n	800c6e2 <APP_UserEvtRx+0x22>
        if (event_pckt->evt == hci_events_table[i].evt_code) {
 800c6e0:	786b      	ldrb	r3, [r5, #1]
 800c6e2:	8822      	ldrh	r2, [r4, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d102      	bne.n	800c6ee <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
 800c6e8:	6863      	ldr	r3, [r4, #4]
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++) {
 800c6ee:	3408      	adds	r4, #8
 800c6f0:	42b4      	cmp	r4, r6
 800c6f2:	d1f5      	bne.n	800c6e0 <APP_UserEvtRx+0x20>
}
 800c6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6f6:	4c10      	ldr	r4, [pc, #64]	; (800c738 <APP_UserEvtRx+0x78>)
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800c6f8:	1d47      	adds	r7, r0, #5
 800c6fa:	f504 76ac 	add.w	r6, r4, #344	; 0x158
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code) {
 800c6fe:	8823      	ldrh	r3, [r4, #0]
 800c700:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 800c704:	429a      	cmp	r2, r3
 800c706:	d102      	bne.n	800c70e <APP_UserEvtRx+0x4e>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800c708:	6863      	ldr	r3, [r4, #4]
 800c70a:	4638      	mov	r0, r7
 800c70c:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++) {
 800c70e:	3408      	adds	r4, #8
 800c710:	42b4      	cmp	r4, r6
 800c712:	d1f4      	bne.n	800c6fe <APP_UserEvtRx+0x3e>
}
 800c714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c716:	4c09      	ldr	r4, [pc, #36]	; (800c73c <APP_UserEvtRx+0x7c>)
          hci_le_meta_events_table[i].process((void *)evt->data);
 800c718:	1d07      	adds	r7, r0, #4
 800c71a:	f104 0650 	add.w	r6, r4, #80	; 0x50
        if (evt->subevent == hci_le_meta_events_table[i].evt_code) {
 800c71e:	8823      	ldrh	r3, [r4, #0]
 800c720:	78ea      	ldrb	r2, [r5, #3]
 800c722:	429a      	cmp	r2, r3
 800c724:	d102      	bne.n	800c72c <APP_UserEvtRx+0x6c>
          hci_le_meta_events_table[i].process((void *)evt->data);
 800c726:	6863      	ldr	r3, [r4, #4]
 800c728:	4638      	mov	r0, r7
 800c72a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++) {
 800c72c:	3408      	adds	r4, #8
 800c72e:	42b4      	cmp	r4, r6
 800c730:	d1f5      	bne.n	800c71e <APP_UserEvtRx+0x5e>
}
 800c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c734:	080200d8 	.word	0x080200d8
 800c738:	0801ff30 	.word	0x0801ff30
 800c73c:	08020088 	.word	0x08020088

0800c740 <Read_Request_StdErr>:
{
 800c740:	b510      	push	{r4, lr}
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastStderrLen , LastStderrBuffer);
 800c742:	4c09      	ldr	r4, [pc, #36]	; (800c768 <Read_Request_StdErr+0x28>)
  if (breath==0){
 800c744:	6922      	ldr	r2, [r4, #16]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastStderrLen , LastStderrBuffer);
 800c746:	7be3      	ldrb	r3, [r4, #15]
{
 800c748:	b082      	sub	sp, #8
  if (breath==0){
 800c74a:	b952      	cbnz	r2, 800c762 <Read_Request_StdErr+0x22>
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800c74c:	f104 0114 	add.w	r1, r4, #20
 800c750:	9100      	str	r1, [sp, #0]
 800c752:	8b41      	ldrh	r1, [r0, #26]
 800c754:	8b80      	ldrh	r0, [r0, #28]
 800c756:	f002 ffe1 	bl	800f71c <aci_gatt_update_char_value>
      if(ret==(tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES){
 800c75a:	2864      	cmp	r0, #100	; 0x64
        breath = 1;
 800c75c:	bf04      	itt	eq
 800c75e:	2301      	moveq	r3, #1
 800c760:	6123      	streq	r3, [r4, #16]
}
 800c762:	b002      	add	sp, #8
 800c764:	bd10      	pop	{r4, pc}
 800c766:	bf00      	nop
 800c768:	20002014 	.word	0x20002014

0800c76c <UpdateTermStdErr>:
{
 800c76c:	b530      	push	{r4, r5, lr}
  if (breath==0){
 800c76e:	4c15      	ldr	r4, [pc, #84]	; (800c7c4 <UpdateTermStdErr+0x58>)
 800c770:	6922      	ldr	r2, [r4, #16]
{
 800c772:	b083      	sub	sp, #12
  if (breath==0){
 800c774:	b1b2      	cbz	r2, 800c7a4 <UpdateTermStdErr+0x38>
    BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800c776:	4c14      	ldr	r4, [pc, #80]	; (800c7c8 <UpdateTermStdErr+0x5c>)
 800c778:	4d14      	ldr	r5, [pc, #80]	; (800c7cc <UpdateTermStdErr+0x60>)
 800c77a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c77c:	6028      	str	r0, [r5, #0]
 800c77e:	6069      	str	r1, [r5, #4]
 800c780:	60aa      	str	r2, [r5, #8]
 800c782:	cc07      	ldmia	r4!, {r0, r1, r2}
 800c784:	6128      	str	r0, [r5, #16]
 800c786:	4812      	ldr	r0, [pc, #72]	; (800c7d0 <UpdateTermStdErr+0x64>)
 800c788:	60eb      	str	r3, [r5, #12]
 800c78a:	231d      	movs	r3, #29
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	8824      	ldrh	r4, [r4, #0]
 800c790:	6169      	str	r1, [r5, #20]
 800c792:	4628      	mov	r0, r5
 800c794:	4619      	mov	r1, r3
 800c796:	61aa      	str	r2, [r5, #24]
 800c798:	83ac      	strh	r4, [r5, #28]
 800c79a:	f7f7 fea3 	bl	80044e4 <CDC_Fill_Buffer>
 800c79e:	2047      	movs	r0, #71	; 0x47
}
 800c7a0:	b003      	add	sp, #12
 800c7a2:	bd30      	pop	{r4, r5, pc}
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 800c7aa:	9000      	str	r0, [sp, #0]
 800c7ac:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 800c7b0:	f002 ffb4 	bl	800f71c <aci_gatt_update_char_value>
 800c7b4:	4603      	mov	r3, r0
    if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d0f2      	beq.n	800c7a0 <UpdateTermStdErr+0x34>
      if(ret==(tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES){
 800c7ba:	2864      	cmp	r0, #100	; 0x64
        breath = 1;
 800c7bc:	bf04      	itt	eq
 800c7be:	2301      	moveq	r3, #1
 800c7c0:	6123      	streq	r3, [r4, #16]
  return ret;
 800c7c2:	e7d8      	b.n	800c776 <UpdateTermStdErr+0xa>
 800c7c4:	20002014 	.word	0x20002014
 800c7c8:	0802190c 	.word	0x0802190c
 800c7cc:	200011ac 	.word	0x200011ac
 800c7d0:	200012ac 	.word	0x200012ac

0800c7d4 <UpdateTermStdOut>:
{
 800c7d4:	b530      	push	{r4, r5, lr}
  if (breath==0){
 800c7d6:	4c15      	ldr	r4, [pc, #84]	; (800c82c <UpdateTermStdOut+0x58>)
 800c7d8:	6922      	ldr	r2, [r4, #16]
{
 800c7da:	b083      	sub	sp, #12
  if (breath==0){
 800c7dc:	b1b2      	cbz	r2, 800c80c <UpdateTermStdOut+0x38>
    BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800c7de:	4c14      	ldr	r4, [pc, #80]	; (800c830 <UpdateTermStdOut+0x5c>)
 800c7e0:	4d14      	ldr	r5, [pc, #80]	; (800c834 <UpdateTermStdOut+0x60>)
 800c7e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7e4:	6028      	str	r0, [r5, #0]
 800c7e6:	6069      	str	r1, [r5, #4]
 800c7e8:	60aa      	str	r2, [r5, #8]
 800c7ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 800c7ec:	6128      	str	r0, [r5, #16]
 800c7ee:	4812      	ldr	r0, [pc, #72]	; (800c838 <UpdateTermStdOut+0x64>)
 800c7f0:	60eb      	str	r3, [r5, #12]
 800c7f2:	231d      	movs	r3, #29
 800c7f4:	6003      	str	r3, [r0, #0]
 800c7f6:	8824      	ldrh	r4, [r4, #0]
 800c7f8:	6169      	str	r1, [r5, #20]
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	61aa      	str	r2, [r5, #24]
 800c800:	83ac      	strh	r4, [r5, #28]
 800c802:	f7f7 fe6f 	bl	80044e4 <CDC_Fill_Buffer>
 800c806:	2047      	movs	r0, #71	; 0x47
}
 800c808:	b003      	add	sp, #12
 800c80a:	bd30      	pop	{r4, r5, pc}
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800c80c:	460b      	mov	r3, r1
 800c80e:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
 800c812:	9000      	str	r0, [sp, #0]
 800c814:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
 800c818:	f002 ff80 	bl	800f71c <aci_gatt_update_char_value>
 800c81c:	4603      	mov	r3, r0
    if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800c81e:	2800      	cmp	r0, #0
 800c820:	d0f2      	beq.n	800c808 <UpdateTermStdOut+0x34>
      if(ret==(tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES){
 800c822:	2864      	cmp	r0, #100	; 0x64
        breath = 1;
 800c824:	bf04      	itt	eq
 800c826:	2301      	moveq	r3, #1
 800c828:	6123      	streq	r3, [r4, #16]
  return ret;
 800c82a:	e7d8      	b.n	800c7de <UpdateTermStdOut+0xa>
 800c82c:	20002014 	.word	0x20002014
 800c830:	0802190c 	.word	0x0802190c
 800c834:	200011ac 	.word	0x200011ac
 800c838:	200012ac 	.word	0x200012ac

0800c83c <ClearSingleCommand>:
{
 800c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(Command->NextCommand!=NULL) {
 800c83e:	6885      	ldr	r5, [r0, #8]
{
 800c840:	4604      	mov	r4, r0
  if(Command->NextCommand!=NULL) {
 800c842:	b1cd      	cbz	r5, 800c878 <ClearSingleCommand+0x3c>
 800c844:	68ae      	ldr	r6, [r5, #8]
 800c846:	b18e      	cbz	r6, 800c86c <ClearSingleCommand+0x30>
 800c848:	68b7      	ldr	r7, [r6, #8]
 800c84a:	b14f      	cbz	r7, 800c860 <ClearSingleCommand+0x24>
 800c84c:	68b8      	ldr	r0, [r7, #8]
 800c84e:	b108      	cbz	r0, 800c854 <ClearSingleCommand+0x18>
    ClearSingleCommand((BLE_ExtCustomCommand_t *)Command->NextCommand);
 800c850:	f7ff fff4 	bl	800c83c <ClearSingleCommand>
  BLE_FreeFunction(Command->CommandName);
 800c854:	6838      	ldr	r0, [r7, #0]
 800c856:	f00c ff19 	bl	801968c <free>
  BLE_FreeFunction(Command);
 800c85a:	4638      	mov	r0, r7
 800c85c:	f00c ff16 	bl	801968c <free>
  BLE_FreeFunction(Command->CommandName);
 800c860:	6830      	ldr	r0, [r6, #0]
 800c862:	f00c ff13 	bl	801968c <free>
  BLE_FreeFunction(Command);
 800c866:	4630      	mov	r0, r6
 800c868:	f00c ff10 	bl	801968c <free>
  BLE_FreeFunction(Command->CommandName);
 800c86c:	6828      	ldr	r0, [r5, #0]
 800c86e:	f00c ff0d 	bl	801968c <free>
  BLE_FreeFunction(Command);
 800c872:	4628      	mov	r0, r5
 800c874:	f00c ff0a 	bl	801968c <free>
  BLE_FreeFunction(Command->CommandName);
 800c878:	6820      	ldr	r0, [r4, #0]
 800c87a:	f00c ff07 	bl	801968c <free>
  BLE_FreeFunction(Command);
 800c87e:	4620      	mov	r0, r4
}
 800c880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BLE_FreeFunction(Command);
 800c884:	f00c bf02 	b.w	801968c <free>

0800c888 <ParseCustomCommand>:
{
 800c888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c88c:	4604      	mov	r4, r0
 800c88e:	b083      	sub	sp, #12
  JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800c890:	4608      	mov	r0, r1
 800c892:	f005 fa69 	bl	8011d68 <json_parse_string>
 800c896:	4680      	mov	r8, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800c898:	f004 fd56 	bl	8011348 <json_value_get_object>
  while((ValidCustomCommand==0U) && (LocLastCustomCommand!=NULL)){
 800c89c:	2c00      	cmp	r4, #0
 800c89e:	d036      	beq.n	800c90e <ParseCustomCommand+0x86>
    if (strncmp(json_object_dotget_string(JSON_ParseHandler,"command"),LocLastCustomCommand->CommandName,strlen(json_object_dotget_string(JSON_ParseHandler,"command"))) == 0) {
 800c8a0:	4f8d      	ldr	r7, [pc, #564]	; (800cad8 <ParseCustomCommand+0x250>)
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f004 fcec 	bl	8011284 <json_object_dotget_string>
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f8d4 9000 	ldr.w	r9, [r4]
 800c8b6:	f004 fce5 	bl	8011284 <json_object_dotget_string>
 800c8ba:	f7f3 fd01 	bl	80002c0 <strlen>
 800c8be:	4649      	mov	r1, r9
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f00e ff49 	bl	801b75a <strncmp>
 800c8c8:	b9f0      	cbnz	r0, 800c908 <ParseCustomCommand+0x80>
    CommandResult = (BLE_CustomCommadResult_t *) BLE_MallocFunction(sizeof(BLE_CustomCommadResult_t));
 800c8ca:	2010      	movs	r0, #16
 800c8cc:	f00c fed6 	bl	801967c <malloc>
    if(CommandResult == NULL) {
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	f000 80e1 	beq.w	800ca9a <ParseCustomCommand+0x212>
    CommandResult->CommandName = (uint8_t*)BLE_MallocFunction(strlen((char*)LocLastCustomCommand->CommandName)+1U);
 800c8d8:	6821      	ldr	r1, [r4, #0]
 800c8da:	9101      	str	r1, [sp, #4]
 800c8dc:	4608      	mov	r0, r1
 800c8de:	f7f3 fcef 	bl	80002c0 <strlen>
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f00c feca 	bl	801967c <malloc>
    if(CommandResult->CommandName==NULL) {
 800c8e8:	9901      	ldr	r1, [sp, #4]
    CommandResult->CommandName = (uint8_t*)BLE_MallocFunction(strlen((char*)LocLastCustomCommand->CommandName)+1U);
 800c8ea:	6028      	str	r0, [r5, #0]
    if(CommandResult->CommandName==NULL) {
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	f000 80c2 	beq.w	800ca76 <ParseCustomCommand+0x1ee>
      sprintf((char *)CommandResult->CommandName,"%s",(char *)LocLastCustomCommand->CommandName);
 800c8f2:	f00e ffcc 	bl	801b88e <strcpy>
      CommandResult->CommandType= LocLastCustomCommand->CommandType;
 800c8f6:	7923      	ldrb	r3, [r4, #4]
 800c8f8:	712b      	strb	r3, [r5, #4]
    switch(LocLastCustomCommand->CommandType) { 
 800c8fa:	2b05      	cmp	r3, #5
 800c8fc:	d834      	bhi.n	800c968 <ParseCustomCommand+0xe0>
 800c8fe:	e8df f003 	tbb	[pc, r3]
 800c902:	6925      	.short	0x6925
 800c904:	3a693a89 	.word	0x3a693a89
      LocLastCustomCommand = (BLE_ExtCustomCommand_t *) LocLastCustomCommand->NextCommand;
 800c908:	68a4      	ldr	r4, [r4, #8]
  while((ValidCustomCommand==0U) && (LocLastCustomCommand!=NULL)){
 800c90a:	2c00      	cmp	r4, #0
 800c90c:	d1ca      	bne.n	800c8a4 <ParseCustomCommand+0x1c>
  json_value_free(tempJSON);
 800c90e:	4640      	mov	r0, r8
    BLE_MANAGER_PRINTF("Error: Custom Command Not Valid\r\n");
 800c910:	4e72      	ldr	r6, [pc, #456]	; (800cadc <ParseCustomCommand+0x254>)
 800c912:	4d73      	ldr	r5, [pc, #460]	; (800cae0 <ParseCustomCommand+0x258>)
  json_value_free(tempJSON);
 800c914:	f004 fd28 	bl	8011368 <json_value_free>
    BLE_MANAGER_PRINTF("Error: Custom Command Not Valid\r\n");
 800c918:	f106 0720 	add.w	r7, r6, #32
 800c91c:	4634      	mov	r4, r6
 800c91e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c920:	42bc      	cmp	r4, r7
 800c922:	6028      	str	r0, [r5, #0]
 800c924:	6069      	str	r1, [r5, #4]
 800c926:	60aa      	str	r2, [r5, #8]
 800c928:	60eb      	str	r3, [r5, #12]
 800c92a:	4626      	mov	r6, r4
 800c92c:	f105 0510 	add.w	r5, r5, #16
 800c930:	d1f4      	bne.n	800c91c <ParseCustomCommand+0x94>
 800c932:	4b6c      	ldr	r3, [pc, #432]	; (800cae4 <ParseCustomCommand+0x25c>)
 800c934:	8822      	ldrh	r2, [r4, #0]
 800c936:	802a      	strh	r2, [r5, #0]
 800c938:	2121      	movs	r1, #33	; 0x21
 800c93a:	4869      	ldr	r0, [pc, #420]	; (800cae0 <ParseCustomCommand+0x258>)
 800c93c:	6019      	str	r1, [r3, #0]
 800c93e:	f7f7 fdd1 	bl	80044e4 <CDC_Fill_Buffer>
  BLE_CustomCommadResult_t *CommandResult=NULL;
 800c942:	2500      	movs	r5, #0
}
 800c944:	4628      	mov	r0, r5
 800c946:	b003      	add	sp, #12
 800c948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BLE_MANAGER_PRINTF("Called Custom Void Command <%s>\r\n",LocLastCustomCommand->CommandName);
 800c94c:	6822      	ldr	r2, [r4, #0]
 800c94e:	4966      	ldr	r1, [pc, #408]	; (800cae8 <ParseCustomCommand+0x260>)
 800c950:	4863      	ldr	r0, [pc, #396]	; (800cae0 <ParseCustomCommand+0x258>)
 800c952:	f00e fddb 	bl	801b50c <siprintf>
 800c956:	4b63      	ldr	r3, [pc, #396]	; (800cae4 <ParseCustomCommand+0x25c>)
 800c958:	4601      	mov	r1, r0
 800c95a:	4861      	ldr	r0, [pc, #388]	; (800cae0 <ParseCustomCommand+0x258>)
 800c95c:	6019      	str	r1, [r3, #0]
 800c95e:	f7f7 fdc1 	bl	80044e4 <CDC_Fill_Buffer>
      CommandResult->IntValue= 0;
 800c962:	2300      	movs	r3, #0
      CommandResult->StringValue= NULL;
 800c964:	e9c5 3302 	strd	r3, r3, [r5, #8]
  json_value_free(tempJSON);
 800c968:	4640      	mov	r0, r8
 800c96a:	f004 fcfd 	bl	8011368 <json_value_free>
}
 800c96e:	4628      	mov	r0, r5
 800c970:	b003      	add	sp, #12
 800c972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800c976:	495d      	ldr	r1, [pc, #372]	; (800caec <ParseCustomCommand+0x264>)
 800c978:	4630      	mov	r0, r6
 800c97a:	f004 fcc3 	bl	8011304 <json_object_dothas_value>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d0f2      	beq.n	800c968 <ParseCustomCommand+0xe0>
        uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800c982:	495a      	ldr	r1, [pc, #360]	; (800caec <ParseCustomCommand+0x264>)
 800c984:	4630      	mov	r0, r6
 800c986:	f004 fc7d 	bl	8011284 <json_object_dotget_string>
        CommandResult->IntValue= 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60ab      	str	r3, [r5, #8]
        uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800c98e:	4606      	mov	r6, r0
        CommandResult->StringValue = (uint8_t*)BLE_MallocFunction(strlen((char*)NewString)+1U);
 800c990:	f7f3 fc96 	bl	80002c0 <strlen>
 800c994:	3001      	adds	r0, #1
 800c996:	f00c fe71 	bl	801967c <malloc>
 800c99a:	60e8      	str	r0, [r5, #12]
        if(CommandResult->StringValue==NULL) {
 800c99c:	2800      	cmp	r0, #0
 800c99e:	f000 808a 	beq.w	800cab6 <ParseCustomCommand+0x22e>
          sprintf((char *)CommandResult->StringValue,"%s",(char *)NewString);
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	f00e ff73 	bl	801b88e <strcpy>
          BLE_MANAGER_PRINTF("Called Custom String Command <%s>\r\n",LocLastCustomCommand->CommandName);
 800c9a8:	6822      	ldr	r2, [r4, #0]
 800c9aa:	4951      	ldr	r1, [pc, #324]	; (800caf0 <ParseCustomCommand+0x268>)
 800c9ac:	484c      	ldr	r0, [pc, #304]	; (800cae0 <ParseCustomCommand+0x258>)
 800c9ae:	4c4d      	ldr	r4, [pc, #308]	; (800cae4 <ParseCustomCommand+0x25c>)
 800c9b0:	f00e fdac 	bl	801b50c <siprintf>
 800c9b4:	4601      	mov	r1, r0
 800c9b6:	6020      	str	r0, [r4, #0]
 800c9b8:	4849      	ldr	r0, [pc, #292]	; (800cae0 <ParseCustomCommand+0x258>)
 800c9ba:	f7f7 fd93 	bl	80044e4 <CDC_Fill_Buffer>
          BLE_MANAGER_PRINTF("\tString=<%s>\r\n",NewString);
 800c9be:	494d      	ldr	r1, [pc, #308]	; (800caf4 <ParseCustomCommand+0x26c>)
 800c9c0:	4847      	ldr	r0, [pc, #284]	; (800cae0 <ParseCustomCommand+0x258>)
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	f00e fda2 	bl	801b50c <siprintf>
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	4845      	ldr	r0, [pc, #276]	; (800cae0 <ParseCustomCommand+0x258>)
 800c9cc:	6021      	str	r1, [r4, #0]
 800c9ce:	f7f7 fd89 	bl	80044e4 <CDC_Fill_Buffer>
  json_value_free(tempJSON);
 800c9d2:	e7c9      	b.n	800c968 <ParseCustomCommand+0xe0>
      if(json_object_dothas_value(JSON_ParseHandler,"argNumber")) {
 800c9d4:	4948      	ldr	r1, [pc, #288]	; (800caf8 <ParseCustomCommand+0x270>)
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	f004 fc94 	bl	8011304 <json_object_dothas_value>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d0c3      	beq.n	800c968 <ParseCustomCommand+0xe0>
        int32_t NewValue = (int32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4945      	ldr	r1, [pc, #276]	; (800caf8 <ParseCustomCommand+0x270>)
 800c9e4:	f004 fc58 	bl	8011298 <json_object_dotget_number>
 800c9e8:	ec51 0b10 	vmov	r0, r1, d0
 800c9ec:	f7f4 f8dc 	bl	8000ba8 <__aeabi_d2iz>
        CommandResult->StringValue= NULL;
 800c9f0:	2300      	movs	r3, #0
        BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LocLastCustomCommand->CommandName);
 800c9f2:	6822      	ldr	r2, [r4, #0]
 800c9f4:	4941      	ldr	r1, [pc, #260]	; (800cafc <ParseCustomCommand+0x274>)
 800c9f6:	4c3b      	ldr	r4, [pc, #236]	; (800cae4 <ParseCustomCommand+0x25c>)
        CommandResult->StringValue= NULL;
 800c9f8:	e9c5 0302 	strd	r0, r3, [r5, #8]
        int32_t NewValue = (int32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 800c9fc:	4606      	mov	r6, r0
        BLE_MANAGER_PRINTF("Called Custom Integer Command <%s>\r\n",LocLastCustomCommand->CommandName);
 800c9fe:	4838      	ldr	r0, [pc, #224]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca00:	f00e fd84 	bl	801b50c <siprintf>
 800ca04:	4601      	mov	r1, r0
 800ca06:	6020      	str	r0, [r4, #0]
 800ca08:	4835      	ldr	r0, [pc, #212]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca0a:	f7f7 fd6b 	bl	80044e4 <CDC_Fill_Buffer>
        BLE_MANAGER_PRINTF("\tNumber=%ld\r\n",NewValue);
 800ca0e:	493c      	ldr	r1, [pc, #240]	; (800cb00 <ParseCustomCommand+0x278>)
 800ca10:	4632      	mov	r2, r6
 800ca12:	e027      	b.n	800ca64 <ParseCustomCommand+0x1dc>
      if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800ca14:	4935      	ldr	r1, [pc, #212]	; (800caec <ParseCustomCommand+0x264>)
 800ca16:	4630      	mov	r0, r6
 800ca18:	f004 fc74 	bl	8011304 <json_object_dothas_value>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0a3      	beq.n	800c968 <ParseCustomCommand+0xe0>
        uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800ca20:	4932      	ldr	r1, [pc, #200]	; (800caec <ParseCustomCommand+0x264>)
 800ca22:	4630      	mov	r0, r6
 800ca24:	f004 fc2e 	bl	8011284 <json_object_dotget_string>
        if(strncmp((char*)NewString,"true",4)==0)
 800ca28:	4936      	ldr	r1, [pc, #216]	; (800cb04 <ParseCustomCommand+0x27c>)
 800ca2a:	2204      	movs	r2, #4
        uint8_t *NewString = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800ca2c:	4606      	mov	r6, r0
        if(strncmp((char*)NewString,"true",4)==0)
 800ca2e:	f00e fe94 	bl	801b75a <strncmp>
 800ca32:	b908      	cbnz	r0, 800ca38 <ParseCustomCommand+0x1b0>
          CommandResult->IntValue= 1;
 800ca34:	2301      	movs	r3, #1
 800ca36:	60ab      	str	r3, [r5, #8]
        if(strncmp((char*)NewString,"false",5)==0)
 800ca38:	4933      	ldr	r1, [pc, #204]	; (800cb08 <ParseCustomCommand+0x280>)
 800ca3a:	2205      	movs	r2, #5
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f00e fe8c 	bl	801b75a <strncmp>
 800ca42:	b900      	cbnz	r0, 800ca46 <ParseCustomCommand+0x1be>
          CommandResult->IntValue= 0;
 800ca44:	60a8      	str	r0, [r5, #8]
        CommandResult->StringValue= NULL;
 800ca46:	2300      	movs	r3, #0
        BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LocLastCustomCommand->CommandName);
 800ca48:	6822      	ldr	r2, [r4, #0]
 800ca4a:	4930      	ldr	r1, [pc, #192]	; (800cb0c <ParseCustomCommand+0x284>)
        CommandResult->StringValue= NULL;
 800ca4c:	60eb      	str	r3, [r5, #12]
        BLE_MANAGER_PRINTF("Called Custom Boolean Command <%s>\r\n",LocLastCustomCommand->CommandName);
 800ca4e:	4824      	ldr	r0, [pc, #144]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca50:	4c24      	ldr	r4, [pc, #144]	; (800cae4 <ParseCustomCommand+0x25c>)
 800ca52:	f00e fd5b 	bl	801b50c <siprintf>
 800ca56:	4601      	mov	r1, r0
 800ca58:	6020      	str	r0, [r4, #0]
 800ca5a:	4821      	ldr	r0, [pc, #132]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca5c:	f7f7 fd42 	bl	80044e4 <CDC_Fill_Buffer>
        BLE_MANAGER_PRINTF("\tBoolean=<%s>\r\n",NewString);
 800ca60:	492b      	ldr	r1, [pc, #172]	; (800cb10 <ParseCustomCommand+0x288>)
 800ca62:	4632      	mov	r2, r6
 800ca64:	481e      	ldr	r0, [pc, #120]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca66:	f00e fd51 	bl	801b50c <siprintf>
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6020      	str	r0, [r4, #0]
 800ca6e:	481c      	ldr	r0, [pc, #112]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca70:	f7f7 fd38 	bl	80044e4 <CDC_Fill_Buffer>
 800ca74:	e778      	b.n	800c968 <ParseCustomCommand+0xe0>
      BLE_MANAGER_PRINTF("Error: Mem alloc error: %d@%s\r\n", __LINE__, __FILE__);
 800ca76:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ca7a:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <ParseCustomCommand+0x28c>)
 800ca7c:	4926      	ldr	r1, [pc, #152]	; (800cb18 <ParseCustomCommand+0x290>)
 800ca7e:	4818      	ldr	r0, [pc, #96]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca80:	f00e fd44 	bl	801b50c <siprintf>
 800ca84:	4b17      	ldr	r3, [pc, #92]	; (800cae4 <ParseCustomCommand+0x25c>)
 800ca86:	4816      	ldr	r0, [pc, #88]	; (800cae0 <ParseCustomCommand+0x258>)
 800ca88:	2184      	movs	r1, #132	; 0x84
 800ca8a:	6019      	str	r1, [r3, #0]
 800ca8c:	f7f7 fd2a 	bl	80044e4 <CDC_Fill_Buffer>
      BLE_FreeFunction(CommandResult);
 800ca90:	4628      	mov	r0, r5
 800ca92:	f00c fdfb 	bl	801968c <free>
    switch(LocLastCustomCommand->CommandType) { 
 800ca96:	7923      	ldrb	r3, [r4, #4]
 800ca98:	e72f      	b.n	800c8fa <ParseCustomCommand+0x72>
      BLE_MANAGER_PRINTF("Error: Mem alloc error: %d@%s\r\n", __LINE__, __FILE__);
 800ca9a:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <ParseCustomCommand+0x28c>)
 800ca9c:	491e      	ldr	r1, [pc, #120]	; (800cb18 <ParseCustomCommand+0x290>)
 800ca9e:	4810      	ldr	r0, [pc, #64]	; (800cae0 <ParseCustomCommand+0x258>)
 800caa0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800caa4:	f00e fd32 	bl	801b50c <siprintf>
 800caa8:	4b0e      	ldr	r3, [pc, #56]	; (800cae4 <ParseCustomCommand+0x25c>)
 800caaa:	480d      	ldr	r0, [pc, #52]	; (800cae0 <ParseCustomCommand+0x258>)
 800caac:	2184      	movs	r1, #132	; 0x84
 800caae:	6019      	str	r1, [r3, #0]
 800cab0:	f7f7 fd18 	bl	80044e4 <CDC_Fill_Buffer>
 800cab4:	e710      	b.n	800c8d8 <ParseCustomCommand+0x50>
          BLE_MANAGER_PRINTF("Error: Mem alloc error: %d@%s\r\n", __LINE__, __FILE__);
 800cab6:	f240 52e2 	movw	r2, #1506	; 0x5e2
 800caba:	4b16      	ldr	r3, [pc, #88]	; (800cb14 <ParseCustomCommand+0x28c>)
 800cabc:	4916      	ldr	r1, [pc, #88]	; (800cb18 <ParseCustomCommand+0x290>)
 800cabe:	4808      	ldr	r0, [pc, #32]	; (800cae0 <ParseCustomCommand+0x258>)
 800cac0:	f00e fd24 	bl	801b50c <siprintf>
 800cac4:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <ParseCustomCommand+0x25c>)
 800cac6:	4806      	ldr	r0, [pc, #24]	; (800cae0 <ParseCustomCommand+0x258>)
 800cac8:	2184      	movs	r1, #132	; 0x84
 800caca:	6019      	str	r1, [r3, #0]
 800cacc:	f7f7 fd0a 	bl	80044e4 <CDC_Fill_Buffer>
          BLE_FreeFunction(CommandResult);
 800cad0:	4628      	mov	r0, r5
 800cad2:	f00c fddb 	bl	801968c <free>
 800cad6:	e747      	b.n	800c968 <ParseCustomCommand+0xe0>
 800cad8:	0802192c 	.word	0x0802192c
 800cadc:	08021aac 	.word	0x08021aac
 800cae0:	200011ac 	.word	0x200011ac
 800cae4:	200012ac 	.word	0x200012ac
 800cae8:	080219bc 	.word	0x080219bc
 800caec:	08021a24 	.word	0x08021a24
 800caf0:	08021a78 	.word	0x08021a78
 800caf4:	08021a9c 	.word	0x08021a9c
 800caf8:	080219e0 	.word	0x080219e0
 800cafc:	080219ec 	.word	0x080219ec
 800cb00:	08021a14 	.word	0x08021a14
 800cb04:	08021a30 	.word	0x08021a30
 800cb08:	08021a38 	.word	0x08021a38
 800cb0c:	08021a40 	.word	0x08021a40
 800cb10:	08021a68 	.word	0x08021a68
 800cb14:	08021934 	.word	0x08021934
 800cb18:	0802199c 	.word	0x0802199c

0800cb1c <safe_aci_gatt_update_char_value>:
{
 800cb1c:	b510      	push	{r4, lr}
  if (breath==0){
 800cb1e:	4c0b      	ldr	r4, [pc, #44]	; (800cb4c <safe_aci_gatt_update_char_value+0x30>)
{
 800cb20:	468c      	mov	ip, r1
  if (breath==0){
 800cb22:	6921      	ldr	r1, [r4, #16]
{
 800cb24:	b082      	sub	sp, #8
  if (breath==0){
 800cb26:	b111      	cbz	r1, 800cb2e <safe_aci_gatt_update_char_value+0x12>
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 800cb28:	2064      	movs	r0, #100	; 0x64
}
 800cb2a:	b002      	add	sp, #8
 800cb2c:	bd10      	pop	{r4, pc}
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	8b41      	ldrh	r1, [r0, #26]
 800cb32:	8b80      	ldrh	r0, [r0, #28]
 800cb34:	4613      	mov	r3, r2
 800cb36:	4662      	mov	r2, ip
 800cb38:	f002 fdf0 	bl	800f71c <aci_gatt_update_char_value>
    if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d0f4      	beq.n	800cb2a <safe_aci_gatt_update_char_value+0xe>
      if(ret==(tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES){
 800cb40:	2864      	cmp	r0, #100	; 0x64
 800cb42:	d1f2      	bne.n	800cb2a <safe_aci_gatt_update_char_value+0xe>
        breath = 1;
 800cb44:	2301      	movs	r3, #1
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	e7ef      	b.n	800cb2a <safe_aci_gatt_update_char_value+0xe>
 800cb4a:	bf00      	nop
 800cb4c:	20002014 	.word	0x20002014

0800cb50 <aci_gatt_tx_pool_available_event>:
  breath=0;
 800cb50:	4b03      	ldr	r3, [pc, #12]	; (800cb60 <aci_gatt_tx_pool_available_event+0x10>)
  if(CustomAciGattTxPoolAvailableEvent != NULL) {
 800cb52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  breath=0;
 800cb56:	2100      	movs	r1, #0
 800cb58:	6119      	str	r1, [r3, #16]
  if(CustomAciGattTxPoolAvailableEvent != NULL) {
 800cb5a:	b102      	cbz	r2, 800cb5e <aci_gatt_tx_pool_available_event+0xe>
    CustomAciGattTxPoolAvailableEvent();
 800cb5c:	4710      	bx	r2
}
 800cb5e:	4770      	bx	lr
 800cb60:	20002014 	.word	0x20002014

0800cb64 <Stderr_Update>:
{
 800cb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DataToSend = (length>MaxBleCharStdErrLen) ?  MaxBleCharStdErrLen : length;
 800cb68:	4e1f      	ldr	r6, [pc, #124]	; (800cbe8 <Stderr_Update+0x84>)
 800cb6a:	f896 4084 	ldrb.w	r4, [r6, #132]	; 0x84
 800cb6e:	428c      	cmp	r4, r1
 800cb70:	bf28      	it	cs
 800cb72:	460c      	movcs	r4, r1
{
 800cb74:	4680      	mov	r8, r0
 800cb76:	460f      	mov	r7, r1
  memcpy(LastStderrBuffer,data,DataToSend);
 800cb78:	4622      	mov	r2, r4
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	f106 0014 	add.w	r0, r6, #20
 800cb80:	f00e fe8d 	bl	801b89e <memcpy>
  if(UpdateTermStdErr(data,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800cb84:	4621      	mov	r1, r4
 800cb86:	4640      	mov	r0, r8
  LastStderrLen = DataToSend;
 800cb88:	73f4      	strb	r4, [r6, #15]
  if(UpdateTermStdErr(data,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800cb8a:	f7ff fdef 	bl	800c76c <UpdateTermStdErr>
 800cb8e:	bb28      	cbnz	r0, 800cbdc <Stderr_Update+0x78>
  Offset = MaxBleCharStdErrLen;
 800cb90:	f896 5084 	ldrb.w	r5, [r6, #132]	; 0x84
  for(; Offset<length; Offset +=MaxBleCharStdErrLen){
 800cb94:	42af      	cmp	r7, r5
 800cb96:	4682      	mov	sl, r0
 800cb98:	d922      	bls.n	800cbe0 <Stderr_Update+0x7c>
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 800cb9a:	f106 0914 	add.w	r9, r6, #20
 800cb9e:	e005      	b.n	800cbac <Stderr_Update+0x48>
  for(; Offset<length; Offset +=MaxBleCharStdErrLen){
 800cba0:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
 800cba4:	442b      	add	r3, r5
 800cba6:	b2dd      	uxtb	r5, r3
 800cba8:	42af      	cmp	r7, r5
 800cbaa:	d919      	bls.n	800cbe0 <Stderr_Update+0x7c>
    BLE_MANAGER_DELAY(20);
 800cbac:	2014      	movs	r0, #20
 800cbae:	f7f9 fa5d 	bl	800606c <HAL_Delay>
    DataToSend = (DataToSend>MaxBleCharStdErrLen) ?  MaxBleCharStdErrLen : DataToSend;
 800cbb2:	f896 4084 	ldrb.w	r4, [r6, #132]	; 0x84
    DataToSend = (length-Offset);
 800cbb6:	1b7b      	subs	r3, r7, r5
 800cbb8:	b2db      	uxtb	r3, r3
    DataToSend = (DataToSend>MaxBleCharStdErrLen) ?  MaxBleCharStdErrLen : DataToSend;
 800cbba:	429c      	cmp	r4, r3
 800cbbc:	bf28      	it	cs
 800cbbe:	461c      	movcs	r4, r3
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 800cbc0:	eb08 0b05 	add.w	fp, r8, r5
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	4648      	mov	r0, r9
 800cbca:	f00e fe68 	bl	801b89e <memcpy>
    if(UpdateTermStdErr(data+Offset,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4658      	mov	r0, fp
    LastStderrLen = DataToSend;
 800cbd2:	73f4      	strb	r4, [r6, #15]
    if(UpdateTermStdErr(data+Offset,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800cbd4:	f7ff fdca 	bl	800c76c <UpdateTermStdErr>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d0e1      	beq.n	800cba0 <Stderr_Update+0x3c>
    return BLE_STATUS_ERROR;
 800cbdc:	f04f 0a47 	mov.w	sl, #71	; 0x47
}
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20002014 	.word	0x20002014

0800cbec <Read_Request_Term>:
{
 800cbec:	b570      	push	{r4, r5, r6, lr}
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastTermLen , LastTermBuffer);
 800cbee:	4c22      	ldr	r4, [pc, #136]	; (800cc78 <Read_Request_Term+0x8c>)
  if (breath==0){
 800cbf0:	6922      	ldr	r2, [r4, #16]
  ret = ACI_GATT_UPDATE_CHAR_VALUE(BleCharPointer, 0, LastTermLen , LastTermBuffer);
 800cbf2:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
{
 800cbf6:	b082      	sub	sp, #8
  if (breath==0){
 800cbf8:	b1ca      	cbz	r2, 800cc2e <Read_Request_Term+0x42>
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800cbfa:	7b23      	ldrb	r3, [r4, #12]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d025      	beq.n	800cc4c <Read_Request_Term+0x60>
      BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800cc00:	4c1e      	ldr	r4, [pc, #120]	; (800cc7c <Read_Request_Term+0x90>)
 800cc02:	4d1f      	ldr	r5, [pc, #124]	; (800cc80 <Read_Request_Term+0x94>)
 800cc04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc06:	6028      	str	r0, [r5, #0]
 800cc08:	6069      	str	r1, [r5, #4]
 800cc0a:	60aa      	str	r2, [r5, #8]
 800cc0c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800cc0e:	6128      	str	r0, [r5, #16]
 800cc10:	481c      	ldr	r0, [pc, #112]	; (800cc84 <Read_Request_Term+0x98>)
 800cc12:	60eb      	str	r3, [r5, #12]
 800cc14:	8824      	ldrh	r4, [r4, #0]
 800cc16:	231d      	movs	r3, #29
 800cc18:	6003      	str	r3, [r0, #0]
 800cc1a:	6169      	str	r1, [r5, #20]
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	4619      	mov	r1, r3
 800cc20:	61aa      	str	r2, [r5, #24]
 800cc22:	83ac      	strh	r4, [r5, #28]
}
 800cc24:	b002      	add	sp, #8
 800cc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      BLE_MANAGER_PRINTF("Error: Updating Stdout Char\r\n");
 800cc2a:	f7f7 bc5b 	b.w	80044e4 <CDC_Fill_Buffer>
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800cc2e:	f104 0188 	add.w	r1, r4, #136	; 0x88
 800cc32:	9100      	str	r1, [sp, #0]
 800cc34:	8b41      	ldrh	r1, [r0, #26]
 800cc36:	8b80      	ldrh	r0, [r0, #28]
 800cc38:	f002 fd70 	bl	800f71c <aci_gatt_update_char_value>
    if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800cc3c:	b1d0      	cbz	r0, 800cc74 <Read_Request_Term+0x88>
      if(ret==(tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES){
 800cc3e:	2864      	cmp	r0, #100	; 0x64
        breath = 1;
 800cc40:	bf04      	itt	eq
 800cc42:	2301      	moveq	r3, #1
 800cc44:	6123      	streq	r3, [r4, #16]
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800cc46:	7b23      	ldrb	r3, [r4, #12]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d1d9      	bne.n	800cc00 <Read_Request_Term+0x14>
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Stdout Char\n");
 800cc4c:	4e0e      	ldr	r6, [pc, #56]	; (800cc88 <Read_Request_Term+0x9c>)
 800cc4e:	4d0f      	ldr	r5, [pc, #60]	; (800cc8c <Read_Request_Term+0xa0>)
 800cc50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cc52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cc58:	f04f 0c1b 	mov.w	ip, #27
 800cc5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      Stderr_Update(BufferToWrite,BytesToWrite);
 800cc60:	4661      	mov	r1, ip
 800cc62:	f1a5 0010 	sub.w	r0, r5, #16
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Stdout Char\n");
 800cc66:	f884 c224 	strb.w	ip, [r4, #548]	; 0x224
}
 800cc6a:	b002      	add	sp, #8
 800cc6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Stderr_Update(BufferToWrite,BytesToWrite);
 800cc70:	f7ff bf78 	b.w	800cb64 <Stderr_Update>
}
 800cc74:	b002      	add	sp, #8
 800cc76:	bd70      	pop	{r4, r5, r6, pc}
 800cc78:	20002014 	.word	0x20002014
 800cc7c:	0802190c 	.word	0x0802190c
 800cc80:	200011ac 	.word	0x200011ac
 800cc84:	200012ac 	.word	0x200012ac
 800cc88:	08021cd0 	.word	0x08021cd0
 800cc8c:	20002138 	.word	0x20002138

0800cc90 <Term_Update>:
{
 800cc90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DataToSend = (length>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : length;
 800cc94:	4e20      	ldr	r6, [pc, #128]	; (800cd18 <Term_Update+0x88>)
 800cc96:	f896 4225 	ldrb.w	r4, [r6, #549]	; 0x225
 800cc9a:	428c      	cmp	r4, r1
 800cc9c:	bf28      	it	cs
 800cc9e:	460c      	movcs	r4, r1
{
 800cca0:	4680      	mov	r8, r0
 800cca2:	460f      	mov	r7, r1
  memcpy(LastTermBuffer,data,DataToSend);
 800cca4:	4622      	mov	r2, r4
 800cca6:	4601      	mov	r1, r0
 800cca8:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800ccac:	f00e fdf7 	bl	801b89e <memcpy>
  if(UpdateTermStdOut(data,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	4640      	mov	r0, r8
  LastTermLen = DataToSend;
 800ccb4:	f886 4085 	strb.w	r4, [r6, #133]	; 0x85
  if(UpdateTermStdOut(data,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800ccb8:	f7ff fd8c 	bl	800c7d4 <UpdateTermStdOut>
 800ccbc:	bb30      	cbnz	r0, 800cd0c <Term_Update+0x7c>
  Offset = MaxBleCharStdOutLen;
 800ccbe:	f896 5225 	ldrb.w	r5, [r6, #549]	; 0x225
  for(; Offset<length; Offset +=MaxBleCharStdOutLen){
 800ccc2:	42af      	cmp	r7, r5
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	d923      	bls.n	800cd10 <Term_Update+0x80>
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 800ccc8:	f106 0988 	add.w	r9, r6, #136	; 0x88
 800cccc:	e005      	b.n	800ccda <Term_Update+0x4a>
  for(; Offset<length; Offset +=MaxBleCharStdOutLen){
 800ccce:	f896 3225 	ldrb.w	r3, [r6, #549]	; 0x225
 800ccd2:	442b      	add	r3, r5
 800ccd4:	b2dd      	uxtb	r5, r3
 800ccd6:	42af      	cmp	r7, r5
 800ccd8:	d91a      	bls.n	800cd10 <Term_Update+0x80>
    BLE_MANAGER_DELAY(20);
 800ccda:	2014      	movs	r0, #20
 800ccdc:	f7f9 f9c6 	bl	800606c <HAL_Delay>
    DataToSend = (DataToSend>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : DataToSend;
 800cce0:	f896 4225 	ldrb.w	r4, [r6, #549]	; 0x225
    DataToSend = (length-Offset);
 800cce4:	1b7b      	subs	r3, r7, r5
 800cce6:	b2db      	uxtb	r3, r3
    DataToSend = (DataToSend>MaxBleCharStdOutLen) ?  MaxBleCharStdOutLen : DataToSend;
 800cce8:	429c      	cmp	r4, r3
 800ccea:	bf28      	it	cs
 800ccec:	461c      	movcs	r4, r3
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 800ccee:	eb08 0b05 	add.w	fp, r8, r5
 800ccf2:	4659      	mov	r1, fp
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	4648      	mov	r0, r9
 800ccf8:	f00e fdd1 	bl	801b89e <memcpy>
    if(UpdateTermStdOut(data+Offset,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	4658      	mov	r0, fp
    LastTermLen = DataToSend;
 800cd00:	f886 4085 	strb.w	r4, [r6, #133]	; 0x85
    if(UpdateTermStdOut(data+Offset,DataToSend)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800cd04:	f7ff fd66 	bl	800c7d4 <UpdateTermStdOut>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d0e0      	beq.n	800ccce <Term_Update+0x3e>
    return BLE_STATUS_ERROR;
 800cd0c:	f04f 0a47 	mov.w	sl, #71	; 0x47
}
 800cd10:	4650      	mov	r0, sl
 800cd12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd16:	bf00      	nop
 800cd18:	20002014 	.word	0x20002014

0800cd1c <Write_Request_Term>:
{
 800cd1c:	b510      	push	{r4, lr}
  if(CustomDebugConsoleParsingCallback!=NULL) {
 800cd1e:	4a0a      	ldr	r2, [pc, #40]	; (800cd48 <Write_Request_Term+0x2c>)
{
 800cd20:	b082      	sub	sp, #8
  if(CustomDebugConsoleParsingCallback!=NULL) {
 800cd22:	f8d2 2228 	ldr.w	r2, [r2, #552]	; 0x228
{
 800cd26:	9c04      	ldr	r4, [sp, #16]
 800cd28:	4619      	mov	r1, r3
  if(CustomDebugConsoleParsingCallback!=NULL) {
 800cd2a:	b122      	cbz	r2, 800cd36 <Write_Request_Term+0x1a>
    SendBackData = CustomDebugConsoleParsingCallback(att_data,data_length);
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	4790      	blx	r2
  if(SendBackData) {
 800cd32:	9901      	ldr	r1, [sp, #4]
 800cd34:	b128      	cbz	r0, 800cd42 <Write_Request_Term+0x26>
    Term_Update(att_data,data_length);
 800cd36:	4620      	mov	r0, r4
}
 800cd38:	b002      	add	sp, #8
 800cd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Term_Update(att_data,data_length);
 800cd3e:	f7ff bfa7 	b.w	800cc90 <Term_Update>
}
 800cd42:	b002      	add	sp, #8
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	bf00      	nop
 800cd48:	20002014 	.word	0x20002014

0800cd4c <updateAdvData>:
{
 800cd4c:	b538      	push	{r3, r4, r5, lr}
  manuf_data[0 ] = 8U;
 800cd4e:	4c3d      	ldr	r4, [pc, #244]	; (800ce44 <updateAdvData+0xf8>)
  manuf_data[2 ] = (uint8_t)BLE_StackValue.BoardName[0];/* Complete Name */
 800cd50:	f894 2281 	ldrb.w	r2, [r4, #641]	; 0x281
  manuf_data[3 ] = (uint8_t)BLE_StackValue.BoardName[1];
 800cd54:	f894 1282 	ldrb.w	r1, [r4, #642]	; 0x282
  manuf_data[2 ] = (uint8_t)BLE_StackValue.BoardName[0];/* Complete Name */
 800cd58:	f884 225a 	strb.w	r2, [r4, #602]	; 0x25a
  manuf_data[3 ] = (uint8_t)BLE_StackValue.BoardName[1];
 800cd5c:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
  manuf_data[4 ] = (uint8_t)BLE_StackValue.BoardName[2];
 800cd60:	f894 2283 	ldrb.w	r2, [r4, #643]	; 0x283
  manuf_data[5 ] = (uint8_t)BLE_StackValue.BoardName[3];
 800cd64:	f894 1284 	ldrb.w	r1, [r4, #644]	; 0x284
  manuf_data[4 ] = (uint8_t)BLE_StackValue.BoardName[2];
 800cd68:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
  manuf_data[16] = 0x00U;
 800cd6c:	2300      	movs	r3, #0
  manuf_data[6 ] = (uint8_t)BLE_StackValue.BoardName[4];
 800cd6e:	f894 2285 	ldrb.w	r2, [r4, #645]	; 0x285
  manuf_data[5 ] = (uint8_t)BLE_StackValue.BoardName[3];
 800cd72:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  manuf_data[7 ] = (uint8_t)BLE_StackValue.BoardName[5];
 800cd76:	f894 1286 	ldrb.w	r1, [r4, #646]	; 0x286
  manuf_data[6 ] = (uint8_t)BLE_StackValue.BoardName[4];
 800cd7a:	f884 225e 	strb.w	r2, [r4, #606]	; 0x25e
  manuf_data[7 ] = (uint8_t)BLE_StackValue.BoardName[5];
 800cd7e:	f884 125f 	strb.w	r1, [r4, #607]	; 0x25f
  manuf_data[8 ] = (uint8_t)BLE_StackValue.BoardName[6];           
 800cd82:	f894 2287 	ldrb.w	r2, [r4, #647]	; 0x287
  manuf_data[12] = 0x00U;
 800cd86:	4930      	ldr	r1, [pc, #192]	; (800ce48 <updateAdvData+0xfc>)
  manuf_data[16] = 0x00U;
 800cd88:	f8a4 3268 	strh.w	r3, [r4, #616]	; 0x268
  manuf_data[18] = 0x00U;
 800cd8c:	f884 326a 	strb.w	r3, [r4, #618]	; 0x26a
  manuf_data[22] = BLE_StackValue.BleMacAddress[2];
 800cd90:	f894 3296 	ldrb.w	r3, [r4, #662]	; 0x296
  manuf_data[8 ] = (uint8_t)BLE_StackValue.BoardName[6];           
 800cd94:	f884 2260 	strb.w	r2, [r4, #608]	; 0x260
  manuf_data[0 ] = 8U;
 800cd98:	f640 1508 	movw	r5, #2312	; 0x908
  manuf_data[20] = BLE_StackValue.BleMacAddress[4];
 800cd9c:	f894 2298 	ldrb.w	r2, [r4, #664]	; 0x298
  manuf_data[12] = 0x00U;
 800cda0:	f8c4 1264 	str.w	r1, [r4, #612]	; 0x264
  manuf_data[22] = BLE_StackValue.BleMacAddress[2];
 800cda4:	f884 326e 	strb.w	r3, [r4, #622]	; 0x26e
  manuf_data[9 ] = 15U;
 800cda8:	210f      	movs	r1, #15
  manuf_data[24] = BLE_StackValue.BleMacAddress[0]; /* BLE MAC stop */
 800cdaa:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
  manuf_data[0 ] = 8U;
 800cdae:	f8a4 5258 	strh.w	r5, [r4, #600]	; 0x258
  manuf_data[9 ] = 15U;
 800cdb2:	f884 1261 	strb.w	r1, [r4, #609]	; 0x261
  manuf_data[19] = BLE_StackValue.BleMacAddress[5]; /* BLE MAC start */
 800cdb6:	f894 5299 	ldrb.w	r5, [r4, #665]	; 0x299
  manuf_data[21] = BLE_StackValue.BleMacAddress[3];
 800cdba:	f894 1297 	ldrb.w	r1, [r4, #663]	; 0x297
  manuf_data[20] = BLE_StackValue.BleMacAddress[4];
 800cdbe:	f884 226c 	strb.w	r2, [r4, #620]	; 0x26c
  manuf_data[24] = BLE_StackValue.BleMacAddress[0]; /* BLE MAC stop */
 800cdc2:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
  manuf_data[23] = BLE_StackValue.BleMacAddress[1];
 800cdc6:	f894 2295 	ldrb.w	r2, [r4, #661]	; 0x295
  manuf_data[21] = BLE_StackValue.BleMacAddress[3];
 800cdca:	f884 126d 	strb.w	r1, [r4, #621]	; 0x26d
  manuf_data[10] = 0xFFU;
 800cdce:	f243 03ff 	movw	r3, #12543	; 0x30ff
  BLE_SetCustomAdvertiseData(manuf_data);
 800cdd2:	f504 7016 	add.w	r0, r4, #600	; 0x258
  manuf_data[23] = BLE_StackValue.BleMacAddress[1];
 800cdd6:	f884 226f 	strb.w	r2, [r4, #623]	; 0x26f
  manuf_data[19] = BLE_StackValue.BleMacAddress[5]; /* BLE MAC start */
 800cdda:	f884 526b 	strb.w	r5, [r4, #619]	; 0x26b
  manuf_data[10] = 0xFFU;
 800cdde:	f8a4 3262 	strh.w	r3, [r4, #610]	; 0x262
  BLE_SetCustomAdvertiseData(manuf_data);
 800cde2:	f7f5 febb 	bl	8002b5c <BLE_SetCustomAdvertiseData>
  if(CustomSetConnectable!=NULL){
 800cde6:	f8d4 32a0 	ldr.w	r3, [r4, #672]	; 0x2a0
 800cdea:	b113      	cbz	r3, 800cdf2 <updateAdvData+0xa6>
    CustomSetConnectable(manuf_data);
 800cdec:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800cdf0:	4798      	blx	r3
  tBleStatus RetStatus = aci_gap_update_adv_data(BLE_MANAGER_ADVERTISE_DATA_LENGHT, manuf_data);
 800cdf2:	4916      	ldr	r1, [pc, #88]	; (800ce4c <updateAdvData+0x100>)
 800cdf4:	2019      	movs	r0, #25
 800cdf6:	f002 fac5 	bl	800f384 <aci_gap_update_adv_data>
  if(RetStatus != (tBleStatus)BLE_STATUS_SUCCESS) {
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	b158      	cbz	r0, 800ce16 <updateAdvData+0xca>
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 800cdfe:	4914      	ldr	r1, [pc, #80]	; (800ce50 <updateAdvData+0x104>)
 800ce00:	4814      	ldr	r0, [pc, #80]	; (800ce54 <updateAdvData+0x108>)
 800ce02:	f00e fb83 	bl	801b50c <siprintf>
 800ce06:	4b14      	ldr	r3, [pc, #80]	; (800ce58 <updateAdvData+0x10c>)
 800ce08:	4601      	mov	r1, r0
 800ce0a:	6019      	str	r1, [r3, #0]
 800ce0c:	4811      	ldr	r0, [pc, #68]	; (800ce54 <updateAdvData+0x108>)
}
 800ce0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("Error: aci_gap_update_adv_data [%x]\r\n",RetStatus);
 800ce12:	f7f7 bb67 	b.w	80044e4 <CDC_Fill_Buffer>
    BLE_MANAGER_PRINTF("aci_gap_update_adv_data OK\r\n");
 800ce16:	4c11      	ldr	r4, [pc, #68]	; (800ce5c <updateAdvData+0x110>)
 800ce18:	4d0e      	ldr	r5, [pc, #56]	; (800ce54 <updateAdvData+0x108>)
 800ce1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce1c:	6028      	str	r0, [r5, #0]
 800ce1e:	6069      	str	r1, [r5, #4]
 800ce20:	60aa      	str	r2, [r5, #8]
 800ce22:	cc07      	ldmia	r4!, {r0, r1, r2}
 800ce24:	6128      	str	r0, [r5, #16]
 800ce26:	480c      	ldr	r0, [pc, #48]	; (800ce58 <updateAdvData+0x10c>)
 800ce28:	60eb      	str	r3, [r5, #12]
 800ce2a:	7824      	ldrb	r4, [r4, #0]
 800ce2c:	231c      	movs	r3, #28
 800ce2e:	6003      	str	r3, [r0, #0]
 800ce30:	6169      	str	r1, [r5, #20]
 800ce32:	61aa      	str	r2, [r5, #24]
 800ce34:	772c      	strb	r4, [r5, #28]
 800ce36:	4619      	mov	r1, r3
 800ce38:	4628      	mov	r0, r5
}
 800ce3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BLE_MANAGER_PRINTF("aci_gap_update_adv_data OK\r\n");
 800ce3e:	f7f7 bb51 	b.w	80044e4 <CDC_Fill_Buffer>
 800ce42:	bf00      	nop
 800ce44:	20002014 	.word	0x20002014
 800ce48:	00060200 	.word	0x00060200
 800ce4c:	2000226c 	.word	0x2000226c
 800ce50:	08021d14 	.word	0x08021d14
 800ce54:	200011ac 	.word	0x200011ac
 800ce58:	200012ac 	.word	0x200012ac
 800ce5c:	08021d3c 	.word	0x08021d3c

0800ce60 <setConnectable>:
{
 800ce60:	b510      	push	{r4, lr}
  BLE_StackValue.BoardName[0],
 800ce62:	4c28      	ldr	r4, [pc, #160]	; (800cf04 <setConnectable+0xa4>)
{
 800ce64:	b08a      	sub	sp, #40	; 0x28
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800ce66:	f894 0281 	ldrb.w	r0, [r4, #641]	; 0x281
 800ce6a:	f8b4 2282 	ldrh.w	r2, [r4, #642]	; 0x282
 800ce6e:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
 800ce72:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
  RetStatus = hci_le_set_scan_response_data(0U,NULL);
 800ce76:	2100      	movs	r1, #0
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800ce78:	f04f 0c09 	mov.w	ip, #9
  RetStatus = hci_le_set_scan_response_data(0U,NULL);
 800ce7c:	4608      	mov	r0, r1
  uint8_t local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,
 800ce7e:	f88d c020 	strb.w	ip, [sp, #32]
 800ce82:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 800ce86:	9309      	str	r3, [sp, #36]	; 0x24
  RetStatus = hci_le_set_scan_response_data(0U,NULL);
 800ce88:	f003 f920 	bl	80100cc <hci_le_set_scan_response_data>
  if(RetStatus !=(tBleStatus)BLE_STATUS_SUCCESS) {
 800ce8c:	bb40      	cbnz	r0, 800cee0 <setConnectable+0x80>
  if(BLE_StackValue.AdvertisingFilter == ((uint8_t)NO_WHITE_LIST_USE)) {
 800ce8e:	f894 1291 	ldrb.w	r1, [r4, #657]	; 0x291
 800ce92:	b151      	cbz	r1, 800ceaa <setConnectable+0x4a>
    RetStatus = aci_gap_set_undirected_connectable(0,0,BLE_StackValue.OwnAddressType, BLE_StackValue.AdvertisingFilter);
 800ce94:	460b      	mov	r3, r1
 800ce96:	f894 2293 	ldrb.w	r2, [r4, #659]	; 0x293
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	f002 fa2c 	bl	800f2f8 <aci_gap_set_undirected_connectable>
    if(RetStatus != (tBleStatus)BLE_STATUS_SUCCESS) {
 800cea0:	bb58      	cbnz	r0, 800cefa <setConnectable+0x9a>
  updateAdvData();
 800cea2:	f7ff ff53 	bl	800cd4c <updateAdvData>
}
 800cea6:	b00a      	add	sp, #40	; 0x28
 800cea8:	bd10      	pop	{r4, pc}
    RetStatus = aci_gap_set_discoverable(ADV_IND, BLE_StackValue.AdvIntervalMin, BLE_StackValue.AdvIntervalMax,
 800ceaa:	aa08      	add	r2, sp, #32
 800ceac:	2308      	movs	r3, #8
 800ceae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ceb2:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800ceb6:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800ceba:	9100      	str	r1, [sp, #0]
 800cebc:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
 800cec0:	f8b4 229c 	ldrh.w	r2, [r4, #668]	; 0x29c
 800cec4:	f8b4 129a 	ldrh.w	r1, [r4, #666]	; 0x29a
 800cec8:	f002 f90e 	bl	800f0e8 <aci_gap_set_discoverable>
    if(RetStatus != (tBleStatus)BLE_STATUS_SUCCESS) {
 800cecc:	2800      	cmp	r0, #0
 800cece:	d0e8      	beq.n	800cea2 <setConnectable+0x42>
      BLE_MANAGER_PRINTF("Error: aci_gap_set_discoverable [%x] Filter=%x\r\n",RetStatus,BLE_StackValue.AdvertisingFilter);
 800ced0:	f894 3291 	ldrb.w	r3, [r4, #657]	; 0x291
 800ced4:	490c      	ldr	r1, [pc, #48]	; (800cf08 <setConnectable+0xa8>)
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BLE_StackValue.AdvertisingFilter);
 800ced6:	4602      	mov	r2, r0
 800ced8:	480c      	ldr	r0, [pc, #48]	; (800cf0c <setConnectable+0xac>)
 800ceda:	f00e fb17 	bl	801b50c <siprintf>
 800cede:	e004      	b.n	800ceea <setConnectable+0x8a>
    BLE_MANAGER_PRINTF("Error: hci_le_set_scan_response_data [%x]\r\n",RetStatus);
 800cee0:	4602      	mov	r2, r0
 800cee2:	490b      	ldr	r1, [pc, #44]	; (800cf10 <setConnectable+0xb0>)
 800cee4:	4809      	ldr	r0, [pc, #36]	; (800cf0c <setConnectable+0xac>)
 800cee6:	f00e fb11 	bl	801b50c <siprintf>
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BLE_StackValue.AdvertisingFilter);
 800ceea:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <setConnectable+0xb4>)
 800ceec:	4601      	mov	r1, r0
 800ceee:	4807      	ldr	r0, [pc, #28]	; (800cf0c <setConnectable+0xac>)
 800cef0:	6019      	str	r1, [r3, #0]
 800cef2:	f7f7 faf7 	bl	80044e4 <CDC_Fill_Buffer>
}
 800cef6:	b00a      	add	sp, #40	; 0x28
 800cef8:	bd10      	pop	{r4, pc}
      BLE_MANAGER_PRINTF("Error: aci_gap_set_undirected_connectable [%x] Filter=%x\r\n",RetStatus,BLE_StackValue.AdvertisingFilter);
 800cefa:	f894 3291 	ldrb.w	r3, [r4, #657]	; 0x291
 800cefe:	4906      	ldr	r1, [pc, #24]	; (800cf18 <setConnectable+0xb8>)
 800cf00:	e7e9      	b.n	800ced6 <setConnectable+0x76>
 800cf02:	bf00      	nop
 800cf04:	20002014 	.word	0x20002014
 800cf08:	08021d88 	.word	0x08021d88
 800cf0c:	200011ac 	.word	0x200011ac
 800cf10:	08021d5c 	.word	0x08021d5c
 800cf14:	200012ac 	.word	0x200012ac
 800cf18:	08021dbc 	.word	0x08021dbc

0800cf1c <BleManagerAddChar>:
  if(BleChar != NULL) {
 800cf1c:	b170      	cbz	r0, 800cf3c <BleManagerAddChar+0x20>
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800cf1e:	4a08      	ldr	r2, [pc, #32]	; (800cf40 <BleManagerAddChar+0x24>)
 800cf20:	f892 32a4 	ldrb.w	r3, [r2, #676]	; 0x2a4
 800cf24:	2b1f      	cmp	r3, #31
 800cf26:	d808      	bhi.n	800cf3a <BleManagerAddChar+0x1e>
      BleCharsArray[UsedBleChars] = BleChar;
 800cf28:	eb02 0183 	add.w	r1, r2, r3, lsl #2
      UsedBleChars++;
 800cf2c:	3301      	adds	r3, #1
      BleCharsArray[UsedBleChars] = BleChar;
 800cf2e:	f8c1 02a8 	str.w	r0, [r1, #680]	; 0x2a8
      UsedBleChars++;
 800cf32:	f882 32a4 	strb.w	r3, [r2, #676]	; 0x2a4
      retValue=1;
 800cf36:	2001      	movs	r0, #1
 800cf38:	4770      	bx	lr
  int32_t retValue=0;
 800cf3a:	2000      	movs	r0, #0
}
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	20002014 	.word	0x20002014

0800cf44 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800cf44:	b530      	push	{r4, r5, lr}
 800cf46:	b085      	sub	sp, #20
  tBleStatus status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800cf48:	f10d 030e 	add.w	r3, sp, #14
{
 800cf4c:	460c      	mov	r4, r1
  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800cf4e:	9300      	str	r3, [sp, #0]
{
 800cf50:	4605      	mov	r5, r0
  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800cf52:	ab03      	add	r3, sp, #12
 800cf54:	f10d 0209 	add.w	r2, sp, #9
 800cf58:	f10d 010a 	add.w	r1, sp, #10
 800cf5c:	a802      	add	r0, sp, #8
 800cf5e:	f003 f879 	bl	8010054 <hci_read_local_version_information>
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800cf62:	b940      	cbnz	r0, 800cf76 <getBlueNRGVersion+0x32>
    *hwVersion = (uint8_t)(hci_revision >> 8);
 800cf64:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800cf68:	0a13      	lsrs	r3, r2, #8
 800cf6a:	702b      	strb	r3, [r5, #0]
    *fwVersion = (hci_revision & 0xFFU) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xFU) << 4; // Minor Version Number
    *fwVersion |= lmp_pal_subversion & 0xFU;               // Patch Version Number
 800cf6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800cf70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf74:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800cf76:	b005      	add	sp, #20
 800cf78:	bd30      	pop	{r4, r5, pc}
 800cf7a:	bf00      	nop

0800cf7c <InitBleManager>:
{
 800cf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 800cf80:	4cb6      	ldr	r4, [pc, #728]	; (800d25c <InitBleManager+0x2e0>)
  hci_init(APP_UserEvtRx, NULL);
 800cf82:	48b7      	ldr	r0, [pc, #732]	; (800d260 <InitBleManager+0x2e4>)
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 800cf84:	2100      	movs	r1, #0
{
 800cf86:	b090      	sub	sp, #64	; 0x40
  MaxBleCharStdOutLen = DEFAULT_MAX_STDOUT_CHAR_LEN;
 800cf88:	229b      	movs	r2, #155	; 0x9b
  MaxBleCharStdErrLen = DEFAULT_MAX_STDERR_CHAR_LEN;
 800cf8a:	2314      	movs	r3, #20
  MaxBleCharStdOutLen = DEFAULT_MAX_STDOUT_CHAR_LEN;
 800cf8c:	f884 2225 	strb.w	r2, [r4, #549]	; 0x225
  MaxBleCharStdErrLen = DEFAULT_MAX_STDERR_CHAR_LEN;
 800cf90:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  BLE_Conf_Service = BLE_SERV_NOT_ENABLE;
 800cf94:	7021      	strb	r1, [r4, #0]
  BLE_StdTerm_Service = BLE_SERV_NOT_ENABLE;
 800cf96:	7361      	strb	r1, [r4, #13]
  BLE_StdErr_Service = BLE_SERV_NOT_ENABLE;
 800cf98:	7321      	strb	r1, [r4, #12]
  BLE_ExtConf_Service = BLE_SERV_NOT_ENABLE;
 800cf9a:	73a1      	strb	r1, [r4, #14]
  UsedBleChars =0;
 800cf9c:	f884 12a4 	strb.w	r1, [r4, #676]	; 0x2a4
  UsedStandardBleChars = 0;
 800cfa0:	f884 1328 	strb.w	r1, [r4, #808]	; 0x328
  connection_handle = 0;
 800cfa4:	f8a4 132a 	strh.w	r1, [r4, #810]	; 0x32a
  set_connectable = FALSE;
 800cfa8:	f884 132c 	strb.w	r1, [r4, #812]	; 0x32c
  hci_init(APP_UserEvtRx, NULL);
 800cfac:	f003 f90a 	bl	80101c4 <hci_init>
  hci_reset();
 800cfb0:	f003 f834 	bl	801001c <hci_reset>
  HAL_Delay(2000);
 800cfb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cfb8:	f7f9 f858 	bl	800606c <HAL_Delay>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 800cfbc:	a908      	add	r1, sp, #32
 800cfbe:	f10d 0019 	add.w	r0, sp, #25
 800cfc2:	f7ff ffbf 	bl	800cf44 <getBlueNRGVersion>
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, &data_len_out, BLE_StackValue.BleMacAddress);
 800cfc6:	f504 7225 	add.w	r2, r4, #660	; 0x294
 800cfca:	a906      	add	r1, sp, #24
 800cfcc:	2080      	movs	r0, #128	; 0x80
 800cfce:	f002 fc5f 	bl	800f890 <aci_hal_read_config_data>
  if(ret != BLE_STATUS_SUCCESS){
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	f040 8195 	bne.w	800d304 <InitBleManager+0x388>
  if ((BLE_StackValue.BleMacAddress[5] & 0xC0U) != 0xC0U) {
 800cfda:	f894 3299 	ldrb.w	r3, [r4, #665]	; 0x299
 800cfde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cfe2:	2bc0      	cmp	r3, #192	; 0xc0
 800cfe4:	d170      	bne.n	800d0c8 <InitBleManager+0x14c>
  if(BLE_StackValue.EnableRandomSecurePIN) {
 800cfe6:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f040 81b1 	bne.w	800d352 <InitBleManager+0x3d6>
 800cff0:	4f9c      	ldr	r7, [pc, #624]	; (800d264 <InitBleManager+0x2e8>)
 800cff2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800d28c <InitBleManager+0x310>
  ret = aci_hal_write_config_data(BLE_StackValue.ConfigValueOffsets,
 800cff6:	4a9c      	ldr	r2, [pc, #624]	; (800d268 <InitBleManager+0x2ec>)
 800cff8:	f894 1275 	ldrb.w	r1, [r4, #629]	; 0x275
 800cffc:	f894 0274 	ldrb.w	r0, [r4, #628]	; 0x274
 800d000:	f002 fc1c 	bl	800f83c <aci_hal_write_config_data>
  if(ret != BLE_STATUS_SUCCESS){
 800d004:	4605      	mov	r5, r0
 800d006:	2800      	cmp	r0, #0
 800d008:	f040 81d7 	bne.w	800d3ba <InitBleManager+0x43e>
  ret = aci_gatt_init();
 800d00c:	f002 faba 	bl	800f584 <aci_gatt_init>
  if(ret != BLE_STATUS_SUCCESS){
 800d010:	4605      	mov	r5, r0
 800d012:	2800      	cmp	r0, #0
 800d014:	f040 81f2 	bne.w	800d3fc <InitBleManager+0x480>
  ret = aci_gap_init(BLE_StackValue.GAP_Roles, 0, (uint8_t) strlen(BLE_StackValue.BoardName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800d018:	4e94      	ldr	r6, [pc, #592]	; (800d26c <InitBleManager+0x2f0>)
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7f3 f950 	bl	80002c0 <strlen>
 800d020:	f10d 031e 	add.w	r3, sp, #30
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	ab07      	add	r3, sp, #28
 800d028:	4629      	mov	r1, r5
 800d02a:	b2c2      	uxtb	r2, r0
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	f894 0276 	ldrb.w	r0, [r4, #630]	; 0x276
 800d032:	f10d 031a 	add.w	r3, sp, #26
 800d036:	f002 f925 	bl	800f284 <aci_gap_init>
  if(ret != BLE_STATUS_SUCCESS){
 800d03a:	4605      	mov	r5, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	f040 81ab 	bne.w	800d398 <InitBleManager+0x41c>
                                   (uint8_t) strlen(BLE_StackValue.BoardName), (uint8_t *)BLE_StackValue.BoardName);
 800d042:	4630      	mov	r0, r6
 800d044:	f7f3 f93c 	bl	80002c0 <strlen>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800d048:	462a      	mov	r2, r5
 800d04a:	b2c3      	uxtb	r3, r0
 800d04c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d050:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800d054:	9600      	str	r6, [sp, #0]
 800d056:	f002 fb61 	bl	800f71c <aci_gatt_update_char_value>
  if(ret != BLE_STATUS_SUCCESS){
 800d05a:	4605      	mov	r5, r0
 800d05c:	2800      	cmp	r0, #0
 800d05e:	f040 84bf 	bne.w	800d9e0 <InitBleManager+0xa64>
  if(BLE_StackValue.EnableSecureConnection) {
 800d062:	f894 3289 	ldrb.w	r3, [r4, #649]	; 0x289
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 83f1 	beq.w	800d84e <InitBleManager+0x8d2>
    if(aci_gap_set_io_capability(BLE_StackValue.IO_capabilities)==BLE_STATUS_SUCCESS) {
 800d06c:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
 800d070:	f002 f890 	bl	800f194 <aci_gap_set_io_capability>
 800d074:	2800      	cmp	r0, #0
 800d076:	f000 8478 	beq.w	800d96a <InitBleManager+0x9ee>
      BLE_MANAGER_PRINTF("Error Setting I/O Capability\r\n");
 800d07a:	4d7d      	ldr	r5, [pc, #500]	; (800d270 <InitBleManager+0x2f4>)
 800d07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d07e:	261e      	movs	r6, #30
 800d080:	f8c8 6000 	str.w	r6, [r8]
 800d084:	6038      	str	r0, [r7, #0]
 800d086:	6079      	str	r1, [r7, #4]
 800d088:	60ba      	str	r2, [r7, #8]
 800d08a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	882b      	ldrh	r3, [r5, #0]
 800d090:	83bb      	strh	r3, [r7, #28]
 800d092:	78ab      	ldrb	r3, [r5, #2]
 800d094:	6138      	str	r0, [r7, #16]
 800d096:	6179      	str	r1, [r7, #20]
 800d098:	4872      	ldr	r0, [pc, #456]	; (800d264 <InitBleManager+0x2e8>)
 800d09a:	61ba      	str	r2, [r7, #24]
 800d09c:	4631      	mov	r1, r6
 800d09e:	77bb      	strb	r3, [r7, #30]
 800d0a0:	f7f7 fa20 	bl	80044e4 <CDC_Fill_Buffer>
    if(BLE_StackValue.EnableRandomSecurePIN) {
 800d0a4:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 84b0 	beq.w	800da0e <InitBleManager+0xa92>
      ret = aci_gap_set_authentication_requirement(BLE_StackValue.AuthenticationRequirements,
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	9302      	str	r3, [sp, #8]
 800d0b8:	2110      	movs	r1, #16
 800d0ba:	2307      	movs	r3, #7
 800d0bc:	e9cd 3100 	strd	r3, r1, [sp]
 800d0c0:	9203      	str	r2, [sp, #12]
 800d0c2:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
 800d0c6:	e3ce      	b.n	800d866 <InitBleManager+0x8ea>
    BLE_MANAGER_PRINTF("\tStatic Random address not well formed\r\n");
 800d0c8:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 800d290 <InitBleManager+0x314>
 800d0cc:	4f65      	ldr	r7, [pc, #404]	; (800d264 <InitBleManager+0x2e8>)
 800d0ce:	f10e 0820 	add.w	r8, lr, #32
 800d0d2:	46bc      	mov	ip, r7
 800d0d4:	4676      	mov	r6, lr
 800d0d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d0d8:	4546      	cmp	r6, r8
 800d0da:	f10c 0c10 	add.w	ip, ip, #16
 800d0de:	f10e 0e10 	add.w	lr, lr, #16
 800d0e2:	f84c 0c10 	str.w	r0, [ip, #-16]
 800d0e6:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800d0ea:	f84c 2c08 	str.w	r2, [ip, #-8]
 800d0ee:	f84c 3c04 	str.w	r3, [ip, #-4]
 800d0f2:	d1ef      	bne.n	800d0d4 <InitBleManager+0x158>
 800d0f4:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 800d0f8:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800d28c <InitBleManager+0x310>
 800d0fc:	f89e 2000 	ldrb.w	r2, [lr]
 800d100:	2328      	movs	r3, #40	; 0x28
 800d102:	f8c8 3000 	str.w	r3, [r8]
 800d106:	f8cc 0000 	str.w	r0, [ip]
 800d10a:	f8cc 1004 	str.w	r1, [ip, #4]
 800d10e:	4855      	ldr	r0, [pc, #340]	; (800d264 <InitBleManager+0x2e8>)
 800d110:	f88c 2008 	strb.w	r2, [ip, #8]
 800d114:	4619      	mov	r1, r3
 800d116:	f7f7 f9e5 	bl	80044e4 <CDC_Fill_Buffer>
  if((*LocCustomCommands)!=NULL) {
 800d11a:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
  CustomPairingCompleted=NULL;
 800d11e:	2300      	movs	r3, #0
  CustomMTUExchangeRespEvent = NULL;
 800d120:	e9c4 33cc 	strd	r3, r3, [r4, #816]	; 0x330
  CustomDisconnectionCompleted=NULL;
 800d124:	e9c4 33ce 	strd	r3, r3, [r4, #824]	; 0x338
  CustomWriteRequestConfigCallback=NULL;
 800d128:	e9c4 3301 	strd	r3, r3, [r4, #4]
  CustomExtConfigPowerOffCommandCallback=NULL;
 800d12c:	e9c4 33d1 	strd	r3, r3, [r4, #836]	; 0x344
  CustomExtConfigSetTimeCommandCallback=NULL;
 800d130:	e9c4 33d3 	strd	r3, r3, [r4, #844]	; 0x34c
  CustomExtConfigSetWiFiCommandCallback=NULL;
 800d134:	e9c4 33d5 	strd	r3, r3, [r4, #852]	; 0x354
  CustomExtConfigClearDBCommandCallback=NULL;
 800d138:	e9c4 33d7 	strd	r3, r3, [r4, #860]	; 0x35c
  CustomExtConfigBanksSwapCommandCallback=NULL;
 800d13c:	e9c4 33d9 	strd	r3, r3, [r4, #868]	; 0x364
  CustomExtConfigInfoCommandCallback=NULL;
 800d140:	e9c4 33db 	strd	r3, r3, [r4, #876]	; 0x36c
  CustomExtConfigPowerStatusCommandCallback=NULL;
 800d144:	e9c4 33dd 	strd	r3, r3, [r4, #884]	; 0x374
  CustomExtConfigReadCustomCommandsCallback=NULL;
 800d148:	e9c4 33df 	strd	r3, r3, [r4, #892]	; 0x37c
  CustomExtConfigReadCertCommandCallback=NULL;
 800d14c:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
  CustomExtConfigReadSensorsConfigCommandsCallback=NULL;
 800d150:	e9c4 33e3 	strd	r3, r3, [r4, #908]	; 0x38c
  CustomSetConnectable=NULL;
 800d154:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
  CustomAciGattTxPoolAvailableEvent=NULL;
 800d158:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  CustomHardwareErrorEventHandler=NULL;
 800d15c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
  CustomDebugConsoleParsingCallback=NULL;
 800d160:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
  CustomExtConfigSetSensorsConfigCommandsCallback=NULL;
 800d164:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
  if((*LocCustomCommands)!=NULL) {
 800d168:	b1f8      	cbz	r0, 800d1aa <InitBleManager+0x22e>
    if((*LocCustomCommands)->NextCommand!=NULL) {
 800d16a:	6886      	ldr	r6, [r0, #8]
 800d16c:	b1c6      	cbz	r6, 800d1a0 <InitBleManager+0x224>
  if(Command->NextCommand!=NULL) {
 800d16e:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800d172:	f1b9 0f00 	cmp.w	r9, #0
 800d176:	d00b      	beq.n	800d190 <InitBleManager+0x214>
 800d178:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800d17c:	b108      	cbz	r0, 800d182 <InitBleManager+0x206>
    ClearSingleCommand((BLE_ExtCustomCommand_t *)Command->NextCommand);
 800d17e:	f7ff fb5d 	bl	800c83c <ClearSingleCommand>
  BLE_FreeFunction(Command->CommandName);
 800d182:	f8d9 0000 	ldr.w	r0, [r9]
 800d186:	f00c fa81 	bl	801968c <free>
  BLE_FreeFunction(Command);
 800d18a:	4648      	mov	r0, r9
 800d18c:	f00c fa7e 	bl	801968c <free>
  BLE_FreeFunction(Command->CommandName);
 800d190:	6830      	ldr	r0, [r6, #0]
 800d192:	f00c fa7b 	bl	801968c <free>
  BLE_FreeFunction(Command);
 800d196:	4630      	mov	r0, r6
 800d198:	f00c fa78 	bl	801968c <free>
    BLE_FreeFunction((*LocCustomCommands));
 800d19c:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 800d1a0:	f00c fa74 	bl	801968c <free>
    *LocLastCustomCommand = *LocCustomCommands = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	e9c4 33e6 	strd	r3, r3, [r4, #920]	; 0x398
  if(ret==(tBleStatus)BLE_STATUS_SUCCESS) {
 800d1aa:	b135      	cbz	r5, 800d1ba <InitBleManager+0x23e>
  set_connectable=TRUE;
 800d1ac:	2301      	movs	r3, #1
}
 800d1ae:	4628      	mov	r0, r5
  set_connectable=TRUE;
 800d1b0:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
}
 800d1b4:	b010      	add	sp, #64	; 0x40
 800d1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  //Set the Malloc/Free Functions  used inside the Json Parser
  json_set_allocation_functions(BLE_MallocFunction, BLE_FreeFunction);
#endif /* BLE_MANAGER_NO_PARSON */
  
#ifdef BLE_MANAGER_SDKV2
   BLE_MANAGER_PRINTF("BlueST-SDK V2\r\n");
 800d1ba:	4e2e      	ldr	r6, [pc, #184]	; (800d274 <InitBleManager+0x2f8>)
  json_set_allocation_functions(BLE_MallocFunction, BLE_FreeFunction);
 800d1bc:	492e      	ldr	r1, [pc, #184]	; (800d278 <InitBleManager+0x2fc>)
 800d1be:	482f      	ldr	r0, [pc, #188]	; (800d27c <InitBleManager+0x300>)
 800d1c0:	f005 f840 	bl	8012244 <json_set_allocation_functions>
   BLE_MANAGER_PRINTF("BlueST-SDK V2\r\n");
 800d1c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d1c6:	f04f 090f 	mov.w	r9, #15
 800d1ca:	f8c8 9000 	str.w	r9, [r8]
 800d1ce:	6038      	str	r0, [r7, #0]
 800d1d0:	6079      	str	r1, [r7, #4]
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	4823      	ldr	r0, [pc, #140]	; (800d264 <InitBleManager+0x2e8>)
 800d1d6:	60ba      	str	r2, [r7, #8]
 800d1d8:	4649      	mov	r1, r9
 800d1da:	f7f7 f983 	bl	80044e4 <CDC_Fill_Buffer>
#else /* BLE_MANAGER_SDKV2 */
   BLE_MANAGER_PRINTF("BlueST-SDK V1\r\n");
#endif /* BLE_MANAGER_SDKV2 */
  
  if(BLE_StackValue.EnableConfig) {
 800d1de:	f894 327e 	ldrb.w	r3, [r4, #638]	; 0x27e
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f040 8294 	bne.w	800d710 <InitBleManager+0x794>
  tBleStatus Status = BLE_ERROR_UNSPECIFIED;
 800d1e8:	251f      	movs	r5, #31
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
    }
  }
  
  if(BLE_StackValue.EnableConsole) {
 800d1ea:	f894 327f 	ldrb.w	r3, [r4, #639]	; 0x27f
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f040 814f 	bne.w	800d492 <InitBleManager+0x516>
  
  UsedStandardBleChars = UsedBleChars;
  
#ifndef BLE_MANAGER_NO_PARSON
  /* Extended Configuration characteristic value */
  if(BLE_StackValue.EnableExtConfig)
 800d1f4:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
  UsedStandardBleChars = UsedBleChars;
 800d1f8:	f894 62a4 	ldrb.w	r6, [r4, #676]	; 0x2a4
 800d1fc:	f884 6328 	strb.w	r6, [r4, #808]	; 0x328
  if(BLE_StackValue.EnableExtConfig)
 800d200:	2b00      	cmp	r3, #0
 800d202:	f040 810e 	bne.w	800d422 <InitBleManager+0x4a6>
    BleManagerAddChar(BleCharPointer);
  }
#endif /* BLE_MANAGER_NO_PARSON */
  
  /* Set Custom Configuration and Services */
  BLE_InitCustomService();
 800d206:	f7f5 fb83 	bl	8002910 <BLE_InitCustomService>
  
  if((UsedBleChars-UsedStandardBleChars) > 0U)
 800d20a:	f894 32a4 	ldrb.w	r3, [r4, #676]	; 0x2a4
 800d20e:	f894 2328 	ldrb.w	r2, [r4, #808]	; 0x328
 800d212:	4293      	cmp	r3, r2
 800d214:	d0ca      	beq.n	800d1ac <InitBleManager+0x230>
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d216:	4d1a      	ldr	r5, [pc, #104]	; (800d280 <InitBleManager+0x304>)
 800d218:	481a      	ldr	r0, [pc, #104]	; (800d284 <InitBleManager+0x308>)
 800d21a:	4e1b      	ldr	r6, [pc, #108]	; (800d288 <InitBleManager+0x30c>)
  uint8_t NumberCustomBLEChars = UsedBleChars-UsedStandardBleChars;
 800d21c:	1a9b      	subs	r3, r3, r2
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800d21e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d222:	e9cd 5008 	strd	r5, r0, [sp, #32]
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800d226:	f10d 021e 	add.w	r2, sp, #30
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d22a:	2000      	movs	r0, #0
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800d22c:	3301      	adds	r3, #1
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d22e:	e9cd 600a 	strd	r6, r0, [sp, #40]	; 0x28
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, (1U+(3U*NumberCustomBLEChars)),&Service_Handle);
 800d232:	9200      	str	r2, [sp, #0]
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2201      	movs	r2, #1
 800d238:	a908      	add	r1, sp, #32
 800d23a:	2002      	movs	r0, #2
 800d23c:	f002 f9be 	bl	800f5bc <aci_gatt_add_service>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS) {
 800d240:	4605      	mov	r5, r0
 800d242:	2800      	cmp	r0, #0
 800d244:	d152      	bne.n	800d2ec <InitBleManager+0x370>
  for(BleChar=UsedStandardBleChars;BleChar<UsedBleChars;BleChar++) {
 800d246:	f894 7328 	ldrb.w	r7, [r4, #808]	; 0x328
 800d24a:	f894 32a4 	ldrb.w	r3, [r4, #676]	; 0x2a4
 800d24e:	42bb      	cmp	r3, r7
 800d250:	f240 82f1 	bls.w	800d836 <InitBleManager+0x8ba>
 800d254:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d258:	e021      	b.n	800d29e <InitBleManager+0x322>
 800d25a:	bf00      	nop
 800d25c:	20002014 	.word	0x20002014
 800d260:	0800c6c1 	.word	0x0800c6c1
 800d264:	200011ac 	.word	0x200011ac
 800d268:	200022a8 	.word	0x200022a8
 800d26c:	20002295 	.word	0x20002295
 800d270:	08021f14 	.word	0x08021f14
 800d274:	0802203c 	.word	0x0802203c
 800d278:	0801968d 	.word	0x0801968d
 800d27c:	0801967d 	.word	0x0801967d
 800d280:	a5d5c51b 	.word	0xa5d5c51b
 800d284:	9ab40002 	.word	0x9ab40002
 800d288:	000111e1 	.word	0x000111e1
 800d28c:	200012ac 	.word	0x200012ac
 800d290:	08021e34 	.word	0x08021e34
 800d294:	f894 32a4 	ldrb.w	r3, [r4, #676]	; 0x2a4
 800d298:	42bb      	cmp	r3, r7
 800d29a:	f240 82cc 	bls.w	800d836 <InitBleManager+0x8ba>
    BleCharsArray[BleChar]->Service_Handle = Service_Handle;
 800d29e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800d2a2:	f8bd e01e 	ldrh.w	lr, [sp, #30]
 800d2a6:	f8d3 62a8 	ldr.w	r6, [r3, #680]	; 0x2a8
    BLE_MemCpy(&char_uuid.Char_UUID_128, BleCharsArray[BleChar]->uuid, 16);
 800d2aa:	6830      	ldr	r0, [r6, #0]
 800d2ac:	6871      	ldr	r1, [r6, #4]
 800d2ae:	68b2      	ldr	r2, [r6, #8]
 800d2b0:	68f3      	ldr	r3, [r6, #12]
    BleCharsArray[BleChar]->Service_Handle = Service_Handle;
 800d2b2:	f8a6 e01c 	strh.w	lr, [r6, #28]
    BLE_MemCpy(&char_uuid.Char_UUID_128, BleCharsArray[BleChar]->uuid, 16);
 800d2b6:	46cc      	mov	ip, r9
 800d2b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ret =  aci_gatt_add_char(BleCharsArray[BleChar]->Service_Handle,
 800d2bc:	f106 021a 	add.w	r2, r6, #26
 800d2c0:	8a73      	ldrh	r3, [r6, #18]
 800d2c2:	7c31      	ldrb	r1, [r6, #16]
 800d2c4:	9205      	str	r2, [sp, #20]
 800d2c6:	7e32      	ldrb	r2, [r6, #24]
 800d2c8:	9204      	str	r2, [sp, #16]
 800d2ca:	7df2      	ldrb	r2, [r6, #23]
 800d2cc:	9203      	str	r2, [sp, #12]
 800d2ce:	7db2      	ldrb	r2, [r6, #22]
 800d2d0:	9202      	str	r2, [sp, #8]
 800d2d2:	7d72      	ldrb	r2, [r6, #21]
 800d2d4:	9201      	str	r2, [sp, #4]
 800d2d6:	7d32      	ldrb	r2, [r6, #20]
 800d2d8:	9200      	str	r2, [sp, #0]
 800d2da:	4670      	mov	r0, lr
 800d2dc:	464a      	mov	r2, r9
 800d2de:	f002 f9bb 	bl	800f658 <aci_gatt_add_char>
  for(BleChar=UsedStandardBleChars;BleChar<UsedBleChars;BleChar++) {
 800d2e2:	3701      	adds	r7, #1
 800d2e4:	b2ff      	uxtb	r7, r7
    if (ret != (tBleStatus)BLE_STATUS_SUCCESS) {
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d0d4      	beq.n	800d294 <InitBleManager+0x318>
 800d2ea:	4605      	mov	r5, r0
  {
    Status = BLE_Manager_AddFeaturesService();
    if(Status == (tBleStatus)BLE_STATUS_SUCCESS) {
      BLE_MANAGER_PRINTF("Features Service added successfully (Status= 0x%x)\r\n", Status);
    } else {
      BLE_MANAGER_PRINTF("Error: while adding Features Service (Status= 0x%x)\r\n", Status);
 800d2ec:	49cd      	ldr	r1, [pc, #820]	; (800d624 <InitBleManager+0x6a8>)
 800d2ee:	48ce      	ldr	r0, [pc, #824]	; (800d628 <InitBleManager+0x6ac>)
 800d2f0:	462a      	mov	r2, r5
 800d2f2:	f00e f90b 	bl	801b50c <siprintf>
 800d2f6:	4601      	mov	r1, r0
 800d2f8:	f8c8 0000 	str.w	r0, [r8]
 800d2fc:	48ca      	ldr	r0, [pc, #808]	; (800d628 <InitBleManager+0x6ac>)
 800d2fe:	f7f7 f8f1 	bl	80044e4 <CDC_Fill_Buffer>
 800d302:	e753      	b.n	800d1ac <InitBleManager+0x230>
    BLE_MANAGER_PRINTF("\r\nReading  Random BD_ADDR failed\r\n");
 800d304:	f8df e364 	ldr.w	lr, [pc, #868]	; 800d66c <InitBleManager+0x6f0>
 800d308:	4fc7      	ldr	r7, [pc, #796]	; (800d628 <InitBleManager+0x6ac>)
 800d30a:	f10e 0820 	add.w	r8, lr, #32
 800d30e:	46bc      	mov	ip, r7
 800d310:	4676      	mov	r6, lr
 800d312:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d314:	4546      	cmp	r6, r8
 800d316:	f10c 0c10 	add.w	ip, ip, #16
 800d31a:	f10e 0e10 	add.w	lr, lr, #16
 800d31e:	f84c 0c10 	str.w	r0, [ip, #-16]
 800d322:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800d326:	f84c 2c08 	str.w	r2, [ip, #-8]
 800d32a:	f84c 3c04 	str.w	r3, [ip, #-4]
 800d32e:	d1ef      	bne.n	800d310 <InitBleManager+0x394>
 800d330:	f8df 833c 	ldr.w	r8, [pc, #828]	; 800d670 <InitBleManager+0x6f4>
 800d334:	f8be 3000 	ldrh.w	r3, [lr]
 800d338:	48bb      	ldr	r0, [pc, #748]	; (800d628 <InitBleManager+0x6ac>)
 800d33a:	2122      	movs	r1, #34	; 0x22
 800d33c:	f8c8 1000 	str.w	r1, [r8]
 800d340:	f8ac 3000 	strh.w	r3, [ip]
 800d344:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800d348:	f88c 3002 	strb.w	r3, [ip, #2]
 800d34c:	f7f7 f8ca 	bl	80044e4 <CDC_Fill_Buffer>
    goto fail;
 800d350:	e6e3      	b.n	800d11a <InitBleManager+0x19e>
    BLE_StackValue.SecurePIN = 99999;
 800d352:	4bb6      	ldr	r3, [pc, #728]	; (800d62c <InitBleManager+0x6b0>)
 800d354:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
    if(hci_le_rand(random_number) != BLE_STATUS_SUCCESS) {
 800d358:	a80c      	add	r0, sp, #48	; 0x30
 800d35a:	f002 fef1 	bl	8010140 <hci_le_rand>
 800d35e:	2800      	cmp	r0, #0
 800d360:	f040 82d8 	bne.w	800d914 <InitBleManager+0x998>
 800d364:	4fb0      	ldr	r7, [pc, #704]	; (800d628 <InitBleManager+0x6ac>)
 800d366:	f8df 8308 	ldr.w	r8, [pc, #776]	; 800d670 <InitBleManager+0x6f4>
 800d36a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800d36e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800d372:	f10d 0537 	add.w	r5, sp, #55	; 0x37
      BLE_StackValue.SecurePIN += (435U*((uint32_t)random_number[i]));
 800d376:	f240 10b3 	movw	r0, #435	; 0x1b3
 800d37a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (uint8_t i=0; i<8U; i++) {
 800d37e:	429d      	cmp	r5, r3
      BLE_StackValue.SecurePIN += (435U*((uint32_t)random_number[i]));
 800d380:	fb00 2201 	mla	r2, r0, r1, r2
    for (uint8_t i=0; i<8U; i++) {
 800d384:	d1f9      	bne.n	800d37a <InitBleManager+0x3fe>
    if (BLE_StackValue.SecurePIN <99999U) {
 800d386:	4baa      	ldr	r3, [pc, #680]	; (800d630 <InitBleManager+0x6b4>)
 800d388:	429a      	cmp	r2, r3
      BLE_StackValue.SecurePIN += 100000U;
 800d38a:	bf9c      	itt	ls
 800d38c:	f502 32c3 	addls.w	r2, r2, #99840	; 0x18600
 800d390:	32a0      	addls	r2, #160	; 0xa0
 800d392:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
 800d396:	e62e      	b.n	800cff6 <InitBleManager+0x7a>
    BLE_MANAGER_PRINTF("\r\nGAP_Init failed\r\n");
 800d398:	4ea6      	ldr	r6, [pc, #664]	; (800d634 <InitBleManager+0x6b8>)
 800d39a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d39c:	f04f 0c13 	mov.w	ip, #19
 800d3a0:	f8c8 c000 	str.w	ip, [r8]
 800d3a4:	6038      	str	r0, [r7, #0]
 800d3a6:	6830      	ldr	r0, [r6, #0]
 800d3a8:	6079      	str	r1, [r7, #4]
 800d3aa:	6138      	str	r0, [r7, #16]
 800d3ac:	60ba      	str	r2, [r7, #8]
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	4661      	mov	r1, ip
 800d3b2:	489d      	ldr	r0, [pc, #628]	; (800d628 <InitBleManager+0x6ac>)
 800d3b4:	f7f7 f896 	bl	80044e4 <CDC_Fill_Buffer>
    goto fail;
 800d3b8:	e6af      	b.n	800d11a <InitBleManager+0x19e>
    BLE_MANAGER_PRINTF("\r\nSetting Public BD_ADDR failed\r\n");
 800d3ba:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 800d674 <InitBleManager+0x6f8>
 800d3be:	f8df c268 	ldr.w	ip, [pc, #616]	; 800d628 <InitBleManager+0x6ac>
 800d3c2:	f10e 0920 	add.w	r9, lr, #32
 800d3c6:	4676      	mov	r6, lr
 800d3c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d3ca:	454e      	cmp	r6, r9
 800d3cc:	f10c 0c10 	add.w	ip, ip, #16
 800d3d0:	f10e 0e10 	add.w	lr, lr, #16
 800d3d4:	f84c 0c10 	str.w	r0, [ip, #-16]
 800d3d8:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800d3dc:	f84c 2c08 	str.w	r2, [ip, #-8]
 800d3e0:	f84c 3c04 	str.w	r3, [ip, #-4]
 800d3e4:	d1ef      	bne.n	800d3c6 <InitBleManager+0x44a>
 800d3e6:	f8be 3000 	ldrh.w	r3, [lr]
 800d3ea:	f8ac 3000 	strh.w	r3, [ip]
 800d3ee:	2121      	movs	r1, #33	; 0x21
 800d3f0:	488d      	ldr	r0, [pc, #564]	; (800d628 <InitBleManager+0x6ac>)
 800d3f2:	f8c8 1000 	str.w	r1, [r8]
 800d3f6:	f7f7 f875 	bl	80044e4 <CDC_Fill_Buffer>
    goto fail;
 800d3fa:	e68e      	b.n	800d11a <InitBleManager+0x19e>
    BLE_MANAGER_PRINTF("\r\nGATT_Init failed\r\n");
 800d3fc:	4e8e      	ldr	r6, [pc, #568]	; (800d638 <InitBleManager+0x6bc>)
 800d3fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d400:	f04f 0c14 	mov.w	ip, #20
 800d404:	f8c8 c000 	str.w	ip, [r8]
 800d408:	6038      	str	r0, [r7, #0]
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	6830      	ldr	r0, [r6, #0]
 800d40e:	7933      	ldrb	r3, [r6, #4]
 800d410:	6079      	str	r1, [r7, #4]
 800d412:	6138      	str	r0, [r7, #16]
 800d414:	60ba      	str	r2, [r7, #8]
 800d416:	4661      	mov	r1, ip
 800d418:	753b      	strb	r3, [r7, #20]
 800d41a:	4883      	ldr	r0, [pc, #524]	; (800d628 <InitBleManager+0x6ac>)
 800d41c:	f7f7 f862 	bl	80044e4 <CDC_Fill_Buffer>
    goto fail;
 800d420:	e67b      	b.n	800d11a <InitBleManager+0x19e>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800d422:	4f86      	ldr	r7, [pc, #536]	; (800d63c <InitBleManager+0x6c0>)
 800d424:	2224      	movs	r2, #36	; 0x24
 800d426:	2100      	movs	r1, #0
 800d428:	1d38      	adds	r0, r7, #4
 800d42a:	f00e f981 	bl	801b730 <memset>
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d42e:	2302      	movs	r3, #2
 800d430:	f884 33a4 	strb.w	r3, [r4, #932]	; 0x3a4
 800d434:	f884 33aa 	strb.w	r3, [r4, #938]	; 0x3aa
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d438:	f884 33b0 	strb.w	r3, [r4, #944]	; 0x3b0
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d43c:	2314      	movs	r3, #20
 800d43e:	f884 33ac 	strb.w	r3, [r4, #940]	; 0x3ac
    BleCharPointer->Char_Value_Length=20;
 800d442:	f8a4 33b2 	strh.w	r3, [r4, #946]	; 0x3b2
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 800d446:	f884 33b4 	strb.w	r3, [r4, #948]	; 0x3b4
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_ExtConfig;
 800d44a:	4b7d      	ldr	r3, [pc, #500]	; (800d640 <InitBleManager+0x6c4>)
 800d44c:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
    BleCharPointer->Write_Request_CB = Write_Request_ExtConfig;
 800d450:	4b7c      	ldr	r3, [pc, #496]	; (800d644 <InitBleManager+0x6c8>)
 800d452:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
    COPY_EXT_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d456:	4b7c      	ldr	r3, [pc, #496]	; (800d648 <InitBleManager+0x6cc>)
 800d458:	f8c4 33a0 	str.w	r3, [r4, #928]	; 0x3a0
 800d45c:	f64a 4336 	movw	r3, #44086	; 0xac36
 800d460:	f8a4 33a6 	strh.w	r3, [r4, #934]	; 0x3a6
 800d464:	f241 13e1 	movw	r3, #4577	; 0x11e1
 800d468:	f8a4 33a8 	strh.w	r3, [r4, #936]	; 0x3a8
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 800d46c:	f241 0305 	movw	r3, #4101	; 0x1005
 800d470:	f8a4 33b6 	strh.w	r3, [r4, #950]	; 0x3b6
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d474:	2e1f      	cmp	r6, #31
    BleCharPointer->Is_Variable=1;
 800d476:	f04f 0301 	mov.w	r3, #1
 800d47a:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d47e:	f63f aec2 	bhi.w	800d206 <InitBleManager+0x28a>
      BleCharsArray[UsedBleChars] = BleChar;
 800d482:	eb04 0386 	add.w	r3, r4, r6, lsl #2
      UsedBleChars++;
 800d486:	3601      	adds	r6, #1
      BleCharsArray[UsedBleChars] = BleChar;
 800d488:	f8c3 72a8 	str.w	r7, [r3, #680]	; 0x2a8
      UsedBleChars++;
 800d48c:	f884 62a4 	strb.w	r6, [r4, #676]	; 0x2a4
      retValue=1;
 800d490:	e6b9      	b.n	800d206 <InitBleManager+0x28a>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));    
 800d492:	4e6e      	ldr	r6, [pc, #440]	; (800d64c <InitBleManager+0x6d0>)
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d494:	f894 52a4 	ldrb.w	r5, [r4, #676]	; 0x2a4
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));    
 800d498:	2300      	movs	r3, #0
 800d49a:	65a3      	str	r3, [r4, #88]	; 0x58
 800d49c:	60b3      	str	r3, [r6, #8]
 800d49e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800d4a2:	60f3      	str	r3, [r6, #12]
 800d4a4:	e9c6 3306 	strd	r3, r3, [r6, #24]
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d4ae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    BleCharPointer->Is_Variable=1;
 800d4b8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Term;
 800d4bc:	4b64      	ldr	r3, [pc, #400]	; (800d650 <InitBleManager+0x6d4>)
 800d4be:	6763      	str	r3, [r4, #116]	; 0x74
    BleCharPointer->Write_Request_CB = Write_Request_Term;
 800d4c0:	4b64      	ldr	r3, [pc, #400]	; (800d654 <InitBleManager+0x6d8>)
 800d4c2:	67e3      	str	r3, [r4, #124]	; 0x7c
    BleCharPointer->Read_Request_CB = Read_Request_Term;
 800d4c4:	4b64      	ldr	r3, [pc, #400]	; (800d658 <InitBleManager+0x6dc>)
 800d4c6:	67a3      	str	r3, [r4, #120]	; 0x78
    COPY_TERM_CHAR_UUID((BleCharPointer->uuid));
 800d4c8:	4b5f      	ldr	r3, [pc, #380]	; (800d648 <InitBleManager+0x6cc>)
 800d4ca:	6563      	str	r3, [r4, #84]	; 0x54
 800d4cc:	f64a 4336 	movw	r3, #44086	; 0xac36
 800d4d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d4d4:	f241 13e1 	movw	r3, #4577	; 0x11e1
 800d4d8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800d4dc:	230e      	movs	r3, #14
 800d4de:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_STDOUT_CHAR_LEN;
 800d4e2:	239b      	movs	r3, #155	; 0x9b
 800d4e4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY)| ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP) | ((uint8_t)CHAR_PROP_WRITE) | ((uint8_t)CHAR_PROP_READ);
 800d4e8:	231e      	movs	r3, #30
 800d4ea:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d4ee:	2d1f      	cmp	r5, #31
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 800d4f0:	f241 0305 	movw	r3, #4101	; 0x1005
 800d4f4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d4f8:	d807      	bhi.n	800d50a <InitBleManager+0x58e>
      BleCharsArray[UsedBleChars] = BleChar;
 800d4fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
      UsedBleChars++;
 800d4fe:	3501      	adds	r5, #1
 800d500:	b2ed      	uxtb	r5, r5
      BleCharsArray[UsedBleChars] = BleChar;
 800d502:	f8c3 62a8 	str.w	r6, [r3, #680]	; 0x2a8
      UsedBleChars++;
 800d506:	f884 52a4 	strb.w	r5, [r4, #676]	; 0x2a4
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800d50a:	4f54      	ldr	r7, [pc, #336]	; (800d65c <InitBleManager+0x6e0>)
 800d50c:	2228      	movs	r2, #40	; 0x28
 800d50e:	2100      	movs	r1, #0
 800d510:	1d38      	adds	r0, r7, #4
 800d512:	f00e f90d 	bl	801b730 <memset>
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 800d516:	2302      	movs	r3, #2
 800d518:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800d51c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d520:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_StdErr;
 800d524:	4b4e      	ldr	r3, [pc, #312]	; (800d660 <InitBleManager+0x6e4>)
 800d526:	64a3      	str	r3, [r4, #72]	; 0x48
    BleCharPointer->Read_Request_CB = Read_Request_StdErr;
 800d528:	4b4e      	ldr	r3, [pc, #312]	; (800d664 <InitBleManager+0x6e8>)
 800d52a:	64e3      	str	r3, [r4, #76]	; 0x4c
    COPY_STDERR_CHAR_UUID((BleCharPointer->uuid));
 800d52c:	4b46      	ldr	r3, [pc, #280]	; (800d648 <InitBleManager+0x6cc>)
 800d52e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d530:	f64a 4336 	movw	r3, #44086	; 0xac36
 800d534:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800d536:	f241 13e1 	movw	r3, #4577	; 0x11e1
 800d53a:	8623      	strh	r3, [r4, #48]	; 0x30
 800d53c:	230e      	movs	r3, #14
 800d53e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    BleCharPointer->Char_Value_Length=DEFAULT_MAX_STDERR_CHAR_LEN;
 800d542:	2314      	movs	r3, #20
 800d544:	8763      	strh	r3, [r4, #58]	; 0x3a
    BleCharPointer->Char_Properties= ((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_READ);
 800d546:	2312      	movs	r3, #18
 800d548:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    BleCharPointer->GATT_Evt_Mask=GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP;
 800d54c:	f241 0304 	movw	r3, #4100	; 0x1004
 800d550:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d552:	2d1f      	cmp	r5, #31
    BleCharPointer->Is_Variable=1;
 800d554:	f04f 0301 	mov.w	r3, #1
 800d558:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d55c:	d806      	bhi.n	800d56c <InitBleManager+0x5f0>
      BleCharsArray[UsedBleChars] = BleChar;
 800d55e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
      UsedBleChars++;
 800d562:	3501      	adds	r5, #1
      BleCharsArray[UsedBleChars] = BleChar;
 800d564:	f8c3 72a8 	str.w	r7, [r3, #680]	; 0x2a8
      UsedBleChars++;
 800d568:	f884 52a4 	strb.w	r5, [r4, #676]	; 0x2a4
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d56c:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800d648 <InitBleManager+0x6cc>
 800d570:	4b3d      	ldr	r3, [pc, #244]	; (800d668 <InitBleManager+0x6ec>)
 800d572:	f8df e104 	ldr.w	lr, [pc, #260]	; 800d678 <InitBleManager+0x6fc>
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+(3*2),&(BleCharStdOut.Service_Handle));
 800d576:	f8df a104 	ldr.w	sl, [pc, #260]	; 800d67c <InitBleManager+0x700>
 800d57a:	f8cd a000 	str.w	sl, [sp]
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d57e:	e9cd c308 	strd	ip, r3, [sp, #32]
 800d582:	2300      	movs	r3, #0
 800d584:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+(3*2),&(BleCharStdOut.Service_Handle));
 800d588:	2201      	movs	r2, #1
 800d58a:	2307      	movs	r3, #7
 800d58c:	a908      	add	r1, sp, #32
 800d58e:	2002      	movs	r0, #2
 800d590:	f002 f814 	bl	800f5bc <aci_gatt_add_service>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS) {
 800d594:	4605      	mov	r5, r0
 800d596:	bb18      	cbnz	r0, 800d5e0 <InitBleManager+0x664>
  ret =  aci_gatt_add_char(BleCharStdOut.Service_Handle,
 800d598:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800d5a2:	9303      	str	r3, [sp, #12]
 800d5a4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800d5a8:	9302      	str	r3, [sp, #8]
 800d5aa:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	f1aa 0302 	sub.w	r3, sl, #2
 800d5ba:	9305      	str	r3, [sp, #20]
  BLE_MemCpy(&char_uuid.Char_UUID_128, BleCharStdOut.uuid, 16);
 800d5bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d5c0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d5c4:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharStdOut.Service_Handle,
 800d5c8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d5cc:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 800d5d0:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
 800d5d4:	464a      	mov	r2, r9
 800d5d6:	f002 f83f 	bl	800f658 <aci_gatt_add_char>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS) {
 800d5da:	4605      	mov	r5, r0
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d051      	beq.n	800d684 <InitBleManager+0x708>
      BLE_MANAGER_PRINTF("Error: while adding Console Service\r\n");
 800d5e0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800d680 <InitBleManager+0x704>
 800d5e4:	4f10      	ldr	r7, [pc, #64]	; (800d628 <InitBleManager+0x6ac>)
 800d5e6:	f10c 0e20 	add.w	lr, ip, #32
 800d5ea:	4666      	mov	r6, ip
 800d5ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d5ee:	4576      	cmp	r6, lr
 800d5f0:	f107 0710 	add.w	r7, r7, #16
 800d5f4:	f10c 0c10 	add.w	ip, ip, #16
 800d5f8:	f847 0c10 	str.w	r0, [r7, #-16]
 800d5fc:	f847 1c0c 	str.w	r1, [r7, #-12]
 800d600:	f847 2c08 	str.w	r2, [r7, #-8]
 800d604:	f847 3c04 	str.w	r3, [r7, #-4]
 800d608:	d1ef      	bne.n	800d5ea <InitBleManager+0x66e>
 800d60a:	f8dc 0000 	ldr.w	r0, [ip]
 800d60e:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800d612:	6038      	str	r0, [r7, #0]
 800d614:	80bb      	strh	r3, [r7, #4]
 800d616:	2125      	movs	r1, #37	; 0x25
 800d618:	4803      	ldr	r0, [pc, #12]	; (800d628 <InitBleManager+0x6ac>)
 800d61a:	f8c8 1000 	str.w	r1, [r8]
 800d61e:	f7f6 ff61 	bl	80044e4 <CDC_Fill_Buffer>
 800d622:	e5e7      	b.n	800d1f4 <InitBleManager+0x278>
 800d624:	080220ec 	.word	0x080220ec
 800d628:	200011ac 	.word	0x200011ac
 800d62c:	0001869f 	.word	0x0001869f
 800d630:	0001869e 	.word	0x0001869e
 800d634:	08021eb8 	.word	0x08021eb8
 800d638:	08021ea0 	.word	0x08021ea0
 800d63c:	200023b4 	.word	0x200023b4
 800d640:	0800c6ad 	.word	0x0800c6ad
 800d644:	0800eab9 	.word	0x0800eab9
 800d648:	a5d5c51b 	.word	0xa5d5c51b
 800d64c:	20002068 	.word	0x20002068
 800d650:	0800c699 	.word	0x0800c699
 800d654:	0800cd1d 	.word	0x0800cd1d
 800d658:	0800cbed 	.word	0x0800cbed
 800d65c:	2000203c 	.word	0x2000203c
 800d660:	0800c685 	.word	0x0800c685
 800d664:	0800c741 	.word	0x0800c741
 800d668:	9ab40002 	.word	0x9ab40002
 800d66c:	08021e10 	.word	0x08021e10
 800d670:	200012ac 	.word	0x200012ac
 800d674:	08021e7c 	.word	0x08021e7c
 800d678:	000e11e1 	.word	0x000e11e1
 800d67c:	20002084 	.word	0x20002084
 800d680:	080220c4 	.word	0x080220c4
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 800d684:	f1aa 032e 	sub.w	r3, sl, #46	; 0x2e
 800d688:	9305      	str	r3, [sp, #20]
 800d68a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800d69a:	9302      	str	r3, [sp, #8]
 800d69c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d6a6:	9300      	str	r3, [sp, #0]
  BLE_MemCpy(&char_uuid.Char_UUID_128, BleCharStdErr.uuid, 16);
 800d6a8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  BleCharStdErr.Service_Handle = BleCharStdOut.Service_Handle;
 800d6ac:	f8b4 5070 	ldrh.w	r5, [r4, #112]	; 0x70
 800d6b0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  BLE_MemCpy(&char_uuid.Char_UUID_128, BleCharStdErr.uuid, 16);
 800d6b4:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharStdErr.Service_Handle,
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d6bc:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800d6c0:	464a      	mov	r2, r9
 800d6c2:	f001 ffc9 	bl	800f658 <aci_gatt_add_char>
    if(Status == (tBleStatus)BLE_STATUS_SUCCESS) {
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d189      	bne.n	800d5e0 <InitBleManager+0x664>
      BLE_MANAGER_PRINTF("Console Service added successfully\r\n");
 800d6cc:	f8df c37c 	ldr.w	ip, [pc, #892]	; 800da4c <InitBleManager+0xad0>
 800d6d0:	4fd0      	ldr	r7, [pc, #832]	; (800da14 <InitBleManager+0xa98>)
 800d6d2:	f10c 0e20 	add.w	lr, ip, #32
 800d6d6:	4666      	mov	r6, ip
 800d6d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d6da:	4576      	cmp	r6, lr
 800d6dc:	f107 0710 	add.w	r7, r7, #16
 800d6e0:	f10c 0c10 	add.w	ip, ip, #16
 800d6e4:	f847 0c10 	str.w	r0, [r7, #-16]
 800d6e8:	f847 1c0c 	str.w	r1, [r7, #-12]
 800d6ec:	f847 2c08 	str.w	r2, [r7, #-8]
 800d6f0:	f847 3c04 	str.w	r3, [r7, #-4]
 800d6f4:	d1ef      	bne.n	800d6d6 <InitBleManager+0x75a>
 800d6f6:	f8dc 0000 	ldr.w	r0, [ip]
 800d6fa:	f89c 3004 	ldrb.w	r3, [ip, #4]
 800d6fe:	6038      	str	r0, [r7, #0]
 800d700:	713b      	strb	r3, [r7, #4]
 800d702:	2124      	movs	r1, #36	; 0x24
 800d704:	48c3      	ldr	r0, [pc, #780]	; (800da14 <InitBleManager+0xa98>)
 800d706:	f8c8 1000 	str.w	r1, [r8]
 800d70a:	f7f6 feeb 	bl	80044e4 <CDC_Fill_Buffer>
 800d70e:	e571      	b.n	800d1f4 <InitBleManager+0x278>
    memset(BleCharPointer,0,sizeof(BleCharTypeDef));
 800d710:	4ec1      	ldr	r6, [pc, #772]	; (800da18 <InitBleManager+0xa9c>)
 800d712:	2224      	movs	r2, #36	; 0x24
 800d714:	4629      	mov	r1, r5
 800d716:	1d30      	adds	r0, r6, #4
 800d718:	f00e f80a 	bl	801b730 <memset>
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d71c:	2202      	movs	r2, #2
    BleCharPointer->Char_Value_Length=20;
 800d71e:	2314      	movs	r3, #20
 800d720:	f8a4 323e 	strh.w	r3, [r4, #574]	; 0x23e
    BleCharPointer->Char_Properties=((uint8_t)CHAR_PROP_NOTIFY) | ((uint8_t)CHAR_PROP_WRITE_WITHOUT_RESP);
 800d724:	f884 3240 	strb.w	r3, [r4, #576]	; 0x240
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d728:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 800d72c:	f241 0305 	movw	r3, #4101	; 0x1005
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d730:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
    BleCharPointer->Char_UUID_Type =UUID_TYPE_128;
 800d734:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Config;
 800d738:	4ab8      	ldr	r2, [pc, #736]	; (800da1c <InitBleManager+0xaa0>)
    BleCharPointer->GATT_Evt_Mask= ((uint8_t)GATT_NOTIFY_ATTRIBUTE_WRITE) | ((uint8_t)GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP);
 800d73a:	f8a4 3242 	strh.w	r3, [r4, #578]	; 0x242
    BleCharPointer->AttrMod_Request_CB = AttrMod_Request_Config;
 800d73e:	f8c4 224c 	str.w	r2, [r4, #588]	; 0x24c
    BleCharPointer->Is_Variable=1;
 800d742:	2301      	movs	r3, #1
    BleCharPointer->Write_Request_CB = Write_Request_Config;
 800d744:	4ab6      	ldr	r2, [pc, #728]	; (800da20 <InitBleManager+0xaa4>)
    BleCharPointer->Is_Variable=1;
 800d746:	f884 3244 	strb.w	r3, [r4, #580]	; 0x244
    BleCharPointer->Write_Request_CB = Write_Request_Config;
 800d74a:	f8c4 2254 	str.w	r2, [r4, #596]	; 0x254
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d74e:	f894 32a4 	ldrb.w	r3, [r4, #676]	; 0x2a4
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d752:	4ab4      	ldr	r2, [pc, #720]	; (800da24 <InitBleManager+0xaa8>)
 800d754:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
 800d758:	f64a 4236 	movw	r2, #44086	; 0xac36
 800d75c:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d760:	2b1f      	cmp	r3, #31
    COPY_CONFIG_CHAR_UUID((BleCharPointer->uuid));
 800d762:	f241 12e1 	movw	r2, #4577	; 0x11e1
 800d766:	f884 9236 	strb.w	r9, [r4, #566]	; 0x236
 800d76a:	f8a4 2234 	strh.w	r2, [r4, #564]	; 0x234
    if(UsedBleChars<(uint8_t)BLE_MANAGER_MAX_ALLOCABLE_CHARS) {
 800d76e:	d806      	bhi.n	800d77e <InitBleManager+0x802>
      BleCharsArray[UsedBleChars] = BleChar;
 800d770:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      UsedBleChars++;
 800d774:	3301      	adds	r3, #1
      BleCharsArray[UsedBleChars] = BleChar;
 800d776:	f8c2 62a8 	str.w	r6, [r2, #680]	; 0x2a8
      UsedBleChars++;
 800d77a:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d77e:	4baa      	ldr	r3, [pc, #680]	; (800da28 <InitBleManager+0xaac>)
 800d780:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800da24 <InitBleManager+0xaa8>
 800d784:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800da50 <InitBleManager+0xad4>
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+3,&(BleCharConfig.Service_Handle));
 800d788:	4fa8      	ldr	r7, [pc, #672]	; (800da2c <InitBleManager+0xab0>)
 800d78a:	9700      	str	r7, [sp, #0]
  BLE_MemCpy(&service_uuid.Service_UUID_128, uuid, 16);
 800d78c:	e9cd 9308 	strd	r9, r3, [sp, #32]
 800d790:	2300      	movs	r3, #0
 800d792:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
    ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE, 1+3,&(BleCharConfig.Service_Handle));
 800d796:	2201      	movs	r2, #1
 800d798:	2304      	movs	r3, #4
 800d79a:	a908      	add	r1, sp, #32
 800d79c:	2002      	movs	r0, #2
 800d79e:	f001 ff0d 	bl	800f5bc <aci_gatt_add_service>
  if (ret != (tBleStatus)BLE_STATUS_SUCCESS) {
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	f040 80ca 	bne.w	800d93e <InitBleManager+0x9c2>
  ret =  aci_gatt_add_char(BleCharConfig.Service_Handle,
 800d7aa:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
 800d7ae:	9304      	str	r3, [sp, #16]
 800d7b0:	f894 3243 	ldrb.w	r3, [r4, #579]	; 0x243
 800d7b4:	9303      	str	r3, [sp, #12]
 800d7b6:	f894 3242 	ldrb.w	r3, [r4, #578]	; 0x242
 800d7ba:	9302      	str	r3, [sp, #8]
 800d7bc:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	3f02      	subs	r7, #2
 800d7c4:	f894 3240 	ldrb.w	r3, [r4, #576]	; 0x240
 800d7c8:	9705      	str	r7, [sp, #20]
 800d7ca:	9300      	str	r3, [sp, #0]
  BLE_MemCpy(&char_uuid.Char_UUID_128, BleCharConfig.uuid, 16);
 800d7cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d7d0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d7d4:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(BleCharConfig.Service_Handle,
 800d7d8:	f8b4 323e 	ldrh.w	r3, [r4, #574]	; 0x23e
 800d7dc:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
 800d7e0:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
 800d7e4:	464a      	mov	r2, r9
 800d7e6:	f001 ff37 	bl	800f658 <aci_gatt_add_char>
    if(Status == (tBleStatus)BLE_STATUS_SUCCESS) {
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f040 80a6 	bne.w	800d93e <InitBleManager+0x9c2>
      BLE_MANAGER_PRINTF("Config  Service added successfully\r\n");
 800d7f2:	f8df c260 	ldr.w	ip, [pc, #608]	; 800da54 <InitBleManager+0xad8>
 800d7f6:	4f87      	ldr	r7, [pc, #540]	; (800da14 <InitBleManager+0xa98>)
 800d7f8:	f10c 0e20 	add.w	lr, ip, #32
 800d7fc:	4666      	mov	r6, ip
 800d7fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d800:	4576      	cmp	r6, lr
 800d802:	f107 0710 	add.w	r7, r7, #16
 800d806:	f10c 0c10 	add.w	ip, ip, #16
 800d80a:	f847 0c10 	str.w	r0, [r7, #-16]
 800d80e:	f847 1c0c 	str.w	r1, [r7, #-12]
 800d812:	f847 2c08 	str.w	r2, [r7, #-8]
 800d816:	f847 3c04 	str.w	r3, [r7, #-4]
 800d81a:	d1ef      	bne.n	800d7fc <InitBleManager+0x880>
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
 800d81c:	f8dc 0000 	ldr.w	r0, [ip]
 800d820:	f89c 3004 	ldrb.w	r3, [ip, #4]
 800d824:	6038      	str	r0, [r7, #0]
 800d826:	713b      	strb	r3, [r7, #4]
 800d828:	2124      	movs	r1, #36	; 0x24
 800d82a:	487a      	ldr	r0, [pc, #488]	; (800da14 <InitBleManager+0xa98>)
 800d82c:	f8c8 1000 	str.w	r1, [r8]
 800d830:	f7f6 fe58 	bl	80044e4 <CDC_Fill_Buffer>
 800d834:	e4d9      	b.n	800d1ea <InitBleManager+0x26e>
      BLE_MANAGER_PRINTF("Features Service added successfully (Status= 0x%x)\r\n", Status);
 800d836:	497e      	ldr	r1, [pc, #504]	; (800da30 <InitBleManager+0xab4>)
 800d838:	4876      	ldr	r0, [pc, #472]	; (800da14 <InitBleManager+0xa98>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	f00d fe66 	bl	801b50c <siprintf>
 800d840:	2133      	movs	r1, #51	; 0x33
 800d842:	4874      	ldr	r0, [pc, #464]	; (800da14 <InitBleManager+0xa98>)
 800d844:	f8c8 1000 	str.w	r1, [r8]
 800d848:	f7f6 fe4c 	bl	80044e4 <CDC_Fill_Buffer>
 800d84c:	e4ae      	b.n	800d1ac <InitBleManager+0x230>
    ret = aci_gap_set_authentication_requirement(BLE_StackValue.AuthenticationRequirements,
 800d84e:	9002      	str	r0, [sp, #8]
 800d850:	2307      	movs	r3, #7
 800d852:	2210      	movs	r2, #16
 800d854:	e9cd 3200 	strd	r3, r2, [sp]
 800d858:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800d85c:	9203      	str	r2, [sp, #12]
 800d85e:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
 800d862:	2201      	movs	r2, #1
 800d864:	9204      	str	r2, [sp, #16]
 800d866:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
 800d86a:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
 800d86e:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
 800d872:	f001 fcad 	bl	800f1d0 <aci_gap_set_authentication_requirement>
 800d876:	4605      	mov	r5, r0
  if (ret != BLE_STATUS_SUCCESS) {
 800d878:	2800      	cmp	r0, #0
 800d87a:	f040 808b 	bne.w	800d994 <InitBleManager+0xa18>
  BLE_MANAGER_PRINTF("\r\nSERVER: BLE Stack Initialized \r\n"
 800d87e:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	f894 3295 	ldrb.w	r3, [r4, #661]	; 0x295
 800d888:	9303      	str	r3, [sp, #12]
 800d88a:	f894 3296 	ldrb.w	r3, [r4, #662]	; 0x296
 800d88e:	9302      	str	r3, [sp, #8]
 800d890:	f894 3297 	ldrb.w	r3, [r4, #663]	; 0x297
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
 800d89a:	4a66      	ldr	r2, [pc, #408]	; (800da34 <InitBleManager+0xab8>)
 800d89c:	4966      	ldr	r1, [pc, #408]	; (800da38 <InitBleManager+0xabc>)
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	485c      	ldr	r0, [pc, #368]	; (800da14 <InitBleManager+0xa98>)
 800d8a2:	f894 3299 	ldrb.w	r3, [r4, #665]	; 0x299
 800d8a6:	f00d fe31 	bl	801b50c <siprintf>
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	f8c8 0000 	str.w	r0, [r8]
 800d8b0:	4858      	ldr	r0, [pc, #352]	; (800da14 <InitBleManager+0xa98>)
 800d8b2:	f7f6 fe17 	bl	80044e4 <CDC_Fill_Buffer>
  BLE_MANAGER_PRINTF("\t\tBlueNRG-2 HW ver%d.%d\r\n", ((hwVersion>>4)&0x0FU), (hwVersion&0x0FU));
 800d8b6:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800d8ba:	4960      	ldr	r1, [pc, #384]	; (800da3c <InitBleManager+0xac0>)
 800d8bc:	4855      	ldr	r0, [pc, #340]	; (800da14 <InitBleManager+0xa98>)
 800d8be:	f002 030f 	and.w	r3, r2, #15
 800d8c2:	0912      	lsrs	r2, r2, #4
 800d8c4:	f00d fe22 	bl	801b50c <siprintf>
 800d8c8:	4601      	mov	r1, r0
 800d8ca:	f8c8 0000 	str.w	r0, [r8]
 800d8ce:	4851      	ldr	r0, [pc, #324]	; (800da14 <InitBleManager+0xa98>)
 800d8d0:	f7f6 fe08 	bl	80044e4 <CDC_Fill_Buffer>
  BLE_MANAGER_PRINTF("\t\tBlueNRG-2 FW ver%d.%d.%c\r\n\r\n", (fwVersion>>8)&0xFU, (fwVersion>>4)&0xFU, ('a' + (fwVersion&0xFU)));
 800d8d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d8d8:	4959      	ldr	r1, [pc, #356]	; (800da40 <InitBleManager+0xac4>)
 800d8da:	484e      	ldr	r0, [pc, #312]	; (800da14 <InitBleManager+0xa98>)
 800d8dc:	f002 030f 	and.w	r3, r2, #15
 800d8e0:	3361      	adds	r3, #97	; 0x61
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	f3c2 1303 	ubfx	r3, r2, #4, #4
 800d8e8:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800d8ec:	f00d fe0e 	bl	801b50c <siprintf>
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	f8c8 0000 	str.w	r0, [r8]
 800d8f6:	4847      	ldr	r0, [pc, #284]	; (800da14 <InitBleManager+0xa98>)
 800d8f8:	f7f6 fdf4 	bl	80044e4 <CDC_Fill_Buffer>
  if(BLE_StackValue.EnableSecureConnection) {
 800d8fc:	f894 3289 	ldrb.w	r3, [r4, #649]	; 0x289
 800d900:	2b00      	cmp	r3, #0
 800d902:	f040 80b1 	bne.w	800da68 <InitBleManager+0xaec>
  aci_hal_set_tx_power_level(BLE_StackValue.EnableHighPowerMode,
 800d906:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
 800d90a:	f894 027c 	ldrb.w	r0, [r4, #636]	; 0x27c
 800d90e:	f001 fff7 	bl	800f900 <aci_hal_set_tx_power_level>
 800d912:	e402      	b.n	800d11a <InitBleManager+0x19e>
      BLE_MANAGER_PRINTF("hci_le_rand() call failed\r\n");
 800d914:	4d4b      	ldr	r5, [pc, #300]	; (800da44 <InitBleManager+0xac8>)
 800d916:	4f3f      	ldr	r7, [pc, #252]	; (800da14 <InitBleManager+0xa98>)
 800d918:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800da58 <InitBleManager+0xadc>
 800d91c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d91e:	261b      	movs	r6, #27
 800d920:	f8c8 6000 	str.w	r6, [r8]
 800d924:	6038      	str	r0, [r7, #0]
 800d926:	6079      	str	r1, [r7, #4]
 800d928:	60ba      	str	r2, [r7, #8]
 800d92a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800d92c:	60fb      	str	r3, [r7, #12]
 800d92e:	6138      	str	r0, [r7, #16]
 800d930:	6179      	str	r1, [r7, #20]
 800d932:	61ba      	str	r2, [r7, #24]
 800d934:	4631      	mov	r1, r6
 800d936:	4638      	mov	r0, r7
 800d938:	f7f6 fdd4 	bl	80044e4 <CDC_Fill_Buffer>
 800d93c:	e515      	b.n	800d36a <InitBleManager+0x3ee>
      BLE_MANAGER_PRINTF("Error: while adding Config Service\r\n");
 800d93e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800da5c <InitBleManager+0xae0>
 800d942:	4f34      	ldr	r7, [pc, #208]	; (800da14 <InitBleManager+0xa98>)
 800d944:	f10c 0e20 	add.w	lr, ip, #32
 800d948:	4666      	mov	r6, ip
 800d94a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d94c:	4576      	cmp	r6, lr
 800d94e:	f107 0710 	add.w	r7, r7, #16
 800d952:	f10c 0c10 	add.w	ip, ip, #16
 800d956:	f847 0c10 	str.w	r0, [r7, #-16]
 800d95a:	f847 1c0c 	str.w	r1, [r7, #-12]
 800d95e:	f847 2c08 	str.w	r2, [r7, #-8]
 800d962:	f847 3c04 	str.w	r3, [r7, #-4]
 800d966:	d1ef      	bne.n	800d948 <InitBleManager+0x9cc>
 800d968:	e758      	b.n	800d81c <InitBleManager+0x8a0>
      BLE_MANAGER_PRINTF("I/O Capability Configurated\r\n");
 800d96a:	4d37      	ldr	r5, [pc, #220]	; (800da48 <InitBleManager+0xacc>)
 800d96c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d96e:	261d      	movs	r6, #29
 800d970:	f8c8 6000 	str.w	r6, [r8]
 800d974:	6038      	str	r0, [r7, #0]
 800d976:	6079      	str	r1, [r7, #4]
 800d978:	60ba      	str	r2, [r7, #8]
 800d97a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	882b      	ldrh	r3, [r5, #0]
 800d980:	6138      	str	r0, [r7, #16]
 800d982:	6179      	str	r1, [r7, #20]
 800d984:	61ba      	str	r2, [r7, #24]
 800d986:	83bb      	strh	r3, [r7, #28]
 800d988:	4631      	mov	r1, r6
 800d98a:	4822      	ldr	r0, [pc, #136]	; (800da14 <InitBleManager+0xa98>)
 800d98c:	f7f6 fdaa 	bl	80044e4 <CDC_Fill_Buffer>
 800d990:	f7ff bb88 	b.w	800d0a4 <InitBleManager+0x128>
    BLE_MANAGER_PRINTF("\r\nGAP setting Authentication failed\r\n");
 800d994:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 800da60 <InitBleManager+0xae4>
 800d998:	f8df c078 	ldr.w	ip, [pc, #120]	; 800da14 <InitBleManager+0xa98>
 800d99c:	f10e 0920 	add.w	r9, lr, #32
 800d9a0:	4676      	mov	r6, lr
 800d9a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d9a4:	454e      	cmp	r6, r9
 800d9a6:	f10c 0c10 	add.w	ip, ip, #16
 800d9aa:	f10e 0e10 	add.w	lr, lr, #16
 800d9ae:	f84c 0c10 	str.w	r0, [ip, #-16]
 800d9b2:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800d9b6:	f84c 2c08 	str.w	r2, [ip, #-8]
 800d9ba:	f84c 3c04 	str.w	r3, [ip, #-4]
 800d9be:	d1ef      	bne.n	800d9a0 <InitBleManager+0xa24>
 800d9c0:	f8de 0000 	ldr.w	r0, [lr]
 800d9c4:	f8be 3004 	ldrh.w	r3, [lr, #4]
 800d9c8:	f8cc 0000 	str.w	r0, [ip]
 800d9cc:	f8ac 3004 	strh.w	r3, [ip, #4]
 800d9d0:	2125      	movs	r1, #37	; 0x25
 800d9d2:	4810      	ldr	r0, [pc, #64]	; (800da14 <InitBleManager+0xa98>)
 800d9d4:	f8c8 1000 	str.w	r1, [r8]
 800d9d8:	f7f6 fd84 	bl	80044e4 <CDC_Fill_Buffer>
    goto fail;
 800d9dc:	f7ff bb9d 	b.w	800d11a <InitBleManager+0x19e>
    BLE_MANAGER_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 800d9e0:	f8df e080 	ldr.w	lr, [pc, #128]	; 800da64 <InitBleManager+0xae8>
 800d9e4:	f8df c02c 	ldr.w	ip, [pc, #44]	; 800da14 <InitBleManager+0xa98>
 800d9e8:	f10e 0920 	add.w	r9, lr, #32
 800d9ec:	4676      	mov	r6, lr
 800d9ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d9f0:	454e      	cmp	r6, r9
 800d9f2:	f10c 0c10 	add.w	ip, ip, #16
 800d9f6:	f10e 0e10 	add.w	lr, lr, #16
 800d9fa:	f84c 0c10 	str.w	r0, [ip, #-16]
 800d9fe:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800da02:	f84c 2c08 	str.w	r2, [ip, #-8]
 800da06:	f84c 3c04 	str.w	r3, [ip, #-4]
 800da0a:	d1ef      	bne.n	800d9ec <InitBleManager+0xa70>
 800da0c:	e7d8      	b.n	800d9c0 <InitBleManager+0xa44>
      ret = aci_gap_set_authentication_requirement(BLE_StackValue.AuthenticationRequirements,
 800da0e:	9302      	str	r3, [sp, #8]
 800da10:	e71e      	b.n	800d850 <InitBleManager+0x8d4>
 800da12:	bf00      	nop
 800da14:	200011ac 	.word	0x200011ac
 800da18:	20002240 	.word	0x20002240
 800da1c:	0800c64d 	.word	0x0800c64d
 800da20:	0800c671 	.word	0x0800c671
 800da24:	a5d5c51b 	.word	0xa5d5c51b
 800da28:	9ab40002 	.word	0x9ab40002
 800da2c:	2000225c 	.word	0x2000225c
 800da30:	08022124 	.word	0x08022124
 800da34:	20002295 	.word	0x20002295
 800da38:	08021f5c 	.word	0x08021f5c
 800da3c:	08021fb0 	.word	0x08021fb0
 800da40:	08021fcc 	.word	0x08021fcc
 800da44:	08021e60 	.word	0x08021e60
 800da48:	08021ef4 	.word	0x08021ef4
 800da4c:	0802209c 	.word	0x0802209c
 800da50:	000f11e1 	.word	0x000f11e1
 800da54:	0802204c 	.word	0x0802204c
 800da58:	200012ac 	.word	0x200012ac
 800da5c:	08022074 	.word	0x08022074
 800da60:	08021f34 	.word	0x08021f34
 800da64:	08021ecc 	.word	0x08021ecc
    BLE_MANAGER_PRINTF("\t-->ONLY SECURE CONNECTION<--\r\n");
 800da68:	4e13      	ldr	r6, [pc, #76]	; (800dab8 <InitBleManager+0xb3c>)
 800da6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800da6c:	f04f 0c1f 	mov.w	ip, #31
 800da70:	f8c8 c000 	str.w	ip, [r8]
 800da74:	6038      	str	r0, [r7, #0]
 800da76:	6079      	str	r1, [r7, #4]
 800da78:	60ba      	str	r2, [r7, #8]
 800da7a:	60fb      	str	r3, [r7, #12]
 800da7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800da7e:	6138      	str	r0, [r7, #16]
 800da80:	6179      	str	r1, [r7, #20]
 800da82:	61fb      	str	r3, [r7, #28]
 800da84:	480d      	ldr	r0, [pc, #52]	; (800dabc <InitBleManager+0xb40>)
 800da86:	61ba      	str	r2, [r7, #24]
 800da88:	4661      	mov	r1, ip
 800da8a:	f7f6 fd2b 	bl	80044e4 <CDC_Fill_Buffer>
    if(BLE_StackValue.EnableRandomSecurePIN) {
 800da8e:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800da92:	b163      	cbz	r3, 800daae <InitBleManager+0xb32>
      BLE_MANAGER_PRINTF("\t\tRandom Key = %lu\r\n",BLE_StackValue.SecurePIN);
 800da94:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800da98:	4909      	ldr	r1, [pc, #36]	; (800dac0 <InitBleManager+0xb44>)
      BLE_MANAGER_PRINTF("\t\tFixed  Key = %lu\r\n",BLE_StackValue.SecurePIN);
 800da9a:	4808      	ldr	r0, [pc, #32]	; (800dabc <InitBleManager+0xb40>)
 800da9c:	f00d fd36 	bl	801b50c <siprintf>
 800daa0:	4601      	mov	r1, r0
 800daa2:	f8c8 0000 	str.w	r0, [r8]
 800daa6:	4805      	ldr	r0, [pc, #20]	; (800dabc <InitBleManager+0xb40>)
 800daa8:	f7f6 fd1c 	bl	80044e4 <CDC_Fill_Buffer>
 800daac:	e72b      	b.n	800d906 <InitBleManager+0x98a>
 800daae:	4905      	ldr	r1, [pc, #20]	; (800dac4 <InitBleManager+0xb48>)
 800dab0:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800dab4:	e7f1      	b.n	800da9a <InitBleManager+0xb1e>
 800dab6:	bf00      	nop
 800dab8:	08021fec 	.word	0x08021fec
 800dabc:	200011ac 	.word	0x200011ac
 800dac0:	0802200c 	.word	0x0802200c
 800dac4:	08022024 	.word	0x08022024

0800dac8 <BLE_Command_TP_Parse>:
* @param  buffer_in: pointer to the input data.
* @param  len: buffer in length
* @retval Buffer out length.
*/
uint32_t BLE_Command_TP_Parse(uint8_t** buffer_out, uint8_t* buffer_in, uint32_t len) 
{
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static BLE_COMM_TP_Status_Typedef status = BLE_COMM_TP_WAIT_START;
  BLE_COMM_TP_Packet_Typedef packet_type;
  
  packet_type = (BLE_COMM_TP_Packet_Typedef) buffer_in[0];
  
  switch (status)
 800dacc:	4d4b      	ldr	r5, [pc, #300]	; (800dbfc <BLE_Command_TP_Parse+0x134>)
 800dace:	f895 33cc 	ldrb.w	r3, [r5, #972]	; 0x3cc
{
 800dad2:	460e      	mov	r6, r1
 800dad4:	b082      	sub	sp, #8
  packet_type = (BLE_COMM_TP_Packet_Typedef) buffer_in[0];
 800dad6:	7809      	ldrb	r1, [r1, #0]
{
 800dad8:	4680      	mov	r8, r0
 800dada:	4617      	mov	r7, r2
  switch (status)
 800dadc:	b353      	cbz	r3, 800db34 <BLE_Command_TP_Parse+0x6c>
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d124      	bne.n	800db2c <BLE_Command_TP_Parse+0x64>
      /* Error */
      buff_out_len = 0;
    }
    break;
  case BLE_COMM_TP_WAIT_END: 
    if (packet_type == BLE_COMM_TP_MIDDLE_PACKET) 
 800dae2:	2940      	cmp	r1, #64	; 0x40
 800dae4:	d02e      	beq.n	800db44 <BLE_Command_TP_Parse+0x7c>
      
      tot_len += len - 1U;
      
      buff_out_len = 0; 
    }
    else if (packet_type == BLE_COMM_TP_END_PACKET) 
 800dae6:	2980      	cmp	r1, #128	; 0x80
 800dae8:	d03a      	beq.n	800db60 <BLE_Command_TP_Parse+0x98>
      status = BLE_COMM_TP_WAIT_START; 
    } 
    else 
    {
      /*reset status*/
      status = BLE_COMM_TP_WAIT_START;
 800daea:	2000      	movs	r0, #0
 800daec:	f885 03cc 	strb.w	r0, [r5, #972]	; 0x3cc
      /*total length set to zero*/
      tot_len = 0;
 800daf0:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
      buff_out_len = 0; /* error */
    }
    break;
  }
  return buff_out_len;
}
 800daf4:	b002      	add	sp, #8
 800daf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      message_length |= buffer_in[2];
 800dafa:	f8b6 4001 	ldrh.w	r4, [r6, #1]
 800dafe:	ba64      	rev16	r4, r4
 800db00:	b2a4      	uxth	r4, r4
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));
 800db02:	4620      	mov	r0, r4
 800db04:	f00b fdba 	bl	801967c <malloc>
 800db08:	f8c8 0000 	str.w	r0, [r8]
      if(*buffer_out == NULL) {
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d050      	beq.n	800dbb2 <BLE_Command_TP_Parse+0xea>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800db10:	f8d5 43d0 	ldr.w	r4, [r5, #976]	; 0x3d0
 800db14:	1cf1      	adds	r1, r6, #3
 800db16:	4420      	add	r0, r4
 800db18:	1efa      	subs	r2, r7, #3
      tot_len += len - 3U;
 800db1a:	3c03      	subs	r4, #3
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800db1c:	f00d febf 	bl	801b89e <memcpy>
      tot_len += len - 3U;
 800db20:	443c      	add	r4, r7
      status = BLE_COMM_TP_WAIT_END;
 800db22:	2301      	movs	r3, #1
      tot_len += len - 3U;
 800db24:	f8c5 43d0 	str.w	r4, [r5, #976]	; 0x3d0
      status = BLE_COMM_TP_WAIT_END;
 800db28:	f885 33cc 	strb.w	r3, [r5, #972]	; 0x3cc
      buff_out_len = 0; 
 800db2c:	2000      	movs	r0, #0
}
 800db2e:	b002      	add	sp, #8
 800db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (packet_type == BLE_COMM_TP_START_PACKET) 
 800db34:	2900      	cmp	r1, #0
 800db36:	d0e0      	beq.n	800dafa <BLE_Command_TP_Parse+0x32>
    else if (packet_type == BLE_COMM_TP_START_END_PACKET) 
 800db38:	2920      	cmp	r1, #32
 800db3a:	d021      	beq.n	800db80 <BLE_Command_TP_Parse+0xb8>
      buff_out_len = 0;
 800db3c:	4618      	mov	r0, r3
}
 800db3e:	b002      	add	sp, #8
 800db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 800db44:	f8d5 43d0 	ldr.w	r4, [r5, #976]	; 0x3d0
 800db48:	6800      	ldr	r0, [r0, #0]
 800db4a:	4420      	add	r0, r4
      tot_len += len - 1U;
 800db4c:	3c01      	subs	r4, #1
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 800db4e:	1c71      	adds	r1, r6, #1
 800db50:	3a01      	subs	r2, #1
      tot_len += len - 1U;
 800db52:	443c      	add	r4, r7
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 800db54:	f00d fea3 	bl	801b89e <memcpy>
      tot_len += len - 1U;
 800db58:	f8c5 43d0 	str.w	r4, [r5, #976]	; 0x3d0
      buff_out_len = 0; 
 800db5c:	2000      	movs	r0, #0
 800db5e:	e7e6      	b.n	800db2e <BLE_Command_TP_Parse+0x66>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[1], (len - 1U));
 800db60:	f8d5 43d0 	ldr.w	r4, [r5, #976]	; 0x3d0
 800db64:	6800      	ldr	r0, [r0, #0]
 800db66:	1c71      	adds	r1, r6, #1
 800db68:	4420      	add	r0, r4
 800db6a:	3a01      	subs	r2, #1
 800db6c:	f00d fe97 	bl	801b89e <memcpy>
      tot_len = 0;
 800db70:	2300      	movs	r3, #0
      tot_len += len - 1U;
 800db72:	1e60      	subs	r0, r4, #1
 800db74:	4438      	add	r0, r7
      tot_len = 0;
 800db76:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
      status = BLE_COMM_TP_WAIT_START; 
 800db7a:	f885 33cc 	strb.w	r3, [r5, #972]	; 0x3cc
 800db7e:	e7d6      	b.n	800db2e <BLE_Command_TP_Parse+0x66>
      message_length |= buffer_in[2];
 800db80:	f8b6 4001 	ldrh.w	r4, [r6, #1]
 800db84:	ba64      	rev16	r4, r4
 800db86:	b2a4      	uxth	r4, r4
      *buffer_out = (uint8_t*)BLE_MallocFunction((message_length) * sizeof(uint8_t));        
 800db88:	4620      	mov	r0, r4
 800db8a:	f00b fd77 	bl	801967c <malloc>
 800db8e:	f8c8 0000 	str.w	r0, [r8]
      if(*buffer_out == NULL) {
 800db92:	b300      	cbz	r0, 800dbd6 <BLE_Command_TP_Parse+0x10e>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800db94:	f8d5 43d0 	ldr.w	r4, [r5, #976]	; 0x3d0
 800db98:	1cf1      	adds	r1, r6, #3
 800db9a:	4420      	add	r0, r4
 800db9c:	1efa      	subs	r2, r7, #3
 800db9e:	f00d fe7e 	bl	801b89e <memcpy>
      tot_len = 0;
 800dba2:	2300      	movs	r3, #0
      tot_len += len - 3U;
 800dba4:	1ee0      	subs	r0, r4, #3
 800dba6:	4438      	add	r0, r7
      tot_len = 0;
 800dba8:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
      status = BLE_COMM_TP_WAIT_START;
 800dbac:	f885 33cc 	strb.w	r3, [r5, #972]	; 0x3cc
 800dbb0:	e7bd      	b.n	800db2e <BLE_Command_TP_Parse+0x66>
        BLE_MANAGER_PRINTF("Error: Mem alloc error [%d]: %d@%s\r\n", message_length, __LINE__, __FILE__);
 800dbb2:	4b13      	ldr	r3, [pc, #76]	; (800dc00 <BLE_Command_TP_Parse+0x138>)
 800dbb4:	4913      	ldr	r1, [pc, #76]	; (800dc04 <BLE_Command_TP_Parse+0x13c>)
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	4622      	mov	r2, r4
 800dbba:	f640 53af 	movw	r3, #3503	; 0xdaf
 800dbbe:	4812      	ldr	r0, [pc, #72]	; (800dc08 <BLE_Command_TP_Parse+0x140>)
 800dbc0:	f00d fca4 	bl	801b50c <siprintf>
 800dbc4:	4b11      	ldr	r3, [pc, #68]	; (800dc0c <BLE_Command_TP_Parse+0x144>)
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	6018      	str	r0, [r3, #0]
 800dbca:	480f      	ldr	r0, [pc, #60]	; (800dc08 <BLE_Command_TP_Parse+0x140>)
 800dbcc:	f7f6 fc8a 	bl	80044e4 <CDC_Fill_Buffer>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800dbd0:	f8d8 0000 	ldr.w	r0, [r8]
 800dbd4:	e79c      	b.n	800db10 <BLE_Command_TP_Parse+0x48>
        BLE_MANAGER_PRINTF("Error: Mem alloc error [%d]: %d@%s\r\n", message_length, __LINE__, __FILE__);
 800dbd6:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <BLE_Command_TP_Parse+0x138>)
 800dbd8:	490a      	ldr	r1, [pc, #40]	; (800dc04 <BLE_Command_TP_Parse+0x13c>)
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	4622      	mov	r2, r4
 800dbde:	f640 53c3 	movw	r3, #3523	; 0xdc3
 800dbe2:	4809      	ldr	r0, [pc, #36]	; (800dc08 <BLE_Command_TP_Parse+0x140>)
 800dbe4:	f00d fc92 	bl	801b50c <siprintf>
 800dbe8:	4b08      	ldr	r3, [pc, #32]	; (800dc0c <BLE_Command_TP_Parse+0x144>)
 800dbea:	4601      	mov	r1, r0
 800dbec:	6018      	str	r0, [r3, #0]
 800dbee:	4806      	ldr	r0, [pc, #24]	; (800dc08 <BLE_Command_TP_Parse+0x140>)
 800dbf0:	f7f6 fc78 	bl	80044e4 <CDC_Fill_Buffer>
      memcpy(*buffer_out + tot_len, (uint8_t*) &buffer_in[3], (len - 3U));
 800dbf4:	f8d8 0000 	ldr.w	r0, [r8]
 800dbf8:	e7cc      	b.n	800db94 <BLE_Command_TP_Parse+0xcc>
 800dbfa:	bf00      	nop
 800dbfc:	20002014 	.word	0x20002014
 800dc00:	08021934 	.word	0x08021934
 800dc04:	0802215c 	.word	0x0802215c
 800dc08:	200011ac 	.word	0x200011ac
 800dc0c:	200012ac 	.word	0x200012ac

0800dc10 <BLE_Command_TP_Encapsulate>:
  * @param  len: buffer in length
  * @param  BytePacketSize: Packet Size in Bytes
  * @retval Buffer out length.
  */
uint32_t BLE_Command_TP_Encapsulate(uint8_t* buffer_out, uint8_t* buffer_in, uint32_t len,int32_t BytePacketSize)
{
 800dc10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t counter = 0;
  BLE_COMM_TP_Packet_Typedef packet_type = BLE_COMM_TP_START_PACKET;
  int32_t BytePacketSizeMinus1= BytePacketSize-1;
  
  /* One byte header is added to each BLE packet */
  while (counter < len) 
 800dc14:	4616      	mov	r6, r2
 800dc16:	2a00      	cmp	r2, #0
 800dc18:	d07b      	beq.n	800dd12 <BLE_Command_TP_Encapsulate+0x102>
 800dc1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
  {
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dc1e:	4590      	cmp	r8, r2
 800dc20:	4644      	mov	r4, r8
 800dc22:	bf28      	it	cs
 800dc24:	4614      	movcs	r4, r2
    
    if ((len - counter) <= BytePacketSizeMinus1) 
 800dc26:	4590      	cmp	r8, r2
 800dc28:	4607      	mov	r7, r0
 800dc2a:	4689      	mov	r9, r1
 800dc2c:	d377      	bcc.n	800dd1e <BLE_Command_TP_Encapsulate+0x10e>
 800dc2e:	2500      	movs	r5, #0
 800dc30:	46ac      	mov	ip, r5
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_MIDDLE_PACKET));
      tot_size++;
      break;
    case BLE_COMM_TP_END_PACKET: 
      /*Last part of an BLE Command packet*/
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 800dc32:	f04f 0a80 	mov.w	sl, #128	; 0x80
      tot_size++;
 800dc36:	f10c 0b01 	add.w	fp, ip, #1
      packet_type = BLE_COMM_TP_START_PACKET;
      break;
    }
    
    /*Input data is incapsulated*/
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	eb07 000b 	add.w	r0, r7, fp
      if (counter == 0U) 
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	d146      	bne.n	800dcd4 <BLE_Command_TP_Encapsulate+0xc4>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_END_PACKET));
 800dc46:	f04f 0320 	mov.w	r3, #32
 800dc4a:	f807 300c 	strb.w	r3, [r7, ip]
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dc4e:	f00d fe26 	bl	801b89e <memcpy>
  while (counter < len) 
 800dc52:	42a6      	cmp	r6, r4
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dc54:	eba6 0204 	sub.w	r2, r6, r4
    
    /*length variables update*/
    counter += size;
    tot_size += size;
 800dc58:	eb0b 0c04 	add.w	ip, fp, r4
  while (counter < len) 
 800dc5c:	4625      	mov	r5, r4
 800dc5e:	d959      	bls.n	800dd14 <BLE_Command_TP_Encapsulate+0x104>
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dc60:	4590      	cmp	r8, r2
 800dc62:	4643      	mov	r3, r8
 800dc64:	bf28      	it	cs
 800dc66:	4613      	movcs	r3, r2
    if ((len - counter) <= BytePacketSizeMinus1) 
 800dc68:	4590      	cmp	r8, r2
 800dc6a:	d256      	bcs.n	800dd1a <BLE_Command_TP_Encapsulate+0x10a>
    counter += size;
 800dc6c:	191d      	adds	r5, r3, r4
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dc6e:	eb09 0104 	add.w	r1, r9, r4
      tot_size++;
 800dc72:	f10c 0a01 	add.w	sl, ip, #1
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dc76:	461c      	mov	r4, r3
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_PACKET));
 800dc78:	eb07 030c 	add.w	r3, r7, ip
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	701a      	strb	r2, [r3, #0]
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dc80:	eb07 000a 	add.w	r0, r7, sl
 800dc84:	4622      	mov	r2, r4
 800dc86:	f00d fe0a 	bl	801b89e <memcpy>
  while (counter < len) 
 800dc8a:	42ae      	cmp	r6, r5
    tot_size += size;
 800dc8c:	eb0a 0c04 	add.w	ip, sl, r4
  while (counter < len) 
 800dc90:	d940      	bls.n	800dd14 <BLE_Command_TP_Encapsulate+0x104>
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dc92:	1b73      	subs	r3, r6, r5
 800dc94:	4598      	cmp	r8, r3
 800dc96:	4644      	mov	r4, r8
 800dc98:	bf28      	it	cs
 800dc9a:	461c      	movcs	r4, r3
    if ((len - counter) <= BytePacketSizeMinus1) 
 800dc9c:	4598      	cmp	r8, r3
 800dc9e:	d2c8      	bcs.n	800dc32 <BLE_Command_TP_Encapsulate+0x22>
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_MIDDLE_PACKET));
 800dca0:	f04f 0a40 	mov.w	sl, #64	; 0x40
      tot_size++;
 800dca4:	f10c 0b01 	add.w	fp, ip, #1
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_MIDDLE_PACKET));
 800dca8:	f807 a00c 	strb.w	sl, [r7, ip]
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dcac:	eb09 0105 	add.w	r1, r9, r5
 800dcb0:	4622      	mov	r2, r4
    counter += size;
 800dcb2:	4425      	add	r5, r4
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dcb4:	eb07 000b 	add.w	r0, r7, fp
 800dcb8:	f00d fdf1 	bl	801b89e <memcpy>
  while (counter < len) 
 800dcbc:	42ae      	cmp	r6, r5
    tot_size += size;
 800dcbe:	eb0b 0c04 	add.w	ip, fp, r4
  while (counter < len) 
 800dcc2:	d927      	bls.n	800dd14 <BLE_Command_TP_Encapsulate+0x104>
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dcc4:	1b73      	subs	r3, r6, r5
 800dcc6:	4598      	cmp	r8, r3
 800dcc8:	4644      	mov	r4, r8
 800dcca:	bf28      	it	cs
 800dccc:	461c      	movcs	r4, r3
    if ((len - counter) <= BytePacketSizeMinus1) 
 800dcce:	4598      	cmp	r8, r3
 800dcd0:	d2af      	bcs.n	800dc32 <BLE_Command_TP_Encapsulate+0x22>
 800dcd2:	e7e7      	b.n	800dca4 <BLE_Command_TP_Encapsulate+0x94>
      tot_size++;
 800dcd4:	f10c 0b01 	add.w	fp, ip, #1
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_END_PACKET));
 800dcd8:	f807 a00c 	strb.w	sl, [r7, ip]
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dcdc:	eb09 0105 	add.w	r1, r9, r5
 800dce0:	eb07 000b 	add.w	r0, r7, fp
    counter += size;
 800dce4:	4425      	add	r5, r4
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dce6:	f00d fdda 	bl	801b89e <memcpy>
  while (counter < len) 
 800dcea:	42ae      	cmp	r6, r5
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dcec:	eba6 0205 	sub.w	r2, r6, r5
    tot_size += size;
 800dcf0:	eb0b 0c04 	add.w	ip, fp, r4
  while (counter < len) 
 800dcf4:	d90e      	bls.n	800dd14 <BLE_Command_TP_Encapsulate+0x104>
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dcf6:	4590      	cmp	r8, r2
 800dcf8:	4644      	mov	r4, r8
 800dcfa:	bf28      	it	cs
 800dcfc:	4614      	movcs	r4, r2
    if ((len - counter) <= BytePacketSizeMinus1) 
 800dcfe:	4590      	cmp	r8, r2
 800dd00:	d299      	bcs.n	800dc36 <BLE_Command_TP_Encapsulate+0x26>
    memcpy((uint8_t*) &buffer_out[tot_size], (uint8_t *) &buffer_in[counter], size);
 800dd02:	eb09 0105 	add.w	r1, r9, r5
      buffer_out[tot_size] = ((uint8_t) (BLE_COMM_TP_START_PACKET));
 800dd06:	eb07 030c 	add.w	r3, r7, ip
      tot_size++;
 800dd0a:	f10c 0a01 	add.w	sl, ip, #1
    counter += size;
 800dd0e:	4425      	add	r5, r4
 800dd10:	e7b4      	b.n	800dc7c <BLE_Command_TP_Encapsulate+0x6c>
 800dd12:	4694      	mov	ip, r2
  }
  return tot_size;
}
 800dd14:	4660      	mov	r0, ip
 800dd16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size = MIN(BytePacketSizeMinus1, (len - counter));
 800dd1a:	461c      	mov	r4, r3
 800dd1c:	e78b      	b.n	800dc36 <BLE_Command_TP_Encapsulate+0x26>
 800dd1e:	4625      	mov	r5, r4
 800dd20:	4603      	mov	r3, r0
 800dd22:	f04f 0a01 	mov.w	sl, #1
 800dd26:	e7a9      	b.n	800dc7c <BLE_Command_TP_Encapsulate+0x6c>

0800dd28 <BLE_ExtConfiguration_Update>:
{
 800dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return BLE_STATUS_ERROR;
 800dd2c:	4b47      	ldr	r3, [pc, #284]	; (800de4c <BLE_ExtConfiguration_Update+0x124>)
  if ((length % 19U) == 0U) {
 800dd2e:	4a48      	ldr	r2, [pc, #288]	; (800de50 <BLE_ExtConfiguration_Update+0x128>)
        return BLE_STATUS_ERROR;
 800dd30:	fb01 f303 	mul.w	r3, r1, r3
  if ((length % 19U) == 0U) {
 800dd34:	4293      	cmp	r3, r2
{
 800dd36:	460c      	mov	r4, r1
 800dd38:	b084      	sub	sp, #16
 800dd3a:	4601      	mov	r1, r0
  if ((length % 19U) == 0U) {
 800dd3c:	d86b      	bhi.n	800de16 <BLE_ExtConfiguration_Update+0xee>
    length_wTP = (length/19U)+length;
 800dd3e:	4b45      	ldr	r3, [pc, #276]	; (800de54 <BLE_ExtConfiguration_Update+0x12c>)
 800dd40:	fba3 2304 	umull	r2, r3, r3, r4
 800dd44:	1ae2      	subs	r2, r4, r3
 800dd46:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800dd4a:	eb04 1013 	add.w	r0, r4, r3, lsr #4
  JSON_string_command_wTP = BLE_MallocFunction(sizeof(uint8_t) * length_wTP);
 800dd4e:	9103      	str	r1, [sp, #12]
 800dd50:	f00b fc94 	bl	801967c <malloc>
  if(JSON_string_command_wTP==NULL) {
 800dd54:	9903      	ldr	r1, [sp, #12]
 800dd56:	4680      	mov	r8, r0
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d066      	beq.n	800de2a <BLE_ExtConfiguration_Update+0x102>
    tot_len = BLE_Command_TP_Encapsulate(JSON_string_command_wTP, data, length,20);
 800dd5c:	2314      	movs	r3, #20
 800dd5e:	4622      	mov	r2, r4
 800dd60:	f7ff ff56 	bl	800dc10 <BLE_Command_TP_Encapsulate>
    while (j < tot_len) {
 800dd64:	4607      	mov	r7, r0
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d03a      	beq.n	800dde0 <BLE_ExtConfiguration_Update+0xb8>
 800dd6a:	4e3b      	ldr	r6, [pc, #236]	; (800de58 <BLE_ExtConfiguration_Update+0x130>)
    j = 0;
 800dd6c:	2500      	movs	r5, #0
      len = MIN(20U, (tot_len - j));
 800dd6e:	1b7c      	subs	r4, r7, r5
 800dd70:	2c14      	cmp	r4, #20
  if (breath==0){
 800dd72:	6932      	ldr	r2, [r6, #16]
      len = MIN(20U, (tot_len - j));
 800dd74:	bf28      	it	cs
 800dd76:	2414      	movcs	r4, #20
      if(BLE_UpdateExtConf(JSON_string_command_wTP+j,(uint8_t)len)!=(tBleStatus)BLE_STATUS_SUCCESS) {
 800dd78:	eb08 0c05 	add.w	ip, r8, r5
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800dd7c:	b2e3      	uxtb	r3, r4
  if (breath==0){
 800dd7e:	b97a      	cbnz	r2, 800dda0 <BLE_ExtConfiguration_Update+0x78>
      ret = aci_gatt_update_char_value(BleCharPointer->Service_Handle,BleCharPointer->attr_handle,charValOffset,charValueLen,charValue);
 800dd80:	f8b6 13ba 	ldrh.w	r1, [r6, #954]	; 0x3ba
 800dd84:	f8b6 03bc 	ldrh.w	r0, [r6, #956]	; 0x3bc
 800dd88:	f8cd c000 	str.w	ip, [sp]
 800dd8c:	f001 fcc6 	bl	800f71c <aci_gatt_update_char_value>
 800dd90:	4603      	mov	r3, r0
      j += len;
 800dd92:	4425      	add	r5, r4
      BLE_MANAGER_DELAY(20);
 800dd94:	2014      	movs	r0, #20
    if (ret != (tBleStatus)BLE_STATUS_SUCCESS){
 800dd96:	b1fb      	cbz	r3, 800ddd8 <BLE_ExtConfiguration_Update+0xb0>
      if(ret==(tBleStatus)BLE_STATUS_INSUFFICIENT_RESOURCES){
 800dd98:	2b64      	cmp	r3, #100	; 0x64
        breath = 1;
 800dd9a:	bf04      	itt	eq
 800dd9c:	2301      	moveq	r3, #1
 800dd9e:	6133      	streq	r3, [r6, #16]
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800dda0:	7b33      	ldrb	r3, [r6, #12]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d023      	beq.n	800ddee <BLE_ExtConfiguration_Update+0xc6>
      BLE_MANAGER_PRINTF("Error: Updating Bat Char\r\n");
 800dda6:	4c2d      	ldr	r4, [pc, #180]	; (800de5c <BLE_ExtConfiguration_Update+0x134>)
 800dda8:	4d2d      	ldr	r5, [pc, #180]	; (800de60 <BLE_ExtConfiguration_Update+0x138>)
 800ddaa:	4f2e      	ldr	r7, [pc, #184]	; (800de64 <BLE_ExtConfiguration_Update+0x13c>)
 800ddac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddae:	261a      	movs	r6, #26
 800ddb0:	603e      	str	r6, [r7, #0]
 800ddb2:	6028      	str	r0, [r5, #0]
 800ddb4:	6069      	str	r1, [r5, #4]
 800ddb6:	cc03      	ldmia	r4!, {r0, r1}
 800ddb8:	60aa      	str	r2, [r5, #8]
 800ddba:	60eb      	str	r3, [r5, #12]
 800ddbc:	8822      	ldrh	r2, [r4, #0]
 800ddbe:	78a3      	ldrb	r3, [r4, #2]
 800ddc0:	6128      	str	r0, [r5, #16]
 800ddc2:	6169      	str	r1, [r5, #20]
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	4631      	mov	r1, r6
 800ddc8:	832a      	strh	r2, [r5, #24]
 800ddca:	76ab      	strb	r3, [r5, #26]
 800ddcc:	f7f6 fb8a 	bl	80044e4 <CDC_Fill_Buffer>
        return BLE_STATUS_ERROR;
 800ddd0:	2047      	movs	r0, #71	; 0x47
}
 800ddd2:	b004      	add	sp, #16
 800ddd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BLE_MANAGER_DELAY(20);
 800ddd8:	f7f8 f948 	bl	800606c <HAL_Delay>
    while (j < tot_len) {
 800dddc:	42af      	cmp	r7, r5
 800ddde:	d8c6      	bhi.n	800dd6e <BLE_ExtConfiguration_Update+0x46>
    BLE_FreeFunction(JSON_string_command_wTP);
 800dde0:	4640      	mov	r0, r8
 800dde2:	f00b fc53 	bl	801968c <free>
    return BLE_STATUS_SUCCESS;
 800dde6:	2000      	movs	r0, #0
}
 800dde8:	b004      	add	sp, #16
 800ddea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 800ddee:	4d1e      	ldr	r5, [pc, #120]	; (800de68 <BLE_ExtConfiguration_Update+0x140>)
 800ddf0:	4c1e      	ldr	r4, [pc, #120]	; (800de6c <BLE_ExtConfiguration_Update+0x144>)
 800ddf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddfa:	c403      	stmia	r4!, {r0, r1}
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	2718      	movs	r7, #24
 800de00:	f800 2918 	strb.w	r2, [r0], #-24
      Stderr_Update(BufferToWrite,BytesToWrite);
 800de04:	4639      	mov	r1, r7
      BytesToWrite = (uint8_t)sprintf((char *)BufferToWrite, "Error Updating Bat Char\n");
 800de06:	f886 7224 	strb.w	r7, [r6, #548]	; 0x224
      Stderr_Update(BufferToWrite,BytesToWrite);
 800de0a:	f7fe feab 	bl	800cb64 <Stderr_Update>
        return BLE_STATUS_ERROR;
 800de0e:	2047      	movs	r0, #71	; 0x47
}
 800de10:	b004      	add	sp, #16
 800de12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    length_wTP = (length/19U)+1U+length;
 800de16:	4a0f      	ldr	r2, [pc, #60]	; (800de54 <BLE_ExtConfiguration_Update+0x12c>)
 800de18:	fba2 0204 	umull	r0, r2, r2, r4
 800de1c:	1aa0      	subs	r0, r4, r2
 800de1e:	1c63      	adds	r3, r4, #1
 800de20:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800de24:	eb03 1012 	add.w	r0, r3, r2, lsr #4
 800de28:	e791      	b.n	800dd4e <BLE_ExtConfiguration_Update+0x26>
    BLE_MANAGER_PRINTF("Error: Mem calloc error [%lu]: %d@%s\r\n",length,__LINE__,__FILE__);
 800de2a:	4d11      	ldr	r5, [pc, #68]	; (800de70 <BLE_ExtConfiguration_Update+0x148>)
 800de2c:	4911      	ldr	r1, [pc, #68]	; (800de74 <BLE_ExtConfiguration_Update+0x14c>)
 800de2e:	480c      	ldr	r0, [pc, #48]	; (800de60 <BLE_ExtConfiguration_Update+0x138>)
 800de30:	9500      	str	r5, [sp, #0]
 800de32:	f640 0316 	movw	r3, #2070	; 0x816
 800de36:	4622      	mov	r2, r4
 800de38:	f00d fb68 	bl	801b50c <siprintf>
 800de3c:	4b09      	ldr	r3, [pc, #36]	; (800de64 <BLE_ExtConfiguration_Update+0x13c>)
 800de3e:	4601      	mov	r1, r0
 800de40:	4807      	ldr	r0, [pc, #28]	; (800de60 <BLE_ExtConfiguration_Update+0x138>)
 800de42:	6019      	str	r1, [r3, #0]
 800de44:	f7f6 fb4e 	bl	80044e4 <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 800de48:	2047      	movs	r0, #71	; 0x47
 800de4a:	e7c2      	b.n	800ddd2 <BLE_ExtConfiguration_Update+0xaa>
 800de4c:	286bca1b 	.word	0x286bca1b
 800de50:	0d79435e 	.word	0x0d79435e
 800de54:	af286bcb 	.word	0xaf286bcb
 800de58:	20002014 	.word	0x20002014
 800de5c:	080221ac 	.word	0x080221ac
 800de60:	200011ac 	.word	0x200011ac
 800de64:	200012ac 	.word	0x200012ac
 800de68:	080215e8 	.word	0x080215e8
 800de6c:	20002138 	.word	0x20002138
 800de70:	08021934 	.word	0x08021934
 800de74:	08022184 	.word	0x08022184

0800de78 <SendNewCustomCommandList>:
void SendNewCustomCommandList(void) {
 800de78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  JSON_Value *tempJSON = json_value_init_object();
 800de7a:	f003 fcbd 	bl	80117f8 <json_value_init_object>
 800de7e:	4606      	mov	r6, r0
  JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800de80:	f003 fa62 	bl	8011348 <json_value_get_object>
  BLE_MANAGER_PRINTF("Command SendNewCustomCommandList\r\n");
 800de84:	4d20      	ldr	r5, [pc, #128]	; (800df08 <SendNewCustomCommandList+0x90>)
 800de86:	4c21      	ldr	r4, [pc, #132]	; (800df0c <SendNewCustomCommandList+0x94>)
  JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800de88:	4607      	mov	r7, r0
  BLE_MANAGER_PRINTF("Command SendNewCustomCommandList\r\n");
 800de8a:	f105 0e20 	add.w	lr, r5, #32
 800de8e:	46ac      	mov	ip, r5
 800de90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de94:	45f4      	cmp	ip, lr
 800de96:	f104 0410 	add.w	r4, r4, #16
 800de9a:	f105 0510 	add.w	r5, r5, #16
 800de9e:	f844 0c10 	str.w	r0, [r4, #-16]
 800dea2:	f844 1c0c 	str.w	r1, [r4, #-12]
 800dea6:	f844 2c08 	str.w	r2, [r4, #-8]
 800deaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800deae:	d1ee      	bne.n	800de8e <SendNewCustomCommandList+0x16>
 800deb0:	882b      	ldrh	r3, [r5, #0]
 800deb2:	78aa      	ldrb	r2, [r5, #2]
 800deb4:	8023      	strh	r3, [r4, #0]
 800deb6:	4b16      	ldr	r3, [pc, #88]	; (800df10 <SendNewCustomCommandList+0x98>)
 800deb8:	70a2      	strb	r2, [r4, #2]
 800deba:	2122      	movs	r1, #34	; 0x22
 800debc:	4813      	ldr	r0, [pc, #76]	; (800df0c <SendNewCustomCommandList+0x94>)
 800debe:	6019      	str	r1, [r3, #0]
 800dec0:	f7f6 fb10 	bl	80044e4 <CDC_Fill_Buffer>
  json_object_dotset_value(tempJSON_Obj, "CustomCommands", json_value_init_array());
 800dec4:	f003 fcbc 	bl	8011840 <json_value_init_array>
 800dec8:	4912      	ldr	r1, [pc, #72]	; (800df14 <SendNewCustomCommandList+0x9c>)
 800deca:	4602      	mov	r2, r0
 800decc:	4638      	mov	r0, r7
 800dece:	f004 f8f9 	bl	80120c4 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "CustomCommands");
 800ded2:	4910      	ldr	r1, [pc, #64]	; (800df14 <SendNewCustomCommandList+0x9c>)
 800ded4:	4638      	mov	r0, r7
 800ded6:	f003 f9fd 	bl	80112d4 <json_object_dotget_array>
  CustomExtConfigReadCustomCommandsCallback(JSON_SensorArray);
 800deda:	4b0f      	ldr	r3, [pc, #60]	; (800df18 <SendNewCustomCommandList+0xa0>)
 800dedc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dee0:	4798      	blx	r3
  JSON_string_command = json_serialize_to_string(tempJSON);
 800dee2:	4630      	mov	r0, r6
 800dee4:	f004 f832 	bl	8011f4c <json_serialize_to_string>
 800dee8:	4604      	mov	r4, r0
  JSON_size = json_serialization_size(tempJSON);
 800deea:	4630      	mov	r0, r6
 800deec:	f003 fffe 	bl	8011eec <json_serialization_size>
 800def0:	4601      	mov	r1, r0
  BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800def2:	4620      	mov	r0, r4
 800def4:	f7ff ff18 	bl	800dd28 <BLE_ExtConfiguration_Update>
  BLE_FreeFunction(JSON_string_command);
 800def8:	4620      	mov	r0, r4
 800defa:	f00b fbc7 	bl	801968c <free>
  json_value_free(tempJSON);
 800defe:	4630      	mov	r0, r6
}
 800df00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  json_value_free(tempJSON);
 800df04:	f003 ba30 	b.w	8011368 <json_value_free>
 800df08:	080221c8 	.word	0x080221c8
 800df0c:	200011ac 	.word	0x200011ac
 800df10:	200012ac 	.word	0x200012ac
 800df14:	080221ec 	.word	0x080221ec
 800df18:	20002014 	.word	0x20002014

0800df1c <Write_Request_ExtConfig.part.0>:
static void Write_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
 800df1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CommandType = BLE_ExtConfig_ExtractCommandType(hs_command_buffer);
 800df20:	f8df 9334 	ldr.w	r9, [pc, #820]	; 800e258 <Write_Request_ExtConfig.part.0+0x33c>
static void Write_Request_ExtConfig(void *VoidCharPointer,uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
 800df24:	f6ad 0d34 	subw	sp, sp, #2100	; 0x834
  JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800df28:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800df2c:	f003 ff1c 	bl	8011d68 <json_parse_string>
 800df30:	4682      	mov	sl, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800df32:	f003 fa09 	bl	8011348 <json_value_get_object>
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 800df36:	49ae      	ldr	r1, [pc, #696]	; (800e1f0 <Write_Request_ExtConfig.part.0+0x2d4>)
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800df38:	4607      	mov	r7, r0
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 800df3a:	f003 f9e3 	bl	8011304 <json_object_dothas_value>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d042      	beq.n	800dfc8 <Write_Request_ExtConfig.part.0+0xac>
 800df42:	4eac      	ldr	r6, [pc, #688]	; (800e1f4 <Write_Request_ExtConfig.part.0+0x2d8>)
      if (strncmp(json_object_dotget_string(JSON_ParseHandler,"command"),StandardExtConfigCommands[SearchCommand].CommandString,strlen(json_object_dotget_string(JSON_ParseHandler,"command"))) == 0) {
 800df44:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800e1f0 <Write_Request_ExtConfig.part.0+0x2d4>
  if (json_object_dothas_value(JSON_ParseHandler,"command")) {
 800df48:	2402      	movs	r4, #2
 800df4a:	e004      	b.n	800df56 <Write_Request_ExtConfig.part.0+0x3a>
    while((ReturnCode == EXT_CONFIG_COM_NOT_VALID) && (SearchCommand<((uint8_t)EXT_CONFIG_COMMAND_NUMBER))) {
 800df4c:	2c16      	cmp	r4, #22
 800df4e:	d03b      	beq.n	800dfc8 <Write_Request_ExtConfig.part.0+0xac>
 800df50:	3401      	adds	r4, #1
 800df52:	3608      	adds	r6, #8
 800df54:	b2e4      	uxtb	r4, r4
      if (strncmp(json_object_dotget_string(JSON_ParseHandler,"command"),StandardExtConfigCommands[SearchCommand].CommandString,strlen(json_object_dotget_string(JSON_ParseHandler,"command"))) == 0) {
 800df56:	4641      	mov	r1, r8
 800df58:	4638      	mov	r0, r7
 800df5a:	f003 f993 	bl	8011284 <json_object_dotget_string>
 800df5e:	4641      	mov	r1, r8
 800df60:	4605      	mov	r5, r0
 800df62:	4638      	mov	r0, r7
 800df64:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800df68:	f003 f98c 	bl	8011284 <json_object_dotget_string>
 800df6c:	f7f2 f9a8 	bl	80002c0 <strlen>
 800df70:	4659      	mov	r1, fp
 800df72:	4602      	mov	r2, r0
 800df74:	4628      	mov	r0, r5
 800df76:	f00d fbf0 	bl	801b75a <strncmp>
 800df7a:	4605      	mov	r5, r0
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d1e5      	bne.n	800df4c <Write_Request_ExtConfig.part.0+0x30>
        ReturnCode = StandardExtConfigCommands[SearchCommand].CommandType;
 800df80:	f896 b008 	ldrb.w	fp, [r6, #8]
    while((ReturnCode == EXT_CONFIG_COM_NOT_VALID) && (SearchCommand<((uint8_t)EXT_CONFIG_COMMAND_NUMBER))) {
 800df84:	f1bb 0f00 	cmp.w	fp, #0
 800df88:	d0e0      	beq.n	800df4c <Write_Request_ExtConfig.part.0+0x30>
  json_value_free(tempJSON);
 800df8a:	4650      	mov	r0, sl
    switch(CommandType)
 800df8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  json_value_free(tempJSON);
 800df90:	f003 f9ea 	bl	8011368 <json_value_free>
    switch(CommandType)
 800df94:	f1bb 0f14 	cmp.w	fp, #20
 800df98:	d819      	bhi.n	800dfce <Write_Request_ExtConfig.part.0+0xb2>
 800df9a:	e8df f01b 	tbh	[pc, fp, lsl #1]
 800df9e:	003e      	.short	0x003e
 800dfa0:	015f0121 	.word	0x015f0121
 800dfa4:	01e10191 	.word	0x01e10191
 800dfa8:	023e0213 	.word	0x023e0213
 800dfac:	02860261 	.word	0x02860261
 800dfb0:	02b4029d 	.word	0x02b4029d
 800dfb4:	032702ef 	.word	0x032702ef
 800dfb8:	0395037c 	.word	0x0395037c
 800dfbc:	04ec03c6 	.word	0x04ec03c6
 800dfc0:	042c03f9 	.word	0x042c03f9
 800dfc4:	04c4048f 	.word	0x04c4048f
  json_value_free(tempJSON);
 800dfc8:	4650      	mov	r0, sl
 800dfca:	f003 f9cd 	bl	8011368 <json_value_free>
      if(CustomExtConfigCustomCommandCallback!=NULL) {
 800dfce:	f8d9 3384 	ldr.w	r3, [r9, #900]	; 0x384
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	f000 8504 	beq.w	800e9e0 <Write_Request_ExtConfig.part.0+0xac4>
        if(ExtConfigCustomCommands!=NULL) {
 800dfd8:	f8d9 0398 	ldr.w	r0, [r9, #920]	; 0x398
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	f000 84ff 	beq.w	800e9e0 <Write_Request_ExtConfig.part.0+0xac4>
          BLE_CustomCommadResult_t *CommandResult = ParseCustomCommand(ExtConfigCustomCommands,hs_command_buffer);
 800dfe2:	f8d9 13d4 	ldr.w	r1, [r9, #980]	; 0x3d4
 800dfe6:	f7fe fc4f 	bl	800c888 <ParseCustomCommand>
          if(CommandResult!=NULL) {
 800dfea:	4604      	mov	r4, r0
 800dfec:	b168      	cbz	r0, 800e00a <Write_Request_ExtConfig.part.0+0xee>
            CustomExtConfigCustomCommandCallback(CommandResult);
 800dfee:	f8d9 3384 	ldr.w	r3, [r9, #900]	; 0x384
 800dff2:	4798      	blx	r3
            if(CommandResult->CommandName!=NULL) {
 800dff4:	6820      	ldr	r0, [r4, #0]
 800dff6:	b108      	cbz	r0, 800dffc <Write_Request_ExtConfig.part.0+0xe0>
              BLE_FreeFunction(CommandResult->CommandName);
 800dff8:	f00b fb48 	bl	801968c <free>
            if(CommandResult->StringValue!=NULL) {
 800dffc:	68e0      	ldr	r0, [r4, #12]
 800dffe:	b108      	cbz	r0, 800e004 <Write_Request_ExtConfig.part.0+0xe8>
              BLE_FreeFunction(CommandResult->StringValue);
 800e000:	f00b fb44 	bl	801968c <free>
        BLE_FreeFunction(JSON_string_command);
 800e004:	4620      	mov	r0, r4
 800e006:	f00b fb41 	bl	801968c <free>
    BLE_FreeFunction(hs_command_buffer);
 800e00a:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e00e:	f00b fb3d 	bl	801968c <free>
}
 800e012:	f60d 0d34 	addw	sp, sp, #2100	; 0x834
 800e016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        JSON_Value *tempJSON = json_value_init_object();
 800e01a:	f003 fbed 	bl	80117f8 <json_value_init_object>
 800e01e:	4607      	mov	r7, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e020:	f003 f992 	bl	8011348 <json_value_get_object>
        if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 800e024:	f8d9 3380 	ldr.w	r3, [r9, #896]	; 0x380
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e028:	4680      	mov	r8, r0
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CUSTOM_COMMAND].CommandString);
 800e02a:	ac0c      	add	r4, sp, #48	; 0x30
        if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 800e02c:	b12b      	cbz	r3, 800e03a <Write_Request_ExtConfig.part.0+0x11e>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CUSTOM_COMMAND].CommandString);
 800e02e:	4a72      	ldr	r2, [pc, #456]	; (800e1f8 <Write_Request_ExtConfig.part.0+0x2dc>)
 800e030:	4972      	ldr	r1, [pc, #456]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e032:	4620      	mov	r0, r4
 800e034:	f00d fa6a 	bl	801b50c <siprintf>
 800e038:	2512      	movs	r5, #18
        if(CustomExtConfigReadSensorsConfigCommandsCallback!=NULL) {
 800e03a:	f8d9 3390 	ldr.w	r3, [r9, #912]	; 0x390
 800e03e:	b12b      	cbz	r3, 800e04c <Write_Request_ExtConfig.part.0+0x130>
           WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_SENSOR_CONFIG].CommandString);
 800e040:	1960      	adds	r0, r4, r5
 800e042:	4a6f      	ldr	r2, [pc, #444]	; (800e200 <Write_Request_ExtConfig.part.0+0x2e4>)
 800e044:	496d      	ldr	r1, [pc, #436]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e046:	3512      	adds	r5, #18
 800e048:	f00d fa60 	bl	801b50c <siprintf>
        if(CustomExtConfigRebootOnDFUModeCommandCallback!=NULL) {
 800e04c:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 800e050:	b12b      	cbz	r3, 800e05e <Write_Request_ExtConfig.part.0+0x142>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_DFU].CommandString);
 800e052:	1960      	adds	r0, r4, r5
 800e054:	4a6b      	ldr	r2, [pc, #428]	; (800e204 <Write_Request_ExtConfig.part.0+0x2e8>)
 800e056:	4969      	ldr	r1, [pc, #420]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e058:	3504      	adds	r5, #4
 800e05a:	f00d fa57 	bl	801b50c <siprintf>
        if(CustomExtConfigPowerOffCommandCallback!=NULL) {
 800e05e:	f8d9 3348 	ldr.w	r3, [r9, #840]	; 0x348
 800e062:	b12b      	cbz	r3, 800e070 <Write_Request_ExtConfig.part.0+0x154>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_OFF].CommandString);
 800e064:	1960      	adds	r0, r4, r5
 800e066:	4a68      	ldr	r2, [pc, #416]	; (800e208 <Write_Request_ExtConfig.part.0+0x2ec>)
 800e068:	4964      	ldr	r1, [pc, #400]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e06a:	3504      	adds	r5, #4
 800e06c:	f00d fa4e 	bl	801b50c <siprintf>
        if(CustomExtConfigSetNameCommandCallback!=NULL) {
 800e070:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
 800e074:	b12b      	cbz	r3, 800e082 <Write_Request_ExtConfig.part.0+0x166>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_NAME].CommandString);
 800e076:	1960      	adds	r0, r4, r5
 800e078:	4a64      	ldr	r2, [pc, #400]	; (800e20c <Write_Request_ExtConfig.part.0+0x2f0>)
 800e07a:	4960      	ldr	r1, [pc, #384]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e07c:	3508      	adds	r5, #8
 800e07e:	f00d fa45 	bl	801b50c <siprintf>
        if(CustomExtConfigSetTimeCommandCallback!=NULL) {
 800e082:	f8d9 3350 	ldr.w	r3, [r9, #848]	; 0x350
 800e086:	b12b      	cbz	r3, 800e094 <Write_Request_ExtConfig.part.0+0x178>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_TIME].CommandString);
 800e088:	1960      	adds	r0, r4, r5
 800e08a:	4a61      	ldr	r2, [pc, #388]	; (800e210 <Write_Request_ExtConfig.part.0+0x2f4>)
 800e08c:	495b      	ldr	r1, [pc, #364]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e08e:	3508      	adds	r5, #8
 800e090:	f00d fa3c 	bl	801b50c <siprintf>
        if(CustomExtConfigSetDateCommandCallback!=NULL) {
 800e094:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
 800e098:	b12b      	cbz	r3, 800e0a6 <Write_Request_ExtConfig.part.0+0x18a>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_DATE].CommandString);
 800e09a:	1960      	adds	r0, r4, r5
 800e09c:	4a5d      	ldr	r2, [pc, #372]	; (800e214 <Write_Request_ExtConfig.part.0+0x2f8>)
 800e09e:	4957      	ldr	r1, [pc, #348]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e0a0:	3508      	adds	r5, #8
 800e0a2:	f00d fa33 	bl	801b50c <siprintf>
        if(CustomExtConfigSetWiFiCommandCallback!=NULL) {
 800e0a6:	f8d9 3358 	ldr.w	r3, [r9, #856]	; 0x358
 800e0aa:	b12b      	cbz	r3, 800e0b8 <Write_Request_ExtConfig.part.0+0x19c>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_WIFI].CommandString);
 800e0ac:	1960      	adds	r0, r4, r5
 800e0ae:	4a5a      	ldr	r2, [pc, #360]	; (800e218 <Write_Request_ExtConfig.part.0+0x2fc>)
 800e0b0:	4952      	ldr	r1, [pc, #328]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e0b2:	3508      	adds	r5, #8
 800e0b4:	f00d fa2a 	bl	801b50c <siprintf>
        if(CustomExtConfigChangePinCommandCallback!=NULL) {
 800e0b8:	f8d9 335c 	ldr.w	r3, [r9, #860]	; 0x35c
 800e0bc:	b12b      	cbz	r3, 800e0ca <Write_Request_ExtConfig.part.0+0x1ae>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_CHANGE_PIN].CommandString);
 800e0be:	1960      	adds	r0, r4, r5
 800e0c0:	4a56      	ldr	r2, [pc, #344]	; (800e21c <Write_Request_ExtConfig.part.0+0x300>)
 800e0c2:	494e      	ldr	r1, [pc, #312]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e0c4:	350a      	adds	r5, #10
 800e0c6:	f00d fa21 	bl	801b50c <siprintf>
        if(CustomExtConfigClearDBCommandCallback!=NULL) {
 800e0ca:	f8d9 3360 	ldr.w	r3, [r9, #864]	; 0x360
 800e0ce:	b12b      	cbz	r3, 800e0dc <Write_Request_ExtConfig.part.0+0x1c0>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_CLEAR_DB].CommandString);
 800e0d0:	1960      	adds	r0, r4, r5
 800e0d2:	4a53      	ldr	r2, [pc, #332]	; (800e220 <Write_Request_ExtConfig.part.0+0x304>)
 800e0d4:	4949      	ldr	r1, [pc, #292]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e0d6:	3508      	adds	r5, #8
 800e0d8:	f00d fa18 	bl	801b50c <siprintf>
        if(CustomExtConfigReadBanksFwIdCommandCallback!=NULL) {
 800e0dc:	f8d9 3364 	ldr.w	r3, [r9, #868]	; 0x364
 800e0e0:	b12b      	cbz	r3, 800e0ee <Write_Request_ExtConfig.part.0+0x1d2>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_BANKS_FW_ID].CommandString);
 800e0e2:	1960      	adds	r0, r4, r5
 800e0e4:	4a4f      	ldr	r2, [pc, #316]	; (800e224 <Write_Request_ExtConfig.part.0+0x308>)
 800e0e6:	4945      	ldr	r1, [pc, #276]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e0e8:	350e      	adds	r5, #14
 800e0ea:	f00d fa0f 	bl	801b50c <siprintf>
        if(CustomExtConfigBanksSwapCommandCallback!=NULL) {
 800e0ee:	f8d9 3368 	ldr.w	r3, [r9, #872]	; 0x368
 800e0f2:	b12b      	cbz	r3, 800e100 <Write_Request_ExtConfig.part.0+0x1e4>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_BANKS_SWAP].CommandString);
 800e0f4:	1960      	adds	r0, r4, r5
 800e0f6:	4a4c      	ldr	r2, [pc, #304]	; (800e228 <Write_Request_ExtConfig.part.0+0x30c>)
 800e0f8:	4940      	ldr	r1, [pc, #256]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e0fa:	350a      	adds	r5, #10
 800e0fc:	f00d fa06 	bl	801b50c <siprintf>
        if(CustomExtConfigReadCertCommandCallback!=NULL) {
 800e100:	f8d9 3388 	ldr.w	r3, [r9, #904]	; 0x388
 800e104:	b12b      	cbz	r3, 800e112 <Write_Request_ExtConfig.part.0+0x1f6>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_CERT].CommandString);
 800e106:	1960      	adds	r0, r4, r5
 800e108:	4a48      	ldr	r2, [pc, #288]	; (800e22c <Write_Request_ExtConfig.part.0+0x310>)
 800e10a:	493c      	ldr	r1, [pc, #240]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e10c:	3509      	adds	r5, #9
 800e10e:	f00d f9fd 	bl	801b50c <siprintf>
        if(CustomExtConfigSetCertCommandCallback!=NULL) {
 800e112:	f8d9 338c 	ldr.w	r3, [r9, #908]	; 0x38c
 800e116:	b12b      	cbz	r3, 800e124 <Write_Request_ExtConfig.part.0+0x208>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_SET_CERT].CommandString);
 800e118:	1960      	adds	r0, r4, r5
 800e11a:	4a45      	ldr	r2, [pc, #276]	; (800e230 <Write_Request_ExtConfig.part.0+0x314>)
 800e11c:	4937      	ldr	r1, [pc, #220]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e11e:	3508      	adds	r5, #8
 800e120:	f00d f9f4 	bl	801b50c <siprintf>
        if(CustomExtConfigUidCommandCallback!=NULL) {
 800e124:	f8d9 336c 	ldr.w	r3, [r9, #876]	; 0x36c
 800e128:	b12b      	cbz	r3, 800e136 <Write_Request_ExtConfig.part.0+0x21a>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_UID].CommandString);
 800e12a:	1960      	adds	r0, r4, r5
 800e12c:	4a41      	ldr	r2, [pc, #260]	; (800e234 <Write_Request_ExtConfig.part.0+0x318>)
 800e12e:	4933      	ldr	r1, [pc, #204]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e130:	3504      	adds	r5, #4
 800e132:	f00d f9eb 	bl	801b50c <siprintf>
        if(CustomExtConfigInfoCommandCallback!=NULL) {
 800e136:	f8d9 3370 	ldr.w	r3, [r9, #880]	; 0x370
 800e13a:	b12b      	cbz	r3, 800e148 <Write_Request_ExtConfig.part.0+0x22c>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_INFO].CommandString);
 800e13c:	1960      	adds	r0, r4, r5
 800e13e:	4a3e      	ldr	r2, [pc, #248]	; (800e238 <Write_Request_ExtConfig.part.0+0x31c>)
 800e140:	492e      	ldr	r1, [pc, #184]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e142:	3505      	adds	r5, #5
 800e144:	f00d f9e2 	bl	801b50c <siprintf>
        if(CustomExtConfigHelpCommandCallback!=NULL) {
 800e148:	f8d9 3374 	ldr.w	r3, [r9, #884]	; 0x374
 800e14c:	b12b      	cbz	r3, 800e15a <Write_Request_ExtConfig.part.0+0x23e>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_HELP].CommandString);
 800e14e:	1960      	adds	r0, r4, r5
 800e150:	4a3a      	ldr	r2, [pc, #232]	; (800e23c <Write_Request_ExtConfig.part.0+0x320>)
 800e152:	492a      	ldr	r1, [pc, #168]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e154:	3505      	adds	r5, #5
 800e156:	f00d f9d9 	bl	801b50c <siprintf>
        if(CustomExtConfigPowerStatusCommandCallback!=NULL) {
 800e15a:	f8d9 3378 	ldr.w	r3, [r9, #888]	; 0x378
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 8455 	beq.w	800ea0e <Write_Request_ExtConfig.part.0+0xaf2>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_POWER].CommandString);
 800e164:	1960      	adds	r0, r4, r5
 800e166:	4a36      	ldr	r2, [pc, #216]	; (800e240 <Write_Request_ExtConfig.part.0+0x324>)
 800e168:	4924      	ldr	r1, [pc, #144]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e16a:	f00d f9cf 	bl	801b50c <siprintf>
        if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 800e16e:	f8d9 337c 	ldr.w	r3, [r9, #892]	; 0x37c
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_POWER].CommandString);
 800e172:	350c      	adds	r5, #12
        if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 800e174:	b12b      	cbz	r3, 800e182 <Write_Request_ExtConfig.part.0+0x266>
          WritingPointer+=sprintf((char *)LocalBufferToWrite+WritingPointer,"%s,",StandardExtConfigCommands[EXT_CONFIG_COM_READ_VER_FW].CommandString);
 800e176:	1960      	adds	r0, r4, r5
 800e178:	4a32      	ldr	r2, [pc, #200]	; (800e244 <Write_Request_ExtConfig.part.0+0x328>)
 800e17a:	4920      	ldr	r1, [pc, #128]	; (800e1fc <Write_Request_ExtConfig.part.0+0x2e0>)
 800e17c:	350a      	adds	r5, #10
 800e17e:	f00d f9c5 	bl	801b50c <siprintf>
          LocalBufferToWrite[WritingPointer-1]=0U;
 800e182:	4425      	add	r5, r4
 800e184:	2300      	movs	r3, #0
 800e186:	f805 3c01 	strb.w	r3, [r5, #-1]
        BLE_MANAGER_PRINTF("Command ReadCommand\r\n");
 800e18a:	4b2f      	ldr	r3, [pc, #188]	; (800e248 <Write_Request_ExtConfig.part.0+0x32c>)
 800e18c:	4d2f      	ldr	r5, [pc, #188]	; (800e24c <Write_Request_ExtConfig.part.0+0x330>)
 800e18e:	4e30      	ldr	r6, [pc, #192]	; (800e250 <Write_Request_ExtConfig.part.0+0x334>)
 800e190:	f04f 0c15 	mov.w	ip, #21
 800e194:	f8c3 c000 	str.w	ip, [r3]
 800e198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e19a:	6030      	str	r0, [r6, #0]
 800e19c:	60f3      	str	r3, [r6, #12]
 800e19e:	6828      	ldr	r0, [r5, #0]
 800e1a0:	88ab      	ldrh	r3, [r5, #4]
 800e1a2:	6071      	str	r1, [r6, #4]
 800e1a4:	60b2      	str	r2, [r6, #8]
 800e1a6:	4661      	mov	r1, ip
 800e1a8:	6130      	str	r0, [r6, #16]
 800e1aa:	82b3      	strh	r3, [r6, #20]
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	f7f6 f999 	bl	80044e4 <CDC_Fill_Buffer>
        json_object_dotset_string(tempJSON_Obj, "Commands", (char *)LocalBufferToWrite);
 800e1b2:	4928      	ldr	r1, [pc, #160]	; (800e254 <Write_Request_ExtConfig.part.0+0x338>)
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	f003 ffe6 	bl	8012188 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e1bc:	4638      	mov	r0, r7
 800e1be:	f003 fec5 	bl	8011f4c <json_serialize_to_string>
 800e1c2:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e1c4:	4638      	mov	r0, r7
 800e1c6:	f003 fe91 	bl	8011eec <json_serialization_size>
 800e1ca:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f7ff fdab 	bl	800dd28 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f00b fa5a 	bl	801968c <free>
        json_value_free(tempJSON);
 800e1d8:	4638      	mov	r0, r7
 800e1da:	f003 f8c5 	bl	8011368 <json_value_free>
 800e1de:	e714      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigReadCustomCommandsCallback!=NULL) {
 800e1e0:	f8d9 3380 	ldr.w	r3, [r9, #896]	; 0x380
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f43f af10 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        SendNewCustomCommandList();
 800e1ea:	f7ff fe45 	bl	800de78 <SendNewCustomCommandList>
 800e1ee:	e70c      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
 800e1f0:	0802192c 	.word	0x0802192c
 800e1f4:	0801fe34 	.word	0x0801fe34
 800e1f8:	08021cbc 	.word	0x08021cbc
 800e1fc:	08022234 	.word	0x08022234
 800e200:	08022238 	.word	0x08022238
 800e204:	0802224c 	.word	0x0802224c
 800e208:	08022250 	.word	0x08022250
 800e20c:	08022254 	.word	0x08022254
 800e210:	0802225c 	.word	0x0802225c
 800e214:	08022264 	.word	0x08022264
 800e218:	0802226c 	.word	0x0802226c
 800e21c:	08022274 	.word	0x08022274
 800e220:	08022280 	.word	0x08022280
 800e224:	08022288 	.word	0x08022288
 800e228:	08022298 	.word	0x08022298
 800e22c:	080222a4 	.word	0x080222a4
 800e230:	080222b0 	.word	0x080222b0
 800e234:	080222b8 	.word	0x080222b8
 800e238:	0802222c 	.word	0x0802222c
 800e23c:	080222bc 	.word	0x080222bc
 800e240:	080222c4 	.word	0x080222c4
 800e244:	080222d0 	.word	0x080222d0
 800e248:	200012ac 	.word	0x200012ac
 800e24c:	080222dc 	.word	0x080222dc
 800e250:	200011ac 	.word	0x200011ac
 800e254:	080222f4 	.word	0x080222f4
 800e258:	20002014 	.word	0x20002014
      if(CustomExtConfigReadCertCommandCallback!=NULL) {
 800e25c:	f8d9 3388 	ldr.w	r3, [r9, #904]	; 0x388
 800e260:	2b00      	cmp	r3, #0
 800e262:	f43f aed2 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e266:	f003 fac7 	bl	80117f8 <json_value_init_object>
 800e26a:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e26c:	f003 f86c 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 800e270:	4cb1      	ldr	r4, [pc, #708]	; (800e538 <Write_Request_ExtConfig.part.0+0x61c>)
 800e272:	4bb2      	ldr	r3, [pc, #712]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e274:	4db2      	ldr	r5, [pc, #712]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e276:	2715      	movs	r7, #21
 800e278:	601f      	str	r7, [r3, #0]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e27a:	4680      	mov	r8, r0
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 800e27c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e27e:	6028      	str	r0, [r5, #0]
 800e280:	60eb      	str	r3, [r5, #12]
 800e282:	6820      	ldr	r0, [r4, #0]
 800e284:	88a3      	ldrh	r3, [r4, #4]
 800e286:	60aa      	str	r2, [r5, #8]
 800e288:	6069      	str	r1, [r5, #4]
 800e28a:	6128      	str	r0, [r5, #16]
 800e28c:	4639      	mov	r1, r7
 800e28e:	82ab      	strh	r3, [r5, #20]
 800e290:	4628      	mov	r0, r5
 800e292:	f7f6 f927 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigReadCertCommandCallback(LocalBufferToWrite);
 800e296:	f8d9 3388 	ldr.w	r3, [r9, #904]	; 0x388
 800e29a:	a80c      	add	r0, sp, #48	; 0x30
 800e29c:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Certificate", (char *)LocalBufferToWrite);
 800e29e:	49a9      	ldr	r1, [pc, #676]	; (800e544 <Write_Request_ExtConfig.part.0+0x628>)
 800e2a0:	aa0c      	add	r2, sp, #48	; 0x30
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	f003 ff70 	bl	8012188 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f003 fe4f 	bl	8011f4c <json_serialize_to_string>
 800e2ae:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f003 fe1b 	bl	8011eec <json_serialization_size>
 800e2b6:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7ff fd35 	bl	800dd28 <BLE_ExtConfiguration_Update>
 800e2be:	e6a4      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigUidCommandCallback!=NULL) {
 800e2c0:	f8d9 336c 	ldr.w	r3, [r9, #876]	; 0x36c
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f43f aea0 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e2ca:	f003 fa95 	bl	80117f8 <json_value_init_object>
 800e2ce:	4605      	mov	r5, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e2d0:	f003 f83a 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command UID\r\n");
 800e2d4:	4a99      	ldr	r2, [pc, #612]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e2d6:	4b9c      	ldr	r3, [pc, #624]	; (800e548 <Write_Request_ExtConfig.part.0+0x62c>)
 800e2d8:	4c99      	ldr	r4, [pc, #612]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e2da:	260d      	movs	r6, #13
 800e2dc:	6016      	str	r6, [r2, #0]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e2de:	4607      	mov	r7, r0
        BLE_MANAGER_PRINTF("Command UID\r\n");
 800e2e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e2e2:	881b      	ldrh	r3, [r3, #0]
 800e2e4:	60a2      	str	r2, [r4, #8]
 800e2e6:	6020      	str	r0, [r4, #0]
 800e2e8:	6061      	str	r1, [r4, #4]
 800e2ea:	81a3      	strh	r3, [r4, #12]
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7f6 f8f8 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigUidCommandCallback(&uid);
 800e2f4:	f8d9 336c 	ldr.w	r3, [r9, #876]	; 0x36c
 800e2f8:	a80b      	add	r0, sp, #44	; 0x2c
 800e2fa:	4798      	blx	r3
                uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 800e2fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        sprintf((char *)LocalBufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X",
 800e2fe:	4993      	ldr	r1, [pc, #588]	; (800e54c <Write_Request_ExtConfig.part.0+0x630>)
 800e300:	7a20      	ldrb	r0, [r4, #8]
 800e302:	78a3      	ldrb	r3, [r4, #2]
 800e304:	78e2      	ldrb	r2, [r4, #3]
 800e306:	9009      	str	r0, [sp, #36]	; 0x24
 800e308:	7a60      	ldrb	r0, [r4, #9]
 800e30a:	9008      	str	r0, [sp, #32]
 800e30c:	7aa0      	ldrb	r0, [r4, #10]
 800e30e:	9007      	str	r0, [sp, #28]
 800e310:	7ae0      	ldrb	r0, [r4, #11]
 800e312:	9006      	str	r0, [sp, #24]
 800e314:	7920      	ldrb	r0, [r4, #4]
 800e316:	9005      	str	r0, [sp, #20]
 800e318:	7960      	ldrb	r0, [r4, #5]
 800e31a:	9004      	str	r0, [sp, #16]
 800e31c:	79a0      	ldrb	r0, [r4, #6]
 800e31e:	9003      	str	r0, [sp, #12]
 800e320:	79e0      	ldrb	r0, [r4, #7]
 800e322:	9002      	str	r0, [sp, #8]
 800e324:	7820      	ldrb	r0, [r4, #0]
 800e326:	9001      	str	r0, [sp, #4]
 800e328:	7860      	ldrb	r0, [r4, #1]
 800e32a:	9000      	str	r0, [sp, #0]
 800e32c:	a80c      	add	r0, sp, #48	; 0x30
 800e32e:	f00d f8ed 	bl	801b50c <siprintf>
        json_object_dotset_string(tempJSON_Obj, "UID", (char *)LocalBufferToWrite);
 800e332:	aa0c      	add	r2, sp, #48	; 0x30
 800e334:	4986      	ldr	r1, [pc, #536]	; (800e550 <Write_Request_ExtConfig.part.0+0x634>)
 800e336:	4638      	mov	r0, r7
 800e338:	f003 ff26 	bl	8012188 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e33c:	4628      	mov	r0, r5
 800e33e:	f003 fe05 	bl	8011f4c <json_serialize_to_string>
 800e342:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e344:	4628      	mov	r0, r5
 800e346:	f003 fdd1 	bl	8011eec <json_serialization_size>
 800e34a:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e34c:	4620      	mov	r0, r4
 800e34e:	f7ff fceb 	bl	800dd28 <BLE_ExtConfiguration_Update>
        BLE_FreeFunction(JSON_string_command);
 800e352:	4620      	mov	r0, r4
 800e354:	f00b f99a 	bl	801968c <free>
        json_value_free(tempJSON);
 800e358:	4628      	mov	r0, r5
 800e35a:	f003 f805 	bl	8011368 <json_value_free>
 800e35e:	e654      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 800e360:	f8d9 337c 	ldr.w	r3, [r9, #892]	; 0x37c
 800e364:	2b00      	cmp	r3, #0
 800e366:	f43f ae50 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e36a:	f003 fa45 	bl	80117f8 <json_value_init_object>
 800e36e:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e370:	f002 ffea 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command VersionFw\r\n");
 800e374:	4c77      	ldr	r4, [pc, #476]	; (800e554 <Write_Request_ExtConfig.part.0+0x638>)
 800e376:	4b71      	ldr	r3, [pc, #452]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e378:	4d71      	ldr	r5, [pc, #452]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e37a:	f04f 0c13 	mov.w	ip, #19
 800e37e:	f8c3 c000 	str.w	ip, [r3]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e382:	4607      	mov	r7, r0
        BLE_MANAGER_PRINTF("Command VersionFw\r\n");
 800e384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e386:	6028      	str	r0, [r5, #0]
 800e388:	6820      	ldr	r0, [r4, #0]
 800e38a:	60aa      	str	r2, [r5, #8]
 800e38c:	6069      	str	r1, [r5, #4]
 800e38e:	60eb      	str	r3, [r5, #12]
 800e390:	4661      	mov	r1, ip
 800e392:	6128      	str	r0, [r5, #16]
 800e394:	4628      	mov	r0, r5
 800e396:	f7f6 f8a5 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigVersionFwCommandCallback(LocalBufferToWrite);
 800e39a:	a80c      	add	r0, sp, #48	; 0x30
 800e39c:	f8d9 337c 	ldr.w	r3, [r9, #892]	; 0x37c
 800e3a0:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "VersionFw", (char *)LocalBufferToWrite);
 800e3a2:	496d      	ldr	r1, [pc, #436]	; (800e558 <Write_Request_ExtConfig.part.0+0x63c>)
 800e3a4:	aa0c      	add	r2, sp, #48	; 0x30
 800e3a6:	4638      	mov	r0, r7
        json_object_dotset_string(tempJSON_Obj, "PowerStatus", (char *)LocalBufferToWrite);
 800e3a8:	f003 feee 	bl	8012188 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f003 fdcd 	bl	8011f4c <json_serialize_to_string>
 800e3b2:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e3b4:	4630      	mov	r0, r6
        JSON_size = json_serialization_size(tempJSON);
 800e3b6:	f003 fd99 	bl	8011eec <json_serialization_size>
 800e3ba:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7ff fcb3 	bl	800dd28 <BLE_ExtConfiguration_Update>
 800e3c2:	e61f      	b.n	800e004 <Write_Request_ExtConfig.part.0+0xe8>
      if(CustomExtConfigInfoCommandCallback!=NULL) {
 800e3c4:	f8d9 3370 	ldr.w	r3, [r9, #880]	; 0x370
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f43f ae1e 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e3ce:	f003 fa13 	bl	80117f8 <json_value_init_object>
 800e3d2:	4605      	mov	r5, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e3d4:	f002 ffb8 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command Info\r\n");
 800e3d8:	4a58      	ldr	r2, [pc, #352]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e3da:	4b60      	ldr	r3, [pc, #384]	; (800e55c <Write_Request_ExtConfig.part.0+0x640>)
 800e3dc:	4c58      	ldr	r4, [pc, #352]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e3de:	260e      	movs	r6, #14
 800e3e0:	6016      	str	r6, [r2, #0]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e3e2:	4607      	mov	r7, r0
        BLE_MANAGER_PRINTF("Command Info\r\n");
 800e3e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3e6:	60a2      	str	r2, [r4, #8]
 800e3e8:	881a      	ldrh	r2, [r3, #0]
 800e3ea:	789b      	ldrb	r3, [r3, #2]
 800e3ec:	81a2      	strh	r2, [r4, #12]
 800e3ee:	6020      	str	r0, [r4, #0]
 800e3f0:	6061      	str	r1, [r4, #4]
 800e3f2:	73a3      	strb	r3, [r4, #14]
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f7f6 f874 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigInfoCommandCallback(LocalBufferToWrite);
 800e3fc:	f8d9 3370 	ldr.w	r3, [r9, #880]	; 0x370
 800e400:	a80c      	add	r0, sp, #48	; 0x30
 800e402:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Info", (char *)LocalBufferToWrite);
 800e404:	4956      	ldr	r1, [pc, #344]	; (800e560 <Write_Request_ExtConfig.part.0+0x644>)
 800e406:	aa0c      	add	r2, sp, #48	; 0x30
 800e408:	4638      	mov	r0, r7
 800e40a:	f003 febd 	bl	8012188 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e40e:	4628      	mov	r0, r5
 800e410:	f003 fd9c 	bl	8011f4c <json_serialize_to_string>
 800e414:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e416:	4628      	mov	r0, r5
 800e418:	e7cd      	b.n	800e3b6 <Write_Request_ExtConfig.part.0+0x49a>
      if(CustomExtConfigHelpCommandCallback!=NULL) {
 800e41a:	f8d9 3374 	ldr.w	r3, [r9, #884]	; 0x374
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f43f adf3 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e424:	f003 f9e8 	bl	80117f8 <json_value_init_object>
 800e428:	4605      	mov	r5, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e42a:	f002 ff8d 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command Help\r\n");
 800e42e:	4a43      	ldr	r2, [pc, #268]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e430:	4b4c      	ldr	r3, [pc, #304]	; (800e564 <Write_Request_ExtConfig.part.0+0x648>)
 800e432:	4c43      	ldr	r4, [pc, #268]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e434:	260e      	movs	r6, #14
 800e436:	6016      	str	r6, [r2, #0]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e438:	4607      	mov	r7, r0
        BLE_MANAGER_PRINTF("Command Help\r\n");
 800e43a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e43c:	60a2      	str	r2, [r4, #8]
 800e43e:	881a      	ldrh	r2, [r3, #0]
 800e440:	789b      	ldrb	r3, [r3, #2]
 800e442:	81a2      	strh	r2, [r4, #12]
 800e444:	6020      	str	r0, [r4, #0]
 800e446:	6061      	str	r1, [r4, #4]
 800e448:	73a3      	strb	r3, [r4, #14]
 800e44a:	4631      	mov	r1, r6
 800e44c:	4620      	mov	r0, r4
 800e44e:	f7f6 f849 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigHelpCommandCallback(LocalBufferToWrite);
 800e452:	f8d9 3374 	ldr.w	r3, [r9, #884]	; 0x374
 800e456:	a80c      	add	r0, sp, #48	; 0x30
 800e458:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "Help", (char *)LocalBufferToWrite);
 800e45a:	4943      	ldr	r1, [pc, #268]	; (800e568 <Write_Request_ExtConfig.part.0+0x64c>)
 800e45c:	aa0c      	add	r2, sp, #48	; 0x30
 800e45e:	e7d3      	b.n	800e408 <Write_Request_ExtConfig.part.0+0x4ec>
       if(CustomExtConfigPowerStatusCommandCallback!=NULL) {
 800e460:	f8d9 3378 	ldr.w	r3, [r9, #888]	; 0x378
 800e464:	2b00      	cmp	r3, #0
 800e466:	f43f add0 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e46a:	f003 f9c5 	bl	80117f8 <json_value_init_object>
 800e46e:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e470:	f002 ff6a 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 800e474:	4c30      	ldr	r4, [pc, #192]	; (800e538 <Write_Request_ExtConfig.part.0+0x61c>)
 800e476:	4b31      	ldr	r3, [pc, #196]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e478:	4d31      	ldr	r5, [pc, #196]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e47a:	2715      	movs	r7, #21
 800e47c:	601f      	str	r7, [r3, #0]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e47e:	4680      	mov	r8, r0
        BLE_MANAGER_PRINTF("Command PowerStatus\r\n");
 800e480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e482:	6028      	str	r0, [r5, #0]
 800e484:	60eb      	str	r3, [r5, #12]
 800e486:	6820      	ldr	r0, [r4, #0]
 800e488:	88a3      	ldrh	r3, [r4, #4]
 800e48a:	60aa      	str	r2, [r5, #8]
 800e48c:	6069      	str	r1, [r5, #4]
 800e48e:	6128      	str	r0, [r5, #16]
 800e490:	4639      	mov	r1, r7
 800e492:	82ab      	strh	r3, [r5, #20]
 800e494:	4628      	mov	r0, r5
 800e496:	f7f6 f825 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigPowerStatusCommandCallback(LocalBufferToWrite);
 800e49a:	a80c      	add	r0, sp, #48	; 0x30
 800e49c:	f8d9 3378 	ldr.w	r3, [r9, #888]	; 0x378
 800e4a0:	4798      	blx	r3
        json_object_dotset_string(tempJSON_Obj, "PowerStatus", (char *)LocalBufferToWrite);
 800e4a2:	4932      	ldr	r1, [pc, #200]	; (800e56c <Write_Request_ExtConfig.part.0+0x650>)
 800e4a4:	aa0c      	add	r2, sp, #48	; 0x30
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	e77e      	b.n	800e3a8 <Write_Request_ExtConfig.part.0+0x48c>
      if(CustomExtConfigRebootOnDFUModeCommandCallback!=NULL) {
 800e4aa:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f43f adab 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command DFU\r\n");
 800e4b4:	4b2e      	ldr	r3, [pc, #184]	; (800e570 <Write_Request_ExtConfig.part.0+0x654>)
 800e4b6:	4c22      	ldr	r4, [pc, #136]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e4b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4ba:	6020      	str	r0, [r4, #0]
 800e4bc:	481f      	ldr	r0, [pc, #124]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e4be:	6061      	str	r1, [r4, #4]
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	210d      	movs	r1, #13
 800e4c4:	6001      	str	r1, [r0, #0]
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	60a2      	str	r2, [r4, #8]
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f7f6 f80a 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigRebootOnDFUModeCommandCallback();
 800e4d0:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 800e4d4:	4798      	blx	r3
 800e4d6:	e598      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigPowerOffCommandCallback!=NULL) {
 800e4d8:	f8d9 3348 	ldr.w	r3, [r9, #840]	; 0x348
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f43f ad94 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command Off\r\n");
 800e4e2:	4b24      	ldr	r3, [pc, #144]	; (800e574 <Write_Request_ExtConfig.part.0+0x658>)
 800e4e4:	4c16      	ldr	r4, [pc, #88]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e4e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4e8:	6020      	str	r0, [r4, #0]
 800e4ea:	4814      	ldr	r0, [pc, #80]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e4ec:	6061      	str	r1, [r4, #4]
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	210d      	movs	r1, #13
 800e4f2:	6001      	str	r1, [r0, #0]
 800e4f4:	81a3      	strh	r3, [r4, #12]
 800e4f6:	60a2      	str	r2, [r4, #8]
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7f5 fff3 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigPowerOffCommandCallback();
 800e4fe:	f8d9 3348 	ldr.w	r3, [r9, #840]	; 0x348
 800e502:	4798      	blx	r3
 800e504:	e581      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigClearDBCommandCallback!=NULL) {
 800e506:	f8d9 3360 	ldr.w	r3, [r9, #864]	; 0x360
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f43f ad7d 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command ClearDB\r\n");
 800e510:	4b0a      	ldr	r3, [pc, #40]	; (800e53c <Write_Request_ExtConfig.part.0+0x620>)
 800e512:	4c19      	ldr	r4, [pc, #100]	; (800e578 <Write_Request_ExtConfig.part.0+0x65c>)
 800e514:	4d0a      	ldr	r5, [pc, #40]	; (800e540 <Write_Request_ExtConfig.part.0+0x624>)
 800e516:	2611      	movs	r6, #17
 800e518:	601e      	str	r6, [r3, #0]
 800e51a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e51c:	60aa      	str	r2, [r5, #8]
 800e51e:	8822      	ldrh	r2, [r4, #0]
 800e520:	6028      	str	r0, [r5, #0]
 800e522:	6069      	str	r1, [r5, #4]
 800e524:	60eb      	str	r3, [r5, #12]
 800e526:	4631      	mov	r1, r6
 800e528:	822a      	strh	r2, [r5, #16]
 800e52a:	4628      	mov	r0, r5
 800e52c:	f7f5 ffda 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigClearDBCommandCallback();
 800e530:	f8d9 3360 	ldr.w	r3, [r9, #864]	; 0x360
 800e534:	4798      	blx	r3
 800e536:	e568      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
 800e538:	080223a4 	.word	0x080223a4
 800e53c:	200012ac 	.word	0x200012ac
 800e540:	200011ac 	.word	0x200011ac
 800e544:	080223bc 	.word	0x080223bc
 800e548:	08022300 	.word	0x08022300
 800e54c:	08022310 	.word	0x08022310
 800e550:	080222b8 	.word	0x080222b8
 800e554:	08022370 	.word	0x08022370
 800e558:	080222d0 	.word	0x080222d0
 800e55c:	08022384 	.word	0x08022384
 800e560:	0802222c 	.word	0x0802222c
 800e564:	08022394 	.word	0x08022394
 800e568:	080222bc 	.word	0x080222bc
 800e56c:	080222c4 	.word	0x080222c4
 800e570:	080223c8 	.word	0x080223c8
 800e574:	080223d8 	.word	0x080223d8
 800e578:	080223e8 	.word	0x080223e8
      if(CustomExtConfigReadSensorsConfigCommandsCallback!=NULL) {
 800e57c:	f8d9 3390 	ldr.w	r3, [r9, #912]	; 0x390
 800e580:	2b00      	cmp	r3, #0
 800e582:	f43f ad42 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e586:	f003 f937 	bl	80117f8 <json_value_init_object>
 800e58a:	4607      	mov	r7, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e58c:	f002 fedc 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command ReadSensorsConfigCommand\r\n");
 800e590:	4eb5      	ldr	r6, [pc, #724]	; (800e868 <Write_Request_ExtConfig.part.0+0x94c>)
 800e592:	4db6      	ldr	r5, [pc, #728]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e594:	4680      	mov	r8, r0
        BLE_MANAGER_PRINTF("Command ReadSensorsConfigCommand\r\n");
 800e596:	f106 0c20 	add.w	ip, r6, #32
 800e59a:	4634      	mov	r4, r6
 800e59c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e59e:	4564      	cmp	r4, ip
 800e5a0:	f105 0510 	add.w	r5, r5, #16
 800e5a4:	f106 0610 	add.w	r6, r6, #16
 800e5a8:	f845 0c10 	str.w	r0, [r5, #-16]
 800e5ac:	f845 1c0c 	str.w	r1, [r5, #-12]
 800e5b0:	f845 2c08 	str.w	r2, [r5, #-8]
 800e5b4:	f845 3c04 	str.w	r3, [r5, #-4]
 800e5b8:	d1ef      	bne.n	800e59a <Write_Request_ExtConfig.part.0+0x67e>
 800e5ba:	4bad      	ldr	r3, [pc, #692]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e5bc:	48ab      	ldr	r0, [pc, #684]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e5be:	2122      	movs	r1, #34	; 0x22
 800e5c0:	6019      	str	r1, [r3, #0]
 800e5c2:	8833      	ldrh	r3, [r6, #0]
 800e5c4:	802b      	strh	r3, [r5, #0]
 800e5c6:	78b3      	ldrb	r3, [r6, #2]
 800e5c8:	70ab      	strb	r3, [r5, #2]
 800e5ca:	f7f5 ff8b 	bl	80044e4 <CDC_Fill_Buffer>
        json_object_dotset_value(tempJSON_Obj, "sensor", json_value_init_array());
 800e5ce:	f003 f937 	bl	8011840 <json_value_init_array>
 800e5d2:	49a8      	ldr	r1, [pc, #672]	; (800e874 <Write_Request_ExtConfig.part.0+0x958>)
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	4640      	mov	r0, r8
 800e5d8:	f003 fd74 	bl	80120c4 <json_object_dotset_value>
        JSON_SensorArray = json_object_dotget_array(tempJSON_Obj, "sensor");
 800e5dc:	49a5      	ldr	r1, [pc, #660]	; (800e874 <Write_Request_ExtConfig.part.0+0x958>)
 800e5de:	4640      	mov	r0, r8
 800e5e0:	f002 fe78 	bl	80112d4 <json_object_dotget_array>
        CustomExtConfigReadSensorsConfigCommandsCallback(JSON_SensorArray);
 800e5e4:	f8d9 3390 	ldr.w	r3, [r9, #912]	; 0x390
 800e5e8:	4798      	blx	r3
 800e5ea:	e5e7      	b.n	800e1bc <Write_Request_ExtConfig.part.0+0x2a0>
      if(CustomExtConfigReadBanksFwIdCommandCallback!=NULL) {
 800e5ec:	f8d9 3364 	ldr.w	r3, [r9, #868]	; 0x364
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f43f ad0a 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        JSON_Value *tempJSON = json_value_init_object();
 800e5f6:	f003 f8ff 	bl	80117f8 <json_value_init_object>
 800e5fa:	4606      	mov	r6, r0
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e5fc:	f002 fea4 	bl	8011348 <json_value_get_object>
        BLE_MANAGER_PRINTF("Command ReadBanksFwId\r\n");
 800e600:	4c9d      	ldr	r4, [pc, #628]	; (800e878 <Write_Request_ExtConfig.part.0+0x95c>)
 800e602:	4b9b      	ldr	r3, [pc, #620]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e604:	4d99      	ldr	r5, [pc, #612]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e606:	f04f 0c17 	mov.w	ip, #23
 800e60a:	f8c3 c000 	str.w	ip, [r3]
        JSON_Object *tempJSON_Obj = json_value_get_object(tempJSON);
 800e60e:	4607      	mov	r7, r0
        BLE_MANAGER_PRINTF("Command ReadBanksFwId\r\n");
 800e610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e612:	6028      	str	r0, [r5, #0]
 800e614:	6069      	str	r1, [r5, #4]
 800e616:	cc03      	ldmia	r4!, {r0, r1}
 800e618:	60eb      	str	r3, [r5, #12]
 800e61a:	60aa      	str	r2, [r5, #8]
 800e61c:	6128      	str	r0, [r5, #16]
 800e61e:	6169      	str	r1, [r5, #20]
 800e620:	4628      	mov	r0, r5
 800e622:	4661      	mov	r1, ip
 800e624:	f7f5 ff5e 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigReadBanksFwIdCommandCallback(&CurBank,&FwId1,&FwId2);
 800e628:	f8d9 3364 	ldr.w	r3, [r9, #868]	; 0x364
 800e62c:	aa0b      	add	r2, sp, #44	; 0x2c
 800e62e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 800e632:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800e636:	4798      	blx	r3
        json_object_dotset_number(tempJSON_Obj, "BankStatus.currentBank", (double)CurBank);
 800e638:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 800e63c:	f7f1 ff8a 	bl	8000554 <__aeabi_ui2d>
 800e640:	ec41 0b10 	vmov	d0, r0, r1
 800e644:	498d      	ldr	r1, [pc, #564]	; (800e87c <Write_Request_ExtConfig.part.0+0x960>)
 800e646:	4638      	mov	r0, r7
 800e648:	f003 fdbc 	bl	80121c4 <json_object_dotset_number>
        sprintf((char *)LocalBufferToWrite,"0x%02X",FwId1);
 800e64c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800e650:	498b      	ldr	r1, [pc, #556]	; (800e880 <Write_Request_ExtConfig.part.0+0x964>)
 800e652:	a80c      	add	r0, sp, #48	; 0x30
 800e654:	f00c ff5a 	bl	801b50c <siprintf>
        json_object_dotset_string(tempJSON_Obj, "BankStatus.fwId1", (char *)LocalBufferToWrite);
 800e658:	aa0c      	add	r2, sp, #48	; 0x30
 800e65a:	498a      	ldr	r1, [pc, #552]	; (800e884 <Write_Request_ExtConfig.part.0+0x968>)
 800e65c:	4638      	mov	r0, r7
 800e65e:	f003 fd93 	bl	8012188 <json_object_dotset_string>
        sprintf((char *)LocalBufferToWrite,"0x%02X",FwId2);
 800e662:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800e666:	4986      	ldr	r1, [pc, #536]	; (800e880 <Write_Request_ExtConfig.part.0+0x964>)
 800e668:	a80c      	add	r0, sp, #48	; 0x30
 800e66a:	f00c ff4f 	bl	801b50c <siprintf>
        json_object_dotset_string(tempJSON_Obj, "BankStatus.fwId2", (char *)LocalBufferToWrite);
 800e66e:	aa0c      	add	r2, sp, #48	; 0x30
 800e670:	4985      	ldr	r1, [pc, #532]	; (800e888 <Write_Request_ExtConfig.part.0+0x96c>)
 800e672:	4638      	mov	r0, r7
 800e674:	f003 fd88 	bl	8012188 <json_object_dotset_string>
        JSON_string_command = json_serialize_to_string(tempJSON);
 800e678:	4630      	mov	r0, r6
 800e67a:	f003 fc67 	bl	8011f4c <json_serialize_to_string>
 800e67e:	4604      	mov	r4, r0
        JSON_size = json_serialization_size(tempJSON);
 800e680:	4630      	mov	r0, r6
 800e682:	f003 fc33 	bl	8011eec <json_serialization_size>
 800e686:	4601      	mov	r1, r0
        BLE_ExtConfiguration_Update((uint8_t*) JSON_string_command,JSON_size);
 800e688:	4620      	mov	r0, r4
 800e68a:	f7ff fb4d 	bl	800dd28 <BLE_ExtConfiguration_Update>
        json_value_free(tempJSON);
 800e68e:	4630      	mov	r0, r6
 800e690:	f002 fe6a 	bl	8011368 <json_value_free>
 800e694:	e4b9      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigBanksSwapCommandCallback!=NULL) {
 800e696:	f8d9 3368 	ldr.w	r3, [r9, #872]	; 0x368
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f43f acb5 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command BanksSwap\r\n");
 800e6a0:	4b73      	ldr	r3, [pc, #460]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e6a2:	4c7a      	ldr	r4, [pc, #488]	; (800e88c <Write_Request_ExtConfig.part.0+0x970>)
 800e6a4:	4d71      	ldr	r5, [pc, #452]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e6a6:	2613      	movs	r6, #19
 800e6a8:	601e      	str	r6, [r3, #0]
 800e6aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6ac:	6028      	str	r0, [r5, #0]
 800e6ae:	6820      	ldr	r0, [r4, #0]
 800e6b0:	6069      	str	r1, [r5, #4]
 800e6b2:	6128      	str	r0, [r5, #16]
 800e6b4:	60eb      	str	r3, [r5, #12]
 800e6b6:	60aa      	str	r2, [r5, #8]
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f7f5 ff12 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigBanksSwapCommandCallback();
 800e6c0:	f8d9 3368 	ldr.w	r3, [r9, #872]	; 0x368
 800e6c4:	4798      	blx	r3
 800e6c6:	e4a0      	b.n	800e00a <Write_Request_ExtConfig.part.0+0xee>
      if(CustomExtConfigSetWiFiCommandCallback!=NULL) {
 800e6c8:	f8d9 3358 	ldr.w	r3, [r9, #856]	; 0x358
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f43f ac9c 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command SetWiFi\r\n");
 800e6d2:	4b67      	ldr	r3, [pc, #412]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e6d4:	4c6e      	ldr	r4, [pc, #440]	; (800e890 <Write_Request_ExtConfig.part.0+0x974>)
 800e6d6:	4d65      	ldr	r5, [pc, #404]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e6d8:	2611      	movs	r6, #17
 800e6da:	601e      	str	r6, [r3, #0]
 800e6dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6de:	60aa      	str	r2, [r5, #8]
 800e6e0:	8822      	ldrh	r2, [r4, #0]
 800e6e2:	60eb      	str	r3, [r5, #12]
 800e6e4:	822a      	strh	r2, [r5, #16]
 800e6e6:	6028      	str	r0, [r5, #0]
 800e6e8:	6069      	str	r1, [r5, #4]
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	f7f5 fef9 	bl	80044e4 <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e6f2:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e6f6:	f003 fb37 	bl	8011d68 <json_parse_string>
 800e6fa:	4604      	mov	r4, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e6fc:	f002 fe24 	bl	8011348 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetWiFi") == 0) {
 800e700:	4964      	ldr	r1, [pc, #400]	; (800e894 <Write_Request_ExtConfig.part.0+0x978>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e702:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetWiFi") == 0) {
 800e704:	f002 fdbe 	bl	8011284 <json_object_dotget_string>
 800e708:	4963      	ldr	r1, [pc, #396]	; (800e898 <Write_Request_ExtConfig.part.0+0x97c>)
 800e70a:	f7f1 fd79 	bl	8000200 <strcmp>
 800e70e:	2800      	cmp	r0, #0
 800e710:	f000 8187 	beq.w	800ea22 <Write_Request_ExtConfig.part.0+0xb06>
        json_value_free(tempJSON);
 800e714:	4620      	mov	r0, r4
 800e716:	f002 fe27 	bl	8011368 <json_value_free>
    BLE_FreeFunction(hs_command_buffer);
 800e71a:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e71e:	f00a ffb5 	bl	801968c <free>
}
 800e722:	f60d 0d34 	addw	sp, sp, #2100	; 0x834
 800e726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(CustomExtConfigSetDateCommandCallback!=NULL) {
 800e72a:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f43f ac6b 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command SetDate\r\n");
 800e734:	4b4e      	ldr	r3, [pc, #312]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e736:	4c59      	ldr	r4, [pc, #356]	; (800e89c <Write_Request_ExtConfig.part.0+0x980>)
 800e738:	4d4c      	ldr	r5, [pc, #304]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e73a:	2611      	movs	r6, #17
 800e73c:	601e      	str	r6, [r3, #0]
 800e73e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e740:	60aa      	str	r2, [r5, #8]
 800e742:	8822      	ldrh	r2, [r4, #0]
 800e744:	60eb      	str	r3, [r5, #12]
 800e746:	822a      	strh	r2, [r5, #16]
 800e748:	6028      	str	r0, [r5, #0]
 800e74a:	6069      	str	r1, [r5, #4]
 800e74c:	4628      	mov	r0, r5
 800e74e:	4631      	mov	r1, r6
 800e750:	f7f5 fec8 	bl	80044e4 <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e754:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e758:	f003 fb06 	bl	8011d68 <json_parse_string>
 800e75c:	4604      	mov	r4, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e75e:	f002 fdf3 	bl	8011348 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetDate") == 0) {
 800e762:	494c      	ldr	r1, [pc, #304]	; (800e894 <Write_Request_ExtConfig.part.0+0x978>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e764:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetDate") == 0) {
 800e766:	f002 fd8d 	bl	8011284 <json_object_dotget_string>
 800e76a:	494d      	ldr	r1, [pc, #308]	; (800e8a0 <Write_Request_ExtConfig.part.0+0x984>)
 800e76c:	f7f1 fd48 	bl	8000200 <strcmp>
 800e770:	2800      	cmp	r0, #0
 800e772:	d1cf      	bne.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800e774:	494b      	ldr	r1, [pc, #300]	; (800e8a4 <Write_Request_ExtConfig.part.0+0x988>)
 800e776:	4628      	mov	r0, r5
 800e778:	f002 fdc4 	bl	8011304 <json_object_dothas_value>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d0c9      	beq.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
            uint8_t *NewDate = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800e780:	4948      	ldr	r1, [pc, #288]	; (800e8a4 <Write_Request_ExtConfig.part.0+0x988>)
 800e782:	4628      	mov	r0, r5
 800e784:	f002 fd7e 	bl	8011284 <json_object_dotget_string>
            CustomExtConfigSetDateCommandCallback(NewDate);
 800e788:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
 800e78c:	4798      	blx	r3
        json_value_free(tempJSON);
 800e78e:	e7c1      	b.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
       if(CustomExtConfigSetNameCommandCallback!=NULL) {
 800e790:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
 800e794:	2b00      	cmp	r3, #0
 800e796:	f43f ac38 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command SetName\r\n");
 800e79a:	4b35      	ldr	r3, [pc, #212]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e79c:	4c42      	ldr	r4, [pc, #264]	; (800e8a8 <Write_Request_ExtConfig.part.0+0x98c>)
 800e79e:	4d33      	ldr	r5, [pc, #204]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e7a0:	2611      	movs	r6, #17
 800e7a2:	601e      	str	r6, [r3, #0]
 800e7a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7a6:	60aa      	str	r2, [r5, #8]
 800e7a8:	8822      	ldrh	r2, [r4, #0]
 800e7aa:	60eb      	str	r3, [r5, #12]
 800e7ac:	822a      	strh	r2, [r5, #16]
 800e7ae:	6028      	str	r0, [r5, #0]
 800e7b0:	6069      	str	r1, [r5, #4]
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	f7f5 fe95 	bl	80044e4 <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e7ba:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e7be:	f003 fad3 	bl	8011d68 <json_parse_string>
 800e7c2:	4604      	mov	r4, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e7c4:	f002 fdc0 	bl	8011348 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetName") == 0) {
 800e7c8:	4932      	ldr	r1, [pc, #200]	; (800e894 <Write_Request_ExtConfig.part.0+0x978>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e7ca:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetName") == 0) {
 800e7cc:	f002 fd5a 	bl	8011284 <json_object_dotget_string>
 800e7d0:	4936      	ldr	r1, [pc, #216]	; (800e8ac <Write_Request_ExtConfig.part.0+0x990>)
 800e7d2:	f7f1 fd15 	bl	8000200 <strcmp>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d19c      	bne.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800e7da:	4932      	ldr	r1, [pc, #200]	; (800e8a4 <Write_Request_ExtConfig.part.0+0x988>)
 800e7dc:	4628      	mov	r0, r5
 800e7de:	f002 fd91 	bl	8011304 <json_object_dothas_value>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d096      	beq.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
            uint8_t *NewBoardName = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800e7e6:	492f      	ldr	r1, [pc, #188]	; (800e8a4 <Write_Request_ExtConfig.part.0+0x988>)
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f002 fd4b 	bl	8011284 <json_object_dotget_string>
            CustomExtConfigSetNameCommandCallback(NewBoardName);
 800e7ee:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
 800e7f2:	4798      	blx	r3
        json_value_free(tempJSON);
 800e7f4:	e78e      	b.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
       if(CustomExtConfigChangePinCommandCallback!=NULL) {
 800e7f6:	f8d9 335c 	ldr.w	r3, [r9, #860]	; 0x35c
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f43f ac05 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command ChangePIN\r\n");
 800e800:	4b1b      	ldr	r3, [pc, #108]	; (800e870 <Write_Request_ExtConfig.part.0+0x954>)
 800e802:	4c2b      	ldr	r4, [pc, #172]	; (800e8b0 <Write_Request_ExtConfig.part.0+0x994>)
 800e804:	4d19      	ldr	r5, [pc, #100]	; (800e86c <Write_Request_ExtConfig.part.0+0x950>)
 800e806:	2613      	movs	r6, #19
 800e808:	601e      	str	r6, [r3, #0]
 800e80a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e80c:	6028      	str	r0, [r5, #0]
 800e80e:	6820      	ldr	r0, [r4, #0]
 800e810:	60aa      	str	r2, [r5, #8]
 800e812:	60eb      	str	r3, [r5, #12]
 800e814:	6069      	str	r1, [r5, #4]
 800e816:	6128      	str	r0, [r5, #16]
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	f7f5 fe62 	bl	80044e4 <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e820:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e824:	f003 faa0 	bl	8011d68 <json_parse_string>
 800e828:	4604      	mov	r4, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e82a:	f002 fd8d 	bl	8011348 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"ChangePIN") == 0) {
 800e82e:	4919      	ldr	r1, [pc, #100]	; (800e894 <Write_Request_ExtConfig.part.0+0x978>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e830:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"ChangePIN") == 0) {
 800e832:	f002 fd27 	bl	8011284 <json_object_dotget_string>
 800e836:	491f      	ldr	r1, [pc, #124]	; (800e8b4 <Write_Request_ExtConfig.part.0+0x998>)
 800e838:	f7f1 fce2 	bl	8000200 <strcmp>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f47f af69 	bne.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
          if(json_object_dothas_value(JSON_ParseHandler,"argNumber")) {
 800e842:	491d      	ldr	r1, [pc, #116]	; (800e8b8 <Write_Request_ExtConfig.part.0+0x99c>)
 800e844:	4628      	mov	r0, r5
 800e846:	f002 fd5d 	bl	8011304 <json_object_dothas_value>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	f43f af62 	beq.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
            uint32_t NewBoardPin = (uint32_t)json_object_dotget_number(JSON_ParseHandler,"argNumber");
 800e850:	4628      	mov	r0, r5
 800e852:	4919      	ldr	r1, [pc, #100]	; (800e8b8 <Write_Request_ExtConfig.part.0+0x99c>)
 800e854:	f002 fd20 	bl	8011298 <json_object_dotget_number>
 800e858:	ec51 0b10 	vmov	r0, r1, d0
 800e85c:	f7f2 f9cc 	bl	8000bf8 <__aeabi_d2uiz>
            CustomExtConfigChangePinCommandCallback(NewBoardPin);
 800e860:	f8d9 335c 	ldr.w	r3, [r9, #860]	; 0x35c
 800e864:	4798      	blx	r3
        json_value_free(tempJSON);
 800e866:	e755      	b.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
 800e868:	08022344 	.word	0x08022344
 800e86c:	200011ac 	.word	0x200011ac
 800e870:	200012ac 	.word	0x200012ac
 800e874:	08022368 	.word	0x08022368
 800e878:	080223fc 	.word	0x080223fc
 800e87c:	08022414 	.word	0x08022414
 800e880:	0802242c 	.word	0x0802242c
 800e884:	08022434 	.word	0x08022434
 800e888:	08022448 	.word	0x08022448
 800e88c:	0802245c 	.word	0x0802245c
 800e890:	080224ac 	.word	0x080224ac
 800e894:	0802192c 	.word	0x0802192c
 800e898:	0802226c 	.word	0x0802226c
 800e89c:	08022470 	.word	0x08022470
 800e8a0:	08022264 	.word	0x08022264
 800e8a4:	08021a24 	.word	0x08021a24
 800e8a8:	08022498 	.word	0x08022498
 800e8ac:	08022254 	.word	0x08022254
 800e8b0:	080224f4 	.word	0x080224f4
 800e8b4:	08022274 	.word	0x08022274
 800e8b8:	080219e0 	.word	0x080219e0
      if(CustomExtConfigSetCertCommandCallback!=NULL) {
 800e8bc:	f8d9 338c 	ldr.w	r3, [r9, #908]	; 0x38c
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f43f aba2 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command SetCert\r\n");
 800e8c6:	4b6e      	ldr	r3, [pc, #440]	; (800ea80 <Write_Request_ExtConfig.part.0+0xb64>)
 800e8c8:	4c6e      	ldr	r4, [pc, #440]	; (800ea84 <Write_Request_ExtConfig.part.0+0xb68>)
 800e8ca:	4d6f      	ldr	r5, [pc, #444]	; (800ea88 <Write_Request_ExtConfig.part.0+0xb6c>)
 800e8cc:	2611      	movs	r6, #17
 800e8ce:	601e      	str	r6, [r3, #0]
 800e8d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8d2:	60aa      	str	r2, [r5, #8]
 800e8d4:	8822      	ldrh	r2, [r4, #0]
 800e8d6:	60eb      	str	r3, [r5, #12]
 800e8d8:	822a      	strh	r2, [r5, #16]
 800e8da:	6028      	str	r0, [r5, #0]
 800e8dc:	6069      	str	r1, [r5, #4]
 800e8de:	4628      	mov	r0, r5
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	f7f5 fdff 	bl	80044e4 <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e8e6:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e8ea:	f003 fa3d 	bl	8011d68 <json_parse_string>
 800e8ee:	4604      	mov	r4, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e8f0:	f002 fd2a 	bl	8011348 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 800e8f4:	4965      	ldr	r1, [pc, #404]	; (800ea8c <Write_Request_ExtConfig.part.0+0xb70>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e8f6:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetCert") == 0) {
 800e8f8:	f002 fcc4 	bl	8011284 <json_object_dotget_string>
 800e8fc:	4964      	ldr	r1, [pc, #400]	; (800ea90 <Write_Request_ExtConfig.part.0+0xb74>)
 800e8fe:	f7f1 fc7f 	bl	8000200 <strcmp>
 800e902:	2800      	cmp	r0, #0
 800e904:	f47f af06 	bne.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800e908:	4962      	ldr	r1, [pc, #392]	; (800ea94 <Write_Request_ExtConfig.part.0+0xb78>)
 800e90a:	4628      	mov	r0, r5
 800e90c:	f002 fcfa 	bl	8011304 <json_object_dothas_value>
 800e910:	2800      	cmp	r0, #0
 800e912:	f43f aeff 	beq.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
            uint8_t *NewCertificate = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800e916:	495f      	ldr	r1, [pc, #380]	; (800ea94 <Write_Request_ExtConfig.part.0+0xb78>)
 800e918:	4628      	mov	r0, r5
 800e91a:	f002 fcb3 	bl	8011284 <json_object_dotget_string>
            CustomExtConfigSetCertCommandCallback(NewCertificate);
 800e91e:	f8d9 338c 	ldr.w	r3, [r9, #908]	; 0x38c
 800e922:	4798      	blx	r3
 800e924:	e6f6      	b.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
      if(CustomExtConfigSetSensorsConfigCommandsCallback!=NULL) {
 800e926:	f8d9 3394 	ldr.w	r3, [r9, #916]	; 0x394
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f43f ab6d 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command SetSensorsConfigCommand\r\n");
 800e930:	4e59      	ldr	r6, [pc, #356]	; (800ea98 <Write_Request_ExtConfig.part.0+0xb7c>)
 800e932:	4d55      	ldr	r5, [pc, #340]	; (800ea88 <Write_Request_ExtConfig.part.0+0xb6c>)
 800e934:	f106 0720 	add.w	r7, r6, #32
 800e938:	4634      	mov	r4, r6
 800e93a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e93c:	42bc      	cmp	r4, r7
 800e93e:	f105 0510 	add.w	r5, r5, #16
 800e942:	f106 0610 	add.w	r6, r6, #16
 800e946:	f845 0c10 	str.w	r0, [r5, #-16]
 800e94a:	f845 1c0c 	str.w	r1, [r5, #-12]
 800e94e:	f845 2c08 	str.w	r2, [r5, #-8]
 800e952:	f845 3c04 	str.w	r3, [r5, #-4]
 800e956:	d1ef      	bne.n	800e938 <Write_Request_ExtConfig.part.0+0xa1c>
 800e958:	4b49      	ldr	r3, [pc, #292]	; (800ea80 <Write_Request_ExtConfig.part.0+0xb64>)
 800e95a:	8832      	ldrh	r2, [r6, #0]
 800e95c:	802a      	strh	r2, [r5, #0]
 800e95e:	2121      	movs	r1, #33	; 0x21
 800e960:	4849      	ldr	r0, [pc, #292]	; (800ea88 <Write_Request_ExtConfig.part.0+0xb6c>)
 800e962:	6019      	str	r1, [r3, #0]
 800e964:	f7f5 fdbe 	bl	80044e4 <CDC_Fill_Buffer>
        CustomExtConfigSetSensorsConfigCommandsCallback(hs_command_buffer);
 800e968:	f8d9 3394 	ldr.w	r3, [r9, #916]	; 0x394
 800e96c:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e970:	4798      	blx	r3
 800e972:	f7ff bb4a 	b.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
       if(CustomExtConfigSetTimeCommandCallback!=NULL) {
 800e976:	f8d9 3350 	ldr.w	r3, [r9, #848]	; 0x350
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f43f ab45 	beq.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        BLE_MANAGER_PRINTF("Command SetTime\r\n");
 800e980:	4b3f      	ldr	r3, [pc, #252]	; (800ea80 <Write_Request_ExtConfig.part.0+0xb64>)
 800e982:	4c46      	ldr	r4, [pc, #280]	; (800ea9c <Write_Request_ExtConfig.part.0+0xb80>)
 800e984:	4d40      	ldr	r5, [pc, #256]	; (800ea88 <Write_Request_ExtConfig.part.0+0xb6c>)
 800e986:	2611      	movs	r6, #17
 800e988:	601e      	str	r6, [r3, #0]
 800e98a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e98c:	60aa      	str	r2, [r5, #8]
 800e98e:	8822      	ldrh	r2, [r4, #0]
 800e990:	60eb      	str	r3, [r5, #12]
 800e992:	822a      	strh	r2, [r5, #16]
 800e994:	6028      	str	r0, [r5, #0]
 800e996:	6069      	str	r1, [r5, #4]
 800e998:	4628      	mov	r0, r5
 800e99a:	4631      	mov	r1, r6
 800e99c:	f7f5 fda2 	bl	80044e4 <CDC_Fill_Buffer>
        JSON_Value *tempJSON = json_parse_string( (char *) hs_command_buffer);
 800e9a0:	f8d9 03d4 	ldr.w	r0, [r9, #980]	; 0x3d4
 800e9a4:	f003 f9e0 	bl	8011d68 <json_parse_string>
 800e9a8:	4604      	mov	r4, r0
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e9aa:	f002 fccd 	bl	8011348 <json_value_get_object>
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetTime") == 0) {
 800e9ae:	4937      	ldr	r1, [pc, #220]	; (800ea8c <Write_Request_ExtConfig.part.0+0xb70>)
        JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800e9b0:	4605      	mov	r5, r0
        if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SetTime") == 0) {
 800e9b2:	f002 fc67 	bl	8011284 <json_object_dotget_string>
 800e9b6:	493a      	ldr	r1, [pc, #232]	; (800eaa0 <Write_Request_ExtConfig.part.0+0xb84>)
 800e9b8:	f7f1 fc22 	bl	8000200 <strcmp>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	f47f aea9 	bne.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
          if(json_object_dothas_value(JSON_ParseHandler,"argString")) {
 800e9c2:	4934      	ldr	r1, [pc, #208]	; (800ea94 <Write_Request_ExtConfig.part.0+0xb78>)
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f002 fc9d 	bl	8011304 <json_object_dothas_value>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	f43f aea2 	beq.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
            uint8_t *NewTime = (uint8_t *)json_object_dotget_string(JSON_ParseHandler,"argString");
 800e9d0:	4930      	ldr	r1, [pc, #192]	; (800ea94 <Write_Request_ExtConfig.part.0+0xb78>)
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f002 fc56 	bl	8011284 <json_object_dotget_string>
            CustomExtConfigSetTimeCommandCallback(NewTime);
 800e9d8:	f8d9 3350 	ldr.w	r3, [r9, #848]	; 0x350
 800e9dc:	4798      	blx	r3
        json_value_free(tempJSON);
 800e9de:	e699      	b.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
          BLE_MANAGER_PRINTF("Error: Command Not Valid\r\n");
 800e9e0:	4b27      	ldr	r3, [pc, #156]	; (800ea80 <Write_Request_ExtConfig.part.0+0xb64>)
 800e9e2:	4c30      	ldr	r4, [pc, #192]	; (800eaa4 <Write_Request_ExtConfig.part.0+0xb88>)
 800e9e4:	4d28      	ldr	r5, [pc, #160]	; (800ea88 <Write_Request_ExtConfig.part.0+0xb6c>)
 800e9e6:	261a      	movs	r6, #26
 800e9e8:	601e      	str	r6, [r3, #0]
 800e9ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9ec:	6028      	str	r0, [r5, #0]
 800e9ee:	6069      	str	r1, [r5, #4]
 800e9f0:	cc03      	ldmia	r4!, {r0, r1}
 800e9f2:	60eb      	str	r3, [r5, #12]
 800e9f4:	8823      	ldrh	r3, [r4, #0]
 800e9f6:	832b      	strh	r3, [r5, #24]
 800e9f8:	78a3      	ldrb	r3, [r4, #2]
 800e9fa:	6128      	str	r0, [r5, #16]
 800e9fc:	6169      	str	r1, [r5, #20]
 800e9fe:	60aa      	str	r2, [r5, #8]
 800ea00:	4631      	mov	r1, r6
 800ea02:	76ab      	strb	r3, [r5, #26]
 800ea04:	4628      	mov	r0, r5
 800ea06:	f7f5 fd6d 	bl	80044e4 <CDC_Fill_Buffer>
 800ea0a:	f7ff bafe 	b.w	800e00a <Write_Request_ExtConfig.part.0+0xee>
        if(CustomExtConfigVersionFwCommandCallback!=NULL) {
 800ea0e:	f8d9 337c 	ldr.w	r3, [r9, #892]	; 0x37c
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f47f abaf 	bne.w	800e176 <Write_Request_ExtConfig.part.0+0x25a>
        if(WritingPointer!=0) {
 800ea18:	2d00      	cmp	r5, #0
 800ea1a:	f43f abb6 	beq.w	800e18a <Write_Request_ExtConfig.part.0+0x26e>
 800ea1e:	f7ff bbb0 	b.w	800e182 <Write_Request_ExtConfig.part.0+0x266>
          JSON_Object *JSON_Wifi = json_object_dotget_object(JSON_ParseHandler,"argJsonElement");
 800ea22:	4921      	ldr	r1, [pc, #132]	; (800eaa8 <Write_Request_ExtConfig.part.0+0xb8c>)
 800ea24:	4628      	mov	r0, r5
 800ea26:	f002 fc4b 	bl	80112c0 <json_object_dotget_object>
          if(json_object_dothas_value(JSON_Wifi,"ssid")) {
 800ea2a:	4920      	ldr	r1, [pc, #128]	; (800eaac <Write_Request_ExtConfig.part.0+0xb90>)
          JSON_Object *JSON_Wifi = json_object_dotget_object(JSON_ParseHandler,"argJsonElement");
 800ea2c:	4605      	mov	r5, r0
          if(json_object_dothas_value(JSON_Wifi,"ssid")) {
 800ea2e:	f002 fc69 	bl	8011304 <json_object_dothas_value>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	f43f ae6e 	beq.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 800ea38:	491c      	ldr	r1, [pc, #112]	; (800eaac <Write_Request_ExtConfig.part.0+0xb90>)
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f002 fc22 	bl	8011284 <json_object_dotget_string>
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 800ea40:	491b      	ldr	r1, [pc, #108]	; (800eab0 <Write_Request_ExtConfig.part.0+0xb94>)
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 800ea42:	900c      	str	r0, [sp, #48]	; 0x30
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 800ea44:	4628      	mov	r0, r5
            NewWiFiCred.SSID = (uint8_t *)json_object_dotget_string(JSON_Wifi,"ssid");
 800ea46:	ae0c      	add	r6, sp, #48	; 0x30
            if(json_object_dothas_value(JSON_Wifi,"password")) {
 800ea48:	f002 fc5c 	bl	8011304 <json_object_dothas_value>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	f43f ae61 	beq.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
              NewWiFiCred.PassWd = (uint8_t *)json_object_dotget_string(JSON_Wifi,"password");
 800ea52:	4917      	ldr	r1, [pc, #92]	; (800eab0 <Write_Request_ExtConfig.part.0+0xb94>)
 800ea54:	4628      	mov	r0, r5
 800ea56:	f002 fc15 	bl	8011284 <json_object_dotget_string>
              if(json_object_dothas_value(JSON_Wifi,"securityType")) {
 800ea5a:	4916      	ldr	r1, [pc, #88]	; (800eab4 <Write_Request_ExtConfig.part.0+0xb98>)
              NewWiFiCred.PassWd = (uint8_t *)json_object_dotget_string(JSON_Wifi,"password");
 800ea5c:	900d      	str	r0, [sp, #52]	; 0x34
              if(json_object_dothas_value(JSON_Wifi,"securityType")) {
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f002 fc50 	bl	8011304 <json_object_dothas_value>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	f43f ae55 	beq.w	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
                NewWiFiCred.Security = (uint8_t *)json_object_dotget_string(JSON_Wifi,"securityType");
 800ea6a:	4912      	ldr	r1, [pc, #72]	; (800eab4 <Write_Request_ExtConfig.part.0+0xb98>)
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f002 fc09 	bl	8011284 <json_object_dotget_string>
 800ea72:	900e      	str	r0, [sp, #56]	; 0x38
                CustomExtConfigSetWiFiCommandCallback(NewWiFiCred);
 800ea74:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ea78:	f8d9 3358 	ldr.w	r3, [r9, #856]	; 0x358
 800ea7c:	4798      	blx	r3
        json_value_free(tempJSON);
 800ea7e:	e649      	b.n	800e714 <Write_Request_ExtConfig.part.0+0x7f8>
 800ea80:	200012ac 	.word	0x200012ac
 800ea84:	08022508 	.word	0x08022508
 800ea88:	200011ac 	.word	0x200011ac
 800ea8c:	0802192c 	.word	0x0802192c
 800ea90:	080222b0 	.word	0x080222b0
 800ea94:	08021a24 	.word	0x08021a24
 800ea98:	0802251c 	.word	0x0802251c
 800ea9c:	08022484 	.word	0x08022484
 800eaa0:	0802225c 	.word	0x0802225c
 800eaa4:	08022540 	.word	0x08022540
 800eaa8:	080224c0 	.word	0x080224c0
 800eaac:	080224d0 	.word	0x080224d0
 800eab0:	080224d8 	.word	0x080224d8
 800eab4:	080224e4 	.word	0x080224e4

0800eab8 <Write_Request_ExtConfig>:
{
 800eab8:	b508      	push	{r3, lr}
  CommandBufLen = BLE_Command_TP_Parse(&hs_command_buffer, att_data, data_length);
 800eaba:	9902      	ldr	r1, [sp, #8]
 800eabc:	4804      	ldr	r0, [pc, #16]	; (800ead0 <Write_Request_ExtConfig+0x18>)
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7ff f802 	bl	800dac8 <BLE_Command_TP_Parse>
  if(CommandBufLen) {
 800eac4:	b900      	cbnz	r0, 800eac8 <Write_Request_ExtConfig+0x10>
}
 800eac6:	bd08      	pop	{r3, pc}
 800eac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eacc:	f7ff ba26 	b.w	800df1c <Write_Request_ExtConfig.part.0>
 800ead0:	200023e8 	.word	0x200023e8

0800ead4 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 800ead4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead8:	b084      	sub	sp, #16
 800eada:	461f      	mov	r7, r3
 800eadc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  connection_handle = Connection_Handle;
 800eade:	4d23      	ldr	r5, [pc, #140]	; (800eb6c <hci_le_connection_complete_event+0x98>)
  
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 800eae0:	7822      	ldrb	r2, [r4, #0]
 800eae2:	9203      	str	r2, [sp, #12]
 800eae4:	7863      	ldrb	r3, [r4, #1]
 800eae6:	9302      	str	r3, [sp, #8]
 800eae8:	78a3      	ldrb	r3, [r4, #2]
 800eaea:	9301      	str	r3, [sp, #4]
 800eaec:	78e3      	ldrb	r3, [r4, #3]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	7923      	ldrb	r3, [r4, #4]
 800eaf2:	7962      	ldrb	r2, [r4, #5]
  connection_handle = Connection_Handle;
 800eaf4:	f8a5 132a 	strh.w	r1, [r5, #810]	; 0x32a
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 800eaf8:	481d      	ldr	r0, [pc, #116]	; (800eb70 <hci_le_connection_complete_event+0x9c>)
 800eafa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800eb7c <hci_le_connection_complete_event+0xa8>
{
 800eafe:	460e      	mov	r6, r1
  BLE_MANAGER_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",Peer_Address[5],Peer_Address[4],Peer_Address[3],Peer_Address[2],Peer_Address[1],Peer_Address[0]);
 800eb00:	491c      	ldr	r1, [pc, #112]	; (800eb74 <hci_le_connection_complete_event+0xa0>)
 800eb02:	f00c fd03 	bl	801b50c <siprintf>
 800eb06:	4601      	mov	r1, r0
 800eb08:	f8c8 0000 	str.w	r0, [r8]
 800eb0c:	4818      	ldr	r0, [pc, #96]	; (800eb70 <hci_le_connection_complete_event+0x9c>)
 800eb0e:	f7f5 fce9 	bl	80044e4 <CDC_Fill_Buffer>

#if (BLUE_CORE != BLUENRG_MS)
  if(BLE_StackValue.EnableSecureConnection) {
 800eb12:	f895 3289 	ldrb.w	r3, [r5, #649]	; 0x289
 800eb16:	b973      	cbnz	r3, 800eb36 <hci_le_connection_complete_event+0x62>
  }
#endif /* (BLUE_CORE != BLUENRG_MS) */
  
  /* Start one Exchange configuration for understaning the maxium ATT_MTU */
#if (BLUE_CORE != BLUENRG_LP)
  aci_gatt_exchange_config(connection_handle);
 800eb18:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
 800eb1c:	f000 fe2e 	bl	800f77c <aci_gatt_exchange_config>
#else /* (BLUE_CORE != BLUENRG_LP) */
  aci_gatt_clt_exchange_config(Connection_Handle);
#endif /* (BLUE_CORE != BLUENRG_LP) */
  
  if(CustomConnectionCompleted!=NULL){
 800eb20:	f8d5 3338 	ldr.w	r3, [r5, #824]	; 0x338
 800eb24:	b1f3      	cbz	r3, 800eb64 <hci_le_connection_complete_event+0x90>
#if (BLUE_CORE == BLUENRG_MS)
    CustomConnectionCompleted(connection_handle,Peer_Address);
#elif (BLUE_CORE == BLUE_WB)
    CustomConnectionCompleted(connection_handle);
#else /* (BLUE_CORE == BLUENRG_MS) */
  CustomConnectionCompleted(connection_handle, Peer_Address_Type,Peer_Address);
 800eb26:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	4639      	mov	r1, r7
#endif /* (BLUE_CORE == BLUENRG_MS) */
  }
  
}/* end hci_le_connection_complete_event() */
 800eb2e:	b004      	add	sp, #16
 800eb30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  CustomConnectionCompleted(connection_handle, Peer_Address_Type,Peer_Address);
 800eb34:	4718      	bx	r3
    RetStatus = aci_gap_is_device_bonded(Peer_Address_Type,Peer_Address);
 800eb36:	4621      	mov	r1, r4
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f000 fcdb 	bl	800f4f4 <aci_gap_is_device_bonded>
    if( RetStatus != (tBleStatus)BLE_STATUS_SUCCESS) {
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d0ea      	beq.n	800eb18 <hci_le_connection_complete_event+0x44>
      RetStatus = aci_gap_slave_security_req(Connection_Handle);
 800eb42:	4630      	mov	r0, r6
 800eb44:	f000 fbfe 	bl	800f344 <aci_gap_slave_security_req>
      if (RetStatus != (tBleStatus)BLE_STATUS_SUCCESS) {
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d0e5      	beq.n	800eb18 <hci_le_connection_complete_event+0x44>
        BLE_MANAGER_PRINTF("Error: GAP Slave secury request failed %d\r\n",RetStatus);
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	490a      	ldr	r1, [pc, #40]	; (800eb78 <hci_le_connection_complete_event+0xa4>)
 800eb50:	4807      	ldr	r0, [pc, #28]	; (800eb70 <hci_le_connection_complete_event+0x9c>)
 800eb52:	f00c fcdb 	bl	801b50c <siprintf>
 800eb56:	4601      	mov	r1, r0
 800eb58:	f8c8 0000 	str.w	r0, [r8]
 800eb5c:	4804      	ldr	r0, [pc, #16]	; (800eb70 <hci_le_connection_complete_event+0x9c>)
 800eb5e:	f7f5 fcc1 	bl	80044e4 <CDC_Fill_Buffer>
 800eb62:	e7d9      	b.n	800eb18 <hci_le_connection_complete_event+0x44>
}/* end hci_le_connection_complete_event() */
 800eb64:	b004      	add	sp, #16
 800eb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6a:	bf00      	nop
 800eb6c:	20002014 	.word	0x20002014
 800eb70:	200011ac 	.word	0x200011ac
 800eb74:	0802255c 	.word	0x0802255c
 800eb78:	08022580 	.word	0x08022580
 800eb7c:	200012ac 	.word	0x200012ac

0800eb80 <hci_disconnection_complete_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{  
 800eb80:	b570      	push	{r4, r5, r6, lr}
  /* No Device Connected */
  connection_handle =0;
  
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 800eb82:	4c0f      	ldr	r4, [pc, #60]	; (800ebc0 <hci_disconnection_complete_event+0x40>)
 800eb84:	4d0f      	ldr	r5, [pc, #60]	; (800ebc4 <hci_disconnection_complete_event+0x44>)
  connection_handle =0;
 800eb86:	4e10      	ldr	r6, [pc, #64]	; (800ebc8 <hci_disconnection_complete_event+0x48>)
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 800eb88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb8a:	6028      	str	r0, [r5, #0]
 800eb8c:	6820      	ldr	r0, [r4, #0]
 800eb8e:	6128      	str	r0, [r5, #16]
 800eb90:	480e      	ldr	r0, [pc, #56]	; (800ebcc <hci_disconnection_complete_event+0x4c>)
 800eb92:	6069      	str	r1, [r5, #4]
 800eb94:	2114      	movs	r1, #20
 800eb96:	60aa      	str	r2, [r5, #8]
 800eb98:	6001      	str	r1, [r0, #0]
 800eb9a:	7922      	ldrb	r2, [r4, #4]
 800eb9c:	60eb      	str	r3, [r5, #12]
 800eb9e:	4628      	mov	r0, r5
  connection_handle =0;
 800eba0:	2300      	movs	r3, #0
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 800eba2:	752a      	strb	r2, [r5, #20]
  connection_handle =0;
 800eba4:	f8a6 332a 	strh.w	r3, [r6, #810]	; 0x32a
  BLE_MANAGER_PRINTF("<<<<<<DISCONNECTED\r\n");
 800eba8:	f7f5 fc9c 	bl	80044e4 <CDC_Fill_Buffer>
  
  /* Make the device connectable again. */
  set_connectable = TRUE;
  
  if(CustomDisconnectionCompleted!=NULL){
 800ebac:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
  set_connectable = TRUE;
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	f886 232c 	strb.w	r2, [r6, #812]	; 0x32c
  if(CustomDisconnectionCompleted!=NULL){
 800ebb6:	b113      	cbz	r3, 800ebbe <hci_disconnection_complete_event+0x3e>
    CustomDisconnectionCompleted();
  }
  
}/* end hci_disconnection_complete_event() */
 800ebb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    CustomDisconnectionCompleted();
 800ebbc:	4718      	bx	r3
}/* end hci_disconnection_complete_event() */
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	080225ac 	.word	0x080225ac
 800ebc4:	200011ac 	.word	0x200011ac
 800ebc8:	20002014 	.word	0x20002014
 800ebcc:	200012ac 	.word	0x200012ac

0800ebd0 <aci_gatt_read_permit_req_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 800ebd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t FoundHandle=0;
  uint8_t RegisteredHandle;
  
  //Search inside all the registed handles
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ebd2:	4d10      	ldr	r5, [pc, #64]	; (800ec14 <aci_gatt_read_permit_req_event+0x44>)
 800ebd4:	f895 32a4 	ldrb.w	r3, [r5, #676]	; 0x2a4
 800ebd8:	b1a3      	cbz	r3, 800ec04 <aci_gatt_read_permit_req_event+0x34>
 800ebda:	2400      	movs	r4, #0
 800ebdc:	460e      	mov	r6, r1
 800ebde:	4623      	mov	r3, r4
    if(BleCharsArray[RegisteredHandle]->Read_Request_CB!=NULL) {
 800ebe0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ebe4:	3401      	adds	r4, #1
    if(BleCharsArray[RegisteredHandle]->Read_Request_CB!=NULL) {
 800ebe6:	f8d3 02a8 	ldr.w	r0, [r3, #680]	; 0x2a8
 800ebea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ebec:	b12a      	cbz	r2, 800ebfa <aci_gatt_read_permit_req_event+0x2a>
      if(Attribute_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
 800ebee:	8b43      	ldrh	r3, [r0, #26]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	429e      	cmp	r6, r3
 800ebf4:	d101      	bne.n	800ebfa <aci_gatt_read_permit_req_event+0x2a>
        BleCharsArray[RegisteredHandle]->Read_Request_CB(BleCharsArray[RegisteredHandle],Attribute_Handle);
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4790      	blx	r2
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ebfa:	f895 22a4 	ldrb.w	r2, [r5, #676]	; 0x2a4
 800ebfe:	b2e3      	uxtb	r3, r4
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d8ed      	bhi.n	800ebe0 <aci_gatt_read_permit_req_event+0x10>
      }
    }
  }
  
  if(connection_handle != 0U)
 800ec04:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
 800ec08:	b900      	cbnz	r0, 800ec0c <aci_gatt_read_permit_req_event+0x3c>
    aci_gatt_allow_read(connection_handle);
}
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}
 800ec0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aci_gatt_allow_read(connection_handle);
 800ec10:	f000 bdf4 	b.w	800f7fc <aci_gatt_allow_read>
 800ec14:	20002014 	.word	0x20002014

0800ec18 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800ec18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1c:	b084      	sub	sp, #16
  uint32_t FoundHandle=0;
  uint8_t RegisteredHandle;
  
  if (Attr_Handle==((uint16_t)(0x0002+2))) {
 800ec1e:	2904      	cmp	r1, #4
{
 800ec20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (Attr_Handle==((uint16_t)(0x0002+2))) {
 800ec22:	d03d      	beq.n	800eca0 <aci_gatt_attribute_modified_event+0x88>
      }
    }
  }
  
  //Search inside all the registed handles  
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ec24:	460d      	mov	r5, r1
 800ec26:	495c      	ldr	r1, [pc, #368]	; (800ed98 <aci_gatt_attribute_modified_event+0x180>)
 800ec28:	f891 62a4 	ldrb.w	r6, [r1, #676]	; 0x2a4
 800ec2c:	f04f 0c01 	mov.w	ip, #1
 800ec30:	b32e      	cbz	r6, 800ec7e <aci_gatt_attribute_modified_event+0x66>
    /* Notification */
    if(BleCharsArray[RegisteredHandle]->AttrMod_Request_CB!=NULL) {
 800ec32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800ec36:	b2c0      	uxtb	r0, r0
 800ec38:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800ec3c:	f10c 0801 	add.w	r8, ip, #1
 800ec40:	f8d0 02a8 	ldr.w	r0, [r0, #680]	; 0x2a8
 800ec44:	6a04      	ldr	r4, [r0, #32]
 800ec46:	b12c      	cbz	r4, 800ec54 <aci_gatt_attribute_modified_event+0x3c>
      if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+2U)) {
 800ec48:	f8b0 e01a 	ldrh.w	lr, [r0, #26]
 800ec4c:	f10e 0e02 	add.w	lr, lr, #2
 800ec50:	4575      	cmp	r5, lr
 800ec52:	d00c      	beq.n	800ec6e <aci_gatt_attribute_modified_event+0x56>
      }
    }
    
    /* Write */
    if(FoundHandle==0U) {
      if(BleCharsArray[RegisteredHandle]->Write_Request_CB!=NULL) {
 800ec54:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ec56:	b12c      	cbz	r4, 800ec64 <aci_gatt_attribute_modified_event+0x4c>
        if(Attr_Handle==(BleCharsArray[RegisteredHandle]->attr_handle+1U)) {
 800ec58:	f8b0 e01a 	ldrh.w	lr, [r0, #26]
 800ec5c:	f10e 0e01 	add.w	lr, lr, #1
 800ec60:	4575      	cmp	r5, lr
 800ec62:	d004      	beq.n	800ec6e <aci_gatt_attribute_modified_event+0x56>
  for(RegisteredHandle=0;((RegisteredHandle<UsedBleChars) && (FoundHandle==0U));RegisteredHandle++) {
 800ec64:	45b4      	cmp	ip, r6
 800ec66:	d20a      	bcs.n	800ec7e <aci_gatt_attribute_modified_event+0x66>
 800ec68:	fa5f fc88 	uxtb.w	ip, r8
 800ec6c:	e7e1      	b.n	800ec32 <aci_gatt_attribute_modified_event+0x1a>
          FoundHandle = 1U;
          BleCharsArray[RegisteredHandle]->Write_Request_CB(BleCharsArray[RegisteredHandle],Attr_Handle, Offset, Attr_Data_Length, Attr_Data);
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	4629      	mov	r1, r5
 800ec72:	46a4      	mov	ip, r4
 800ec74:	970a      	str	r7, [sp, #40]	; 0x28
      Stderr_Update(BufferToWrite,BytesToWrite);
    } else {
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
    }
  }
}
 800ec76:	b004      	add	sp, #16
 800ec78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          BleCharsArray[RegisteredHandle]->Write_Request_CB(BleCharsArray[RegisteredHandle],Attr_Handle, Offset, Attr_Data_Length, Attr_Data);
 800ec7c:	4760      	bx	ip
    if(BLE_StdErr_Service==BLE_SERV_ENABLE){
 800ec7e:	7b0b      	ldrb	r3, [r1, #12]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d030      	beq.n	800ece6 <aci_gatt_attribute_modified_event+0xce>
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
 800ec84:	4945      	ldr	r1, [pc, #276]	; (800ed9c <aci_gatt_attribute_modified_event+0x184>)
 800ec86:	4846      	ldr	r0, [pc, #280]	; (800eda0 <aci_gatt_attribute_modified_event+0x188>)
 800ec88:	462a      	mov	r2, r5
 800ec8a:	f00c fc3f 	bl	801b50c <siprintf>
 800ec8e:	4b45      	ldr	r3, [pc, #276]	; (800eda4 <aci_gatt_attribute_modified_event+0x18c>)
 800ec90:	4601      	mov	r1, r0
 800ec92:	4843      	ldr	r0, [pc, #268]	; (800eda0 <aci_gatt_attribute_modified_event+0x188>)
 800ec94:	6019      	str	r1, [r3, #0]
}
 800ec96:	b004      	add	sp, #16
 800ec98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      BLE_MANAGER_PRINTF("Notification UNKNOWN handle =%d\r\n",Attr_Handle);
 800ec9c:	f7f5 bc22 	b.w	80044e4 <CDC_Fill_Buffer>
    BLE_MANAGER_PRINTF("Notification on Service Change Characteristic\r\n");
 800eca0:	4e41      	ldr	r6, [pc, #260]	; (800eda8 <aci_gatt_attribute_modified_event+0x190>)
 800eca2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800eda0 <aci_gatt_attribute_modified_event+0x188>
 800eca6:	f106 0730 	add.w	r7, r6, #48	; 0x30
 800ecaa:	4645      	mov	r5, r8
 800ecac:	4634      	mov	r4, r6
 800ecae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecb0:	42bc      	cmp	r4, r7
 800ecb2:	f105 0510 	add.w	r5, r5, #16
 800ecb6:	f106 0610 	add.w	r6, r6, #16
 800ecba:	f845 0c10 	str.w	r0, [r5, #-16]
 800ecbe:	f845 1c0c 	str.w	r1, [r5, #-12]
 800ecc2:	f845 2c08 	str.w	r2, [r5, #-8]
 800ecc6:	f845 3c04 	str.w	r3, [r5, #-4]
 800ecca:	d1ef      	bne.n	800ecac <aci_gatt_attribute_modified_event+0x94>
 800eccc:	4e35      	ldr	r6, [pc, #212]	; (800eda4 <aci_gatt_attribute_modified_event+0x18c>)
 800ecce:	4834      	ldr	r0, [pc, #208]	; (800eda0 <aci_gatt_attribute_modified_event+0x188>)
 800ecd0:	212f      	movs	r1, #47	; 0x2f
 800ecd2:	6031      	str	r1, [r6, #0]
 800ecd4:	f7f5 fc06 	bl	80044e4 <CDC_Fill_Buffer>
    if(BLE_StackValue.ForceRescan) {
 800ecd8:	4b2f      	ldr	r3, [pc, #188]	; (800ed98 <aci_gatt_attribute_modified_event+0x180>)
 800ecda:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
 800ecde:	b9ab      	cbnz	r3, 800ed0c <aci_gatt_attribute_modified_event+0xf4>
}
 800ece0:	b004      	add	sp, #16
 800ece2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Notification UNKNOWN handle\n");
 800ece6:	4d31      	ldr	r5, [pc, #196]	; (800edac <aci_gatt_attribute_modified_event+0x194>)
 800ece8:	4c31      	ldr	r4, [pc, #196]	; (800edb0 <aci_gatt_attribute_modified_event+0x198>)
 800ecea:	261c      	movs	r6, #28
 800ecec:	f881 6224 	strb.w	r6, [r1, #548]	; 0x224
 800ecf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ecf8:	c407      	stmia	r4!, {r0, r1, r2}
 800ecfa:	4620      	mov	r0, r4
      Stderr_Update(BufferToWrite,BytesToWrite);
 800ecfc:	4631      	mov	r1, r6
      BytesToWrite =(uint8_t)sprintf((char *)BufferToWrite, "Notification UNKNOWN handle\n");
 800ecfe:	f800 391c 	strb.w	r3, [r0], #-28
}
 800ed02:	b004      	add	sp, #16
 800ed04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      Stderr_Update(BufferToWrite,BytesToWrite);
 800ed08:	f7fd bf2c 	b.w	800cb64 <Stderr_Update>
      STORE_LE_16(buff  ,0x0001U);
 800ed0c:	4929      	ldr	r1, [pc, #164]	; (800edb4 <aci_gatt_attribute_modified_event+0x19c>)
 800ed0e:	9103      	str	r1, [sp, #12]
      ret = aci_gatt_update_char_value(0x0001,0x0002,0,4,buff);
 800ed10:	ab03      	add	r3, sp, #12
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	2200      	movs	r2, #0
 800ed16:	2304      	movs	r3, #4
 800ed18:	2102      	movs	r1, #2
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	f000 fcfe 	bl	800f71c <aci_gatt_update_char_value>
      if (ret == (tBleStatus)BLE_STATUS_SUCCESS){
 800ed20:	b1f8      	cbz	r0, 800ed62 <aci_gatt_attribute_modified_event+0x14a>
        BLE_MANAGER_PRINTF("\r\nError: Problem forcing UUID Rescan\r\n");
 800ed22:	4f25      	ldr	r7, [pc, #148]	; (800edb8 <aci_gatt_attribute_modified_event+0x1a0>)
 800ed24:	4d1e      	ldr	r5, [pc, #120]	; (800eda0 <aci_gatt_attribute_modified_event+0x188>)
 800ed26:	f107 0c20 	add.w	ip, r7, #32
 800ed2a:	463c      	mov	r4, r7
 800ed2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed2e:	4564      	cmp	r4, ip
 800ed30:	f105 0510 	add.w	r5, r5, #16
 800ed34:	f107 0710 	add.w	r7, r7, #16
 800ed38:	f845 0c10 	str.w	r0, [r5, #-16]
 800ed3c:	f845 1c0c 	str.w	r1, [r5, #-12]
 800ed40:	f845 2c08 	str.w	r2, [r5, #-8]
 800ed44:	f845 3c04 	str.w	r3, [r5, #-4]
 800ed48:	d1ef      	bne.n	800ed2a <aci_gatt_attribute_modified_event+0x112>
 800ed4a:	88bb      	ldrh	r3, [r7, #4]
 800ed4c:	6838      	ldr	r0, [r7, #0]
 800ed4e:	80ab      	strh	r3, [r5, #4]
 800ed50:	79bb      	ldrb	r3, [r7, #6]
 800ed52:	6028      	str	r0, [r5, #0]
 800ed54:	2126      	movs	r1, #38	; 0x26
 800ed56:	71ab      	strb	r3, [r5, #6]
 800ed58:	4811      	ldr	r0, [pc, #68]	; (800eda0 <aci_gatt_attribute_modified_event+0x188>)
 800ed5a:	6031      	str	r1, [r6, #0]
 800ed5c:	f7f5 fbc2 	bl	80044e4 <CDC_Fill_Buffer>
 800ed60:	e7be      	b.n	800ece0 <aci_gatt_attribute_modified_event+0xc8>
        BLE_MANAGER_PRINTF("\r\nUUID Rescan Forced\r\n");
 800ed62:	4c16      	ldr	r4, [pc, #88]	; (800edbc <aci_gatt_attribute_modified_event+0x1a4>)
 800ed64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed66:	2516      	movs	r5, #22
 800ed68:	6035      	str	r5, [r6, #0]
 800ed6a:	f8c8 2008 	str.w	r2, [r8, #8]
 800ed6e:	88a2      	ldrh	r2, [r4, #4]
 800ed70:	f8c8 0000 	str.w	r0, [r8]
 800ed74:	f8a8 2014 	strh.w	r2, [r8, #20]
 800ed78:	6820      	ldr	r0, [r4, #0]
 800ed7a:	79a2      	ldrb	r2, [r4, #6]
 800ed7c:	f8c8 1004 	str.w	r1, [r8, #4]
 800ed80:	f8c8 0010 	str.w	r0, [r8, #16]
 800ed84:	4629      	mov	r1, r5
 800ed86:	f8c8 300c 	str.w	r3, [r8, #12]
 800ed8a:	f888 2016 	strb.w	r2, [r8, #22]
 800ed8e:	4804      	ldr	r0, [pc, #16]	; (800eda0 <aci_gatt_attribute_modified_event+0x188>)
 800ed90:	f7f5 fba8 	bl	80044e4 <CDC_Fill_Buffer>
 800ed94:	e7a4      	b.n	800ece0 <aci_gatt_attribute_modified_event+0xc8>
 800ed96:	bf00      	nop
 800ed98:	20002014 	.word	0x20002014
 800ed9c:	08022654 	.word	0x08022654
 800eda0:	200011ac 	.word	0x200011ac
 800eda4:	200012ac 	.word	0x200012ac
 800eda8:	080225c4 	.word	0x080225c4
 800edac:	08022634 	.word	0x08022634
 800edb0:	20002138 	.word	0x20002138
 800edb4:	ffff0001 	.word	0xffff0001
 800edb8:	0802260c 	.word	0x0802260c
 800edbc:	080225f4 	.word	0x080225f4

0800edc0 <aci_att_exchange_mtu_resp_event>:
* Return         : See file bluenrg1_events.h
*******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
  if((Server_RX_MTU-3U)<MaxBleCharStdOutLen) {
 800edc0:	4b09      	ldr	r3, [pc, #36]	; (800ede8 <aci_att_exchange_mtu_resp_event+0x28>)
 800edc2:	f893 2225 	ldrb.w	r2, [r3, #549]	; 0x225
 800edc6:	1ec8      	subs	r0, r1, #3
 800edc8:	4290      	cmp	r0, r2
    MaxBleCharStdOutLen = (uint8_t)(Server_RX_MTU-3U);
  }
  
  if((Server_RX_MTU-3U)<MaxBleCharStdErrLen) {
 800edca:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
    MaxBleCharStdOutLen = (uint8_t)(Server_RX_MTU-3U);
 800edce:	bf38      	it	cc
 800edd0:	f883 0225 	strbcc.w	r0, [r3, #549]	; 0x225
  if((Server_RX_MTU-3U)<MaxBleCharStdErrLen) {
 800edd4:	4290      	cmp	r0, r2
    MaxBleCharStdErrLen = (uint8_t)(Server_RX_MTU-3U);
 800edd6:	bf38      	it	cc
 800edd8:	f883 0084 	strbcc.w	r0, [r3, #132]	; 0x84

#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_att_exchange_mtu_resp_event Server_RX_MTU=%d\r\n",Server_RX_MTU);
#endif
  
 if(CustomMTUExchangeRespEvent!=NULL){
 800eddc:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800ede0:	b103      	cbz	r3, 800ede4 <aci_att_exchange_mtu_resp_event+0x24>
    CustomMTUExchangeRespEvent(Server_RX_MTU-3U);
 800ede2:	4718      	bx	r3
  }
}
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	20002014 	.word	0x20002014

0800edec <aci_gap_pass_key_req_event>:

void aci_gap_pass_key_req_event(uint16_t Connection_Handle)
{
 800edec:	b508      	push	{r3, lr}
  tBleStatus status;
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_gap_pass_key_req_event [Requested PassWd=%ld]\r\n", BLE_StackValue.SecurePIN);
#endif
  status = aci_gap_pass_key_resp(connection_handle, BLE_StackValue.SecurePIN);
 800edee:	4b0b      	ldr	r3, [pc, #44]	; (800ee1c <aci_gap_pass_key_req_event+0x30>)
 800edf0:	f8d3 128c 	ldr.w	r1, [r3, #652]	; 0x28c
 800edf4:	f8b3 032a 	ldrh.w	r0, [r3, #810]	; 0x32a
 800edf8:	f000 fa22 	bl	800f240 <aci_gap_pass_key_resp>
  if (status != (uint8_t)BLE_STATUS_SUCCESS) {
 800edfc:	b900      	cbnz	r0, 800ee00 <aci_gap_pass_key_req_event+0x14>
  } else {
    BLE_MANAGER_PRINTF("aci_gap_pass_key_resp OK\r\n");
#endif
  }
  
}
 800edfe:	bd08      	pop	{r3, pc}
    BLE_MANAGER_PRINTF("Error: aci_gap_pass_key_resp failed:0x%02x\r\n", status);
 800ee00:	4907      	ldr	r1, [pc, #28]	; (800ee20 <aci_gap_pass_key_req_event+0x34>)
 800ee02:	4602      	mov	r2, r0
 800ee04:	4807      	ldr	r0, [pc, #28]	; (800ee24 <aci_gap_pass_key_req_event+0x38>)
 800ee06:	f00c fb81 	bl	801b50c <siprintf>
 800ee0a:	4b07      	ldr	r3, [pc, #28]	; (800ee28 <aci_gap_pass_key_req_event+0x3c>)
 800ee0c:	4805      	ldr	r0, [pc, #20]	; (800ee24 <aci_gap_pass_key_req_event+0x38>)
 800ee0e:	212a      	movs	r1, #42	; 0x2a
 800ee10:	6019      	str	r1, [r3, #0]
}
 800ee12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BLE_MANAGER_PRINTF("Error: aci_gap_pass_key_resp failed:0x%02x\r\n", status);
 800ee16:	f7f5 bb65 	b.w	80044e4 <CDC_Fill_Buffer>
 800ee1a:	bf00      	nop
 800ee1c:	20002014 	.word	0x20002014
 800ee20:	08022678 	.word	0x08022678
 800ee24:	200011ac 	.word	0x200011ac
 800ee28:	200012ac 	.word	0x200012ac

0800ee2c <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file bluenrg_lp_events.h
 * @retval See file bluenrg_lp_events.h
 */
void aci_gap_pairing_complete_event(uint16_t ConnectionHandle, uint8_t status, uint8_t reason)
{
 800ee2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  char *StatusString[] = {
 800ee2e:	4c3c      	ldr	r4, [pc, #240]	; (800ef20 <aci_gap_pairing_complete_event+0xf4>)
{
 800ee30:	460e      	mov	r6, r1
 800ee32:	4617      	mov	r7, r2
  char *StatusString[] = {
 800ee34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 800ee36:	b09b      	sub	sp, #108	; 0x6c
  char *StatusString[] = {
 800ee38:	ad07      	add	r5, sp, #28
 800ee3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee3c:	e894 0003 	ldmia.w	r4, {r0, r1}
   /* 0x03 */ "Encryption failed, LTK missing on local device",
   /* 0x04 */ "Encryption failed, LTK missing on peer device",
   /* 0x05 */ "Encryption not supported by remote device"
  };
  
  char *ReasonString[] = {
 800ee40:	f104 0e08 	add.w	lr, r4, #8
  char *StatusString[] = {
 800ee44:	e885 0003 	stmia.w	r5, {r0, r1}
  char *ReasonString[] = {
 800ee48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee4c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800ee50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee64:	f8de 3000 	ldr.w	r3, [lr]
 800ee68:	f8cc 3000 	str.w	r3, [ip]
    /* 0x0A */ "SM_INVALID_PARAMS",
    /* 0x0B */ "SMP_SC_DHKEY_CHECK_FAILED",
    /* 0x0C */ "SMP_SC_NUMCOMPARISON_FAILED"
  };

  switch(status) {
 800ee6c:	2e05      	cmp	r6, #5
 800ee6e:	d818      	bhi.n	800eea2 <aci_gap_pairing_complete_event+0x76>
 800ee70:	e8df f006 	tbb	[pc, r6]
 800ee74:	033e0320 	.word	0x033e0320
 800ee78:	0303      	.short	0x0303
      break;
    case 0x01: //Timeout
    case 0x03: //Encryption failed, LTK missing on local device
    case 0x04: //Encryption failed, LTK missing on peer device
    case 0x05: //Encryption not supported by remote device
      BLE_MANAGER_PRINTF("aci_gap_pairing_complete_event failed:\r\n\tstatus= %s\r\n\treason= %s\r\n",
 800ee7a:	ab1a      	add	r3, sp, #104	; 0x68
 800ee7c:	eb03 0287 	add.w	r2, r3, r7, lsl #2
 800ee80:	4928      	ldr	r1, [pc, #160]	; (800ef24 <aci_gap_pairing_complete_event+0xf8>)
 800ee82:	f852 3c34 	ldr.w	r3, [r2, #-52]
 800ee86:	aa1a      	add	r2, sp, #104	; 0x68
 800ee88:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ee8c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800ee90:	4825      	ldr	r0, [pc, #148]	; (800ef28 <aci_gap_pairing_complete_event+0xfc>)
 800ee92:	f00c fb3b 	bl	801b50c <siprintf>
 800ee96:	4b25      	ldr	r3, [pc, #148]	; (800ef2c <aci_gap_pairing_complete_event+0x100>)
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4823      	ldr	r0, [pc, #140]	; (800ef28 <aci_gap_pairing_complete_event+0xfc>)
 800ee9c:	6019      	str	r1, [r3, #0]
 800ee9e:	f7f5 fb21 	bl	80044e4 <CDC_Fill_Buffer>
  }
  
  UNUSED(StatusString);
  UNUSED(ReasonString);
  
  if(CustomPairingCompleted!=NULL){
 800eea2:	4b23      	ldr	r3, [pc, #140]	; (800ef30 <aci_gap_pairing_complete_event+0x104>)
 800eea4:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800eea8:	b303      	cbz	r3, 800eeec <aci_gap_pairing_complete_event+0xc0>
    CustomPairingCompleted(status);
 800eeaa:	4630      	mov	r0, r6
  }
}
 800eeac:	b01b      	add	sp, #108	; 0x6c
 800eeae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CustomPairingCompleted(status);
 800eeb2:	4718      	bx	r3
      BLE_MANAGER_PRINTF("aci_gap_pairing_complete_event %s\r\n", StatusString[status]);
 800eeb4:	4a1f      	ldr	r2, [pc, #124]	; (800ef34 <aci_gap_pairing_complete_event+0x108>)
 800eeb6:	4920      	ldr	r1, [pc, #128]	; (800ef38 <aci_gap_pairing_complete_event+0x10c>)
 800eeb8:	481b      	ldr	r0, [pc, #108]	; (800ef28 <aci_gap_pairing_complete_event+0xfc>)
 800eeba:	4c1c      	ldr	r4, [pc, #112]	; (800ef2c <aci_gap_pairing_complete_event+0x100>)
 800eebc:	f00c fb26 	bl	801b50c <siprintf>
 800eec0:	2128      	movs	r1, #40	; 0x28
 800eec2:	4819      	ldr	r0, [pc, #100]	; (800ef28 <aci_gap_pairing_complete_event+0xfc>)
 800eec4:	6021      	str	r1, [r4, #0]
 800eec6:	f7f5 fb0d 	bl	80044e4 <CDC_Fill_Buffer>
  tBleStatus RetStatus;
  uint8_t NumOfAddresses; 
  Bonded_Device_Entry_t BondedDeviceEntry[BLE_MANAGER_MAX_BONDED_DEVICES];

#if (BLUE_CORE != BLUENRG_LP)
  RetStatus =  aci_gap_get_bonded_devices(&NumOfAddresses, BondedDeviceEntry);
 800eeca:	a901      	add	r1, sp, #4
 800eecc:	f10d 0003 	add.w	r0, sp, #3
 800eed0:	f000 fade 	bl	800f490 <aci_gap_get_bonded_devices>
#else /* (BLUE_CORE != BLUENRG_LP) */
  RetStatus =  aci_gap_get_bonded_devices(0,BLE_MANAGER_MAX_BONDED_DEVICES,&NumOfAddresses, BondedDeviceEntry);
#endif /* (BLUE_CORE != BLUENRG_LP) */
  
  if (RetStatus == BLE_STATUS_SUCCESS) {
 800eed4:	b910      	cbnz	r0, 800eedc <aci_gap_pairing_complete_event+0xb0>
    if (NumOfAddresses > 0U) {
 800eed6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eeda:	b98b      	cbnz	r3, 800ef00 <aci_gap_pairing_complete_event+0xd4>
      BLE_MANAGER_DELAY(100);
 800eedc:	2064      	movs	r0, #100	; 0x64
 800eede:	f7f7 f8c5 	bl	800606c <HAL_Delay>
  if(CustomPairingCompleted!=NULL){
 800eee2:	4b13      	ldr	r3, [pc, #76]	; (800ef30 <aci_gap_pairing_complete_event+0x104>)
 800eee4:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1de      	bne.n	800eeaa <aci_gap_pairing_complete_event+0x7e>
}
 800eeec:	b01b      	add	sp, #108	; 0x6c
 800eeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BLE_MANAGER_PRINTF("aci_gap_pairing_complete_event failed:\r\n\tstatus= %s\r\n\treason= %s\r\n",
 800eef0:	ab1a      	add	r3, sp, #104	; 0x68
 800eef2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eef6:	4a11      	ldr	r2, [pc, #68]	; (800ef3c <aci_gap_pairing_complete_event+0x110>)
 800eef8:	f857 3c34 	ldr.w	r3, [r7, #-52]
 800eefc:	4909      	ldr	r1, [pc, #36]	; (800ef24 <aci_gap_pairing_complete_event+0xf8>)
 800eefe:	e7c7      	b.n	800ee90 <aci_gap_pairing_complete_event+0x64>
#if (BLE_DEBUG_LEVEL>2)
      BLE_MANAGER_PRINTF("Bonded with %d Device(s): \r\n", NumOfAddresses);
#endif

#if (BLUE_CORE != BLUENRG_LP)
      RetStatus = aci_gap_configure_whitelist();
 800ef00:	f000 fa68 	bl	800f3d4 <aci_gap_configure_whitelist>
#else /* (BLUE_CORE != BLUENRG_LP) */
      RetStatus = aci_gap_configure_white_and_resolving_list(0x01 /* White List */);
#endif /* (BLUE_CORE != BLUENRG_LP) */
      if (RetStatus != BLE_STATUS_SUCCESS) {
 800ef04:	4602      	mov	r2, r0
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d0e8      	beq.n	800eedc <aci_gap_pairing_complete_event+0xb0>
        BLE_MANAGER_PRINTF("Error: aci_gap_configure_whitelist() failed:0x%02x\r\n", RetStatus);
 800ef0a:	490d      	ldr	r1, [pc, #52]	; (800ef40 <aci_gap_pairing_complete_event+0x114>)
 800ef0c:	4806      	ldr	r0, [pc, #24]	; (800ef28 <aci_gap_pairing_complete_event+0xfc>)
 800ef0e:	f00c fafd 	bl	801b50c <siprintf>
 800ef12:	2132      	movs	r1, #50	; 0x32
 800ef14:	4804      	ldr	r0, [pc, #16]	; (800ef28 <aci_gap_pairing_complete_event+0xfc>)
 800ef16:	6021      	str	r1, [r4, #0]
 800ef18:	f7f5 fae4 	bl	80044e4 <CDC_Fill_Buffer>
 800ef1c:	e7de      	b.n	800eedc <aci_gap_pairing_complete_event+0xb0>
 800ef1e:	bf00      	nop
 800ef20:	0801fee4 	.word	0x0801fee4
 800ef24:	0802271c 	.word	0x0802271c
 800ef28:	200011ac 	.word	0x200011ac
 800ef2c:	200012ac 	.word	0x200012ac
 800ef30:	20002014 	.word	0x20002014
 800ef34:	080226a8 	.word	0x080226a8
 800ef38:	080226b0 	.word	0x080226b0
 800ef3c:	0802270c 	.word	0x0802270c
 800ef40:	080226d4 	.word	0x080226d4

0800ef44 <aci_l2cap_connection_update_resp_event>:
}
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop

0800ef48 <hci_le_connection_update_complete_event>:
}
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop

0800ef4c <aci_gatt_proc_complete_event>:
  if(Error_Code!=0U) {
 800ef4c:	b901      	cbnz	r1, 800ef50 <aci_gatt_proc_complete_event+0x4>
 800ef4e:	4770      	bx	lr
{
 800ef50:	b508      	push	{r3, lr}
 800ef52:	460a      	mov	r2, r1
    BLE_MANAGER_PRINTF("Error: aci_gatt_proc_complete_event Error Code=%d\r\n",Error_Code);
 800ef54:	4805      	ldr	r0, [pc, #20]	; (800ef6c <aci_gatt_proc_complete_event+0x20>)
 800ef56:	4906      	ldr	r1, [pc, #24]	; (800ef70 <aci_gatt_proc_complete_event+0x24>)
 800ef58:	f00c fad8 	bl	801b50c <siprintf>
 800ef5c:	4b05      	ldr	r3, [pc, #20]	; (800ef74 <aci_gatt_proc_complete_event+0x28>)
 800ef5e:	4601      	mov	r1, r0
 800ef60:	6019      	str	r1, [r3, #0]
 800ef62:	4802      	ldr	r0, [pc, #8]	; (800ef6c <aci_gatt_proc_complete_event+0x20>)
}
 800ef64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BLE_MANAGER_PRINTF("Error: aci_gatt_proc_complete_event Error Code=%d\r\n",Error_Code);
 800ef68:	f7f5 babc 	b.w	80044e4 <CDC_Fill_Buffer>
 800ef6c:	200011ac 	.word	0x200011ac
 800ef70:	08022760 	.word	0x08022760
 800ef74:	200012ac 	.word	0x200012ac

0800ef78 <hci_le_data_length_change_event>:
}
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop

0800ef7c <aci_gatt_indication_event>:
{
 800ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  BLE_MANAGER_PRINTF("aci_gatt_indication_event\r\n");
 800ef7e:	4d22      	ldr	r5, [pc, #136]	; (800f008 <aci_gatt_indication_event+0x8c>)
 800ef80:	4c22      	ldr	r4, [pc, #136]	; (800f00c <aci_gatt_indication_event+0x90>)
 800ef82:	4e23      	ldr	r6, [pc, #140]	; (800f010 <aci_gatt_indication_event+0x94>)
{
 800ef84:	4607      	mov	r7, r0
  BLE_MANAGER_PRINTF("aci_gatt_indication_event\r\n");
 800ef86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef88:	6020      	str	r0, [r4, #0]
 800ef8a:	6061      	str	r1, [r4, #4]
 800ef8c:	60a2      	str	r2, [r4, #8]
 800ef8e:	cd07      	ldmia	r5!, {r0, r1, r2}
 800ef90:	f04f 0c1b 	mov.w	ip, #27
    BLE_MANAGER_PRINTF("Nothing to do except send confirmation\r\n");
 800ef94:	4d1f      	ldr	r5, [pc, #124]	; (800f014 <aci_gatt_indication_event+0x98>)
  BLE_MANAGER_PRINTF("aci_gatt_indication_event\r\n");
 800ef96:	6120      	str	r0, [r4, #16]
 800ef98:	6161      	str	r1, [r4, #20]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4661      	mov	r1, ip
 800ef9e:	f8c6 c000 	str.w	ip, [r6]
 800efa2:	60e3      	str	r3, [r4, #12]
 800efa4:	61a2      	str	r2, [r4, #24]
 800efa6:	f7f5 fa9d 	bl	80044e4 <CDC_Fill_Buffer>
    BLE_MANAGER_PRINTF("Nothing to do except send confirmation\r\n");
 800efaa:	f105 0e20 	add.w	lr, r5, #32
 800efae:	46ac      	mov	ip, r5
 800efb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efb4:	45f4      	cmp	ip, lr
 800efb6:	f104 0410 	add.w	r4, r4, #16
 800efba:	f105 0510 	add.w	r5, r5, #16
 800efbe:	f844 0c10 	str.w	r0, [r4, #-16]
 800efc2:	f844 1c0c 	str.w	r1, [r4, #-12]
 800efc6:	f844 2c08 	str.w	r2, [r4, #-8]
 800efca:	f844 3c04 	str.w	r3, [r4, #-4]
 800efce:	d1ee      	bne.n	800efae <aci_gatt_indication_event+0x32>
 800efd0:	cd03      	ldmia	r5!, {r0, r1}
 800efd2:	782b      	ldrb	r3, [r5, #0]
 800efd4:	6020      	str	r0, [r4, #0]
 800efd6:	6061      	str	r1, [r4, #4]
 800efd8:	480c      	ldr	r0, [pc, #48]	; (800f00c <aci_gatt_indication_event+0x90>)
 800efda:	7223      	strb	r3, [r4, #8]
 800efdc:	2128      	movs	r1, #40	; 0x28
 800efde:	6031      	str	r1, [r6, #0]
 800efe0:	f7f5 fa80 	bl	80044e4 <CDC_Fill_Buffer>
  RetStatus = aci_gatt_confirm_indication(Connection_Handle);
 800efe4:	4638      	mov	r0, r7
 800efe6:	f000 fbe9 	bl	800f7bc <aci_gatt_confirm_indication>
  if (RetStatus != BLE_STATUS_SUCCESS) {
 800efea:	4602      	mov	r2, r0
 800efec:	b900      	cbnz	r0, 800eff0 <aci_gatt_indication_event+0x74>
}
 800efee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_MANAGER_PRINTF("Error: aci_gatt_confirm_indicationt failed %d\r\n",RetStatus);
 800eff0:	4909      	ldr	r1, [pc, #36]	; (800f018 <aci_gatt_indication_event+0x9c>)
 800eff2:	4806      	ldr	r0, [pc, #24]	; (800f00c <aci_gatt_indication_event+0x90>)
 800eff4:	f00c fa8a 	bl	801b50c <siprintf>
 800eff8:	4601      	mov	r1, r0
 800effa:	6031      	str	r1, [r6, #0]
 800effc:	4803      	ldr	r0, [pc, #12]	; (800f00c <aci_gatt_indication_event+0x90>)
}
 800effe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    BLE_MANAGER_PRINTF("Error: aci_gatt_confirm_indicationt failed %d\r\n",RetStatus);
 800f002:	f7f5 ba6f 	b.w	80044e4 <CDC_Fill_Buffer>
 800f006:	bf00      	nop
 800f008:	08022794 	.word	0x08022794
 800f00c:	200011ac 	.word	0x200011ac
 800f010:	200012ac 	.word	0x200012ac
 800f014:	080227b0 	.word	0x080227b0
 800f018:	080227dc 	.word	0x080227dc

0800f01c <aci_gatt_proc_timeout_event>:
{
 800f01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BLE_MANAGER_PRINTF("\r\n-------->aci_gatt_proc_timeout_event<--------\r\n");
 800f020:	4e1e      	ldr	r6, [pc, #120]	; (800f09c <aci_gatt_proc_timeout_event+0x80>)
 800f022:	4d1f      	ldr	r5, [pc, #124]	; (800f0a0 <aci_gatt_proc_timeout_event+0x84>)
{
 800f024:	4607      	mov	r7, r0
  BLE_MANAGER_PRINTF("\r\n-------->aci_gatt_proc_timeout_event<--------\r\n");
 800f026:	462c      	mov	r4, r5
 800f028:	f106 0e30 	add.w	lr, r6, #48	; 0x30
 800f02c:	46b4      	mov	ip, r6
 800f02e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f032:	45f4      	cmp	ip, lr
 800f034:	f104 0410 	add.w	r4, r4, #16
 800f038:	f106 0610 	add.w	r6, r6, #16
 800f03c:	f844 0c10 	str.w	r0, [r4, #-16]
 800f040:	f844 1c0c 	str.w	r1, [r4, #-12]
 800f044:	f844 2c08 	str.w	r2, [r4, #-8]
 800f048:	f844 3c04 	str.w	r3, [r4, #-4]
 800f04c:	d1ee      	bne.n	800f02c <aci_gatt_proc_timeout_event+0x10>
 800f04e:	8833      	ldrh	r3, [r6, #0]
 800f050:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800f0a8 <aci_gatt_proc_timeout_event+0x8c>
 800f054:	8023      	strh	r3, [r4, #0]
 800f056:	2131      	movs	r1, #49	; 0x31
 800f058:	4811      	ldr	r0, [pc, #68]	; (800f0a0 <aci_gatt_proc_timeout_event+0x84>)
  BLE_MANAGER_PRINTF("Issue one aci_gap_terminate\r\n");
 800f05a:	4c12      	ldr	r4, [pc, #72]	; (800f0a4 <aci_gatt_proc_timeout_event+0x88>)
  BLE_MANAGER_PRINTF("\r\n-------->aci_gatt_proc_timeout_event<--------\r\n");
 800f05c:	f8c8 1000 	str.w	r1, [r8]
 800f060:	f7f5 fa40 	bl	80044e4 <CDC_Fill_Buffer>
  BLE_MANAGER_DELAY(500);
 800f064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f068:	f7f7 f800 	bl	800606c <HAL_Delay>
  BLE_MANAGER_PRINTF("Issue one aci_gap_terminate\r\n");
 800f06c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f06e:	6028      	str	r0, [r5, #0]
 800f070:	6069      	str	r1, [r5, #4]
 800f072:	60aa      	str	r2, [r5, #8]
 800f074:	cc07      	ldmia	r4!, {r0, r1, r2}
 800f076:	261d      	movs	r6, #29
 800f078:	60eb      	str	r3, [r5, #12]
 800f07a:	6128      	str	r0, [r5, #16]
 800f07c:	8823      	ldrh	r3, [r4, #0]
 800f07e:	6169      	str	r1, [r5, #20]
 800f080:	4807      	ldr	r0, [pc, #28]	; (800f0a0 <aci_gatt_proc_timeout_event+0x84>)
 800f082:	f8c8 6000 	str.w	r6, [r8]
 800f086:	4631      	mov	r1, r6
 800f088:	61aa      	str	r2, [r5, #24]
 800f08a:	83ab      	strh	r3, [r5, #28]
 800f08c:	f7f5 fa2a 	bl	80044e4 <CDC_Fill_Buffer>
  aci_gap_terminate(Connection_Handle,0x13);
 800f090:	4638      	mov	r0, r7
 800f092:	2113      	movs	r1, #19
}
 800f094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  aci_gap_terminate(Connection_Handle,0x13);
 800f098:	f000 b9b8 	b.w	800f40c <aci_gap_terminate>
 800f09c:	0802280c 	.word	0x0802280c
 800f0a0:	200011ac 	.word	0x200011ac
 800f0a4:	08022840 	.word	0x08022840
 800f0a8:	200012ac 	.word	0x200012ac

0800f0ac <hci_hardware_error_event>:
  if(CustomHardwareErrorEventHandler!=NULL)
 800f0ac:	4b06      	ldr	r3, [pc, #24]	; (800f0c8 <hci_hardware_error_event+0x1c>)
 800f0ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f0b2:	b103      	cbz	r3, 800f0b6 <hci_hardware_error_event+0xa>
    CustomHardwareErrorEventHandler(Hardware_Code);
 800f0b4:	4718      	bx	r3
{
 800f0b6:	b510      	push	{r4, lr}
    BLE_MANAGER_DELAY(1000);
 800f0b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f0bc:	f7f6 ffd6 	bl	800606c <HAL_Delay>
}
 800f0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_SystemReset();
 800f0c4:	f7f7 be88 	b.w	8006dd8 <HAL_NVIC_SystemReset>
 800f0c8:	20002014 	.word	0x20002014

0800f0cc <aci_gap_bond_lost_event>:
  aci_gap_allow_rebond(connection_handle);
 800f0cc:	4b02      	ldr	r3, [pc, #8]	; (800f0d8 <aci_gap_bond_lost_event+0xc>)
 800f0ce:	f8b3 032a 	ldrh.w	r0, [r3, #810]	; 0x32a
 800f0d2:	f000 b9bd 	b.w	800f450 <aci_gap_allow_rebond>
 800f0d6:	bf00      	nop
 800f0d8:	20002014 	.word	0x20002014

0800f0dc <aci_gap_numeric_comparison_value_event>:
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("aci_gap_numeric_comparison_value_event Numeric_Value=%ld\r\n",Numeric_Value);
#endif
  
  /* Confirm Yes... without control of Numeric Value received from Master */
  aci_gap_numeric_comparison_value_confirm_yesno(Connection_Handle,0x01);
 800f0dc:	2101      	movs	r1, #1
 800f0de:	f000 ba2f 	b.w	800f540 <aci_gap_numeric_comparison_value_confirm_yesno>
 800f0e2:	bf00      	nop

0800f0e4 <hci_encryption_change_event>:
void hci_encryption_change_event(uint8_t Status,uint16_t Connection_Handle,uint8_t Encryption_Enabled)
{
#if (BLE_DEBUG_LEVEL>2)
  BLE_MANAGER_PRINTF("hci_encryption_change_event\r\n");  
#endif
}
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop

0800f0e8 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f0ee:	ad09      	add	r5, sp, #36	; 0x24
{
 800f0f0:	f89d 4154 	ldrb.w	r4, [sp, #340]	; 0x154
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800f0f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
{
 800f0f8:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
  index_input += 1;
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800f0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f100:	f104 0a08 	add.w	sl, r4, #8
{
 800f104:	4613      	mov	r3, r2
 800f106:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800f10a:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f10e:	eb05 030a 	add.w	r3, r5, sl
  tBleStatus status = 0;
 800f112:	f04f 0800 	mov.w	r8, #0
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800f116:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800f11a:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800f11e:	4622      	mov	r2, r4
 800f120:	9956      	ldr	r1, [sp, #344]	; 0x158
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f122:	9301      	str	r3, [sp, #4]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800f124:	a80b      	add	r0, sp, #44	; 0x2c
{
 800f126:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 800f12a:	f8bd b164 	ldrh.w	fp, [sp, #356]	; 0x164
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800f12e:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
{
 800f132:	9300      	str	r3, [sp, #0]
  tBleStatus status = 0;
 800f134:	f88d 800b 	strb.w	r8, [sp, #11]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f138:	f107 0609 	add.w	r6, r7, #9
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800f13c:	f00c fbaf 	bl	801b89e <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800f140:	9b01      	ldr	r3, [sp, #4]
 800f142:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800f144:	f805 700a 	strb.w	r7, [r5, sl]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f148:	4426      	add	r6, r4
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800f14a:	463a      	mov	r2, r7
 800f14c:	1c58      	adds	r0, r3, #1
 800f14e:	f00c fba6 	bl	801b89e <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800f152:	f825 b006 	strh.w	fp, [r5, r6]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f156:	442e      	add	r6, r5
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800f158:	9b00      	ldr	r3, [sp, #0]
 800f15a:	8073      	strh	r3, [r6, #2]
    }
    index_input += 2;
 800f15c:	370d      	adds	r7, #13
  tBleStatus status = 0;
 800f15e:	f10d 090b 	add.w	r9, sp, #11
    index_input += 2;
 800f162:	443c      	add	r4, r7
  rq.ogf = 0x3f;
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f164:	2301      	movs	r3, #1
 800f166:	e9cd 9307 	strd	r9, r3, [sp, #28]
  rq.clen = index_input;
 800f16a:	b2e4      	uxtb	r4, r4
  rq.ogf = 0x3f;
 800f16c:	4b08      	ldr	r3, [pc, #32]	; (800f190 <aci_gap_set_discoverable+0xa8>)
  rq.cparam = cmd_buffer;
 800f16e:	9505      	str	r5, [sp, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800f170:	4641      	mov	r1, r8
 800f172:	a803      	add	r0, sp, #12
  rq.clen = index_input;
 800f174:	9406      	str	r4, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f176:	f8cd 8010 	str.w	r8, [sp, #16]
  rq.ogf = 0x3f;
 800f17a:	9303      	str	r3, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800f17c:	f001 f860 	bl	8010240 <hci_send_req>
 800f180:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f182:	bfac      	ite	ge
 800f184:	f89d 000b 	ldrbge.w	r0, [sp, #11]
    return BLE_STATUS_TIMEOUT;
 800f188:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f18a:	b04b      	add	sp, #300	; 0x12c
 800f18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f190:	0083003f 	.word	0x0083003f

0800f194 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800f194:	b510      	push	{r4, lr}
 800f196:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 800f198:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800f19a:	2100      	movs	r1, #0
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f19c:	4a0b      	ldr	r2, [pc, #44]	; (800f1cc <aci_gap_set_io_capability+0x38>)
  cp0->IO_Capability = htob(IO_Capability, 1);
 800f19e:	f88d 001c 	strb.w	r0, [sp, #28]
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
 800f1a2:	9303      	str	r3, [sp, #12]
  tBleStatus status = 0;
 800f1a4:	f10d 0403 	add.w	r4, sp, #3
  rq.clen = index_input;
 800f1a8:	2301      	movs	r3, #1
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800f1aa:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800f1ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
  tBleStatus status = 0;
 800f1b0:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f1b4:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800f1b6:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800f1b8:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800f1ba:	f001 f841 	bl	8010240 <hci_send_req>
 800f1be:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f1c0:	bfac      	ite	ge
 800f1c2:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f1c6:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f1c8:	b048      	add	sp, #288	; 0x120
 800f1ca:	bd10      	pop	{r4, pc}
 800f1cc:	0085003f 	.word	0x0085003f

0800f1d0 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800f1d0:	b530      	push	{r4, r5, lr}
 800f1d2:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800f1d4:	ac07      	add	r4, sp, #28
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800f1d6:	f88d 301f 	strb.w	r3, [sp, #31]
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f1da:	4b18      	ldr	r3, [pc, #96]	; (800f23c <aci_gap_set_authentication_requirement+0x6c>)
 800f1dc:	9301      	str	r3, [sp, #4]
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	9306      	str	r3, [sp, #24]
{
 800f1e2:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800f1e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
{
 800f1ea:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800f1ee:	f89d 5130 	ldrb.w	r5, [sp, #304]	; 0x130
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800f1f2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
{
 800f1f6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800f1f8:	f88d 001c 	strb.w	r0, [sp, #28]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800f1fc:	f88d 101d 	strb.w	r1, [sp, #29]
  cp0->SC_Support = htob(SC_Support, 1);
 800f200:	f88d 201e 	strb.w	r2, [sp, #30]
  tBleStatus status = 0;
 800f204:	2100      	movs	r1, #0
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800f206:	f88d 5020 	strb.w	r5, [sp, #32]
  rq.clen = index_input;
 800f20a:	220c      	movs	r2, #12
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800f20c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
  if (hci_send_req(&rq, FALSE) < 0)
 800f210:	a801      	add	r0, sp, #4
{
 800f212:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f216:	9102      	str	r1, [sp, #8]
  tBleStatus status = 0;
 800f218:	f10d 0503 	add.w	r5, sp, #3
  rq.clen = index_input;
 800f21c:	e9cd 4203 	strd	r4, r2, [sp, #12]
  rq.rparam = &status;
 800f220:	9505      	str	r5, [sp, #20]
  tBleStatus status = 0;
 800f222:	f88d 1003 	strb.w	r1, [sp, #3]
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800f226:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (hci_send_req(&rq, FALSE) < 0)
 800f22a:	f001 f809 	bl	8010240 <hci_send_req>
 800f22e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f230:	bfac      	ite	ge
 800f232:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f236:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f238:	b049      	add	sp, #292	; 0x124
 800f23a:	bd30      	pop	{r4, r5, pc}
 800f23c:	0086003f 	.word	0x0086003f

0800f240 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 800f240:	b510      	push	{r4, lr}
 800f242:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f244:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f246:	aa07      	add	r2, sp, #28
 800f248:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  cp0->Pass_Key = htob(Pass_Key, 4);
  index_input += 4;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f24c:	480c      	ldr	r0, [pc, #48]	; (800f280 <aci_gap_pass_key_resp+0x40>)
  tBleStatus status = 0;
 800f24e:	f88d 3003 	strb.w	r3, [sp, #3]
  cp0->Pass_Key = htob(Pass_Key, 4);
 800f252:	f8cd 101e 	str.w	r1, [sp, #30]
  rq.ocf = 0x088;
  rq.cparam = cmd_buffer;
 800f256:	9203      	str	r2, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f258:	9302      	str	r3, [sp, #8]
  rq.clen = index_input;
 800f25a:	2206      	movs	r2, #6
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800f25c:	4619      	mov	r1, r3
  rq.ogf = 0x3f;
 800f25e:	9001      	str	r0, [sp, #4]
  rq.rlen = 1;
 800f260:	2301      	movs	r3, #1
  tBleStatus status = 0;
 800f262:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f266:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f268:	e9cd 4305 	strd	r4, r3, [sp, #20]
  rq.clen = index_input;
 800f26c:	9204      	str	r2, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800f26e:	f000 ffe7 	bl	8010240 <hci_send_req>
 800f272:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f274:	bfac      	ite	ge
 800f276:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f27a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f27c:	b048      	add	sp, #288	; 0x120
 800f27e:	bd10      	pop	{r4, pc}
 800f280:	0088003f 	.word	0x0088003f

0800f284 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800f284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f286:	b0cb      	sub	sp, #300	; 0x12c
 800f288:	461f      	mov	r7, r3
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800f28a:	2303      	movs	r3, #3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f28c:	2500      	movs	r5, #0
  rq.clen = index_input;
 800f28e:	9306      	str	r3, [sp, #24]
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800f290:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 800f292:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800f296:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  rq.rlen = sizeof(resp);
 800f29a:	9308      	str	r3, [sp, #32]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f29c:	ac01      	add	r4, sp, #4
  rq.ogf = 0x3f;
 800f29e:	4b15      	ldr	r3, [pc, #84]	; (800f2f4 <aci_gap_init+0x70>)
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f2a0:	9501      	str	r5, [sp, #4]
  cp0->Role = htob(Role, 1);
 800f2a2:	ae09      	add	r6, sp, #36	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	a803      	add	r0, sp, #12
  rq.rparam = &resp;
 800f2a8:	9407      	str	r4, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f2aa:	f8cd 5007 	str.w	r5, [sp, #7]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800f2ae:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  rq.cparam = cmd_buffer;
 800f2b2:	9605      	str	r6, [sp, #20]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f2b4:	9504      	str	r5, [sp, #16]
  rq.ogf = 0x3f;
 800f2b6:	9303      	str	r3, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800f2b8:	f000 ffc2 	bl	8010240 <hci_send_req>
 800f2bc:	42a8      	cmp	r0, r5
 800f2be:	db15      	blt.n	800f2ec <aci_gap_init+0x68>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800f2c0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800f2c4:	b980      	cbnz	r0, 800f2e8 <aci_gap_init+0x64>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800f2c6:	9b01      	ldr	r3, [sp, #4]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800f2c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800f2cc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800f2d0:	803b      	strh	r3, [r7, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800f2d2:	f89d 1008 	ldrb.w	r1, [sp, #8]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800f2d6:	9b02      	ldr	r3, [sp, #8]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800f2d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800f2dc:	9950      	ldr	r1, [sp, #320]	; 0x140
 800f2de:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800f2e0:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800f2e2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800f2e6:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800f2e8:	b04b      	add	sp, #300	; 0x12c
 800f2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800f2ec:	20ff      	movs	r0, #255	; 0xff
}
 800f2ee:	b04b      	add	sp, #300	; 0x12c
 800f2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	008a003f 	.word	0x008a003f

0800f2f8 <aci_gap_set_undirected_connectable>:
}
tBleStatus aci_gap_set_undirected_connectable(uint16_t Advertising_Interval_Min,
                                              uint16_t Advertising_Interval_Max,
                                              uint8_t Own_Address_Type,
                                              uint8_t Adv_Filter_Policy)
{
 800f2f8:	b510      	push	{r4, lr}
 800f2fa:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_undirected_connectable_cp0 *cp0 = (aci_gap_set_undirected_connectable_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f2fc:	f10d 0403 	add.w	r4, sp, #3
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
  index_input += 1;
  cp0->Adv_Filter_Policy = htob(Adv_Filter_Policy, 1);
 800f300:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800f304:	ab07      	add	r3, sp, #28
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x08c;
  rq.cparam = cmd_buffer;
 800f306:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f308:	2301      	movs	r3, #1
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800f30a:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800f30e:	f8ad 101e 	strh.w	r1, [sp, #30]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800f312:	f88d 2020 	strb.w	r2, [sp, #32]
  tBleStatus status = 0;
 800f316:	2100      	movs	r1, #0
  rq.clen = index_input;
 800f318:	2206      	movs	r2, #6
  rq.rlen = 1;
 800f31a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800f31c:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 800f31e:	4b08      	ldr	r3, [pc, #32]	; (800f340 <aci_gap_set_undirected_connectable+0x48>)
  rq.rparam = &status;
 800f320:	9405      	str	r4, [sp, #20]
  rq.clen = index_input;
 800f322:	9204      	str	r2, [sp, #16]
  tBleStatus status = 0;
 800f324:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f328:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800f32a:	9301      	str	r3, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f32c:	f000 ff88 	bl	8010240 <hci_send_req>
 800f330:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f332:	bfac      	ite	ge
 800f334:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f338:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f33a:	b048      	add	sp, #288	; 0x120
 800f33c:	bd10      	pop	{r4, pc}
 800f33e:	bf00      	nop
 800f340:	008c003f 	.word	0x008c003f

0800f344 <aci_gap_slave_security_req>:
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 800f344:	b510      	push	{r4, lr}
 800f346:	b0c8      	sub	sp, #288	; 0x120
  cp0->Connection_Handle = htob(Connection_Handle, 2);
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x08d;
  rq.event = 0x0F;
 800f348:	220f      	movs	r2, #15
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f34a:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.event = 0x0F;
 800f34e:	480c      	ldr	r0, [pc, #48]	; (800f380 <aci_gap_slave_security_req+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f350:	ab07      	add	r3, sp, #28
  rq.event = 0x0F;
 800f352:	e9cd 0201 	strd	r0, r2, [sp, #4]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800f356:	2202      	movs	r2, #2
 800f358:	e9cd 3203 	strd	r3, r2, [sp, #12]
  tBleStatus status = 0;
 800f35c:	2100      	movs	r1, #0
  rq.rparam = &status;
  rq.rlen = 1;
 800f35e:	2301      	movs	r3, #1
  tBleStatus status = 0;
 800f360:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f364:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f366:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tBleStatus status = 0;
 800f36a:	f88d 1003 	strb.w	r1, [sp, #3]
  if (hci_send_req(&rq, FALSE) < 0)
 800f36e:	f000 ff67 	bl	8010240 <hci_send_req>
 800f372:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f374:	bfac      	ite	ge
 800f376:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f37a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f37c:	b048      	add	sp, #288	; 0x120
 800f37e:	bd10      	pop	{r4, pc}
 800f380:	008d003f 	.word	0x008d003f

0800f384 <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800f384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f386:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f388:	2500      	movs	r5, #0
  uint8_t index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800f38a:	4602      	mov	r2, r0
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800f38c:	f88d 001c 	strb.w	r0, [sp, #28]
{
 800f390:	4604      	mov	r4, r0
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800f392:	f10d 001d 	add.w	r0, sp, #29
  tBleStatus status = 0;
 800f396:	f88d 5003 	strb.w	r5, [sp, #3]
    index_input += AdvDataLen*sizeof(uint8_t);
 800f39a:	3401      	adds	r4, #1
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800f39c:	f00c fa7f 	bl	801b89e <memcpy>
  rq.ogf = 0x3f;
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	9306      	str	r3, [sp, #24]
  tBleStatus status = 0;
 800f3a4:	f10d 0603 	add.w	r6, sp, #3
  rq.ogf = 0x3f;
 800f3a8:	4b09      	ldr	r3, [pc, #36]	; (800f3d0 <aci_gap_update_adv_data+0x4c>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f3aa:	9502      	str	r5, [sp, #8]
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800f3ac:	af07      	add	r7, sp, #28
  rq.clen = index_input;
 800f3ae:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800f3b4:	e9cd 4604 	strd	r4, r6, [sp, #16]
  rq.cparam = cmd_buffer;
 800f3b8:	9703      	str	r7, [sp, #12]
  rq.ogf = 0x3f;
 800f3ba:	9301      	str	r3, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f3bc:	f000 ff40 	bl	8010240 <hci_send_req>
 800f3c0:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f3c2:	bfac      	ite	ge
 800f3c4:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f3c8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f3ca:	b049      	add	sp, #292	; 0x124
 800f3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	008e003f 	.word	0x008e003f

0800f3d4 <aci_gap_configure_whitelist>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_configure_whitelist(void)
{
 800f3d4:	b500      	push	{lr}
  struct hci_request rq;
  tBleStatus status = 0;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f3d6:	480c      	ldr	r0, [pc, #48]	; (800f408 <aci_gap_configure_whitelist+0x34>)
{
 800f3d8:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = 0;
 800f3da:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800f3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 800f3e0:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800f3e4:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800f3e6:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f3e8:	e9cd 1104 	strd	r1, r1, [sp, #16]
  tBleStatus status = 0;
 800f3ec:	f88d 1007 	strb.w	r1, [sp, #7]
  rq.rparam = &status;
 800f3f0:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 800f3f2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800f3f4:	f000 ff24 	bl	8010240 <hci_send_req>
 800f3f8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f3fa:	bfac      	ite	ge
 800f3fc:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800f400:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f402:	b009      	add	sp, #36	; 0x24
 800f404:	f85d fb04 	ldr.w	pc, [sp], #4
 800f408:	0092003f 	.word	0x0092003f

0800f40c <aci_gap_terminate>:
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
 800f40c:	b510      	push	{r4, lr}
 800f40e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f410:	ab07      	add	r3, sp, #28
  index_input += 2;
  cp0->Reason = htob(Reason, 1);
 800f412:	f88d 101e 	strb.w	r1, [sp, #30]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f416:	4a0d      	ldr	r2, [pc, #52]	; (800f44c <aci_gap_terminate+0x40>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f418:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.ocf = 0x093;
  rq.event = 0x0F;
 800f41c:	210f      	movs	r1, #15
  rq.cparam = cmd_buffer;
 800f41e:	e9cd 1302 	strd	r1, r3, [sp, #8]
  rq.ogf = 0x3f;
 800f422:	9201      	str	r2, [sp, #4]
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f424:	2301      	movs	r3, #1
  rq.clen = index_input;
 800f426:	2203      	movs	r2, #3
  tBleStatus status = 0;
 800f428:	2100      	movs	r1, #0
 800f42a:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f42e:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800f430:	e9cd 2404 	strd	r2, r4, [sp, #16]
  rq.rlen = 1;
 800f434:	9306      	str	r3, [sp, #24]
  tBleStatus status = 0;
 800f436:	f88d 1003 	strb.w	r1, [sp, #3]
  if (hci_send_req(&rq, FALSE) < 0)
 800f43a:	f000 ff01 	bl	8010240 <hci_send_req>
 800f43e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f440:	bfac      	ite	ge
 800f442:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f446:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f448:	b048      	add	sp, #288	; 0x120
 800f44a:	bd10      	pop	{r4, pc}
 800f44c:	0093003f 	.word	0x0093003f

0800f450 <aci_gap_allow_rebond>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_allow_rebond(uint16_t Connection_Handle)
{
 800f450:	b510      	push	{r4, lr}
 800f452:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f454:	ab07      	add	r3, sp, #28
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x095;
  rq.cparam = cmd_buffer;
 800f456:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 800f458:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800f45a:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800f45c:	4a0b      	ldr	r2, [pc, #44]	; (800f48c <aci_gap_allow_rebond+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f45e:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.clen = index_input;
 800f462:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 800f464:	f10d 0403 	add.w	r4, sp, #3
  rq.rparam = &status;
  rq.rlen = 1;
 800f468:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800f46a:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f46c:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tBleStatus status = 0;
 800f470:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f474:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800f476:	9201      	str	r2, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f478:	f000 fee2 	bl	8010240 <hci_send_req>
 800f47c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f47e:	bfac      	ite	ge
 800f480:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f484:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f486:	b048      	add	sp, #288	; 0x120
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	bf00      	nop
 800f48c:	0095003f 	.word	0x0095003f

0800f490 <aci_gap_get_bonded_devices>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_get_bonded_devices(uint8_t *Num_of_Addresses,
                                      Bonded_Device_Entry_t Bonded_Device_Entry[])
{
 800f490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f492:	b0c7      	sub	sp, #284	; 0x11c
  struct hci_request rq;
  aci_gap_get_bonded_devices_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f494:	ac06      	add	r4, sp, #24
 800f496:	25fe      	movs	r5, #254	; 0xfe
 800f498:	462a      	mov	r2, r5
{
 800f49a:	4606      	mov	r6, r0
 800f49c:	460f      	mov	r7, r1
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f49e:	4620      	mov	r0, r4
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f00c f945 	bl	801b730 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f4a6:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800f4a8:	4b11      	ldr	r3, [pc, #68]	; (800f4f0 <aci_gap_get_bonded_devices+0x60>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f4aa:	9103      	str	r1, [sp, #12]
  rq.ocf = 0x0a3;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if (hci_send_req(&rq, FALSE) < 0)
 800f4ac:	4668      	mov	r0, sp
  rq.rparam = &resp;
 800f4ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f4b2:	e9cd 1101 	strd	r1, r1, [sp, #4]
  rq.ogf = 0x3f;
 800f4b6:	9300      	str	r3, [sp, #0]
  if (hci_send_req(&rq, FALSE) < 0)
 800f4b8:	f000 fec2 	bl	8010240 <hci_send_req>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	db12      	blt.n	800f4e6 <aci_gap_get_bonded_devices+0x56>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800f4c0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f4c4:	b115      	cbz	r5, 800f4cc <aci_gap_get_bonded_devices+0x3c>
    return resp.Status;
  }
  *Num_of_Addresses = btoh(resp.Num_of_Addresses, 1);
  BLUENRG_memcpy((void *) Bonded_Device_Entry, (const void *) resp.Bonded_Device_Entry, *Num_of_Addresses*sizeof(Bonded_Device_Entry_t));
  return BLE_STATUS_SUCCESS;
}
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	b047      	add	sp, #284	; 0x11c
 800f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *Num_of_Addresses = btoh(resp.Num_of_Addresses, 1);
 800f4cc:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800f4d0:	7032      	strb	r2, [r6, #0]
  BLUENRG_memcpy((void *) Bonded_Device_Entry, (const void *) resp.Bonded_Device_Entry, *Num_of_Addresses*sizeof(Bonded_Device_Entry_t));
 800f4d2:	f10d 011a 	add.w	r1, sp, #26
 800f4d6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f4da:	4638      	mov	r0, r7
 800f4dc:	f00c f9df 	bl	801b89e <memcpy>
}
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	b047      	add	sp, #284	; 0x11c
 800f4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800f4e6:	25ff      	movs	r5, #255	; 0xff
}
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	b047      	add	sp, #284	; 0x11c
 800f4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	00a3003f 	.word	0x00a3003f

0800f4f4 <aci_gap_is_device_bonded>:
tBleStatus aci_gap_is_device_bonded(uint8_t Peer_Address_Type,
                                    uint8_t Peer_Address[6])
{
 800f4f4:	b510      	push	{r4, lr}
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_is_device_bonded_cp0 *cp0 = (aci_gap_is_device_bonded_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800f4fa:	aa07      	add	r2, sp, #28
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
  index_input += 6;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x0a4;
  rq.cparam = cmd_buffer;
 800f4fc:	9203      	str	r2, [sp, #12]
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	889b      	ldrh	r3, [r3, #4]
 800f502:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
  rq.clen = index_input;
 800f506:	2307      	movs	r3, #7
  tBleStatus status = 0;
 800f508:	2100      	movs	r1, #0
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800f50a:	f88d 001c 	strb.w	r0, [sp, #28]
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800f50e:	f8cd 201d 	str.w	r2, [sp, #29]
  rq.clen = index_input;
 800f512:	9304      	str	r3, [sp, #16]
  rq.ogf = 0x3f;
 800f514:	4a09      	ldr	r2, [pc, #36]	; (800f53c <aci_gap_is_device_bonded+0x48>)
  tBleStatus status = 0;
 800f516:	f88d 1003 	strb.w	r1, [sp, #3]
  rq.rparam = &status;
  rq.rlen = 1;
 800f51a:	2301      	movs	r3, #1
  tBleStatus status = 0;
 800f51c:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f520:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800f522:	9405      	str	r4, [sp, #20]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f524:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800f526:	9201      	str	r2, [sp, #4]
  rq.rlen = 1;
 800f528:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800f52a:	f000 fe89 	bl	8010240 <hci_send_req>
 800f52e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f530:	bfac      	ite	ge
 800f532:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f536:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f538:	b048      	add	sp, #288	; 0x120
 800f53a:	bd10      	pop	{r4, pc}
 800f53c:	00a4003f 	.word	0x00a4003f

0800f540 <aci_gap_numeric_comparison_value_confirm_yesno>:
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No)
{
 800f540:	b510      	push	{r4, lr}
 800f542:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f544:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f546:	aa07      	add	r2, sp, #28
 800f548:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 2;
  cp0->Confirm_Yes_No = htob(Confirm_Yes_No, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f54c:	480c      	ldr	r0, [pc, #48]	; (800f580 <aci_gap_numeric_comparison_value_confirm_yesno+0x40>)
  tBleStatus status = 0;
 800f54e:	f88d 3003 	strb.w	r3, [sp, #3]
  cp0->Confirm_Yes_No = htob(Confirm_Yes_No, 1);
 800f552:	f88d 101e 	strb.w	r1, [sp, #30]
  rq.ocf = 0x0a5;
  rq.cparam = cmd_buffer;
 800f556:	9203      	str	r2, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f558:	9302      	str	r3, [sp, #8]
  rq.clen = index_input;
 800f55a:	2203      	movs	r2, #3
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800f55c:	4619      	mov	r1, r3
  rq.ogf = 0x3f;
 800f55e:	9001      	str	r0, [sp, #4]
  rq.rlen = 1;
 800f560:	2301      	movs	r3, #1
  tBleStatus status = 0;
 800f562:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f566:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f568:	e9cd 4305 	strd	r4, r3, [sp, #20]
  rq.clen = index_input;
 800f56c:	9204      	str	r2, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800f56e:	f000 fe67 	bl	8010240 <hci_send_req>
 800f572:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f574:	bfac      	ite	ge
 800f576:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f57a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f57c:	b048      	add	sp, #288	; 0x120
 800f57e:	bd10      	pop	{r4, pc}
 800f580:	00a5003f 	.word	0x00a5003f

0800f584 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800f584:	b500      	push	{lr}
  struct hci_request rq;
  tBleStatus status = 0;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f586:	480c      	ldr	r0, [pc, #48]	; (800f5b8 <aci_gatt_init+0x34>)
{
 800f588:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = 0;
 800f58a:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800f58c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 800f590:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800f594:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800f596:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f598:	e9cd 1104 	strd	r1, r1, [sp, #16]
  tBleStatus status = 0;
 800f59c:	f88d 1007 	strb.w	r1, [sp, #7]
  rq.rparam = &status;
 800f5a0:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 800f5a2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800f5a4:	f000 fe4c 	bl	8010240 <hci_send_req>
 800f5a8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f5aa:	bfac      	ite	ge
 800f5ac:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800f5b0:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f5b2:	b009      	add	sp, #36	; 0x24
 800f5b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5b8:	0101003f 	.word	0x0101003f

0800f5bc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800f5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f5c0:	2801      	cmp	r0, #1
{
 800f5c2:	b0c9      	sub	sp, #292	; 0x124
 800f5c4:	4615      	mov	r5, r2
 800f5c6:	461c      	mov	r4, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f5c8:	d032      	beq.n	800f630 <aci_gatt_add_service+0x74>
 800f5ca:	2802      	cmp	r0, #2
 800f5cc:	d003      	beq.n	800f5d6 <aci_gatt_add_service+0x1a>
 800f5ce:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 800f5d0:	b049      	add	sp, #292	; 0x124
 800f5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f5d6:	466e      	mov	r6, sp
 800f5d8:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800f5da:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f5de:	8033      	strh	r3, [r6, #0]
 800f5e0:	70b3      	strb	r3, [r6, #2]
      case 2: size = 16; break;
 800f5e2:	f04f 0913 	mov.w	r9, #19
 800f5e6:	2210      	movs	r2, #16
 800f5e8:	f10d 072d 	add.w	r7, sp, #45	; 0x2d
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800f5ec:	f888 0000 	strb.w	r0, [r8]
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800f5f0:	f10d 001d 	add.w	r0, sp, #29
 800f5f4:	f00c f953 	bl	801b89e <memcpy>
  rq.ogf = 0x3f;
 800f5f8:	4b16      	ldr	r3, [pc, #88]	; (800f654 <aci_gatt_add_service+0x98>)
      cp1->Service_Type = htob(Service_Type, 1);
 800f5fa:	703d      	strb	r5, [r7, #0]
  rq.ogf = 0x3f;
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	e9cd 3101 	strd	r3, r1, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f602:	a801      	add	r0, sp, #4
  rq.rlen = sizeof(resp);
 800f604:	2303      	movs	r3, #3
  rq.rparam = &resp;
 800f606:	e9cd 9604 	strd	r9, r6, [sp, #16]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800f60a:	707c      	strb	r4, [r7, #1]
  rq.cparam = cmd_buffer;
 800f60c:	f8cd 800c 	str.w	r8, [sp, #12]
  rq.rlen = sizeof(resp);
 800f610:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800f612:	f000 fe15 	bl	8010240 <hci_send_req>
 800f616:	2800      	cmp	r0, #0
 800f618:	db18      	blt.n	800f64c <aci_gatt_add_service+0x90>
  if (resp.Status) {
 800f61a:	7830      	ldrb	r0, [r6, #0]
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d1d7      	bne.n	800f5d0 <aci_gatt_add_service+0x14>
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800f620:	6833      	ldr	r3, [r6, #0]
 800f622:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800f624:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800f628:	8013      	strh	r3, [r2, #0]
}
 800f62a:	b049      	add	sp, #292	; 0x124
 800f62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f630:	466e      	mov	r6, sp
 800f632:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800f634:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f638:	8033      	strh	r3, [r6, #0]
 800f63a:	70b3      	strb	r3, [r6, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800f63c:	f04f 0905 	mov.w	r9, #5
 800f640:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f642:	f10d 071f 	add.w	r7, sp, #31
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800f646:	f888 0000 	strb.w	r0, [r8]
 800f64a:	e7d1      	b.n	800f5f0 <aci_gatt_add_service+0x34>
    return BLE_STATUS_TIMEOUT;
 800f64c:	20ff      	movs	r0, #255	; 0xff
}
 800f64e:	b049      	add	sp, #292	; 0x124
 800f650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f654:	0102003f 	.word	0x0102003f

0800f658 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f65e:	2901      	cmp	r1, #1
{
 800f660:	461d      	mov	r5, r3
 800f662:	f89d 8150 	ldrb.w	r8, [sp, #336]	; 0x150
 800f666:	f89d 9154 	ldrb.w	r9, [sp, #340]	; 0x154
 800f66a:	f89d a158 	ldrb.w	sl, [sp, #344]	; 0x158
 800f66e:	f89d b15c 	ldrb.w	fp, [sp, #348]	; 0x15c
 800f672:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 800f676:	4694      	mov	ip, r2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f678:	d03c      	beq.n	800f6f4 <aci_gatt_add_char+0x9c>
 800f67a:	2902      	cmp	r1, #2
 800f67c:	d003      	beq.n	800f686 <aci_gatt_add_char+0x2e>
 800f67e:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 800f680:	b04b      	add	sp, #300	; 0x12c
 800f682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f686:	ae02      	add	r6, sp, #8
 800f688:	2200      	movs	r2, #0
 800f68a:	8032      	strh	r2, [r6, #0]
 800f68c:	70b2      	strb	r2, [r6, #2]
      case 2: size = 16; break;
 800f68e:	221a      	movs	r2, #26
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f690:	af09      	add	r7, sp, #36	; 0x24
      case 2: size = 16; break;
 800f692:	9200      	str	r2, [sp, #0]
 800f694:	f10d 0437 	add.w	r4, sp, #55	; 0x37
 800f698:	2210      	movs	r2, #16
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f69a:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800f69c:	70b9      	strb	r1, [r7, #2]
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800f69e:	4661      	mov	r1, ip
 800f6a0:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	f00c f8fa 	bl	801b89e <memcpy>
      cp1->Is_Variable = htob(Is_Variable, 1);
 800f6aa:	9b01      	ldr	r3, [sp, #4]
 800f6ac:	71a3      	strb	r3, [r4, #6]
  rq.ogf = 0x3f;
 800f6ae:	4b1a      	ldr	r3, [pc, #104]	; (800f718 <aci_gatt_add_char+0xc0>)
  rq.clen = index_input;
 800f6b0:	9a00      	ldr	r2, [sp, #0]
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800f6b2:	8025      	strh	r5, [r4, #0]
  rq.ogf = 0x3f;
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 800f6ba:	a803      	add	r0, sp, #12
  rq.rlen = sizeof(resp);
 800f6bc:	2303      	movs	r3, #3
  rq.rparam = &resp;
 800f6be:	e9cd 2606 	strd	r2, r6, [sp, #24]
      cp1->Char_Properties = htob(Char_Properties, 1);
 800f6c2:	f884 8002 	strb.w	r8, [r4, #2]
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800f6c6:	f884 9003 	strb.w	r9, [r4, #3]
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800f6ca:	f884 a004 	strb.w	sl, [r4, #4]
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800f6ce:	f884 b005 	strb.w	fp, [r4, #5]
  rq.cparam = cmd_buffer;
 800f6d2:	9705      	str	r7, [sp, #20]
  rq.rlen = sizeof(resp);
 800f6d4:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800f6d6:	f000 fdb3 	bl	8010240 <hci_send_req>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	db17      	blt.n	800f70e <aci_gatt_add_char+0xb6>
  if (resp.Status) {
 800f6de:	7830      	ldrb	r0, [r6, #0]
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d1cd      	bne.n	800f680 <aci_gatt_add_char+0x28>
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800f6e4:	6833      	ldr	r3, [r6, #0]
 800f6e6:	9a59      	ldr	r2, [sp, #356]	; 0x164
 800f6e8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800f6ec:	8013      	strh	r3, [r2, #0]
}
 800f6ee:	b04b      	add	sp, #300	; 0x12c
 800f6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f6f4:	ae02      	add	r6, sp, #8
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	8032      	strh	r2, [r6, #0]
 800f6fa:	70b2      	strb	r2, [r6, #2]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800f6fc:	220c      	movs	r2, #12
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f6fe:	af09      	add	r7, sp, #36	; 0x24
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800f700:	9200      	str	r2, [sp, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f702:	f10d 0429 	add.w	r4, sp, #41	; 0x29
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800f706:	2202      	movs	r2, #2
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f708:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800f70a:	70b9      	strb	r1, [r7, #2]
 800f70c:	e7c7      	b.n	800f69e <aci_gatt_add_char+0x46>
    return BLE_STATUS_TIMEOUT;
 800f70e:	20ff      	movs	r0, #255	; 0xff
}
 800f710:	b04b      	add	sp, #300	; 0x12c
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	bf00      	nop
 800f718:	0104003f 	.word	0x0104003f

0800f71c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71e:	b0c9      	sub	sp, #292	; 0x124
 800f720:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f722:	2600      	movs	r6, #0
{
 800f724:	4613      	mov	r3, r2
  uint8_t index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f726:	f8ad 001c 	strh.w	r0, [sp, #28]
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800f72a:	4622      	mov	r2, r4
  cp0->Char_Handle = htob(Char_Handle, 2);
 800f72c:	f8ad 101e 	strh.w	r1, [sp, #30]
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800f730:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 800f734:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800f736:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  cp0->Val_Offset = htob(Val_Offset, 1);
 800f73a:	f88d 3020 	strb.w	r3, [sp, #32]
  tBleStatus status = 0;
 800f73e:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 800f742:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800f744:	f00c f8ab 	bl	801b89e <memcpy>
  rq.ogf = 0x3f;
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f748:	2301      	movs	r3, #1
 800f74a:	9306      	str	r3, [sp, #24]
  tBleStatus status = 0;
 800f74c:	f10d 0703 	add.w	r7, sp, #3
  rq.ogf = 0x3f;
 800f750:	4b09      	ldr	r3, [pc, #36]	; (800f778 <aci_gatt_update_char_value+0x5c>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f752:	9602      	str	r6, [sp, #8]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800f754:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 800f756:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800f758:	4631      	mov	r1, r6
 800f75a:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800f75c:	e9cd 4704 	strd	r4, r7, [sp, #16]
  rq.cparam = cmd_buffer;
 800f760:	9503      	str	r5, [sp, #12]
  rq.ogf = 0x3f;
 800f762:	9301      	str	r3, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f764:	f000 fd6c 	bl	8010240 <hci_send_req>
 800f768:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f76a:	bfac      	ite	ge
 800f76c:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f770:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f772:	b049      	add	sp, #292	; 0x124
 800f774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f776:	bf00      	nop
 800f778:	0106003f 	.word	0x0106003f

0800f77c <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800f77c:	b510      	push	{r4, lr}
 800f77e:	b0c8      	sub	sp, #288	; 0x120
  cp0->Connection_Handle = htob(Connection_Handle, 2);
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x10b;
  rq.event = 0x0F;
 800f780:	220f      	movs	r2, #15
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f782:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.event = 0x0F;
 800f786:	480c      	ldr	r0, [pc, #48]	; (800f7b8 <aci_gatt_exchange_config+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f788:	ab07      	add	r3, sp, #28
  rq.event = 0x0F;
 800f78a:	e9cd 0201 	strd	r0, r2, [sp, #4]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800f78e:	2202      	movs	r2, #2
 800f790:	e9cd 3203 	strd	r3, r2, [sp, #12]
  tBleStatus status = 0;
 800f794:	2100      	movs	r1, #0
  rq.rparam = &status;
  rq.rlen = 1;
 800f796:	2301      	movs	r3, #1
  tBleStatus status = 0;
 800f798:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f79c:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f79e:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tBleStatus status = 0;
 800f7a2:	f88d 1003 	strb.w	r1, [sp, #3]
  if (hci_send_req(&rq, FALSE) < 0)
 800f7a6:	f000 fd4b 	bl	8010240 <hci_send_req>
 800f7aa:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f7ac:	bfac      	ite	ge
 800f7ae:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f7b2:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f7b4:	b048      	add	sp, #288	; 0x120
 800f7b6:	bd10      	pop	{r4, pc}
 800f7b8:	010b003f 	.word	0x010b003f

0800f7bc <aci_gatt_confirm_indication>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_confirm_indication(uint16_t Connection_Handle)
{
 800f7bc:	b510      	push	{r4, lr}
 800f7be:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f7c0:	ab07      	add	r3, sp, #28
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x125;
  rq.cparam = cmd_buffer;
 800f7c2:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 800f7c4:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800f7c6:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800f7c8:	4a0b      	ldr	r2, [pc, #44]	; (800f7f8 <aci_gatt_confirm_indication+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f7ca:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.clen = index_input;
 800f7ce:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 800f7d0:	f10d 0403 	add.w	r4, sp, #3
  rq.rparam = &status;
  rq.rlen = 1;
 800f7d4:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800f7d6:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f7d8:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tBleStatus status = 0;
 800f7dc:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f7e0:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800f7e2:	9201      	str	r2, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f7e4:	f000 fd2c 	bl	8010240 <hci_send_req>
 800f7e8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f7ea:	bfac      	ite	ge
 800f7ec:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f7f0:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f7f2:	b048      	add	sp, #288	; 0x120
 800f7f4:	bd10      	pop	{r4, pc}
 800f7f6:	bf00      	nop
 800f7f8:	0125003f 	.word	0x0125003f

0800f7fc <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800f7fc:	b510      	push	{r4, lr}
 800f7fe:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  uint8_t index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f800:	ab07      	add	r3, sp, #28
  index_input += 2;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x127;
  rq.cparam = cmd_buffer;
 800f802:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 800f804:	2302      	movs	r3, #2
  tBleStatus status = 0;
 800f806:	2100      	movs	r1, #0
  rq.ogf = 0x3f;
 800f808:	4a0b      	ldr	r2, [pc, #44]	; (800f838 <aci_gatt_allow_read+0x3c>)
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800f80a:	f8ad 001c 	strh.w	r0, [sp, #28]
  rq.clen = index_input;
 800f80e:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 800f810:	f10d 0403 	add.w	r4, sp, #3
  rq.rparam = &status;
  rq.rlen = 1;
 800f814:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800f816:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f818:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tBleStatus status = 0;
 800f81c:	f88d 1003 	strb.w	r1, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f820:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x3f;
 800f822:	9201      	str	r2, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f824:	f000 fd0c 	bl	8010240 <hci_send_req>
 800f828:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f82a:	bfac      	ite	ge
 800f82c:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f830:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f832:	b048      	add	sp, #288	; 0x120
 800f834:	bd10      	pop	{r4, pc}
 800f836:	bf00      	nop
 800f838:	0127003f 	.word	0x0127003f

0800f83c <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83e:	b0c9      	sub	sp, #292	; 0x124
 800f840:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f842:	2500      	movs	r5, #0
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800f844:	4611      	mov	r1, r2
  cp0->Offset = htob(Offset, 1);
 800f846:	f88d 001c 	strb.w	r0, [sp, #28]
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800f84a:	4622      	mov	r2, r4
 800f84c:	f10d 001e 	add.w	r0, sp, #30
  cp0->Length = htob(Length, 1);
 800f850:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 800f854:	f88d 5003 	strb.w	r5, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 800f858:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800f85a:	f00c f820 	bl	801b89e <memcpy>
  rq.ogf = 0x3f;
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800f85e:	2301      	movs	r3, #1
 800f860:	9306      	str	r3, [sp, #24]
  tBleStatus status = 0;
 800f862:	f10d 0703 	add.w	r7, sp, #3
  rq.ogf = 0x3f;
 800f866:	4b09      	ldr	r3, [pc, #36]	; (800f88c <aci_hal_write_config_data+0x50>)
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f868:	9502      	str	r5, [sp, #8]
  cp0->Offset = htob(Offset, 1);
 800f86a:	ae07      	add	r6, sp, #28
  rq.clen = index_input;
 800f86c:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800f86e:	4629      	mov	r1, r5
 800f870:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800f872:	e9cd 4704 	strd	r4, r7, [sp, #16]
  rq.cparam = cmd_buffer;
 800f876:	9603      	str	r6, [sp, #12]
  rq.ogf = 0x3f;
 800f878:	9301      	str	r3, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 800f87a:	f000 fce1 	bl	8010240 <hci_send_req>
 800f87e:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f880:	bfac      	ite	ge
 800f882:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f886:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f888:	b049      	add	sp, #292	; 0x124
 800f88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f88c:	000c003f 	.word	0x000c003f

0800f890 <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f898:	ad07      	add	r5, sp, #28
 800f89a:	24ff      	movs	r4, #255	; 0xff
{
 800f89c:	4606      	mov	r6, r0
 800f89e:	4688      	mov	r8, r1
 800f8a0:	4617      	mov	r7, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	4622      	mov	r2, r4
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f00b ff42 	bl	801b730 <memset>
  uint8_t index_input = 0;
  cp0->Offset = htob(Offset, 1);
 800f8ac:	ab47      	add	r3, sp, #284	; 0x11c
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x00d;
  rq.cparam = cmd_buffer;
 800f8ae:	9303      	str	r3, [sp, #12]
  rq.ogf = 0x3f;
 800f8b0:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <aci_hal_read_config_data+0x6c>)
  cp0->Offset = htob(Offset, 1);
 800f8b2:	f88d 611c 	strb.w	r6, [sp, #284]	; 0x11c
  rq.ogf = 0x3f;
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if (hci_send_req(&rq, FALSE) < 0)
 800f8bc:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 800f8be:	2301      	movs	r3, #1
  rq.rlen = sizeof(resp);
 800f8c0:	e9cd 5405 	strd	r5, r4, [sp, #20]
  rq.clen = index_input;
 800f8c4:	9304      	str	r3, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800f8c6:	f000 fcbb 	bl	8010240 <hci_send_req>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	db02      	blt.n	800f8d4 <aci_hal_read_config_data+0x44>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800f8ce:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800f8d2:	b124      	cbz	r4, 800f8de <aci_hal_read_config_data+0x4e>
    return resp.Status;
  }
  *Data_Length = btoh(resp.Data_Length, 1);
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 800f8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *Data_Length = btoh(resp.Data_Length, 1);
 800f8de:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800f8e2:	f888 2000 	strb.w	r2, [r8]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800f8e6:	f10d 011e 	add.w	r1, sp, #30
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	f00b ffd7 	bl	801b89e <memcpy>
}
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 800f8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8fa:	bf00      	nop
 800f8fc:	000d003f 	.word	0x000d003f

0800f900 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800f900:	b510      	push	{r4, lr}
 800f902:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800f904:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 800f906:	aa07      	add	r2, sp, #28
 800f908:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800f90c:	480c      	ldr	r0, [pc, #48]	; (800f940 <aci_hal_set_tx_power_level+0x40>)
  tBleStatus status = 0;
 800f90e:	f88d 3003 	strb.w	r3, [sp, #3]
  cp0->PA_Level = htob(PA_Level, 1);
 800f912:	f88d 101d 	strb.w	r1, [sp, #29]
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 800f916:	9203      	str	r2, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f918:	9302      	str	r3, [sp, #8]
  rq.clen = index_input;
 800f91a:	2202      	movs	r2, #2
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800f91c:	4619      	mov	r1, r3
  rq.ogf = 0x3f;
 800f91e:	9001      	str	r0, [sp, #4]
  rq.rlen = 1;
 800f920:	2301      	movs	r3, #1
  tBleStatus status = 0;
 800f922:	f10d 0403 	add.w	r4, sp, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800f926:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800f928:	e9cd 4305 	strd	r4, r3, [sp, #20]
  rq.clen = index_input;
 800f92c:	9204      	str	r2, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800f92e:	f000 fc87 	bl	8010240 <hci_send_req>
 800f932:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800f934:	bfac      	ite	ge
 800f936:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800f93a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800f93c:	b048      	add	sp, #288	; 0x120
 800f93e:	bd10      	pop	{r4, pc}
 800f940:	000f003f 	.word	0x000f003f

0800f944 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800f944:	b508      	push	{r3, lr}
 800f946:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 800f948:	7800      	ldrb	r0, [r0, #0]
 800f94a:	78da      	ldrb	r2, [r3, #3]
 800f94c:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800f950:	f7ff f916 	bl	800eb80 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 800f954:	2000      	movs	r0, #0
 800f956:	bd08      	pop	{r3, pc}

0800f958 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800f958:	b508      	push	{r3, lr}
 800f95a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 800f95c:	7800      	ldrb	r0, [r0, #0]
 800f95e:	78da      	ldrb	r2, [r3, #3]
 800f960:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800f964:	f7ff fbbe 	bl	800f0e4 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 800f968:	2000      	movs	r0, #0
 800f96a:	bd08      	pop	{r3, pc}

0800f96c <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800f96c:	b510      	push	{r4, lr}
 800f96e:	4601      	mov	r1, r0
 800f970:	b082      	sub	sp, #8
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 800f972:	88c4      	ldrh	r4, [r0, #6]
 800f974:	888b      	ldrh	r3, [r1, #4]
 800f976:	78ca      	ldrb	r2, [r1, #3]
 800f978:	7800      	ldrb	r0, [r0, #0]
 800f97a:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 800f97e:	9400      	str	r4, [sp, #0]
 800f980:	f000 faf8 	bl	800ff74 <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 800f984:	2000      	movs	r0, #0
 800f986:	b002      	add	sp, #8
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	bf00      	nop

0800f98c <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800f98c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 800f98e:	7800      	ldrb	r0, [r0, #0]
 800f990:	f7ff fb8c 	bl	800f0ac <hci_hardware_error_event>

  return status;
}
 800f994:	2000      	movs	r0, #0
 800f996:	bd08      	pop	{r3, pc}

0800f998 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800f998:	b510      	push	{r4, lr}
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f99a:	7804      	ldrb	r4, [r0, #0]
{
 800f99c:	b0c0      	sub	sp, #256	; 0x100
 800f99e:	a901      	add	r1, sp, #4
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f9a0:	b184      	cbz	r4, 800f9c4 <hci_number_of_completed_packets_event_process+0x2c>
 800f9a2:	460a      	mov	r2, r1
 800f9a4:	2300      	movs	r3, #0
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800f9a6:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f9aa:	3301      	adds	r3, #1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800f9ac:	f8bc e001 	ldrh.w	lr, [ip, #1]
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800f9b0:	f8bc c003 	ldrh.w	ip, [ip, #3]
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800f9b4:	f8a2 e000 	strh.w	lr, [r2]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f9b8:	42a3      	cmp	r3, r4
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800f9ba:	f8a2 c002 	strh.w	ip, [r2, #2]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f9be:	f102 0204 	add.w	r2, r2, #4
 800f9c2:	d1f0      	bne.n	800f9a6 <hci_number_of_completed_packets_event_process+0xe>
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f000 fad7 	bl	800ff78 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	b040      	add	sp, #256	; 0x100
 800f9ce:	bd10      	pop	{r4, pc}

0800f9d0 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800f9d0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800f9d2:	7800      	ldrb	r0, [r0, #0]
 800f9d4:	f000 fad2 	bl	800ff7c <hci_data_buffer_overflow_event>

  return status;
}
 800f9d8:	2000      	movs	r0, #0
 800f9da:	bd08      	pop	{r3, pc}

0800f9dc <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800f9dc:	b508      	push	{r3, lr}
 800f9de:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800f9e0:	7800      	ldrb	r0, [r0, #0]
 800f9e2:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800f9e6:	f000 facb 	bl	800ff80 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	bd08      	pop	{r3, pc}
 800f9ee:	bf00      	nop

0800f9f0 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800f9f0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 800f9f2:	7800      	ldrb	r0, [r0, #0]
 800f9f4:	f000 fb06 	bl	8010004 <aci_blue_initialized_event>

  return status;
}
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	bd08      	pop	{r3, pc}

0800f9fc <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800f9fc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 800f9fe:	f000 fb03 	bl	8010008 <aci_blue_events_lost_event>

  return status;
}
 800fa02:	2000      	movs	r0, #0
 800fa04:	bd08      	pop	{r3, pc}
 800fa06:	bf00      	nop

0800fa08 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800fa08:	b510      	push	{r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 800fa0a:	4603      	mov	r3, r0
{
 800fa0c:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 800fa0e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800fa12:	f813 0b26 	ldrb.w	r0, [r3], #38
 800fa16:	f8d1 4021 	ldr.w	r4, [r1, #33]	; 0x21
{
 800fa1a:	b088      	sub	sp, #32
  aci_blue_crash_info_event(rp0->Crash_Type,
 800fa1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fa20:	f8d1 301d 	ldr.w	r3, [r1, #29]
 800fa24:	f8d1 2019 	ldr.w	r2, [r1, #25]
 800fa28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fa2c:	f8d1 3015 	ldr.w	r3, [r1, #21]
 800fa30:	f8d1 4011 	ldr.w	r4, [r1, #17]
 800fa34:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fa38:	f8d1 200d 	ldr.w	r2, [r1, #13]
 800fa3c:	f8d1 3009 	ldr.w	r3, [r1, #9]
 800fa40:	e9cd 2400 	strd	r2, r4, [sp]
 800fa44:	f8d1 2005 	ldr.w	r2, [r1, #5]
 800fa48:	f8d1 1001 	ldr.w	r1, [r1, #1]
 800fa4c:	f000 fade 	bl	801000c <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 800fa50:	2000      	movs	r0, #0
 800fa52:	b008      	add	sp, #32
 800fa54:	bd10      	pop	{r4, pc}
 800fa56:	bf00      	nop

0800fa58 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800fa58:	b508      	push	{r3, lr}
 800fa5a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800fa5c:	7800      	ldrb	r0, [r0, #0]
 800fa5e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800fa62:	7859      	ldrb	r1, [r3, #1]
 800fa64:	f000 fad4 	bl	8010010 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 800fa68:	2000      	movs	r0, #0
 800fa6a:	bd08      	pop	{r3, pc}

0800fa6c <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800fa6c:	b508      	push	{r3, lr}
 800fa6e:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 800fa70:	1c82      	adds	r2, r0, #2
 800fa72:	7859      	ldrb	r1, [r3, #1]
 800fa74:	f990 0000 	ldrsb.w	r0, [r0]
 800fa78:	f000 facc 	bl	8010014 <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	bd08      	pop	{r3, pc}

0800fa80 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800fa80:	b508      	push	{r3, lr}
 800fa82:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800fa84:	1c82      	adds	r2, r0, #2
 800fa86:	7859      	ldrb	r1, [r3, #1]
 800fa88:	7800      	ldrb	r0, [r0, #0]
 800fa8a:	f000 fac5 	bl	8010018 <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 800fa8e:	2000      	movs	r0, #0
 800fa90:	bd08      	pop	{r3, pc}
 800fa92:	bf00      	nop

0800fa94 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800fa94:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 800fa96:	f000 fa83 	bl	800ffa0 <aci_gap_limited_discoverable_event>

  return status;
}
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	bd08      	pop	{r3, pc}
 800fa9e:	bf00      	nop

0800faa0 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800faa0:	b508      	push	{r3, lr}
 800faa2:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800faa4:	8800      	ldrh	r0, [r0, #0]
 800faa6:	78da      	ldrb	r2, [r3, #3]
 800faa8:	7899      	ldrb	r1, [r3, #2]
 800faaa:	f7ff f9bf 	bl	800ee2c <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 800faae:	2000      	movs	r0, #0
 800fab0:	bd08      	pop	{r3, pc}
 800fab2:	bf00      	nop

0800fab4 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800fab4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800fab6:	8800      	ldrh	r0, [r0, #0]
 800fab8:	f7ff f998 	bl	800edec <aci_gap_pass_key_req_event>

  return status;
}
 800fabc:	2000      	movs	r0, #0
 800fabe:	bd08      	pop	{r3, pc}

0800fac0 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800fac0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800fac2:	8800      	ldrh	r0, [r0, #0]
 800fac4:	f000 fa6e 	bl	800ffa4 <aci_gap_authorization_req_event>

  return status;
}
 800fac8:	2000      	movs	r0, #0
 800faca:	bd08      	pop	{r3, pc}

0800facc <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800facc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 800face:	f000 fa6b 	bl	800ffa8 <aci_gap_slave_security_initiated_event>

  return status;
}
 800fad2:	2000      	movs	r0, #0
 800fad4:	bd08      	pop	{r3, pc}
 800fad6:	bf00      	nop

0800fad8 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800fad8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 800fada:	f7ff faf7 	bl	800f0cc <aci_gap_bond_lost_event>

  return status;
}
 800fade:	2000      	movs	r0, #0
 800fae0:	bd08      	pop	{r3, pc}
 800fae2:	bf00      	nop

0800fae4 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800fae4:	b508      	push	{r3, lr}
 800fae6:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800fae8:	1cc3      	adds	r3, r0, #3
 800faea:	788a      	ldrb	r2, [r1, #2]
 800faec:	7800      	ldrb	r0, [r0, #0]
 800faee:	7849      	ldrb	r1, [r1, #1]
 800faf0:	f000 fa5c 	bl	800ffac <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 800faf4:	2000      	movs	r0, #0
 800faf6:	bd08      	pop	{r3, pc}

0800faf8 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800faf8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800fafa:	8800      	ldrh	r0, [r0, #0]
 800fafc:	f000 fa58 	bl	800ffb0 <aci_gap_addr_not_resolved_event>

  return status;
}
 800fb00:	2000      	movs	r0, #0
 800fb02:	bd08      	pop	{r3, pc}

0800fb04 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800fb04:	b508      	push	{r3, lr}
 800fb06:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800fb08:	8800      	ldrh	r0, [r0, #0]
 800fb0a:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800fb0e:	f7ff fae5 	bl	800f0dc <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 800fb12:	2000      	movs	r0, #0
 800fb14:	bd08      	pop	{r3, pc}
 800fb16:	bf00      	nop

0800fb18 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800fb18:	b508      	push	{r3, lr}
 800fb1a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800fb1c:	8800      	ldrh	r0, [r0, #0]
 800fb1e:	7899      	ldrb	r1, [r3, #2]
 800fb20:	f000 fa48 	bl	800ffb4 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 800fb24:	2000      	movs	r0, #0
 800fb26:	bd08      	pop	{r3, pc}

0800fb28 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800fb28:	b508      	push	{r3, lr}
 800fb2a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800fb2c:	8800      	ldrh	r0, [r0, #0]
 800fb2e:	8859      	ldrh	r1, [r3, #2]
 800fb30:	f7ff fa08 	bl	800ef44 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 800fb34:	2000      	movs	r0, #0
 800fb36:	bd08      	pop	{r3, pc}

0800fb38 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800fb38:	b508      	push	{r3, lr}
 800fb3a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800fb3c:	1cc2      	adds	r2, r0, #3
 800fb3e:	7899      	ldrb	r1, [r3, #2]
 800fb40:	8800      	ldrh	r0, [r0, #0]
 800fb42:	f000 fa59 	bl	800fff8 <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 800fb46:	2000      	movs	r0, #0
 800fb48:	bd08      	pop	{r3, pc}
 800fb4a:	bf00      	nop

0800fb4c <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800fb4c:	b510      	push	{r4, lr}
 800fb4e:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800fb50:	f8b0 000b 	ldrh.w	r0, [r0, #11]
 800fb54:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 800fb58:	f8b1 4007 	ldrh.w	r4, [r1, #7]
 800fb5c:	f8b1 3005 	ldrh.w	r3, [r1, #5]
{
 800fb60:	b084      	sub	sp, #16
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800fb62:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800fb66:	8808      	ldrh	r0, [r1, #0]
 800fb68:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 800fb6c:	7889      	ldrb	r1, [r1, #2]
 800fb6e:	9400      	str	r4, [sp, #0]
 800fb70:	f000 fa44 	bl	800fffc <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 800fb74:	2000      	movs	r0, #0
 800fb76:	b004      	add	sp, #16
 800fb78:	bd10      	pop	{r4, pc}
 800fb7a:	bf00      	nop

0800fb7c <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800fb7c:	b510      	push	{r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800fb7e:	4604      	mov	r4, r0
{
 800fb80:	b082      	sub	sp, #8
 800fb82:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800fb84:	7943      	ldrb	r3, [r0, #5]
 800fb86:	f834 0b06 	ldrh.w	r0, [r4], #6
 800fb8a:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 800fb8e:	7889      	ldrb	r1, [r1, #2]
 800fb90:	9400      	str	r4, [sp, #0]
 800fb92:	f000 fa35 	bl	8010000 <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 800fb96:	2000      	movs	r0, #0
 800fb98:	b002      	add	sp, #8
 800fb9a:	bd10      	pop	{r4, pc}

0800fb9c <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800fb9c:	b510      	push	{r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800fb9e:	4604      	mov	r4, r0
{
 800fba0:	b082      	sub	sp, #8
 800fba2:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800fba4:	88c3      	ldrh	r3, [r0, #6]
 800fba6:	f834 0b08 	ldrh.w	r0, [r4], #8
 800fbaa:	888a      	ldrh	r2, [r1, #4]
 800fbac:	8849      	ldrh	r1, [r1, #2]
 800fbae:	9400      	str	r4, [sp, #0]
 800fbb0:	f7ff f832 	bl	800ec18 <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	b002      	add	sp, #8
 800fbb8:	bd10      	pop	{r4, pc}
 800fbba:	bf00      	nop

0800fbbc <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800fbbc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800fbbe:	8800      	ldrh	r0, [r0, #0]
 800fbc0:	f7ff fa2c 	bl	800f01c <aci_gatt_proc_timeout_event>

  return status;
}
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	bd08      	pop	{r3, pc}

0800fbc8 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800fbc8:	b508      	push	{r3, lr}
 800fbca:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800fbcc:	8800      	ldrh	r0, [r0, #0]
 800fbce:	8859      	ldrh	r1, [r3, #2]
 800fbd0:	f7ff f8f6 	bl	800edc0 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	bd08      	pop	{r3, pc}

0800fbd8 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800fbd8:	b508      	push	{r3, lr}
 800fbda:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800fbdc:	1d03      	adds	r3, r0, #4
 800fbde:	78ca      	ldrb	r2, [r1, #3]
 800fbe0:	8800      	ldrh	r0, [r0, #0]
 800fbe2:	7889      	ldrb	r1, [r1, #2]
 800fbe4:	f000 f9e8 	bl	800ffb8 <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 800fbe8:	2000      	movs	r0, #0
 800fbea:	bd08      	pop	{r3, pc}

0800fbec <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800fbec:	b510      	push	{r4, lr}
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800fbee:	7881      	ldrb	r1, [r0, #2]
{
 800fbf0:	b0c0      	sub	sp, #256	; 0x100
 800fbf2:	aa01      	add	r2, sp, #4
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800fbf4:	b181      	cbz	r1, 800fc18 <aci_att_find_by_type_value_resp_event_process+0x2c>
 800fbf6:	4694      	mov	ip, r2
 800fbf8:	2300      	movs	r3, #0
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800fbfa:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800fbfe:	3301      	adds	r3, #1
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800fc00:	f8be 4003 	ldrh.w	r4, [lr, #3]
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800fc04:	f8be e005 	ldrh.w	lr, [lr, #5]
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800fc08:	f8ac 4000 	strh.w	r4, [ip]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800fc0c:	428b      	cmp	r3, r1
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800fc0e:	f8ac e002 	strh.w	lr, [ip, #2]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800fc12:	f10c 0c04 	add.w	ip, ip, #4
 800fc16:	d1f0      	bne.n	800fbfa <aci_att_find_by_type_value_resp_event_process+0xe>
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800fc18:	8800      	ldrh	r0, [r0, #0]
 800fc1a:	f000 f9cf 	bl	800ffbc <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 800fc1e:	2000      	movs	r0, #0
 800fc20:	b040      	add	sp, #256	; 0x100
 800fc22:	bd10      	pop	{r4, pc}

0800fc24 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800fc24:	b508      	push	{r3, lr}
 800fc26:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800fc28:	1d03      	adds	r3, r0, #4
 800fc2a:	78ca      	ldrb	r2, [r1, #3]
 800fc2c:	8800      	ldrh	r0, [r0, #0]
 800fc2e:	7889      	ldrb	r1, [r1, #2]
 800fc30:	f000 f9c6 	bl	800ffc0 <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 800fc34:	2000      	movs	r0, #0
 800fc36:	bd08      	pop	{r3, pc}

0800fc38 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800fc38:	b508      	push	{r3, lr}
 800fc3a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 800fc3c:	1cc2      	adds	r2, r0, #3
 800fc3e:	7899      	ldrb	r1, [r3, #2]
 800fc40:	8800      	ldrh	r0, [r0, #0]
 800fc42:	f000 f9bf 	bl	800ffc4 <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 800fc46:	2000      	movs	r0, #0
 800fc48:	bd08      	pop	{r3, pc}
 800fc4a:	bf00      	nop

0800fc4c <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800fc4c:	b508      	push	{r3, lr}
 800fc4e:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800fc50:	1cc2      	adds	r2, r0, #3
 800fc52:	7899      	ldrb	r1, [r3, #2]
 800fc54:	8800      	ldrh	r0, [r0, #0]
 800fc56:	f000 f9b7 	bl	800ffc8 <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 800fc5a:	2000      	movs	r0, #0
 800fc5c:	bd08      	pop	{r3, pc}
 800fc5e:	bf00      	nop

0800fc60 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800fc60:	b508      	push	{r3, lr}
 800fc62:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800fc64:	1cc2      	adds	r2, r0, #3
 800fc66:	7899      	ldrb	r1, [r3, #2]
 800fc68:	8800      	ldrh	r0, [r0, #0]
 800fc6a:	f000 f9af 	bl	800ffcc <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 800fc6e:	2000      	movs	r0, #0
 800fc70:	bd08      	pop	{r3, pc}
 800fc72:	bf00      	nop

0800fc74 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800fc74:	b508      	push	{r3, lr}
 800fc76:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800fc78:	1d03      	adds	r3, r0, #4
 800fc7a:	78ca      	ldrb	r2, [r1, #3]
 800fc7c:	8800      	ldrh	r0, [r0, #0]
 800fc7e:	7889      	ldrb	r1, [r1, #2]
 800fc80:	f000 f9a6 	bl	800ffd0 <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 800fc84:	2000      	movs	r0, #0
 800fc86:	bd08      	pop	{r3, pc}

0800fc88 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800fc88:	b510      	push	{r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800fc8a:	4604      	mov	r4, r0
{
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800fc90:	7983      	ldrb	r3, [r0, #6]
 800fc92:	f834 0b07 	ldrh.w	r0, [r4], #7
 800fc96:	888a      	ldrh	r2, [r1, #4]
 800fc98:	8849      	ldrh	r1, [r1, #2]
 800fc9a:	9400      	str	r4, [sp, #0]
 800fc9c:	f000 f99a 	bl	800ffd4 <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 800fca0:	2000      	movs	r0, #0
 800fca2:	b002      	add	sp, #8
 800fca4:	bd10      	pop	{r4, pc}
 800fca6:	bf00      	nop

0800fca8 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800fca8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800fcaa:	8800      	ldrh	r0, [r0, #0]
 800fcac:	f000 f994 	bl	800ffd8 <aci_att_exec_write_resp_event>

  return status;
}
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	bd08      	pop	{r3, pc}

0800fcb4 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800fcb4:	b508      	push	{r3, lr}
 800fcb6:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 800fcb8:	1d43      	adds	r3, r0, #5
 800fcba:	790a      	ldrb	r2, [r1, #4]
 800fcbc:	8800      	ldrh	r0, [r0, #0]
 800fcbe:	8849      	ldrh	r1, [r1, #2]
 800fcc0:	f7ff f95c 	bl	800ef7c <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	bd08      	pop	{r3, pc}

0800fcc8 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800fcc8:	b508      	push	{r3, lr}
 800fcca:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 800fccc:	1d43      	adds	r3, r0, #5
 800fcce:	790a      	ldrb	r2, [r1, #4]
 800fcd0:	8800      	ldrh	r0, [r0, #0]
 800fcd2:	8849      	ldrh	r1, [r1, #2]
 800fcd4:	f000 f982 	bl	800ffdc <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 800fcd8:	2000      	movs	r0, #0
 800fcda:	bd08      	pop	{r3, pc}

0800fcdc <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800fcdc:	b508      	push	{r3, lr}
 800fcde:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800fce0:	8800      	ldrh	r0, [r0, #0]
 800fce2:	7899      	ldrb	r1, [r3, #2]
 800fce4:	f7ff f932 	bl	800ef4c <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 800fce8:	2000      	movs	r0, #0
 800fcea:	bd08      	pop	{r3, pc}

0800fcec <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800fcec:	b508      	push	{r3, lr}
 800fcee:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800fcf0:	8800      	ldrh	r0, [r0, #0]
 800fcf2:	794b      	ldrb	r3, [r1, #5]
 800fcf4:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 800fcf8:	7889      	ldrb	r1, [r1, #2]
 800fcfa:	f000 f971 	bl	800ffe0 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 800fcfe:	2000      	movs	r0, #0
 800fd00:	bd08      	pop	{r3, pc}
 800fd02:	bf00      	nop

0800fd04 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800fd04:	b508      	push	{r3, lr}
 800fd06:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800fd08:	1d43      	adds	r3, r0, #5
 800fd0a:	790a      	ldrb	r2, [r1, #4]
 800fd0c:	8800      	ldrh	r0, [r0, #0]
 800fd0e:	8849      	ldrh	r1, [r1, #2]
 800fd10:	f000 f968 	bl	800ffe4 <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 800fd14:	2000      	movs	r0, #0
 800fd16:	bd08      	pop	{r3, pc}

0800fd18 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800fd18:	b508      	push	{r3, lr}
 800fd1a:	4601      	mov	r1, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800fd1c:	1d43      	adds	r3, r0, #5
 800fd1e:	790a      	ldrb	r2, [r1, #4]
 800fd20:	8800      	ldrh	r0, [r0, #0]
 800fd22:	8849      	ldrh	r1, [r1, #2]
 800fd24:	f000 f960 	bl	800ffe8 <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 800fd28:	2000      	movs	r0, #0
 800fd2a:	bd08      	pop	{r3, pc}

0800fd2c <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800fd2c:	b508      	push	{r3, lr}
 800fd2e:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800fd30:	8800      	ldrh	r0, [r0, #0]
 800fd32:	889a      	ldrh	r2, [r3, #4]
 800fd34:	8859      	ldrh	r1, [r3, #2]
 800fd36:	f7fe ff4b 	bl	800ebd0 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	bd08      	pop	{r3, pc}
 800fd3e:	bf00      	nop

0800fd40 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800fd40:	b530      	push	{r4, r5, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800fd42:	7885      	ldrb	r5, [r0, #2]
{
 800fd44:	b0c1      	sub	sp, #260	; 0x104
 800fd46:	4604      	mov	r4, r0
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800fd48:	466b      	mov	r3, sp
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800fd4a:	b12d      	cbz	r5, 800fd58 <aci_gatt_read_multi_permit_req_event_process+0x18>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800fd4c:	1cc1      	adds	r1, r0, #3
 800fd4e:	006a      	lsls	r2, r5, #1
 800fd50:	4618      	mov	r0, r3
 800fd52:	f00b fda4 	bl	801b89e <memcpy>
 800fd56:	4603      	mov	r3, r0
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800fd58:	8820      	ldrh	r0, [r4, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	f000 f945 	bl	800ffec <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 800fd62:	2000      	movs	r0, #0
 800fd64:	b041      	add	sp, #260	; 0x104
 800fd66:	bd30      	pop	{r4, r5, pc}

0800fd68 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800fd68:	b508      	push	{r3, lr}
 800fd6a:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800fd6c:	8800      	ldrh	r0, [r0, #0]
 800fd6e:	8859      	ldrh	r1, [r3, #2]
 800fd70:	f7fc feee 	bl	800cb50 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 800fd74:	2000      	movs	r0, #0
 800fd76:	bd08      	pop	{r3, pc}

0800fd78 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800fd78:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800fd7a:	8800      	ldrh	r0, [r0, #0]
 800fd7c:	f000 f938 	bl	800fff0 <aci_gatt_server_confirmation_event>

  return status;
}
 800fd80:	2000      	movs	r0, #0
 800fd82:	bd08      	pop	{r3, pc}

0800fd84 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800fd84:	b510      	push	{r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800fd86:	4604      	mov	r4, r0
{
 800fd88:	b082      	sub	sp, #8
 800fd8a:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800fd8c:	7983      	ldrb	r3, [r0, #6]
 800fd8e:	f834 0b07 	ldrh.w	r0, [r4], #7
 800fd92:	888a      	ldrh	r2, [r1, #4]
 800fd94:	8849      	ldrh	r1, [r1, #2]
 800fd96:	9400      	str	r4, [sp, #0]
 800fd98:	f000 f92c 	bl	800fff4 <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	b002      	add	sp, #8
 800fda0:	bd10      	pop	{r4, pc}
 800fda2:	bf00      	nop

0800fda4 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800fda4:	b510      	push	{r4, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 800fda6:	7c42      	ldrb	r2, [r0, #17]
 800fda8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
{
 800fdac:	b086      	sub	sp, #24
 800fdae:	4601      	mov	r1, r0
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800fdb0:	1d44      	adds	r4, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 800fdb2:	f8b0 000d 	ldrh.w	r0, [r0, #13]
 800fdb6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fdba:	f8b1 200b 	ldrh.w	r2, [r1, #11]
 800fdbe:	790b      	ldrb	r3, [r1, #4]
 800fdc0:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800fdc4:	7808      	ldrb	r0, [r1, #0]
 800fdc6:	78ca      	ldrb	r2, [r1, #3]
 800fdc8:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 800fdcc:	9400      	str	r4, [sp, #0]
 800fdce:	f7fe fe81 	bl	800ead4 <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	b006      	add	sp, #24
 800fdd6:	bd10      	pop	{r4, pc}

0800fdd8 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800fdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fddc:	4607      	mov	r7, r0
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fdde:	7800      	ldrb	r0, [r0, #0]
{
 800fde0:	b0bc      	sub	sp, #240	; 0xf0
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fde2:	b348      	cbz	r0, 800fe38 <hci_le_advertising_report_event_process+0x60>
 800fde4:	f10d 0302 	add.w	r3, sp, #2
 800fde8:	f04f 0814 	mov.w	r8, #20
 800fdec:	1cf9      	adds	r1, r7, #3
 800fdee:	fb18 3800 	smlabb	r8, r8, r0, r3
  uint8_t size = 1;
 800fdf2:	2201      	movs	r2, #1
    size += 1;
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
    size += 6;
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800fdf4:	f891 c006 	ldrb.w	ip, [r1, #6]
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800fdf8:	f811 9c02 	ldrb.w	r9, [r1, #-2]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800fdfc:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800fe00:	680e      	ldr	r6, [r1, #0]
 800fe02:	888d      	ldrh	r5, [r1, #4]
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800fe04:	f803 9c02 	strb.w	r9, [r3, #-2]
    size += 1;
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
    size += rp0->Advertising_Report[i].Length_Data;
 800fe08:	f10c 0409 	add.w	r4, ip, #9
 800fe0c:	4422      	add	r2, r4
 800fe0e:	b2d2      	uxtb	r2, r2
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800fe10:	1dcc      	adds	r4, r1, #7
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800fe12:	f817 e002 	ldrb.w	lr, [r7, r2]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800fe16:	f803 ac01 	strb.w	sl, [r3, #-1]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800fe1a:	601e      	str	r6, [r3, #0]
 800fe1c:	809d      	strh	r5, [r3, #4]
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800fe1e:	f883 c006 	strb.w	ip, [r3, #6]
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800fe22:	f8c3 400a 	str.w	r4, [r3, #10]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800fe26:	f883 e00e 	strb.w	lr, [r3, #14]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fe2a:	3314      	adds	r3, #20
    size += 1;
 800fe2c:	3201      	adds	r2, #1
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fe2e:	4543      	cmp	r3, r8
    size += 1;
 800fe30:	b2d2      	uxtb	r2, r2
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fe32:	f101 010b 	add.w	r1, r1, #11
 800fe36:	d1dd      	bne.n	800fdf4 <hci_le_advertising_report_event_process+0x1c>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800fe38:	4669      	mov	r1, sp
 800fe3a:	f000 f8a3 	bl	800ff84 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 800fe3e:	2000      	movs	r0, #0
 800fe40:	b03c      	add	sp, #240	; 0xf0
 800fe42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe46:	bf00      	nop

0800fe48 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800fe48:	b510      	push	{r4, lr}
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	b082      	sub	sp, #8
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 800fe4e:	f8b0 4007 	ldrh.w	r4, [r0, #7]
 800fe52:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 800fe56:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 800fe5a:	7800      	ldrb	r0, [r0, #0]
 800fe5c:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 800fe60:	9400      	str	r4, [sp, #0]
 800fe62:	f7ff f871 	bl	800ef48 <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 800fe66:	2000      	movs	r0, #0
 800fe68:	b002      	add	sp, #8
 800fe6a:	bd10      	pop	{r4, pc}

0800fe6c <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800fe6c:	b508      	push	{r3, lr}
 800fe6e:	4603      	mov	r3, r0
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800fe70:	1cc2      	adds	r2, r0, #3
 800fe72:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800fe76:	7800      	ldrb	r0, [r0, #0]
 800fe78:	f000 f886 	bl	800ff88 <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	bd08      	pop	{r3, pc}

0800fe80 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800fe80:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 800fe82:	4601      	mov	r1, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800fe84:	8942      	ldrh	r2, [r0, #10]
 800fe86:	f831 0b02 	ldrh.w	r0, [r1], #2
 800fe8a:	f000 f87f 	bl	800ff8c <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 800fe8e:	2000      	movs	r0, #0
 800fe90:	bd08      	pop	{r3, pc}
 800fe92:	bf00      	nop

0800fe94 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800fe94:	b510      	push	{r4, lr}
 800fe96:	4601      	mov	r1, r0
 800fe98:	b082      	sub	sp, #8
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800fe9a:	8904      	ldrh	r4, [r0, #8]
 800fe9c:	88cb      	ldrh	r3, [r1, #6]
 800fe9e:	888a      	ldrh	r2, [r1, #4]
 800fea0:	8800      	ldrh	r0, [r0, #0]
 800fea2:	8849      	ldrh	r1, [r1, #2]
 800fea4:	9400      	str	r4, [sp, #0]
 800fea6:	f7ff f867 	bl	800ef78 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 800feaa:	2000      	movs	r0, #0
 800feac:	b002      	add	sp, #8
 800feae:	bd10      	pop	{r4, pc}

0800feb0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800feb0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 800feb2:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800feb4:	f811 0b01 	ldrb.w	r0, [r1], #1
 800feb8:	f000 f86a 	bl	800ff90 <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 800febc:	2000      	movs	r0, #0
 800febe:	bd08      	pop	{r3, pc}

0800fec0 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800fec0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 800fec2:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800fec4:	f811 0b01 	ldrb.w	r0, [r1], #1
 800fec8:	f000 f864 	bl	800ff94 <hci_le_generate_dhkey_complete_event>

  return status;
}
 800fecc:	2000      	movs	r0, #0
 800fece:	bd08      	pop	{r3, pc}

0800fed0 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800fed0:	b510      	push	{r4, lr}
 800fed2:	4601      	mov	r1, r0
 800fed4:	b088      	sub	sp, #32
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800fed6:	7f4a      	ldrb	r2, [r1, #29]
 800fed8:	f8b1 301b 	ldrh.w	r3, [r1, #27]
 800fedc:	f8b1 4019 	ldrh.w	r4, [r1, #25]
 800fee0:	e9cd 3205 	strd	r3, r2, [sp, #20]
 800fee4:	f8b1 3017 	ldrh.w	r3, [r1, #23]
 800fee8:	e9cd 3403 	strd	r3, r4, [sp, #12]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
 800feec:	f101 020b 	add.w	r2, r1, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800fef0:	3011      	adds	r0, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800fef2:	790b      	ldrb	r3, [r1, #4]
 800fef4:	e9cd 2001 	strd	r2, r0, [sp, #4]
                                            rp0->Peer_Address,
 800fef8:	1d4c      	adds	r4, r1, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800fefa:	7808      	ldrb	r0, [r1, #0]
 800fefc:	78ca      	ldrb	r2, [r1, #3]
 800fefe:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 800ff02:	9400      	str	r4, [sp, #0]
 800ff04:	f000 f848 	bl	800ff98 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 800ff08:	2000      	movs	r0, #0
 800ff0a:	b008      	add	sp, #32
 800ff0c:	bd10      	pop	{r4, pc}
 800ff0e:	bf00      	nop

0800ff10 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800ff10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff14:	4603      	mov	r3, r0
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ff16:	7800      	ldrb	r0, [r0, #0]
{
 800ff18:	b0bd      	sub	sp, #244	; 0xf4
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ff1a:	b320      	cbz	r0, 800ff66 <hci_le_direct_advertising_report_event_process+0x56>
 800ff1c:	3303      	adds	r3, #3
 800ff1e:	f10d 0209 	add.w	r2, sp, #9
 800ff22:	eb03 1900 	add.w	r9, r3, r0, lsl #4
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800ff26:	f813 8c02 	ldrb.w	r8, [r3, #-2]
    size += 1;
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800ff2a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800ff2e:	681e      	ldr	r6, [r3, #0]
 800ff30:	889d      	ldrh	r5, [r3, #4]
    size += 6;
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800ff32:	799c      	ldrb	r4, [r3, #6]
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800ff34:	f8d3 e007 	ldr.w	lr, [r3, #7]
 800ff38:	f8b3 c00b 	ldrh.w	ip, [r3, #11]
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800ff3c:	7b59      	ldrb	r1, [r3, #13]
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800ff3e:	f802 8c09 	strb.w	r8, [r2, #-9]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ff42:	3310      	adds	r3, #16
 800ff44:	454b      	cmp	r3, r9
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800ff46:	f802 7c08 	strb.w	r7, [r2, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800ff4a:	f842 6c07 	str.w	r6, [r2, #-7]
 800ff4e:	f822 5c03 	strh.w	r5, [r2, #-3]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800ff52:	f802 4c01 	strb.w	r4, [r2, #-1]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800ff56:	f8c2 e000 	str.w	lr, [r2]
 800ff5a:	f8a2 c004 	strh.w	ip, [r2, #4]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800ff5e:	7191      	strb	r1, [r2, #6]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ff60:	f102 0210 	add.w	r2, r2, #16
 800ff64:	d1df      	bne.n	800ff26 <hci_le_direct_advertising_report_event_process+0x16>
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800ff66:	4669      	mov	r1, sp
 800ff68:	f000 f818 	bl	800ff9c <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	b03d      	add	sp, #244	; 0xf4
 800ff70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ff74 <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop

0800ff78 <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop

0800ff7c <hci_data_buffer_overflow_event>:
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop

0800ff80 <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop

0800ff84 <hci_le_advertising_report_event>:
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop

0800ff88 <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop

0800ff8c <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop

0800ff90 <hci_le_read_local_p256_public_key_complete_event>:
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop

0800ff94 <hci_le_generate_dhkey_complete_event>:
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop

0800ff98 <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop

0800ff9c <hci_le_direct_advertising_report_event>:
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop

0800ffa0 <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop

0800ffa4 <aci_gap_authorization_req_event>:
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop

0800ffa8 <aci_gap_slave_security_initiated_event>:
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop

0800ffac <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop

0800ffb0 <aci_gap_addr_not_resolved_event>:
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop

0800ffb4 <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop

0800ffb8 <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop

0800ffbc <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop

0800ffc0 <aci_att_read_by_type_resp_event>:
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop

0800ffc4 <aci_att_read_resp_event>:
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop

0800ffc8 <aci_att_read_blob_resp_event>:
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop

0800ffcc <aci_att_read_multiple_resp_event>:
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop

0800ffd0 <aci_att_read_by_group_type_resp_event>:
 800ffd0:	4770      	bx	lr
 800ffd2:	bf00      	nop

0800ffd4 <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop

0800ffd8 <aci_att_exec_write_resp_event>:
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop

0800ffdc <aci_gatt_notification_event>:
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop

0800ffe0 <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop

0800ffe4 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop

0800ffe8 <aci_gatt_write_permit_req_event>:
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop

0800ffec <aci_gatt_read_multi_permit_req_event>:
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop

0800fff0 <aci_gatt_server_confirmation_event>:
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop

0800fff4 <aci_gatt_prepare_write_permit_req_event>:
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop

0800fff8 <aci_l2cap_proc_timeout_event>:
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop

0800fffc <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop

08010000 <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop

08010004 <aci_blue_initialized_event>:
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop

08010008 <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop

0801000c <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop

08010010 <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop

08010014 <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop

08010018 <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop

0801001c <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 801001c:	b500      	push	{lr}
  struct hci_request rq;
  tBleStatus status = 0;
 801001e:	2100      	movs	r1, #0
{
 8010020:	b089      	sub	sp, #36	; 0x24
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x03;
 8010022:	f04f 1003 	mov.w	r0, #196611	; 0x30003
 8010026:	e9cd 0102 	strd	r0, r1, [sp, #8]
  rq.ocf = 0x003;
  rq.rparam = &status;
 801002a:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 801002e:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010030:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8010032:	e9cd 1104 	strd	r1, r1, [sp, #16]
  tBleStatus status = 0;
 8010036:	f88d 1007 	strb.w	r1, [sp, #7]
  rq.rparam = &status;
 801003a:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 801003c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 801003e:	f000 f8ff 	bl	8010240 <hci_send_req>
 8010042:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8010044:	bfac      	ite	ge
 8010046:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 801004a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 801004c:	b009      	add	sp, #36	; 0x24
 801004e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010052:	bf00      	nop

08010054 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 8010054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010058:	b08a      	sub	sp, #40	; 0x28
 801005a:	461d      	mov	r5, r3
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x04;
 801005c:	4b1a      	ldr	r3, [pc, #104]	; (80100c8 <hci_read_local_version_information+0x74>)
 801005e:	9304      	str	r3, [sp, #16]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8010060:	ac01      	add	r4, sp, #4
  rq.ocf = 0x001;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8010062:	2309      	movs	r3, #9
{
 8010064:	4680      	mov	r8, r0
 8010066:	460f      	mov	r7, r1
  if (hci_send_req(&rq, FALSE) < 0)
 8010068:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 801006a:	2100      	movs	r1, #0
 801006c:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8010070:	e9cd 1105 	strd	r1, r1, [sp, #20]
{
 8010074:	4616      	mov	r6, r2
  rq.rparam = &resp;
 8010076:	9408      	str	r4, [sp, #32]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8010078:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 801007c:	9107      	str	r1, [sp, #28]
  rq.rlen = sizeof(resp);
 801007e:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8010080:	f000 f8de 	bl	8010240 <hci_send_req>
 8010084:	2800      	cmp	r0, #0
 8010086:	db1b      	blt.n	80100c0 <hci_read_local_version_information+0x6c>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 8010088:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801008c:	b9a8      	cbnz	r0, 80100ba <hci_read_local_version_information+0x66>
    return resp.Status;
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 801008e:	9b02      	ldr	r3, [sp, #8]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 8010090:	f89d 100c 	ldrb.w	r1, [sp, #12]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 8010094:	f3c3 220f 	ubfx	r2, r3, #8, #16
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 8010098:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801009c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  *HCI_Version = btoh(resp.HCI_Version, 1);
 80100a0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80100a4:	f888 1000 	strb.w	r1, [r8]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 80100a8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80100ac:	8039      	strh	r1, [r7, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 80100ae:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80100b2:	7031      	strb	r1, [r6, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 80100b4:	802a      	strh	r2, [r5, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 80100b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80100b8:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 80100ba:	b00a      	add	sp, #40	; 0x28
 80100bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 80100c0:	20ff      	movs	r0, #255	; 0xff
}
 80100c2:	b00a      	add	sp, #40	; 0x28
 80100c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c8:	00010004 	.word	0x00010004

080100cc <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 80100cc:	b510      	push	{r4, lr}
 80100ce:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80100d0:	f10d 0403 	add.w	r4, sp, #3
 80100d4:	2200      	movs	r2, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80100d6:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 80100d8:	7022      	strb	r2, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80100da:	7018      	strb	r0, [r3, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 80100dc:	b1d1      	cbz	r1, 8010114 <hci_le_set_scan_response_data+0x48>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 80100de:	680a      	ldr	r2, [r1, #0]
 80100e0:	f8cd 201d 	str.w	r2, [sp, #29]
 80100e4:	690a      	ldr	r2, [r1, #16]
 80100e6:	f8cd 202d 	str.w	r2, [sp, #45]	; 0x2d
 80100ea:	8b8a      	ldrh	r2, [r1, #28]
 80100ec:	f8ad 2039 	strh.w	r2, [sp, #57]	; 0x39
 80100f0:	684a      	ldr	r2, [r1, #4]
 80100f2:	f8cd 2021 	str.w	r2, [sp, #33]	; 0x21
 80100f6:	688a      	ldr	r2, [r1, #8]
 80100f8:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
 80100fc:	68ca      	ldr	r2, [r1, #12]
 80100fe:	f8cd 2029 	str.w	r2, [sp, #41]	; 0x29
 8010102:	694a      	ldr	r2, [r1, #20]
 8010104:	f8cd 2031 	str.w	r2, [sp, #49]	; 0x31
 8010108:	698a      	ldr	r2, [r1, #24]
 801010a:	7f89      	ldrb	r1, [r1, #30]
 801010c:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 8010110:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 8010114:	9303      	str	r3, [sp, #12]
  rq.clen = index_input;
 8010116:	2320      	movs	r3, #32
  rq.ogf = 0x08;
 8010118:	4a08      	ldr	r2, [pc, #32]	; (801013c <hci_le_set_scan_response_data+0x70>)
  rq.clen = index_input;
 801011a:	9304      	str	r3, [sp, #16]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 801011c:	2100      	movs	r1, #0
  rq.rparam = &status;
  rq.rlen = 1;
 801011e:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010120:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8010122:	e9cd 4305 	strd	r4, r3, [sp, #20]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8010126:	9102      	str	r1, [sp, #8]
  rq.ogf = 0x08;
 8010128:	9201      	str	r2, [sp, #4]
  if (hci_send_req(&rq, FALSE) < 0)
 801012a:	f000 f889 	bl	8010240 <hci_send_req>
 801012e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8010130:	bfac      	ite	ge
 8010132:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8010134:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8010136:	b048      	add	sp, #288	; 0x120
 8010138:	bd10      	pop	{r4, pc}
 801013a:	bf00      	nop
 801013c:	00090008 	.word	0x00090008

08010140 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 8010140:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 8010142:	4d11      	ldr	r5, [pc, #68]	; (8010188 <hci_le_rand+0x48>)
{
 8010144:	b08b      	sub	sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8010146:	2100      	movs	r1, #0
 8010148:	ab01      	add	r3, sp, #4
  rq.ocf = 0x018;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 801014a:	2209      	movs	r2, #9
{
 801014c:	4604      	mov	r4, r0
  if (hci_send_req(&rq, FALSE) < 0)
 801014e:	a804      	add	r0, sp, #16
  rq.ogf = 0x08;
 8010150:	e9cd 5104 	strd	r5, r1, [sp, #16]
  rq.rlen = sizeof(resp);
 8010154:	e9cd 3208 	strd	r3, r2, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8010158:	e9cd 1106 	strd	r1, r1, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 801015c:	9101      	str	r1, [sp, #4]
 801015e:	9102      	str	r1, [sp, #8]
 8010160:	f88d 100c 	strb.w	r1, [sp, #12]
  if (hci_send_req(&rq, FALSE) < 0)
 8010164:	f000 f86c 	bl	8010240 <hci_send_req>
 8010168:	2800      	cmp	r0, #0
 801016a:	db0a      	blt.n	8010182 <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 801016c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8010170:	b928      	cbnz	r0, 801017e <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8010172:	f8dd 2005 	ldr.w	r2, [sp, #5]
 8010176:	f8dd 3009 	ldr.w	r3, [sp, #9]
 801017a:	6022      	str	r2, [r4, #0]
 801017c:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 801017e:	b00b      	add	sp, #44	; 0x2c
 8010180:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 8010182:	20ff      	movs	r0, #255	; 0xff
}
 8010184:	b00b      	add	sp, #44	; 0x2c
 8010186:	bd30      	pop	{r4, r5, pc}
 8010188:	00180008 	.word	0x00180008

0801018c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 801018c:	b510      	push	{r4, lr}
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 801018e:	f3c1 0c09 	ubfx	ip, r1, #0, #10
{
 8010192:	b0c0      	sub	sp, #256	; 0x100
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8010194:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
  hc.plen = plen;

  payload[0] = HCI_COMMAND_PKT;
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8010198:	4619      	mov	r1, r3
 801019a:	a801      	add	r0, sp, #4
  payload[0] = HCI_COMMAND_PKT;
 801019c:	2301      	movs	r3, #1
 801019e:	f88d 3000 	strb.w	r3, [sp]
{
 80101a2:	4614      	mov	r4, r2
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80101a4:	f8ad c001 	strh.w	ip, [sp, #1]
 80101a8:	f88d 2003 	strb.w	r2, [sp, #3]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80101ac:	f00b fb77 	bl	801b89e <memcpy>
  
  if (hciContext.io.Send)
 80101b0:	4b03      	ldr	r3, [pc, #12]	; (80101c0 <send_cmd+0x34>)
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	b113      	cbz	r3, 80101bc <send_cmd+0x30>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80101b6:	1d21      	adds	r1, r4, #4
 80101b8:	4668      	mov	r0, sp
 80101ba:	4798      	blx	r3
  }
}
 80101bc:	b040      	add	sp, #256	; 0x100
 80101be:	bd10      	pop	{r4, pc}
 80101c0:	200023ec 	.word	0x200023ec

080101c4 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
  {
    hciContext.UserEvtRx = UserEvtRx;
 80101c8:	4f11      	ldr	r7, [pc, #68]	; (8010210 <hci_init+0x4c>)
  if(UserEvtRx != NULL)
 80101ca:	b100      	cbz	r0, 80101ce <hci_init+0xa>
    hciContext.UserEvtRx = UserEvtRx;
 80101cc:	61f8      	str	r0, [r7, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80101ce:	4811      	ldr	r0, [pc, #68]	; (8010214 <hci_init+0x50>)
 80101d0:	f000 f966 	bl	80104a0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80101d4:	4810      	ldr	r0, [pc, #64]	; (8010218 <hci_init+0x54>)
 80101d6:	f100 0408 	add.w	r4, r0, #8
 80101da:	f000 f961 	bl	80104a0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80101de:	f7f3 fa15 	bl	800360c <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80101e2:	f604 0634 	addw	r6, r4, #2100	; 0x834
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80101e6:	f1a4 0510 	sub.w	r5, r4, #16
 80101ea:	4621      	mov	r1, r4
 80101ec:	4628      	mov	r0, r5
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80101ee:	348c      	adds	r4, #140	; 0x8c
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80101f0:	f000 f972 	bl	80104d8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80101f4:	42b4      	cmp	r4, r6
 80101f6:	d1f8      	bne.n	80101ea <hci_init+0x26>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	b10b      	cbz	r3, 8010200 <hci_init+0x3c>
 80101fc:	2000      	movs	r0, #0
 80101fe:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	b113      	cbz	r3, 801020a <hci_init+0x46>
}
 8010204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8010208:	4718      	bx	r3
}
 801020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020e:	bf00      	nop
 8010210:	200023ec 	.word	0x200023ec
 8010214:	2000240c 	.word	0x2000240c
 8010218:	20002414 	.word	0x20002414

0801021c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 801021c:	b410      	push	{r4}
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
  hciContext.io.Receive = fops->Receive;  
  hciContext.io.Send    = fops->Send;
 801021e:	e9d0 2403 	ldrd	r2, r4, [r0, #12]
  hciContext.io.Init    = fops->Init; 
 8010222:	4b06      	ldr	r3, [pc, #24]	; (801023c <hci_register_io_bus+0x20>)
 8010224:	6801      	ldr	r1, [r0, #0]
 8010226:	6019      	str	r1, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8010228:	60da      	str	r2, [r3, #12]
  hciContext.io.GetTick = fops->GetTick;
 801022a:	6981      	ldr	r1, [r0, #24]
  hciContext.io.Reset   = fops->Reset;
 801022c:	6882      	ldr	r2, [r0, #8]
  hciContext.io.Send    = fops->Send;
 801022e:	611c      	str	r4, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8010230:	6199      	str	r1, [r3, #24]
}
 8010232:	f85d 4b04 	ldr.w	r4, [sp], #4
  hciContext.io.Reset   = fops->Reset;
 8010236:	609a      	str	r2, [r3, #8]
}
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	200023ec 	.word	0x200023ec

08010240 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8010240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010244:	4606      	mov	r6, r0
 8010246:	b085      	sub	sp, #20
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8010248:	4c63      	ldr	r4, [pc, #396]	; (80103d8 <hci_send_req+0x198>)
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 801024a:	8847      	ldrh	r7, [r0, #2]
 801024c:	f8b6 8000 	ldrh.w	r8, [r6]
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8010250:	2300      	movs	r3, #0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8010252:	a802      	add	r0, sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8010254:	9300      	str	r3, [sp, #0]
{
 8010256:	4689      	mov	r9, r1
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8010258:	f104 0508 	add.w	r5, r4, #8
  list_init_head(&hciTempQueue);
 801025c:	f000 f920 	bl	80104a0 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8010260:	e005      	b.n	801026e <hci_send_req+0x2e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8010262:	f000 f945 	bl	80104f0 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8010266:	9901      	ldr	r1, [sp, #4]
 8010268:	4620      	mov	r0, r4
 801026a:	f000 f935 	bl	80104d8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 801026e:	4620      	mov	r0, r4
 8010270:	f000 f96a 	bl	8010548 <list_get_size>
 8010274:	4603      	mov	r3, r0
 8010276:	2b06      	cmp	r3, #6
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8010278:	a901      	add	r1, sp, #4
 801027a:	4628      	mov	r0, r5
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 801027c:	ddf1      	ble.n	8010262 <hci_send_req+0x22>

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 801027e:	68b3      	ldr	r3, [r6, #8]
 8010280:	7b32      	ldrb	r2, [r6, #12]
 8010282:	8871      	ldrh	r1, [r6, #2]
 8010284:	8830      	ldrh	r0, [r6, #0]
 8010286:	f7ff ff81 	bl	801018c <send_cmd>
  
  if (async)
 801028a:	f1b9 0f00 	cmp.w	r9, #0
 801028e:	f040 808f 	bne.w	80103b0 <hci_send_req+0x170>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8010292:	4d52      	ldr	r5, [pc, #328]	; (80103dc <hci_send_req+0x19c>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8010294:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8010298:	ea47 2788 	orr.w	r7, r7, r8, lsl #10
 801029c:	b2bf      	uxth	r7, r7
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 801029e:	f1a5 0808 	sub.w	r8, r5, #8
    uint32_t tickstart = HAL_GetTick();
 80102a2:	f7f5 fedd 	bl	8006060 <HAL_GetTick>
 80102a6:	4604      	mov	r4, r0
 80102a8:	e002      	b.n	80102b0 <hci_send_req+0x70>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80102aa:	f000 f8fd 	bl	80104a8 <list_is_empty>
 80102ae:	b1f0      	cbz	r0, 80102ee <hci_send_req+0xae>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80102b0:	f7f5 fed6 	bl	8006060 <HAL_GetTick>
 80102b4:	1b03      	subs	r3, r0, r4
 80102b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80102ba:	4628      	mov	r0, r5
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80102bc:	d9f5      	bls.n	80102aa <hci_send_req+0x6a>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80102be:	9900      	ldr	r1, [sp, #0]
 80102c0:	2900      	cmp	r1, #0
 80102c2:	d142      	bne.n	801034a <hci_send_req+0x10a>
    list_insert_head(dest_list, tmp_node);
 80102c4:	4c45      	ldr	r4, [pc, #276]	; (80103dc <hci_send_req+0x19c>)
 80102c6:	e005      	b.n	80102d4 <hci_send_req+0x94>
    list_remove_tail(src_list, &tmp_node);
 80102c8:	f000 f928 	bl	801051c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80102cc:	9901      	ldr	r1, [sp, #4]
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 f8f6 	bl	80104c0 <list_insert_head>
  while (!list_is_empty(src_list))
 80102d4:	a802      	add	r0, sp, #8
 80102d6:	f000 f8e7 	bl	80104a8 <list_is_empty>
 80102da:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 80102dc:	a901      	add	r1, sp, #4
 80102de:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d0f1      	beq.n	80102c8 <hci_send_req+0x88>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return -1;
 80102e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 80102e8:	b005      	add	sp, #20
 80102ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80102ee:	4669      	mov	r1, sp
 80102f0:	4628      	mov	r0, r5
 80102f2:	f000 f8fd 	bl	80104f0 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80102f6:	9900      	ldr	r1, [sp, #0]
    if (hci_hdr->type == HCI_EVENT_PKT)
 80102f8:	7a0b      	ldrb	r3, [r1, #8]
 80102fa:	2b04      	cmp	r3, #4
 80102fc:	d112      	bne.n	8010324 <hci_send_req+0xe4>
      switch (event_pckt->evt) 
 80102fe:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8010300:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8010304:	2b10      	cmp	r3, #16
 8010306:	d020      	beq.n	801034a <hci_send_req+0x10a>
 8010308:	d823      	bhi.n	8010352 <hci_send_req+0x112>
 801030a:	2b0e      	cmp	r3, #14
 801030c:	d01a      	beq.n	8010344 <hci_send_req+0x104>
 801030e:	2b0f      	cmp	r3, #15
 8010310:	d108      	bne.n	8010324 <hci_send_req+0xe4>
        if (cs->opcode != opcode)
 8010312:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8010316:	42bb      	cmp	r3, r7
 8010318:	d117      	bne.n	801034a <hci_send_req+0x10a>
        if (r->event != EVT_CMD_STATUS) {
 801031a:	6873      	ldr	r3, [r6, #4]
 801031c:	2b0f      	cmp	r3, #15
 801031e:	d050      	beq.n	80103c2 <hci_send_req+0x182>
          if (cs->status) {
 8010320:	7acb      	ldrb	r3, [r1, #11]
 8010322:	b993      	cbnz	r3, 801034a <hci_send_req+0x10a>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8010324:	4640      	mov	r0, r8
 8010326:	f000 f8bf 	bl	80104a8 <list_is_empty>
 801032a:	b120      	cbz	r0, 8010336 <hci_send_req+0xf6>
 801032c:	4628      	mov	r0, r5
 801032e:	f000 f8bb 	bl	80104a8 <list_is_empty>
 8010332:	2800      	cmp	r0, #0
 8010334:	d140      	bne.n	80103b8 <hci_send_req+0x178>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8010336:	9900      	ldr	r1, [sp, #0]
 8010338:	a802      	add	r0, sp, #8
 801033a:	f000 f8cd 	bl	80104d8 <list_insert_tail>
      hciReadPacket=NULL;
 801033e:	2300      	movs	r3, #0
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	e7ae      	b.n	80102a2 <hci_send_req+0x62>
        if (cc->opcode != opcode)
 8010344:	898b      	ldrh	r3, [r1, #12]
 8010346:	42bb      	cmp	r3, r7
 8010348:	d014      	beq.n	8010374 <hci_send_req+0x134>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 801034a:	4823      	ldr	r0, [pc, #140]	; (80103d8 <hci_send_req+0x198>)
 801034c:	f000 f8b8 	bl	80104c0 <list_insert_head>
 8010350:	e7b8      	b.n	80102c4 <hci_send_req+0x84>
      switch (event_pckt->evt) 
 8010352:	2b3e      	cmp	r3, #62	; 0x3e
 8010354:	d1e6      	bne.n	8010324 <hci_send_req+0xe4>
        if (me->subevent != r->event)
 8010356:	7aca      	ldrb	r2, [r1, #11]
 8010358:	6873      	ldr	r3, [r6, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	d1e2      	bne.n	8010324 <hci_send_req+0xe4>
        r->rlen = MIN(len, r->rlen);
 801035e:	6973      	ldr	r3, [r6, #20]
        len -= 1;
 8010360:	1f02      	subs	r2, r0, #4
        r->rlen = MIN(len, r->rlen);
 8010362:	429a      	cmp	r2, r3
 8010364:	bf28      	it	cs
 8010366:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8010368:	6930      	ldr	r0, [r6, #16]
        r->rlen = MIN(len, r->rlen);
 801036a:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 801036c:	310c      	adds	r1, #12
 801036e:	f00b fa96 	bl	801b89e <memcpy>
        goto done;
 8010372:	e009      	b.n	8010388 <hci_send_req+0x148>
        r->rlen = MIN(len, r->rlen);
 8010374:	6973      	ldr	r3, [r6, #20]
        len -= EVT_CMD_COMPLETE_SIZE;
 8010376:	1f82      	subs	r2, r0, #6
        r->rlen = MIN(len, r->rlen);
 8010378:	429a      	cmp	r2, r3
 801037a:	bf28      	it	cs
 801037c:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 801037e:	6930      	ldr	r0, [r6, #16]
        r->rlen = MIN(len, r->rlen);
 8010380:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8010382:	310e      	adds	r1, #14
 8010384:	f00b fa8b 	bl	801b89e <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8010388:	9900      	ldr	r1, [sp, #0]
 801038a:	4813      	ldr	r0, [pc, #76]	; (80103d8 <hci_send_req+0x198>)
    list_insert_head(dest_list, tmp_node);
 801038c:	4c13      	ldr	r4, [pc, #76]	; (80103dc <hci_send_req+0x19c>)
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 801038e:	f000 f897 	bl	80104c0 <list_insert_head>
static void move_list(tListNode * dest_list, tListNode * src_list)
 8010392:	e005      	b.n	80103a0 <hci_send_req+0x160>
    list_remove_tail(src_list, &tmp_node);
 8010394:	f000 f8c2 	bl	801051c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8010398:	9901      	ldr	r1, [sp, #4]
 801039a:	4620      	mov	r0, r4
 801039c:	f000 f890 	bl	80104c0 <list_insert_head>
  while (!list_is_empty(src_list))
 80103a0:	a802      	add	r0, sp, #8
 80103a2:	f000 f881 	bl	80104a8 <list_is_empty>
 80103a6:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 80103a8:	a901      	add	r1, sp, #4
 80103aa:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d0f1      	beq.n	8010394 <hci_send_req+0x154>
    return 0;
 80103b0:	2000      	movs	r0, #0
}
 80103b2:	b005      	add	sp, #20
 80103b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80103b8:	9900      	ldr	r1, [sp, #0]
 80103ba:	4640      	mov	r0, r8
 80103bc:	f000 f88c 	bl	80104d8 <list_insert_tail>
      hciReadPacket=NULL;
 80103c0:	e7bd      	b.n	801033e <hci_send_req+0xfe>
        r->rlen = MIN(len, r->rlen);
 80103c2:	6973      	ldr	r3, [r6, #20]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80103c4:	1ec2      	subs	r2, r0, #3
        r->rlen = MIN(len, r->rlen);
 80103c6:	429a      	cmp	r2, r3
 80103c8:	bf28      	it	cs
 80103ca:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80103cc:	6930      	ldr	r0, [r6, #16]
        r->rlen = MIN(len, r->rlen);
 80103ce:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80103d0:	310b      	adds	r1, #11
 80103d2:	f00b fa64 	bl	801b89e <memcpy>
        goto done;
 80103d6:	e7d7      	b.n	8010388 <hci_send_req+0x148>
 80103d8:	2000240c 	.word	0x2000240c
 80103dc:	20002414 	.word	0x20002414

080103e0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80103e0:	b570      	push	{r4, r5, r6, lr}
 80103e2:	4d0f      	ldr	r5, [pc, #60]	; (8010420 <hci_user_evt_proc+0x40>)
 80103e4:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80103ea:	f105 0428 	add.w	r4, r5, #40	; 0x28
    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80103ee:	f105 0620 	add.w	r6, r5, #32
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80103f2:	e00a      	b.n	801040a <hci_user_evt_proc+0x2a>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80103f4:	f000 f87c 	bl	80104f0 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 80103f8:	69eb      	ldr	r3, [r5, #28]
 80103fa:	b113      	cbz	r3, 8010402 <hci_user_evt_proc+0x22>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80103fc:	9801      	ldr	r0, [sp, #4]
 80103fe:	3008      	adds	r0, #8
 8010400:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8010402:	9901      	ldr	r1, [sp, #4]
 8010404:	4630      	mov	r0, r6
 8010406:	f000 f867 	bl	80104d8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 801040a:	4620      	mov	r0, r4
 801040c:	f000 f84c 	bl	80104a8 <list_is_empty>
 8010410:	4603      	mov	r3, r0
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8010412:	a901      	add	r1, sp, #4
 8010414:	4620      	mov	r0, r4
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8010416:	2b00      	cmp	r3, #0
 8010418:	d0ec      	beq.n	80103f4 <hci_user_evt_proc+0x14>
  }
}
 801041a:	b002      	add	sp, #8
 801041c:	bd70      	pop	{r4, r5, r6, pc}
 801041e:	bf00      	nop
 8010420:	200023ec 	.word	0x200023ec

08010424 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8010424:	b570      	push	{r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8010426:	4e1c      	ldr	r6, [pc, #112]	; (8010498 <hci_notify_asynch_evt+0x74>)
{
 8010428:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 801042a:	2300      	movs	r3, #0
  if (list_is_empty (&hciReadPktPool) == FALSE)
 801042c:	f106 0020 	add.w	r0, r6, #32
  tHciDataPacket * hciReadPacket = NULL;
 8010430:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8010432:	f000 f839 	bl	80104a8 <list_is_empty>
 8010436:	b110      	cbz	r0, 801043e <hci_notify_asynch_evt+0x1a>
      }
    }
  }
  else 
  {
    ret = 1;
 8010438:	2001      	movs	r0, #1
  }
  return ret;
  
}
 801043a:	b002      	add	sp, #8
 801043c:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 801043e:	4605      	mov	r5, r0
 8010440:	a901      	add	r1, sp, #4
 8010442:	f106 0020 	add.w	r0, r6, #32
 8010446:	f000 f853 	bl	80104f0 <list_remove_head>
    if (hciContext.io.Receive)
 801044a:	68f3      	ldr	r3, [r6, #12]
 801044c:	b313      	cbz	r3, 8010494 <hci_notify_asynch_evt+0x70>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 801044e:	9801      	ldr	r0, [sp, #4]
 8010450:	2180      	movs	r1, #128	; 0x80
 8010452:	3008      	adds	r0, #8
 8010454:	4798      	blx	r3
      if (data_len > 0)
 8010456:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
        hciReadPacket->data_len = data_len;
 801045a:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 801045c:	d00e      	beq.n	801047c <hci_notify_asynch_evt+0x58>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 801045e:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8010460:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8010464:	2b04      	cmp	r3, #4
 8010466:	d10f      	bne.n	8010488 <hci_notify_asynch_evt+0x64>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8010468:	7a8b      	ldrb	r3, [r1, #10]
 801046a:	3c03      	subs	r4, #3
 801046c:	42a3      	cmp	r3, r4
 801046e:	d10b      	bne.n	8010488 <hci_notify_asynch_evt+0x64>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8010470:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8010474:	f000 f830 	bl	80104d8 <list_insert_tail>
  int32_t ret = 0;
 8010478:	4628      	mov	r0, r5
 801047a:	e7de      	b.n	801043a <hci_notify_asynch_evt+0x16>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 801047c:	f106 0020 	add.w	r0, r6, #32
 8010480:	f000 f81e 	bl	80104c0 <list_insert_head>
  int32_t ret = 0;
 8010484:	4620      	mov	r0, r4
 8010486:	e7d8      	b.n	801043a <hci_notify_asynch_evt+0x16>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8010488:	4804      	ldr	r0, [pc, #16]	; (801049c <hci_notify_asynch_evt+0x78>)
 801048a:	f000 f819 	bl	80104c0 <list_insert_head>
  int32_t ret = 0;
 801048e:	2000      	movs	r0, #0
}
 8010490:	b002      	add	sp, #8
 8010492:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = 0;
 8010494:	4618      	mov	r0, r3
  return ret;
 8010496:	e7d0      	b.n	801043a <hci_notify_asynch_evt+0x16>
 8010498:	200023ec 	.word	0x200023ec
 801049c:	2000240c 	.word	0x2000240c

080104a0 <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 80104a0:	e9c0 0000 	strd	r0, r0, [r0]
}
 80104a4:	4770      	bx	lr
 80104a6:	bf00      	nop

080104a8 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104a8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104ac:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80104ae:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 80104b0:	1a18      	subs	r0, r3, r0
 80104b2:	fab0 f080 	clz	r0, r0
 80104b6:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104b8:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop

080104c0 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104c0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104c4:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80104c6:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 80104c8:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 80104cc:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 80104ce:	680a      	ldr	r2, [r1, #0]
 80104d0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104d2:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80104d6:	4770      	bx	lr

080104d8 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104d8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104dc:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 80104de:	6842      	ldr	r2, [r0, #4]
  node->next = listHead;
 80104e0:	e9c1 0200 	strd	r0, r2, [r1]
  listHead->prev = node;
 80104e4:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 80104e6:	684a      	ldr	r2, [r1, #4]
 80104e8:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104ea:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80104ee:	4770      	bx	lr

080104f0 <list_remove_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104f4:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80104f6:	6803      	ldr	r3, [r0, #0]
 80104f8:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104fe:	b672      	cpsid	i
  (node->prev)->next = node->next;
 8010500:	e9d3 3200 	ldrd	r3, r2, [r3]
 8010504:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8010506:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010508:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->next);
  (*node)->next = NULL;
 801050c:	680a      	ldr	r2, [r1, #0]
 801050e:	2300      	movs	r3, #0
 8010510:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8010512:	680a      	ldr	r2, [r1, #0]
 8010514:	6053      	str	r3, [r2, #4]
 8010516:	f38c 8810 	msr	PRIMASK, ip
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 801051a:	4770      	bx	lr

0801051c <list_remove_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801051c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010520:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8010522:	6843      	ldr	r3, [r0, #4]
 8010524:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010526:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801052a:	b672      	cpsid	i
  (node->prev)->next = node->next;
 801052c:	e9d3 3200 	ldrd	r3, r2, [r3]
 8010530:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8010532:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010534:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->prev);
  (*node)->next = NULL;
 8010538:	680a      	ldr	r2, [r1, #0]
 801053a:	2300      	movs	r3, #0
 801053c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 801053e:	680a      	ldr	r2, [r1, #0]
 8010540:	6053      	str	r3, [r2, #4]
 8010542:	f38c 8810 	msr	PRIMASK, ip
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8010546:	4770      	bx	lr

08010548 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010548:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801054c:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 801054e:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 8010550:	4298      	cmp	r0, r3
  int size = 0;
 8010552:	f04f 0200 	mov.w	r2, #0
  while (temp != listHead)
 8010556:	d004      	beq.n	8010562 <list_get_size+0x1a>
  {
    size++;
    temp = temp->next;		
 8010558:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 801055a:	4298      	cmp	r0, r3
    size++;
 801055c:	f102 0201 	add.w	r2, r2, #1
  while (temp != listHead)
 8010560:	d1fa      	bne.n	8010558 <list_get_size+0x10>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010562:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8010566:	4610      	mov	r0, r2
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop

0801056c <json_array_resize>:
    return JSONSuccess;
}

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
    JSON_Value **new_items = NULL;
    if (new_capacity == 0) {
 801056c:	b1d9      	cbz	r1, 80105a6 <json_array_resize+0x3a>
static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801056e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return JSONFailure;
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8010570:	4f0e      	ldr	r7, [pc, #56]	; (80105ac <json_array_resize+0x40>)
 8010572:	4604      	mov	r4, r0
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	0088      	lsls	r0, r1, #2
 8010578:	460d      	mov	r5, r1
 801057a:	4798      	blx	r3
    if (new_items == NULL) {
 801057c:	4606      	mov	r6, r0
 801057e:	b178      	cbz	r0, 80105a0 <json_array_resize+0x34>
        return JSONFailure;
    }
    if (array->items != NULL && array->count > 0) {
 8010580:	6861      	ldr	r1, [r4, #4]
 8010582:	b109      	cbz	r1, 8010588 <json_array_resize+0x1c>
 8010584:	68a2      	ldr	r2, [r4, #8]
 8010586:	b932      	cbnz	r2, 8010596 <json_array_resize+0x2a>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
    }
    parson_free(array->items);
 8010588:	4608      	mov	r0, r1
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4798      	blx	r3
    array->items = new_items;
 801058e:	6066      	str	r6, [r4, #4]
    array->capacity = new_capacity;
 8010590:	60e5      	str	r5, [r4, #12]
    return JSONSuccess;
 8010592:	2000      	movs	r0, #0
}
 8010594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 8010596:	0092      	lsls	r2, r2, #2
 8010598:	f00b f981 	bl	801b89e <memcpy>
    parson_free(array->items);
 801059c:	6861      	ldr	r1, [r4, #4]
 801059e:	e7f3      	b.n	8010588 <json_array_resize+0x1c>
        return JSONFailure;
 80105a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80105a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return JSONFailure;
 80105a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80105aa:	4770      	bx	lr
 80105ac:	20000308 	.word	0x20000308

080105b0 <json_object_get_cell_ix>:
static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 80105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b4:	ed2d 8b02 	vpush	{d8}
 80105b8:	b083      	sub	sp, #12
 80105ba:	4692      	mov	sl, r2
    *out_found = PARSON_FALSE;
 80105bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    size_t cell_ix = hash & (object->cell_capacity - 1);
 80105be:	6a04      	ldr	r4, [r0, #32]
static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 80105c0:	461f      	mov	r7, r3
    *out_found = PARSON_FALSE;
 80105c2:	2300      	movs	r3, #0
 80105c4:	6013      	str	r3, [r2, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 80105c6:	6a06      	ldr	r6, [r0, #32]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 80105c8:	3c01      	subs	r4, #1
 80105ca:	403c      	ands	r4, r7
    for (i = 0; i < object->cell_capacity; i++) {
 80105cc:	b386      	cbz	r6, 8010630 <json_object_get_cell_ix+0x80>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 80105ce:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80105d2:	ee08 1a10 	vmov	s16, r1
        cell = object->cells[ix];
 80105d6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80105da:	4605      	mov	r5, r0
 80105dc:	4426      	add	r6, r4
 80105de:	e001      	b.n	80105e4 <json_object_get_cell_ix+0x34>
    for (i = 0; i < object->cell_capacity; i++) {
 80105e0:	42a6      	cmp	r6, r4
 80105e2:	d025      	beq.n	8010630 <json_object_get_cell_ix+0x80>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 80105e4:	ea04 0b08 	and.w	fp, r4, r8
    for (i = 0; i < object->cell_capacity; i++) {
 80105e8:	3401      	adds	r4, #1
        cell = object->cells[ix];
 80105ea:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
        if (cell == OBJECT_INVALID_IX) {
 80105ee:	1c53      	adds	r3, r2, #1
 80105f0:	d018      	beq.n	8010624 <json_object_get_cell_ix+0x74>
        hash_to_check = object->hashes[cell];
 80105f2:	68a9      	ldr	r1, [r5, #8]
        if (hash != hash_to_check) {
 80105f4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80105f8:	428f      	cmp	r7, r1
 80105fa:	d1f1      	bne.n	80105e0 <json_object_get_cell_ix+0x30>
        key_to_check = object->names[cell];
 80105fc:	68e9      	ldr	r1, [r5, #12]
 80105fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
        key_to_check_len = strlen(key_to_check);
 8010602:	9101      	str	r1, [sp, #4]
 8010604:	4608      	mov	r0, r1
 8010606:	f7ef fe5b 	bl	80002c0 <strlen>
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 801060a:	4550      	cmp	r0, sl
 801060c:	9901      	ldr	r1, [sp, #4]
 801060e:	d1e7      	bne.n	80105e0 <json_object_get_cell_ix+0x30>
 8010610:	ee18 0a10 	vmov	r0, s16
 8010614:	4652      	mov	r2, sl
 8010616:	f00b f8a0 	bl	801b75a <strncmp>
 801061a:	2800      	cmp	r0, #0
 801061c:	d1e0      	bne.n	80105e0 <json_object_get_cell_ix+0x30>
            *out_found = PARSON_TRUE;
 801061e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010620:	2201      	movs	r2, #1
 8010622:	601a      	str	r2, [r3, #0]
}
 8010624:	4658      	mov	r0, fp
 8010626:	b003      	add	sp, #12
 8010628:	ecbd 8b02 	vpop	{d8}
 801062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return OBJECT_INVALID_IX;
 8010630:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
}
 8010634:	4658      	mov	r0, fp
 8010636:	b003      	add	sp, #12
 8010638:	ecbd 8b02 	vpop	{d8}
 801063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010640 <json_object_getn_value>:
static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	b084      	sub	sp, #16
    parson_bool_t found = PARSON_FALSE;
 8010644:	2300      	movs	r3, #0
 8010646:	9303      	str	r3, [sp, #12]
    if (!object || !name) {
 8010648:	b310      	cbz	r0, 8010690 <json_object_getn_value+0x50>
 801064a:	b309      	cbz	r1, 8010690 <json_object_getn_value+0x50>
    for (i = 0; i < n; i++) {
 801064c:	4606      	mov	r6, r0
 801064e:	b312      	cbz	r2, 8010696 <json_object_getn_value+0x56>
 8010650:	1e55      	subs	r5, r2, #1
 8010652:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8010656:	440d      	add	r5, r1
    unsigned long hash = 5381;
 8010658:	f241 5305 	movw	r3, #5381	; 0x1505
 801065c:	e003      	b.n	8010666 <json_object_getn_value+0x26>
    for (i = 0; i < n; i++) {
 801065e:	45ac      	cmp	ip, r5
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8010660:	eb04 030e 	add.w	r3, r4, lr
    for (i = 0; i < n; i++) {
 8010664:	d005      	beq.n	8010672 <json_object_getn_value+0x32>
        c = string[i];
 8010666:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
        if (c == '\0') {
 801066a:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
 801066e:	2c00      	cmp	r4, #0
 8010670:	d1f5      	bne.n	801065e <json_object_getn_value+0x1e>
    cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 8010672:	a803      	add	r0, sp, #12
 8010674:	9000      	str	r0, [sp, #0]
 8010676:	4630      	mov	r0, r6
 8010678:	f7ff ff9a 	bl	80105b0 <json_object_get_cell_ix>
    if (!found) {
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	b13b      	cbz	r3, 8010690 <json_object_getn_value+0x50>
    item_ix = object->cells[cell_ix];
 8010680:	6872      	ldr	r2, [r6, #4]
    return object->values[item_ix];
 8010682:	6933      	ldr	r3, [r6, #16]
 8010684:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010688:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
 801068c:	b004      	add	sp, #16
 801068e:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 8010690:	2000      	movs	r0, #0
}
 8010692:	b004      	add	sp, #16
 8010694:	bd70      	pop	{r4, r5, r6, pc}
    unsigned long hash = 5381;
 8010696:	f241 5305 	movw	r3, #5381	; 0x1505
 801069a:	e7ea      	b.n	8010672 <json_object_getn_value+0x32>

0801069c <parse_utf16_hex>:
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801069c:	7803      	ldrb	r3, [r0, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d06c      	beq.n	801077c <parse_utf16_hex+0xe0>
 80106a2:	7842      	ldrb	r2, [r0, #1]
 80106a4:	2a00      	cmp	r2, #0
 80106a6:	d069      	beq.n	801077c <parse_utf16_hex+0xe0>
static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 80106a8:	b430      	push	{r4, r5}
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 80106aa:	7884      	ldrb	r4, [r0, #2]
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	d062      	beq.n	8010776 <parse_utf16_hex+0xda>
 80106b0:	78c5      	ldrb	r5, [r0, #3]
 80106b2:	2d00      	cmp	r5, #0
 80106b4:	d05f      	beq.n	8010776 <parse_utf16_hex+0xda>
    if (c >= '0' && c <= '9') {
 80106b6:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80106ba:	fa5f f08c 	uxtb.w	r0, ip
 80106be:	2809      	cmp	r0, #9
 80106c0:	d90b      	bls.n	80106da <parse_utf16_hex+0x3e>
    } else if (c >= 'a' && c <= 'f') {
 80106c2:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 80106c6:	2805      	cmp	r0, #5
 80106c8:	d952      	bls.n	8010770 <parse_utf16_hex+0xd4>
    } else if (c >= 'A' && c <= 'F') {
 80106ca:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80106ce:	2805      	cmp	r0, #5
        return c - 'A' + 10;
 80106d0:	bf94      	ite	ls
 80106d2:	f1a3 0c37 	subls.w	ip, r3, #55	; 0x37
    return -1;
 80106d6:	f04f 3cff 	movhi.w	ip, #4294967295	; 0xffffffff
    if (c >= '0' && c <= '9') {
 80106da:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 80106de:	b2c3      	uxtb	r3, r0
 80106e0:	2b09      	cmp	r3, #9
 80106e2:	d90b      	bls.n	80106fc <parse_utf16_hex+0x60>
    } else if (c >= 'a' && c <= 'f') {
 80106e4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80106e8:	2b05      	cmp	r3, #5
 80106ea:	d938      	bls.n	801075e <parse_utf16_hex+0xc2>
    } else if (c >= 'A' && c <= 'F') {
 80106ec:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80106f0:	2b05      	cmp	r3, #5
        return c - 'A' + 10;
 80106f2:	bf94      	ite	ls
 80106f4:	f1a2 0037 	subls.w	r0, r2, #55	; 0x37
    return -1;
 80106f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    if (c >= '0' && c <= '9') {
 80106fc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010700:	b2da      	uxtb	r2, r3
 8010702:	2a09      	cmp	r2, #9
 8010704:	d90b      	bls.n	801071e <parse_utf16_hex+0x82>
    } else if (c >= 'a' && c <= 'f') {
 8010706:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801070a:	2b05      	cmp	r3, #5
 801070c:	d92d      	bls.n	801076a <parse_utf16_hex+0xce>
    } else if (c >= 'A' && c <= 'F') {
 801070e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010712:	2b05      	cmp	r3, #5
        return c - 'A' + 10;
 8010714:	bf94      	ite	ls
 8010716:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
    return -1;
 801071a:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
    if (c >= '0' && c <= '9') {
 801071e:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8010722:	b2d4      	uxtb	r4, r2
 8010724:	2c09      	cmp	r4, #9
 8010726:	d909      	bls.n	801073c <parse_utf16_hex+0xa0>
    } else if (c >= 'a' && c <= 'f') {
 8010728:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 801072c:	2a05      	cmp	r2, #5
 801072e:	d919      	bls.n	8010764 <parse_utf16_hex+0xc8>
    } else if (c >= 'A' && c <= 'F') {
 8010730:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
 8010734:	2a05      	cmp	r2, #5
 8010736:	d81e      	bhi.n	8010776 <parse_utf16_hex+0xda>
        return c - 'A' + 10;
 8010738:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801073c:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 8010740:	d019      	beq.n	8010776 <parse_utf16_hex+0xda>
 8010742:	1c45      	adds	r5, r0, #1
 8010744:	d009      	beq.n	801075a <parse_utf16_hex+0xbe>
 8010746:	1c5c      	adds	r4, r3, #1
 8010748:	d01b      	beq.n	8010782 <parse_utf16_hex+0xe6>
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801074a:	0200      	lsls	r0, r0, #8
 801074c:	ea40 300c 	orr.w	r0, r0, ip, lsl #12
 8010750:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8010754:	4310      	orrs	r0, r2
 8010756:	6008      	str	r0, [r1, #0]
    return JSONSuccess;
 8010758:	2000      	movs	r0, #0
}
 801075a:	bc30      	pop	{r4, r5}
 801075c:	4770      	bx	lr
        return c - 'a' + 10;
 801075e:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
 8010762:	e7cb      	b.n	80106fc <parse_utf16_hex+0x60>
 8010764:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8010768:	e7e8      	b.n	801073c <parse_utf16_hex+0xa0>
 801076a:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 801076e:	e7d6      	b.n	801071e <parse_utf16_hex+0x82>
 8010770:	f1a3 0c57 	sub.w	ip, r3, #87	; 0x57
 8010774:	e7b1      	b.n	80106da <parse_utf16_hex+0x3e>
        return JSONFailure;
 8010776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801077a:	e7ee      	b.n	801075a <parse_utf16_hex+0xbe>
 801077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010780:	4770      	bx	lr
        return JSONFailure;
 8010782:	4618      	mov	r0, r3
 8010784:	e7e9      	b.n	801075a <parse_utf16_hex+0xbe>
 8010786:	bf00      	nop

08010788 <get_quoted_string.constprop.0>:
    return NULL;
}

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8010788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char *string_start = *string;
 801078c:	6807      	ldr	r7, [r0, #0]
    if (**string != '\"') {
 801078e:	783b      	ldrb	r3, [r7, #0]
 8010790:	2b22      	cmp	r3, #34	; 0x22
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8010792:	b085      	sub	sp, #20
    if (**string != '\"') {
 8010794:	d153      	bne.n	801083e <get_quoted_string.constprop.0+0xb6>
    SKIP_CHAR(string);
 8010796:	1c7e      	adds	r6, r7, #1
 8010798:	6006      	str	r6, [r0, #0]
    while (**string != '\"') {
 801079a:	787b      	ldrb	r3, [r7, #1]
 801079c:	2b22      	cmp	r3, #34	; 0x22
 801079e:	4688      	mov	r8, r1
 80107a0:	4634      	mov	r4, r6
 80107a2:	d009      	beq.n	80107b8 <get_quoted_string.constprop.0+0x30>
        if (**string == '\0') {
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d04a      	beq.n	801083e <get_quoted_string.constprop.0+0xb6>
        } else if (**string == '\\') {
 80107a8:	2b5c      	cmp	r3, #92	; 0x5c
 80107aa:	d043      	beq.n	8010834 <get_quoted_string.constprop.0+0xac>
        SKIP_CHAR(string);
 80107ac:	6803      	ldr	r3, [r0, #0]
 80107ae:	1c5c      	adds	r4, r3, #1
 80107b0:	6004      	str	r4, [r0, #0]
    while (**string != '\"') {
 80107b2:	785b      	ldrb	r3, [r3, #1]
 80107b4:	2b22      	cmp	r3, #34	; 0x22
 80107b6:	d1f5      	bne.n	80107a4 <get_quoted_string.constprop.0+0x1c>
    SKIP_CHAR(string);
 80107b8:	3401      	adds	r4, #1
    output = (char*)parson_malloc(initial_size);
 80107ba:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80109a0 <get_quoted_string.constprop.0+0x218>
    SKIP_CHAR(string);
 80107be:	6004      	str	r4, [r0, #0]
    size_t input_string_len = 0;
    JSON_Status status = skip_quotes(string);
    if (status != JSONSuccess) {
        return NULL;
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 80107c0:	1be4      	subs	r4, r4, r7
    output = (char*)parson_malloc(initial_size);
 80107c2:	1e60      	subs	r0, r4, #1
 80107c4:	f8da 3000 	ldr.w	r3, [sl]
 80107c8:	4798      	blx	r3
    input_string_len = *string - string_start - 2; /* length without quotes */
 80107ca:	3c02      	subs	r4, #2
    if (output == NULL) {
 80107cc:	4681      	mov	r9, r0
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d05e      	beq.n	8010890 <get_quoted_string.constprop.0+0x108>
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80107d2:	787a      	ldrb	r2, [r7, #1]
 80107d4:	2a00      	cmp	r2, #0
 80107d6:	f000 80df 	beq.w	8010998 <get_quoted_string.constprop.0+0x210>
 80107da:	2c00      	cmp	r4, #0
 80107dc:	f000 80d9 	beq.w	8010992 <get_quoted_string.constprop.0+0x20a>
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 80107e0:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80109a4 <get_quoted_string.constprop.0+0x21c>
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80107e4:	4605      	mov	r5, r0
 80107e6:	e00a      	b.n	80107fe <get_quoted_string.constprop.0+0x76>
        } else if ((unsigned char)*input_ptr < 0x20) {
 80107e8:	2a1f      	cmp	r2, #31
 80107ea:	d951      	bls.n	8010890 <get_quoted_string.constprop.0+0x108>
            *output_ptr = *input_ptr;
 80107ec:	702a      	strb	r2, [r5, #0]
 80107ee:	4633      	mov	r3, r6
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80107f0:	785a      	ldrb	r2, [r3, #1]
        output_ptr++;
 80107f2:	3501      	adds	r5, #1
        input_ptr++;
 80107f4:	1c5e      	adds	r6, r3, #1
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80107f6:	b38a      	cbz	r2, 801085c <get_quoted_string.constprop.0+0xd4>
 80107f8:	1bdb      	subs	r3, r3, r7
 80107fa:	429c      	cmp	r4, r3
 80107fc:	d92e      	bls.n	801085c <get_quoted_string.constprop.0+0xd4>
        if (*input_ptr == '\\') {
 80107fe:	2a5c      	cmp	r2, #92	; 0x5c
 8010800:	d1f2      	bne.n	80107e8 <get_quoted_string.constprop.0+0x60>
            switch (*input_ptr) {
 8010802:	7872      	ldrb	r2, [r6, #1]
 8010804:	2a75      	cmp	r2, #117	; 0x75
            input_ptr++;
 8010806:	f106 0301 	add.w	r3, r6, #1
            switch (*input_ptr) {
 801080a:	d841      	bhi.n	8010890 <get_quoted_string.constprop.0+0x108>
 801080c:	2a5b      	cmp	r2, #91	; 0x5b
 801080e:	d91b      	bls.n	8010848 <get_quoted_string.constprop.0+0xc0>
 8010810:	3a5c      	subs	r2, #92	; 0x5c
 8010812:	2a19      	cmp	r2, #25
 8010814:	d83c      	bhi.n	8010890 <get_quoted_string.constprop.0+0x108>
 8010816:	e8df f002 	tbb	[pc, r2]
 801081a:	3b6a      	.short	0x3b6a
 801081c:	3b3b3b3b 	.word	0x3b3b3b3b
 8010820:	3b3b3b67 	.word	0x3b3b3b67
 8010824:	3b3b3b64 	.word	0x3b3b3b64
 8010828:	3b3b3b3b 	.word	0x3b3b3b3b
 801082c:	3b3b3b61 	.word	0x3b3b3b61
 8010830:	405b3b5e 	.word	0x405b3b5e
            SKIP_CHAR(string);
 8010834:	1c63      	adds	r3, r4, #1
 8010836:	6003      	str	r3, [r0, #0]
            if (**string == '\0') {
 8010838:	7862      	ldrb	r2, [r4, #1]
 801083a:	2a00      	cmp	r2, #0
 801083c:	d1b7      	bne.n	80107ae <get_quoted_string.constprop.0+0x26>
    return NULL;
 801083e:	2500      	movs	r5, #0
    return process_string(string_start + 1, input_string_len, output_string_len);
}
 8010840:	4628      	mov	r0, r5
 8010842:	b005      	add	sp, #20
 8010844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            switch (*input_ptr) {
 8010848:	2a22      	cmp	r2, #34	; 0x22
 801084a:	d001      	beq.n	8010850 <get_quoted_string.constprop.0+0xc8>
 801084c:	2a2f      	cmp	r2, #47	; 0x2f
 801084e:	d11f      	bne.n	8010890 <get_quoted_string.constprop.0+0x108>
                case '\\': *output_ptr = '\\'; break;
 8010850:	702a      	strb	r2, [r5, #0]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8010852:	785a      	ldrb	r2, [r3, #1]
        output_ptr++;
 8010854:	3501      	adds	r5, #1
        input_ptr++;
 8010856:	1c5e      	adds	r6, r3, #1
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8010858:	2a00      	cmp	r2, #0
 801085a:	d1cd      	bne.n	80107f8 <get_quoted_string.constprop.0+0x70>
    final_size = (size_t)(output_ptr-output) + 1;
 801085c:	eba5 0409 	sub.w	r4, r5, r9
 8010860:	1c62      	adds	r2, r4, #1
    *output_ptr = '\0';
 8010862:	2300      	movs	r3, #0
 8010864:	702b      	strb	r3, [r5, #0]
    resized_output = (char*)parson_malloc(final_size);
 8010866:	4610      	mov	r0, r2
 8010868:	f8da 3000 	ldr.w	r3, [sl]
 801086c:	9200      	str	r2, [sp, #0]
 801086e:	4798      	blx	r3
    if (resized_output == NULL) {
 8010870:	4605      	mov	r5, r0
 8010872:	b168      	cbz	r0, 8010890 <get_quoted_string.constprop.0+0x108>
    memcpy(resized_output, output, final_size);
 8010874:	9a00      	ldr	r2, [sp, #0]
 8010876:	4649      	mov	r1, r9
 8010878:	f00b f811 	bl	801b89e <memcpy>
    parson_free(output);
 801087c:	4648      	mov	r0, r9
 801087e:	f8da 3004 	ldr.w	r3, [sl, #4]
    *output_len = final_size - 1;
 8010882:	f8c8 4000 	str.w	r4, [r8]
    parson_free(output);
 8010886:	4798      	blx	r3
}
 8010888:	4628      	mov	r0, r5
 801088a:	b005      	add	sp, #20
 801088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    parson_free(output);
 8010890:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010894:	4648      	mov	r0, r9
 8010896:	4798      	blx	r3
 8010898:	e7d1      	b.n	801083e <get_quoted_string.constprop.0+0xb6>
    unprocessed_ptr++; /* skips u */
 801089a:	1cb3      	adds	r3, r6, #2
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 801089c:	a902      	add	r1, sp, #8
 801089e:	4618      	mov	r0, r3
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	f7ff fefb 	bl	801069c <parse_utf16_hex>
    if (status != JSONSuccess) {
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d1f2      	bne.n	8010890 <get_quoted_string.constprop.0+0x108>
    if (cp < 0x80) {
 80108aa:	9a02      	ldr	r2, [sp, #8]
 80108ac:	9b00      	ldr	r3, [sp, #0]
 80108ae:	2a7f      	cmp	r2, #127	; 0x7f
 80108b0:	d920      	bls.n	80108f4 <get_quoted_string.constprop.0+0x16c>
    } else if (cp < 0x800) {
 80108b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80108b6:	d21f      	bcs.n	80108f8 <get_quoted_string.constprop.0+0x170>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 80108b8:	0991      	lsrs	r1, r2, #6
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80108ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 80108be:	f061 013f 	orn	r1, r1, #63	; 0x3f
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80108c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 80108c6:	7029      	strb	r1, [r5, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80108c8:	f805 2f01 	strb.w	r2, [r5, #1]!
    unprocessed_ptr += 3;
 80108cc:	3303      	adds	r3, #3
    return JSONSuccess;
 80108ce:	e78f      	b.n	80107f0 <get_quoted_string.constprop.0+0x68>
                case 't':  *output_ptr = '\t'; break;
 80108d0:	2209      	movs	r2, #9
 80108d2:	702a      	strb	r2, [r5, #0]
 80108d4:	e78c      	b.n	80107f0 <get_quoted_string.constprop.0+0x68>
                case 'r':  *output_ptr = '\r'; break;
 80108d6:	220d      	movs	r2, #13
 80108d8:	702a      	strb	r2, [r5, #0]
 80108da:	e789      	b.n	80107f0 <get_quoted_string.constprop.0+0x68>
                case 'n':  *output_ptr = '\n'; break;
 80108dc:	220a      	movs	r2, #10
 80108de:	702a      	strb	r2, [r5, #0]
 80108e0:	e786      	b.n	80107f0 <get_quoted_string.constprop.0+0x68>
                case 'f':  *output_ptr = '\f'; break;
 80108e2:	220c      	movs	r2, #12
 80108e4:	702a      	strb	r2, [r5, #0]
 80108e6:	e783      	b.n	80107f0 <get_quoted_string.constprop.0+0x68>
                case 'b':  *output_ptr = '\b'; break;
 80108e8:	2208      	movs	r2, #8
 80108ea:	702a      	strb	r2, [r5, #0]
 80108ec:	e780      	b.n	80107f0 <get_quoted_string.constprop.0+0x68>
                case '\\': *output_ptr = '\\'; break;
 80108ee:	225c      	movs	r2, #92	; 0x5c
 80108f0:	702a      	strb	r2, [r5, #0]
 80108f2:	e7ae      	b.n	8010852 <get_quoted_string.constprop.0+0xca>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 80108f4:	702a      	strb	r2, [r5, #0]
 80108f6:	e7e9      	b.n	80108cc <get_quoted_string.constprop.0+0x144>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 80108f8:	f5a2 4158 	sub.w	r1, r2, #55296	; 0xd800
 80108fc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8010900:	d236      	bcs.n	8010970 <get_quoted_string.constprop.0+0x1e8>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 8010902:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010906:	9201      	str	r2, [sp, #4]
 8010908:	d2c2      	bcs.n	8010890 <get_quoted_string.constprop.0+0x108>
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801090a:	79b3      	ldrb	r3, [r6, #6]
 801090c:	2b5c      	cmp	r3, #92	; 0x5c
 801090e:	d1bf      	bne.n	8010890 <get_quoted_string.constprop.0+0x108>
 8010910:	79f1      	ldrb	r1, [r6, #7]
 8010912:	2975      	cmp	r1, #117	; 0x75
 8010914:	f106 0308 	add.w	r3, r6, #8
 8010918:	d1ba      	bne.n	8010890 <get_quoted_string.constprop.0+0x108>
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 801091a:	a903      	add	r1, sp, #12
 801091c:	4618      	mov	r0, r3
 801091e:	9300      	str	r3, [sp, #0]
 8010920:	f7ff febc 	bl	801069c <parse_utf16_hex>
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 8010924:	2800      	cmp	r0, #0
 8010926:	d1b3      	bne.n	8010890 <get_quoted_string.constprop.0+0x108>
 8010928:	9903      	ldr	r1, [sp, #12]
 801092a:	f5a1 405c 	sub.w	r0, r1, #56320	; 0xdc00
 801092e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010932:	d2ad      	bcs.n	8010890 <get_quoted_string.constprop.0+0x108>
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8010934:	9a01      	ldr	r2, [sp, #4]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 8010936:	9b00      	ldr	r3, [sp, #0]
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8010938:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801093c:	ea0b 2282 	and.w	r2, fp, r2, lsl #10
 8010940:	430a      	orrs	r2, r1
 8010942:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 8010946:	0c91      	lsrs	r1, r2, #18
 8010948:	f061 010f 	orn	r1, r1, #15
 801094c:	7029      	strb	r1, [r5, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801094e:	f3c2 3105 	ubfx	r1, r2, #12, #6
 8010952:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8010956:	7069      	strb	r1, [r5, #1]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8010958:	f3c2 1185 	ubfx	r1, r2, #6, #6
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801095c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8010960:	f061 017f 	orn	r1, r1, #127	; 0x7f
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 8010964:	f062 027f 	orn	r2, r2, #127	; 0x7f
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8010968:	70a9      	strb	r1, [r5, #2]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801096a:	f805 2f03 	strb.w	r2, [r5, #3]!
 801096e:	e7ad      	b.n	80108cc <get_quoted_string.constprop.0+0x144>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 8010970:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8010974:	f061 011f 	orn	r1, r1, #31
 8010978:	7029      	strb	r1, [r5, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801097a:	f3c2 1185 	ubfx	r1, r2, #6, #6
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801097e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 8010982:	f061 017f 	orn	r1, r1, #127	; 0x7f
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 8010986:	f062 027f 	orn	r2, r2, #127	; 0x7f
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801098a:	7069      	strb	r1, [r5, #1]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801098c:	f805 2f02 	strb.w	r2, [r5, #2]!
        processed_ptr += 2;
 8010990:	e79c      	b.n	80108cc <get_quoted_string.constprop.0+0x144>
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8010992:	4605      	mov	r5, r0
 8010994:	2201      	movs	r2, #1
 8010996:	e764      	b.n	8010862 <get_quoted_string.constprop.0+0xda>
 8010998:	4614      	mov	r4, r2
 801099a:	4605      	mov	r5, r0
 801099c:	2201      	movs	r2, #1
 801099e:	e760      	b.n	8010862 <get_quoted_string.constprop.0+0xda>
 80109a0:	20000308 	.word	0x20000308
 80109a4:	000ffc00 	.word	0x000ffc00

080109a8 <append_indent>:
}

static int append_indent(char *buf, int level) {
    int i;
    int written = -1, written_total = 0;
    for (i = 0; i < level; i++) {
 80109a8:	2900      	cmp	r1, #0
static int append_indent(char *buf, int level) {
 80109aa:	b510      	push	{r4, lr}
    for (i = 0; i < level; i++) {
 80109ac:	dd1e      	ble.n	80109ec <append_indent+0x44>
    int written = -1, written_total = 0;
 80109ae:	f04f 0e00 	mov.w	lr, #0

static int append_string(char *buf, const char *string) {
    if (buf == NULL) {
        return (int)strlen(string);
    }
    return sprintf(buf, "%s", string);
 80109b2:	4c10      	ldr	r4, [pc, #64]	; (80109f4 <append_indent+0x4c>)
 80109b4:	4603      	mov	r3, r0
    for (i = 0; i < level; i++) {
 80109b6:	46f4      	mov	ip, lr
    if (buf == NULL) {
 80109b8:	b163      	cbz	r3, 80109d4 <append_indent+0x2c>
    for (i = 0; i < level; i++) {
 80109ba:	f10c 0c01 	add.w	ip, ip, #1
    return sprintf(buf, "%s", string);
 80109be:	6820      	ldr	r0, [r4, #0]
 80109c0:	7922      	ldrb	r2, [r4, #4]
 80109c2:	6018      	str	r0, [r3, #0]
    for (i = 0; i < level; i++) {
 80109c4:	4561      	cmp	r1, ip
    return sprintf(buf, "%s", string);
 80109c6:	f803 2f04 	strb.w	r2, [r3, #4]!
        APPEND_STRING("    ");
 80109ca:	f10e 0e04 	add.w	lr, lr, #4
    for (i = 0; i < level; i++) {
 80109ce:	d1f3      	bne.n	80109b8 <append_indent+0x10>
}
 80109d0:	4670      	mov	r0, lr
 80109d2:	bd10      	pop	{r4, pc}
        APPEND_STRING("    ");
 80109d4:	1e4b      	subs	r3, r1, #1
 80109d6:	eba3 030c 	sub.w	r3, r3, ip
 80109da:	009b      	lsls	r3, r3, #2
 80109dc:	4561      	cmp	r1, ip
 80109de:	bfd8      	it	le
 80109e0:	2300      	movle	r3, #0
 80109e2:	f10e 0e04 	add.w	lr, lr, #4
 80109e6:	449e      	add	lr, r3
}
 80109e8:	4670      	mov	r0, lr
 80109ea:	bd10      	pop	{r4, pc}
    int written = -1, written_total = 0;
 80109ec:	f04f 0e00 	mov.w	lr, #0
 80109f0:	e7ee      	b.n	80109d0 <append_indent+0x28>
 80109f2:	bf00      	nop
 80109f4:	08022a30 	.word	0x08022a30

080109f8 <json_serialize_string>:
static int json_serialize_string(const char *string, size_t len, char *buf) {
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	4605      	mov	r5, r0
    if (buf == NULL) {
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	f000 81f0 	beq.w	8010de4 <json_serialize_string+0x3ec>
    return sprintf(buf, "%s", string);
 8010a04:	4b9b      	ldr	r3, [pc, #620]	; (8010c74 <json_serialize_string+0x27c>)
 8010a06:	8818      	ldrh	r0, [r3, #0]
 8010a08:	f822 0b01 	strh.w	r0, [r2], #1
    for (i = 0; i < len; i++) {
 8010a0c:	2900      	cmp	r1, #0
 8010a0e:	f000 81ee 	beq.w	8010dee <json_serialize_string+0x3f6>
                if (parson_escape_slashes) {
 8010a12:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8010c90 <json_serialize_string+0x298>
    return sprintf(buf, "%s", string);
 8010a16:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8010c94 <json_serialize_string+0x29c>
 8010a1a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8010c98 <json_serialize_string+0x2a0>
 8010a1e:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8010c9c <json_serialize_string+0x2a4>
 8010a22:	4f95      	ldr	r7, [pc, #596]	; (8010c78 <json_serialize_string+0x280>)
 8010a24:	4e95      	ldr	r6, [pc, #596]	; (8010c7c <json_serialize_string+0x284>)
 8010a26:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
static int json_serialize_string(const char *string, size_t len, char *buf) {
 8010a2a:	2401      	movs	r4, #1
        c = string[i];
 8010a2c:	4663      	mov	r3, ip
 8010a2e:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
        switch (c) {
 8010a32:	285c      	cmp	r0, #92	; 0x5c
 8010a34:	d85e      	bhi.n	8010af4 <json_serialize_string+0xfc>
 8010a36:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010a3a:	01bc      	.short	0x01bc
 8010a3c:	01b001b6 	.word	0x01b001b6
 8010a40:	01a401aa 	.word	0x01a401aa
 8010a44:	0198019e 	.word	0x0198019e
 8010a48:	01850192 	.word	0x01850192
 8010a4c:	016b0178 	.word	0x016b0178
 8010a50:	01580165 	.word	0x01580165
 8010a54:	0117014b 	.word	0x0117014b
 8010a58:	010d0112 	.word	0x010d0112
 8010a5c:	01030108 	.word	0x01030108
 8010a60:	00f900fe 	.word	0x00f900fe
 8010a64:	00ef00f4 	.word	0x00ef00f4
 8010a68:	00e500ea 	.word	0x00e500ea
 8010a6c:	00d300e0 	.word	0x00d300e0
 8010a70:	00bf00c9 	.word	0x00bf00c9
 8010a74:	00a500b2 	.word	0x00a500b2
 8010a78:	005d0093 	.word	0x005d0093
 8010a7c:	0087005d 	.word	0x0087005d
 8010a80:	005d005d 	.word	0x005d005d
 8010a84:	005d005d 	.word	0x005d005d
 8010a88:	005d005d 	.word	0x005d005d
 8010a8c:	005d005d 	.word	0x005d005d
 8010a90:	005d005d 	.word	0x005d005d
 8010a94:	005d005d 	.word	0x005d005d
 8010a98:	005d0077 	.word	0x005d0077
 8010a9c:	005d005d 	.word	0x005d005d
 8010aa0:	005d005d 	.word	0x005d005d
 8010aa4:	005d005d 	.word	0x005d005d
 8010aa8:	005d005d 	.word	0x005d005d
 8010aac:	005d005d 	.word	0x005d005d
 8010ab0:	005d005d 	.word	0x005d005d
 8010ab4:	005d005d 	.word	0x005d005d
 8010ab8:	005d005d 	.word	0x005d005d
 8010abc:	005d005d 	.word	0x005d005d
 8010ac0:	005d005d 	.word	0x005d005d
 8010ac4:	005d005d 	.word	0x005d005d
 8010ac8:	005d005d 	.word	0x005d005d
 8010acc:	005d005d 	.word	0x005d005d
 8010ad0:	005d005d 	.word	0x005d005d
 8010ad4:	005d005d 	.word	0x005d005d
 8010ad8:	005d005d 	.word	0x005d005d
 8010adc:	005d005d 	.word	0x005d005d
 8010ae0:	005d005d 	.word	0x005d005d
 8010ae4:	005d005d 	.word	0x005d005d
 8010ae8:	005d005d 	.word	0x005d005d
 8010aec:	005d005d 	.word	0x005d005d
 8010af0:	006c005d 	.word	0x006c005d
                if (buf != NULL) {
 8010af4:	b10a      	cbz	r2, 8010afa <json_serialize_string+0x102>
                    buf[0] = c;
 8010af6:	f802 0b01 	strb.w	r0, [r2], #1
                written_total += 1;
 8010afa:	3401      	adds	r4, #1
    for (i = 0; i < len; i++) {
 8010afc:	3302      	adds	r3, #2
 8010afe:	1b5b      	subs	r3, r3, r5
 8010b00:	428b      	cmp	r3, r1
 8010b02:	d393      	bcc.n	8010a2c <json_serialize_string+0x34>
    if (buf == NULL) {
 8010b04:	b112      	cbz	r2, 8010b0c <json_serialize_string+0x114>
 8010b06:	4b5b      	ldr	r3, [pc, #364]	; (8010c74 <json_serialize_string+0x27c>)
    return sprintf(buf, "%s", string);
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	8013      	strh	r3, [r2, #0]
    APPEND_STRING("\"");
 8010b0c:	1c60      	adds	r0, r4, #1
}
 8010b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (buf == NULL) {
 8010b12:	b13a      	cbz	r2, 8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010b14:	485a      	ldr	r0, [pc, #360]	; (8010c80 <json_serialize_string+0x288>)
 8010b16:	f8b0 e000 	ldrh.w	lr, [r0]
 8010b1a:	7880      	ldrb	r0, [r0, #2]
 8010b1c:	f8a2 e000 	strh.w	lr, [r2]
 8010b20:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010b24:	3402      	adds	r4, #2
 8010b26:	e027      	b.n	8010b78 <json_serialize_string+0x180>
                if (parson_escape_slashes) {
 8010b28:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	f000 8150 	beq.w	8010dd2 <json_serialize_string+0x3da>
    if (buf == NULL) {
 8010b32:	2a00      	cmp	r2, #0
 8010b34:	d0f6      	beq.n	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010b36:	4853      	ldr	r0, [pc, #332]	; (8010c84 <json_serialize_string+0x28c>)
 8010b38:	8800      	ldrh	r0, [r0, #0]
 8010b3a:	8010      	strh	r0, [r2, #0]
 8010b3c:	4851      	ldr	r0, [pc, #324]	; (8010c84 <json_serialize_string+0x28c>)
 8010b3e:	7880      	ldrb	r0, [r0, #2]
 8010b40:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010b44:	3402      	adds	r4, #2
 8010b46:	e017      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	d0eb      	beq.n	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010b4c:	484e      	ldr	r0, [pc, #312]	; (8010c88 <json_serialize_string+0x290>)
 8010b4e:	f8b0 e000 	ldrh.w	lr, [r0]
 8010b52:	7880      	ldrb	r0, [r0, #2]
 8010b54:	f8a2 e000 	strh.w	lr, [r2]
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010b58:	3402      	adds	r4, #2
    return sprintf(buf, "%s", string);
 8010b5a:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010b5e:	e00b      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010b60:	b14a      	cbz	r2, 8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010b62:	f8da 0000 	ldr.w	r0, [sl]
 8010b66:	6010      	str	r0, [r2, #0]
 8010b68:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8010b6c:	8090      	strh	r0, [r2, #4]
 8010b6e:	f89a 0006 	ldrb.w	r0, [sl, #6]
 8010b72:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8010b76:	3406      	adds	r4, #6
    for (i = 0; i < len; i++) {
 8010b78:	3302      	adds	r3, #2
 8010b7a:	1b5b      	subs	r3, r3, r5
 8010b7c:	428b      	cmp	r3, r1
 8010b7e:	f4ff af55 	bcc.w	8010a2c <json_serialize_string+0x34>
 8010b82:	e7bf      	b.n	8010b04 <json_serialize_string+0x10c>
    if (buf == NULL) {
 8010b84:	2a00      	cmp	r2, #0
 8010b86:	d0f6      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010b88:	f8d9 0000 	ldr.w	r0, [r9]
 8010b8c:	6010      	str	r0, [r2, #0]
 8010b8e:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8010b92:	8090      	strh	r0, [r2, #4]
 8010b94:	f899 0006 	ldrb.w	r0, [r9, #6]
 8010b98:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x1e': APPEND_STRING("\\u001e"); break;
 8010b9c:	e7eb      	b.n	8010b76 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8010b9e:	2a00      	cmp	r2, #0
 8010ba0:	d0e9      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010ba2:	f8d8 0000 	ldr.w	r0, [r8]
 8010ba6:	6010      	str	r0, [r2, #0]
 8010ba8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8010bac:	8090      	strh	r0, [r2, #4]
 8010bae:	f898 0006 	ldrb.w	r0, [r8, #6]
 8010bb2:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x1d': APPEND_STRING("\\u001d"); break;
 8010bb6:	e7de      	b.n	8010b76 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8010bb8:	2a00      	cmp	r2, #0
 8010bba:	d0dc      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010bbc:	6838      	ldr	r0, [r7, #0]
 8010bbe:	6010      	str	r0, [r2, #0]
 8010bc0:	88b8      	ldrh	r0, [r7, #4]
 8010bc2:	8090      	strh	r0, [r2, #4]
 8010bc4:	79b8      	ldrb	r0, [r7, #6]
 8010bc6:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x1c': APPEND_STRING("\\u001c"); break;
 8010bca:	e7d4      	b.n	8010b76 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8010bcc:	2a00      	cmp	r2, #0
 8010bce:	d0d2      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010bd0:	6830      	ldr	r0, [r6, #0]
 8010bd2:	6010      	str	r0, [r2, #0]
 8010bd4:	88b0      	ldrh	r0, [r6, #4]
 8010bd6:	8090      	strh	r0, [r2, #4]
 8010bd8:	79b0      	ldrb	r0, [r6, #6]
 8010bda:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8010bde:	e7ca      	b.n	8010b76 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8010be0:	2a00      	cmp	r2, #0
 8010be2:	d0c8      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010be4:	4829      	ldr	r0, [pc, #164]	; (8010c8c <json_serialize_string+0x294>)
 8010be6:	6800      	ldr	r0, [r0, #0]
 8010be8:	6010      	str	r0, [r2, #0]
 8010bea:	4828      	ldr	r0, [pc, #160]	; (8010c8c <json_serialize_string+0x294>)
 8010bec:	8880      	ldrh	r0, [r0, #4]
 8010bee:	8090      	strh	r0, [r2, #4]
 8010bf0:	4826      	ldr	r0, [pc, #152]	; (8010c8c <json_serialize_string+0x294>)
 8010bf2:	7980      	ldrb	r0, [r0, #6]
 8010bf4:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8010bf8:	e7bd      	b.n	8010b76 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8010bfa:	2a00      	cmp	r2, #0
 8010bfc:	d0bb      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010bfe:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8010ca0 <json_serialize_string+0x2a8>
 8010c02:	e0db      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c04:	2a00      	cmp	r2, #0
 8010c06:	d0b6      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c08:	f8df e098 	ldr.w	lr, [pc, #152]	; 8010ca4 <json_serialize_string+0x2ac>
 8010c0c:	e0d6      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c0e:	2a00      	cmp	r2, #0
 8010c10:	d0b1      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c12:	f8df e094 	ldr.w	lr, [pc, #148]	; 8010ca8 <json_serialize_string+0x2b0>
 8010c16:	e0d1      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c18:	2a00      	cmp	r2, #0
 8010c1a:	d0ac      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c1c:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8010cac <json_serialize_string+0x2b4>
 8010c20:	e0cc      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c22:	2a00      	cmp	r2, #0
 8010c24:	d0a7      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c26:	f8df e088 	ldr.w	lr, [pc, #136]	; 8010cb0 <json_serialize_string+0x2b8>
 8010c2a:	e0c7      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	d0a2      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c30:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010cb4 <json_serialize_string+0x2bc>
 8010c34:	e0c2      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	d09d      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c3a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8010cb8 <json_serialize_string+0x2c0>
 8010c3e:	e0bd      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c40:	2a00      	cmp	r2, #0
 8010c42:	d098      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c44:	f8df e074 	ldr.w	lr, [pc, #116]	; 8010cbc <json_serialize_string+0x2c4>
 8010c48:	e0b8      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c4a:	2a00      	cmp	r2, #0
 8010c4c:	d093      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c4e:	f8df e070 	ldr.w	lr, [pc, #112]	; 8010cc0 <json_serialize_string+0x2c8>
 8010c52:	e0b3      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c54:	2a00      	cmp	r2, #0
 8010c56:	d08e      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c58:	f8df e068 	ldr.w	lr, [pc, #104]	; 8010cc4 <json_serialize_string+0x2cc>
 8010c5c:	e0ae      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c5e:	2a00      	cmp	r2, #0
 8010c60:	d089      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c62:	f8df e064 	ldr.w	lr, [pc, #100]	; 8010cc8 <json_serialize_string+0x2d0>
 8010c66:	e0a9      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	d084      	beq.n	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010c6c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8010ccc <json_serialize_string+0x2d4>
 8010c70:	e0a4      	b.n	8010dbc <json_serialize_string+0x3c4>
 8010c72:	bf00      	nop
 8010c74:	08022a38 	.word	0x08022a38
 8010c78:	08022b10 	.word	0x08022b10
 8010c7c:	08022b08 	.word	0x08022b08
 8010c80:	08022a40 	.word	0x08022a40
 8010c84:	08022b30 	.word	0x08022b30
 8010c88:	08022a3c 	.word	0x08022a3c
 8010c8c:	08022b00 	.word	0x08022b00
 8010c90:	20000308 	.word	0x20000308
 8010c94:	08022b28 	.word	0x08022b28
 8010c98:	08022b20 	.word	0x08022b20
 8010c9c:	08022b18 	.word	0x08022b18
 8010ca0:	08022af8 	.word	0x08022af8
 8010ca4:	08022af0 	.word	0x08022af0
 8010ca8:	08022ae8 	.word	0x08022ae8
 8010cac:	08022ae0 	.word	0x08022ae0
 8010cb0:	08022ad8 	.word	0x08022ad8
 8010cb4:	08022ad0 	.word	0x08022ad0
 8010cb8:	08022ac8 	.word	0x08022ac8
 8010cbc:	08022ac0 	.word	0x08022ac0
 8010cc0:	08022ab8 	.word	0x08022ab8
 8010cc4:	08022ab0 	.word	0x08022ab0
 8010cc8:	08022aa8 	.word	0x08022aa8
 8010ccc:	08022aa0 	.word	0x08022aa0
    if (buf == NULL) {
 8010cd0:	2a00      	cmp	r2, #0
 8010cd2:	f43f af27 	beq.w	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010cd6:	4847      	ldr	r0, [pc, #284]	; (8010df4 <json_serialize_string+0x3fc>)
 8010cd8:	f8b0 e000 	ldrh.w	lr, [r0]
 8010cdc:	7880      	ldrb	r0, [r0, #2]
 8010cde:	f8a2 e000 	strh.w	lr, [r2]
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010ce2:	3402      	adds	r4, #2
    return sprintf(buf, "%s", string);
 8010ce4:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010ce8:	e746      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010cea:	2a00      	cmp	r2, #0
 8010cec:	f43f af1a 	beq.w	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010cf0:	4841      	ldr	r0, [pc, #260]	; (8010df8 <json_serialize_string+0x400>)
 8010cf2:	f8b0 e000 	ldrh.w	lr, [r0]
 8010cf6:	7880      	ldrb	r0, [r0, #2]
 8010cf8:	f8a2 e000 	strh.w	lr, [r2]
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010cfc:	3402      	adds	r4, #2
    return sprintf(buf, "%s", string);
 8010cfe:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d02:	e739      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010d04:	2a00      	cmp	r2, #0
 8010d06:	f43f af36 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010d0a:	f8df e100 	ldr.w	lr, [pc, #256]	; 8010e0c <json_serialize_string+0x414>
 8010d0e:	e055      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010d10:	2a00      	cmp	r2, #0
 8010d12:	f43f af07 	beq.w	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010d16:	4839      	ldr	r0, [pc, #228]	; (8010dfc <json_serialize_string+0x404>)
 8010d18:	f8b0 e000 	ldrh.w	lr, [r0]
 8010d1c:	7880      	ldrb	r0, [r0, #2]
 8010d1e:	f8a2 e000 	strh.w	lr, [r2]
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d22:	3402      	adds	r4, #2
    return sprintf(buf, "%s", string);
 8010d24:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d28:	e726      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010d2a:	2a00      	cmp	r2, #0
 8010d2c:	f43f aefa 	beq.w	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010d30:	4833      	ldr	r0, [pc, #204]	; (8010e00 <json_serialize_string+0x408>)
 8010d32:	f8b0 e000 	ldrh.w	lr, [r0]
 8010d36:	7880      	ldrb	r0, [r0, #2]
 8010d38:	f8a2 e000 	strh.w	lr, [r2]
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d3c:	3402      	adds	r4, #2
    return sprintf(buf, "%s", string);
 8010d3e:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d42:	e719      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010d44:	2a00      	cmp	r2, #0
 8010d46:	f43f aeed 	beq.w	8010b24 <json_serialize_string+0x12c>
    return sprintf(buf, "%s", string);
 8010d4a:	482e      	ldr	r0, [pc, #184]	; (8010e04 <json_serialize_string+0x40c>)
 8010d4c:	f8b0 e000 	ldrh.w	lr, [r0]
 8010d50:	7880      	ldrb	r0, [r0, #2]
 8010d52:	f8a2 e000 	strh.w	lr, [r2]
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d56:	3402      	adds	r4, #2
    return sprintf(buf, "%s", string);
 8010d58:	f802 0f02 	strb.w	r0, [r2, #2]!
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8010d5c:	e70c      	b.n	8010b78 <json_serialize_string+0x180>
    if (buf == NULL) {
 8010d5e:	2a00      	cmp	r2, #0
 8010d60:	f43f af09 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010d64:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8010e10 <json_serialize_string+0x418>
 8010d68:	e028      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010d6a:	2a00      	cmp	r2, #0
 8010d6c:	f43f af03 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010d70:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8010e14 <json_serialize_string+0x41c>
 8010d74:	e022      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010d76:	2a00      	cmp	r2, #0
 8010d78:	f43f aefd 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010d7c:	f8df e098 	ldr.w	lr, [pc, #152]	; 8010e18 <json_serialize_string+0x420>
 8010d80:	e01c      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010d82:	2a00      	cmp	r2, #0
 8010d84:	f43f aef7 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010d88:	f8df e090 	ldr.w	lr, [pc, #144]	; 8010e1c <json_serialize_string+0x424>
 8010d8c:	e016      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010d8e:	2a00      	cmp	r2, #0
 8010d90:	f43f aef1 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010d94:	f8df e088 	ldr.w	lr, [pc, #136]	; 8010e20 <json_serialize_string+0x428>
 8010d98:	e010      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010d9a:	2a00      	cmp	r2, #0
 8010d9c:	f43f aeeb 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010da0:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010e24 <json_serialize_string+0x42c>
 8010da4:	e00a      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010da6:	2a00      	cmp	r2, #0
 8010da8:	f43f aee5 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010dac:	f8df e078 	ldr.w	lr, [pc, #120]	; 8010e28 <json_serialize_string+0x430>
 8010db0:	e004      	b.n	8010dbc <json_serialize_string+0x3c4>
    if (buf == NULL) {
 8010db2:	2a00      	cmp	r2, #0
 8010db4:	f43f aedf 	beq.w	8010b76 <json_serialize_string+0x17e>
    return sprintf(buf, "%s", string);
 8010db8:	f8df e070 	ldr.w	lr, [pc, #112]	; 8010e2c <json_serialize_string+0x434>
 8010dbc:	f8de 0000 	ldr.w	r0, [lr]
 8010dc0:	6010      	str	r0, [r2, #0]
 8010dc2:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8010dc6:	8090      	strh	r0, [r2, #4]
 8010dc8:	f89e 0006 	ldrb.w	r0, [lr, #6]
 8010dcc:	f802 0f06 	strb.w	r0, [r2, #6]!
            case '\x19': APPEND_STRING("\\u0019"); break;
 8010dd0:	e6d1      	b.n	8010b76 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8010dd2:	2a00      	cmp	r2, #0
 8010dd4:	f43f ae91 	beq.w	8010afa <json_serialize_string+0x102>
    return sprintf(buf, "%s", string);
 8010dd8:	480b      	ldr	r0, [pc, #44]	; (8010e08 <json_serialize_string+0x410>)
 8010dda:	8800      	ldrh	r0, [r0, #0]
 8010ddc:	f822 0b01 	strh.w	r0, [r2], #1
                written_total += 1;
 8010de0:	3401      	adds	r4, #1
                break;
 8010de2:	e68b      	b.n	8010afc <json_serialize_string+0x104>
    for (i = 0; i < len; i++) {
 8010de4:	2002      	movs	r0, #2
 8010de6:	2900      	cmp	r1, #0
 8010de8:	f47f ae13 	bne.w	8010a12 <json_serialize_string+0x1a>
 8010dec:	e68f      	b.n	8010b0e <json_serialize_string+0x116>
 8010dee:	2401      	movs	r4, #1
 8010df0:	e68a      	b.n	8010b08 <json_serialize_string+0x110>
 8010df2:	bf00      	nop
 8010df4:	08022a50 	.word	0x08022a50
 8010df8:	08022a48 	.word	0x08022a48
 8010dfc:	08022a4c 	.word	0x08022a4c
 8010e00:	08022a54 	.word	0x08022a54
 8010e04:	08022a44 	.word	0x08022a44
 8010e08:	08022b34 	.word	0x08022b34
 8010e0c:	08022a98 	.word	0x08022a98
 8010e10:	08022a90 	.word	0x08022a90
 8010e14:	08022a88 	.word	0x08022a88
 8010e18:	08022a80 	.word	0x08022a80
 8010e1c:	08022a78 	.word	0x08022a78
 8010e20:	08022a70 	.word	0x08022a70
 8010e24:	08022a68 	.word	0x08022a68
 8010e28:	08022a60 	.word	0x08022a60
 8010e2c:	08022a58 	.word	0x08022a58

08010e30 <json_serialize_to_buffer_r>:
{
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	b085      	sub	sp, #20
 8010e36:	9203      	str	r2, [sp, #12]
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
    return value ? value->type : JSONError;
 8010e38:	b150      	cbz	r0, 8010e50 <json_serialize_to_buffer_r+0x20>
    switch (json_value_get_type(value)) {
 8010e3a:	6842      	ldr	r2, [r0, #4]
 8010e3c:	3a01      	subs	r2, #1
 8010e3e:	460c      	mov	r4, r1
 8010e40:	461f      	mov	r7, r3
 8010e42:	2a05      	cmp	r2, #5
 8010e44:	d804      	bhi.n	8010e50 <json_serialize_to_buffer_r+0x20>
 8010e46:	e8df f002 	tbb	[pc, r2]
 8010e4a:	1d13      	.short	0x1d13
 8010e4c:	08b13d2a 	.word	0x08b13d2a
 8010e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010e54:	b005      	add	sp, #20
 8010e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (json_value_get_boolean(value)) {
 8010e5a:	6883      	ldr	r3, [r0, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f000 80f3 	beq.w	8011048 <json_serialize_to_buffer_r+0x218>
    if (buf == NULL) {
 8010e62:	b15c      	cbz	r4, 8010e7c <json_serialize_to_buffer_r+0x4c>
    return sprintf(buf, "%s", string);
 8010e64:	4bba      	ldr	r3, [pc, #744]	; (8011150 <json_serialize_to_buffer_r+0x320>)
 8010e66:	6818      	ldr	r0, [r3, #0]
 8010e68:	791b      	ldrb	r3, [r3, #4]
 8010e6a:	6020      	str	r0, [r4, #0]
 8010e6c:	7123      	strb	r3, [r4, #4]
                APPEND_STRING("true");
 8010e6e:	e005      	b.n	8010e7c <json_serialize_to_buffer_r+0x4c>
    if (buf == NULL) {
 8010e70:	b124      	cbz	r4, 8010e7c <json_serialize_to_buffer_r+0x4c>
    return sprintf(buf, "%s", string);
 8010e72:	4bb8      	ldr	r3, [pc, #736]	; (8011154 <json_serialize_to_buffer_r+0x324>)
 8010e74:	6818      	ldr	r0, [r3, #0]
 8010e76:	791b      	ldrb	r3, [r3, #4]
 8010e78:	6020      	str	r0, [r4, #0]
 8010e7a:	7123      	strb	r3, [r4, #4]
            return written_total;
 8010e7c:	2004      	movs	r0, #4
}
 8010e7e:	b005      	add	sp, #20
 8010e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
}

const char * json_value_get_string(const JSON_Value *value) {
    const JSON_String *str = json_value_get_string_desc(value);
    return str ? str->chars : NULL;
 8010e84:	6883      	ldr	r3, [r0, #8]
            if (string == NULL) {
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d0e2      	beq.n	8010e50 <json_serialize_to_buffer_r+0x20>
            written = json_serialize_string(string, len, buf);
 8010e8a:	68c1      	ldr	r1, [r0, #12]
 8010e8c:	4622      	mov	r2, r4
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff fdb2 	bl	80109f8 <json_serialize_string>
            if (written < 0) {
 8010e94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
}
 8010e98:	b005      	add	sp, #20
 8010e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (parson_float_format) {
 8010e9e:	49ae      	ldr	r1, [pc, #696]	; (8011158 <json_serialize_to_buffer_r+0x328>)
    const JSON_String *str = json_value_get_string_desc(value);
    return str ? str->length : 0;
}

double json_value_get_number(const JSON_Value *value) {
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8010ea0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
            if (parson_float_format) {
 8010ea4:	6809      	ldr	r1, [r1, #0]
 8010ea6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010ea8:	2c00      	cmp	r4, #0
 8010eaa:	bf08      	it	eq
 8010eac:	4604      	moveq	r4, r0
 8010eae:	2900      	cmp	r1, #0
 8010eb0:	f000 8144 	beq.w	801113c <json_serialize_to_buffer_r+0x30c>
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f00a fb29 	bl	801b50c <siprintf>
            if (written < 0) {
 8010eba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
}
 8010ebe:	b005      	add	sp, #20
 8010ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8010ec4:	f8d0 8008 	ldr.w	r8, [r0, #8]
    return object ? object->count : 0;
 8010ec8:	f1b8 0f00 	cmp.w	r8, #0
 8010ecc:	f000 80e0 	beq.w	8011090 <json_serialize_to_buffer_r+0x260>
 8010ed0:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8010ed4:	464a      	mov	r2, r9
    if (buf == NULL) {
 8010ed6:	2c00      	cmp	r4, #0
 8010ed8:	f000 8154 	beq.w	8011184 <json_serialize_to_buffer_r+0x354>
    return sprintf(buf, "%s", string);
 8010edc:	499f      	ldr	r1, [pc, #636]	; (801115c <json_serialize_to_buffer_r+0x32c>)
 8010ede:	4625      	mov	r5, r4
 8010ee0:	8809      	ldrh	r1, [r1, #0]
 8010ee2:	f825 1b01 	strh.w	r1, [r5], #1
            if (count > 0 && is_pretty) {
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	f000 80d9 	beq.w	801109e <json_serialize_to_buffer_r+0x26e>
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f040 80ff 	bne.w	80110f0 <json_serialize_to_buffer_r+0x2c0>
 8010ef2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010ef6:	2401      	movs	r4, #1
        return (int)strlen(string);
 8010ef8:	2600      	movs	r6, #0
 8010efa:	46bb      	mov	fp, r7
    if (object == NULL || index >= json_object_get_count(object)) {
 8010efc:	4296      	cmp	r6, r2
 8010efe:	d2a7      	bcs.n	8010e50 <json_serialize_to_buffer_r+0x20>
    return object->names[index];
 8010f00:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010f04:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
                if (key == NULL) {
 8010f08:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8010f0c:	2f00      	cmp	r7, #0
 8010f0e:	d09f      	beq.n	8010e50 <json_serialize_to_buffer_r+0x20>
                if (is_pretty) {
 8010f10:	f1bb 0f00 	cmp.w	fp, #0
 8010f14:	d009      	beq.n	8010f2a <json_serialize_to_buffer_r+0xfa>
                    APPEND_INDENT(level+1);
 8010f16:	9b03      	ldr	r3, [sp, #12]
 8010f18:	4628      	mov	r0, r5
 8010f1a:	1c59      	adds	r1, r3, #1
 8010f1c:	f7ff fd44 	bl	80109a8 <append_indent>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	db95      	blt.n	8010e50 <json_serialize_to_buffer_r+0x20>
 8010f24:	b105      	cbz	r5, 8010f28 <json_serialize_to_buffer_r+0xf8>
 8010f26:	4405      	add	r5, r0
 8010f28:	4404      	add	r4, r0
                written = json_serialize_string(key, strlen(key), buf);
 8010f2a:	4638      	mov	r0, r7
 8010f2c:	f7ef f9c8 	bl	80002c0 <strlen>
 8010f30:	462a      	mov	r2, r5
 8010f32:	4601      	mov	r1, r0
 8010f34:	4638      	mov	r0, r7
 8010f36:	f7ff fd5f 	bl	80109f8 <json_serialize_string>
                if (written < 0) {
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	db88      	blt.n	8010e50 <json_serialize_to_buffer_r+0x20>
                if (buf != NULL) {
 8010f3e:	2d00      	cmp	r5, #0
 8010f40:	f000 80ce 	beq.w	80110e0 <json_serialize_to_buffer_r+0x2b0>
    return sprintf(buf, "%s", string);
 8010f44:	4b86      	ldr	r3, [pc, #536]	; (8011160 <json_serialize_to_buffer_r+0x330>)
 8010f46:	881a      	ldrh	r2, [r3, #0]
 8010f48:	522a      	strh	r2, [r5, r0]
                written_total += written;
 8010f4a:	4404      	add	r4, r0
                    buf += written;
 8010f4c:	4428      	add	r0, r5
                APPEND_STRING(":");
 8010f4e:	3401      	adds	r4, #1
 8010f50:	1c45      	adds	r5, r0, #1
                if (is_pretty) {
 8010f52:	f1bb 0f00 	cmp.w	fp, #0
 8010f56:	f040 80e6 	bne.w	8011126 <json_serialize_to_buffer_r+0x2f6>
    if (object == NULL || index >= json_object_get_count(object)) {
 8010f5a:	f8d8 2018 	ldr.w	r2, [r8, #24]
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8010f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (object == NULL || index >= json_object_get_count(object)) {
 8010f60:	4296      	cmp	r6, r2
    return object->values[index];
 8010f62:	bf3c      	itt	cc
 8010f64:	f8d8 2010 	ldrcc.w	r2, [r8, #16]
 8010f68:	f852 000a 	ldrcc.w	r0, [r2, sl]
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8010f6c:	9a03      	ldr	r2, [sp, #12]
 8010f6e:	9300      	str	r3, [sp, #0]
        return NULL;
 8010f70:	bf28      	it	cs
 8010f72:	2000      	movcs	r0, #0
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8010f74:	465b      	mov	r3, fp
 8010f76:	3201      	adds	r2, #1
 8010f78:	4629      	mov	r1, r5
 8010f7a:	f7ff ff59 	bl	8010e30 <json_serialize_to_buffer_r>
                if (written < 0) {
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	f6ff af66 	blt.w	8010e50 <json_serialize_to_buffer_r+0x20>
                if (buf != NULL) {
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	f000 80bb 	beq.w	8011100 <json_serialize_to_buffer_r+0x2d0>
                if (i < (count - 1)) {
 8010f8a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8010f8e:	42b2      	cmp	r2, r6
                    buf += written;
 8010f90:	4405      	add	r5, r0
                written_total += written;
 8010f92:	4404      	add	r4, r0
                if (i < (count - 1)) {
 8010f94:	d86d      	bhi.n	8011072 <json_serialize_to_buffer_r+0x242>
                if (is_pretty) {
 8010f96:	f1bb 0f00 	cmp.w	fp, #0
 8010f9a:	f040 80ca 	bne.w	8011132 <json_serialize_to_buffer_r+0x302>
            for (i = 0; i < count; i++) {
 8010f9e:	3601      	adds	r6, #1
 8010fa0:	454e      	cmp	r6, r9
 8010fa2:	f080 8107 	bcs.w	80111b4 <json_serialize_to_buffer_r+0x384>
    return object ? object->count : 0;
 8010fa6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010faa:	e7a7      	b.n	8010efc <json_serialize_to_buffer_r+0xcc>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8010fac:	f8d0 9008 	ldr.w	r9, [r0, #8]
    return array ? array->count : 0;
 8010fb0:	f1b9 0f00 	cmp.w	r9, #0
 8010fb4:	d063      	beq.n	801107e <json_serialize_to_buffer_r+0x24e>
 8010fb6:	f8d9 8008 	ldr.w	r8, [r9, #8]
    if (buf == NULL) {
 8010fba:	2c00      	cmp	r4, #0
 8010fbc:	f000 80c2 	beq.w	8011144 <json_serialize_to_buffer_r+0x314>
    return sprintf(buf, "%s", string);
 8010fc0:	4a68      	ldr	r2, [pc, #416]	; (8011164 <json_serialize_to_buffer_r+0x334>)
 8010fc2:	4625      	mov	r5, r4
 8010fc4:	8812      	ldrh	r2, [r2, #0]
 8010fc6:	f825 2b01 	strh.w	r2, [r5], #1
            if (count > 0 && is_pretty) {
 8010fca:	f1b8 0f00 	cmp.w	r8, #0
 8010fce:	d05d      	beq.n	801108c <json_serialize_to_buffer_r+0x25c>
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f040 80a2 	bne.w	801111a <json_serialize_to_buffer_r+0x2ea>
{
 8010fd6:	2401      	movs	r4, #1
                    APPEND_INDENT(level+1);
 8010fd8:	9b03      	ldr	r3, [sp, #12]
    return sprintf(buf, "%s", string);
 8010fda:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011174 <json_serialize_to_buffer_r+0x344>
                    APPEND_INDENT(level+1);
 8010fde:	f103 0b01 	add.w	fp, r3, #1
 8010fe2:	463b      	mov	r3, r7
 8010fe4:	2600      	movs	r6, #0
 8010fe6:	465f      	mov	r7, fp
 8010fe8:	46cb      	mov	fp, r9
 8010fea:	46c1      	mov	r9, r8
 8010fec:	4698      	mov	r8, r3
                if (is_pretty) {
 8010fee:	f1b8 0f00 	cmp.w	r8, #0
 8010ff2:	d159      	bne.n	80110a8 <json_serialize_to_buffer_r+0x278>
    if (array == NULL || index >= json_array_get_count(array)) {
 8010ff4:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010ff8:	429e      	cmp	r6, r3
 8010ffa:	d263      	bcs.n	80110c4 <json_serialize_to_buffer_r+0x294>
    return array->items[index];
 8010ffc:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011000:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8011004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	463a      	mov	r2, r7
 801100a:	4643      	mov	r3, r8
 801100c:	4629      	mov	r1, r5
 801100e:	f7ff ff0f 	bl	8010e30 <json_serialize_to_buffer_r>
                if (written < 0) {
 8011012:	2800      	cmp	r0, #0
 8011014:	f6ff af1c 	blt.w	8010e50 <json_serialize_to_buffer_r+0x20>
                if (buf != NULL) {
 8011018:	2d00      	cmp	r5, #0
 801101a:	d055      	beq.n	80110c8 <json_serialize_to_buffer_r+0x298>
                if (i < (count - 1)) {
 801101c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8011020:	42b3      	cmp	r3, r6
                    buf += written;
 8011022:	4405      	add	r5, r0
                written_total += written;
 8011024:	4404      	add	r4, r0
                if (i < (count - 1)) {
 8011026:	d817      	bhi.n	8011058 <json_serialize_to_buffer_r+0x228>
                if (is_pretty) {
 8011028:	f1b8 0f00 	cmp.w	r8, #0
 801102c:	d11c      	bne.n	8011068 <json_serialize_to_buffer_r+0x238>
            for (i = 0; i < count; i++) {
 801102e:	3601      	adds	r6, #1
 8011030:	454e      	cmp	r6, r9
 8011032:	d3dc      	bcc.n	8010fee <json_serialize_to_buffer_r+0x1be>
            if (count > 0 && is_pretty) {
 8011034:	4647      	mov	r7, r8
 8011036:	2f00      	cmp	r7, #0
 8011038:	f040 80ab 	bne.w	8011192 <json_serialize_to_buffer_r+0x362>
    if (buf == NULL) {
 801103c:	b115      	cbz	r5, 8011044 <json_serialize_to_buffer_r+0x214>
    return sprintf(buf, "%s", string);
 801103e:	4b4a      	ldr	r3, [pc, #296]	; (8011168 <json_serialize_to_buffer_r+0x338>)
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	802b      	strh	r3, [r5, #0]
            APPEND_STRING("}");
 8011044:	1c60      	adds	r0, r4, #1
            return written_total;
 8011046:	e705      	b.n	8010e54 <json_serialize_to_buffer_r+0x24>
    if (buf == NULL) {
 8011048:	b124      	cbz	r4, 8011054 <json_serialize_to_buffer_r+0x224>
    return sprintf(buf, "%s", string);
 801104a:	4b48      	ldr	r3, [pc, #288]	; (801116c <json_serialize_to_buffer_r+0x33c>)
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	889b      	ldrh	r3, [r3, #4]
 8011050:	6020      	str	r0, [r4, #0]
 8011052:	80a3      	strh	r3, [r4, #4]
                APPEND_STRING("false");
 8011054:	2005      	movs	r0, #5
 8011056:	e6fd      	b.n	8010e54 <json_serialize_to_buffer_r+0x24>
    return sprintf(buf, "%s", string);
 8011058:	f8ba 3000 	ldrh.w	r3, [sl]
 801105c:	f825 3b01 	strh.w	r3, [r5], #1
                    APPEND_STRING(",");
 8011060:	3401      	adds	r4, #1
                if (is_pretty) {
 8011062:	f1b8 0f00 	cmp.w	r8, #0
 8011066:	d0e2      	beq.n	801102e <json_serialize_to_buffer_r+0x1fe>
    return sprintf(buf, "%s", string);
 8011068:	4b41      	ldr	r3, [pc, #260]	; (8011170 <json_serialize_to_buffer_r+0x340>)
 801106a:	881b      	ldrh	r3, [r3, #0]
 801106c:	f825 3b01 	strh.w	r3, [r5], #1
                    APPEND_STRING("\n");
 8011070:	e032      	b.n	80110d8 <json_serialize_to_buffer_r+0x2a8>
    return sprintf(buf, "%s", string);
 8011072:	4a40      	ldr	r2, [pc, #256]	; (8011174 <json_serialize_to_buffer_r+0x344>)
 8011074:	8812      	ldrh	r2, [r2, #0]
 8011076:	f825 2b01 	strh.w	r2, [r5], #1
                    APPEND_STRING(",");
 801107a:	3401      	adds	r4, #1
 801107c:	e78b      	b.n	8010f96 <json_serialize_to_buffer_r+0x166>
    if (buf == NULL) {
 801107e:	2c00      	cmp	r4, #0
 8011080:	d05e      	beq.n	8011140 <json_serialize_to_buffer_r+0x310>
    return sprintf(buf, "%s", string);
 8011082:	4b38      	ldr	r3, [pc, #224]	; (8011164 <json_serialize_to_buffer_r+0x334>)
 8011084:	4625      	mov	r5, r4
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	f825 3b01 	strh.w	r3, [r5], #1
                APPEND_STRING("\n");
 801108c:	2401      	movs	r4, #1
 801108e:	e7d6      	b.n	801103e <json_serialize_to_buffer_r+0x20e>
    if (buf == NULL) {
 8011090:	2c00      	cmp	r4, #0
 8011092:	d055      	beq.n	8011140 <json_serialize_to_buffer_r+0x310>
    return sprintf(buf, "%s", string);
 8011094:	4b31      	ldr	r3, [pc, #196]	; (801115c <json_serialize_to_buffer_r+0x32c>)
 8011096:	4625      	mov	r5, r4
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	f825 3b01 	strh.w	r3, [r5], #1
            if (count > 0 && is_pretty) {
 801109e:	2401      	movs	r4, #1
    return sprintf(buf, "%s", string);
 80110a0:	4b35      	ldr	r3, [pc, #212]	; (8011178 <json_serialize_to_buffer_r+0x348>)
 80110a2:	881b      	ldrh	r3, [r3, #0]
 80110a4:	802b      	strh	r3, [r5, #0]
            APPEND_STRING("}");
 80110a6:	e7cd      	b.n	8011044 <json_serialize_to_buffer_r+0x214>
                    APPEND_INDENT(level+1);
 80110a8:	4639      	mov	r1, r7
 80110aa:	4628      	mov	r0, r5
 80110ac:	f7ff fc7c 	bl	80109a8 <append_indent>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	f6ff aecd 	blt.w	8010e50 <json_serialize_to_buffer_r+0x20>
 80110b6:	b105      	cbz	r5, 80110ba <json_serialize_to_buffer_r+0x28a>
 80110b8:	4405      	add	r5, r0
    if (array == NULL || index >= json_array_get_count(array)) {
 80110ba:	f8db 3008 	ldr.w	r3, [fp, #8]
 80110be:	429e      	cmp	r6, r3
                    APPEND_INDENT(level+1);
 80110c0:	4404      	add	r4, r0
    if (array == NULL || index >= json_array_get_count(array)) {
 80110c2:	d39b      	bcc.n	8010ffc <json_serialize_to_buffer_r+0x1cc>
        return NULL;
 80110c4:	2000      	movs	r0, #0
 80110c6:	e79d      	b.n	8011004 <json_serialize_to_buffer_r+0x1d4>
                if (i < (count - 1)) {
 80110c8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80110cc:	429e      	cmp	r6, r3
                written_total += written;
 80110ce:	4404      	add	r4, r0
                if (i < (count - 1)) {
 80110d0:	d304      	bcc.n	80110dc <json_serialize_to_buffer_r+0x2ac>
                if (is_pretty) {
 80110d2:	f1b8 0f00 	cmp.w	r8, #0
 80110d6:	d0aa      	beq.n	801102e <json_serialize_to_buffer_r+0x1fe>
                    APPEND_STRING("\n");
 80110d8:	3401      	adds	r4, #1
 80110da:	e7a8      	b.n	801102e <json_serialize_to_buffer_r+0x1fe>
                    APPEND_STRING(",");
 80110dc:	3401      	adds	r4, #1
 80110de:	e7f8      	b.n	80110d2 <json_serialize_to_buffer_r+0x2a2>
                written_total += written;
 80110e0:	4420      	add	r0, r4
                APPEND_STRING(":");
 80110e2:	1c44      	adds	r4, r0, #1
                if (is_pretty) {
 80110e4:	f1bb 0f00 	cmp.w	fp, #0
 80110e8:	f43f af37 	beq.w	8010f5a <json_serialize_to_buffer_r+0x12a>
                    APPEND_STRING(" ");
 80110ec:	3401      	adds	r4, #1
 80110ee:	e734      	b.n	8010f5a <json_serialize_to_buffer_r+0x12a>
    return sprintf(buf, "%s", string);
 80110f0:	4a1f      	ldr	r2, [pc, #124]	; (8011170 <json_serialize_to_buffer_r+0x340>)
 80110f2:	8812      	ldrh	r2, [r2, #0]
 80110f4:	802a      	strh	r2, [r5, #0]
                APPEND_STRING("\n");
 80110f6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80110fa:	1ca5      	adds	r5, r4, #2
 80110fc:	2402      	movs	r4, #2
 80110fe:	e6fb      	b.n	8010ef8 <json_serialize_to_buffer_r+0xc8>
                if (i < (count - 1)) {
 8011100:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8011104:	4296      	cmp	r6, r2
                written_total += written;
 8011106:	4404      	add	r4, r0
                if (i < (count - 1)) {
 8011108:	d305      	bcc.n	8011116 <json_serialize_to_buffer_r+0x2e6>
                if (is_pretty) {
 801110a:	f1bb 0f00 	cmp.w	fp, #0
 801110e:	f43f af46 	beq.w	8010f9e <json_serialize_to_buffer_r+0x16e>
                    APPEND_STRING("\n");
 8011112:	3401      	adds	r4, #1
 8011114:	e743      	b.n	8010f9e <json_serialize_to_buffer_r+0x16e>
                    APPEND_STRING(",");
 8011116:	3401      	adds	r4, #1
 8011118:	e7f7      	b.n	801110a <json_serialize_to_buffer_r+0x2da>
    return sprintf(buf, "%s", string);
 801111a:	4a15      	ldr	r2, [pc, #84]	; (8011170 <json_serialize_to_buffer_r+0x340>)
 801111c:	8812      	ldrh	r2, [r2, #0]
 801111e:	802a      	strh	r2, [r5, #0]
                APPEND_STRING("\n");
 8011120:	1ca5      	adds	r5, r4, #2
 8011122:	2402      	movs	r4, #2
 8011124:	e758      	b.n	8010fd8 <json_serialize_to_buffer_r+0x1a8>
    return sprintf(buf, "%s", string);
 8011126:	4b15      	ldr	r3, [pc, #84]	; (801117c <json_serialize_to_buffer_r+0x34c>)
 8011128:	881a      	ldrh	r2, [r3, #0]
 801112a:	f8a0 2001 	strh.w	r2, [r0, #1]
                    APPEND_STRING(" ");
 801112e:	1c85      	adds	r5, r0, #2
 8011130:	e7dc      	b.n	80110ec <json_serialize_to_buffer_r+0x2bc>
    return sprintf(buf, "%s", string);
 8011132:	4b0f      	ldr	r3, [pc, #60]	; (8011170 <json_serialize_to_buffer_r+0x340>)
 8011134:	881a      	ldrh	r2, [r3, #0]
 8011136:	f825 2b01 	strh.w	r2, [r5], #1
                    APPEND_STRING("\n");
 801113a:	e7ea      	b.n	8011112 <json_serialize_to_buffer_r+0x2e2>
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 801113c:	4910      	ldr	r1, [pc, #64]	; (8011180 <json_serialize_to_buffer_r+0x350>)
 801113e:	e6b9      	b.n	8010eb4 <json_serialize_to_buffer_r+0x84>
        return (int)strlen(string);
 8011140:	2401      	movs	r4, #1
 8011142:	e77f      	b.n	8011044 <json_serialize_to_buffer_r+0x214>
            if (count > 0 && is_pretty) {
 8011144:	f1b8 0f00 	cmp.w	r8, #0
 8011148:	d0fa      	beq.n	8011140 <json_serialize_to_buffer_r+0x310>
 801114a:	bb6b      	cbnz	r3, 80111a8 <json_serialize_to_buffer_r+0x378>
 801114c:	461d      	mov	r5, r3
 801114e:	e742      	b.n	8010fd6 <json_serialize_to_buffer_r+0x1a6>
 8011150:	08021a30 	.word	0x08021a30
 8011154:	08022b54 	.word	0x08022b54
 8011158:	20002c50 	.word	0x20002c50
 801115c:	08022b40 	.word	0x08022b40
 8011160:	08022b44 	.word	0x08022b44
 8011164:	08022b38 	.word	0x08022b38
 8011168:	08022b60 	.word	0x08022b60
 801116c:	08021a38 	.word	0x08021a38
 8011170:	08020870 	.word	0x08020870
 8011174:	08022b3c 	.word	0x08022b3c
 8011178:	08022b5c 	.word	0x08022b5c
 801117c:	08022b48 	.word	0x08022b48
 8011180:	08022b4c 	.word	0x08022b4c
            if (count > 0 && is_pretty) {
 8011184:	f1b9 0f00 	cmp.w	r9, #0
 8011188:	d0da      	beq.n	8011140 <json_serialize_to_buffer_r+0x310>
 801118a:	b983      	cbnz	r3, 80111ae <json_serialize_to_buffer_r+0x37e>
 801118c:	461d      	mov	r5, r3
        return (int)strlen(string);
 801118e:	2401      	movs	r4, #1
 8011190:	e6b2      	b.n	8010ef8 <json_serialize_to_buffer_r+0xc8>
                APPEND_INDENT(level);
 8011192:	9903      	ldr	r1, [sp, #12]
 8011194:	4628      	mov	r0, r5
 8011196:	f7ff fc07 	bl	80109a8 <append_indent>
 801119a:	2800      	cmp	r0, #0
 801119c:	f6ff ae58 	blt.w	8010e50 <json_serialize_to_buffer_r+0x20>
 80111a0:	b175      	cbz	r5, 80111c0 <json_serialize_to_buffer_r+0x390>
 80111a2:	4405      	add	r5, r0
 80111a4:	4404      	add	r4, r0
    if (buf == NULL) {
 80111a6:	e74a      	b.n	801103e <json_serialize_to_buffer_r+0x20e>
            if (count > 0 && is_pretty) {
 80111a8:	4625      	mov	r5, r4
 80111aa:	2402      	movs	r4, #2
 80111ac:	e714      	b.n	8010fd8 <json_serialize_to_buffer_r+0x1a8>
            if (count > 0 && is_pretty) {
 80111ae:	4625      	mov	r5, r4
 80111b0:	2402      	movs	r4, #2
 80111b2:	e6a1      	b.n	8010ef8 <json_serialize_to_buffer_r+0xc8>
            if (count > 0 && is_pretty) {
 80111b4:	465f      	mov	r7, fp
 80111b6:	b92f      	cbnz	r7, 80111c4 <json_serialize_to_buffer_r+0x394>
    if (buf == NULL) {
 80111b8:	2d00      	cmp	r5, #0
 80111ba:	f47f af71 	bne.w	80110a0 <json_serialize_to_buffer_r+0x270>
 80111be:	e741      	b.n	8011044 <json_serialize_to_buffer_r+0x214>
                APPEND_INDENT(level);
 80111c0:	4404      	add	r4, r0
    if (buf == NULL) {
 80111c2:	e73f      	b.n	8011044 <json_serialize_to_buffer_r+0x214>
                APPEND_INDENT(level);
 80111c4:	9903      	ldr	r1, [sp, #12]
 80111c6:	4628      	mov	r0, r5
 80111c8:	f7ff fbee 	bl	80109a8 <append_indent>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	f6ff ae3f 	blt.w	8010e50 <json_serialize_to_buffer_r+0x20>
 80111d2:	2d00      	cmp	r5, #0
 80111d4:	d0f4      	beq.n	80111c0 <json_serialize_to_buffer_r+0x390>
 80111d6:	4405      	add	r5, r0
 80111d8:	4404      	add	r4, r0
    if (buf == NULL) {
 80111da:	e761      	b.n	80110a0 <json_serialize_to_buffer_r+0x270>

080111dc <json_object_get_string>:
    if (object == NULL || name == NULL) {
 80111dc:	b198      	cbz	r0, 8011206 <json_object_get_string+0x2a>
const char * json_object_get_string(const JSON_Object *object, const char *name) {
 80111de:	b538      	push	{r3, r4, r5, lr}
 80111e0:	460c      	mov	r4, r1
    if (object == NULL || name == NULL) {
 80111e2:	b171      	cbz	r1, 8011202 <json_object_get_string+0x26>
    return json_object_getn_value(object, name, strlen(name));
 80111e4:	4605      	mov	r5, r0
 80111e6:	4608      	mov	r0, r1
 80111e8:	f7ef f86a 	bl	80002c0 <strlen>
 80111ec:	4621      	mov	r1, r4
 80111ee:	4602      	mov	r2, r0
 80111f0:	4628      	mov	r0, r5
 80111f2:	f7ff fa25 	bl	8010640 <json_object_getn_value>
    return value ? value->type : JSONError;
 80111f6:	b120      	cbz	r0, 8011202 <json_object_get_string+0x26>
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 80111f8:	6843      	ldr	r3, [r0, #4]
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	d101      	bne.n	8011202 <json_object_get_string+0x26>
    return str ? str->chars : NULL;
 80111fe:	6880      	ldr	r0, [r0, #8]
}
 8011200:	bd38      	pop	{r3, r4, r5, pc}
    return str ? str->chars : NULL;
 8011202:	2000      	movs	r0, #0
}
 8011204:	bd38      	pop	{r3, r4, r5, pc}
    return str ? str->chars : NULL;
 8011206:	2000      	movs	r0, #0
}
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop

0801120c <json_object_get_array>:
    if (object == NULL || name == NULL) {
 801120c:	b198      	cbz	r0, 8011236 <json_object_get_array+0x2a>
JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {
 801120e:	b538      	push	{r3, r4, r5, lr}
 8011210:	460c      	mov	r4, r1
    if (object == NULL || name == NULL) {
 8011212:	b171      	cbz	r1, 8011232 <json_object_get_array+0x26>
    return json_object_getn_value(object, name, strlen(name));
 8011214:	4605      	mov	r5, r0
 8011216:	4608      	mov	r0, r1
 8011218:	f7ef f852 	bl	80002c0 <strlen>
 801121c:	4621      	mov	r1, r4
 801121e:	4602      	mov	r2, r0
 8011220:	4628      	mov	r0, r5
 8011222:	f7ff fa0d 	bl	8010640 <json_object_getn_value>
    return value ? value->type : JSONError;
 8011226:	b120      	cbz	r0, 8011232 <json_object_get_array+0x26>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8011228:	6843      	ldr	r3, [r0, #4]
 801122a:	2b05      	cmp	r3, #5
 801122c:	d101      	bne.n	8011232 <json_object_get_array+0x26>
 801122e:	6880      	ldr	r0, [r0, #8]
}
 8011230:	bd38      	pop	{r3, r4, r5, pc}
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8011232:	2000      	movs	r0, #0
}
 8011234:	bd38      	pop	{r3, r4, r5, pc}
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8011236:	2000      	movs	r0, #0
}
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop

0801123c <json_object_dotget_value>:
JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	4604      	mov	r4, r0
 8011240:	460e      	mov	r6, r1
 8011242:	e00a      	b.n	801125a <json_object_dotget_value+0x1e>
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 8011244:	4620      	mov	r0, r4
 8011246:	f7ff f9fb 	bl	8010640 <json_object_getn_value>
    return value ? value->type : JSONError;
 801124a:	4604      	mov	r4, r0
 801124c:	b120      	cbz	r0, 8011258 <json_object_dotget_value+0x1c>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801124e:	6843      	ldr	r3, [r0, #4]
 8011250:	2b04      	cmp	r3, #4
 8011252:	bf0c      	ite	eq
 8011254:	6884      	ldreq	r4, [r0, #8]
 8011256:	2400      	movne	r4, #0
    return json_object_dotget_value(object, dot_position + 1);
 8011258:	1c6e      	adds	r6, r5, #1
    const char *dot_position = strchr(name, '.');
 801125a:	212e      	movs	r1, #46	; 0x2e
 801125c:	4630      	mov	r0, r6
 801125e:	f00a fa6f 	bl	801b740 <strchr>
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 8011262:	4631      	mov	r1, r6
    if (!dot_position) {
 8011264:	4605      	mov	r5, r0
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 8011266:	1b82      	subs	r2, r0, r6
    if (!dot_position) {
 8011268:	2800      	cmp	r0, #0
 801126a:	d1eb      	bne.n	8011244 <json_object_dotget_value+0x8>
    if (object == NULL || name == NULL) {
 801126c:	b14c      	cbz	r4, 8011282 <json_object_dotget_value+0x46>
    return json_object_getn_value(object, name, strlen(name));
 801126e:	4630      	mov	r0, r6
 8011270:	f7ef f826 	bl	80002c0 <strlen>
 8011274:	4631      	mov	r1, r6
 8011276:	4602      	mov	r2, r0
 8011278:	4620      	mov	r0, r4
}
 801127a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return json_object_getn_value(object, name, strlen(name));
 801127e:	f7ff b9df 	b.w	8010640 <json_object_getn_value>
}
 8011282:	bd70      	pop	{r4, r5, r6, pc}

08011284 <json_object_dotget_string>:
const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 8011284:	b508      	push	{r3, lr}
    return json_value_get_string(json_object_dotget_value(object, name));
 8011286:	f7ff ffd9 	bl	801123c <json_object_dotget_value>
    return value ? value->type : JSONError;
 801128a:	b120      	cbz	r0, 8011296 <json_object_dotget_string+0x12>
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 801128c:	6843      	ldr	r3, [r0, #4]
 801128e:	2b02      	cmp	r3, #2
    return str ? str->chars : NULL;
 8011290:	bf0c      	ite	eq
 8011292:	6880      	ldreq	r0, [r0, #8]
 8011294:	2000      	movne	r0, #0
}
 8011296:	bd08      	pop	{r3, pc}

08011298 <json_object_dotget_number>:
double json_object_dotget_number(const JSON_Object *object, const char *name) {
 8011298:	b508      	push	{r3, lr}
    return json_value_get_number(json_object_dotget_value(object, name));
 801129a:	f7ff ffcf 	bl	801123c <json_object_dotget_value>
    return value ? value->type : JSONError;
 801129e:	b110      	cbz	r0, 80112a6 <json_object_dotget_number+0xe>
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80112a0:	6843      	ldr	r3, [r0, #4]
 80112a2:	2b03      	cmp	r3, #3
 80112a4:	d002      	beq.n	80112ac <json_object_dotget_number+0x14>
 80112a6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80112b8 <json_object_dotget_number+0x20>
}
 80112aa:	bd08      	pop	{r3, pc}
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80112ac:	ed90 0b02 	vldr	d0, [r0, #8]
}
 80112b0:	bd08      	pop	{r3, pc}
 80112b2:	bf00      	nop
 80112b4:	f3af 8000 	nop.w
	...

080112c0 <json_object_dotget_object>:
JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
 80112c0:	b508      	push	{r3, lr}
    return json_value_get_object(json_object_dotget_value(object, name));
 80112c2:	f7ff ffbb 	bl	801123c <json_object_dotget_value>
    return value ? value->type : JSONError;
 80112c6:	b120      	cbz	r0, 80112d2 <json_object_dotget_object+0x12>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80112c8:	6843      	ldr	r3, [r0, #4]
 80112ca:	2b04      	cmp	r3, #4
 80112cc:	bf0c      	ite	eq
 80112ce:	6880      	ldreq	r0, [r0, #8]
 80112d0:	2000      	movne	r0, #0
}
 80112d2:	bd08      	pop	{r3, pc}

080112d4 <json_object_dotget_array>:
JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 80112d4:	b508      	push	{r3, lr}
    return json_value_get_array(json_object_dotget_value(object, name));
 80112d6:	f7ff ffb1 	bl	801123c <json_object_dotget_value>
    return value ? value->type : JSONError;
 80112da:	b120      	cbz	r0, 80112e6 <json_object_dotget_array+0x12>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 80112dc:	6843      	ldr	r3, [r0, #4]
 80112de:	2b05      	cmp	r3, #5
 80112e0:	bf0c      	ite	eq
 80112e2:	6880      	ldreq	r0, [r0, #8]
 80112e4:	2000      	movne	r0, #0
}
 80112e6:	bd08      	pop	{r3, pc}

080112e8 <json_object_get_count>:
    return object ? object->count : 0;
 80112e8:	b100      	cbz	r0, 80112ec <json_object_get_count+0x4>
 80112ea:	6980      	ldr	r0, [r0, #24]
}
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <json_object_get_name>:
    if (object == NULL || index >= json_object_get_count(object)) {
 80112f0:	b138      	cbz	r0, 8011302 <json_object_get_name+0x12>
 80112f2:	6983      	ldr	r3, [r0, #24]
 80112f4:	428b      	cmp	r3, r1
 80112f6:	d903      	bls.n	8011300 <json_object_get_name+0x10>
    return object->names[index];
 80112f8:	68c3      	ldr	r3, [r0, #12]
 80112fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80112fe:	4770      	bx	lr
        return NULL;
 8011300:	2000      	movs	r0, #0
}
 8011302:	4770      	bx	lr

08011304 <json_object_dothas_value>:
int json_object_dothas_value (const JSON_Object *object, const char *name) {
 8011304:	b508      	push	{r3, lr}
    return json_object_dotget_value(object, name) != NULL;
 8011306:	f7ff ff99 	bl	801123c <json_object_dotget_value>
}
 801130a:	3800      	subs	r0, #0
 801130c:	bf18      	it	ne
 801130e:	2001      	movne	r0, #1
 8011310:	bd08      	pop	{r3, pc}
 8011312:	bf00      	nop

08011314 <json_array_get_object>:
    if (array == NULL || index >= json_array_get_count(array)) {
 8011314:	b160      	cbz	r0, 8011330 <json_array_get_object+0x1c>
 8011316:	6883      	ldr	r3, [r0, #8]
 8011318:	4299      	cmp	r1, r3
 801131a:	d208      	bcs.n	801132e <json_array_get_object+0x1a>
    return array->items[index];
 801131c:	6843      	ldr	r3, [r0, #4]
 801131e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    return value ? value->type : JSONError;
 8011322:	b128      	cbz	r0, 8011330 <json_array_get_object+0x1c>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8011324:	6843      	ldr	r3, [r0, #4]
 8011326:	2b04      	cmp	r3, #4
 8011328:	d101      	bne.n	801132e <json_array_get_object+0x1a>
 801132a:	6880      	ldr	r0, [r0, #8]
 801132c:	4770      	bx	lr
 801132e:	2000      	movs	r0, #0
}
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop

08011334 <json_array_get_count>:
    return array ? array->count : 0;
 8011334:	b100      	cbz	r0, 8011338 <json_array_get_count+0x4>
 8011336:	6880      	ldr	r0, [r0, #8]
}
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop

0801133c <json_value_get_type>:
    return value ? value->type : JSONError;
 801133c:	b108      	cbz	r0, 8011342 <json_value_get_type+0x6>
 801133e:	6840      	ldr	r0, [r0, #4]
 8011340:	4770      	bx	lr
 8011342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8011346:	4770      	bx	lr

08011348 <json_value_get_object>:
    return value ? value->type : JSONError;
 8011348:	b128      	cbz	r0, 8011356 <json_value_get_object+0xe>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801134a:	6843      	ldr	r3, [r0, #4]
 801134c:	2b04      	cmp	r3, #4
 801134e:	d101      	bne.n	8011354 <json_value_get_object+0xc>
 8011350:	6880      	ldr	r0, [r0, #8]
 8011352:	4770      	bx	lr
 8011354:	2000      	movs	r0, #0
}
 8011356:	4770      	bx	lr

08011358 <json_value_get_array>:
    return value ? value->type : JSONError;
 8011358:	b128      	cbz	r0, 8011366 <json_value_get_array+0xe>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801135a:	6843      	ldr	r3, [r0, #4]
 801135c:	2b05      	cmp	r3, #5
 801135e:	d101      	bne.n	8011364 <json_value_get_array+0xc>
 8011360:	6880      	ldr	r0, [r0, #8]
 8011362:	4770      	bx	lr
 8011364:	2000      	movs	r0, #0
}
 8011366:	4770      	bx	lr

08011368 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8011368:	b570      	push	{r4, r5, r6, lr}
    return value ? value->type : JSONError;
 801136a:	4605      	mov	r5, r0
void json_value_free(JSON_Value *value) {
 801136c:	b082      	sub	sp, #8
    return value ? value->type : JSONError;
 801136e:	2800      	cmp	r0, #0
 8011370:	d031      	beq.n	80113d6 <json_value_free+0x6e>
 8011372:	6843      	ldr	r3, [r0, #4]
    switch (json_value_get_type(value)) {
 8011374:	2b04      	cmp	r3, #4
 8011376:	d00a      	beq.n	801138e <json_value_free+0x26>
 8011378:	2b05      	cmp	r3, #5
 801137a:	d017      	beq.n	80113ac <json_value_free+0x44>
 801137c:	2b02      	cmp	r3, #2
 801137e:	4c17      	ldr	r4, [pc, #92]	; (80113dc <json_value_free+0x74>)
 8011380:	d010      	beq.n	80113a4 <json_value_free+0x3c>
            json_array_free(value->value.array);
            break;
        default:
            break;
    }
    parson_free(value);
 8011382:	6863      	ldr	r3, [r4, #4]
 8011384:	4628      	mov	r0, r5
}
 8011386:	b002      	add	sp, #8
 8011388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    parson_free(value);
 801138c:	4718      	bx	r3
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 801138e:	2201      	movs	r2, #1
    parson_free(object);
 8011390:	4c12      	ldr	r4, [pc, #72]	; (80113dc <json_value_free+0x74>)
            json_object_free(value->value.object);
 8011392:	6880      	ldr	r0, [r0, #8]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8011394:	9001      	str	r0, [sp, #4]
 8011396:	4611      	mov	r1, r2
 8011398:	f000 f822 	bl	80113e0 <json_object_deinit>
    parson_free(object);
 801139c:	6863      	ldr	r3, [r4, #4]
 801139e:	9801      	ldr	r0, [sp, #4]
 80113a0:	4798      	blx	r3
}
 80113a2:	e7ee      	b.n	8011382 <json_value_free+0x1a>
            parson_free(value->value.string.chars);
 80113a4:	6880      	ldr	r0, [r0, #8]
 80113a6:	6863      	ldr	r3, [r4, #4]
 80113a8:	4798      	blx	r3
            break;
 80113aa:	e7ea      	b.n	8011382 <json_value_free+0x1a>
            json_array_free(value->value.array);
 80113ac:	6886      	ldr	r6, [r0, #8]
    for (i = 0; i < array->count; i++) {
 80113ae:	68b3      	ldr	r3, [r6, #8]
 80113b0:	b14b      	cbz	r3, 80113c6 <json_value_free+0x5e>
 80113b2:	2400      	movs	r4, #0
        json_value_free(array->items[i]);
 80113b4:	6873      	ldr	r3, [r6, #4]
 80113b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80113ba:	f7ff ffd5 	bl	8011368 <json_value_free>
    for (i = 0; i < array->count; i++) {
 80113be:	68b3      	ldr	r3, [r6, #8]
 80113c0:	3401      	adds	r4, #1
 80113c2:	429c      	cmp	r4, r3
 80113c4:	d3f6      	bcc.n	80113b4 <json_value_free+0x4c>
    parson_free(array->items);
 80113c6:	4c05      	ldr	r4, [pc, #20]	; (80113dc <json_value_free+0x74>)
 80113c8:	6870      	ldr	r0, [r6, #4]
 80113ca:	6863      	ldr	r3, [r4, #4]
 80113cc:	4798      	blx	r3
    parson_free(array);
 80113ce:	6863      	ldr	r3, [r4, #4]
 80113d0:	4630      	mov	r0, r6
 80113d2:	4798      	blx	r3
}
 80113d4:	e7d5      	b.n	8011382 <json_value_free+0x1a>
 80113d6:	4c01      	ldr	r4, [pc, #4]	; (80113dc <json_value_free+0x74>)
 80113d8:	e7d3      	b.n	8011382 <json_value_free+0x1a>
 80113da:	bf00      	nop
 80113dc:	20000308 	.word	0x20000308

080113e0 <json_object_deinit>:
    for (i = 0; i < object->count; i++) {
 80113e0:	6983      	ldr	r3, [r0, #24]
static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 80113e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e6:	4605      	mov	r5, r0
    for (i = 0; i < object->count; i++) {
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d035      	beq.n	8011458 <json_object_deinit+0x78>
 80113ec:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8011460 <json_object_deinit+0x80>
 80113f0:	460e      	mov	r6, r1
 80113f2:	4617      	mov	r7, r2
 80113f4:	2400      	movs	r4, #0
        if (free_keys) {
 80113f6:	b12e      	cbz	r6, 8011404 <json_object_deinit+0x24>
            parson_free(object->names[i]);
 80113f8:	68ea      	ldr	r2, [r5, #12]
 80113fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80113fe:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011402:	4798      	blx	r3
        if (free_values) {
 8011404:	bb17      	cbnz	r7, 801144c <json_object_deinit+0x6c>
    for (i = 0; i < object->count; i++) {
 8011406:	69ab      	ldr	r3, [r5, #24]
 8011408:	3401      	adds	r4, #1
 801140a:	42a3      	cmp	r3, r4
 801140c:	d8f3      	bhi.n	80113f6 <json_object_deinit+0x16>
    object->count = 0;
 801140e:	2400      	movs	r4, #0
    parson_free(object->cells);
 8011410:	6868      	ldr	r0, [r5, #4]
 8011412:	f8d8 3004 	ldr.w	r3, [r8, #4]
    object->cell_capacity = 0;
 8011416:	622c      	str	r4, [r5, #32]
    object->item_capacity = 0;
 8011418:	e9c5 4406 	strd	r4, r4, [r5, #24]
    parson_free(object->cells);
 801141c:	4798      	blx	r3
    parson_free(object->names);
 801141e:	68e8      	ldr	r0, [r5, #12]
 8011420:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011424:	4798      	blx	r3
    parson_free(object->values);
 8011426:	6928      	ldr	r0, [r5, #16]
 8011428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801142c:	4798      	blx	r3
    parson_free(object->cell_ixs);
 801142e:	6968      	ldr	r0, [r5, #20]
 8011430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011434:	4798      	blx	r3
    parson_free(object->hashes);
 8011436:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801143a:	68a8      	ldr	r0, [r5, #8]
 801143c:	4798      	blx	r3
    object->values = NULL;
 801143e:	e9c5 4403 	strd	r4, r4, [r5, #12]
    object->cells = NULL;
 8011442:	606c      	str	r4, [r5, #4]
    object->cell_ixs = NULL;
 8011444:	616c      	str	r4, [r5, #20]
    object->hashes = NULL;
 8011446:	60ac      	str	r4, [r5, #8]
}
 8011448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            json_value_free(object->values[i]);
 801144c:	692b      	ldr	r3, [r5, #16]
 801144e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011452:	f7ff ff89 	bl	8011368 <json_value_free>
 8011456:	e7d6      	b.n	8011406 <json_object_deinit+0x26>
 8011458:	f8df 8004 	ldr.w	r8, [pc, #4]	; 8011460 <json_object_deinit+0x80>
 801145c:	e7d7      	b.n	801140e <json_object_deinit+0x2e>
 801145e:	bf00      	nop
 8011460:	20000308 	.word	0x20000308

08011464 <json_object_grow_and_rehash>:
static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8011464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011468:	4605      	mov	r5, r0
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 801146a:	6a00      	ldr	r0, [r0, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 801146c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011594 <json_object_grow_and_rehash+0x130>
    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8011470:	4e49      	ldr	r6, [pc, #292]	; (8011598 <json_object_grow_and_rehash+0x134>)
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8011472:	0040      	lsls	r0, r0, #1
 8011474:	2810      	cmp	r0, #16
 8011476:	bf38      	it	cc
 8011478:	2010      	movcc	r0, #16
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 801147a:	ee07 0a90 	vmov	s15, r0
 801147e:	eef8 7a67 	vcvt.f32.u32	s15, s15
static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8011482:	b08a      	sub	sp, #40	; 0x28
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8011484:	ee67 7a87 	vmul.f32	s15, s15, s14
    object->cells = NULL;
 8011488:	2400      	movs	r4, #0
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 801148a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 801148e:	6833      	ldr	r3, [r6, #0]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8011490:	edcd 7a08 	vstr	s15, [sp, #32]
    object->cell_capacity = capacity;
 8011494:	9009      	str	r0, [sp, #36]	; 0x24
    object->values = NULL;
 8011496:	e9cd 4404 	strd	r4, r4, [sp, #16]
    object->cells = NULL;
 801149a:	9402      	str	r4, [sp, #8]
    object->cell_ixs = NULL;
 801149c:	9406      	str	r4, [sp, #24]
    object->hashes = NULL;
 801149e:	9403      	str	r4, [sp, #12]
    object->count = 0;
 80114a0:	9407      	str	r4, [sp, #28]
    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 80114a2:	0080      	lsls	r0, r0, #2
 80114a4:	4798      	blx	r3
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80114a6:	9b08      	ldr	r3, [sp, #32]
    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 80114a8:	9002      	str	r0, [sp, #8]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80114aa:	0098      	lsls	r0, r3, #2
 80114ac:	6833      	ldr	r3, [r6, #0]
 80114ae:	4798      	blx	r3
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80114b0:	9b08      	ldr	r3, [sp, #32]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80114b2:	9004      	str	r0, [sp, #16]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80114b4:	0098      	lsls	r0, r3, #2
 80114b6:	6833      	ldr	r3, [r6, #0]
 80114b8:	4798      	blx	r3
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80114ba:	9b08      	ldr	r3, [sp, #32]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80114bc:	9005      	str	r0, [sp, #20]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80114be:	0098      	lsls	r0, r3, #2
 80114c0:	6833      	ldr	r3, [r6, #0]
 80114c2:	4798      	blx	r3
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80114c4:	9b08      	ldr	r3, [sp, #32]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80114c6:	9006      	str	r0, [sp, #24]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80114c8:	0098      	lsls	r0, r3, #2
 80114ca:	6833      	ldr	r3, [r6, #0]
 80114cc:	4798      	blx	r3
    if (object->cells == NULL
 80114ce:	9b02      	ldr	r3, [sp, #8]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80114d0:	9003      	str	r0, [sp, #12]
    if (object->cells == NULL
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d04b      	beq.n	801156e <json_object_grow_and_rehash+0x10a>
        || object->names == NULL
 80114d6:	9a04      	ldr	r2, [sp, #16]
 80114d8:	2a00      	cmp	r2, #0
 80114da:	d048      	beq.n	801156e <json_object_grow_and_rehash+0x10a>
        || object->values == NULL
 80114dc:	9a05      	ldr	r2, [sp, #20]
 80114de:	2a00      	cmp	r2, #0
 80114e0:	d045      	beq.n	801156e <json_object_grow_and_rehash+0x10a>
        || object->cell_ixs == NULL
 80114e2:	9a06      	ldr	r2, [sp, #24]
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	d042      	beq.n	801156e <json_object_grow_and_rehash+0x10a>
        || object->hashes == NULL) {
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d040      	beq.n	801156e <json_object_grow_and_rehash+0x10a>
    for (i = 0; i < object->cell_capacity; i++) {
 80114ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114ee:	b14a      	cbz	r2, 8011504 <json_object_grow_and_rehash+0xa0>
 80114f0:	1f18      	subs	r0, r3, #4
        object->cells[i] = OBJECT_INVALID_IX;
 80114f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    for (i = 0; i < object->cell_capacity; i++) {
 80114f6:	4623      	mov	r3, r4
        object->cells[i] = OBJECT_INVALID_IX;
 80114f8:	f840 1f04 	str.w	r1, [r0, #4]!
    for (i = 0; i < object->cell_capacity; i++) {
 80114fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114fe:	3301      	adds	r3, #1
 8011500:	4293      	cmp	r3, r2
 8011502:	d3f9      	bcc.n	80114f8 <json_object_grow_and_rehash+0x94>
    for (i = 0; i < object->count; i++) {
 8011504:	69ab      	ldr	r3, [r5, #24]
    return object->wrapping_value;
 8011506:	f8d5 8000 	ldr.w	r8, [r5]
    new_object.wrapping_value = wrapping_value;
 801150a:	f8cd 8004 	str.w	r8, [sp, #4]
    for (i = 0; i < object->count; i++) {
 801150e:	af01      	add	r7, sp, #4
 8011510:	b1f3      	cbz	r3, 8011550 <json_object_grow_and_rehash+0xec>
 8011512:	2400      	movs	r4, #0
 8011514:	af01      	add	r7, sp, #4
 8011516:	e004      	b.n	8011522 <json_object_grow_and_rehash+0xbe>
 8011518:	69ab      	ldr	r3, [r5, #24]
        value->parent = wrapping_value;
 801151a:	f8c6 8000 	str.w	r8, [r6]
    for (i = 0; i < object->count; i++) {
 801151e:	42a3      	cmp	r3, r4
 8011520:	d916      	bls.n	8011550 <json_object_grow_and_rehash+0xec>
        key = object->names[i];
 8011522:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
        value = object->values[i];
 8011526:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
        res = json_object_add(&new_object, key, value);
 801152a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801152e:	4632      	mov	r2, r6
 8011530:	4638      	mov	r0, r7
    for (i = 0; i < object->count; i++) {
 8011532:	3401      	adds	r4, #1
        res = json_object_add(&new_object, key, value);
 8011534:	f000 f832 	bl	801159c <json_object_add>
        if (res != JSONSuccess) {
 8011538:	2800      	cmp	r0, #0
 801153a:	d0ed      	beq.n	8011518 <json_object_grow_and_rehash+0xb4>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 801153c:	2200      	movs	r2, #0
 801153e:	4638      	mov	r0, r7
 8011540:	4611      	mov	r1, r2
 8011542:	f7ff ff4d 	bl	80113e0 <json_object_deinit>
            return JSONFailure;
 8011546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801154a:	b00a      	add	sp, #40	; 0x28
 801154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8011550:	2200      	movs	r2, #0
 8011552:	4628      	mov	r0, r5
 8011554:	4611      	mov	r1, r2
 8011556:	f7ff ff43 	bl	80113e0 <json_object_deinit>
    *object = new_object;
 801155a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801155c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801155e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8011566:	2000      	movs	r0, #0
}
 8011568:	b00a      	add	sp, #40	; 0x28
 801156a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    parson_free(object->cells);
 801156e:	4618      	mov	r0, r3
 8011570:	6873      	ldr	r3, [r6, #4]
 8011572:	4798      	blx	r3
    parson_free(object->names);
 8011574:	9804      	ldr	r0, [sp, #16]
 8011576:	6873      	ldr	r3, [r6, #4]
 8011578:	4798      	blx	r3
    parson_free(object->values);
 801157a:	9805      	ldr	r0, [sp, #20]
 801157c:	6873      	ldr	r3, [r6, #4]
 801157e:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8011580:	9806      	ldr	r0, [sp, #24]
 8011582:	6873      	ldr	r3, [r6, #4]
 8011584:	4798      	blx	r3
    parson_free(object->hashes);
 8011586:	9803      	ldr	r0, [sp, #12]
 8011588:	6873      	ldr	r3, [r6, #4]
 801158a:	4798      	blx	r3
        return JSONFailure;
 801158c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011590:	e7ea      	b.n	8011568 <json_object_grow_and_rehash+0x104>
 8011592:	bf00      	nop
 8011594:	3f333333 	.word	0x3f333333
 8011598:	20000308 	.word	0x20000308

0801159c <json_object_add>:
static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 801159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	b084      	sub	sp, #16
    parson_bool_t found = PARSON_FALSE;
 80115a2:	2300      	movs	r3, #0
 80115a4:	9303      	str	r3, [sp, #12]
    if (!object || !name || !value) {
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d057      	beq.n	801165a <json_object_add+0xbe>
 80115aa:	460f      	mov	r7, r1
 80115ac:	2900      	cmp	r1, #0
 80115ae:	d054      	beq.n	801165a <json_object_add+0xbe>
 80115b0:	4690      	mov	r8, r2
 80115b2:	2a00      	cmp	r2, #0
 80115b4:	d051      	beq.n	801165a <json_object_add+0xbe>
    hash = hash_string(name, strlen(name));
 80115b6:	4606      	mov	r6, r0
 80115b8:	4608      	mov	r0, r1
 80115ba:	f7ee fe81 	bl	80002c0 <strlen>
    for (i = 0; i < n; i++) {
 80115be:	4602      	mov	r2, r0
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d047      	beq.n	8011654 <json_object_add+0xb8>
 80115c4:	1e7b      	subs	r3, r7, #1
 80115c6:	eb03 0e00 	add.w	lr, r3, r0
    unsigned long hash = 5381;
 80115ca:	f241 5405 	movw	r4, #5381	; 0x1505
 80115ce:	e003      	b.n	80115d8 <json_object_add+0x3c>
    for (i = 0; i < n; i++) {
 80115d0:	459e      	cmp	lr, r3
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 80115d2:	eb05 040c 	add.w	r4, r5, ip
    for (i = 0; i < n; i++) {
 80115d6:	d005      	beq.n	80115e4 <json_object_add+0x48>
        c = string[i];
 80115d8:	f813 5f01 	ldrb.w	r5, [r3, #1]!
        if (c == '\0') {
 80115dc:	eb04 1c44 	add.w	ip, r4, r4, lsl #5
 80115e0:	2d00      	cmp	r5, #0
 80115e2:	d1f5      	bne.n	80115d0 <json_object_add+0x34>
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80115e4:	ab03      	add	r3, sp, #12
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	4639      	mov	r1, r7
 80115ea:	4623      	mov	r3, r4
 80115ec:	4630      	mov	r0, r6
 80115ee:	f7fe ffdf 	bl	80105b0 <json_object_get_cell_ix>
    if (found) {
 80115f2:	9d03      	ldr	r5, [sp, #12]
 80115f4:	bb8d      	cbnz	r5, 801165a <json_object_add+0xbe>
    if (object->count >= object->item_capacity) {
 80115f6:	e9d6 3206 	ldrd	r3, r2, [r6, #24]
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d219      	bcs.n	8011632 <json_object_add+0x96>
    object->names[object->count] = name;
 80115fe:	68f2      	ldr	r2, [r6, #12]
 8011600:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
    object->cells[cell_ix] = object->count;
 8011604:	6872      	ldr	r2, [r6, #4]
 8011606:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    object->values[object->count] = value;
 801160a:	6932      	ldr	r2, [r6, #16]
 801160c:	69b3      	ldr	r3, [r6, #24]
 801160e:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
    object->cell_ixs[object->count] = cell_ix;
 8011612:	6972      	ldr	r2, [r6, #20]
 8011614:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    object->hashes[object->count] = hash;
 8011618:	68b2      	ldr	r2, [r6, #8]
 801161a:	69b3      	ldr	r3, [r6, #24]
 801161c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    object->count++;
 8011620:	3301      	adds	r3, #1
 8011622:	61b3      	str	r3, [r6, #24]
    value->parent = json_object_get_wrapping_value(object);
 8011624:	6833      	ldr	r3, [r6, #0]
 8011626:	f8c8 3000 	str.w	r3, [r8]
}
 801162a:	4628      	mov	r0, r5
 801162c:	b004      	add	sp, #16
 801162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        res = json_object_grow_and_rehash(object);
 8011632:	4630      	mov	r0, r6
 8011634:	f7ff ff16 	bl	8011464 <json_object_grow_and_rehash>
        if (res != JSONSuccess) {
 8011638:	b978      	cbnz	r0, 801165a <json_object_add+0xbe>
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 801163a:	4638      	mov	r0, r7
 801163c:	f7ee fe40 	bl	80002c0 <strlen>
 8011640:	ab03      	add	r3, sp, #12
 8011642:	4602      	mov	r2, r0
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	4639      	mov	r1, r7
 8011648:	4623      	mov	r3, r4
 801164a:	4630      	mov	r0, r6
 801164c:	f7fe ffb0 	bl	80105b0 <json_object_get_cell_ix>
    object->names[object->count] = name;
 8011650:	69b3      	ldr	r3, [r6, #24]
 8011652:	e7d4      	b.n	80115fe <json_object_add+0x62>
    unsigned long hash = 5381;
 8011654:	f241 5405 	movw	r4, #5381	; 0x1505
 8011658:	e7c4      	b.n	80115e4 <json_object_add+0x48>
        return JSONFailure;
 801165a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801165e:	e7e4      	b.n	801162a <json_object_add+0x8e>

08011660 <json_object_remove_internal>:
static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, parson_bool_t free_value) {
 8011660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	b087      	sub	sp, #28
    parson_bool_t found = PARSON_FALSE;
 8011666:	2300      	movs	r3, #0
 8011668:	9305      	str	r3, [sp, #20]
    if (object == NULL) {
 801166a:	2800      	cmp	r0, #0
 801166c:	f000 809f 	beq.w	80117ae <json_object_remove_internal+0x14e>
    hash = hash_string(name, strlen(name));
 8011670:	4605      	mov	r5, r0
 8011672:	4608      	mov	r0, r1
 8011674:	4617      	mov	r7, r2
 8011676:	9103      	str	r1, [sp, #12]
 8011678:	f7ee fe22 	bl	80002c0 <strlen>
    for (i = 0; i < n; i++) {
 801167c:	9903      	ldr	r1, [sp, #12]
 801167e:	4602      	mov	r2, r0
 8011680:	2800      	cmp	r0, #0
 8011682:	f000 808e 	beq.w	80117a2 <json_object_remove_internal+0x142>
 8011686:	1e4c      	subs	r4, r1, #1
 8011688:	eb04 0e00 	add.w	lr, r4, r0
    unsigned long hash = 5381;
 801168c:	f241 5305 	movw	r3, #5381	; 0x1505
 8011690:	e003      	b.n	801169a <json_object_remove_internal+0x3a>
    for (i = 0; i < n; i++) {
 8011692:	45a6      	cmp	lr, r4
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8011694:	eb06 030c 	add.w	r3, r6, ip
    for (i = 0; i < n; i++) {
 8011698:	d005      	beq.n	80116a6 <json_object_remove_internal+0x46>
        c = string[i];
 801169a:	f814 6f01 	ldrb.w	r6, [r4, #1]!
        if (c == '\0') {
 801169e:	eb03 1c43 	add.w	ip, r3, r3, lsl #5
 80116a2:	2e00      	cmp	r6, #0
 80116a4:	d1f5      	bne.n	8011692 <json_object_remove_internal+0x32>
    cell = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80116a6:	a805      	add	r0, sp, #20
 80116a8:	9000      	str	r0, [sp, #0]
 80116aa:	4628      	mov	r0, r5
 80116ac:	f7fe ff80 	bl	80105b0 <json_object_get_cell_ix>
    if (!found) {
 80116b0:	9b05      	ldr	r3, [sp, #20]
    cell = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80116b2:	4604      	mov	r4, r0
    if (!found) {
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d07a      	beq.n	80117ae <json_object_remove_internal+0x14e>
    item_ix = object->cells[cell];
 80116b8:	686b      	ldr	r3, [r5, #4]
 80116ba:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 80116be:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
    if (free_value) {
 80116c2:	2f00      	cmp	r7, #0
 80116c4:	d165      	bne.n	8011792 <json_object_remove_internal+0x132>
        val = object->values[item_ix];
 80116c6:	ea4f 0788 	mov.w	r7, r8, lsl #2
    parson_free(object->names[item_ix]);
 80116ca:	68eb      	ldr	r3, [r5, #12]
 80116cc:	59d8      	ldr	r0, [r3, r7]
 80116ce:	4b39      	ldr	r3, [pc, #228]	; (80117b4 <json_object_remove_internal+0x154>)
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	4798      	blx	r3
    last_item_ix = object->count - 1;
 80116d4:	69ab      	ldr	r3, [r5, #24]
 80116d6:	3b01      	subs	r3, #1
    if (item_ix < last_item_ix) {
 80116d8:	4598      	cmp	r8, r3
 80116da:	d33d      	bcc.n	8011758 <json_object_remove_internal+0xf8>
        object->cells[object->cell_ixs[item_ix]] = item_ix;
 80116dc:	6868      	ldr	r0, [r5, #4]
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 80116de:	f8d5 e020 	ldr.w	lr, [r5, #32]
    object->count--;
 80116e2:	61ab      	str	r3, [r5, #24]
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 80116e4:	f1be 0301 	subs.w	r3, lr, #1
 80116e8:	d05e      	beq.n	80117a8 <json_object_remove_internal+0x148>
    i = cell;
 80116ea:	4622      	mov	r2, r4
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 80116ec:	2600      	movs	r6, #0
 80116ee:	e012      	b.n	8011716 <json_object_remove_internal+0xb6>
        if ((j > i && (k <= i || k > j))
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d901      	bls.n	80116f8 <json_object_remove_internal+0x98>
         || (j < i && (k <= i && k > j))) {
 80116f4:	429c      	cmp	r4, r3
 80116f6:	d220      	bcs.n	801173a <json_object_remove_internal+0xda>
            object->cell_ixs[object->cells[j]] = i;
 80116f8:	696b      	ldr	r3, [r5, #20]
 80116fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            object->cells[i] = object->cells[j];
 80116fe:	f8dc 3000 	ldr.w	r3, [ip]
 8011702:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
            i = j;
 8011706:	f8d5 e020 	ldr.w	lr, [r5, #32]
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 801170a:	3601      	adds	r6, #1
 801170c:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8011710:	42b3      	cmp	r3, r6
        j = (j + 1) & (object->cell_capacity - 1);
 8011712:	4622      	mov	r2, r4
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 8011714:	d918      	bls.n	8011748 <json_object_remove_internal+0xe8>
        j = (j + 1) & (object->cell_capacity - 1);
 8011716:	3401      	adds	r4, #1
 8011718:	401c      	ands	r4, r3
        if (object->cells[j] == OBJECT_INVALID_IX) {
 801171a:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801171e:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8011722:	1c4f      	adds	r7, r1, #1
 8011724:	d032      	beq.n	801178c <json_object_remove_internal+0x12c>
        k = object->hashes[object->cells[j]] & (object->cell_capacity - 1);
 8011726:	68af      	ldr	r7, [r5, #8]
 8011728:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
        if ((j > i && (k <= i || k > j))
 801172c:	4294      	cmp	r4, r2
        k = object->hashes[object->cells[j]] & (object->cell_capacity - 1);
 801172e:	ea03 0307 	and.w	r3, r3, r7
        if ((j > i && (k <= i || k > j))
 8011732:	d8dd      	bhi.n	80116f0 <json_object_remove_internal+0x90>
         || (j < i && (k <= i && k > j))) {
 8011734:	d201      	bcs.n	801173a <json_object_remove_internal+0xda>
 8011736:	4293      	cmp	r3, r2
 8011738:	d9dc      	bls.n	80116f4 <json_object_remove_internal+0x94>
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 801173a:	3601      	adds	r6, #1
 801173c:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8011740:	42b3      	cmp	r3, r6
            object->cells[i] = object->cells[j];
 8011742:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    for (x = 0; x < (object->cell_capacity - 1); x++) {
 8011746:	d8e6      	bhi.n	8011716 <json_object_remove_internal+0xb6>
    object->cells[i] = OBJECT_INVALID_IX;
 8011748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801174c:	f8cc 3000 	str.w	r3, [ip]
    return JSONSuccess;
 8011750:	2000      	movs	r0, #0
}
 8011752:	b007      	add	sp, #28
 8011754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        object->values[item_ix] = object->values[last_item_ix];
 8011758:	e9d5 a903 	ldrd	sl, r9, [r5, #12]
        object->cell_ixs[item_ix] = object->cell_ixs[last_item_ix];
 801175c:	f8d5 e014 	ldr.w	lr, [r5, #20]
        object->hashes[item_ix] = object->hashes[last_item_ix];
 8011760:	68aa      	ldr	r2, [r5, #8]
        object->names[item_ix] = object->names[last_item_ix];
 8011762:	f85a 6023 	ldr.w	r6, [sl, r3, lsl #2]
        object->cell_ixs[item_ix] = object->cell_ixs[last_item_ix];
 8011766:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
        object->cells[object->cell_ixs[item_ix]] = item_ix;
 801176a:	6868      	ldr	r0, [r5, #4]
        object->names[item_ix] = object->names[last_item_ix];
 801176c:	f84a 6007 	str.w	r6, [sl, r7]
        object->values[item_ix] = object->values[last_item_ix];
 8011770:	f859 6023 	ldr.w	r6, [r9, r3, lsl #2]
        object->hashes[item_ix] = object->hashes[last_item_ix];
 8011774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        object->values[item_ix] = object->values[last_item_ix];
 8011778:	f849 6007 	str.w	r6, [r9, r7]
        object->cell_ixs[item_ix] = object->cell_ixs[last_item_ix];
 801177c:	f84e 1007 	str.w	r1, [lr, r7]
        object->hashes[item_ix] = object->hashes[last_item_ix];
 8011780:	51d3      	str	r3, [r2, r7]
        object->cells[object->cell_ixs[item_ix]] = item_ix;
 8011782:	f840 8021 	str.w	r8, [r0, r1, lsl #2]
    object->count--;
 8011786:	69ab      	ldr	r3, [r5, #24]
 8011788:	3b01      	subs	r3, #1
 801178a:	e7a8      	b.n	80116de <json_object_remove_internal+0x7e>
            object->cells[i] = object->cells[j];
 801178c:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8011790:	e7da      	b.n	8011748 <json_object_remove_internal+0xe8>
        val = object->values[item_ix];
 8011792:	692b      	ldr	r3, [r5, #16]
        json_value_free(val);
 8011794:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
        val = object->values[item_ix];
 8011798:	ea4f 0788 	mov.w	r7, r8, lsl #2
        json_value_free(val);
 801179c:	f7ff fde4 	bl	8011368 <json_value_free>
        val = NULL;
 80117a0:	e793      	b.n	80116ca <json_object_remove_internal+0x6a>
    unsigned long hash = 5381;
 80117a2:	f241 5305 	movw	r3, #5381	; 0x1505
 80117a6:	e77e      	b.n	80116a6 <json_object_remove_internal+0x46>
    object->cells[i] = OBJECT_INVALID_IX;
 80117a8:	eb00 0c0b 	add.w	ip, r0, fp
 80117ac:	e7cc      	b.n	8011748 <json_object_remove_internal+0xe8>
        return JSONFailure;
 80117ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117b2:	e7ce      	b.n	8011752 <json_object_remove_internal+0xf2>
 80117b4:	20000308 	.word	0x20000308

080117b8 <json_object_dotremove_internal>:
static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, parson_bool_t free_value) {
 80117b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ba:	4606      	mov	r6, r0
 80117bc:	460d      	mov	r5, r1
 80117be:	4617      	mov	r7, r2
 80117c0:	e008      	b.n	80117d4 <json_object_dotremove_internal+0x1c>
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 80117c2:	f7fe ff3d 	bl	8010640 <json_object_getn_value>
    return value ? value->type : JSONError;
 80117c6:	b1a0      	cbz	r0, 80117f2 <json_object_dotremove_internal+0x3a>
    if (json_value_get_type(temp_value) != JSONObject) {
 80117c8:	6843      	ldr	r3, [r0, #4]
 80117ca:	2b04      	cmp	r3, #4
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 80117cc:	f104 0501 	add.w	r5, r4, #1
    if (json_value_get_type(temp_value) != JSONObject) {
 80117d0:	d10f      	bne.n	80117f2 <json_object_dotremove_internal+0x3a>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80117d2:	6886      	ldr	r6, [r0, #8]
    const char *dot_pos = strchr(name, '.');
 80117d4:	212e      	movs	r1, #46	; 0x2e
 80117d6:	4628      	mov	r0, r5
 80117d8:	f009 ffb2 	bl	801b740 <strchr>
 80117dc:	4604      	mov	r4, r0
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 80117de:	4629      	mov	r1, r5
 80117e0:	4630      	mov	r0, r6
 80117e2:	1b62      	subs	r2, r4, r5
    if (!dot_pos) {
 80117e4:	2c00      	cmp	r4, #0
 80117e6:	d1ec      	bne.n	80117c2 <json_object_dotremove_internal+0xa>
        return json_object_remove_internal(object, name, free_value);
 80117e8:	463a      	mov	r2, r7
}
 80117ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return json_object_remove_internal(object, name, free_value);
 80117ee:	f7ff bf37 	b.w	8011660 <json_object_remove_internal>
}
 80117f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117f8 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 80117f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80117fa:	4f10      	ldr	r7, [pc, #64]	; (801183c <json_value_init_object+0x44>)
 80117fc:	2010      	movs	r0, #16
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	4798      	blx	r3
    if (!new_value) {
 8011802:	4605      	mov	r5, r0
 8011804:	b190      	cbz	r0, 801182c <json_value_init_object+0x34>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONObject;
 8011806:	2204      	movs	r2, #4
    new_value->parent = NULL;
 8011808:	2600      	movs	r6, #0
    new_value->type = JSONObject;
 801180a:	e9c0 6200 	strd	r6, r2, [r0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	2024      	movs	r0, #36	; 0x24
 8011812:	4798      	blx	r3
    if (new_obj == NULL) {
 8011814:	4604      	mov	r4, r0
 8011816:	b158      	cbz	r0, 8011830 <json_value_init_object+0x38>
    object->cells = NULL;
 8011818:	e9c0 5600 	strd	r5, r6, [r0]
    object->values = NULL;
 801181c:	e9c0 6603 	strd	r6, r6, [r0, #12]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8011820:	e9c0 6607 	strd	r6, r6, [r0, #28]
    object->cell_ixs = NULL;
 8011824:	6146      	str	r6, [r0, #20]
    object->hashes = NULL;
 8011826:	6086      	str	r6, [r0, #8]
    object->count = 0;
 8011828:	6186      	str	r6, [r0, #24]
    new_value->value.object = json_object_make(new_value);
 801182a:	60a8      	str	r0, [r5, #8]
    if (!new_value->value.object) {
        parson_free(new_value);
        return NULL;
    }
    return new_value;
}
 801182c:	4628      	mov	r0, r5
 801182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_value->value.object = json_object_make(new_value);
 8011830:	60a8      	str	r0, [r5, #8]
        parson_free(new_value);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4628      	mov	r0, r5
 8011836:	4798      	blx	r3
        return NULL;
 8011838:	4625      	mov	r5, r4
 801183a:	e7f7      	b.n	801182c <json_value_init_object+0x34>
 801183c:	20000308 	.word	0x20000308

08011840 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 8011840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011842:	4f0e      	ldr	r7, [pc, #56]	; (801187c <json_value_init_array+0x3c>)
 8011844:	2010      	movs	r0, #16
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	4798      	blx	r3
    if (!new_value) {
 801184a:	4604      	mov	r4, r0
 801184c:	b168      	cbz	r0, 801186a <json_value_init_array+0x2a>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONArray;
 801184e:	2205      	movs	r2, #5
    new_value->parent = NULL;
 8011850:	2600      	movs	r6, #0
    new_value->type = JSONArray;
 8011852:	e9c0 6200 	strd	r6, r2, [r0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	2010      	movs	r0, #16
 801185a:	4798      	blx	r3
    if (new_array == NULL) {
 801185c:	4605      	mov	r5, r0
 801185e:	b130      	cbz	r0, 801186e <json_value_init_array+0x2e>
    new_array->items = (JSON_Value**)NULL;
 8011860:	e9c0 4600 	strd	r4, r6, [r0]
    new_array->count = 0;
 8011864:	e9c0 6602 	strd	r6, r6, [r0, #8]
    new_value->value.array = json_array_make(new_value);
 8011868:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
        parson_free(new_value);
        return NULL;
    }
    return new_value;
}
 801186a:	4620      	mov	r0, r4
 801186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_value->value.array = json_array_make(new_value);
 801186e:	60a0      	str	r0, [r4, #8]
        parson_free(new_value);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4620      	mov	r0, r4
 8011874:	4798      	blx	r3
        return NULL;
 8011876:	462c      	mov	r4, r5
 8011878:	e7f7      	b.n	801186a <json_value_init_array+0x2a>
 801187a:	bf00      	nop
 801187c:	20000308 	.word	0x20000308

08011880 <parse_value.part.0>:
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8011880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SKIP_WHITESPACES(string);
 8011884:	6804      	ldr	r4, [r0, #0]
 8011886:	4e83      	ldr	r6, [pc, #524]	; (8011a94 <parse_value.part.0+0x214>)
 8011888:	7823      	ldrb	r3, [r4, #0]
 801188a:	5cf2      	ldrb	r2, [r6, r3]
 801188c:	0712      	lsls	r2, r2, #28
static JSON_Value * parse_value(const char **string, size_t nesting) {
 801188e:	b083      	sub	sp, #12
 8011890:	4605      	mov	r5, r0
 8011892:	460f      	mov	r7, r1
    SKIP_WHITESPACES(string);
 8011894:	d505      	bpl.n	80118a2 <parse_value.part.0+0x22>
 8011896:	3401      	adds	r4, #1
 8011898:	602c      	str	r4, [r5, #0]
 801189a:	7823      	ldrb	r3, [r4, #0]
 801189c:	5cf2      	ldrb	r2, [r6, r3]
 801189e:	0710      	lsls	r0, r2, #28
 80118a0:	d4f9      	bmi.n	8011896 <parse_value.part.0+0x16>
    switch (**string) {
 80118a2:	2b7b      	cmp	r3, #123	; 0x7b
 80118a4:	d82e      	bhi.n	8011904 <parse_value.part.0+0x84>
 80118a6:	2b5a      	cmp	r3, #90	; 0x5a
 80118a8:	d932      	bls.n	8011910 <parse_value.part.0+0x90>
 80118aa:	3b5b      	subs	r3, #91	; 0x5b
 80118ac:	2b20      	cmp	r3, #32
 80118ae:	d829      	bhi.n	8011904 <parse_value.part.0+0x84>
 80118b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80118b4:	002800fc 	.word	0x002800fc
 80118b8:	00280028 	.word	0x00280028
 80118bc:	00280028 	.word	0x00280028
 80118c0:	00280028 	.word	0x00280028
 80118c4:	00280028 	.word	0x00280028
 80118c8:	00cf0028 	.word	0x00cf0028
 80118cc:	00280028 	.word	0x00280028
 80118d0:	00280028 	.word	0x00280028
 80118d4:	00280028 	.word	0x00280028
 80118d8:	01730028 	.word	0x01730028
 80118dc:	00280028 	.word	0x00280028
 80118e0:	00280028 	.word	0x00280028
 80118e4:	00cf0028 	.word	0x00cf0028
 80118e8:	00280028 	.word	0x00280028
 80118ec:	00280028 	.word	0x00280028
 80118f0:	00280028 	.word	0x00280028
 80118f4:	018a      	.short	0x018a
            parson_free(new_key);
 80118f6:	4b68      	ldr	r3, [pc, #416]	; (8011a98 <parse_value.part.0+0x218>)
 80118f8:	4638      	mov	r0, r7
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	4798      	blx	r3
        json_value_free(output_value);
 80118fe:	4658      	mov	r0, fp
 8011900:	f7ff fd32 	bl	8011368 <json_value_free>
        return NULL;
 8011904:	f04f 0b00 	mov.w	fp, #0
}
 8011908:	4658      	mov	r0, fp
 801190a:	b003      	add	sp, #12
 801190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (**string) {
 8011910:	2b2d      	cmp	r3, #45	; 0x2d
 8011912:	d003      	beq.n	801191c <parse_value.part.0+0x9c>
 8011914:	d97e      	bls.n	8011a14 <parse_value.part.0+0x194>
 8011916:	3b30      	subs	r3, #48	; 0x30
 8011918:	2b09      	cmp	r3, #9
 801191a:	d8f3      	bhi.n	8011904 <parse_value.part.0+0x84>
    errno = 0;
 801191c:	f009 ff8a 	bl	801b834 <__errno>
 8011920:	4603      	mov	r3, r0
 8011922:	2200      	movs	r2, #0
    number = strtod(*string, &end);
 8011924:	6828      	ldr	r0, [r5, #0]
    errno = 0;
 8011926:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 8011928:	a901      	add	r1, sp, #4
 801192a:	f008 fde3 	bl	801a4f4 <strtod>
 801192e:	ec57 6b10 	vmov	r6, r7, d0
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 8011932:	f009 ff7f 	bl	801b834 <__errno>
 8011936:	6803      	ldr	r3, [r0, #0]
 8011938:	2b22      	cmp	r3, #34	; 0x22
 801193a:	d112      	bne.n	8011962 <parse_value.part.0+0xe2>
 801193c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011940:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8011944:	4630      	mov	r0, r6
 8011946:	4639      	mov	r1, r7
 8011948:	f7ef f8f0 	bl	8000b2c <__aeabi_dcmplt>
 801194c:	2800      	cmp	r0, #0
 801194e:	d1d9      	bne.n	8011904 <parse_value.part.0+0x84>
 8011950:	4b52      	ldr	r3, [pc, #328]	; (8011a9c <parse_value.part.0+0x21c>)
 8011952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011956:	4630      	mov	r0, r6
 8011958:	4639      	mov	r1, r7
 801195a:	f7ef f905 	bl	8000b68 <__aeabi_dcmpgt>
 801195e:	2800      	cmp	r0, #0
 8011960:	d1d0      	bne.n	8011904 <parse_value.part.0+0x84>
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 8011962:	f009 ff67 	bl	801b834 <__errno>
 8011966:	6803      	ldr	r3, [r0, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	f040 81c1 	bne.w	8011cf0 <parse_value.part.0+0x470>
 801196e:	f8d5 8000 	ldr.w	r8, [r5]
 8011972:	f8dd a004 	ldr.w	sl, [sp, #4]
 8011976:	ebaa 0308 	sub.w	r3, sl, r8
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801197a:	2b01      	cmp	r3, #1
 801197c:	d912      	bls.n	80119a4 <parse_value.part.0+0x124>
 801197e:	f898 2000 	ldrb.w	r2, [r8]
 8011982:	2a30      	cmp	r2, #48	; 0x30
 8011984:	f000 81ae 	beq.w	8011ce4 <parse_value.part.0+0x464>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8011988:	2b02      	cmp	r3, #2
 801198a:	d00b      	beq.n	80119a4 <parse_value.part.0+0x124>
 801198c:	f898 3000 	ldrb.w	r3, [r8]
 8011990:	2b2d      	cmp	r3, #45	; 0x2d
 8011992:	d107      	bne.n	80119a4 <parse_value.part.0+0x124>
 8011994:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011998:	2b30      	cmp	r3, #48	; 0x30
 801199a:	d103      	bne.n	80119a4 <parse_value.part.0+0x124>
 801199c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80119a0:	2b2e      	cmp	r3, #46	; 0x2e
 80119a2:	d1af      	bne.n	8011904 <parse_value.part.0+0x84>
        if (strchr("xX", string[length])) {
 80119a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8011aa8 <parse_value.part.0+0x228>
 80119a8:	4654      	mov	r4, sl
 80119aa:	e005      	b.n	80119b8 <parse_value.part.0+0x138>
 80119ac:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80119b0:	f009 fec6 	bl	801b740 <strchr>
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d1a5      	bne.n	8011904 <parse_value.part.0+0x84>
    while (length--) {
 80119b8:	45a0      	cmp	r8, r4
        if (strchr("xX", string[length])) {
 80119ba:	4648      	mov	r0, r9
    while (length--) {
 80119bc:	d1f6      	bne.n	80119ac <parse_value.part.0+0x12c>
    *string = end;
 80119be:	f8c5 a000 	str.w	sl, [r5]
    return value;
}

JSON_Value * json_value_init_number(double number) {
    JSON_Value *new_value = NULL;
    if (IS_NUMBER_INVALID(number)) {
 80119c2:	4632      	mov	r2, r6
 80119c4:	463b      	mov	r3, r7
 80119c6:	4630      	mov	r0, r6
 80119c8:	4639      	mov	r1, r7
 80119ca:	f7ef f8d7 	bl	8000b7c <__aeabi_dcmpun>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d198      	bne.n	8011904 <parse_value.part.0+0x84>
 80119d2:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 80119d6:	4b31      	ldr	r3, [pc, #196]	; (8011a9c <parse_value.part.0+0x21c>)
 80119d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119dc:	4630      	mov	r0, r6
 80119de:	4629      	mov	r1, r5
 80119e0:	f7ef f8cc 	bl	8000b7c <__aeabi_dcmpun>
 80119e4:	b940      	cbnz	r0, 80119f8 <parse_value.part.0+0x178>
 80119e6:	4b2d      	ldr	r3, [pc, #180]	; (8011a9c <parse_value.part.0+0x21c>)
 80119e8:	4630      	mov	r0, r6
 80119ea:	4629      	mov	r1, r5
 80119ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119f0:	f7ef f8a6 	bl	8000b40 <__aeabi_dcmple>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d085      	beq.n	8011904 <parse_value.part.0+0x84>
        return NULL;
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80119f8:	4b27      	ldr	r3, [pc, #156]	; (8011a98 <parse_value.part.0+0x218>)
 80119fa:	2010      	movs	r0, #16
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	4798      	blx	r3
    if (new_value == NULL) {
 8011a00:	4683      	mov	fp, r0
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d080      	beq.n	8011908 <parse_value.part.0+0x88>
        return NULL;
    }
    new_value->parent = NULL;
 8011a06:	2200      	movs	r2, #0
    new_value->type = JSONNumber;
 8011a08:	2303      	movs	r3, #3
    new_value->value.number = number;
 8011a0a:	e9c0 6702 	strd	r6, r7, [r0, #8]
    new_value->type = JSONNumber;
 8011a0e:	e9c0 2300 	strd	r2, r3, [r0]
            return parse_number_value(string);
 8011a12:	e779      	b.n	8011908 <parse_value.part.0+0x88>
    switch (**string) {
 8011a14:	2b22      	cmp	r3, #34	; 0x22
 8011a16:	f47f af75 	bne.w	8011904 <parse_value.part.0+0x84>
    size_t new_string_len = 0;
 8011a1a:	2600      	movs	r6, #0
    char *new_string = get_quoted_string(string, &new_string_len);
 8011a1c:	a901      	add	r1, sp, #4
 8011a1e:	4628      	mov	r0, r5
    size_t new_string_len = 0;
 8011a20:	9601      	str	r6, [sp, #4]
    char *new_string = get_quoted_string(string, &new_string_len);
 8011a22:	f7fe feb1 	bl	8010788 <get_quoted_string.constprop.0>
    if (new_string == NULL) {
 8011a26:	4604      	mov	r4, r0
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	f43f af6b 	beq.w	8011904 <parse_value.part.0+0x84>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011a2e:	4d1a      	ldr	r5, [pc, #104]	; (8011a98 <parse_value.part.0+0x218>)
    value = json_value_init_string_no_copy(new_string, new_string_len);
 8011a30:	9f01      	ldr	r7, [sp, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011a32:	682b      	ldr	r3, [r5, #0]
 8011a34:	2010      	movs	r0, #16
 8011a36:	4798      	blx	r3
    if (!new_value) {
 8011a38:	4683      	mov	fp, r0
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	f000 816f 	beq.w	8011d1e <parse_value.part.0+0x49e>
    new_value->type = JSONString;
 8011a40:	2302      	movs	r3, #2
 8011a42:	e9c0 6300 	strd	r6, r3, [r0]
    new_value->value.string.length = length;
 8011a46:	e9c0 4702 	strd	r4, r7, [r0, #8]
}
 8011a4a:	4658      	mov	r0, fp
 8011a4c:	b003      	add	sp, #12
 8011a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (strncmp("true", *string, true_token_size) == 0) {
 8011a52:	4813      	ldr	r0, [pc, #76]	; (8011aa0 <parse_value.part.0+0x220>)
 8011a54:	2204      	movs	r2, #4
 8011a56:	4621      	mov	r1, r4
 8011a58:	f009 fe7f 	bl	801b75a <strncmp>
 8011a5c:	4606      	mov	r6, r0
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	f000 814d 	beq.w	8011cfe <parse_value.part.0+0x47e>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 8011a64:	480f      	ldr	r0, [pc, #60]	; (8011aa4 <parse_value.part.0+0x224>)
 8011a66:	2205      	movs	r2, #5
 8011a68:	4621      	mov	r1, r4
 8011a6a:	f009 fe76 	bl	801b75a <strncmp>
 8011a6e:	4606      	mov	r6, r0
 8011a70:	2800      	cmp	r0, #0
 8011a72:	f47f af47 	bne.w	8011904 <parse_value.part.0+0x84>
    return new_value;
}

JSON_Value * json_value_init_boolean(int boolean) {
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011a76:	4b08      	ldr	r3, [pc, #32]	; (8011a98 <parse_value.part.0+0x218>)
        *string += false_token_size;
 8011a78:	3405      	adds	r4, #5
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011a7a:	681b      	ldr	r3, [r3, #0]
        *string += false_token_size;
 8011a7c:	602c      	str	r4, [r5, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011a7e:	2010      	movs	r0, #16
 8011a80:	4798      	blx	r3
    if (!new_value) {
 8011a82:	4683      	mov	fp, r0
 8011a84:	2800      	cmp	r0, #0
 8011a86:	f43f af3f 	beq.w	8011908 <parse_value.part.0+0x88>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONBoolean;
 8011a8a:	2306      	movs	r3, #6
 8011a8c:	e9c0 6300 	strd	r6, r3, [r0]
    new_value->value.boolean = boolean ? 1 : 0;
 8011a90:	6086      	str	r6, [r0, #8]
    return new_value;
 8011a92:	e739      	b.n	8011908 <parse_value.part.0+0x88>
 8011a94:	08022cf1 	.word	0x08022cf1
 8011a98:	20000308 	.word	0x20000308
 8011a9c:	7fefffff 	.word	0x7fefffff
 8011aa0:	08021a30 	.word	0x08021a30
 8011aa4:	08021a38 	.word	0x08021a38
 8011aa8:	08022b64 	.word	0x08022b64
    output_value = json_value_init_array();
 8011aac:	f7ff fec8 	bl	8011840 <json_value_init_array>
    if (output_value == NULL) {
 8011ab0:	4683      	mov	fp, r0
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	f43f af26 	beq.w	8011904 <parse_value.part.0+0x84>
    if (**string != '[') {
 8011ab8:	682a      	ldr	r2, [r5, #0]
 8011aba:	7813      	ldrb	r3, [r2, #0]
 8011abc:	2b5b      	cmp	r3, #91	; 0x5b
 8011abe:	f47f af1f 	bne.w	8011900 <parse_value.part.0+0x80>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8011ac2:	6843      	ldr	r3, [r0, #4]
 8011ac4:	2b05      	cmp	r3, #5
    SKIP_CHAR(string);
 8011ac6:	f102 0301 	add.w	r3, r2, #1
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8011aca:	bf08      	it	eq
 8011acc:	f8d0 8008 	ldreq.w	r8, [r0, #8]
    SKIP_CHAR(string);
 8011ad0:	602b      	str	r3, [r5, #0]
    SKIP_WHITESPACES(string);
 8011ad2:	7852      	ldrb	r2, [r2, #1]
 8011ad4:	5cb1      	ldrb	r1, [r6, r2]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8011ad6:	bf18      	it	ne
 8011ad8:	f04f 0800 	movne.w	r8, #0
    SKIP_WHITESPACES(string);
 8011adc:	0709      	lsls	r1, r1, #28
 8011ade:	d505      	bpl.n	8011aec <parse_value.part.0+0x26c>
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	602b      	str	r3, [r5, #0]
 8011ae4:	781a      	ldrb	r2, [r3, #0]
 8011ae6:	5cb1      	ldrb	r1, [r6, r2]
 8011ae8:	070c      	lsls	r4, r1, #28
 8011aea:	d4f9      	bmi.n	8011ae0 <parse_value.part.0+0x260>
    if (**string == ']') { /* empty array */
 8011aec:	2a5d      	cmp	r2, #93	; 0x5d
 8011aee:	d051      	beq.n	8011b94 <parse_value.part.0+0x314>
    while (**string != '\0') {
 8011af0:	682a      	ldr	r2, [r5, #0]
 8011af2:	7813      	ldrb	r3, [r2, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d03a      	beq.n	8011b6e <parse_value.part.0+0x2ee>
    if (nesting > MAX_NESTING) {
 8011af8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8011afc:	f107 0401 	add.w	r4, r7, #1
 8011b00:	f43f aefd 	beq.w	80118fe <parse_value.part.0+0x7e>
 8011b04:	4621      	mov	r1, r4
 8011b06:	4628      	mov	r0, r5
 8011b08:	f7ff feba 	bl	8011880 <parse_value.part.0>
        if (new_array_value == NULL) {
 8011b0c:	4607      	mov	r7, r0
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	f43f aef5 	beq.w	80118fe <parse_value.part.0+0x7e>
    if (array->count >= array->capacity) {
 8011b14:	e9d8 3102 	ldrd	r3, r1, [r8, #8]
 8011b18:	428b      	cmp	r3, r1
 8011b1a:	f080 80d7 	bcs.w	8011ccc <parse_value.part.0+0x44c>
    value->parent = json_array_get_wrapping_value(array);
 8011b1e:	e9d8 2100 	ldrd	r2, r1, [r8]
 8011b22:	603a      	str	r2, [r7, #0]
    array->items[array->count] = value;
 8011b24:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    array->count++;
 8011b28:	3301      	adds	r3, #1
 8011b2a:	f8c8 3008 	str.w	r3, [r8, #8]
        SKIP_WHITESPACES(string);
 8011b2e:	682b      	ldr	r3, [r5, #0]
 8011b30:	781a      	ldrb	r2, [r3, #0]
 8011b32:	5cb1      	ldrb	r1, [r6, r2]
 8011b34:	0708      	lsls	r0, r1, #28
 8011b36:	d505      	bpl.n	8011b44 <parse_value.part.0+0x2c4>
 8011b38:	3301      	adds	r3, #1
 8011b3a:	602b      	str	r3, [r5, #0]
 8011b3c:	781a      	ldrb	r2, [r3, #0]
 8011b3e:	5cb1      	ldrb	r1, [r6, r2]
 8011b40:	0709      	lsls	r1, r1, #28
 8011b42:	d4f9      	bmi.n	8011b38 <parse_value.part.0+0x2b8>
        if (**string != ',') {
 8011b44:	2a2c      	cmp	r2, #44	; 0x2c
 8011b46:	f040 80ee 	bne.w	8011d26 <parse_value.part.0+0x4a6>
        SKIP_CHAR(string);
 8011b4a:	1c5a      	adds	r2, r3, #1
 8011b4c:	602a      	str	r2, [r5, #0]
        SKIP_WHITESPACES(string);
 8011b4e:	785b      	ldrb	r3, [r3, #1]
 8011b50:	5cf1      	ldrb	r1, [r6, r3]
 8011b52:	070f      	lsls	r7, r1, #28
 8011b54:	d505      	bpl.n	8011b62 <parse_value.part.0+0x2e2>
 8011b56:	3201      	adds	r2, #1
 8011b58:	602a      	str	r2, [r5, #0]
 8011b5a:	7813      	ldrb	r3, [r2, #0]
 8011b5c:	5cf1      	ldrb	r1, [r6, r3]
 8011b5e:	0708      	lsls	r0, r1, #28
 8011b60:	d4f9      	bmi.n	8011b56 <parse_value.part.0+0x2d6>
    while (**string != '\0') {
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1ce      	bne.n	8011b04 <parse_value.part.0+0x284>
 8011b66:	e002      	b.n	8011b6e <parse_value.part.0+0x2ee>
    SKIP_WHITESPACES(string);
 8011b68:	3201      	adds	r2, #1
 8011b6a:	602a      	str	r2, [r5, #0]
 8011b6c:	7813      	ldrb	r3, [r2, #0]
 8011b6e:	5cf1      	ldrb	r1, [r6, r3]
 8011b70:	0709      	lsls	r1, r1, #28
 8011b72:	d4f9      	bmi.n	8011b68 <parse_value.part.0+0x2e8>
    if (**string != ']' || /* Trim array after parsing is over */
 8011b74:	2b5d      	cmp	r3, #93	; 0x5d
 8011b76:	f47f aec2 	bne.w	80118fe <parse_value.part.0+0x7e>
    return array ? array->count : 0;
 8011b7a:	f1b8 0f00 	cmp.w	r8, #0
 8011b7e:	f000 80e3 	beq.w	8011d48 <parse_value.part.0+0x4c8>
 8011b82:	f8d8 1008 	ldr.w	r1, [r8, #8]
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 8011b86:	4640      	mov	r0, r8
 8011b88:	f7fe fcf0 	bl	801056c <json_array_resize>
    if (**string != ']' || /* Trim array after parsing is over */
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	f47f aeb6 	bne.w	80118fe <parse_value.part.0+0x7e>
    SKIP_CHAR(string);
 8011b92:	682b      	ldr	r3, [r5, #0]
 8011b94:	3301      	adds	r3, #1
 8011b96:	602b      	str	r3, [r5, #0]
    return output_value;
 8011b98:	e6b6      	b.n	8011908 <parse_value.part.0+0x88>
    if (strncmp("null", *string, token_size) == 0) {
 8011b9a:	4871      	ldr	r0, [pc, #452]	; (8011d60 <parse_value.part.0+0x4e0>)
 8011b9c:	2204      	movs	r2, #4
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	f009 fddb 	bl	801b75a <strncmp>
 8011ba4:	4606      	mov	r6, r0
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	f47f aeac 	bne.w	8011904 <parse_value.part.0+0x84>
}

JSON_Value * json_value_init_null(void) {
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011bac:	4b6d      	ldr	r3, [pc, #436]	; (8011d64 <parse_value.part.0+0x4e4>)
        *string += token_size;
 8011bae:	3404      	adds	r4, #4
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011bb0:	681b      	ldr	r3, [r3, #0]
        *string += token_size;
 8011bb2:	602c      	str	r4, [r5, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011bb4:	2010      	movs	r0, #16
 8011bb6:	4798      	blx	r3
    if (!new_value) {
 8011bb8:	4683      	mov	fp, r0
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	f43f aea4 	beq.w	8011908 <parse_value.part.0+0x88>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONNull;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e9c0 6300 	strd	r6, r3, [r0]
    return new_value;
 8011bc6:	e69f      	b.n	8011908 <parse_value.part.0+0x88>
    output_value = json_value_init_object();
 8011bc8:	f7ff fe16 	bl	80117f8 <json_value_init_object>
    if (output_value == NULL) {
 8011bcc:	4683      	mov	fp, r0
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	f43f ae98 	beq.w	8011904 <parse_value.part.0+0x84>
    if (**string != '{') {
 8011bd4:	682a      	ldr	r2, [r5, #0]
 8011bd6:	7813      	ldrb	r3, [r2, #0]
 8011bd8:	2b7b      	cmp	r3, #123	; 0x7b
 8011bda:	f47f ae91 	bne.w	8011900 <parse_value.part.0+0x80>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8011bde:	6843      	ldr	r3, [r0, #4]
 8011be0:	2b04      	cmp	r3, #4
    SKIP_CHAR(string);
 8011be2:	f102 0301 	add.w	r3, r2, #1
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8011be6:	bf08      	it	eq
 8011be8:	f8d0 a008 	ldreq.w	sl, [r0, #8]
    SKIP_CHAR(string);
 8011bec:	602b      	str	r3, [r5, #0]
    SKIP_WHITESPACES(string);
 8011bee:	7852      	ldrb	r2, [r2, #1]
 8011bf0:	5cb1      	ldrb	r1, [r6, r2]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8011bf2:	bf18      	it	ne
 8011bf4:	f04f 0a00 	movne.w	sl, #0
    SKIP_WHITESPACES(string);
 8011bf8:	0709      	lsls	r1, r1, #28
 8011bfa:	d505      	bpl.n	8011c08 <parse_value.part.0+0x388>
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	781a      	ldrb	r2, [r3, #0]
 8011c02:	5cb1      	ldrb	r1, [r6, r2]
 8011c04:	070c      	lsls	r4, r1, #28
 8011c06:	d4f9      	bmi.n	8011bfc <parse_value.part.0+0x37c>
    if (**string == '}') { /* empty object */
 8011c08:	2a7d      	cmp	r2, #125	; 0x7d
 8011c0a:	d0c3      	beq.n	8011b94 <parse_value.part.0+0x314>
    while (**string != '\0') {
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	781a      	ldrb	r2, [r3, #0]
 8011c10:	2a00      	cmp	r2, #0
 8011c12:	d054      	beq.n	8011cbe <parse_value.part.0+0x43e>
            return parse_object_value(string, nesting + 1);
 8011c14:	1c7c      	adds	r4, r7, #1
    if (nesting > MAX_NESTING) {
 8011c16:	f640 0901 	movw	r9, #2049	; 0x801
        size_t key_len = 0;
 8011c1a:	2300      	movs	r3, #0
        new_key = get_quoted_string(string, &key_len);
 8011c1c:	a901      	add	r1, sp, #4
 8011c1e:	4628      	mov	r0, r5
        size_t key_len = 0;
 8011c20:	9301      	str	r3, [sp, #4]
        new_key = get_quoted_string(string, &key_len);
 8011c22:	f7fe fdb1 	bl	8010788 <get_quoted_string.constprop.0>
        if (!new_key) {
 8011c26:	4607      	mov	r7, r0
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	f43f ae68 	beq.w	80118fe <parse_value.part.0+0x7e>
        if (key_len != strlen(new_key)) {
 8011c2e:	f7ee fb47 	bl	80002c0 <strlen>
 8011c32:	9b01      	ldr	r3, [sp, #4]
 8011c34:	4298      	cmp	r0, r3
 8011c36:	f47f ae5e 	bne.w	80118f6 <parse_value.part.0+0x76>
        SKIP_WHITESPACES(string);
 8011c3a:	682b      	ldr	r3, [r5, #0]
 8011c3c:	781a      	ldrb	r2, [r3, #0]
 8011c3e:	5cb1      	ldrb	r1, [r6, r2]
 8011c40:	0708      	lsls	r0, r1, #28
 8011c42:	d505      	bpl.n	8011c50 <parse_value.part.0+0x3d0>
 8011c44:	3301      	adds	r3, #1
 8011c46:	602b      	str	r3, [r5, #0]
 8011c48:	781a      	ldrb	r2, [r3, #0]
 8011c4a:	5cb1      	ldrb	r1, [r6, r2]
 8011c4c:	0709      	lsls	r1, r1, #28
 8011c4e:	d4f9      	bmi.n	8011c44 <parse_value.part.0+0x3c4>
        if (**string != ':') {
 8011c50:	2a3a      	cmp	r2, #58	; 0x3a
 8011c52:	f47f ae50 	bne.w	80118f6 <parse_value.part.0+0x76>
        SKIP_CHAR(string);
 8011c56:	3301      	adds	r3, #1
    if (nesting > MAX_NESTING) {
 8011c58:	454c      	cmp	r4, r9
        SKIP_CHAR(string);
 8011c5a:	602b      	str	r3, [r5, #0]
    if (nesting > MAX_NESTING) {
 8011c5c:	f43f ae4b 	beq.w	80118f6 <parse_value.part.0+0x76>
 8011c60:	4621      	mov	r1, r4
 8011c62:	4628      	mov	r0, r5
 8011c64:	f7ff fe0c 	bl	8011880 <parse_value.part.0>
        if (new_value == NULL) {
 8011c68:	4680      	mov	r8, r0
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	f43f ae43 	beq.w	80118f6 <parse_value.part.0+0x76>
        status = json_object_add(output_object, new_key, new_value);
 8011c70:	4602      	mov	r2, r0
 8011c72:	4639      	mov	r1, r7
 8011c74:	4650      	mov	r0, sl
 8011c76:	f7ff fc91 	bl	801159c <json_object_add>
        if (status != JSONSuccess) {
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d159      	bne.n	8011d32 <parse_value.part.0+0x4b2>
        SKIP_WHITESPACES(string);
 8011c7e:	682a      	ldr	r2, [r5, #0]
 8011c80:	7813      	ldrb	r3, [r2, #0]
 8011c82:	5cf1      	ldrb	r1, [r6, r3]
 8011c84:	0708      	lsls	r0, r1, #28
 8011c86:	d505      	bpl.n	8011c94 <parse_value.part.0+0x414>
 8011c88:	3201      	adds	r2, #1
 8011c8a:	602a      	str	r2, [r5, #0]
 8011c8c:	7813      	ldrb	r3, [r2, #0]
 8011c8e:	5cf1      	ldrb	r1, [r6, r3]
 8011c90:	0709      	lsls	r1, r1, #28
 8011c92:	d4f9      	bmi.n	8011c88 <parse_value.part.0+0x408>
        if (**string != ',') {
 8011c94:	2b2c      	cmp	r3, #44	; 0x2c
 8011c96:	d149      	bne.n	8011d2c <parse_value.part.0+0x4ac>
        SKIP_CHAR(string);
 8011c98:	1c53      	adds	r3, r2, #1
 8011c9a:	602b      	str	r3, [r5, #0]
        SKIP_WHITESPACES(string);
 8011c9c:	7852      	ldrb	r2, [r2, #1]
 8011c9e:	5cb2      	ldrb	r2, [r6, r2]
 8011ca0:	0712      	lsls	r2, r2, #28
 8011ca2:	d505      	bpl.n	8011cb0 <parse_value.part.0+0x430>
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	602b      	str	r3, [r5, #0]
 8011ca8:	781a      	ldrb	r2, [r3, #0]
 8011caa:	5cb2      	ldrb	r2, [r6, r2]
 8011cac:	0717      	lsls	r7, r2, #28
 8011cae:	d4f9      	bmi.n	8011ca4 <parse_value.part.0+0x424>
    while (**string != '\0') {
 8011cb0:	781a      	ldrb	r2, [r3, #0]
 8011cb2:	2a00      	cmp	r2, #0
 8011cb4:	d1b1      	bne.n	8011c1a <parse_value.part.0+0x39a>
 8011cb6:	e002      	b.n	8011cbe <parse_value.part.0+0x43e>
    SKIP_WHITESPACES(string);
 8011cb8:	3301      	adds	r3, #1
 8011cba:	602b      	str	r3, [r5, #0]
 8011cbc:	781a      	ldrb	r2, [r3, #0]
 8011cbe:	5cb1      	ldrb	r1, [r6, r2]
 8011cc0:	0708      	lsls	r0, r1, #28
 8011cc2:	d4f9      	bmi.n	8011cb8 <parse_value.part.0+0x438>
    if (**string != '}') {
 8011cc4:	2a7d      	cmp	r2, #125	; 0x7d
 8011cc6:	f43f af65 	beq.w	8011b94 <parse_value.part.0+0x314>
 8011cca:	e618      	b.n	80118fe <parse_value.part.0+0x7e>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8011ccc:	0049      	lsls	r1, r1, #1
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8011cce:	2910      	cmp	r1, #16
 8011cd0:	bf38      	it	cc
 8011cd2:	2110      	movcc	r1, #16
 8011cd4:	4640      	mov	r0, r8
 8011cd6:	f7fe fc49 	bl	801056c <json_array_resize>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d136      	bne.n	8011d4c <parse_value.part.0+0x4cc>
    array->items[array->count] = value;
 8011cde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ce2:	e71c      	b.n	8011b1e <parse_value.part.0+0x29e>
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8011ce4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011ce8:	2a2e      	cmp	r2, #46	; 0x2e
 8011cea:	f47f ae0b 	bne.w	8011904 <parse_value.part.0+0x84>
 8011cee:	e64b      	b.n	8011988 <parse_value.part.0+0x108>
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 8011cf0:	f009 fda0 	bl	801b834 <__errno>
 8011cf4:	6803      	ldr	r3, [r0, #0]
 8011cf6:	2b22      	cmp	r3, #34	; 0x22
 8011cf8:	f43f ae39 	beq.w	801196e <parse_value.part.0+0xee>
 8011cfc:	e602      	b.n	8011904 <parse_value.part.0+0x84>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011cfe:	4b19      	ldr	r3, [pc, #100]	; (8011d64 <parse_value.part.0+0x4e4>)
        *string += true_token_size;
 8011d00:	3404      	adds	r4, #4
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011d02:	681b      	ldr	r3, [r3, #0]
        *string += true_token_size;
 8011d04:	602c      	str	r4, [r5, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011d06:	2010      	movs	r0, #16
 8011d08:	4798      	blx	r3
    if (!new_value) {
 8011d0a:	4683      	mov	fp, r0
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	f43f adfb 	beq.w	8011908 <parse_value.part.0+0x88>
    new_value->type = JSONBoolean;
 8011d12:	2206      	movs	r2, #6
    new_value->value.boolean = boolean ? 1 : 0;
 8011d14:	2301      	movs	r3, #1
    new_value->type = JSONBoolean;
 8011d16:	e9c0 6200 	strd	r6, r2, [r0]
    new_value->value.boolean = boolean ? 1 : 0;
 8011d1a:	6083      	str	r3, [r0, #8]
    return new_value;
 8011d1c:	e5f4      	b.n	8011908 <parse_value.part.0+0x88>
        parson_free(new_string);
 8011d1e:	686b      	ldr	r3, [r5, #4]
 8011d20:	4620      	mov	r0, r4
 8011d22:	4798      	blx	r3
        return NULL;
 8011d24:	e5f0      	b.n	8011908 <parse_value.part.0+0x88>
    SKIP_WHITESPACES(string);
 8011d26:	682a      	ldr	r2, [r5, #0]
 8011d28:	7813      	ldrb	r3, [r2, #0]
 8011d2a:	e720      	b.n	8011b6e <parse_value.part.0+0x2ee>
    SKIP_WHITESPACES(string);
 8011d2c:	682b      	ldr	r3, [r5, #0]
 8011d2e:	781a      	ldrb	r2, [r3, #0]
 8011d30:	e7c5      	b.n	8011cbe <parse_value.part.0+0x43e>
            parson_free(new_key);
 8011d32:	4b0c      	ldr	r3, [pc, #48]	; (8011d64 <parse_value.part.0+0x4e4>)
 8011d34:	4638      	mov	r0, r7
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4798      	blx	r3
            json_value_free(new_value);
 8011d3a:	4640      	mov	r0, r8
 8011d3c:	f7ff fb14 	bl	8011368 <json_value_free>
            json_value_free(output_value);
 8011d40:	4658      	mov	r0, fp
 8011d42:	f7ff fb11 	bl	8011368 <json_value_free>
            return NULL;
 8011d46:	e5dd      	b.n	8011904 <parse_value.part.0+0x84>
    return array ? array->count : 0;
 8011d48:	4641      	mov	r1, r8
 8011d4a:	e71c      	b.n	8011b86 <parse_value.part.0+0x306>
            json_value_free(new_array_value);
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	f7ff fb0b 	bl	8011368 <json_value_free>
            json_value_free(output_value);
 8011d52:	4658      	mov	r0, fp
 8011d54:	f7ff fb08 	bl	8011368 <json_value_free>
            return NULL;
 8011d58:	f04f 0b00 	mov.w	fp, #0
 8011d5c:	e5d4      	b.n	8011908 <parse_value.part.0+0x88>
 8011d5e:	bf00      	nop
 8011d60:	08022b54 	.word	0x08022b54
 8011d64:	20000308 	.word	0x20000308

08011d68 <json_parse_string>:
JSON_Value * json_parse_string(const char *string) {
 8011d68:	b500      	push	{lr}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	9001      	str	r0, [sp, #4]
    if (string == NULL) {
 8011d6e:	b130      	cbz	r0, 8011d7e <json_parse_string+0x16>
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8011d70:	7803      	ldrb	r3, [r0, #0]
 8011d72:	2bef      	cmp	r3, #239	; 0xef
 8011d74:	d006      	beq.n	8011d84 <json_parse_string+0x1c>
    if (nesting > MAX_NESTING) {
 8011d76:	2100      	movs	r1, #0
 8011d78:	a801      	add	r0, sp, #4
 8011d7a:	f7ff fd81 	bl	8011880 <parse_value.part.0>
}
 8011d7e:	b003      	add	sp, #12
 8011d80:	f85d fb04 	ldr.w	pc, [sp], #4
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8011d84:	7843      	ldrb	r3, [r0, #1]
 8011d86:	2bbb      	cmp	r3, #187	; 0xbb
 8011d88:	d1f5      	bne.n	8011d76 <json_parse_string+0xe>
 8011d8a:	7883      	ldrb	r3, [r0, #2]
 8011d8c:	2bbf      	cmp	r3, #191	; 0xbf
        string = string + 3; /* Support for UTF-8 BOM */
 8011d8e:	bf04      	itt	eq
 8011d90:	3003      	addeq	r0, #3
 8011d92:	9001      	streq	r0, [sp, #4]
 8011d94:	e7ef      	b.n	8011d76 <json_parse_string+0xe>
 8011d96:	bf00      	nop

08011d98 <json_value_init_string_with_len>:
JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {
 8011d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (string == NULL) {
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d049      	beq.n	8011e34 <json_value_init_string_with_len+0x9c>
    const char *string_end =  string + string_len;
 8011da0:	1842      	adds	r2, r0, r1
    while (string < string_end) {
 8011da2:	4290      	cmp	r0, r2
 8011da4:	460d      	mov	r5, r1
 8011da6:	4606      	mov	r6, r0
 8011da8:	d259      	bcs.n	8011e5e <json_value_init_string_with_len+0xc6>
 8011daa:	4603      	mov	r3, r0
 8011dac:	e039      	b.n	8011e22 <json_value_init_string_with_len+0x8a>
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8011dae:	f1bc 0ff4 	cmp.w	ip, #244	; 0xf4
 8011db2:	d83f      	bhi.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011db4:	f00c 01c0 	and.w	r1, ip, #192	; 0xc0
 8011db8:	2980      	cmp	r1, #128	; 0x80
 8011dba:	d03b      	beq.n	8011e34 <json_value_init_string_with_len+0x9c>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 8011dbc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8011dc0:	f000 8088 	beq.w	8011ed4 <json_value_init_string_with_len+0x13c>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 8011dc4:	f00c 01e0 	and.w	r1, ip, #224	; 0xe0
 8011dc8:	29c0      	cmp	r1, #192	; 0xc0
 8011dca:	d037      	beq.n	8011e3c <json_value_init_string_with_len+0xa4>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8011dcc:	f00c 01f0 	and.w	r1, ip, #240	; 0xf0
 8011dd0:	29e0      	cmp	r1, #224	; 0xe0
 8011dd2:	d061      	beq.n	8011e98 <json_value_init_string_with_len+0x100>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 8011dd4:	785c      	ldrb	r4, [r3, #1]
 8011dd6:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
 8011dda:	2980      	cmp	r1, #128	; 0x80
 8011ddc:	d12a      	bne.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011dde:	7899      	ldrb	r1, [r3, #2]
 8011de0:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 8011de4:	2880      	cmp	r0, #128	; 0x80
 8011de6:	d125      	bne.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011de8:	f893 e003 	ldrb.w	lr, [r3, #3]
 8011dec:	f00e 00c0 	and.w	r0, lr, #192	; 0xc0
 8011df0:	2880      	cmp	r0, #128	; 0x80
 8011df2:	d11f      	bne.n	8011e34 <json_value_init_string_with_len+0x9c>
        cp = string[0] & 0x7;
 8011df4:	f00c 0c07 	and.w	ip, ip, #7
        cp = (cp << 6) | (string[1] & 0x3F);
 8011df8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8011dfc:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8011e00:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8011e04:	ea41 1184 	orr.w	r1, r1, r4, lsl #6
        cp = (cp << 6) | (string[3] & 0x3F);
 8011e08:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
 8011e0c:	ea4e 1e81 	orr.w	lr, lr, r1, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8011e10:	f5ae 3e80 	sub.w	lr, lr, #65536	; 0x10000
 8011e14:	f5be 1f80 	cmp.w	lr, #1048576	; 0x100000
 8011e18:	d20c      	bcs.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011e1a:	2104      	movs	r1, #4
        string += len;
 8011e1c:	440b      	add	r3, r1
    while (string < string_end) {
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d91d      	bls.n	8011e5e <json_value_init_string_with_len+0xc6>
    *len = num_bytes_in_utf8_sequence(string[0]);
 8011e22:	f893 c000 	ldrb.w	ip, [r3]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8011e26:	f10c 0e40 	add.w	lr, ip, #64	; 0x40
 8011e2a:	fa5f fe8e 	uxtb.w	lr, lr
 8011e2e:	f1be 0f01 	cmp.w	lr, #1
 8011e32:	d8bc      	bhi.n	8011dae <json_value_init_string_with_len+0x16>
        return NULL;
 8011e34:	2400      	movs	r4, #0
}
 8011e36:	4620      	mov	r0, r4
 8011e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (*len == 2 && IS_CONT(string[1])) {
 8011e3c:	7859      	ldrb	r1, [r3, #1]
 8011e3e:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 8011e42:	2880      	cmp	r0, #128	; 0x80
 8011e44:	d1f6      	bne.n	8011e34 <json_value_init_string_with_len+0x9c>
        cp = string[0] & 0x1F;
 8011e46:	f00c 0c1f 	and.w	ip, ip, #31
        cp = (cp << 6) | (string[1] & 0x3F);
 8011e4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8011e4e:	ea41 118c 	orr.w	r1, r1, ip, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8011e52:	297f      	cmp	r1, #127	; 0x7f
 8011e54:	d9ee      	bls.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011e56:	2102      	movs	r1, #2
        string += len;
 8011e58:	440b      	add	r3, r1
    while (string < string_end) {
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d8e1      	bhi.n	8011e22 <json_value_init_string_with_len+0x8a>
    char *output_string = (char*)parson_malloc(n + 1);
 8011e5e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8011ee8 <json_value_init_string_with_len+0x150>
 8011e62:	1c68      	adds	r0, r5, #1
 8011e64:	f8d8 3000 	ldr.w	r3, [r8]
 8011e68:	4798      	blx	r3
    if (!output_string) {
 8011e6a:	4607      	mov	r7, r0
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	d0e1      	beq.n	8011e34 <json_value_init_string_with_len+0x9c>
    memcpy(output_string, string, n);
 8011e70:	4631      	mov	r1, r6
    output_string[n] = '\0';
 8011e72:	2600      	movs	r6, #0
    memcpy(output_string, string, n);
 8011e74:	462a      	mov	r2, r5
    output_string[n] = '\0';
 8011e76:	557e      	strb	r6, [r7, r5]
    memcpy(output_string, string, n);
 8011e78:	f009 fd11 	bl	801b89e <memcpy>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8011e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e80:	2010      	movs	r0, #16
 8011e82:	4798      	blx	r3
    if (!new_value) {
 8011e84:	4604      	mov	r4, r0
 8011e86:	b338      	cbz	r0, 8011ed8 <json_value_init_string_with_len+0x140>
    new_value->type = JSONString;
 8011e88:	2302      	movs	r3, #2
 8011e8a:	e9c0 6300 	strd	r6, r3, [r0]
    new_value->value.string.length = length;
 8011e8e:	e9c0 7502 	strd	r7, r5, [r0, #8]
}
 8011e92:	4620      	mov	r0, r4
 8011e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8011e98:	7859      	ldrb	r1, [r3, #1]
 8011e9a:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
 8011e9e:	2880      	cmp	r0, #128	; 0x80
 8011ea0:	d1c8      	bne.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011ea2:	7898      	ldrb	r0, [r3, #2]
 8011ea4:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8011ea8:	2c80      	cmp	r4, #128	; 0x80
 8011eaa:	d1c3      	bne.n	8011e34 <json_value_init_string_with_len+0x9c>
        cp = ((unsigned char)string[0]) & 0xF;
 8011eac:	f00c 0c0f 	and.w	ip, ip, #15
        cp = (cp << 6) | (string[1] & 0x3F);
 8011eb0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8011eb4:	ea41 118c 	orr.w	r1, r1, ip, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8011eb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8011ebc:	ea40 1081 	orr.w	r0, r0, r1, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8011ec0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8011ec4:	d3b6      	bcc.n	8011e34 <json_value_init_string_with_len+0x9c>
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 8011ec6:	f5a0 4058 	sub.w	r0, r0, #55296	; 0xd800
 8011eca:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8011ece:	d3b1      	bcc.n	8011e34 <json_value_init_string_with_len+0x9c>
 8011ed0:	2103      	movs	r1, #3
 8011ed2:	e7a3      	b.n	8011e1c <json_value_init_string_with_len+0x84>
 8011ed4:	2101      	movs	r1, #1
 8011ed6:	e7a1      	b.n	8011e1c <json_value_init_string_with_len+0x84>
        parson_free(copy);
 8011ed8:	4638      	mov	r0, r7
 8011eda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011ede:	4798      	blx	r3
}
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20000308 	.word	0x20000308

08011eec <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8011eec:	b500      	push	{lr}
 8011eee:	b093      	sub	sp, #76	; 0x4c
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	aa02      	add	r2, sp, #8
 8011ef4:	9200      	str	r2, [sp, #0]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	461a      	mov	r2, r3
 8011efa:	f7fe ff99 	bl	8010e30 <json_serialize_to_buffer_r>
    return res < 0 ? 0 : (size_t)(res) + 1;
 8011efe:	2800      	cmp	r0, #0
 8011f00:	bfac      	ite	ge
 8011f02:	3001      	addge	r0, #1
 8011f04:	2000      	movlt	r0, #0
}
 8011f06:	b013      	add	sp, #76	; 0x4c
 8011f08:	f85d fb04 	ldr.w	pc, [sp], #4

08011f0c <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8011f0c:	b570      	push	{r4, r5, r6, lr}
 8011f0e:	b092      	sub	sp, #72	; 0x48
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8011f10:	2300      	movs	r3, #0
 8011f12:	ac02      	add	r4, sp, #8
 8011f14:	9400      	str	r4, [sp, #0]
JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8011f16:	460e      	mov	r6, r1
 8011f18:	4614      	mov	r4, r2
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	461a      	mov	r2, r3
JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 8011f1e:	4605      	mov	r5, r0
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8011f20:	f7fe ff86 	bl	8010e30 <json_serialize_to_buffer_r>
    return res < 0 ? 0 : (size_t)(res) + 1;
 8011f24:	1e03      	subs	r3, r0, #0
 8011f26:	db0c      	blt.n	8011f42 <json_serialize_to_buffer+0x36>
 8011f28:	3301      	adds	r3, #1
    int written = -1;
    size_t needed_size_in_bytes = json_serialization_size(value);
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8011f2a:	429c      	cmp	r4, r3
 8011f2c:	d309      	bcc.n	8011f42 <json_serialize_to_buffer+0x36>
        return JSONFailure;
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 8011f2e:	2300      	movs	r3, #0
 8011f30:	9300      	str	r3, [sp, #0]
 8011f32:	461a      	mov	r2, r3
 8011f34:	4631      	mov	r1, r6
 8011f36:	4628      	mov	r0, r5
 8011f38:	f7fe ff7a 	bl	8010e30 <json_serialize_to_buffer_r>
    if (written < 0) {
 8011f3c:	17c0      	asrs	r0, r0, #31
        return JSONFailure;
    }
    return JSONSuccess;
}
 8011f3e:	b012      	add	sp, #72	; 0x48
 8011f40:	bd70      	pop	{r4, r5, r6, pc}
        return JSONFailure;
 8011f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8011f46:	b012      	add	sp, #72	; 0x48
 8011f48:	bd70      	pop	{r4, r5, r6, pc}
 8011f4a:	bf00      	nop

08011f4c <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	b094      	sub	sp, #80	; 0x50
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8011f50:	2300      	movs	r3, #0
 8011f52:	aa04      	add	r2, sp, #16
 8011f54:	9200      	str	r2, [sp, #0]
 8011f56:	4619      	mov	r1, r3
 8011f58:	461a      	mov	r2, r3
char * json_serialize_to_string(const JSON_Value *value) {
 8011f5a:	4605      	mov	r5, r0
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8011f5c:	f7fe ff68 	bl	8010e30 <json_serialize_to_buffer_r>
    return res < 0 ? 0 : (size_t)(res) + 1;
 8011f60:	1e02      	subs	r2, r0, #0
 8011f62:	db13      	blt.n	8011f8c <json_serialize_to_string+0x40>
    size_t buf_size_bytes = json_serialization_size(value);
    char *buf = NULL;
    if (buf_size_bytes == 0) {
        return NULL;
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8011f64:	4e0b      	ldr	r6, [pc, #44]	; (8011f94 <json_serialize_to_string+0x48>)
    return res < 0 ? 0 : (size_t)(res) + 1;
 8011f66:	3201      	adds	r2, #1
    buf = (char*)parson_malloc(buf_size_bytes);
 8011f68:	6833      	ldr	r3, [r6, #0]
 8011f6a:	9203      	str	r2, [sp, #12]
 8011f6c:	4610      	mov	r0, r2
 8011f6e:	4798      	blx	r3
    if (buf == NULL) {
 8011f70:	4604      	mov	r4, r0
 8011f72:	b128      	cbz	r0, 8011f80 <json_serialize_to_string+0x34>
        return NULL;
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8011f74:	4601      	mov	r1, r0
 8011f76:	9a03      	ldr	r2, [sp, #12]
 8011f78:	4628      	mov	r0, r5
 8011f7a:	f7ff ffc7 	bl	8011f0c <json_serialize_to_buffer>
    if (serialization_result != JSONSuccess) {
 8011f7e:	b910      	cbnz	r0, 8011f86 <json_serialize_to_string+0x3a>
        json_free_serialized_string(buf);
        return NULL;
    }
    return buf;
}
 8011f80:	4620      	mov	r0, r4
 8011f82:	b014      	add	sp, #80	; 0x50
 8011f84:	bd70      	pop	{r4, r5, r6, pc}
    }
    return buf;
}

void json_free_serialized_string(char *string) {
    parson_free(string);
 8011f86:	6873      	ldr	r3, [r6, #4]
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4798      	blx	r3
        return NULL;
 8011f8c:	2400      	movs	r4, #0
}
 8011f8e:	4620      	mov	r0, r4
 8011f90:	b014      	add	sp, #80	; 0x50
 8011f92:	bd70      	pop	{r4, r5, r6, pc}
 8011f94:	20000308 	.word	0x20000308

08011f98 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8011f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9c:	b085      	sub	sp, #20
    unsigned long hash = 0;
    parson_bool_t found = PARSON_FALSE;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	9303      	str	r3, [sp, #12]
    size_t cell_ix = 0;
    size_t item_ix = 0;
    JSON_Value *old_value = NULL;
    char *key_copy = NULL;

    if (!object || !name || !value || value->parent) {
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	f000 8082 	beq.w	80120ac <json_object_set_value+0x114>
 8011fa8:	460f      	mov	r7, r1
 8011faa:	2900      	cmp	r1, #0
 8011fac:	d07e      	beq.n	80120ac <json_object_set_value+0x114>
 8011fae:	4690      	mov	r8, r2
 8011fb0:	2a00      	cmp	r2, #0
 8011fb2:	d07b      	beq.n	80120ac <json_object_set_value+0x114>
 8011fb4:	6813      	ldr	r3, [r2, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d178      	bne.n	80120ac <json_object_set_value+0x114>
        return JSONFailure;
    }
    hash = hash_string(name, strlen(name));
 8011fba:	4606      	mov	r6, r0
 8011fbc:	4608      	mov	r0, r1
 8011fbe:	f7ee f97f 	bl	80002c0 <strlen>
    for (i = 0; i < n; i++) {
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d077      	beq.n	80120b8 <json_object_set_value+0x120>
 8011fc8:	1e7b      	subs	r3, r7, #1
 8011fca:	1819      	adds	r1, r3, r0
    unsigned long hash = 5381;
 8011fcc:	f241 5405 	movw	r4, #5381	; 0x1505
 8011fd0:	e003      	b.n	8011fda <json_object_set_value+0x42>
    for (i = 0; i < n; i++) {
 8011fd2:	4299      	cmp	r1, r3
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8011fd4:	eb05 040c 	add.w	r4, r5, ip
    for (i = 0; i < n; i++) {
 8011fd8:	d005      	beq.n	8011fe6 <json_object_set_value+0x4e>
        c = string[i];
 8011fda:	f813 5f01 	ldrb.w	r5, [r3, #1]!
        if (c == '\0') {
 8011fde:	eb04 1c44 	add.w	ip, r4, r4, lsl #5
 8011fe2:	2d00      	cmp	r5, #0
 8011fe4:	d1f5      	bne.n	8011fd2 <json_object_set_value+0x3a>
    found = PARSON_FALSE;
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8011fe6:	ab03      	add	r3, sp, #12
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	4639      	mov	r1, r7
 8011fec:	4623      	mov	r3, r4
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f7fe fade 	bl	80105b0 <json_object_get_cell_ix>
    if (found) {
 8011ff4:	f8dd a00c 	ldr.w	sl, [sp, #12]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8011ff8:	4605      	mov	r5, r0
    if (found) {
 8011ffa:	f1ba 0f00 	cmp.w	sl, #0
 8011ffe:	d141      	bne.n	8012084 <json_object_set_value+0xec>
        json_value_free(old_value);
        object->values[item_ix] = value;
        value->parent = json_object_get_wrapping_value(object);
        return JSONSuccess;
    }
    if (object->count >= object->item_capacity) {
 8012000:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8012004:	429a      	cmp	r2, r3
 8012006:	d22c      	bcs.n	8012062 <json_object_set_value+0xca>
    return parson_strndup(string, strlen(string));
 8012008:	4638      	mov	r0, r7
 801200a:	f7ee f959 	bl	80002c0 <strlen>
    char *output_string = (char*)parson_malloc(n + 1);
 801200e:	4b2c      	ldr	r3, [pc, #176]	; (80120c0 <json_object_set_value+0x128>)
    return parson_strndup(string, strlen(string));
 8012010:	4683      	mov	fp, r0
    char *output_string = (char*)parson_malloc(n + 1);
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	3001      	adds	r0, #1
 8012016:	4798      	blx	r3
    if (!output_string) {
 8012018:	4681      	mov	r9, r0
 801201a:	2800      	cmp	r0, #0
 801201c:	d046      	beq.n	80120ac <json_object_set_value+0x114>
    output_string[n] = '\0';
 801201e:	2300      	movs	r3, #0
 8012020:	f809 300b 	strb.w	r3, [r9, fp]
    memcpy(output_string, string, n);
 8012024:	465a      	mov	r2, fp
 8012026:	4639      	mov	r1, r7
 8012028:	f009 fc39 	bl	801b89e <memcpy>
    }
    key_copy = parson_strdup(name);
    if (!key_copy) {
        return JSONFailure;
    }
    object->names[object->count] = key_copy;
 801202c:	69b3      	ldr	r3, [r6, #24]
 801202e:	68f2      	ldr	r2, [r6, #12]
 8012030:	f842 9023 	str.w	r9, [r2, r3, lsl #2]
    object->cells[cell_ix] = object->count;
 8012034:	6872      	ldr	r2, [r6, #4]
 8012036:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    object->values[object->count] = value;
 801203a:	6932      	ldr	r2, [r6, #16]
 801203c:	69b3      	ldr	r3, [r6, #24]
 801203e:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
    object->cell_ixs[object->count] = cell_ix;
 8012042:	6972      	ldr	r2, [r6, #20]
 8012044:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    object->hashes[object->count] = hash;
 8012048:	68b2      	ldr	r2, [r6, #8]
 801204a:	69b3      	ldr	r3, [r6, #24]
 801204c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    object->count++;
 8012050:	3301      	adds	r3, #1
 8012052:	61b3      	str	r3, [r6, #24]
    value->parent = json_object_get_wrapping_value(object);
 8012054:	6833      	ldr	r3, [r6, #0]
 8012056:	f8c8 3000 	str.w	r3, [r8]
    return JSONSuccess;
}
 801205a:	4650      	mov	r0, sl
 801205c:	b005      	add	sp, #20
 801205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        JSON_Status res = json_object_grow_and_rehash(object);
 8012062:	4630      	mov	r0, r6
 8012064:	f7ff f9fe 	bl	8011464 <json_object_grow_and_rehash>
        if (res != JSONSuccess) {
 8012068:	bb00      	cbnz	r0, 80120ac <json_object_set_value+0x114>
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 801206a:	4638      	mov	r0, r7
 801206c:	f7ee f928 	bl	80002c0 <strlen>
 8012070:	ab03      	add	r3, sp, #12
 8012072:	4602      	mov	r2, r0
 8012074:	9300      	str	r3, [sp, #0]
 8012076:	4639      	mov	r1, r7
 8012078:	4623      	mov	r3, r4
 801207a:	4630      	mov	r0, r6
 801207c:	f7fe fa98 	bl	80105b0 <json_object_get_cell_ix>
 8012080:	4605      	mov	r5, r0
 8012082:	e7c1      	b.n	8012008 <json_object_set_value+0x70>
        item_ix = object->cells[cell_ix];
 8012084:	6872      	ldr	r2, [r6, #4]
        old_value = object->values[item_ix];
 8012086:	6933      	ldr	r3, [r6, #16]
 8012088:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
        json_value_free(old_value);
 801208c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012090:	f7ff f96a 	bl	8011368 <json_value_free>
        object->values[item_ix] = value;
 8012094:	6933      	ldr	r3, [r6, #16]
 8012096:	f843 8024 	str.w	r8, [r3, r4, lsl #2]
        return JSONSuccess;
 801209a:	f04f 0a00 	mov.w	sl, #0
        value->parent = json_object_get_wrapping_value(object);
 801209e:	6833      	ldr	r3, [r6, #0]
 80120a0:	f8c8 3000 	str.w	r3, [r8]
}
 80120a4:	4650      	mov	r0, sl
 80120a6:	b005      	add	sp, #20
 80120a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return JSONFailure;
 80120ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
}
 80120b0:	4650      	mov	r0, sl
 80120b2:	b005      	add	sp, #20
 80120b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    unsigned long hash = 5381;
 80120b8:	f241 5405 	movw	r4, #5381	; 0x1505
 80120bc:	e793      	b.n	8011fe6 <json_object_set_value+0x4e>
 80120be:	bf00      	nop
 80120c0:	20000308 	.word	0x20000308

080120c4 <json_object_dotset_value>:
    JSON_Object *temp_object = NULL, *new_object = NULL;
    JSON_Status status = JSONFailure;
    size_t name_len = 0;
    char *name_copy = NULL;
    
    if (object == NULL || name == NULL || value == NULL) {
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d05a      	beq.n	801217e <json_object_dotset_value+0xba>
JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 80120c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	460e      	mov	r6, r1
    if (object == NULL || name == NULL || value == NULL) {
 80120ce:	2900      	cmp	r1, #0
 80120d0:	d04f      	beq.n	8012172 <json_object_dotset_value+0xae>
 80120d2:	4690      	mov	r8, r2
 80120d4:	4607      	mov	r7, r0
 80120d6:	b962      	cbnz	r2, 80120f2 <json_object_dotset_value+0x2e>
 80120d8:	e04b      	b.n	8012172 <json_object_dotset_value+0xae>
    dot_pos = strchr(name, '.');
    if (dot_pos == NULL) {
        return json_object_set_value(object, name, value);
    }
    name_len = dot_pos - name;
    temp_value = json_object_getn_value(object, name, name_len);
 80120da:	f7fe fab1 	bl	8010640 <json_object_getn_value>
    if (temp_value) {
 80120de:	4605      	mov	r5, r0
 80120e0:	b1c0      	cbz	r0, 8012114 <json_object_dotset_value+0x50>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 80120e2:	6843      	ldr	r3, [r0, #4]
 80120e4:	2b04      	cmp	r3, #4
            return JSONFailure;
        }
        temp_object = json_value_get_object(temp_value);
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 80120e6:	f104 0601 	add.w	r6, r4, #1
        if (json_value_get_type(temp_value) != JSONObject) {
 80120ea:	d142      	bne.n	8012172 <json_object_dotset_value+0xae>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80120ec:	6887      	ldr	r7, [r0, #8]
    if (object == NULL || name == NULL || value == NULL) {
 80120ee:	2f00      	cmp	r7, #0
 80120f0:	d03f      	beq.n	8012172 <json_object_dotset_value+0xae>
    dot_pos = strchr(name, '.');
 80120f2:	212e      	movs	r1, #46	; 0x2e
 80120f4:	4630      	mov	r0, r6
 80120f6:	f009 fb23 	bl	801b740 <strchr>
 80120fa:	4604      	mov	r4, r0
    name_len = dot_pos - name;
 80120fc:	eba4 0906 	sub.w	r9, r4, r6
    temp_value = json_object_getn_value(object, name, name_len);
 8012100:	4631      	mov	r1, r6
 8012102:	4638      	mov	r0, r7
 8012104:	464a      	mov	r2, r9
    if (dot_pos == NULL) {
 8012106:	2c00      	cmp	r4, #0
 8012108:	d1e7      	bne.n	80120da <json_object_dotset_value+0x16>
        return json_object_set_value(object, name, value);
 801210a:	4642      	mov	r2, r8
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
        json_value_free(new_value);
        return JSONFailure;
    }
    return JSONSuccess;
}
 801210c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return json_object_set_value(object, name, value);
 8012110:	f7ff bf42 	b.w	8011f98 <json_object_set_value>
    new_value = json_value_init_object();
 8012114:	f7ff fb70 	bl	80117f8 <json_value_init_object>
    if (new_value == NULL) {
 8012118:	4682      	mov	sl, r0
 801211a:	b350      	cbz	r0, 8012172 <json_object_dotset_value+0xae>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801211c:	6843      	ldr	r3, [r0, #4]
 801211e:	2b04      	cmp	r3, #4
 8012120:	bf08      	it	eq
 8012122:	6885      	ldreq	r5, [r0, #8]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 8012124:	3401      	adds	r4, #1
 8012126:	4642      	mov	r2, r8
 8012128:	4621      	mov	r1, r4
 801212a:	4628      	mov	r0, r5
 801212c:	f7ff ffca 	bl	80120c4 <json_object_dotset_value>
    if (status != JSONSuccess) {
 8012130:	4680      	mov	r8, r0
 8012132:	b9d8      	cbnz	r0, 801216c <json_object_dotset_value+0xa8>
    char *output_string = (char*)parson_malloc(n + 1);
 8012134:	4b13      	ldr	r3, [pc, #76]	; (8012184 <json_object_dotset_value+0xc0>)
 8012136:	f109 0001 	add.w	r0, r9, #1
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4798      	blx	r3
    if (!output_string) {
 801213e:	4683      	mov	fp, r0
 8012140:	b1d8      	cbz	r0, 801217a <json_object_dotset_value+0xb6>
    memcpy(output_string, string, n);
 8012142:	464a      	mov	r2, r9
 8012144:	4631      	mov	r1, r6
    output_string[n] = '\0';
 8012146:	f800 8009 	strb.w	r8, [r0, r9]
    memcpy(output_string, string, n);
 801214a:	f009 fba8 	bl	801b89e <memcpy>
    status = json_object_add(object, name_copy, new_value);
 801214e:	4652      	mov	r2, sl
 8012150:	4659      	mov	r1, fp
 8012152:	4638      	mov	r0, r7
 8012154:	f7ff fa22 	bl	801159c <json_object_add>
    if (status != JSONSuccess) {
 8012158:	b168      	cbz	r0, 8012176 <json_object_dotset_value+0xb2>
        parson_free(name_copy);
 801215a:	4b0a      	ldr	r3, [pc, #40]	; (8012184 <json_object_dotset_value+0xc0>)
 801215c:	4658      	mov	r0, fp
 801215e:	685a      	ldr	r2, [r3, #4]
 8012160:	4790      	blx	r2
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 8012162:	4642      	mov	r2, r8
 8012164:	4621      	mov	r1, r4
 8012166:	4628      	mov	r0, r5
 8012168:	f7ff fb26 	bl	80117b8 <json_object_dotremove_internal>
        json_value_free(new_value);
 801216c:	4650      	mov	r0, sl
 801216e:	f7ff f8fb 	bl	8011368 <json_value_free>
        return JSONFailure;
 8012172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8012176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801217a:	4602      	mov	r2, r0
 801217c:	e7f2      	b.n	8012164 <json_object_dotset_value+0xa0>
        return JSONFailure;
 801217e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8012182:	4770      	bx	lr
 8012184:	20000308 	.word	0x20000308

08012188 <json_object_dotset_string>:
    if (string == NULL) {
 8012188:	b1ca      	cbz	r2, 80121be <json_object_dotset_string+0x36>

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801218a:	b570      	push	{r4, r5, r6, lr}
 801218c:	4605      	mov	r5, r0
    return json_value_init_string_with_len(string, strlen(string));
 801218e:	4610      	mov	r0, r2
 8012190:	4614      	mov	r4, r2
 8012192:	460e      	mov	r6, r1
 8012194:	f7ee f894 	bl	80002c0 <strlen>
 8012198:	4601      	mov	r1, r0
 801219a:	4620      	mov	r0, r4
 801219c:	f7ff fdfc 	bl	8011d98 <json_value_init_string_with_len>
    JSON_Value *value = json_value_init_string(string);
    if (value == NULL) {
 80121a0:	4604      	mov	r4, r0
 80121a2:	b148      	cbz	r0, 80121b8 <json_object_dotset_string+0x30>
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) != JSONSuccess) {
 80121a4:	4602      	mov	r2, r0
 80121a6:	4631      	mov	r1, r6
 80121a8:	4628      	mov	r0, r5
 80121aa:	f7ff ff8b 	bl	80120c4 <json_object_dotset_value>
 80121ae:	b900      	cbnz	r0, 80121b2 <json_object_dotset_string+0x2a>
        json_value_free(value);
        return JSONFailure;
    }
    return JSONSuccess;
}
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
        json_value_free(value);
 80121b2:	4620      	mov	r0, r4
 80121b4:	f7ff f8d8 	bl	8011368 <json_value_free>
        return JSONFailure;
 80121b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80121bc:	bd70      	pop	{r4, r5, r6, pc}
        return JSONFailure;
 80121be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80121c2:	4770      	bx	lr

080121c4 <json_object_dotset_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 80121c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c8:	ec55 4b10 	vmov	r4, r5, d0
 80121cc:	4680      	mov	r8, r0
 80121ce:	4689      	mov	r9, r1
    if (IS_NUMBER_INVALID(number)) {
 80121d0:	ee10 2a10 	vmov	r2, s0
 80121d4:	ee10 0a10 	vmov	r0, s0
 80121d8:	462b      	mov	r3, r5
 80121da:	4629      	mov	r1, r5
 80121dc:	f7ee fcce 	bl	8000b7c <__aeabi_dcmpun>
 80121e0:	bb40      	cbnz	r0, 8012234 <json_object_dotset_number+0x70>
 80121e2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80121e6:	4b15      	ldr	r3, [pc, #84]	; (801223c <json_object_dotset_number+0x78>)
 80121e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121ec:	4620      	mov	r0, r4
 80121ee:	4639      	mov	r1, r7
 80121f0:	f7ee fcc4 	bl	8000b7c <__aeabi_dcmpun>
 80121f4:	b938      	cbnz	r0, 8012206 <json_object_dotset_number+0x42>
 80121f6:	4b11      	ldr	r3, [pc, #68]	; (801223c <json_object_dotset_number+0x78>)
 80121f8:	4620      	mov	r0, r4
 80121fa:	4639      	mov	r1, r7
 80121fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012200:	f7ee fc9e 	bl	8000b40 <__aeabi_dcmple>
 8012204:	b1b0      	cbz	r0, 8012234 <json_object_dotset_number+0x70>
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8012206:	4b0e      	ldr	r3, [pc, #56]	; (8012240 <json_object_dotset_number+0x7c>)
 8012208:	2010      	movs	r0, #16
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4798      	blx	r3
    if (new_value == NULL) {
 801220e:	4606      	mov	r6, r0
 8012210:	b180      	cbz	r0, 8012234 <json_object_dotset_number+0x70>
    new_value->value.number = number;
 8012212:	e9c0 4502 	strd	r4, r5, [r0, #8]
    new_value->type = JSONNumber;
 8012216:	2303      	movs	r3, #3
 8012218:	2400      	movs	r4, #0
    JSON_Value *value = json_value_init_number(number);
    if (value == NULL) {
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) != JSONSuccess) {
 801221a:	4602      	mov	r2, r0
    new_value->type = JSONNumber;
 801221c:	e9c6 4300 	strd	r4, r3, [r6]
    if (json_object_dotset_value(object, name, value) != JSONSuccess) {
 8012220:	4649      	mov	r1, r9
 8012222:	4640      	mov	r0, r8
 8012224:	f7ff ff4e 	bl	80120c4 <json_object_dotset_value>
 8012228:	b908      	cbnz	r0, 801222e <json_object_dotset_number+0x6a>
        json_value_free(value);
        return JSONFailure;
    }
    return JSONSuccess;
}
 801222a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        json_value_free(value);
 801222e:	4630      	mov	r0, r6
 8012230:	f7ff f89a 	bl	8011368 <json_value_free>
        return JSONFailure;
 8012234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8012238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223c:	7fefffff 	.word	0x7fefffff
 8012240:	20000308 	.word	0x20000308

08012244 <json_set_allocation_functions>:
int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
    parson_malloc = malloc_fun;
 8012244:	4b01      	ldr	r3, [pc, #4]	; (801224c <json_set_allocation_functions+0x8>)
    parson_free = free_fun;
 8012246:	e9c3 0100 	strd	r0, r1, [r3]
}
 801224a:	4770      	bx	lr
 801224c:	20000308 	.word	0x20000308

08012250 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012250:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012252:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8012256:	b184      	cbz	r4, 801227a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012258:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801225c:	b15b      	cbz	r3, 8012276 <USBD_CDC_EP0_RxReady+0x26>
 801225e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8012262:	28ff      	cmp	r0, #255	; 0xff
 8012264:	d007      	beq.n	8012276 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 801226c:	4621      	mov	r1, r4
 801226e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8012270:	23ff      	movs	r3, #255	; 0xff
 8012272:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012276:	2000      	movs	r0, #0
}
 8012278:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 801227a:	2003      	movs	r0, #3
}
 801227c:	bd10      	pop	{r4, pc}
 801227e:	bf00      	nop

08012280 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012280:	2343      	movs	r3, #67	; 0x43
 8012282:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8012284:	4800      	ldr	r0, [pc, #0]	; (8012288 <USBD_CDC_GetFSCfgDesc+0x8>)
 8012286:	4770      	bx	lr
 8012288:	20000314 	.word	0x20000314

0801228c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801228c:	2343      	movs	r3, #67	; 0x43
 801228e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8012290:	4800      	ldr	r0, [pc, #0]	; (8012294 <USBD_CDC_GetHSCfgDesc+0x8>)
 8012292:	4770      	bx	lr
 8012294:	20000358 	.word	0x20000358

08012298 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012298:	2343      	movs	r3, #67	; 0x43
 801229a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 801229c:	4800      	ldr	r0, [pc, #0]	; (80122a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 801229e:	4770      	bx	lr
 80122a0:	2000039c 	.word	0x2000039c

080122a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80122a4:	230a      	movs	r3, #10
 80122a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80122a8:	4800      	ldr	r0, [pc, #0]	; (80122ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80122aa:	4770      	bx	lr
 80122ac:	200003e0 	.word	0x200003e0

080122b0 <USBD_CDC_DataOut>:
{
 80122b0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80122b2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80122b6:	b17d      	cbz	r5, 80122d8 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80122b8:	4604      	mov	r4, r0
 80122ba:	f7f2 fa41 	bl	8004740 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80122be:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80122c2:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80122ca:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80122ce:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80122d2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80122d4:	2000      	movs	r0, #0
}
 80122d6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80122d8:	2003      	movs	r0, #3
}
 80122da:	bd38      	pop	{r3, r4, r5, pc}

080122dc <USBD_CDC_DataIn>:
{
 80122dc:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 80122de:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80122e2:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 80122e6:	b35d      	cbz	r5, 8012340 <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80122e8:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 80122ec:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80122f0:	4684      	mov	ip, r0
 80122f2:	f8de 3018 	ldr.w	r3, [lr, #24]
 80122f6:	460a      	mov	r2, r1
 80122f8:	b96b      	cbnz	r3, 8012316 <USBD_CDC_DataIn+0x3a>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80122fa:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
 80122fe:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8012300:	2400      	movs	r4, #0
 8012302:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012306:	b1cb      	cbz	r3, 801233c <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012308:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 801230c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8012310:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8012312:	4620      	mov	r0, r4
}
 8012314:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012316:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 801231a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 801231e:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8012320:	fbb3 f6f4 	udiv	r6, r3, r4
 8012324:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012328:	2c00      	cmp	r4, #0
 801232a:	d1e6      	bne.n	80122fa <USBD_CDC_DataIn+0x1e>
    pdev->ep_in[epnum].total_length = 0U;
 801232c:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012330:	4623      	mov	r3, r4
 8012332:	4622      	mov	r2, r4
 8012334:	f7f2 f9f4 	bl	8004720 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8012338:	4620      	mov	r0, r4
}
 801233a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 801233c:	4618      	mov	r0, r3
}
 801233e:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8012340:	2003      	movs	r0, #3
}
 8012342:	bd70      	pop	{r4, r5, r6, pc}

08012344 <USBD_CDC_Setup>:
{
 8012344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012348:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 801234c:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 801234e:	2600      	movs	r6, #0
 8012350:	f88d 6005 	strb.w	r6, [sp, #5]
  uint16_t status_info = 0U;
 8012354:	f8ad 6006 	strh.w	r6, [sp, #6]
  if (hcdc == NULL)
 8012358:	f1b8 0f00 	cmp.w	r8, #0
 801235c:	d068      	beq.n	8012430 <USBD_CDC_Setup+0xec>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801235e:	780b      	ldrb	r3, [r1, #0]
 8012360:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8012364:	4607      	mov	r7, r0
 8012366:	460c      	mov	r4, r1
 8012368:	d01f      	beq.n	80123aa <USBD_CDC_Setup+0x66>
 801236a:	2d20      	cmp	r5, #32
 801236c:	d008      	beq.n	8012380 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 801236e:	4621      	mov	r1, r4
 8012370:	4638      	mov	r0, r7
 8012372:	f000 fd59 	bl	8012e28 <USBD_CtlError>
          ret = USBD_FAIL;
 8012376:	2503      	movs	r5, #3
}
 8012378:	4628      	mov	r0, r5
 801237a:	b002      	add	sp, #8
 801237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 8012380:	88cd      	ldrh	r5, [r1, #6]
 8012382:	b38d      	cbz	r5, 80123e8 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8012384:	061b      	lsls	r3, r3, #24
 8012386:	d558      	bpl.n	801243a <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012388:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801238c:	7860      	ldrb	r0, [r4, #1]
 801238e:	689b      	ldr	r3, [r3, #8]
 8012390:	462a      	mov	r2, r5
 8012392:	4641      	mov	r1, r8
 8012394:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012396:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012398:	2a07      	cmp	r2, #7
 801239a:	4641      	mov	r1, r8
 801239c:	bf28      	it	cs
 801239e:	2207      	movcs	r2, #7
 80123a0:	4638      	mov	r0, r7
  USBD_StatusTypeDef ret = USBD_OK;
 80123a2:	4635      	mov	r5, r6
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80123a4:	f000 fd76 	bl	8012e94 <USBD_CtlSendData>
 80123a8:	e7e6      	b.n	8012378 <USBD_CDC_Setup+0x34>
      switch (req->bRequest)
 80123aa:	784e      	ldrb	r6, [r1, #1]
 80123ac:	2e0b      	cmp	r6, #11
 80123ae:	d8de      	bhi.n	801236e <USBD_CDC_Setup+0x2a>
 80123b0:	a301      	add	r3, pc, #4	; (adr r3, 80123b8 <USBD_CDC_Setup+0x74>)
 80123b2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 80123b6:	bf00      	nop
 80123b8:	0801241b 	.word	0x0801241b
 80123bc:	08012379 	.word	0x08012379
 80123c0:	0801236f 	.word	0x0801236f
 80123c4:	0801236f 	.word	0x0801236f
 80123c8:	0801236f 	.word	0x0801236f
 80123cc:	0801236f 	.word	0x0801236f
 80123d0:	0801236f 	.word	0x0801236f
 80123d4:	0801236f 	.word	0x0801236f
 80123d8:	0801236f 	.word	0x0801236f
 80123dc:	0801236f 	.word	0x0801236f
 80123e0:	08012407 	.word	0x08012407
 80123e4:	080123fd 	.word	0x080123fd
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80123e8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80123ec:	7848      	ldrb	r0, [r1, #1]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	462a      	mov	r2, r5
 80123f2:	4798      	blx	r3
}
 80123f4:	4628      	mov	r0, r5
 80123f6:	b002      	add	sp, #8
 80123f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80123fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012400:	2b03      	cmp	r3, #3
 8012402:	d0b9      	beq.n	8012378 <USBD_CDC_Setup+0x34>
 8012404:	e7b3      	b.n	801236e <USBD_CDC_Setup+0x2a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012406:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801240a:	2b03      	cmp	r3, #3
 801240c:	d1af      	bne.n	801236e <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801240e:	2201      	movs	r2, #1
 8012410:	f10d 0105 	add.w	r1, sp, #5
 8012414:	f000 fd3e 	bl	8012e94 <USBD_CtlSendData>
 8012418:	e7ae      	b.n	8012378 <USBD_CDC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801241a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801241e:	2b03      	cmp	r3, #3
 8012420:	d1a5      	bne.n	801236e <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012422:	2202      	movs	r2, #2
 8012424:	f10d 0106 	add.w	r1, sp, #6
 8012428:	f000 fd34 	bl	8012e94 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 801242c:	4635      	mov	r5, r6
 801242e:	e7a3      	b.n	8012378 <USBD_CDC_Setup+0x34>
    return (uint8_t)USBD_FAIL;
 8012430:	2503      	movs	r5, #3
}
 8012432:	4628      	mov	r0, r5
 8012434:	b002      	add	sp, #8
 8012436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 801243a:	784b      	ldrb	r3, [r1, #1]
 801243c:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012440:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012444:	462a      	mov	r2, r5
 8012446:	4641      	mov	r1, r8
 8012448:	f000 fd3a 	bl	8012ec0 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 801244c:	4635      	mov	r5, r6
 801244e:	e793      	b.n	8012378 <USBD_CDC_Setup+0x34>

08012450 <USBD_CDC_DeInit>:
{
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012454:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012456:	2181      	movs	r1, #129	; 0x81
 8012458:	f7f2 f92e 	bl	80046b8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801245c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801245e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012460:	4620      	mov	r0, r4
 8012462:	f7f2 f929 	bl	80046b8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012466:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801246a:	2182      	movs	r1, #130	; 0x82
 801246c:	4620      	mov	r0, r4
 801246e:	f7f2 f923 	bl	80046b8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8012472:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012476:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8012478:	b14b      	cbz	r3, 801248e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801247a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012482:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8012486:	f007 f901 	bl	801968c <free>
    pdev->pClassData = NULL;
 801248a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801248e:	2000      	movs	r0, #0
 8012490:	bd38      	pop	{r3, r4, r5, pc}
 8012492:	bf00      	nop

08012494 <USBD_CDC_Init>:
{
 8012494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012498:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801249a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801249e:	f007 f8ed 	bl	801967c <malloc>
  if (hcdc == NULL)
 80124a2:	4605      	mov	r5, r0
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d04e      	beq.n	8012546 <USBD_CDC_Init+0xb2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124a8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 80124aa:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124ae:	b38b      	cbz	r3, 8012514 <USBD_CDC_Init+0x80>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80124b0:	2340      	movs	r3, #64	; 0x40
 80124b2:	2202      	movs	r2, #2
 80124b4:	2181      	movs	r1, #129	; 0x81
 80124b6:	4620      	mov	r0, r4
 80124b8:	f7f2 f8f4 	bl	80046a4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80124bc:	2101      	movs	r1, #1
 80124be:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80124c0:	2340      	movs	r3, #64	; 0x40
 80124c2:	2202      	movs	r2, #2
 80124c4:	4620      	mov	r0, r4
 80124c6:	f7f2 f8ed 	bl	80046a4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80124ca:	2601      	movs	r6, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80124cc:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80124ce:	2308      	movs	r3, #8
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80124d0:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80124d4:	2182      	movs	r1, #130	; 0x82
 80124d6:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80124d8:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80124dc:	4620      	mov	r0, r4
 80124de:	f7f2 f8e1 	bl	80046a4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80124e2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80124e6:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124ee:	7c27      	ldrb	r7, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80124f0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 80124f4:	f04f 0800 	mov.w	r8, #0
 80124f8:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80124fc:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012500:	b9c7      	cbnz	r7, 8012534 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012506:	4631      	mov	r1, r6
 8012508:	4620      	mov	r0, r4
 801250a:	f7f2 f911 	bl	8004730 <USBD_LL_PrepareReceive>
}
 801250e:	4638      	mov	r0, r7
 8012510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012518:	2202      	movs	r2, #2
 801251a:	2181      	movs	r1, #129	; 0x81
 801251c:	4620      	mov	r0, r4
 801251e:	f7f2 f8c1 	bl	80046a4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012522:	2101      	movs	r1, #1
 8012524:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012526:	f44f 7300 	mov.w	r3, #512	; 0x200
 801252a:	2202      	movs	r2, #2
 801252c:	4620      	mov	r0, r4
 801252e:	f7f2 f8b9 	bl	80046a4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012532:	e7ca      	b.n	80124ca <USBD_CDC_Init+0x36>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012534:	2340      	movs	r3, #64	; 0x40
 8012536:	4631      	mov	r1, r6
 8012538:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 801253a:	4647      	mov	r7, r8
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801253c:	f7f2 f8f8 	bl	8004730 <USBD_LL_PrepareReceive>
}
 8012540:	4638      	mov	r0, r7
 8012542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 8012546:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801254a:	2702      	movs	r7, #2
 801254c:	e7df      	b.n	801250e <USBD_CDC_Init+0x7a>
 801254e:	bf00      	nop

08012550 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8012550:	b119      	cbz	r1, 801255a <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8012552:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012556:	2000      	movs	r0, #0
 8012558:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 801255a:	2003      	movs	r0, #3
}
 801255c:	4770      	bx	lr
 801255e:	bf00      	nop

08012560 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012560:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8012564:	b12b      	cbz	r3, 8012572 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8012566:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801256a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801256e:	2000      	movs	r0, #0
 8012570:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8012572:	2003      	movs	r0, #3
}
 8012574:	4770      	bx	lr
 8012576:	bf00      	nop

08012578 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012578:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 801257c:	b11b      	cbz	r3, 8012586 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 801257e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012582:	2000      	movs	r0, #0
 8012584:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8012586:	2003      	movs	r0, #3
}
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop

0801258c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801258c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8012590:	b192      	cbz	r2, 80125b8 <USBD_CDC_TransmitPacket+0x2c>
{
 8012592:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8012594:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8012598:	b10c      	cbz	r4, 801259e <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 801259a:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 801259c:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 801259e:	2301      	movs	r3, #1
 80125a0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80125a4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80125a8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80125ac:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80125ae:	2181      	movs	r1, #129	; 0x81
 80125b0:	f7f2 f8b6 	bl	8004720 <USBD_LL_Transmit>
    ret = USBD_OK;
 80125b4:	4620      	mov	r0, r4
}
 80125b6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80125b8:	2003      	movs	r0, #3
}
 80125ba:	4770      	bx	lr

080125bc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80125bc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 80125c0:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 80125c2:	b18a      	cbz	r2, 80125e8 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125c4:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80125c6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125ca:	b134      	cbz	r4, 80125da <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80125cc:	2340      	movs	r3, #64	; 0x40
 80125ce:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80125d0:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80125d2:	f7f2 f8ad 	bl	8004730 <USBD_LL_PrepareReceive>
}
 80125d6:	4620      	mov	r0, r4
 80125d8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80125da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125de:	2101      	movs	r1, #1
 80125e0:	f7f2 f8a6 	bl	8004730 <USBD_LL_PrepareReceive>
}
 80125e4:	4620      	mov	r0, r4
 80125e6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80125e8:	2403      	movs	r4, #3
}
 80125ea:	4620      	mov	r0, r4
 80125ec:	bd10      	pop	{r4, pc}
 80125ee:	bf00      	nop

080125f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80125f0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80125f2:	b188      	cbz	r0, 8012618 <USBD_Init+0x28>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80125f4:	2300      	movs	r3, #0
 80125f6:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80125fa:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80125fe:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012602:	b109      	cbz	r1, 8012608 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8012604:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012608:	2301      	movs	r3, #1
 801260a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 801260e:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);

  return ret;
}
 8012610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ret = USBD_LL_Init(pdev);
 8012614:	f7f2 b810 	b.w	8004638 <USBD_LL_Init>
    USBD_ErrLog("Invalid Device handle");
 8012618:	4805      	ldr	r0, [pc, #20]	; (8012630 <USBD_Init+0x40>)
 801261a:	f008 ff5d 	bl	801b4d8 <iprintf>
 801261e:	4805      	ldr	r0, [pc, #20]	; (8012634 <USBD_Init+0x44>)
 8012620:	f008 ff5a 	bl	801b4d8 <iprintf>
 8012624:	200a      	movs	r0, #10
 8012626:	f008 ff69 	bl	801b4fc <putchar>
}
 801262a:	2003      	movs	r0, #3
 801262c:	bd08      	pop	{r3, pc}
 801262e:	bf00      	nop
 8012630:	08022b74 	.word	0x08022b74
 8012634:	08022b7c 	.word	0x08022b7c

08012638 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012638:	b530      	push	{r4, r5, lr}
 801263a:	b083      	sub	sp, #12
  uint16_t len = 0U;
 801263c:	2400      	movs	r4, #0
 801263e:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8012642:	b179      	cbz	r1, 8012664 <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012644:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8012646:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801264a:	4605      	mov	r5, r0
 801264c:	b13b      	cbz	r3, 801265e <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801264e:	f10d 0006 	add.w	r0, sp, #6
 8012652:	4798      	blx	r3
 8012654:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012658:	4620      	mov	r0, r4
}
 801265a:	b003      	add	sp, #12
 801265c:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 801265e:	4618      	mov	r0, r3
}
 8012660:	b003      	add	sp, #12
 8012662:	bd30      	pop	{r4, r5, pc}
    USBD_ErrLog("Invalid Class handle");
 8012664:	4805      	ldr	r0, [pc, #20]	; (801267c <USBD_RegisterClass+0x44>)
 8012666:	f008 ff37 	bl	801b4d8 <iprintf>
 801266a:	4805      	ldr	r0, [pc, #20]	; (8012680 <USBD_RegisterClass+0x48>)
 801266c:	f008 ff34 	bl	801b4d8 <iprintf>
 8012670:	200a      	movs	r0, #10
 8012672:	f008 ff43 	bl	801b4fc <putchar>
    return USBD_FAIL;
 8012676:	2003      	movs	r0, #3
 8012678:	e7ef      	b.n	801265a <USBD_RegisterClass+0x22>
 801267a:	bf00      	nop
 801267c:	08022b74 	.word	0x08022b74
 8012680:	08022b94 	.word	0x08022b94

08012684 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012684:	f7f2 b806 	b.w	8004694 <USBD_LL_Start>

08012688 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8012688:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801268c:	b10b      	cbz	r3, 8012692 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4718      	bx	r3
  }

  return ret;
}
 8012692:	2003      	movs	r0, #3
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop

08012698 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012698:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801269a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801269e:	b10b      	cbz	r3, 80126a4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80126a4:	2000      	movs	r0, #0
 80126a6:	bd08      	pop	{r3, pc}

080126a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80126a8:	b538      	push	{r3, r4, r5, lr}
 80126aa:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80126ac:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80126b0:	4628      	mov	r0, r5
 80126b2:	f000 fbad 	bl	8012e10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80126b6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 80126ba:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 80126be:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 80126c2:	2301      	movs	r3, #1
 80126c4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80126c8:	f001 031f 	and.w	r3, r1, #31
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d009      	beq.n	80126e4 <USBD_LL_SetupStage+0x3c>
 80126d0:	2b02      	cmp	r3, #2
 80126d2:	d013      	beq.n	80126fc <USBD_LL_SetupStage+0x54>
 80126d4:	b163      	cbz	r3, 80126f0 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80126d6:	4620      	mov	r0, r4
 80126d8:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 80126dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80126e0:	f7f1 bff2 	b.w	80046c8 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80126e4:	4629      	mov	r1, r5
 80126e6:	4620      	mov	r0, r4
}
 80126e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80126ec:	f000 bac8 	b.w	8012c80 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80126f0:	4629      	mov	r1, r5
 80126f2:	4620      	mov	r0, r4
}
 80126f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80126f8:	f000 b924 	b.w	8012944 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80126fc:	4629      	mov	r1, r5
 80126fe:	4620      	mov	r0, r4
}
 8012700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012704:	f000 baec 	b.w	8012ce0 <USBD_StdEPReq>

08012708 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012708:	b510      	push	{r4, lr}
 801270a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801270c:	b931      	cbnz	r1, 801271c <USBD_LL_DataOutStage+0x14>
 801270e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012710:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8012714:	2a03      	cmp	r2, #3
 8012716:	d00d      	beq.n	8012734 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 8012718:	2000      	movs	r0, #0
 801271a:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801271c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012720:	2b03      	cmp	r3, #3
 8012722:	d1f9      	bne.n	8012718 <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 8012724:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012728:	699b      	ldr	r3, [r3, #24]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d0f4      	beq.n	8012718 <USBD_LL_DataOutStage+0x10>
}
 801272e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012732:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8012734:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8012738:	4291      	cmp	r1, r2
 801273a:	d808      	bhi.n	801274e <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801273c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012740:	2b03      	cmp	r3, #3
 8012742:	d00e      	beq.n	8012762 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8012744:	4620      	mov	r0, r4
 8012746:	f000 fbd1 	bl	8012eec <USBD_CtlSendStatus>
}
 801274a:	2000      	movs	r0, #0
 801274c:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 801274e:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012750:	428a      	cmp	r2, r1
 8012752:	bf28      	it	cs
 8012754:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8012756:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801275a:	4619      	mov	r1, r3
 801275c:	f000 fbbe 	bl	8012edc <USBD_CtlContinueRx>
 8012760:	e7da      	b.n	8012718 <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 8012762:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012766:	691b      	ldr	r3, [r3, #16]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d0eb      	beq.n	8012744 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 801276c:	4798      	blx	r3
 801276e:	e7e9      	b.n	8012744 <USBD_LL_DataOutStage+0x3c>

08012770 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012770:	b570      	push	{r4, r5, r6, lr}
 8012772:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012774:	b951      	cbnz	r1, 801278c <USBD_LL_DataInStage+0x1c>
 8012776:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012778:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 801277c:	2a02      	cmp	r2, #2
 801277e:	d011      	beq.n	80127a4 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012780:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8012784:	2b01      	cmp	r3, #1
 8012786:	d022      	beq.n	80127ce <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 8012788:	2000      	movs	r0, #0
 801278a:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801278c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012790:	2b03      	cmp	r3, #3
 8012792:	d1f9      	bne.n	8012788 <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 8012794:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012798:	695b      	ldr	r3, [r3, #20]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d0f4      	beq.n	8012788 <USBD_LL_DataInStage+0x18>
}
 801279e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80127a2:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80127a4:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 80127a8:	42b2      	cmp	r2, r6
 80127aa:	460d      	mov	r5, r1
 80127ac:	d814      	bhi.n	80127d8 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 80127ae:	d01f      	beq.n	80127f0 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127b0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80127b4:	2b03      	cmp	r3, #3
 80127b6:	d028      	beq.n	801280a <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80127b8:	2180      	movs	r1, #128	; 0x80
 80127ba:	4620      	mov	r0, r4
 80127bc:	f7f1 ff84 	bl	80046c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80127c0:	4620      	mov	r0, r4
 80127c2:	f000 fb9f 	bl	8012f04 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 80127c6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d1dc      	bne.n	8012788 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 80127ce:	2300      	movs	r3, #0
 80127d0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 80127d4:	2000      	movs	r0, #0
 80127d6:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80127d8:	1b92      	subs	r2, r2, r6
 80127da:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80127dc:	4619      	mov	r1, r3
 80127de:	f000 fb67 	bl	8012eb0 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127e2:	462b      	mov	r3, r5
 80127e4:	462a      	mov	r2, r5
 80127e6:	4629      	mov	r1, r5
 80127e8:	4620      	mov	r0, r4
 80127ea:	f7f1 ffa1 	bl	8004730 <USBD_LL_PrepareReceive>
 80127ee:	e7c7      	b.n	8012780 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 80127f0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d8dc      	bhi.n	80127b0 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 80127f6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d2d8      	bcs.n	80127b0 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80127fe:	460a      	mov	r2, r1
 8012800:	f000 fb56 	bl	8012eb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012804:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8012808:	e7eb      	b.n	80127e2 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 801280a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d0d1      	beq.n	80127b8 <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 8012814:	4620      	mov	r0, r4
 8012816:	4798      	blx	r3
 8012818:	e7ce      	b.n	80127b8 <USBD_LL_DataInStage+0x48>
 801281a:	bf00      	nop

0801281c <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 801281c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8012820:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012822:	2201      	movs	r2, #1
 8012824:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 8012828:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 801282a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 801282e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8012832:	b1eb      	cbz	r3, 8012870 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8012834:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 801283c:	b112      	cbz	r2, 8012844 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	b103      	cbz	r3, 8012844 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012842:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012844:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012846:	2200      	movs	r2, #0
 8012848:	4611      	mov	r1, r2
 801284a:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801284c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801284e:	4620      	mov	r0, r4
 8012850:	f7f1 ff28 	bl	80046a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012854:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012858:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801285c:	462b      	mov	r3, r5
 801285e:	2200      	movs	r2, #0
 8012860:	2180      	movs	r1, #128	; 0x80
 8012862:	4620      	mov	r0, r4
 8012864:	f7f1 ff1e 	bl	80046a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012868:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801286a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 801286c:	2000      	movs	r0, #0
}
 801286e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8012870:	2003      	movs	r0, #3
}
 8012872:	4770      	bx	lr

08012874 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8012874:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8012876:	2000      	movs	r0, #0
 8012878:	4770      	bx	lr
 801287a:	bf00      	nop

0801287c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 801287c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 8012880:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012882:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 8012884:	b2d2      	uxtb	r2, r2
 8012886:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 801288a:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801288c:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 8012890:	4770      	bx	lr
 8012892:	bf00      	nop

08012894 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012894:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012898:	2b04      	cmp	r3, #4
 801289a:	d104      	bne.n	80128a6 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 801289c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80128a6:	2000      	movs	r0, #0
 80128a8:	4770      	bx	lr
 80128aa:	bf00      	nop

080128ac <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 80128ac:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80128b0:	b15a      	cbz	r2, 80128ca <USBD_LL_SOF+0x1e>
{
 80128b2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	d001      	beq.n	80128c0 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 80128bc:	2000      	movs	r0, #0
}
 80128be:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80128c0:	69d3      	ldr	r3, [r2, #28]
 80128c2:	b123      	cbz	r3, 80128ce <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 80128c4:	4798      	blx	r3
  return USBD_OK;
 80128c6:	2000      	movs	r0, #0
}
 80128c8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80128ca:	2003      	movs	r0, #3
}
 80128cc:	4770      	bx	lr
  return USBD_OK;
 80128ce:	4618      	mov	r0, r3
}
 80128d0:	bd08      	pop	{r3, pc}
 80128d2:	bf00      	nop

080128d4 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80128d4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80128d8:	b15a      	cbz	r2, 80128f2 <USBD_LL_IsoINIncomplete+0x1e>
{
 80128da:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80128e0:	2b03      	cmp	r3, #3
 80128e2:	d001      	beq.n	80128e8 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80128e4:	2000      	movs	r0, #0
}
 80128e6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 80128e8:	6a13      	ldr	r3, [r2, #32]
 80128ea:	b123      	cbz	r3, 80128f6 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80128ec:	4798      	blx	r3
  return USBD_OK;
 80128ee:	2000      	movs	r0, #0
}
 80128f0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80128f2:	2003      	movs	r0, #3
}
 80128f4:	4770      	bx	lr
  return USBD_OK;
 80128f6:	4618      	mov	r0, r3
}
 80128f8:	bd08      	pop	{r3, pc}
 80128fa:	bf00      	nop

080128fc <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80128fc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8012900:	b15a      	cbz	r2, 801291a <USBD_LL_IsoOUTIncomplete+0x1e>
{
 8012902:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012904:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012908:	2b03      	cmp	r3, #3
 801290a:	d001      	beq.n	8012910 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 801290c:	2000      	movs	r0, #0
}
 801290e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012910:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012912:	b123      	cbz	r3, 801291e <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012914:	4798      	blx	r3
  return USBD_OK;
 8012916:	2000      	movs	r0, #0
}
 8012918:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 801291a:	2003      	movs	r0, #3
}
 801291c:	4770      	bx	lr
  return USBD_OK;
 801291e:	4618      	mov	r0, r3
}
 8012920:	bd08      	pop	{r3, pc}
 8012922:	bf00      	nop

08012924 <USBD_LL_DevConnected>:
 8012924:	2000      	movs	r0, #0
 8012926:	4770      	bx	lr

08012928 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 8012928:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 801292c:	2101      	movs	r1, #1
 801292e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8012932:	b12a      	cbz	r2, 8012940 <USBD_LL_DevDisconnected+0x18>
{
 8012934:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012936:	6852      	ldr	r2, [r2, #4]
 8012938:	7901      	ldrb	r1, [r0, #4]
 801293a:	4790      	blx	r2
  }

  return USBD_OK;
}
 801293c:	2000      	movs	r0, #0
 801293e:	bd08      	pop	{r3, pc}
 8012940:	2000      	movs	r0, #0
 8012942:	4770      	bx	lr

08012944 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012946:	780c      	ldrb	r4, [r1, #0]
 8012948:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801294c:	2c20      	cmp	r4, #32
{
 801294e:	b083      	sub	sp, #12
 8012950:	460e      	mov	r6, r1
 8012952:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012954:	d00e      	beq.n	8012974 <USBD_StdDevReq+0x30>
 8012956:	2c40      	cmp	r4, #64	; 0x40
 8012958:	d00c      	beq.n	8012974 <USBD_StdDevReq+0x30>
 801295a:	b1a4      	cbz	r4, 8012986 <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801295c:	2180      	movs	r1, #128	; 0x80
 801295e:	4628      	mov	r0, r5
 8012960:	f7f1 feb2 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012964:	2100      	movs	r1, #0
 8012966:	4628      	mov	r0, r5
 8012968:	f7f1 feae 	bl	80046c8 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 801296c:	2400      	movs	r4, #0
}
 801296e:	4620      	mov	r0, r4
 8012970:	b003      	add	sp, #12
 8012972:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012974:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8012978:	689b      	ldr	r3, [r3, #8]
 801297a:	4631      	mov	r1, r6
 801297c:	4628      	mov	r0, r5
}
 801297e:	b003      	add	sp, #12
 8012980:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012984:	4718      	bx	r3
      switch (req->bRequest)
 8012986:	784f      	ldrb	r7, [r1, #1]
 8012988:	2f09      	cmp	r7, #9
 801298a:	d8e7      	bhi.n	801295c <USBD_StdDevReq+0x18>
 801298c:	a301      	add	r3, pc, #4	; (adr r3, 8012994 <USBD_StdDevReq+0x50>)
 801298e:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8012992:	bf00      	nop
 8012994:	080129f5 	.word	0x080129f5
 8012998:	08012a1f 	.word	0x08012a1f
 801299c:	0801295d 	.word	0x0801295d
 80129a0:	08012a3d 	.word	0x08012a3d
 80129a4:	0801295d 	.word	0x0801295d
 80129a8:	08012a45 	.word	0x08012a45
 80129ac:	08012a7d 	.word	0x08012a7d
 80129b0:	0801295d 	.word	0x0801295d
 80129b4:	08012a99 	.word	0x08012a99
 80129b8:	080129bd 	.word	0x080129bd
  cfgidx = (uint8_t)(req->wValue);
 80129bc:	788e      	ldrb	r6, [r1, #2]
 80129be:	4faf      	ldr	r7, [pc, #700]	; (8012c7c <USBD_StdDevReq+0x338>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80129c0:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 80129c2:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80129c4:	f200 8137 	bhi.w	8012c36 <USBD_StdDevReq+0x2f2>
  switch (pdev->dev_state)
 80129c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80129cc:	2b02      	cmp	r3, #2
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	f000 811f 	beq.w	8012c12 <USBD_StdDevReq+0x2ce>
 80129d4:	2a03      	cmp	r2, #3
 80129d6:	f000 80f9 	beq.w	8012bcc <USBD_StdDevReq+0x288>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80129da:	2180      	movs	r1, #128	; 0x80
 80129dc:	f7f1 fe74 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80129e0:	2100      	movs	r1, #0
 80129e2:	4628      	mov	r0, r5
 80129e4:	f7f1 fe70 	bl	80046c8 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80129e8:	7839      	ldrb	r1, [r7, #0]
 80129ea:	4628      	mov	r0, r5
 80129ec:	f7ff fe54 	bl	8012698 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80129f0:	2403      	movs	r4, #3
      break;
 80129f2:	e7bc      	b.n	801296e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80129f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80129f8:	3b01      	subs	r3, #1
 80129fa:	2b02      	cmp	r3, #2
 80129fc:	d864      	bhi.n	8012ac8 <USBD_StdDevReq+0x184>
      if (req->wLength != 0x2U)
 80129fe:	88ca      	ldrh	r2, [r1, #6]
 8012a00:	2a02      	cmp	r2, #2
 8012a02:	d161      	bne.n	8012ac8 <USBD_StdDevReq+0x184>
      if (pdev->dev_remote_wakeup != 0U)
 8012a04:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8012a08:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	bf14      	ite	ne
 8012a0e:	2303      	movne	r3, #3
 8012a10:	2301      	moveq	r3, #1
 8012a12:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012a16:	f000 fa3d 	bl	8012e94 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8012a1a:	463c      	mov	r4, r7
      break;
 8012a1c:	e7a7      	b.n	801296e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8012a1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012a22:	3b01      	subs	r3, #1
 8012a24:	2b02      	cmp	r3, #2
 8012a26:	d84f      	bhi.n	8012ac8 <USBD_StdDevReq+0x184>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a28:	884b      	ldrh	r3, [r1, #2]
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d19f      	bne.n	801296e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a34:	4628      	mov	r0, r5
 8012a36:	f000 fa59 	bl	8012eec <USBD_CtlSendStatus>
 8012a3a:	e798      	b.n	801296e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a3c:	884b      	ldrh	r3, [r1, #2]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d195      	bne.n	801296e <USBD_StdDevReq+0x2a>
 8012a42:	e7f5      	b.n	8012a30 <USBD_StdDevReq+0xec>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012a44:	888b      	ldrh	r3, [r1, #4]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d13e      	bne.n	8012ac8 <USBD_StdDevReq+0x184>
 8012a4a:	88cb      	ldrh	r3, [r1, #6]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d13b      	bne.n	8012ac8 <USBD_StdDevReq+0x184>
 8012a50:	884e      	ldrh	r6, [r1, #2]
 8012a52:	2e7f      	cmp	r6, #127	; 0x7f
 8012a54:	d838      	bhi.n	8012ac8 <USBD_StdDevReq+0x184>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d034      	beq.n	8012ac8 <USBD_StdDevReq+0x184>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012a5e:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8012a60:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012a64:	f7f1 fe54 	bl	8004710 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f000 fa3f 	bl	8012eec <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8012a6e:	2e00      	cmp	r6, #0
 8012a70:	f000 80ff 	beq.w	8012c72 <USBD_StdDevReq+0x32e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a74:	2302      	movs	r3, #2
 8012a76:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8012a7a:	e778      	b.n	801296e <USBD_StdDevReq+0x2a>
  switch (req->wValue >> 8)
 8012a7c:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8012a84:	0a13      	lsrs	r3, r2, #8
 8012a86:	3b01      	subs	r3, #1
 8012a88:	2b06      	cmp	r3, #6
 8012a8a:	d81d      	bhi.n	8012ac8 <USBD_StdDevReq+0x184>
 8012a8c:	e8df f003 	tbb	[pc, r3]
 8012a90:	1c4d606d 	.word	0x1c4d606d
 8012a94:	431c      	.short	0x431c
 8012a96:	27          	.byte	0x27
 8012a97:	00          	.byte	0x00
  if (req->wLength != 1U)
 8012a98:	88ca      	ldrh	r2, [r1, #6]
 8012a9a:	2a01      	cmp	r2, #1
 8012a9c:	d114      	bne.n	8012ac8 <USBD_StdDevReq+0x184>
    switch (pdev->dev_state)
 8012a9e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8012aa2:	2902      	cmp	r1, #2
 8012aa4:	b2cb      	uxtb	r3, r1
 8012aa6:	f200 808a 	bhi.w	8012bbe <USBD_StdDevReq+0x27a>
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f43f af56 	beq.w	801295c <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8012ab0:	4601      	mov	r1, r0
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012ab8:	f000 f9ec 	bl	8012e94 <USBD_CtlSendData>
        break;
 8012abc:	e757      	b.n	801296e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012abe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d15d      	bne.n	8012b84 <USBD_StdDevReq+0x240>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ac8:	2180      	movs	r1, #128	; 0x80
 8012aca:	4628      	mov	r0, r5
 8012acc:	f7f1 fdfc 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f7f1 fdf8 	bl	80046c8 <USBD_LL_StallEP>
}
 8012ad8:	4620      	mov	r0, r4
 8012ada:	b003      	add	sp, #12
 8012adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ade:	7c03      	ldrb	r3, [r0, #16]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d1f1      	bne.n	8012ac8 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012ae4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012ae8:	f10d 0006 	add.w	r0, sp, #6
 8012aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aee:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012af0:	2307      	movs	r3, #7
 8012af2:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8012af4:	88f2      	ldrh	r2, [r6, #6]
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	d09c      	beq.n	8012a34 <USBD_StdDevReq+0xf0>
    if (len != 0U)
 8012afa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d0e2      	beq.n	8012ac8 <USBD_StdDevReq+0x184>
      len = MIN(len, req->wLength);
 8012b02:	429a      	cmp	r2, r3
 8012b04:	bf28      	it	cs
 8012b06:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012b08:	4601      	mov	r1, r0
 8012b0a:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8012b0c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012b10:	f000 f9c0 	bl	8012e94 <USBD_CtlSendData>
 8012b14:	e72b      	b.n	801296e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b16:	7c03      	ldrb	r3, [r0, #16]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d1d5      	bne.n	8012ac8 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012b1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012b20:	f10d 0006 	add.w	r0, sp, #6
 8012b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b26:	4798      	blx	r3
  if (err != 0U)
 8012b28:	e7e4      	b.n	8012af4 <USBD_StdDevReq+0x1b0>
      switch ((uint8_t)(req->wValue))
 8012b2a:	b2d2      	uxtb	r2, r2
 8012b2c:	2a05      	cmp	r2, #5
 8012b2e:	d8cb      	bhi.n	8012ac8 <USBD_StdDevReq+0x184>
 8012b30:	a301      	add	r3, pc, #4	; (adr r3, 8012b38 <USBD_StdDevReq+0x1f4>)
 8012b32:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8012b36:	bf00      	nop
 8012b38:	08012abf 	.word	0x08012abf
 8012b3c:	08012bb3 	.word	0x08012bb3
 8012b40:	08012ba7 	.word	0x08012ba7
 8012b44:	08012b9b 	.word	0x08012b9b
 8012b48:	08012b8f 	.word	0x08012b8f
 8012b4c:	08012b7b 	.word	0x08012b7b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b50:	7c03      	ldrb	r3, [r0, #16]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f040 8084 	bne.w	8012c60 <USBD_StdDevReq+0x31c>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012b58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012b5c:	f10d 0006 	add.w	r0, sp, #6
 8012b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b62:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b64:	2302      	movs	r3, #2
 8012b66:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8012b68:	e7c4      	b.n	8012af4 <USBD_StdDevReq+0x1b0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012b6e:	7c00      	ldrb	r0, [r0, #16]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f10d 0106 	add.w	r1, sp, #6
 8012b76:	4798      	blx	r3
  if (err != 0U)
 8012b78:	e7bc      	b.n	8012af4 <USBD_StdDevReq+0x1b0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012b7a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012b7e:	699b      	ldr	r3, [r3, #24]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d0a1      	beq.n	8012ac8 <USBD_StdDevReq+0x184>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012b84:	7c28      	ldrb	r0, [r5, #16]
 8012b86:	f10d 0106 	add.w	r1, sp, #6
 8012b8a:	4798      	blx	r3
  if (err != 0U)
 8012b8c:	e7b2      	b.n	8012af4 <USBD_StdDevReq+0x1b0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012b8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012b92:	695b      	ldr	r3, [r3, #20]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1f5      	bne.n	8012b84 <USBD_StdDevReq+0x240>
 8012b98:	e796      	b.n	8012ac8 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012b9a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012b9e:	691b      	ldr	r3, [r3, #16]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1ef      	bne.n	8012b84 <USBD_StdDevReq+0x240>
 8012ba4:	e790      	b.n	8012ac8 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012ba6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1e9      	bne.n	8012b84 <USBD_StdDevReq+0x240>
 8012bb0:	e78a      	b.n	8012ac8 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012bb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d1e3      	bne.n	8012b84 <USBD_StdDevReq+0x240>
 8012bbc:	e784      	b.n	8012ac8 <USBD_StdDevReq+0x184>
    switch (pdev->dev_state)
 8012bbe:	2b03      	cmp	r3, #3
 8012bc0:	f47f aecc 	bne.w	801295c <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012bc4:	1d01      	adds	r1, r0, #4
 8012bc6:	f000 f965 	bl	8012e94 <USBD_CtlSendData>
        break;
 8012bca:	e6d0      	b.n	801296e <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 8012bcc:	2e00      	cmp	r6, #0
 8012bce:	d03b      	beq.n	8012c48 <USBD_StdDevReq+0x304>
      else if (cfgidx != pdev->dev_config)
 8012bd0:	6841      	ldr	r1, [r0, #4]
 8012bd2:	2901      	cmp	r1, #1
 8012bd4:	f43f af2e 	beq.w	8012a34 <USBD_StdDevReq+0xf0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012bd8:	b2c9      	uxtb	r1, r1
 8012bda:	f7ff fd5d 	bl	8012698 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012bde:	7839      	ldrb	r1, [r7, #0]
 8012be0:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012be2:	4628      	mov	r0, r5
 8012be4:	f7ff fd50 	bl	8012688 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8012be8:	4606      	mov	r6, r0
 8012bea:	2800      	cmp	r0, #0
 8012bec:	f43f af22 	beq.w	8012a34 <USBD_StdDevReq+0xf0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012bf0:	2180      	movs	r1, #128	; 0x80
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f7f1 fd68 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f7f1 fd64 	bl	80046c8 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012c00:	7929      	ldrb	r1, [r5, #4]
 8012c02:	4628      	mov	r0, r5
 8012c04:	f7ff fd48 	bl	8012698 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c08:	2302      	movs	r3, #2
 8012c0a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8012c0e:	4634      	mov	r4, r6
 8012c10:	e6ad      	b.n	801296e <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8012c12:	2e00      	cmp	r6, #0
 8012c14:	f43f af0e 	beq.w	8012a34 <USBD_StdDevReq+0xf0>
        pdev->dev_config = cfgidx;
 8012c18:	2101      	movs	r1, #1
 8012c1a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012c1c:	f7ff fd34 	bl	8012688 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8012c20:	4604      	mov	r4, r0
 8012c22:	2800      	cmp	r0, #0
 8012c24:	f47f af50 	bne.w	8012ac8 <USBD_StdDevReq+0x184>
          (void)USBD_CtlSendStatus(pdev);
 8012c28:	4628      	mov	r0, r5
 8012c2a:	f000 f95f 	bl	8012eec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012c2e:	2303      	movs	r3, #3
 8012c30:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8012c34:	e69b      	b.n	801296e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c36:	2180      	movs	r1, #128	; 0x80
 8012c38:	f7f1 fd46 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f7f1 fd42 	bl	80046c8 <USBD_LL_StallEP>
    return USBD_FAIL;
 8012c44:	2403      	movs	r4, #3
}
 8012c46:	e692      	b.n	801296e <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c48:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012c4a:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c4c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012c50:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012c52:	f7ff fd21 	bl	8012698 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012c56:	4628      	mov	r0, r5
 8012c58:	f000 f948 	bl	8012eec <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8012c5c:	4634      	mov	r4, r6
 8012c5e:	e686      	b.n	801296e <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012c60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012c64:	f10d 0006 	add.w	r0, sp, #6
 8012c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c6a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012c6c:	2302      	movs	r3, #2
 8012c6e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8012c70:	e740      	b.n	8012af4 <USBD_StdDevReq+0x1b0>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012c72:	2301      	movs	r3, #1
 8012c74:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8012c78:	e679      	b.n	801296e <USBD_StdDevReq+0x2a>
 8012c7a:	bf00      	nop
 8012c7c:	20002c54 	.word	0x20002c54

08012c80 <USBD_StdItfReq>:
{
 8012c80:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c82:	780b      	ldrb	r3, [r1, #0]
 8012c84:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8012c88:	2a40      	cmp	r2, #64	; 0x40
{
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c8e:	d00b      	beq.n	8012ca8 <USBD_StdItfReq+0x28>
 8012c90:	065b      	lsls	r3, r3, #25
 8012c92:	d509      	bpl.n	8012ca8 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c94:	2180      	movs	r1, #128	; 0x80
 8012c96:	f7f1 fd17 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f7f1 fd13 	bl	80046c8 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8012ca2:	2500      	movs	r5, #0
}
 8012ca4:	4628      	mov	r0, r5
 8012ca6:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8012ca8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8012cac:	3b01      	subs	r3, #1
 8012cae:	2b02      	cmp	r3, #2
 8012cb0:	d812      	bhi.n	8012cd8 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012cb2:	792b      	ldrb	r3, [r5, #4]
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d80f      	bhi.n	8012cd8 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012cb8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8012cbc:	4629      	mov	r1, r5
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012cc4:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012cc6:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d1eb      	bne.n	8012ca4 <USBD_StdItfReq+0x24>
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	d1e9      	bne.n	8012ca4 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f000 f90b 	bl	8012eec <USBD_CtlSendStatus>
 8012cd6:	e7e5      	b.n	8012ca4 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012cd8:	2180      	movs	r1, #128	; 0x80
 8012cda:	4620      	mov	r0, r4
 8012cdc:	e7db      	b.n	8012c96 <USBD_StdItfReq+0x16>
 8012cde:	bf00      	nop

08012ce0 <USBD_StdEPReq>:
{
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8012ce4:	888a      	ldrh	r2, [r1, #4]
 8012ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cea:	2b20      	cmp	r3, #32
{
 8012cec:	460c      	mov	r4, r1
 8012cee:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cf0:	d01b      	beq.n	8012d2a <USBD_StdEPReq+0x4a>
 8012cf2:	2b40      	cmp	r3, #64	; 0x40
 8012cf4:	d019      	beq.n	8012d2a <USBD_StdEPReq+0x4a>
 8012cf6:	b303      	cbz	r3, 8012d3a <USBD_StdEPReq+0x5a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012cf8:	2180      	movs	r1, #128	; 0x80
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	f7f1 fce4 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012d00:	2100      	movs	r1, #0
 8012d02:	4628      	mov	r0, r5
 8012d04:	f7f1 fce0 	bl	80046c8 <USBD_LL_StallEP>
}
 8012d08:	2000      	movs	r0, #0
 8012d0a:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8012d0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012d10:	2b02      	cmp	r3, #2
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	d052      	beq.n	8012dbc <USBD_StdEPReq+0xdc>
 8012d16:	2a03      	cmp	r2, #3
 8012d18:	d1ee      	bne.n	8012cf8 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012d1a:	8863      	ldrh	r3, [r4, #2]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d1f3      	bne.n	8012d08 <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 8012d20:	064e      	lsls	r6, r1, #25
 8012d22:	d16e      	bne.n	8012e02 <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 8012d24:	4628      	mov	r0, r5
 8012d26:	f000 f8e1 	bl	8012eec <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012d2a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8012d2e:	4621      	mov	r1, r4
 8012d30:	4628      	mov	r0, r5
 8012d32:	689b      	ldr	r3, [r3, #8]
}
 8012d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012d38:	4718      	bx	r3
      switch (req->bRequest)
 8012d3a:	7863      	ldrb	r3, [r4, #1]
 8012d3c:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8012d3e:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8012d40:	d0e4      	beq.n	8012d0c <USBD_StdEPReq+0x2c>
 8012d42:	2b03      	cmp	r3, #3
 8012d44:	d029      	beq.n	8012d9a <USBD_StdEPReq+0xba>
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d1d6      	bne.n	8012cf8 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8012d4a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012d4e:	2b02      	cmp	r3, #2
 8012d50:	b2d8      	uxtb	r0, r3
 8012d52:	d03c      	beq.n	8012dce <USBD_StdEPReq+0xee>
 8012d54:	2803      	cmp	r0, #3
 8012d56:	d1cf      	bne.n	8012cf8 <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012d58:	f001 030f 	and.w	r3, r1, #15
 8012d5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8012d60:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012d62:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8012d66:	d441      	bmi.n	8012dec <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012d68:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d0c3      	beq.n	8012cf8 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d70:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8012d74:	2414      	movs	r4, #20
 8012d76:	fb04 5403 	mla	r4, r4, r3, r5
 8012d7a:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012d7e:	b12b      	cbz	r3, 8012d8c <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012d80:	4628      	mov	r0, r5
 8012d82:	f7f1 fcb1 	bl	80046e8 <USBD_LL_IsStallEP>
 8012d86:	1e03      	subs	r3, r0, #0
 8012d88:	bf18      	it	ne
 8012d8a:	2301      	movne	r3, #1
                pep->status = 0x0000U;
 8012d8c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012d8e:	2202      	movs	r2, #2
 8012d90:	4621      	mov	r1, r4
 8012d92:	4628      	mov	r0, r5
 8012d94:	f000 f87e 	bl	8012e94 <USBD_CtlSendData>
              break;
 8012d98:	e7b6      	b.n	8012d08 <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 8012d9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012d9e:	2b02      	cmp	r3, #2
 8012da0:	b2da      	uxtb	r2, r3
 8012da2:	d00b      	beq.n	8012dbc <USBD_StdEPReq+0xdc>
 8012da4:	2a03      	cmp	r2, #3
 8012da6:	d1a7      	bne.n	8012cf8 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012da8:	8863      	ldrh	r3, [r4, #2]
 8012daa:	b91b      	cbnz	r3, 8012db4 <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012dac:	064a      	lsls	r2, r1, #25
 8012dae:	d001      	beq.n	8012db4 <USBD_StdEPReq+0xd4>
 8012db0:	88e3      	ldrh	r3, [r4, #6]
 8012db2:	b34b      	cbz	r3, 8012e08 <USBD_StdEPReq+0x128>
              (void)USBD_CtlSendStatus(pdev);
 8012db4:	4628      	mov	r0, r5
 8012db6:	f000 f899 	bl	8012eec <USBD_CtlSendStatus>
              break;
 8012dba:	e7a5      	b.n	8012d08 <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012dbc:	064b      	lsls	r3, r1, #25
 8012dbe:	d09b      	beq.n	8012cf8 <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012dc0:	f7f1 fc82 	bl	80046c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012dc4:	2180      	movs	r1, #128	; 0x80
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	f7f1 fc7e 	bl	80046c8 <USBD_LL_StallEP>
 8012dcc:	e79c      	b.n	8012d08 <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012dce:	0648      	lsls	r0, r1, #25
 8012dd0:	d192      	bne.n	8012cf8 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012dd2:	0611      	lsls	r1, r2, #24
 8012dd4:	bf4c      	ite	mi
 8012dd6:	f105 0114 	addmi.w	r1, r5, #20
 8012dda:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8012dde:	2300      	movs	r3, #0
 8012de0:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012de2:	2202      	movs	r2, #2
 8012de4:	4628      	mov	r0, r5
 8012de6:	f000 f855 	bl	8012e94 <USBD_CtlSendData>
              break;
 8012dea:	e78d      	b.n	8012d08 <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012dec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d082      	beq.n	8012cf8 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012df2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8012df6:	1c5c      	adds	r4, r3, #1
 8012df8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012dfc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8012e00:	e7bd      	b.n	8012d7e <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012e02:	f7f1 fc69 	bl	80046d8 <USBD_LL_ClearStallEP>
 8012e06:	e78d      	b.n	8012d24 <USBD_StdEPReq+0x44>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012e08:	f7f1 fc5e 	bl	80046c8 <USBD_LL_StallEP>
 8012e0c:	e7d2      	b.n	8012db4 <USBD_StdEPReq+0xd4>
 8012e0e:	bf00      	nop

08012e10 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8012e10:	780b      	ldrb	r3, [r1, #0]
 8012e12:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8012e14:	784b      	ldrb	r3, [r1, #1]
 8012e16:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8012e18:	884b      	ldrh	r3, [r1, #2]
 8012e1a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8012e1c:	888b      	ldrh	r3, [r1, #4]
 8012e1e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8012e20:	88cb      	ldrh	r3, [r1, #6]
 8012e22:	80c3      	strh	r3, [r0, #6]
}
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop

08012e28 <USBD_CtlError>:
{
 8012e28:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012e2a:	2180      	movs	r1, #128	; 0x80
{
 8012e2c:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012e2e:	f7f1 fc4b 	bl	80046c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012e32:	4620      	mov	r0, r4
 8012e34:	2100      	movs	r1, #0
}
 8012e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8012e3a:	f7f1 bc45 	b.w	80046c8 <USBD_LL_StallEP>
 8012e3e:	bf00      	nop

08012e40 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8012e40:	b318      	cbz	r0, 8012e8a <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8012e42:	7803      	ldrb	r3, [r0, #0]
{
 8012e44:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8012e46:	b30b      	cbz	r3, 8012e8c <USBD_GetString+0x4c>
 8012e48:	4604      	mov	r4, r0
 8012e4a:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8012e4e:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8012e52:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	2d00      	cmp	r5, #0
 8012e5a:	d1f8      	bne.n	8012e4e <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	005b      	lsls	r3, r3, #1
 8012e60:	b2dc      	uxtb	r4, r3
 8012e62:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012e64:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8012e66:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012e68:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8012e6a:	7804      	ldrb	r4, [r0, #0]
 8012e6c:	b15c      	cbz	r4, 8012e86 <USBD_GetString+0x46>
  idx++;
 8012e6e:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8012e70:	2500      	movs	r5, #0
    idx++;
 8012e72:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8012e74:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8012e76:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8012e78:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8012e7a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8012e7e:	3302      	adds	r3, #2
 8012e80:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8012e82:	2c00      	cmp	r4, #0
 8012e84:	d1f5      	bne.n	8012e72 <USBD_GetString+0x32>
}
 8012e86:	bc30      	pop	{r4, r5}
 8012e88:	4770      	bx	lr
 8012e8a:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8012e8c:	2402      	movs	r4, #2
 8012e8e:	4623      	mov	r3, r4
 8012e90:	e7e7      	b.n	8012e62 <USBD_GetString+0x22>
 8012e92:	bf00      	nop

08012e94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012e94:	b508      	push	{r3, lr}
 8012e96:	4613      	mov	r3, r2
 8012e98:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012e9a:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012e9c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012ea0:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	f7f1 fc3b 	bl	8004720 <USBD_LL_Transmit>

  return USBD_OK;
}
 8012eaa:	2000      	movs	r0, #0
 8012eac:	bd08      	pop	{r3, pc}
 8012eae:	bf00      	nop

08012eb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012eb0:	b508      	push	{r3, lr}
 8012eb2:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012eb4:	460a      	mov	r2, r1
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	f7f1 fc32 	bl	8004720 <USBD_LL_Transmit>

  return USBD_OK;
}
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	bd08      	pop	{r3, pc}

08012ec0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012ec0:	b508      	push	{r3, lr}
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012ec6:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012ec8:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012ecc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	f7f1 fc2d 	bl	8004730 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	bd08      	pop	{r3, pc}
 8012eda:	bf00      	nop

08012edc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012edc:	b508      	push	{r3, lr}
 8012ede:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ee0:	460a      	mov	r2, r1
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	f7f1 fc24 	bl	8004730 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8012ee8:	2000      	movs	r0, #0
 8012eea:	bd08      	pop	{r3, pc}

08012eec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012eec:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012eee:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012ef0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012ef2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012ef6:	461a      	mov	r2, r3
 8012ef8:	4619      	mov	r1, r3
 8012efa:	f7f1 fc11 	bl	8004720 <USBD_LL_Transmit>

  return USBD_OK;
}
 8012efe:	2000      	movs	r0, #0
 8012f00:	bd08      	pop	{r3, pc}
 8012f02:	bf00      	nop

08012f04 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012f04:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012f06:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f08:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012f0a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f0e:	461a      	mov	r2, r3
 8012f10:	4619      	mov	r1, r3
 8012f12:	f7f1 fc0d 	bl	8004730 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8012f16:	2000      	movs	r0, #0
 8012f18:	bd08      	pop	{r3, pc}
 8012f1a:	bf00      	nop

08012f1c <uzlib_adler32>:

#define A32_BASE 65521
#define A32_NMAX 5552

uint32_t uzlib_adler32(const void *data, unsigned int length, uint32_t prev_sum /* 1 */)
{
 8012f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   const unsigned char *buf = (const unsigned char *)data;

   unsigned int s1 = prev_sum & 0xffff;
   unsigned int s2 = prev_sum >> 16;
 8012f20:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   unsigned int s1 = prev_sum & 0xffff;
 8012f24:	fa1f f882 	uxth.w	r8, r2

   while (length > 0)
 8012f28:	2900      	cmp	r1, #0
 8012f2a:	d074      	beq.n	8013016 <uzlib_adler32+0xfa>
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
      }

      for (i = k % 16; i; --i) { s1 += *buf++; s2 += s1; }

      s1 %= A32_BASE;
 8012f2c:	4e3e      	ldr	r6, [pc, #248]	; (8013028 <uzlib_adler32+0x10c>)
      int k = length < A32_NMAX ? length : A32_NMAX;
 8012f2e:	f241 57b0 	movw	r7, #5552	; 0x15b0
 8012f32:	42b9      	cmp	r1, r7
 8012f34:	460d      	mov	r5, r1
 8012f36:	bf28      	it	cs
 8012f38:	463d      	movcs	r5, r7
      for (i = k / 16; i; --i, buf += 16)
 8012f3a:	112c      	asrs	r4, r5, #4
 8012f3c:	d071      	beq.n	8013022 <uzlib_adler32+0x106>
 8012f3e:	f100 0210 	add.w	r2, r0, #16
 8012f42:	ea4f 1e04 	mov.w	lr, r4, lsl #4
 8012f46:	eb02 1404 	add.w	r4, r2, r4, lsl #4
         s1 += buf[0];  s2 += s1; s1 += buf[1];  s2 += s1;
 8012f4a:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8012f4e:	f812 9c0f 	ldrb.w	r9, [r2, #-15]
         s1 += buf[2];  s2 += s1; s1 += buf[3];  s2 += s1;
 8012f52:	f812 bc0e 	ldrb.w	fp, [r2, #-14]
 8012f56:	f812 ac0d 	ldrb.w	sl, [r2, #-13]
         s1 += buf[0];  s2 += s1; s1 += buf[1];  s2 += s1;
 8012f5a:	4443      	add	r3, r8
      for (i = k / 16; i; --i, buf += 16)
 8012f5c:	3210      	adds	r2, #16
         s1 += buf[0];  s2 += s1; s1 += buf[1];  s2 += s1;
 8012f5e:	eb09 0803 	add.w	r8, r9, r3
         s1 += buf[2];  s2 += s1; s1 += buf[3];  s2 += s1;
 8012f62:	eb0b 0908 	add.w	r9, fp, r8
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012f66:	4443      	add	r3, r8
         s1 += buf[4];  s2 += s1; s1 += buf[5];  s2 += s1;
 8012f68:	f812 8c1c 	ldrb.w	r8, [r2, #-28]
         s1 += buf[2];  s2 += s1; s1 += buf[3];  s2 += s1;
 8012f6c:	44ca      	add	sl, r9
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012f6e:	444b      	add	r3, r9
         s1 += buf[4];  s2 += s1; s1 += buf[5];  s2 += s1;
 8012f70:	f812 9c1b 	ldrb.w	r9, [r2, #-27]
 8012f74:	44d0      	add	r8, sl
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012f76:	4453      	add	r3, sl
 8012f78:	4443      	add	r3, r8
         s1 += buf[4];  s2 += s1; s1 += buf[5];  s2 += s1;
 8012f7a:	eb09 0a08 	add.w	sl, r9, r8
         s1 += buf[6];  s2 += s1; s1 += buf[7];  s2 += s1;
 8012f7e:	f812 8c1a 	ldrb.w	r8, [r2, #-26]
 8012f82:	f812 9c19 	ldrb.w	r9, [r2, #-25]
 8012f86:	44d0      	add	r8, sl
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012f88:	4453      	add	r3, sl
         s1 += buf[6];  s2 += s1; s1 += buf[7];  s2 += s1;
 8012f8a:	44c1      	add	r9, r8
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012f8c:	4443      	add	r3, r8
 8012f8e:	eb03 0809 	add.w	r8, r3, r9
         s1 += buf[8];  s2 += s1; s1 += buf[9];  s2 += s1;
 8012f92:	f812 3c18 	ldrb.w	r3, [r2, #-24]
 8012f96:	f812 ac17 	ldrb.w	sl, [r2, #-23]
 8012f9a:	444b      	add	r3, r9
 8012f9c:	449a      	add	sl, r3
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012f9e:	4443      	add	r3, r8
         s1 += buf[10]; s2 += s1; s1 += buf[11]; s2 += s1;
 8012fa0:	f812 8c16 	ldrb.w	r8, [r2, #-22]
 8012fa4:	f812 9c15 	ldrb.w	r9, [r2, #-21]
 8012fa8:	44d0      	add	r8, sl
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012faa:	4453      	add	r3, sl
         s1 += buf[10]; s2 += s1; s1 += buf[11]; s2 += s1;
 8012fac:	44c1      	add	r9, r8
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012fae:	4443      	add	r3, r8
         s1 += buf[12]; s2 += s1; s1 += buf[13]; s2 += s1;
 8012fb0:	f812 8c14 	ldrb.w	r8, [r2, #-20]
 8012fb4:	f812 ac13 	ldrb.w	sl, [r2, #-19]
 8012fb8:	44c8      	add	r8, r9
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012fba:	444b      	add	r3, r9
 8012fbc:	f812 9c12 	ldrb.w	r9, [r2, #-18]
         s1 += buf[12]; s2 += s1; s1 += buf[13]; s2 += s1;
 8012fc0:	44c2      	add	sl, r8
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012fc2:	4443      	add	r3, r8
 8012fc4:	f812 8c11 	ldrb.w	r8, [r2, #-17]
 8012fc8:	44d1      	add	r9, sl
 8012fca:	4453      	add	r3, sl
 8012fcc:	44c8      	add	r8, r9
 8012fce:	444b      	add	r3, r9
 8012fd0:	4443      	add	r3, r8
      for (i = k / 16; i; --i, buf += 16)
 8012fd2:	4294      	cmp	r4, r2
         s1 += buf[14]; s2 += s1; s1 += buf[15]; s2 += s1;
 8012fd4:	449c      	add	ip, r3
      for (i = k / 16; i; --i, buf += 16)
 8012fd6:	d1b8      	bne.n	8012f4a <uzlib_adler32+0x2e>
 8012fd8:	4486      	add	lr, r0
      for (i = k % 16; i; --i) { s1 += *buf++; s2 += s1; }
 8012fda:	f015 000f 	ands.w	r0, r5, #15
 8012fde:	d01e      	beq.n	801301e <uzlib_adler32+0x102>
 8012fe0:	4470      	add	r0, lr
 8012fe2:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8012fe6:	4498      	add	r8, r3
 8012fe8:	4586      	cmp	lr, r0
 8012fea:	44c4      	add	ip, r8
 8012fec:	d1f9      	bne.n	8012fe2 <uzlib_adler32+0xc6>
      s1 %= A32_BASE;
 8012fee:	fba6 3208 	umull	r3, r2, r6, r8
      s2 %= A32_BASE;
 8012ff2:	fba6 430c 	umull	r4, r3, r6, ip
      s1 %= A32_BASE;
 8012ff6:	0bd2      	lsrs	r2, r2, #15
      s2 %= A32_BASE;
 8012ff8:	0bdb      	lsrs	r3, r3, #15
      s1 %= A32_BASE;
 8012ffa:	ebc2 3e02 	rsb	lr, r2, r2, lsl #12
      s2 %= A32_BASE;
 8012ffe:	ebc3 3403 	rsb	r4, r3, r3, lsl #12
      s1 %= A32_BASE;
 8013002:	eb02 120e 	add.w	r2, r2, lr, lsl #4
      s2 %= A32_BASE;
 8013006:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   while (length > 0)
 801300a:	1b49      	subs	r1, r1, r5
      s1 %= A32_BASE;
 801300c:	eba8 0802 	sub.w	r8, r8, r2
      s2 %= A32_BASE;
 8013010:	ebac 0c03 	sub.w	ip, ip, r3
   while (length > 0)
 8013014:	d18d      	bne.n	8012f32 <uzlib_adler32+0x16>

      length -= k;
   }

   return ((uint32_t)s2 << 16) | s1;
}
 8013016:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 801301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (i = k % 16; i; --i) { s1 += *buf++; s2 += s1; }
 801301e:	4670      	mov	r0, lr
 8013020:	e7e5      	b.n	8012fee <uzlib_adler32+0xd2>
      for (i = k / 16; i; --i, buf += 16)
 8013022:	4686      	mov	lr, r0
 8013024:	e7d9      	b.n	8012fda <uzlib_adler32+0xbe>
 8013026:	bf00      	nop
 8013028:	80078071 	.word	0x80078071

0801302c <uzlib_crc32>:
uint32_t uzlib_crc32(const void *data, unsigned int length, uint32_t crc)
{
   const unsigned char *buf = (const unsigned char *)data;
   unsigned int i;

   for (i = 0; i < length; ++i)
 801302c:	b1d1      	cbz	r1, 8013064 <uzlib_crc32+0x38>
 801302e:	1e4b      	subs	r3, r1, #1
 8013030:	490d      	ldr	r1, [pc, #52]	; (8013068 <uzlib_crc32+0x3c>)
{
 8013032:	b500      	push	{lr}
 8013034:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8013038:	eb00 0e03 	add.w	lr, r0, r3
   for (i = 0; i < length; ++i)
 801303c:	4610      	mov	r0, r2
   {
      crc ^= buf[i];
 801303e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8013042:	4042      	eors	r2, r0
      crc = tinf_crc32tab[crc & 0x0f] ^ (crc >> 4);
 8013044:	f002 030f 	and.w	r3, r2, #15
   for (i = 0; i < length; ++i)
 8013048:	45e6      	cmp	lr, ip
      crc = tinf_crc32tab[crc & 0x0f] ^ (crc >> 4);
 801304a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801304e:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
      crc = tinf_crc32tab[crc & 0x0f] ^ (crc >> 4);
 8013052:	f003 020f 	and.w	r2, r3, #15
 8013056:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801305a:	ea80 1013 	eor.w	r0, r0, r3, lsr #4
   for (i = 0; i < length; ++i)
 801305e:	d1ee      	bne.n	801303e <uzlib_crc32+0x12>
   }

   // return value suitable for passing in next time, for final value invert it
   return crc/* ^ 0xffffffff*/;
}
 8013060:	f85d fb04 	ldr.w	pc, [sp], #4
   for (i = 0; i < length; ++i)
 8013064:	4610      	mov	r0, r2
}
 8013066:	4770      	bx	lr
 8013068:	08020110 	.word	0x08020110

0801306c <uzlib_gzip_parse_header>:
    v = (uzlib_get_byte(d) << 8) | v;
    return v;
}

int uzlib_gzip_parse_header(TINF_DATA *d)
{
 801306c:	b570      	push	{r4, r5, r6, lr}
 801306e:	4604      	mov	r4, r0
    unsigned char flg;

    /* -- check format -- */

    /* check id bytes */
    if (uzlib_get_byte(d) != 0x1f || uzlib_get_byte(d) != 0x8b) return TINF_DATA_ERROR;
 8013070:	f000 f92e 	bl	80132d0 <uzlib_get_byte>
 8013074:	281f      	cmp	r0, #31
 8013076:	d150      	bne.n	801311a <uzlib_gzip_parse_header+0xae>
 8013078:	4620      	mov	r0, r4
 801307a:	f000 f929 	bl	80132d0 <uzlib_get_byte>
 801307e:	288b      	cmp	r0, #139	; 0x8b
 8013080:	d14b      	bne.n	801311a <uzlib_gzip_parse_header+0xae>

    /* check method is deflate */
    if (uzlib_get_byte(d) != 8) return TINF_DATA_ERROR;
 8013082:	4620      	mov	r0, r4
 8013084:	f000 f924 	bl	80132d0 <uzlib_get_byte>
 8013088:	2808      	cmp	r0, #8
 801308a:	d146      	bne.n	801311a <uzlib_gzip_parse_header+0xae>

    /* get flag byte */
    flg = uzlib_get_byte(d);
 801308c:	4620      	mov	r0, r4
 801308e:	f000 f91f 	bl	80132d0 <uzlib_get_byte>

    /* check that reserved bits are zero */
    if (flg & 0xe0) return TINF_DATA_ERROR;
 8013092:	f010 0fe0 	tst.w	r0, #224	; 0xe0
    flg = uzlib_get_byte(d);
 8013096:	4606      	mov	r6, r0
    if (flg & 0xe0) return TINF_DATA_ERROR;
 8013098:	d13f      	bne.n	801311a <uzlib_gzip_parse_header+0xae>
 801309a:	2506      	movs	r5, #6
    while (num--) uzlib_get_byte(d);
 801309c:	4620      	mov	r0, r4
 801309e:	f000 f917 	bl	80132d0 <uzlib_get_byte>
 80130a2:	3d01      	subs	r5, #1
 80130a4:	d1fa      	bne.n	801309c <uzlib_gzip_parse_header+0x30>

    /* skip rest of base header of 10 bytes */
    tinf_skip_bytes(d, 6);

    /* skip extra data if present */
    if (flg & FEXTRA)
 80130a6:	0775      	lsls	r5, r6, #29
 80130a8:	d41d      	bmi.n	80130e6 <uzlib_gzip_parse_header+0x7a>
       unsigned int xlen = tinf_get_uint16(d);
       tinf_skip_bytes(d, xlen);
    }

    /* skip file name if present */
    if (flg & FNAME) { while (uzlib_get_byte(d)); }
 80130aa:	0731      	lsls	r1, r6, #28
 80130ac:	d504      	bpl.n	80130b8 <uzlib_gzip_parse_header+0x4c>
 80130ae:	4620      	mov	r0, r4
 80130b0:	f000 f90e 	bl	80132d0 <uzlib_get_byte>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	d1fa      	bne.n	80130ae <uzlib_gzip_parse_header+0x42>

    /* skip file comment if present */
    if (flg & FCOMMENT) { while (uzlib_get_byte(d)); }
 80130b8:	06f2      	lsls	r2, r6, #27
 80130ba:	d409      	bmi.n	80130d0 <uzlib_gzip_parse_header+0x64>

    /* check header crc if present */
    if (flg & FHCRC)
 80130bc:	07b3      	lsls	r3, r6, #30
 80130be:	d425      	bmi.n	801310c <uzlib_gzip_parse_header+0xa0>
//       if (hcrc != (tinf_crc32(src, start - src) & 0x0000ffff))
//          return TINF_DATA_ERROR;
    }

    /* initialize for crc32 checksum */
    d->checksum_type = TINF_CHKSUM_CRC;
 80130c0:	2202      	movs	r2, #2
    d->checksum = ~0;
 80130c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d->checksum_type = TINF_CHKSUM_CRC;
 80130c6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    d->checksum = ~0;
 80130ca:	6223      	str	r3, [r4, #32]

    return TINF_OK;
 80130cc:	2000      	movs	r0, #0
}
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
    if (flg & FCOMMENT) { while (uzlib_get_byte(d)); }
 80130d0:	4620      	mov	r0, r4
 80130d2:	f000 f8fd 	bl	80132d0 <uzlib_get_byte>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d0f0      	beq.n	80130bc <uzlib_gzip_parse_header+0x50>
 80130da:	4620      	mov	r0, r4
 80130dc:	f000 f8f8 	bl	80132d0 <uzlib_get_byte>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	d1f5      	bne.n	80130d0 <uzlib_gzip_parse_header+0x64>
 80130e4:	e7ea      	b.n	80130bc <uzlib_gzip_parse_header+0x50>
    unsigned int v = uzlib_get_byte(d);
 80130e6:	4620      	mov	r0, r4
 80130e8:	f000 f8f2 	bl	80132d0 <uzlib_get_byte>
 80130ec:	4605      	mov	r5, r0
    v = (uzlib_get_byte(d) << 8) | v;
 80130ee:	4620      	mov	r0, r4
 80130f0:	f000 f8ee 	bl	80132d0 <uzlib_get_byte>
       tinf_skip_bytes(d, xlen);
 80130f4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    while (num--) uzlib_get_byte(d);
 80130f8:	1e45      	subs	r5, r0, #1
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d0d5      	beq.n	80130aa <uzlib_gzip_parse_header+0x3e>
 80130fe:	4620      	mov	r0, r4
 8013100:	3d01      	subs	r5, #1
 8013102:	f000 f8e5 	bl	80132d0 <uzlib_get_byte>
 8013106:	1c68      	adds	r0, r5, #1
 8013108:	d1f9      	bne.n	80130fe <uzlib_gzip_parse_header+0x92>
 801310a:	e7ce      	b.n	80130aa <uzlib_gzip_parse_header+0x3e>
    unsigned int v = uzlib_get_byte(d);
 801310c:	4620      	mov	r0, r4
 801310e:	f000 f8df 	bl	80132d0 <uzlib_get_byte>
    v = (uzlib_get_byte(d) << 8) | v;
 8013112:	4620      	mov	r0, r4
 8013114:	f000 f8dc 	bl	80132d0 <uzlib_get_byte>
    return v;
 8013118:	e7d2      	b.n	80130c0 <uzlib_gzip_parse_header+0x54>
    if (uzlib_get_byte(d) != 0x1f || uzlib_get_byte(d) != 0x8b) return TINF_DATA_ERROR;
 801311a:	f06f 0002 	mvn.w	r0, #2
}
 801311e:	bd70      	pop	{r4, r5, r6, pc}

08013120 <tinf_build_tree>:
   for (i = 0; i < 32; ++i) dt->trans[i] = i;
}

/* given an array of code lengths, build a tree */
static void tinf_build_tree(TINF_TREE *t, const unsigned char *lengths, unsigned int num)
{
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	4615      	mov	r5, r2
 8013124:	b088      	sub	sp, #32
 8013126:	460e      	mov	r6, r1
   unsigned short offs[16];
   unsigned int i, sum;

   /* clear code length count table */
   for (i = 0; i < 16; ++i) t->table[i] = 0;
 8013128:	2220      	movs	r2, #32
 801312a:	2100      	movs	r1, #0
{
 801312c:	4604      	mov	r4, r0
   for (i = 0; i < 16; ++i) t->table[i] = 0;
 801312e:	f008 faff 	bl	801b730 <memset>

   /* scan symbol lengths, and sum code length counts */
   for (i = 0; i < num; ++i) t->table[lengths[i]]++;
 8013132:	b15d      	cbz	r5, 801314c <tinf_build_tree+0x2c>
 8013134:	1e72      	subs	r2, r6, #1
 8013136:	1950      	adds	r0, r2, r5
 8013138:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801313c:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 8013140:	4282      	cmp	r2, r0
 8013142:	f103 0301 	add.w	r3, r3, #1
 8013146:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 801314a:	d1f5      	bne.n	8013138 <tinf_build_tree+0x18>
   #endif

   /* In the lengths array, 0 means unused code. So, t->table[0] now contains
      number of unused codes. But table's purpose is to contain # of codes of
      particular length, and there're 0 codes of length 0. */
   t->table[0] = 0;
 801314c:	f04f 0e00 	mov.w	lr, #0
 8013150:	f8a4 e000 	strh.w	lr, [r4]

   /* compute offset table for distribution sort */
   for (sum = 0, i = 0; i < 16; ++i)
 8013154:	f1ad 0c02 	sub.w	ip, sp, #2
 8013158:	4622      	mov	r2, r4
 801315a:	f10d 011e 	add.w	r1, sp, #30
 801315e:	4673      	mov	r3, lr
 8013160:	e001      	b.n	8013166 <tinf_build_tree+0x46>
   {
      offs[i] = sum;
      sum += t->table[i];
 8013162:	f832 ef02 	ldrh.w	lr, [r2, #2]!
      offs[i] = sum;
 8013166:	f82c 3f02 	strh.w	r3, [ip, #2]!
   for (sum = 0, i = 0; i < 16; ++i)
 801316a:	458c      	cmp	ip, r1
      sum += t->table[i];
 801316c:	4473      	add	r3, lr
   for (sum = 0, i = 0; i < 16; ++i)
 801316e:	d1f8      	bne.n	8013162 <tinf_build_tree+0x42>
   #if UZLIB_CONF_DEBUG_LOG >= 2
   UZLIB_DUMP_ARRAY("codelen offsets:", offs, TINF_ARRAY_SIZE(offs));
   #endif

   /* create code->symbol translation table (symbols sorted by code) */
   for (i = 0; i < num; ++i)
 8013170:	b1ad      	cbz	r5, 801319e <tinf_build_tree+0x7e>
 8013172:	3e01      	subs	r6, #1
 8013174:	4435      	add	r5, r6
 8013176:	4633      	mov	r3, r6
   {
      if (lengths[i]) t->trans[offs[lengths[i]]++] = i;
 8013178:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801317c:	a908      	add	r1, sp, #32
 801317e:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 8013182:	1e59      	subs	r1, r3, #1
 8013184:	b14a      	cbz	r2, 801319a <tinf_build_tree+0x7a>
 8013186:	f830 2c20 	ldrh.w	r2, [r0, #-32]
 801318a:	f102 0c10 	add.w	ip, r2, #16
 801318e:	1b89      	subs	r1, r1, r6
 8013190:	3201      	adds	r2, #1
 8013192:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
 8013196:	f820 2c20 	strh.w	r2, [r0, #-32]
   for (i = 0; i < num; ++i)
 801319a:	429d      	cmp	r5, r3
 801319c:	d1ec      	bne.n	8013178 <tinf_build_tree+0x58>
   }
}
 801319e:	b008      	add	sp, #32
 80131a0:	bd70      	pop	{r4, r5, r6, pc}
 80131a2:	bf00      	nop

080131a4 <tinf_decode_symbol>:
   return val + base;
}

/* given a data stream and a tree, decode a symbol */
static int tinf_decode_symbol(TINF_DATA *d, TINF_TREE *t)
{
 80131a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   int sum = 0, cur = 0, len = 0;
 80131a8:	2300      	movs	r3, #0
{
 80131aa:	468a      	mov	sl, r1
 80131ac:	4605      	mov	r5, r0
 80131ae:	460f      	mov	r7, r1
 80131b0:	f101 091e 	add.w	r9, r1, #30
   int sum = 0, cur = 0, len = 0;
 80131b4:	4698      	mov	r8, r3
      d->bitcount = 7;
 80131b6:	f04f 0b07 	mov.w	fp, #7
    d->eof = true;
 80131ba:	2201      	movs	r2, #1
 80131bc:	e00f      	b.n	80131de <tinf_decode_symbol+0x3a>
   bit = d->tag & 0x01;
 80131be:	68ec      	ldr	r4, [r5, #12]
   /* get more bits while code value is above sum */
   do {

      cur = 2*cur + tinf_getbit(d);

      if (++len == TINF_ARRAY_SIZE(t->table)) {
 80131c0:	45b9      	cmp	r9, r7
   bit = d->tag & 0x01;
 80131c2:	f004 0301 	and.w	r3, r4, #1
   d->tag >>= 1;
 80131c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
      cur = 2*cur + tinf_getbit(d);
 80131ca:	441e      	add	r6, r3
   d->tag >>= 1;
 80131cc:	60ec      	str	r4, [r5, #12]
      if (++len == TINF_ARRAY_SIZE(t->table)) {
 80131ce:	d022      	beq.n	8013216 <tinf_decode_symbol+0x72>
         return TINF_DATA_ERROR;
      }

      sum += t->table[len];
 80131d0:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 80131d4:	eb03 0108 	add.w	r1, r3, r8
      cur -= t->table[len];

   } while (cur >= 0);
 80131d8:	1af3      	subs	r3, r6, r3
 80131da:	d42e      	bmi.n	801323a <tinf_decode_symbol+0x96>
      sum += t->table[len];
 80131dc:	4688      	mov	r8, r1
   if (!d->bitcount--)
 80131de:	692c      	ldr	r4, [r5, #16]
      cur = 2*cur + tinf_getbit(d);
 80131e0:	005e      	lsls	r6, r3, #1
   if (!d->bitcount--)
 80131e2:	1e63      	subs	r3, r4, #1
 80131e4:	612b      	str	r3, [r5, #16]
 80131e6:	2c00      	cmp	r4, #0
 80131e8:	d1e9      	bne.n	80131be <tinf_decode_symbol+0x1a>
    if (d->source < d->source_limit) {
 80131ea:	e9d5 1300 	ldrd	r1, r3, [r5]
 80131ee:	4299      	cmp	r1, r3
 80131f0:	d315      	bcc.n	801321e <tinf_decode_symbol+0x7a>
    if (d->readSource && !d->eof) {
 80131f2:	68ab      	ldr	r3, [r5, #8]
 80131f4:	b143      	cbz	r3, 8013208 <tinf_decode_symbol+0x64>
 80131f6:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 80131fa:	b929      	cbnz	r1, 8013208 <tinf_decode_symbol+0x64>
        int val = d->readSource(d);
 80131fc:	4628      	mov	r0, r5
 80131fe:	4798      	blx	r3
        if (val >= 0) {
 8013200:	2800      	cmp	r0, #0
 8013202:	f04f 0201 	mov.w	r2, #1
 8013206:	da12      	bge.n	801322e <tinf_decode_symbol+0x8a>
    d->eof = true;
 8013208:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
      if (++len == TINF_ARRAY_SIZE(t->table)) {
 801320c:	45b9      	cmp	r9, r7
      d->bitcount = 7;
 801320e:	f8c5 b010 	str.w	fp, [r5, #16]
   d->tag >>= 1;
 8013212:	60ec      	str	r4, [r5, #12]
      if (++len == TINF_ARRAY_SIZE(t->table)) {
 8013214:	d1dc      	bne.n	80131d0 <tinf_decode_symbol+0x2c>
         return TINF_DATA_ERROR;
 8013216:	f06f 0002 	mvn.w	r0, #2
      return TINF_DATA_ERROR;
   }
   #endif

   return t->trans[sum];
}
 801321a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return *d->source++;
 801321e:	1c4b      	adds	r3, r1, #1
 8013220:	602b      	str	r3, [r5, #0]
 8013222:	780c      	ldrb	r4, [r1, #0]
   return bit;
 8013224:	f004 0301 	and.w	r3, r4, #1
      cur = 2*cur + tinf_getbit(d);
 8013228:	441e      	add	r6, r3
   d->tag >>= 1;
 801322a:	0864      	lsrs	r4, r4, #1
        return *d->source++;
 801322c:	e7ee      	b.n	801320c <tinf_decode_symbol+0x68>
   bit = d->tag & 0x01;
 801322e:	ea00 0302 	and.w	r3, r0, r2
      cur = 2*cur + tinf_getbit(d);
 8013232:	441e      	add	r6, r3
   d->tag >>= 1;
 8013234:	f3c0 0446 	ubfx	r4, r0, #1, #7
            return (unsigned char)val;
 8013238:	e7e8      	b.n	801320c <tinf_decode_symbol+0x68>
   return t->trans[sum];
 801323a:	44b0      	add	r8, r6
 801323c:	f108 0810 	add.w	r8, r8, #16
 8013240:	f83a 0018 	ldrh.w	r0, [sl, r8, lsl #1]
}
 8013244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013248 <tinf_read_bits>:
{
 8013248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801324c:	4690      	mov	r8, r2
   if (num)
 801324e:	b361      	cbz	r1, 80132aa <tinf_read_bits+0x62>
      unsigned int limit = 1 << (num);
 8013250:	2501      	movs	r5, #1
 8013252:	fa05 f601 	lsl.w	r6, r5, r1
      for (mask = 1; mask < limit; mask *= 2)
 8013256:	42ae      	cmp	r6, r5
 8013258:	d927      	bls.n	80132aa <tinf_read_bits+0x62>
   unsigned int val = 0;
 801325a:	2700      	movs	r7, #0
 801325c:	4604      	mov	r4, r0
      d->bitcount = 7;
 801325e:	f04f 0907 	mov.w	r9, #7
    d->eof = true;
 8013262:	46ab      	mov	fp, r5
   d->tag >>= 1;
 8013264:	46ba      	mov	sl, r7
 8013266:	e009      	b.n	801327c <tinf_read_bits+0x34>
   bit = d->tag & 0x01;
 8013268:	68e3      	ldr	r3, [r4, #12]
 801326a:	f003 0201 	and.w	r2, r3, #1
   d->tag >>= 1;
 801326e:	085b      	lsrs	r3, r3, #1
 8013270:	60e3      	str	r3, [r4, #12]
         if (tinf_getbit(d)) val += mask;
 8013272:	b102      	cbz	r2, 8013276 <tinf_read_bits+0x2e>
 8013274:	442f      	add	r7, r5
      for (mask = 1; mask < limit; mask *= 2)
 8013276:	006d      	lsls	r5, r5, #1
 8013278:	42ae      	cmp	r6, r5
 801327a:	d917      	bls.n	80132ac <tinf_read_bits+0x64>
   if (!d->bitcount--)
 801327c:	6923      	ldr	r3, [r4, #16]
 801327e:	1e5a      	subs	r2, r3, #1
 8013280:	6122      	str	r2, [r4, #16]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1f0      	bne.n	8013268 <tinf_read_bits+0x20>
    if (d->source < d->source_limit) {
 8013286:	e9d4 2300 	ldrd	r2, r3, [r4]
 801328a:	429a      	cmp	r2, r3
 801328c:	d312      	bcc.n	80132b4 <tinf_read_bits+0x6c>
    if (d->readSource && !d->eof) {
 801328e:	68a3      	ldr	r3, [r4, #8]
 8013290:	b133      	cbz	r3, 80132a0 <tinf_read_bits+0x58>
 8013292:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8013296:	b91a      	cbnz	r2, 80132a0 <tinf_read_bits+0x58>
        int val = d->readSource(d);
 8013298:	4620      	mov	r0, r4
 801329a:	4798      	blx	r3
        if (val >= 0) {
 801329c:	2800      	cmp	r0, #0
 801329e:	da12      	bge.n	80132c6 <tinf_read_bits+0x7e>
   d->tag >>= 1;
 80132a0:	e9c4 a903 	strd	sl, r9, [r4, #12]
    d->eof = true;
 80132a4:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
   return bit;
 80132a8:	e7e5      	b.n	8013276 <tinf_read_bits+0x2e>
   unsigned int val = 0;
 80132aa:	2700      	movs	r7, #0
}
 80132ac:	eb08 0007 	add.w	r0, r8, r7
 80132b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return *d->source++;
 80132b4:	1c53      	adds	r3, r2, #1
 80132b6:	6023      	str	r3, [r4, #0]
 80132b8:	7813      	ldrb	r3, [r2, #0]
   bit = d->tag & 0x01;
 80132ba:	f003 0201 	and.w	r2, r3, #1
   d->tag >>= 1;
 80132be:	085b      	lsrs	r3, r3, #1
      d->bitcount = 7;
 80132c0:	f8c4 9010 	str.w	r9, [r4, #16]
 80132c4:	e7d4      	b.n	8013270 <tinf_read_bits+0x28>
   bit = d->tag & 0x01;
 80132c6:	f000 0201 	and.w	r2, r0, #1
   d->tag >>= 1;
 80132ca:	f3c0 0346 	ubfx	r3, r0, #1, #7
            return (unsigned char)val;
 80132ce:	e7f7      	b.n	80132c0 <tinf_read_bits+0x78>

080132d0 <uzlib_get_byte>:
    if (d->source < d->source_limit) {
 80132d0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80132d4:	4293      	cmp	r3, r2
{
 80132d6:	b510      	push	{r4, lr}
 80132d8:	4604      	mov	r4, r0
    if (d->source < d->source_limit) {
 80132da:	d30c      	bcc.n	80132f6 <uzlib_get_byte+0x26>
    if (d->readSource && !d->eof) {
 80132dc:	6883      	ldr	r3, [r0, #8]
 80132de:	b12b      	cbz	r3, 80132ec <uzlib_get_byte+0x1c>
 80132e0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80132e4:	b912      	cbnz	r2, 80132ec <uzlib_get_byte+0x1c>
        int val = d->readSource(d);
 80132e6:	4798      	blx	r3
        if (val >= 0) {
 80132e8:	2800      	cmp	r0, #0
 80132ea:	da08      	bge.n	80132fe <uzlib_get_byte+0x2e>
    d->eof = true;
 80132ec:	2301      	movs	r3, #1
 80132ee:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    return 0;
 80132f2:	2000      	movs	r0, #0
}
 80132f4:	bd10      	pop	{r4, pc}
        return *d->source++;
 80132f6:	1c5a      	adds	r2, r3, #1
 80132f8:	6002      	str	r2, [r0, #0]
 80132fa:	7818      	ldrb	r0, [r3, #0]
}
 80132fc:	bd10      	pop	{r4, pc}
            return (unsigned char)val;
 80132fe:	b2c0      	uxtb	r0, r0
}
 8013300:	bd10      	pop	{r4, pc}
 8013302:	bf00      	nop

08013304 <tinf_decode_trees>:

/* given a data stream, decode dynamic trees from it */
static int tinf_decode_trees(TINF_DATA *d, TINF_TREE *lt, TINF_TREE *dt)
{
 8013304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	b0d5      	sub	sp, #340	; 0x154
 801330a:	4691      	mov	r9, r2
 801330c:	460d      	mov	r5, r1
   unsigned char lengths[288+32];
   unsigned int hlit, hdist, hclen, hlimit;
   unsigned int i, num, length;

   /* get 5 bits HLIT (257-286) */
   hlit = tinf_read_bits(d, 5, 257);
 801330e:	f240 1201 	movw	r2, #257	; 0x101
 8013312:	2105      	movs	r1, #5
{
 8013314:	4604      	mov	r4, r0
 8013316:	f8cd 900c 	str.w	r9, [sp, #12]
   hlit = tinf_read_bits(d, 5, 257);
 801331a:	f7ff ff95 	bl	8013248 <tinf_read_bits>

   /* get 5 bits HDIST (1-32) */
   hdist = tinf_read_bits(d, 5, 1);
 801331e:	2201      	movs	r2, #1
 8013320:	2105      	movs	r1, #5
   hlit = tinf_read_bits(d, 5, 257);
 8013322:	4607      	mov	r7, r0
   hdist = tinf_read_bits(d, 5, 1);
 8013324:	4620      	mov	r0, r4
 8013326:	f7ff ff8f 	bl	8013248 <tinf_read_bits>

   /* get 4 bits HCLEN (4-19) */
   hclen = tinf_read_bits(d, 4, 4);
 801332a:	2204      	movs	r2, #4
   hdist = tinf_read_bits(d, 5, 1);
 801332c:	9002      	str	r0, [sp, #8]
   hclen = tinf_read_bits(d, 4, 4);
 801332e:	4611      	mov	r1, r2
 8013330:	4620      	mov	r0, r4
 8013332:	f7ff ff89 	bl	8013248 <tinf_read_bits>

   for (i = 0; i < 19; ++i) lengths[i] = 0;
 8013336:	2300      	movs	r3, #0
 8013338:	9307      	str	r3, [sp, #28]
 801333a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801333e:	9306      	str	r3, [sp, #24]
 8013340:	f8cd 301f 	str.w	r3, [sp, #31]

   /* read code lengths for code length alphabet */
   for (i = 0; i < hclen; ++i)
 8013344:	b348      	cbz	r0, 801339a <tinf_decode_trees+0x96>
 8013346:	4e47      	ldr	r6, [pc, #284]	; (8013464 <tinf_decode_trees+0x160>)
 8013348:	1983      	adds	r3, r0, r6
 801334a:	9301      	str	r3, [sp, #4]
      d->bitcount = 7;
 801334c:	f04f 0b07 	mov.w	fp, #7
{
 8013350:	f04f 0a03 	mov.w	sl, #3
      for (mask = 1; mask < limit; mask *= 2)
 8013354:	f04f 0801 	mov.w	r8, #1
   unsigned int val = 0;
 8013358:	f04f 0900 	mov.w	r9, #0
 801335c:	e00a      	b.n	8013374 <tinf_decode_trees+0x70>
   bit = d->tag & 0x01;
 801335e:	68e0      	ldr	r0, [r4, #12]
   d->tag >>= 1;
 8013360:	0843      	lsrs	r3, r0, #1
 8013362:	60e3      	str	r3, [r4, #12]
         if (tinf_getbit(d)) val += mask;
 8013364:	07c3      	lsls	r3, r0, #31
 8013366:	bf48      	it	mi
 8013368:	44c1      	addmi	r9, r8
      for (mask = 1; mask < limit; mask *= 2)
 801336a:	f1ba 0a01 	subs.w	sl, sl, #1
 801336e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013372:	d00a      	beq.n	801338a <tinf_decode_trees+0x86>
   if (!d->bitcount--)
 8013374:	6920      	ldr	r0, [r4, #16]
 8013376:	1e43      	subs	r3, r0, #1
 8013378:	6123      	str	r3, [r4, #16]
 801337a:	2800      	cmp	r0, #0
 801337c:	d1ef      	bne.n	801335e <tinf_decode_trees+0x5a>
      d->tag = uzlib_get_byte(d);
 801337e:	4620      	mov	r0, r4
 8013380:	f7ff ffa6 	bl	80132d0 <uzlib_get_byte>
      d->bitcount = 7;
 8013384:	f8c4 b010 	str.w	fp, [r4, #16]
 8013388:	e7ea      	b.n	8013360 <tinf_decode_trees+0x5c>
   {
      /* get 3 bits code length (0-7) */
      unsigned int clen = tinf_read_bits(d, 3, 0);

      lengths[clcidx[i]] = clen;
 801338a:	f816 3b01 	ldrb.w	r3, [r6], #1
 801338e:	aa04      	add	r2, sp, #16
 8013390:	f802 9003 	strb.w	r9, [r2, r3]
   for (i = 0; i < hclen; ++i)
 8013394:	9b01      	ldr	r3, [sp, #4]
 8013396:	42b3      	cmp	r3, r6
 8013398:	d1da      	bne.n	8013350 <tinf_decode_trees+0x4c>
   }

   /* build code length tree, temporarily use length tree */
   tinf_build_tree(lt, lengths, 19);
 801339a:	2213      	movs	r2, #19
 801339c:	a904      	add	r1, sp, #16
 801339e:	4628      	mov	r0, r5
 80133a0:	f7ff febe 	bl	8013120 <tinf_build_tree>

   /* decode code lengths for the dynamic trees */
   hlimit = hlit + hdist;
   for (num = 0; num < hlimit; )
 80133a4:	9b02      	ldr	r3, [sp, #8]
 80133a6:	18fe      	adds	r6, r7, r3
 80133a8:	bf18      	it	ne
 80133aa:	f04f 0a00 	movne.w	sl, #0
 80133ae:	d109      	bne.n	80133c4 <tinf_decode_trees+0xc0>
 80133b0:	e02a      	b.n	8013408 <tinf_decode_trees+0x104>
      int lbits, lbase = 3;

      /* error decoding */
      if (sym < 0) return sym;

      switch (sym)
 80133b2:	2810      	cmp	r0, #16
 80133b4:	d04a      	beq.n	801344c <tinf_decode_trees+0x148>
         lbits = 7;
         lbase = 11;
         break;
      default:
         /* values 0-15 represent the actual code lengths */
         lengths[num++] = sym;
 80133b6:	ab04      	add	r3, sp, #16
 80133b8:	f803 000a 	strb.w	r0, [r3, sl]
 80133bc:	f10a 0a01 	add.w	sl, sl, #1
   for (num = 0; num < hlimit; )
 80133c0:	45b2      	cmp	sl, r6
 80133c2:	d221      	bcs.n	8013408 <tinf_decode_trees+0x104>
      int sym = tinf_decode_symbol(d, lt);
 80133c4:	4629      	mov	r1, r5
 80133c6:	4620      	mov	r0, r4
 80133c8:	f7ff feec 	bl	80131a4 <tinf_decode_symbol>
      if (sym < 0) return sym;
 80133cc:	2800      	cmp	r0, #0
 80133ce:	db29      	blt.n	8013424 <tinf_decode_trees+0x120>
      switch (sym)
 80133d0:	2811      	cmp	r0, #17
 80133d2:	d02a      	beq.n	801342a <tinf_decode_trees+0x126>
 80133d4:	2812      	cmp	r0, #18
 80133d6:	d1ec      	bne.n	80133b2 <tinf_decode_trees+0xae>
         lbase = 11;
 80133d8:	220b      	movs	r2, #11
         lbits = 7;
 80133da:	2107      	movs	r1, #7
      unsigned char fill_value = 0;
 80133dc:	f04f 0900 	mov.w	r9, #0
         /* continue the for loop */
         continue;
      }

      /* special code length 16-18 are handled here */
      length = tinf_read_bits(d, lbits, lbase);
 80133e0:	4620      	mov	r0, r4
 80133e2:	f7ff ff31 	bl	8013248 <tinf_read_bits>
      if (num + length > hlimit) return TINF_DATA_ERROR;
 80133e6:	eb00 0b0a 	add.w	fp, r0, sl
 80133ea:	45b3      	cmp	fp, r6
      length = tinf_read_bits(d, lbits, lbase);
 80133ec:	4602      	mov	r2, r0
      if (num + length > hlimit) return TINF_DATA_ERROR;
 80133ee:	d828      	bhi.n	8013442 <tinf_decode_trees+0x13e>
      for (; length; --length)
 80133f0:	2800      	cmp	r0, #0
 80133f2:	d0e5      	beq.n	80133c0 <tinf_decode_trees+0xbc>
      {
         lengths[num++] = fill_value;
 80133f4:	f10a 0310 	add.w	r3, sl, #16
 80133f8:	eb0d 0003 	add.w	r0, sp, r3
 80133fc:	4649      	mov	r1, r9
 80133fe:	46da      	mov	sl, fp
 8013400:	f008 f996 	bl	801b730 <memset>
   for (num = 0; num < hlimit; )
 8013404:	45b2      	cmp	sl, r6
 8013406:	d3dd      	bcc.n	80133c4 <tinf_decode_trees+0xc0>
      return TINF_DATA_ERROR;
   }
   #endif

   /* build dynamic trees */
   tinf_build_tree(lt, lengths, hlit);
 8013408:	4628      	mov	r0, r5
 801340a:	a904      	add	r1, sp, #16
 801340c:	463a      	mov	r2, r7
 801340e:	f7ff fe87 	bl	8013120 <tinf_build_tree>
   tinf_build_tree(dt, lengths + hlit, hdist);
 8013412:	f107 0310 	add.w	r3, r7, #16
 8013416:	9803      	ldr	r0, [sp, #12]
 8013418:	9a02      	ldr	r2, [sp, #8]
 801341a:	eb0d 0103 	add.w	r1, sp, r3
 801341e:	f7ff fe7f 	bl	8013120 <tinf_build_tree>

   return TINF_OK;
 8013422:	2000      	movs	r0, #0
}
 8013424:	b055      	add	sp, #340	; 0x154
 8013426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (sym)
 801342a:	2203      	movs	r2, #3
 801342c:	4611      	mov	r1, r2
      length = tinf_read_bits(d, lbits, lbase);
 801342e:	4620      	mov	r0, r4
 8013430:	f7ff ff0a 	bl	8013248 <tinf_read_bits>
      if (num + length > hlimit) return TINF_DATA_ERROR;
 8013434:	eb00 0b0a 	add.w	fp, r0, sl
 8013438:	45b3      	cmp	fp, r6
      switch (sym)
 801343a:	f04f 0900 	mov.w	r9, #0
      length = tinf_read_bits(d, lbits, lbase);
 801343e:	4602      	mov	r2, r0
      if (num + length > hlimit) return TINF_DATA_ERROR;
 8013440:	d9d6      	bls.n	80133f0 <tinf_decode_trees+0xec>
         if (num == 0) return TINF_DATA_ERROR;
 8013442:	f06f 0002 	mvn.w	r0, #2
}
 8013446:	b055      	add	sp, #340	; 0x154
 8013448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if (num == 0) return TINF_DATA_ERROR;
 801344c:	f1ba 0f00 	cmp.w	sl, #0
 8013450:	d0f7      	beq.n	8013442 <tinf_decode_trees+0x13e>
         fill_value = lengths[num - 1];
 8013452:	f10a 0310 	add.w	r3, sl, #16
 8013456:	446b      	add	r3, sp
      int lbits, lbase = 3;
 8013458:	2203      	movs	r2, #3
         fill_value = lengths[num - 1];
 801345a:	f813 9c01 	ldrb.w	r9, [r3, #-1]
         lbits = 2;
 801345e:	2102      	movs	r1, #2
         break;
 8013460:	e7be      	b.n	80133e0 <tinf_decode_trees+0xdc>
 8013462:	bf00      	nop
 8013464:	08020150 	.word	0x08020150

08013468 <tinf_get_le_uint32>:
{
 8013468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801346a:	4604      	mov	r4, r0
 801346c:	2604      	movs	r6, #4
    uint32_t val = 0;
 801346e:	2500      	movs	r5, #0
    d->eof = true;
 8013470:	2701      	movs	r7, #1
    if (d->source < d->source_limit) {
 8013472:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013476:	4293      	cmp	r3, r2
        val = val >> 8 | ((uint32_t)uzlib_get_byte(d)) << 24;
 8013478:	ea4f 2515 	mov.w	r5, r5, lsr #8
    if (d->source < d->source_limit) {
 801347c:	d30e      	bcc.n	801349c <tinf_get_le_uint32+0x34>
    if (d->readSource && !d->eof) {
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	b133      	cbz	r3, 8013490 <tinf_get_le_uint32+0x28>
 8013482:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
        int val = d->readSource(d);
 8013486:	4620      	mov	r0, r4
    if (d->readSource && !d->eof) {
 8013488:	b912      	cbnz	r2, 8013490 <tinf_get_le_uint32+0x28>
        int val = d->readSource(d);
 801348a:	4798      	blx	r3
        if (val >= 0) {
 801348c:	2800      	cmp	r0, #0
 801348e:	da0b      	bge.n	80134a8 <tinf_get_le_uint32+0x40>
    d->eof = true;
 8013490:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    for (i = 4; i--;) {
 8013494:	3e01      	subs	r6, #1
 8013496:	d1ec      	bne.n	8013472 <tinf_get_le_uint32+0xa>
}
 8013498:	4628      	mov	r0, r5
 801349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return *d->source++;
 801349c:	1c5a      	adds	r2, r3, #1
 801349e:	6022      	str	r2, [r4, #0]
        val = val >> 8 | ((uint32_t)uzlib_get_byte(d)) << 24;
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
        return *d->source++;
 80134a6:	e7f5      	b.n	8013494 <tinf_get_le_uint32+0x2c>
        val = val >> 8 | ((uint32_t)uzlib_get_byte(d)) << 24;
 80134a8:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
            return (unsigned char)val;
 80134ac:	e7f2      	b.n	8013494 <tinf_get_le_uint32+0x2c>
 80134ae:	bf00      	nop

080134b0 <tinf_get_be_uint32>:
{
 80134b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134b2:	4604      	mov	r4, r0
 80134b4:	2604      	movs	r6, #4
    uint32_t val = 0;
 80134b6:	2500      	movs	r5, #0
    d->eof = true;
 80134b8:	2701      	movs	r7, #1
    if (d->source < d->source_limit) {
 80134ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80134be:	4293      	cmp	r3, r2
        val = val << 8 | uzlib_get_byte(d);
 80134c0:	ea4f 2505 	mov.w	r5, r5, lsl #8
    if (d->source < d->source_limit) {
 80134c4:	d30f      	bcc.n	80134e6 <tinf_get_be_uint32+0x36>
    if (d->readSource && !d->eof) {
 80134c6:	68a3      	ldr	r3, [r4, #8]
 80134c8:	b13b      	cbz	r3, 80134da <tinf_get_be_uint32+0x2a>
 80134ca:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
        int val = d->readSource(d);
 80134ce:	4620      	mov	r0, r4
    if (d->readSource && !d->eof) {
 80134d0:	b91a      	cbnz	r2, 80134da <tinf_get_be_uint32+0x2a>
        int val = d->readSource(d);
 80134d2:	4798      	blx	r3
        if (val >= 0) {
 80134d4:	2800      	cmp	r0, #0
        val = val << 8 | uzlib_get_byte(d);
 80134d6:	b2c0      	uxtb	r0, r0
        if (val >= 0) {
 80134d8:	da0a      	bge.n	80134f0 <tinf_get_be_uint32+0x40>
    d->eof = true;
 80134da:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    for (i = 4; i--;) {
 80134de:	3e01      	subs	r6, #1
 80134e0:	d1eb      	bne.n	80134ba <tinf_get_be_uint32+0xa>
}
 80134e2:	4628      	mov	r0, r5
 80134e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return *d->source++;
 80134e6:	1c5a      	adds	r2, r3, #1
 80134e8:	6022      	str	r2, [r4, #0]
        val = val << 8 | uzlib_get_byte(d);
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	431d      	orrs	r5, r3
        return *d->source++;
 80134ee:	e7f6      	b.n	80134de <tinf_get_be_uint32+0x2e>
        val = val << 8 | uzlib_get_byte(d);
 80134f0:	4305      	orrs	r5, r0
            return (unsigned char)val;
 80134f2:	e7f4      	b.n	80134de <tinf_get_be_uint32+0x2e>

080134f4 <uzlib_uncompress_init>:
}

/* initialize decompression structure */
void uzlib_uncompress_init(TINF_DATA *d, void *dict, unsigned int dictLen)
{
   d->eof = 0;
 80134f4:	2300      	movs	r3, #0
{
 80134f6:	b410      	push	{r4}
   d->bitcount = 0;
   d->bfinal = 0;
   d->btype = -1;
 80134f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80134fc:	e9c0 430a 	strd	r4, r3, [r0, #40]	; 0x28
   d->dict_size = dictLen;
   d->dict_ring = dict;
 8013500:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
   d->dict_idx = 0;
   d->curlen = 0;
}
 8013504:	f85d 4b04 	ldr.w	r4, [sp], #4
   d->eof = 0;
 8013508:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   d->bitcount = 0;
 801350c:	6103      	str	r3, [r0, #16]
   d->dict_idx = 0;
 801350e:	6403      	str	r3, [r0, #64]	; 0x40
   d->curlen = 0;
 8013510:	6303      	str	r3, [r0, #48]	; 0x30
}
 8013512:	4770      	bx	lr

08013514 <uzlib_uncompress>:

/* inflate next output bytes from compressed stream */
int uzlib_uncompress(TINF_DATA *d)
{
 8013514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        d->curlen = tinf_read_bits(d, length_bits[sym], length_base[sym]);
 8013518:	4ebb      	ldr	r6, [pc, #748]	; (8013808 <uzlib_uncompress+0x2f4>)
{
 801351a:	4604      	mov	r4, r0
            d->lzOff = 0;
 801351c:	2500      	movs	r5, #0
            break;
        case 1:
        case 2:
            /* decompress block with fixed/dynamic huffman trees */
            /* trees were decoded previously, so it's the same routine for both */
            res = tinf_inflate_block_data(d, &d->ltree, &d->dtree);
 801351e:	f100 0744 	add.w	r7, r0, #68	; 0x44
        if (d->btype == -1) {
 8013522:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8013526:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 801352a:	d043      	beq.n	80135b4 <uzlib_uncompress+0xa0>
        switch (d->btype)
 801352c:	f1b8 0f00 	cmp.w	r8, #0
 8013530:	d02b      	beq.n	801358a <uzlib_uncompress+0x76>
 8013532:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013536:	f1b8 0f01 	cmp.w	r8, #1
 801353a:	d835      	bhi.n	80135a8 <uzlib_uncompress+0x94>
    if (d->curlen == 0) {
 801353c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801353e:	2b00      	cmp	r3, #0
 8013540:	d06b      	beq.n	801361a <uzlib_uncompress+0x106>
    if (d->dict_ring) {
 8013542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013544:	2b00      	cmp	r3, #0
 8013546:	f000 80bf 	beq.w	80136c8 <uzlib_uncompress+0x1b4>
        d->dest[0] = d->dest[d->lzOff];
 801354a:	6b61      	ldr	r1, [r4, #52]	; 0x34
        TINF_PUT(d, d->dict_ring[d->lzOff]);
 801354c:	69a2      	ldr	r2, [r4, #24]
 801354e:	1c50      	adds	r0, r2, #1
 8013550:	61a0      	str	r0, [r4, #24]
 8013552:	5c5b      	ldrb	r3, [r3, r1]
 8013554:	7013      	strb	r3, [r2, #0]
 8013556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013558:	2b00      	cmp	r3, #0
 801355a:	f000 8144 	beq.w	80137e6 <uzlib_uncompress+0x2d2>
 801355e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013562:	1c50      	adds	r0, r2, #1
 8013564:	6420      	str	r0, [r4, #64]	; 0x40
 8013566:	5c59      	ldrb	r1, [r3, r1]
 8013568:	5499      	strb	r1, [r3, r2]
 801356a:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 801356e:	4293      	cmp	r3, r2
 8013570:	bf08      	it	eq
 8013572:	6425      	streq	r5, [r4, #64]	; 0x40
        if ((unsigned)++d->lzOff == d->dict_size) {
 8013574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013576:	3301      	adds	r3, #1
 8013578:	6363      	str	r3, [r4, #52]	; 0x34
 801357a:	4293      	cmp	r3, r2

        if (res != TINF_OK) {
            return res;
        }

    } while (d->dest < d->dest_limit);
 801357c:	69a3      	ldr	r3, [r4, #24]
            d->lzOff = 0;
 801357e:	bf08      	it	eq
 8013580:	6365      	streq	r5, [r4, #52]	; 0x34
    d->curlen--;
 8013582:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013584:	3a01      	subs	r2, #1
 8013586:	6322      	str	r2, [r4, #48]	; 0x30
        if (res == TINF_DONE && !d->bfinal) {
 8013588:	e042      	b.n	8013610 <uzlib_uncompress+0xfc>
    if (d->curlen == 0) {
 801358a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801358c:	2b00      	cmp	r3, #0
 801358e:	d07f      	beq.n	8013690 <uzlib_uncompress+0x17c>
    if (--d->curlen == 0) {
 8013590:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8013594:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8013598:	f1b9 0f00 	cmp.w	r9, #0
 801359c:	d124      	bne.n	80135e8 <uzlib_uncompress+0xd4>
        if (res == TINF_DONE && !d->bfinal) {
 801359e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80135a0:	b133      	cbz	r3, 80135b0 <uzlib_uncompress+0x9c>
 80135a2:	2001      	movs	r0, #1

    return TINF_OK;
}
 80135a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        switch (d->btype)
 80135a8:	f06f 0002 	mvn.w	r0, #2
}
 80135ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            old_btype = d->btype;
 80135b0:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   if (!d->bitcount--)
 80135b4:	6923      	ldr	r3, [r4, #16]
 80135b6:	1e5a      	subs	r2, r3, #1
 80135b8:	6122      	str	r2, [r4, #16]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 810d 	beq.w	80137da <uzlib_uncompress+0x2c6>
   bit = d->tag & 0x01;
 80135c0:	68e0      	ldr	r0, [r4, #12]
   d->tag >>= 1;
 80135c2:	0843      	lsrs	r3, r0, #1
   bit = d->tag & 0x01;
 80135c4:	f000 0001 	and.w	r0, r0, #1
            d->bfinal = tinf_getbit(d);
 80135c8:	62e0      	str	r0, [r4, #44]	; 0x2c
   d->tag >>= 1;
 80135ca:	60e3      	str	r3, [r4, #12]
            d->btype = tinf_read_bits(d, 2, 0);
 80135cc:	2200      	movs	r2, #0
 80135ce:	2102      	movs	r1, #2
 80135d0:	4620      	mov	r0, r4
 80135d2:	f7ff fe39 	bl	8013248 <tinf_read_bits>
            if (d->btype == 1 && old_btype != 1) {
 80135d6:	2801      	cmp	r0, #1
            d->btype = tinf_read_bits(d, 2, 0);
 80135d8:	62a0      	str	r0, [r4, #40]	; 0x28
            if (d->btype == 1 && old_btype != 1) {
 80135da:	f000 8091 	beq.w	8013700 <uzlib_uncompress+0x1ec>
            } else if (d->btype == 2) {
 80135de:	2802      	cmp	r0, #2
 80135e0:	f000 8103 	beq.w	80137ea <uzlib_uncompress+0x2d6>
 80135e4:	4680      	mov	r8, r0
 80135e6:	e7a1      	b.n	801352c <uzlib_uncompress+0x18>
    unsigned char c = uzlib_get_byte(d);
 80135e8:	4620      	mov	r0, r4
 80135ea:	f7ff fe71 	bl	80132d0 <uzlib_get_byte>
    TINF_PUT(d, c);
 80135ee:	69a3      	ldr	r3, [r4, #24]
 80135f0:	1c5a      	adds	r2, r3, #1
 80135f2:	61a2      	str	r2, [r4, #24]
 80135f4:	7018      	strb	r0, [r3, #0]
 80135f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d07f      	beq.n	80136fc <uzlib_uncompress+0x1e8>
 80135fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80135fe:	1c51      	adds	r1, r2, #1
 8013600:	6421      	str	r1, [r4, #64]	; 0x40
 8013602:	5498      	strb	r0, [r3, r2]
 8013604:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8013608:	429a      	cmp	r2, r3
    } while (d->dest < d->dest_limit);
 801360a:	69a3      	ldr	r3, [r4, #24]
    TINF_PUT(d, c);
 801360c:	bf08      	it	eq
 801360e:	6425      	streq	r5, [r4, #64]	; 0x40
    } while (d->dest < d->dest_limit);
 8013610:	69e2      	ldr	r2, [r4, #28]
 8013612:	429a      	cmp	r2, r3
 8013614:	d885      	bhi.n	8013522 <uzlib_uncompress+0xe>
    return TINF_OK;
 8013616:	2000      	movs	r0, #0
 8013618:	e7c8      	b.n	80135ac <uzlib_uncompress+0x98>
        int sym = tinf_decode_symbol(d, lt);
 801361a:	4639      	mov	r1, r7
 801361c:	4620      	mov	r0, r4
 801361e:	f7ff fdc1 	bl	80131a4 <tinf_decode_symbol>
        if (d->eof) {
 8013622:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013626:	2b00      	cmp	r3, #0
 8013628:	d1be      	bne.n	80135a8 <uzlib_uncompress+0x94>
        if (sym < 256) {
 801362a:	28ff      	cmp	r0, #255	; 0xff
 801362c:	dd54      	ble.n	80136d8 <uzlib_uncompress+0x1c4>
        if (sym == 256) {
 801362e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8013632:	d0b4      	beq.n	801359e <uzlib_uncompress+0x8a>
        sym -= 257;
 8013634:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8013638:	4418      	add	r0, r3
        if (sym >= 29) {
 801363a:	281c      	cmp	r0, #28
 801363c:	dcb4      	bgt.n	80135a8 <uzlib_uncompress+0x94>
        d->curlen = tinf_read_bits(d, length_bits[sym], length_base[sym]);
 801363e:	eb06 0340 	add.w	r3, r6, r0, lsl #1
 8013642:	4430      	add	r0, r6
 8013644:	8a9a      	ldrh	r2, [r3, #20]
 8013646:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 801364a:	4620      	mov	r0, r4
 801364c:	f7ff fdfc 	bl	8013248 <tinf_read_bits>
        dist = tinf_decode_symbol(d, dt);
 8013650:	f504 7129 	add.w	r1, r4, #676	; 0x2a4
        d->curlen = tinf_read_bits(d, length_bits[sym], length_base[sym]);
 8013654:	6320      	str	r0, [r4, #48]	; 0x30
        dist = tinf_decode_symbol(d, dt);
 8013656:	4620      	mov	r0, r4
 8013658:	f7ff fda4 	bl	80131a4 <tinf_decode_symbol>
        if (dist >= 30) {
 801365c:	281d      	cmp	r0, #29
 801365e:	dca3      	bgt.n	80135a8 <uzlib_uncompress+0x94>
        offs = tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
 8013660:	eb06 0340 	add.w	r3, r6, r0, lsl #1
 8013664:	4430      	add	r0, r6
 8013666:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 801366a:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 801366e:	4620      	mov	r0, r4
 8013670:	f7ff fdea 	bl	8013248 <tinf_read_bits>
        if (d->dict_ring) {
 8013674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 80c8 	beq.w	801380c <uzlib_uncompress+0x2f8>
            if (offs > d->dict_size) {
 801367c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801367e:	4290      	cmp	r0, r2
 8013680:	f200 80d0 	bhi.w	8013824 <uzlib_uncompress+0x310>
            d->lzOff = d->dict_idx - offs;
 8013684:	6c21      	ldr	r1, [r4, #64]	; 0x40
            if (d->lzOff < 0) {
 8013686:	1a09      	subs	r1, r1, r0
 8013688:	f100 80c9 	bmi.w	801381e <uzlib_uncompress+0x30a>
            d->lzOff = d->dict_idx - offs;
 801368c:	6361      	str	r1, [r4, #52]	; 0x34
    if (d->dict_ring) {
 801368e:	e75d      	b.n	801354c <uzlib_uncompress+0x38>
        length = uzlib_get_byte(d);
 8013690:	4620      	mov	r0, r4
 8013692:	f7ff fe1d 	bl	80132d0 <uzlib_get_byte>
 8013696:	4681      	mov	r9, r0
        length += 256 * uzlib_get_byte(d);
 8013698:	4620      	mov	r0, r4
 801369a:	f7ff fe19 	bl	80132d0 <uzlib_get_byte>
 801369e:	eb09 2900 	add.w	r9, r9, r0, lsl #8
        invlength = uzlib_get_byte(d);
 80136a2:	4620      	mov	r0, r4
 80136a4:	f7ff fe14 	bl	80132d0 <uzlib_get_byte>
 80136a8:	4682      	mov	sl, r0
        invlength += 256 * uzlib_get_byte(d);
 80136aa:	4620      	mov	r0, r4
 80136ac:	f7ff fe10 	bl	80132d0 <uzlib_get_byte>
 80136b0:	eb0a 2000 	add.w	r0, sl, r0, lsl #8
        if (length != (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;
 80136b4:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 80136b8:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 80136bc:	4581      	cmp	r9, r0
 80136be:	f47f af73 	bne.w	80135a8 <uzlib_uncompress+0x94>
        d->bitcount = 0;
 80136c2:	f8c4 8010 	str.w	r8, [r4, #16]
 80136c6:	e765      	b.n	8013594 <uzlib_uncompress+0x80>
        d->dest[0] = d->dest[d->lzOff];
 80136c8:	69a3      	ldr	r3, [r4, #24]
 80136ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80136cc:	5c1a      	ldrb	r2, [r3, r0]
 80136ce:	701a      	strb	r2, [r3, #0]
        d->dest++;
 80136d0:	69a3      	ldr	r3, [r4, #24]
 80136d2:	3301      	adds	r3, #1
 80136d4:	61a3      	str	r3, [r4, #24]
 80136d6:	e754      	b.n	8013582 <uzlib_uncompress+0x6e>
            TINF_PUT(d, sym);
 80136d8:	69a2      	ldr	r2, [r4, #24]
 80136da:	b2c0      	uxtb	r0, r0
 80136dc:	1c51      	adds	r1, r2, #1
 80136de:	61a1      	str	r1, [r4, #24]
 80136e0:	7010      	strb	r0, [r2, #0]
 80136e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80136e4:	b152      	cbz	r2, 80136fc <uzlib_uncompress+0x1e8>
 80136e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80136e8:	f101 0c01 	add.w	ip, r1, #1
 80136ec:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
 80136f0:	5450      	strb	r0, [r2, r1]
 80136f2:	e9d4 210f 	ldrd	r2, r1, [r4, #60]	; 0x3c
 80136f6:	4291      	cmp	r1, r2
 80136f8:	f000 8083 	beq.w	8013802 <uzlib_uncompress+0x2ee>
    } while (d->dest < d->dest_limit);
 80136fc:	69a3      	ldr	r3, [r4, #24]
 80136fe:	e787      	b.n	8013610 <uzlib_uncompress+0xfc>
            if (d->btype == 1 && old_btype != 1) {
 8013700:	f1b8 0f01 	cmp.w	r8, #1
 8013704:	f43f af1a 	beq.w	801353c <uzlib_uncompress+0x28>
   lt->table[7] = 24;
 8013708:	2318      	movs	r3, #24
 801370a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
   lt->table[8] = 152;
 801370e:	2398      	movs	r3, #152	; 0x98
 8013710:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   lt->table[9] = 112;
 8013714:	2370      	movs	r3, #112	; 0x70
 8013716:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
   for (i = 0; i < 7; ++i) lt->table[i] = 0;
 801371a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801371e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
 8013722:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
 8013726:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
 801372a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 801372e:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
 8013732:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
   for (i = 0; i < 24; ++i) lt->trans[i] = 256 + i;
 8013736:	f104 0262 	add.w	r2, r4, #98	; 0x62
   lt->table[9] = 112;
 801373a:	f44f 7380 	mov.w	r3, #256	; 0x100
   for (i = 0; i < 24; ++i) lt->trans[i] = 256 + i;
 801373e:	1c59      	adds	r1, r3, #1
 8013740:	f822 3f02 	strh.w	r3, [r2, #2]!
 8013744:	b28b      	uxth	r3, r1
 8013746:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801374a:	d1f8      	bne.n	801373e <uzlib_uncompress+0x22a>
 801374c:	f104 0292 	add.w	r2, r4, #146	; 0x92
   for (i = 0; i < 144; ++i) lt->trans[24 + i] = i;
 8013750:	2300      	movs	r3, #0
 8013752:	f822 3f02 	strh.w	r3, [r2, #2]!
 8013756:	3301      	adds	r3, #1
 8013758:	2b90      	cmp	r3, #144	; 0x90
 801375a:	d1fa      	bne.n	8013752 <uzlib_uncompress+0x23e>
   for (i = 0; i < 8; ++i) lt->trans[24 + 144 + i] = 280 + i;
 801375c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013760:	f8a4 21b4 	strh.w	r2, [r4, #436]	; 0x1b4
 8013764:	f240 1219 	movw	r2, #281	; 0x119
 8013768:	f8a4 21b6 	strh.w	r2, [r4, #438]	; 0x1b6
 801376c:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8013770:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
 8013774:	f240 121b 	movw	r2, #283	; 0x11b
 8013778:	f8a4 21ba 	strh.w	r2, [r4, #442]	; 0x1ba
 801377c:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8013780:	f8a4 21bc 	strh.w	r2, [r4, #444]	; 0x1bc
 8013784:	f240 121d 	movw	r2, #285	; 0x11d
 8013788:	f8a4 21be 	strh.w	r2, [r4, #446]	; 0x1be
 801378c:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8013790:	f8a4 21c0 	strh.w	r2, [r4, #448]	; 0x1c0
 8013794:	f240 121f 	movw	r2, #287	; 0x11f
 8013798:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   for (i = 0; i < 112; ++i) lt->trans[24 + 144 + 8 + i] = 144 + i;
 801379c:	f504 72e1 	add.w	r2, r4, #450	; 0x1c2
 80137a0:	1c59      	adds	r1, r3, #1
 80137a2:	f822 3f02 	strh.w	r3, [r2, #2]!
 80137a6:	b28b      	uxth	r3, r1
 80137a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137ac:	d1f8      	bne.n	80137a0 <uzlib_uncompress+0x28c>
   dt->table[5] = 32;
 80137ae:	2320      	movs	r3, #32
 80137b0:	f8a4 32ae 	strh.w	r3, [r4, #686]	; 0x2ae
   for (i = 0; i < 5; ++i) dt->table[i] = 0;
 80137b4:	f8a4 52a4 	strh.w	r5, [r4, #676]	; 0x2a4
 80137b8:	f8a4 52a6 	strh.w	r5, [r4, #678]	; 0x2a6
 80137bc:	f8a4 52a8 	strh.w	r5, [r4, #680]	; 0x2a8
 80137c0:	f8a4 52aa 	strh.w	r5, [r4, #682]	; 0x2aa
 80137c4:	f8a4 52ac 	strh.w	r5, [r4, #684]	; 0x2ac
   for (i = 0; i < 32; ++i) dt->trans[i] = i;
 80137c8:	f204 22c2 	addw	r2, r4, #706	; 0x2c2
 80137cc:	2300      	movs	r3, #0
 80137ce:	f822 3f02 	strh.w	r3, [r2, #2]!
 80137d2:	3301      	adds	r3, #1
 80137d4:	2b20      	cmp	r3, #32
 80137d6:	d1fa      	bne.n	80137ce <uzlib_uncompress+0x2ba>
 80137d8:	e6b0      	b.n	801353c <uzlib_uncompress+0x28>
      d->tag = uzlib_get_byte(d);
 80137da:	4620      	mov	r0, r4
 80137dc:	f7ff fd78 	bl	80132d0 <uzlib_get_byte>
      d->bitcount = 7;
 80137e0:	2307      	movs	r3, #7
 80137e2:	6123      	str	r3, [r4, #16]
 80137e4:	e6ed      	b.n	80135c2 <uzlib_uncompress+0xae>
        if ((unsigned)++d->lzOff == d->dict_size) {
 80137e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80137e8:	e6c4      	b.n	8013574 <uzlib_uncompress+0x60>
                res = tinf_decode_trees(d, &d->ltree, &d->dtree);
 80137ea:	f504 7229 	add.w	r2, r4, #676	; 0x2a4
 80137ee:	4639      	mov	r1, r7
 80137f0:	4620      	mov	r0, r4
 80137f2:	f7ff fd87 	bl	8013304 <tinf_decode_trees>
                if (res != TINF_OK) {
 80137f6:	2800      	cmp	r0, #0
 80137f8:	f47f aed8 	bne.w	80135ac <uzlib_uncompress+0x98>
        switch (d->btype)
 80137fc:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8013800:	e694      	b.n	801352c <uzlib_uncompress+0x18>
            TINF_PUT(d, sym);
 8013802:	6423      	str	r3, [r4, #64]	; 0x40
    } while (d->dest < d->dest_limit);
 8013804:	69a3      	ldr	r3, [r4, #24]
 8013806:	e703      	b.n	8013610 <uzlib_uncompress+0xfc>
 8013808:	08020150 	.word	0x08020150
            if (offs > d->dest - d->destStart) {
 801380c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8013810:	1a9a      	subs	r2, r3, r2
 8013812:	4290      	cmp	r0, r2
 8013814:	f63f aec8 	bhi.w	80135a8 <uzlib_uncompress+0x94>
            d->lzOff = -offs;
 8013818:	4240      	negs	r0, r0
 801381a:	6360      	str	r0, [r4, #52]	; 0x34
    if (d->dict_ring) {
 801381c:	e756      	b.n	80136cc <uzlib_uncompress+0x1b8>
                d->lzOff += d->dict_size;
 801381e:	4411      	add	r1, r2
 8013820:	6361      	str	r1, [r4, #52]	; 0x34
 8013822:	e693      	b.n	801354c <uzlib_uncompress+0x38>
                return TINF_DICT_ERROR;
 8013824:	f06f 0004 	mvn.w	r0, #4
 8013828:	e6c0      	b.n	80135ac <uzlib_uncompress+0x98>
 801382a:	bf00      	nop

0801382c <uzlib_uncompress_chksum>:

/* inflate next output bytes from compressed stream, updating
   checksum, and at the end of stream, verify it */
int uzlib_uncompress_chksum(TINF_DATA *d)
{
 801382c:	b570      	push	{r4, r5, r6, lr}
    int res;
    unsigned char *data = d->dest;
 801382e:	6986      	ldr	r6, [r0, #24]
{
 8013830:	4604      	mov	r4, r0

    res = uzlib_uncompress(d);
 8013832:	f7ff fe6f 	bl	8013514 <uzlib_uncompress>

    if (res < 0) return res;
 8013836:	1e05      	subs	r5, r0, #0
 8013838:	db07      	blt.n	801384a <uzlib_uncompress_chksum+0x1e>

    switch (d->checksum_type) {
 801383a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801383e:	2b01      	cmp	r3, #1
 8013840:	d01f      	beq.n	8013882 <uzlib_uncompress_chksum+0x56>
 8013842:	2b02      	cmp	r3, #2
 8013844:	d003      	beq.n	801384e <uzlib_uncompress_chksum+0x22>
    case TINF_CHKSUM_CRC:
        d->checksum = uzlib_crc32(data, d->dest - data, d->checksum);
        break;
    }

    if (res == TINF_DONE) {
 8013846:	2d01      	cmp	r5, #1
 8013848:	d00a      	beq.n	8013860 <uzlib_uncompress_chksum+0x34>
            break;
        }
    }

    return res;
}
 801384a:	4628      	mov	r0, r5
 801384c:	bd70      	pop	{r4, r5, r6, pc}
        d->checksum = uzlib_crc32(data, d->dest - data, d->checksum);
 801384e:	69a1      	ldr	r1, [r4, #24]
 8013850:	6a22      	ldr	r2, [r4, #32]
 8013852:	1b89      	subs	r1, r1, r6
 8013854:	4630      	mov	r0, r6
 8013856:	f7ff fbe9 	bl	801302c <uzlib_crc32>
    if (res == TINF_DONE) {
 801385a:	2d01      	cmp	r5, #1
        d->checksum = uzlib_crc32(data, d->dest - data, d->checksum);
 801385c:	6220      	str	r0, [r4, #32]
    if (res == TINF_DONE) {
 801385e:	d1f4      	bne.n	801384a <uzlib_uncompress_chksum+0x1e>
        switch (d->checksum_type) {
 8013860:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013864:	2b01      	cmp	r3, #1
 8013866:	d016      	beq.n	8013896 <uzlib_uncompress_chksum+0x6a>
 8013868:	2b02      	cmp	r3, #2
 801386a:	d1ee      	bne.n	801384a <uzlib_uncompress_chksum+0x1e>
            val = tinf_get_le_uint32(d);
 801386c:	4620      	mov	r0, r4
 801386e:	f7ff fdfb 	bl	8013468 <tinf_get_le_uint32>
            if (~d->checksum != val) {
 8013872:	6a23      	ldr	r3, [r4, #32]
 8013874:	43db      	mvns	r3, r3
 8013876:	4283      	cmp	r3, r0
 8013878:	d113      	bne.n	80138a2 <uzlib_uncompress_chksum+0x76>
            val = tinf_get_le_uint32(d);
 801387a:	4620      	mov	r0, r4
 801387c:	f7ff fdf4 	bl	8013468 <tinf_get_le_uint32>
            break;
 8013880:	e7e3      	b.n	801384a <uzlib_uncompress_chksum+0x1e>
        d->checksum = uzlib_adler32(data, d->dest - data, d->checksum);
 8013882:	69a1      	ldr	r1, [r4, #24]
 8013884:	6a22      	ldr	r2, [r4, #32]
 8013886:	1b89      	subs	r1, r1, r6
 8013888:	4630      	mov	r0, r6
 801388a:	f7ff fb47 	bl	8012f1c <uzlib_adler32>
    if (res == TINF_DONE) {
 801388e:	2d01      	cmp	r5, #1
        d->checksum = uzlib_adler32(data, d->dest - data, d->checksum);
 8013890:	6220      	str	r0, [r4, #32]
    if (res == TINF_DONE) {
 8013892:	d1da      	bne.n	801384a <uzlib_uncompress_chksum+0x1e>
 8013894:	e7e4      	b.n	8013860 <uzlib_uncompress_chksum+0x34>
            val = tinf_get_be_uint32(d);
 8013896:	4620      	mov	r0, r4
 8013898:	f7ff fe0a 	bl	80134b0 <tinf_get_be_uint32>
            if (d->checksum != val) {
 801389c:	6a23      	ldr	r3, [r4, #32]
 801389e:	4283      	cmp	r3, r0
 80138a0:	d0d3      	beq.n	801384a <uzlib_uncompress_chksum+0x1e>
                return TINF_CHKSUM_ERROR;
 80138a2:	f06f 0503 	mvn.w	r5, #3
 80138a6:	e7d0      	b.n	801384a <uzlib_uncompress_chksum+0x1e>

080138a8 <ai_audio_model_get_report>:


AI_API_ENTRY
ai_bool ai_audio_model_get_report(
  ai_handle network, ai_network_report* report)
{
 80138a8:	b530      	push	{r4, r5, lr}
 80138aa:	460d      	mov	r5, r1
 80138ac:	b0a1      	sub	sp, #132	; 0x84
 80138ae:	4604      	mov	r4, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80138b0:	f000 fb80 	bl	8013fb4 <ai_platform_context_acquire>

  if (report && net_ctx)
 80138b4:	2d00      	cmp	r5, #0
 80138b6:	d039      	beq.n	801392c <ai_audio_model_get_report+0x84>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d033      	beq.n	8013924 <ai_audio_model_get_report+0x7c>
  {
    ai_network_report r = {
 80138bc:	226c      	movs	r2, #108	; 0x6c
 80138be:	2100      	movs	r1, #0
 80138c0:	a805      	add	r0, sp, #20
 80138c2:	f007 ff35 	bl	801b730 <memset>
 80138c6:	491b      	ldr	r1, [pc, #108]	; (8013934 <ai_audio_model_get_report+0x8c>)
 80138c8:	4b1b      	ldr	r3, [pc, #108]	; (8013938 <ai_audio_model_get_report+0x90>)
 80138ca:	4a1c      	ldr	r2, [pc, #112]	; (801393c <ai_audio_model_get_report+0x94>)
 80138cc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80138d0:	4b1b      	ldr	r3, [pc, #108]	; (8013940 <ai_audio_model_get_report+0x98>)
 80138d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
      .model_signature   = AI_AUDIO_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80138d6:	f000 fa63 	bl	8013da0 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80138da:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 80138dc:	f000 fa98 	bl	8013e10 <ai_platform_runtime_get_version>
    ai_network_report r = {
 80138e0:	4b18      	ldr	r3, [pc, #96]	; (8013944 <ai_audio_model_get_report+0x9c>)
 80138e2:	2208      	movs	r2, #8
 80138e4:	e9cd 0306 	strd	r0, r3, [sp, #24]
 80138e8:	2301      	movs	r3, #1
 80138ea:	f88d 2020 	strb.w	r2, [sp, #32]
 80138ee:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80138f2:	f000 fac7 	bl	8013e84 <ai_platform_api_get_version>
 80138f6:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80138f8:	f000 fb10 	bl	8013f1c <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80138fc:	4b12      	ldr	r3, [pc, #72]	; (8013948 <ai_audio_model_get_report+0xa0>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80138fe:	4602      	mov	r2, r0
    ai_network_report r = {
 8013900:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8013904:	4620      	mov	r0, r4
    ai_network_report r = {
 8013906:	4b11      	ldr	r3, [pc, #68]	; (801394c <ai_audio_model_get_report+0xa4>)
 8013908:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 801390a:	a901      	add	r1, sp, #4
 801390c:	f000 fdac 	bl	8014468 <ai_platform_api_get_network_report>
 8013910:	4604      	mov	r4, r0
 8013912:	b140      	cbz	r0, 8013926 <ai_audio_model_get_report+0x7e>

    *report = r;
 8013914:	227c      	movs	r2, #124	; 0x7c
 8013916:	a901      	add	r1, sp, #4
 8013918:	4628      	mov	r0, r5
 801391a:	f007 ffc0 	bl	801b89e <memcpy>
    return true;
  }
  return false;
}
 801391e:	4620      	mov	r0, r4
 8013920:	b021      	add	sp, #132	; 0x84
 8013922:	bd30      	pop	{r4, r5, pc}
  return false;
 8013924:	4604      	mov	r4, r0
}
 8013926:	4620      	mov	r0, r4
 8013928:	b021      	add	sp, #132	; 0x84
 801392a:	bd30      	pop	{r4, r5, pc}
  return false;
 801392c:	462c      	mov	r4, r5
}
 801392e:	4620      	mov	r0, r4
 8013930:	b021      	add	sp, #132	; 0x84
 8013932:	bd30      	pop	{r4, r5, pc}
 8013934:	08022bac 	.word	0x08022bac
 8013938:	08022bb8 	.word	0x08022bb8
 801393c:	08022bdc 	.word	0x08022bdc
 8013940:	08022bf8 	.word	0x08022bf8
 8013944:	08022158 	.word	0x08022158
 8013948:	0001e1ea 	.word	0x0001e1ea
 801394c:	a1facade 	.word	0xa1facade

08013950 <ai_audio_model_get_error>:

AI_API_ENTRY
ai_error ai_audio_model_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8013950:	f000 bb70 	b.w	8014034 <ai_platform_network_get_error>

08013954 <ai_audio_model_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_audio_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8013954:	b108      	cbz	r0, 801395a <ai_audio_model_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8013956:	f000 bbe1 	b.w	801411c <ai_platform_inputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801395a:	4802      	ldr	r0, [pc, #8]	; (8013964 <ai_audio_model_inputs_get+0x10>)
 801395c:	4b02      	ldr	r3, [pc, #8]	; (8013968 <ai_audio_model_inputs_get+0x14>)
 801395e:	6003      	str	r3, [r0, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8013960:	f000 bbdc 	b.w	801411c <ai_platform_inputs_get>
 8013964:	20000424 	.word	0x20000424
 8013968:	a1c00100 	.word	0xa1c00100

0801396c <ai_audio_model_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_audio_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 801396c:	b108      	cbz	r0, 8013972 <ai_audio_model_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 801396e:	f000 bcab 	b.w	80142c8 <ai_platform_outputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8013972:	4802      	ldr	r0, [pc, #8]	; (801397c <ai_audio_model_outputs_get+0x10>)
 8013974:	4b02      	ldr	r3, [pc, #8]	; (8013980 <ai_audio_model_outputs_get+0x14>)
 8013976:	6003      	str	r3, [r0, #0]
  return ai_platform_outputs_get(network, n_buffer);
 8013978:	f000 bca6 	b.w	80142c8 <ai_platform_outputs_get>
 801397c:	20000424 	.word	0x20000424
 8013980:	a1c00100 	.word	0xa1c00100

08013984 <ai_audio_model_init>:
}

AI_API_ENTRY
ai_bool ai_audio_model_init(
  ai_handle network, const ai_network_params* params)
{
 8013984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013988:	4607      	mov	r7, r0
 801398a:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 801398c:	f001 f902 	bl	8014b94 <ai_platform_network_init>
  if (!net_ctx) return false;
 8013990:	4604      	mov	r4, r0
 8013992:	2800      	cmp	r0, #0
 8013994:	d05d      	beq.n	8013a52 <ai_audio_model_init+0xce>
  if (ai_platform_get_weights_map(g_audio_model_weights_map, 1, params)) {
 8013996:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8013a78 <ai_audio_model_init+0xf4>
 801399a:	4632      	mov	r2, r6
 801399c:	2101      	movs	r1, #1
 801399e:	4640      	mov	r0, r8
 80139a0:	f000 f934 	bl	8013c0c <ai_platform_get_weights_map>
 80139a4:	4605      	mov	r5, r0
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d055      	beq.n	8013a56 <ai_audio_model_init+0xd2>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80139aa:	4b31      	ldr	r3, [pc, #196]	; (8013a70 <ai_audio_model_init+0xec>)
    conv2d_1_weights_array.data = AI_PTR(g_audio_model_weights_map[0] + 0);
 80139ac:	f8d8 2000 	ldr.w	r2, [r8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80139b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80139b2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80139b6:	64d9      	str	r1, [r3, #76]	; 0x4c
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80139b8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80139ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80139be:	65d9      	str	r1, [r3, #92]	; 0x5c
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80139c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80139c2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80139c6:	66d9      	str	r1, [r3, #108]	; 0x6c
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80139c8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80139ca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80139ce:	67d9      	str	r1, [r3, #124]	; 0x7c
    conv2d_1_bias_array.data = AI_PTR(g_audio_model_weights_map[0] + 512);
 80139d0:	f502 7100 	add.w	r1, r2, #512	; 0x200
    conv2d_1_weights_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 0);
 80139d4:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    conv2d_1_bias_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 512);
 80139d8:	e9c3 1119 	strd	r1, r1, [r3, #100]	; 0x64
    dense_4_weights_array.data = AI_PTR(g_audio_model_weights_map[0] + 544);
 80139dc:	f502 7108 	add.w	r1, r2, #544	; 0x220
    dense_4_bias_array.data = AI_PTR(g_audio_model_weights_map[0] + 832);
 80139e0:	f502 7250 	add.w	r2, r2, #832	; 0x340
    dense_4_weights_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 544);
 80139e4:	e9c3 111d 	strd	r1, r1, [r3, #116]	; 0x74
    dense_4_bias_array.data_start = AI_PTR(g_audio_model_weights_map[0] + 832);
 80139e8:	e9c3 2221 	strd	r2, r2, [r3, #132]	; 0x84
  if (ai_platform_get_activations_map(g_audio_model_activations_map, 1, params)) {
 80139ec:	4632      	mov	r2, r6
 80139ee:	4821      	ldr	r0, [pc, #132]	; (8013a74 <ai_audio_model_init+0xf0>)
 80139f0:	2101      	movs	r1, #1
 80139f2:	f000 f95f 	bl	8013cb4 <ai_platform_get_activations_map>
 80139f6:	4606      	mov	r6, r0
 80139f8:	b398      	cbz	r0, 8013a62 <ai_audio_model_init+0xde>
    serving_default_input_10_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 0);
 80139fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80139fe:	4b1c      	ldr	r3, [pc, #112]	; (8013a70 <ai_audio_model_init+0xec>)
    serving_default_input_10_0_conversion_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 15996);
 8013a00:	f502 5179 	add.w	r1, r2, #15936	; 0x3e40
 8013a04:	313c      	adds	r1, #60	; 0x3c
    serving_default_input_10_0_conversion_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 15996);
 8013a06:	e9c3 1129 	strd	r1, r1, [r3, #164]	; 0xa4
    upsample_0_0_conversion_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 4096);
 8013a0a:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    upsample_0_0_conversion_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 4096);
 8013a0e:	e9c3 1131 	strd	r1, r1, [r3, #196]	; 0xc4
    conv2d_1_scratch1_array.data = AI_PTR(g_audio_model_activations_map[0] + 1360);
 8013a12:	f502 61aa 	add.w	r1, r2, #1360	; 0x550
    conv2d_1_scratch1_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 1360);
 8013a16:	e9c3 1139 	strd	r1, r1, [r3, #228]	; 0xe4
    conv2d_1_scratch2_array.data = AI_PTR(g_audio_model_activations_map[0] + 1568);
 8013a1a:	f502 61c4 	add.w	r1, r2, #1568	; 0x620
    serving_default_input_10_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8013a1e:	e9c3 2225 	strd	r2, r2, [r3, #148]	; 0x94
    upsample_0_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8013a22:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4
    conv2d_1_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8013a26:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4
    dense_4_scratch0_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8013a2a:	e9c3 2245 	strd	r2, r2, [r3, #276]	; 0x114
    nl_5_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 0);
 8013a2e:	e9c3 224d 	strd	r2, r2, [r3, #308]	; 0x134
    conv2d_1_scratch2_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 1568);
 8013a32:	e9c3 113d 	strd	r1, r1, [r3, #244]	; 0xf4
    conv2d_1_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 1776);
 8013a36:	f502 61de 	add.w	r1, r2, #1776	; 0x6f0
    dense_4_output_array.data = AI_PTR(g_audio_model_activations_map[0] + 576);
 8013a3a:	f502 7210 	add.w	r2, r2, #576	; 0x240
    conv2d_1_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 1776);
 8013a3e:	e9c3 1141 	strd	r1, r1, [r3, #260]	; 0x104
    dense_4_output_array.data_start = AI_PTR(g_audio_model_activations_map[0] + 576);
 8013a42:	e9c3 2249 	strd	r2, r2, [r3, #292]	; 0x124

  ai_bool ok = true;
  ok &= audio_model_configure_weights(net_ctx, params);
  ok &= audio_model_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8013a46:	4638      	mov	r0, r7
 8013a48:	f001 f992 	bl	8014d70 <ai_platform_network_post_init>
 8013a4c:	4030      	ands	r0, r6
 8013a4e:	4005      	ands	r5, r0
 8013a50:	b2e8      	uxtb	r0, r5

  return ok;
}
 8013a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8013a56:	2212      	movs	r2, #18
 8013a58:	2130      	movs	r1, #48	; 0x30
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f000 fb58 	bl	8014110 <ai_platform_network_set_error>
  return false;
 8013a60:	e7c4      	b.n	80139ec <ai_audio_model_init+0x68>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8013a62:	2213      	movs	r2, #19
 8013a64:	4620      	mov	r0, r4
 8013a66:	2130      	movs	r1, #48	; 0x30
 8013a68:	f000 fb52 	bl	8014110 <ai_platform_network_set_error>
  return false;
 8013a6c:	e7eb      	b.n	8013a46 <ai_audio_model_init+0xc2>
 8013a6e:	bf00      	nop
 8013a70:	20000424 	.word	0x20000424
 8013a74:	20002c5c 	.word	0x20002c5c
 8013a78:	20002c58 	.word	0x20002c58

08013a7c <ai_audio_model_create_and_init>:
{
 8013a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a80:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 8013a82:	2300      	movs	r3, #0
 8013a84:	2405      	movs	r4, #5
 8013a86:	9301      	str	r3, [sp, #4]
 8013a88:	9400      	str	r4, [sp, #0]
{
 8013a8a:	460e      	mov	r6, r1
 8013a8c:	4615      	mov	r5, r2
  return ai_platform_network_create(
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4a26      	ldr	r2, [pc, #152]	; (8013b2c <ai_audio_model_create_and_init+0xb0>)
 8013a92:	2301      	movs	r3, #1
{
 8013a94:	4680      	mov	r8, r0
  return ai_platform_network_create(
 8013a96:	f000 ffa7 	bl	80149e8 <ai_platform_network_create>
    if (err.type != AI_ERROR_NONE)
 8013a9a:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
  return ai_platform_network_create(
 8013a9e:	4607      	mov	r7, r0
    if (err.type != AI_ERROR_NONE)
 8013aa0:	d003      	beq.n	8013aaa <ai_audio_model_create_and_init+0x2e>
}
 8013aa2:	4638      	mov	r0, r7
 8013aa4:	b011      	add	sp, #68	; 0x44
 8013aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ai_audio_model_data_params_get(&params) != true) {
 8013aaa:	a802      	add	r0, sp, #8
 8013aac:	f000 f842 	bl	8013b34 <ai_audio_model_data_params_get>
 8013ab0:	b3a8      	cbz	r0, 8013b1e <ai_audio_model_create_and_init+0xa2>
    if (activations) {
 8013ab2:	b17e      	cbz	r6, 8013ad4 <ai_audio_model_create_and_init+0x58>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8013ab4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013ab8:	b163      	cbz	r3, 8013ad4 <ai_audio_model_create_and_init+0x58>
 8013aba:	3e04      	subs	r6, #4
 8013abc:	464c      	mov	r4, r9
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8013abe:	4621      	mov	r1, r4
 8013ac0:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8013ac4:	a805      	add	r0, sp, #20
 8013ac6:	f000 f88d 	bl	8013be4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8013aca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013ace:	3401      	adds	r4, #1
 8013ad0:	42a3      	cmp	r3, r4
 8013ad2:	dcf4      	bgt.n	8013abe <ai_audio_model_create_and_init+0x42>
    if (weights) {
 8013ad4:	b17d      	cbz	r5, 8013af6 <ai_audio_model_create_and_init+0x7a>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8013ad6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013ada:	b163      	cbz	r3, 8013af6 <ai_audio_model_create_and_init+0x7a>
 8013adc:	3d04      	subs	r5, #4
 8013ade:	2400      	movs	r4, #0
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8013ae6:	a803      	add	r0, sp, #12
 8013ae8:	f000 f87c 	bl	8013be4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8013aec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013af0:	3401      	adds	r4, #1
 8013af2:	42a3      	cmp	r3, r4
 8013af4:	dcf4      	bgt.n	8013ae0 <ai_audio_model_create_and_init+0x64>
    if (ai_audio_model_init(*network, &params) != true) {
 8013af6:	f8d8 0000 	ldr.w	r0, [r8]
 8013afa:	a902      	add	r1, sp, #8
 8013afc:	f7ff ff42 	bl	8013984 <ai_audio_model_init>
 8013b00:	b128      	cbz	r0, 8013b0e <ai_audio_model_create_and_init+0x92>
    return err;
 8013b02:	f369 0707 	bfi	r7, r9, #0, #8
}
 8013b06:	4638      	mov	r0, r7
 8013b08:	b011      	add	sp, #68	; 0x44
 8013b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8013b0e:	f8d8 0000 	ldr.w	r0, [r8]
 8013b12:	f000 fa8f 	bl	8014034 <ai_platform_network_get_error>
 8013b16:	fa5f f980 	uxtb.w	r9, r0
 8013b1a:	4607      	mov	r7, r0
 8013b1c:	e7f1      	b.n	8013b02 <ai_audio_model_create_and_init+0x86>
 8013b1e:	f8d8 0000 	ldr.w	r0, [r8]
 8013b22:	f000 fa87 	bl	8014034 <ai_platform_network_get_error>
 8013b26:	4607      	mov	r7, r0
        return err;
 8013b28:	e7bb      	b.n	8013aa2 <ai_audio_model_create_and_init+0x26>
 8013b2a:	bf00      	nop
 8013b2c:	20000424 	.word	0x20000424

08013b30 <ai_audio_model_run>:

AI_API_ENTRY
ai_i32 ai_audio_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8013b30:	f001 b9a6 	b.w	8014e80 <ai_platform_network_process>

08013b34 <ai_audio_model_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_audio_model_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8013b34:	4603      	mov	r3, r0
 8013b36:	b198      	cbz	r0, 8013b60 <ai_audio_model_data_params_get+0x2c>
{
 8013b38:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 8013b3a:	4c0a      	ldr	r4, [pc, #40]	; (8013b64 <ai_audio_model_data_params_get+0x30>)
 8013b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
{
 8013b40:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 8013b42:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AUDIO_MODEL_DATA_ACTIVATIONS_COUNT, g_audio_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8013b44:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 8013b46:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8013b4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b4e:	ac02      	add	r4, sp, #8
 8013b50:	e884 0003 	stmia.w	r4, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AUDIO_MODEL_DATA_WEIGHTS_COUNT, g_audio_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8013b54:	4621      	mov	r1, r4
 8013b56:	4618      	mov	r0, r3
 8013b58:	f000 f900 	bl	8013d5c <ai_platform_bind_network_params>
}
 8013b5c:	b004      	add	sp, #16
 8013b5e:	bd10      	pop	{r4, pc}
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	08020488 	.word	0x08020488

08013b68 <ai_buffer_get_size>:
 8013b68:	b378      	cbz	r0, 8013bca <ai_buffer_get_size+0x62>
 8013b6a:	b410      	push	{r4}
 8013b6c:	6803      	ldr	r3, [r0, #0]
 8013b6e:	4a17      	ldr	r2, [pc, #92]	; (8013bcc <ai_buffer_get_size+0x64>)
 8013b70:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8013b74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013b78:	4293      	cmp	r3, r2
 8013b7a:	d01e      	beq.n	8013bba <ai_buffer_get_size+0x52>
 8013b7c:	6984      	ldr	r4, [r0, #24]
 8013b7e:	6862      	ldr	r2, [r4, #4]
 8013b80:	7d03      	ldrb	r3, [r0, #20]
 8013b82:	6941      	ldr	r1, [r0, #20]
 8013b84:	f1a3 0301 	sub.w	r3, r3, #1
 8013b88:	fab3 f383 	clz	r3, r3
 8013b8c:	095b      	lsrs	r3, r3, #5
 8013b8e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8013b92:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8013b96:	da0b      	bge.n	8013bb0 <ai_buffer_get_size+0x48>
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d102      	bne.n	8013ba2 <ai_buffer_get_size+0x3a>
 8013b9c:	2802      	cmp	r0, #2
 8013b9e:	d007      	beq.n	8013bb0 <ai_buffer_get_size+0x48>
 8013ba0:	2302      	movs	r3, #2
 8013ba2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	4298      	cmp	r0, r3
 8013baa:	fb01 f202 	mul.w	r2, r1, r2
 8013bae:	d1f3      	bne.n	8013b98 <ai_buffer_get_size+0x30>
 8013bb0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8013bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bb8:	4770      	bx	lr
 8013bba:	2900      	cmp	r1, #0
 8013bbc:	d0de      	beq.n	8013b7c <ai_buffer_get_size+0x14>
 8013bbe:	6984      	ldr	r4, [r0, #24]
 8013bc0:	6863      	ldr	r3, [r4, #4]
 8013bc2:	331f      	adds	r3, #31
 8013bc4:	f023 021f 	bic.w	r2, r3, #31
 8013bc8:	e7da      	b.n	8013b80 <ai_buffer_get_size+0x18>
 8013bca:	4770      	bx	lr
 8013bcc:	000400c0 	.word	0x000400c0

08013bd0 <ai_buffer_array_sane>:
 8013bd0:	b138      	cbz	r0, 8013be2 <ai_buffer_array_sane+0x12>
 8013bd2:	6843      	ldr	r3, [r0, #4]
 8013bd4:	b123      	cbz	r3, 8013be0 <ai_buffer_array_sane+0x10>
 8013bd6:	8840      	ldrh	r0, [r0, #2]
 8013bd8:	3800      	subs	r0, #0
 8013bda:	bf18      	it	ne
 8013bdc:	2001      	movne	r0, #1
 8013bde:	4770      	bx	lr
 8013be0:	4618      	mov	r0, r3
 8013be2:	4770      	bx	lr

08013be4 <ai_buffer_array_item_set_address>:
 8013be4:	b150      	cbz	r0, 8013bfc <ai_buffer_array_item_set_address+0x18>
 8013be6:	6843      	ldr	r3, [r0, #4]
 8013be8:	b14b      	cbz	r3, 8013bfe <ai_buffer_array_item_set_address+0x1a>
 8013bea:	8840      	ldrh	r0, [r0, #2]
 8013bec:	b900      	cbnz	r0, 8013bf0 <ai_buffer_array_item_set_address+0xc>
 8013bee:	4770      	bx	lr
 8013bf0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013bf4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	604a      	str	r2, [r1, #4]
 8013bfc:	4770      	bx	lr
 8013bfe:	4618      	mov	r0, r3
 8013c00:	4770      	bx	lr
 8013c02:	bf00      	nop

08013c04 <_ai_platform_acquire_crc>:
 8013c04:	2001      	movs	r0, #1
 8013c06:	4770      	bx	lr

08013c08 <_ai_platform_release_crc>:
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop

08013c0c <ai_platform_get_weights_map>:
 8013c0c:	2a00      	cmp	r2, #0
 8013c0e:	d037      	beq.n	8013c80 <ai_platform_get_weights_map+0x74>
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	4604      	mov	r4, r0
 8013c14:	b1a0      	cbz	r0, 8013c40 <ai_platform_get_weights_map+0x34>
 8013c16:	460f      	mov	r7, r1
 8013c18:	b191      	cbz	r1, 8013c40 <ai_platform_get_weights_map+0x34>
 8013c1a:	4b25      	ldr	r3, [pc, #148]	; (8013cb0 <ai_platform_get_weights_map+0xa4>)
 8013c1c:	6810      	ldr	r0, [r2, #0]
 8013c1e:	4298      	cmp	r0, r3
 8013c20:	4615      	mov	r5, r2
 8013c22:	d00f      	beq.n	8013c44 <ai_platform_get_weights_map+0x38>
 8013c24:	6855      	ldr	r5, [r2, #4]
 8013c26:	b15d      	cbz	r5, 8013c40 <ai_platform_get_weights_map+0x34>
 8013c28:	682e      	ldr	r6, [r5, #0]
 8013c2a:	429e      	cmp	r6, r3
 8013c2c:	d02a      	beq.n	8013c84 <ai_platform_get_weights_map+0x78>
 8013c2e:	f1a1 0001 	sub.w	r0, r1, #1
 8013c32:	6025      	str	r5, [r4, #0]
 8013c34:	fab0 f080 	clz	r0, r0
 8013c38:	0940      	lsrs	r0, r0, #5
 8013c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c3c:	42a7      	cmp	r7, r4
 8013c3e:	d034      	beq.n	8013caa <ai_platform_get_weights_map+0x9e>
 8013c40:	2000      	movs	r0, #0
 8013c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c44:	1d10      	adds	r0, r2, #4
 8013c46:	f7ff ffc3 	bl	8013bd0 <ai_buffer_array_sane>
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d0f8      	beq.n	8013c40 <ai_platform_get_weights_map+0x34>
 8013c4e:	88eb      	ldrh	r3, [r5, #6]
 8013c50:	429f      	cmp	r7, r3
 8013c52:	d1f5      	bne.n	8013c40 <ai_platform_get_weights_map+0x34>
 8013c54:	f04f 0e00 	mov.w	lr, #0
 8013c58:	1f23      	subs	r3, r4, #4
 8013c5a:	4670      	mov	r0, lr
 8013c5c:	68aa      	ldr	r2, [r5, #8]
 8013c5e:	eb02 0c0e 	add.w	ip, r2, lr
 8013c62:	f10e 0e1c 	add.w	lr, lr, #28
 8013c66:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013c6a:	b124      	cbz	r4, 8013c76 <ai_platform_get_weights_map+0x6a>
 8013c6c:	3001      	adds	r0, #1
 8013c6e:	4287      	cmp	r7, r0
 8013c70:	f843 4f04 	str.w	r4, [r3, #4]!
 8013c74:	d1f2      	bne.n	8013c5c <ai_platform_get_weights_map+0x50>
 8013c76:	1a38      	subs	r0, r7, r0
 8013c78:	fab0 f080 	clz	r0, r0
 8013c7c:	0940      	lsrs	r0, r0, #5
 8013c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c80:	2000      	movs	r0, #0
 8013c82:	4770      	bx	lr
 8013c84:	1f23      	subs	r3, r4, #4
 8013c86:	4628      	mov	r0, r5
 8013c88:	2400      	movs	r4, #0
 8013c8a:	e000      	b.n	8013c8e <ai_platform_get_weights_map+0x82>
 8013c8c:	4614      	mov	r4, r2
 8013c8e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8013c92:	42b2      	cmp	r2, r6
 8013c94:	d0d2      	beq.n	8013c3c <ai_platform_get_weights_map+0x30>
 8013c96:	f843 2f04 	str.w	r2, [r3, #4]!
 8013c9a:	1c62      	adds	r2, r4, #1
 8013c9c:	4297      	cmp	r7, r2
 8013c9e:	d1f5      	bne.n	8013c8c <ai_platform_get_weights_map+0x80>
 8013ca0:	3402      	adds	r4, #2
 8013ca2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013ca6:	42b3      	cmp	r3, r6
 8013ca8:	d1ca      	bne.n	8013c40 <ai_platform_get_weights_map+0x34>
 8013caa:	2001      	movs	r0, #1
 8013cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	a1facade 	.word	0xa1facade

08013cb4 <ai_platform_get_activations_map>:
 8013cb4:	2a00      	cmp	r2, #0
 8013cb6:	d038      	beq.n	8013d2a <ai_platform_get_activations_map+0x76>
 8013cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cba:	4604      	mov	r4, r0
 8013cbc:	b1a0      	cbz	r0, 8013ce8 <ai_platform_get_activations_map+0x34>
 8013cbe:	460f      	mov	r7, r1
 8013cc0:	b191      	cbz	r1, 8013ce8 <ai_platform_get_activations_map+0x34>
 8013cc2:	4b25      	ldr	r3, [pc, #148]	; (8013d58 <ai_platform_get_activations_map+0xa4>)
 8013cc4:	6810      	ldr	r0, [r2, #0]
 8013cc6:	4298      	cmp	r0, r3
 8013cc8:	4615      	mov	r5, r2
 8013cca:	d00f      	beq.n	8013cec <ai_platform_get_activations_map+0x38>
 8013ccc:	6a15      	ldr	r5, [r2, #32]
 8013cce:	b15d      	cbz	r5, 8013ce8 <ai_platform_get_activations_map+0x34>
 8013cd0:	682e      	ldr	r6, [r5, #0]
 8013cd2:	429e      	cmp	r6, r3
 8013cd4:	d02b      	beq.n	8013d2e <ai_platform_get_activations_map+0x7a>
 8013cd6:	f1a1 0001 	sub.w	r0, r1, #1
 8013cda:	6025      	str	r5, [r4, #0]
 8013cdc:	fab0 f080 	clz	r0, r0
 8013ce0:	0940      	lsrs	r0, r0, #5
 8013ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ce4:	42a7      	cmp	r7, r4
 8013ce6:	d035      	beq.n	8013d54 <ai_platform_get_activations_map+0xa0>
 8013ce8:	2000      	movs	r0, #0
 8013cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cec:	f102 000c 	add.w	r0, r2, #12
 8013cf0:	f7ff ff6e 	bl	8013bd0 <ai_buffer_array_sane>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d0f7      	beq.n	8013ce8 <ai_platform_get_activations_map+0x34>
 8013cf8:	89eb      	ldrh	r3, [r5, #14]
 8013cfa:	429f      	cmp	r7, r3
 8013cfc:	d1f4      	bne.n	8013ce8 <ai_platform_get_activations_map+0x34>
 8013cfe:	f04f 0e00 	mov.w	lr, #0
 8013d02:	1f23      	subs	r3, r4, #4
 8013d04:	4670      	mov	r0, lr
 8013d06:	692a      	ldr	r2, [r5, #16]
 8013d08:	eb02 0c0e 	add.w	ip, r2, lr
 8013d0c:	f10e 0e1c 	add.w	lr, lr, #28
 8013d10:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013d14:	b124      	cbz	r4, 8013d20 <ai_platform_get_activations_map+0x6c>
 8013d16:	3001      	adds	r0, #1
 8013d18:	4287      	cmp	r7, r0
 8013d1a:	f843 4f04 	str.w	r4, [r3, #4]!
 8013d1e:	d1f2      	bne.n	8013d06 <ai_platform_get_activations_map+0x52>
 8013d20:	1a38      	subs	r0, r7, r0
 8013d22:	fab0 f080 	clz	r0, r0
 8013d26:	0940      	lsrs	r0, r0, #5
 8013d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	4770      	bx	lr
 8013d2e:	1f23      	subs	r3, r4, #4
 8013d30:	4628      	mov	r0, r5
 8013d32:	2400      	movs	r4, #0
 8013d34:	e000      	b.n	8013d38 <ai_platform_get_activations_map+0x84>
 8013d36:	4614      	mov	r4, r2
 8013d38:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8013d3c:	42b2      	cmp	r2, r6
 8013d3e:	d0d1      	beq.n	8013ce4 <ai_platform_get_activations_map+0x30>
 8013d40:	f843 2f04 	str.w	r2, [r3, #4]!
 8013d44:	1c62      	adds	r2, r4, #1
 8013d46:	4297      	cmp	r7, r2
 8013d48:	d1f5      	bne.n	8013d36 <ai_platform_get_activations_map+0x82>
 8013d4a:	3402      	adds	r4, #2
 8013d4c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013d50:	42b3      	cmp	r3, r6
 8013d52:	d1c9      	bne.n	8013ce8 <ai_platform_get_activations_map+0x34>
 8013d54:	2001      	movs	r0, #1
 8013d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d58:	a1facade 	.word	0xa1facade

08013d5c <ai_platform_bind_network_params>:
 8013d5c:	b1a0      	cbz	r0, 8013d88 <ai_platform_bind_network_params+0x2c>
 8013d5e:	b1b1      	cbz	r1, 8013d8e <ai_platform_bind_network_params+0x32>
 8013d60:	b1c2      	cbz	r2, 8013d94 <ai_platform_bind_network_params+0x38>
 8013d62:	b410      	push	{r4}
 8013d64:	4603      	mov	r3, r0
 8013d66:	4c0d      	ldr	r4, [pc, #52]	; (8013d9c <ai_platform_bind_network_params+0x40>)
 8013d68:	f843 4b04 	str.w	r4, [r3], #4
 8013d6c:	f100 0c0c 	add.w	ip, r0, #12
 8013d70:	c903      	ldmia	r1, {r0, r1}
 8013d72:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d7a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d7e:	2301      	movs	r3, #1
 8013d80:	4618      	mov	r0, r3
 8013d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d86:	4770      	bx	lr
 8013d88:	4603      	mov	r3, r0
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	4770      	bx	lr
 8013d8e:	460b      	mov	r3, r1
 8013d90:	4618      	mov	r0, r3
 8013d92:	4770      	bx	lr
 8013d94:	4613      	mov	r3, r2
 8013d96:	4618      	mov	r0, r3
 8013d98:	4770      	bx	lr
 8013d9a:	bf00      	nop
 8013d9c:	a1facade 	.word	0xa1facade

08013da0 <ai_platform_runtime_get_revision>:
 8013da0:	b508      	push	{r3, lr}
 8013da2:	f7ff ff2f 	bl	8013c04 <_ai_platform_acquire_crc>
 8013da6:	4b14      	ldr	r3, [pc, #80]	; (8013df8 <ai_platform_runtime_get_revision+0x58>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013db2:	d010      	beq.n	8013dd6 <ai_platform_runtime_get_revision+0x36>
 8013db4:	4a11      	ldr	r2, [pc, #68]	; (8013dfc <ai_platform_runtime_get_revision+0x5c>)
 8013db6:	2301      	movs	r3, #1
 8013db8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013dbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d1fb      	bne.n	8013dbc <ai_platform_runtime_get_revision+0x1c>
 8013dc4:	4b0e      	ldr	r3, [pc, #56]	; (8013e00 <ai_platform_runtime_get_revision+0x60>)
 8013dc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013dca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013dce:	4b0d      	ldr	r3, [pc, #52]	; (8013e04 <ai_platform_runtime_get_revision+0x64>)
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d00c      	beq.n	8013dee <ai_platform_runtime_get_revision+0x4e>
 8013dd4:	e7fe      	b.n	8013dd4 <ai_platform_runtime_get_revision+0x34>
 8013dd6:	4a0c      	ldr	r2, [pc, #48]	; (8013e08 <ai_platform_runtime_get_revision+0x68>)
 8013dd8:	2301      	movs	r3, #1
 8013dda:	6093      	str	r3, [r2, #8]
 8013ddc:	6893      	ldr	r3, [r2, #8]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1fc      	bne.n	8013ddc <ai_platform_runtime_get_revision+0x3c>
 8013de2:	4b07      	ldr	r3, [pc, #28]	; (8013e00 <ai_platform_runtime_get_revision+0x60>)
 8013de4:	6013      	str	r3, [r2, #0]
 8013de6:	6812      	ldr	r2, [r2, #0]
 8013de8:	4b06      	ldr	r3, [pc, #24]	; (8013e04 <ai_platform_runtime_get_revision+0x64>)
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d103      	bne.n	8013df6 <ai_platform_runtime_get_revision+0x56>
 8013dee:	f7ff ff0b 	bl	8013c08 <_ai_platform_release_crc>
 8013df2:	4806      	ldr	r0, [pc, #24]	; (8013e0c <ai_platform_runtime_get_revision+0x6c>)
 8013df4:	bd08      	pop	{r3, pc}
 8013df6:	e7fe      	b.n	8013df6 <ai_platform_runtime_get_revision+0x56>
 8013df8:	e0042000 	.word	0xe0042000
 8013dfc:	58024000 	.word	0x58024000
 8013e00:	f407a5c2 	.word	0xf407a5c2
 8013e04:	b5e8b5cd 	.word	0xb5e8b5cd
 8013e08:	40023000 	.word	0x40023000
 8013e0c:	08022158 	.word	0x08022158

08013e10 <ai_platform_runtime_get_version>:
 8013e10:	b500      	push	{lr}
 8013e12:	b083      	sub	sp, #12
 8013e14:	f7ff fef6 	bl	8013c04 <_ai_platform_acquire_crc>
 8013e18:	4b15      	ldr	r3, [pc, #84]	; (8013e70 <ai_platform_runtime_get_version+0x60>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e24:	d010      	beq.n	8013e48 <ai_platform_runtime_get_version+0x38>
 8013e26:	4a13      	ldr	r2, [pc, #76]	; (8013e74 <ai_platform_runtime_get_version+0x64>)
 8013e28:	2301      	movs	r3, #1
 8013e2a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013e2e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d1fb      	bne.n	8013e2e <ai_platform_runtime_get_version+0x1e>
 8013e36:	4b10      	ldr	r3, [pc, #64]	; (8013e78 <ai_platform_runtime_get_version+0x68>)
 8013e38:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013e3c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013e40:	4b0e      	ldr	r3, [pc, #56]	; (8013e7c <ai_platform_runtime_get_version+0x6c>)
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d00c      	beq.n	8013e60 <ai_platform_runtime_get_version+0x50>
 8013e46:	e7fe      	b.n	8013e46 <ai_platform_runtime_get_version+0x36>
 8013e48:	4a0d      	ldr	r2, [pc, #52]	; (8013e80 <ai_platform_runtime_get_version+0x70>)
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	6093      	str	r3, [r2, #8]
 8013e4e:	6893      	ldr	r3, [r2, #8]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d1fc      	bne.n	8013e4e <ai_platform_runtime_get_version+0x3e>
 8013e54:	4b08      	ldr	r3, [pc, #32]	; (8013e78 <ai_platform_runtime_get_version+0x68>)
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	6812      	ldr	r2, [r2, #0]
 8013e5a:	4b08      	ldr	r3, [pc, #32]	; (8013e7c <ai_platform_runtime_get_version+0x6c>)
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d105      	bne.n	8013e6c <ai_platform_runtime_get_version+0x5c>
 8013e60:	f7ff fed2 	bl	8013c08 <_ai_platform_release_crc>
 8013e64:	2008      	movs	r0, #8
 8013e66:	b003      	add	sp, #12
 8013e68:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e6c:	e7fe      	b.n	8013e6c <ai_platform_runtime_get_version+0x5c>
 8013e6e:	bf00      	nop
 8013e70:	e0042000 	.word	0xe0042000
 8013e74:	58024000 	.word	0x58024000
 8013e78:	f407a5c2 	.word	0xf407a5c2
 8013e7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8013e80:	40023000 	.word	0x40023000

08013e84 <ai_platform_api_get_version>:
 8013e84:	b500      	push	{lr}
 8013e86:	b083      	sub	sp, #12
 8013e88:	f7ff febc 	bl	8013c04 <_ai_platform_acquire_crc>
 8013e8c:	4b1d      	ldr	r3, [pc, #116]	; (8013f04 <ai_platform_api_get_version+0x80>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e98:	d010      	beq.n	8013ebc <ai_platform_api_get_version+0x38>
 8013e9a:	4a1b      	ldr	r2, [pc, #108]	; (8013f08 <ai_platform_api_get_version+0x84>)
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013ea2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1fb      	bne.n	8013ea2 <ai_platform_api_get_version+0x1e>
 8013eaa:	4b18      	ldr	r3, [pc, #96]	; (8013f0c <ai_platform_api_get_version+0x88>)
 8013eac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013eb0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013eb4:	4b16      	ldr	r3, [pc, #88]	; (8013f10 <ai_platform_api_get_version+0x8c>)
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d00c      	beq.n	8013ed4 <ai_platform_api_get_version+0x50>
 8013eba:	e7fe      	b.n	8013eba <ai_platform_api_get_version+0x36>
 8013ebc:	4a15      	ldr	r2, [pc, #84]	; (8013f14 <ai_platform_api_get_version+0x90>)
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	6093      	str	r3, [r2, #8]
 8013ec2:	6893      	ldr	r3, [r2, #8]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d1fc      	bne.n	8013ec2 <ai_platform_api_get_version+0x3e>
 8013ec8:	4b10      	ldr	r3, [pc, #64]	; (8013f0c <ai_platform_api_get_version+0x88>)
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	6812      	ldr	r2, [r2, #0]
 8013ece:	4b10      	ldr	r3, [pc, #64]	; (8013f10 <ai_platform_api_get_version+0x8c>)
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d115      	bne.n	8013f00 <ai_platform_api_get_version+0x7c>
 8013ed4:	f7ff fe98 	bl	8013c08 <_ai_platform_release_crc>
 8013ed8:	4b0f      	ldr	r3, [pc, #60]	; (8013f18 <ai_platform_api_get_version+0x94>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2000      	movs	r0, #0
 8013ede:	b2da      	uxtb	r2, r3
 8013ee0:	f362 0007 	bfi	r0, r2, #0, #8
 8013ee4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013ee8:	f362 200f 	bfi	r0, r2, #8, #8
 8013eec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013ef0:	f362 4017 	bfi	r0, r2, #16, #8
 8013ef4:	0e1b      	lsrs	r3, r3, #24
 8013ef6:	f363 601f 	bfi	r0, r3, #24, #8
 8013efa:	b003      	add	sp, #12
 8013efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f00:	e7fe      	b.n	8013f00 <ai_platform_api_get_version+0x7c>
 8013f02:	bf00      	nop
 8013f04:	e0042000 	.word	0xe0042000
 8013f08:	58024000 	.word	0x58024000
 8013f0c:	f407a5c2 	.word	0xf407a5c2
 8013f10:	b5e8b5cd 	.word	0xb5e8b5cd
 8013f14:	40023000 	.word	0x40023000
 8013f18:	08022c10 	.word	0x08022c10

08013f1c <ai_platform_interface_api_get_version>:
 8013f1c:	b500      	push	{lr}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	f7ff fe70 	bl	8013c04 <_ai_platform_acquire_crc>
 8013f24:	4b1d      	ldr	r3, [pc, #116]	; (8013f9c <ai_platform_interface_api_get_version+0x80>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013f30:	d010      	beq.n	8013f54 <ai_platform_interface_api_get_version+0x38>
 8013f32:	4a1b      	ldr	r2, [pc, #108]	; (8013fa0 <ai_platform_interface_api_get_version+0x84>)
 8013f34:	2301      	movs	r3, #1
 8013f36:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013f3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1fb      	bne.n	8013f3a <ai_platform_interface_api_get_version+0x1e>
 8013f42:	4b18      	ldr	r3, [pc, #96]	; (8013fa4 <ai_platform_interface_api_get_version+0x88>)
 8013f44:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013f48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013f4c:	4b16      	ldr	r3, [pc, #88]	; (8013fa8 <ai_platform_interface_api_get_version+0x8c>)
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d00c      	beq.n	8013f6c <ai_platform_interface_api_get_version+0x50>
 8013f52:	e7fe      	b.n	8013f52 <ai_platform_interface_api_get_version+0x36>
 8013f54:	4a15      	ldr	r2, [pc, #84]	; (8013fac <ai_platform_interface_api_get_version+0x90>)
 8013f56:	2301      	movs	r3, #1
 8013f58:	6093      	str	r3, [r2, #8]
 8013f5a:	6893      	ldr	r3, [r2, #8]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1fc      	bne.n	8013f5a <ai_platform_interface_api_get_version+0x3e>
 8013f60:	4b10      	ldr	r3, [pc, #64]	; (8013fa4 <ai_platform_interface_api_get_version+0x88>)
 8013f62:	6013      	str	r3, [r2, #0]
 8013f64:	6812      	ldr	r2, [r2, #0]
 8013f66:	4b10      	ldr	r3, [pc, #64]	; (8013fa8 <ai_platform_interface_api_get_version+0x8c>)
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d115      	bne.n	8013f98 <ai_platform_interface_api_get_version+0x7c>
 8013f6c:	f7ff fe4c 	bl	8013c08 <_ai_platform_release_crc>
 8013f70:	4b0f      	ldr	r3, [pc, #60]	; (8013fb0 <ai_platform_interface_api_get_version+0x94>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	2000      	movs	r0, #0
 8013f76:	b2da      	uxtb	r2, r3
 8013f78:	f362 0007 	bfi	r0, r2, #0, #8
 8013f7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013f80:	f362 200f 	bfi	r0, r2, #8, #8
 8013f84:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013f88:	f362 4017 	bfi	r0, r2, #16, #8
 8013f8c:	0e1b      	lsrs	r3, r3, #24
 8013f8e:	f363 601f 	bfi	r0, r3, #24, #8
 8013f92:	b003      	add	sp, #12
 8013f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f98:	e7fe      	b.n	8013f98 <ai_platform_interface_api_get_version+0x7c>
 8013f9a:	bf00      	nop
 8013f9c:	e0042000 	.word	0xe0042000
 8013fa0:	58024000 	.word	0x58024000
 8013fa4:	f407a5c2 	.word	0xf407a5c2
 8013fa8:	b5e8b5cd 	.word	0xb5e8b5cd
 8013fac:	40023000 	.word	0x40023000
 8013fb0:	08022c14 	.word	0x08022c14

08013fb4 <ai_platform_context_acquire>:
 8013fb4:	b510      	push	{r4, lr}
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	b120      	cbz	r0, 8013fc4 <ai_platform_context_acquire+0x10>
 8013fba:	4b18      	ldr	r3, [pc, #96]	; (801401c <ai_platform_context_acquire+0x68>)
 8013fbc:	6802      	ldr	r2, [r0, #0]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	bf18      	it	ne
 8013fc2:	2400      	movne	r4, #0
 8013fc4:	f7ff fe1e 	bl	8013c04 <_ai_platform_acquire_crc>
 8013fc8:	4b15      	ldr	r3, [pc, #84]	; (8014020 <ai_platform_context_acquire+0x6c>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fd4:	d010      	beq.n	8013ff8 <ai_platform_context_acquire+0x44>
 8013fd6:	4a13      	ldr	r2, [pc, #76]	; (8014024 <ai_platform_context_acquire+0x70>)
 8013fd8:	2301      	movs	r3, #1
 8013fda:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8013fde:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d1fb      	bne.n	8013fde <ai_platform_context_acquire+0x2a>
 8013fe6:	4b10      	ldr	r3, [pc, #64]	; (8014028 <ai_platform_context_acquire+0x74>)
 8013fe8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013fec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013ff0:	4b0e      	ldr	r3, [pc, #56]	; (801402c <ai_platform_context_acquire+0x78>)
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d00c      	beq.n	8014010 <ai_platform_context_acquire+0x5c>
 8013ff6:	e7fe      	b.n	8013ff6 <ai_platform_context_acquire+0x42>
 8013ff8:	4a0d      	ldr	r2, [pc, #52]	; (8014030 <ai_platform_context_acquire+0x7c>)
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	6093      	str	r3, [r2, #8]
 8013ffe:	6893      	ldr	r3, [r2, #8]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1fc      	bne.n	8013ffe <ai_platform_context_acquire+0x4a>
 8014004:	4b08      	ldr	r3, [pc, #32]	; (8014028 <ai_platform_context_acquire+0x74>)
 8014006:	6013      	str	r3, [r2, #0]
 8014008:	6812      	ldr	r2, [r2, #0]
 801400a:	4b08      	ldr	r3, [pc, #32]	; (801402c <ai_platform_context_acquire+0x78>)
 801400c:	429a      	cmp	r2, r3
 801400e:	d103      	bne.n	8014018 <ai_platform_context_acquire+0x64>
 8014010:	f7ff fdfa 	bl	8013c08 <_ai_platform_release_crc>
 8014014:	4620      	mov	r0, r4
 8014016:	bd10      	pop	{r4, pc}
 8014018:	e7fe      	b.n	8014018 <ai_platform_context_acquire+0x64>
 801401a:	bf00      	nop
 801401c:	a1c00100 	.word	0xa1c00100
 8014020:	e0042000 	.word	0xe0042000
 8014024:	58024000 	.word	0x58024000
 8014028:	f407a5c2 	.word	0xf407a5c2
 801402c:	b5e8b5cd 	.word	0xb5e8b5cd
 8014030:	40023000 	.word	0x40023000

08014034 <ai_platform_network_get_error>:
 8014034:	b510      	push	{r4, lr}
 8014036:	b1f0      	cbz	r0, 8014076 <ai_platform_network_get_error+0x42>
 8014038:	4b2f      	ldr	r3, [pc, #188]	; (80140f8 <ai_platform_network_get_error+0xc4>)
 801403a:	6802      	ldr	r2, [r0, #0]
 801403c:	429a      	cmp	r2, r3
 801403e:	4604      	mov	r4, r0
 8014040:	d119      	bne.n	8014076 <ai_platform_network_get_error+0x42>
 8014042:	f7ff fddf 	bl	8013c04 <_ai_platform_acquire_crc>
 8014046:	4b2d      	ldr	r3, [pc, #180]	; (80140fc <ai_platform_network_get_error+0xc8>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014052:	d03c      	beq.n	80140ce <ai_platform_network_get_error+0x9a>
 8014054:	4a2a      	ldr	r2, [pc, #168]	; (8014100 <ai_platform_network_get_error+0xcc>)
 8014056:	2301      	movs	r3, #1
 8014058:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801405c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1fb      	bne.n	801405c <ai_platform_network_get_error+0x28>
 8014064:	4b27      	ldr	r3, [pc, #156]	; (8014104 <ai_platform_network_get_error+0xd0>)
 8014066:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801406a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801406e:	4b26      	ldr	r3, [pc, #152]	; (8014108 <ai_platform_network_get_error+0xd4>)
 8014070:	429a      	cmp	r2, r3
 8014072:	d038      	beq.n	80140e6 <ai_platform_network_get_error+0xb2>
 8014074:	e7fe      	b.n	8014074 <ai_platform_network_get_error+0x40>
 8014076:	f7ff fdc5 	bl	8013c04 <_ai_platform_acquire_crc>
 801407a:	4b20      	ldr	r3, [pc, #128]	; (80140fc <ai_platform_network_get_error+0xc8>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014086:	d010      	beq.n	80140aa <ai_platform_network_get_error+0x76>
 8014088:	4a1d      	ldr	r2, [pc, #116]	; (8014100 <ai_platform_network_get_error+0xcc>)
 801408a:	2301      	movs	r3, #1
 801408c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014090:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1fb      	bne.n	8014090 <ai_platform_network_get_error+0x5c>
 8014098:	4b1a      	ldr	r3, [pc, #104]	; (8014104 <ai_platform_network_get_error+0xd0>)
 801409a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801409e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80140a2:	4b19      	ldr	r3, [pc, #100]	; (8014108 <ai_platform_network_get_error+0xd4>)
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d00d      	beq.n	80140c4 <ai_platform_network_get_error+0x90>
 80140a8:	e7fe      	b.n	80140a8 <ai_platform_network_get_error+0x74>
 80140aa:	4a18      	ldr	r2, [pc, #96]	; (801410c <ai_platform_network_get_error+0xd8>)
 80140ac:	2301      	movs	r3, #1
 80140ae:	6093      	str	r3, [r2, #8]
 80140b0:	6893      	ldr	r3, [r2, #8]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1fc      	bne.n	80140b0 <ai_platform_network_get_error+0x7c>
 80140b6:	4b13      	ldr	r3, [pc, #76]	; (8014104 <ai_platform_network_get_error+0xd0>)
 80140b8:	6013      	str	r3, [r2, #0]
 80140ba:	6812      	ldr	r2, [r2, #0]
 80140bc:	4b12      	ldr	r3, [pc, #72]	; (8014108 <ai_platform_network_get_error+0xd4>)
 80140be:	429a      	cmp	r2, r3
 80140c0:	d000      	beq.n	80140c4 <ai_platform_network_get_error+0x90>
 80140c2:	e7fe      	b.n	80140c2 <ai_platform_network_get_error+0x8e>
 80140c4:	f7ff fda0 	bl	8013c08 <_ai_platform_release_crc>
 80140c8:	f241 0010 	movw	r0, #4112	; 0x1010
 80140cc:	bd10      	pop	{r4, pc}
 80140ce:	4a0f      	ldr	r2, [pc, #60]	; (801410c <ai_platform_network_get_error+0xd8>)
 80140d0:	2301      	movs	r3, #1
 80140d2:	6093      	str	r3, [r2, #8]
 80140d4:	6893      	ldr	r3, [r2, #8]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1fc      	bne.n	80140d4 <ai_platform_network_get_error+0xa0>
 80140da:	4b0a      	ldr	r3, [pc, #40]	; (8014104 <ai_platform_network_get_error+0xd0>)
 80140dc:	6013      	str	r3, [r2, #0]
 80140de:	6812      	ldr	r2, [r2, #0]
 80140e0:	4b09      	ldr	r3, [pc, #36]	; (8014108 <ai_platform_network_get_error+0xd4>)
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d107      	bne.n	80140f6 <ai_platform_network_get_error+0xc2>
 80140e6:	f7ff fd8f 	bl	8013c08 <_ai_platform_release_crc>
 80140ea:	f104 0010 	add.w	r0, r4, #16
 80140ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140f2:	f001 ba9b 	b.w	801562c <core_get_error>
 80140f6:	e7fe      	b.n	80140f6 <ai_platform_network_get_error+0xc2>
 80140f8:	a1c00100 	.word	0xa1c00100
 80140fc:	e0042000 	.word	0xe0042000
 8014100:	58024000 	.word	0x58024000
 8014104:	f407a5c2 	.word	0xf407a5c2
 8014108:	b5e8b5cd 	.word	0xb5e8b5cd
 801410c:	40023000 	.word	0x40023000

08014110 <ai_platform_network_set_error>:
 8014110:	b110      	cbz	r0, 8014118 <ai_platform_network_set_error+0x8>
 8014112:	3010      	adds	r0, #16
 8014114:	f001 ba90 	b.w	8015638 <core_set_error>
 8014118:	4770      	bx	lr
 801411a:	bf00      	nop

0801411c <ai_platform_inputs_get>:
 801411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014120:	b085      	sub	sp, #20
 8014122:	9102      	str	r1, [sp, #8]
 8014124:	b1f0      	cbz	r0, 8014164 <ai_platform_inputs_get+0x48>
 8014126:	4b62      	ldr	r3, [pc, #392]	; (80142b0 <ai_platform_inputs_get+0x194>)
 8014128:	6802      	ldr	r2, [r0, #0]
 801412a:	429a      	cmp	r2, r3
 801412c:	4607      	mov	r7, r0
 801412e:	d119      	bne.n	8014164 <ai_platform_inputs_get+0x48>
 8014130:	f7ff fd68 	bl	8013c04 <_ai_platform_acquire_crc>
 8014134:	4b5f      	ldr	r3, [pc, #380]	; (80142b4 <ai_platform_inputs_get+0x198>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014140:	d03d      	beq.n	80141be <ai_platform_inputs_get+0xa2>
 8014142:	4a5d      	ldr	r2, [pc, #372]	; (80142b8 <ai_platform_inputs_get+0x19c>)
 8014144:	2301      	movs	r3, #1
 8014146:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801414a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801414e:	2b00      	cmp	r3, #0
 8014150:	d1fb      	bne.n	801414a <ai_platform_inputs_get+0x2e>
 8014152:	4b5a      	ldr	r3, [pc, #360]	; (80142bc <ai_platform_inputs_get+0x1a0>)
 8014154:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014158:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801415c:	4b58      	ldr	r3, [pc, #352]	; (80142c0 <ai_platform_inputs_get+0x1a4>)
 801415e:	429a      	cmp	r2, r3
 8014160:	d039      	beq.n	80141d6 <ai_platform_inputs_get+0xba>
 8014162:	e7fe      	b.n	8014162 <ai_platform_inputs_get+0x46>
 8014164:	f7ff fd4e 	bl	8013c04 <_ai_platform_acquire_crc>
 8014168:	4b52      	ldr	r3, [pc, #328]	; (80142b4 <ai_platform_inputs_get+0x198>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014174:	d010      	beq.n	8014198 <ai_platform_inputs_get+0x7c>
 8014176:	4a50      	ldr	r2, [pc, #320]	; (80142b8 <ai_platform_inputs_get+0x19c>)
 8014178:	2301      	movs	r3, #1
 801417a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801417e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014182:	2b00      	cmp	r3, #0
 8014184:	d1fb      	bne.n	801417e <ai_platform_inputs_get+0x62>
 8014186:	4b4d      	ldr	r3, [pc, #308]	; (80142bc <ai_platform_inputs_get+0x1a0>)
 8014188:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801418c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014190:	4b4b      	ldr	r3, [pc, #300]	; (80142c0 <ai_platform_inputs_get+0x1a4>)
 8014192:	429a      	cmp	r2, r3
 8014194:	d00d      	beq.n	80141b2 <ai_platform_inputs_get+0x96>
 8014196:	e7fe      	b.n	8014196 <ai_platform_inputs_get+0x7a>
 8014198:	4a4a      	ldr	r2, [pc, #296]	; (80142c4 <ai_platform_inputs_get+0x1a8>)
 801419a:	2301      	movs	r3, #1
 801419c:	6093      	str	r3, [r2, #8]
 801419e:	6893      	ldr	r3, [r2, #8]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d1fc      	bne.n	801419e <ai_platform_inputs_get+0x82>
 80141a4:	4b45      	ldr	r3, [pc, #276]	; (80142bc <ai_platform_inputs_get+0x1a0>)
 80141a6:	6013      	str	r3, [r2, #0]
 80141a8:	6812      	ldr	r2, [r2, #0]
 80141aa:	4b45      	ldr	r3, [pc, #276]	; (80142c0 <ai_platform_inputs_get+0x1a4>)
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d000      	beq.n	80141b2 <ai_platform_inputs_get+0x96>
 80141b0:	e7fe      	b.n	80141b0 <ai_platform_inputs_get+0x94>
 80141b2:	f7ff fd29 	bl	8013c08 <_ai_platform_release_crc>
 80141b6:	2000      	movs	r0, #0
 80141b8:	b005      	add	sp, #20
 80141ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141be:	4a41      	ldr	r2, [pc, #260]	; (80142c4 <ai_platform_inputs_get+0x1a8>)
 80141c0:	2301      	movs	r3, #1
 80141c2:	6093      	str	r3, [r2, #8]
 80141c4:	6893      	ldr	r3, [r2, #8]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1fc      	bne.n	80141c4 <ai_platform_inputs_get+0xa8>
 80141ca:	4b3c      	ldr	r3, [pc, #240]	; (80142bc <ai_platform_inputs_get+0x1a0>)
 80141cc:	6013      	str	r3, [r2, #0]
 80141ce:	6812      	ldr	r2, [r2, #0]
 80141d0:	4b3b      	ldr	r3, [pc, #236]	; (80142c0 <ai_platform_inputs_get+0x1a4>)
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d155      	bne.n	8014282 <ai_platform_inputs_get+0x166>
 80141d6:	f7ff fd17 	bl	8013c08 <_ai_platform_release_crc>
 80141da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d051      	beq.n	8014284 <ai_platform_inputs_get+0x168>
 80141e0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80141e4:	f1ba 0f00 	cmp.w	sl, #0
 80141e8:	d04c      	beq.n	8014284 <ai_platform_inputs_get+0x168>
 80141ea:	f04f 0b00 	mov.w	fp, #0
 80141ee:	465d      	mov	r5, fp
 80141f0:	9703      	str	r7, [sp, #12]
 80141f2:	e016      	b.n	8014222 <ai_platform_inputs_get+0x106>
 80141f4:	9901      	ldr	r1, [sp, #4]
 80141f6:	2301      	movs	r3, #1
 80141f8:	507b      	str	r3, [r7, r1]
 80141fa:	69b1      	ldr	r1, [r6, #24]
 80141fc:	6849      	ldr	r1, [r1, #4]
 80141fe:	6121      	str	r1, [r4, #16]
 8014200:	f04f 0301 	mov.w	r3, #1
 8014204:	7523      	strb	r3, [r4, #20]
 8014206:	e9c4 c200 	strd	ip, r2, [r4]
 801420a:	6962      	ldr	r2, [r4, #20]
 801420c:	60a0      	str	r0, [r4, #8]
 801420e:	2300      	movs	r3, #0
 8014210:	f369 221f 	bfi	r2, r9, #8, #24
 8014214:	f8c4 8018 	str.w	r8, [r4, #24]
 8014218:	60e3      	str	r3, [r4, #12]
 801421a:	3501      	adds	r5, #1
 801421c:	f10b 0b1c 	add.w	fp, fp, #28
 8014220:	6162      	str	r2, [r4, #20]
 8014222:	f8ba 3000 	ldrh.w	r3, [sl]
 8014226:	42ab      	cmp	r3, r5
 8014228:	b2aa      	uxth	r2, r5
 801422a:	d93a      	bls.n	80142a2 <ai_platform_inputs_get+0x186>
 801422c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014230:	00e9      	lsls	r1, r5, #3
 8014232:	9101      	str	r1, [sp, #4]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d034      	beq.n	80142a2 <ai_platform_inputs_get+0x186>
 8014238:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801423c:	2e00      	cmp	r6, #0
 801423e:	d030      	beq.n	80142a2 <ai_platform_inputs_get+0x186>
 8014240:	f8da 3008 	ldr.w	r3, [sl, #8]
 8014244:	69b2      	ldr	r2, [r6, #24]
 8014246:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801424a:	6810      	ldr	r0, [r2, #0]
 801424c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8014250:	68b3      	ldr	r3, [r6, #8]
 8014252:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8014256:	f005 f915 	bl	8019484 <ai_array_to_buffer_fmt>
 801425a:	69b1      	ldr	r1, [r6, #24]
 801425c:	4684      	mov	ip, r0
 801425e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8014262:	688a      	ldr	r2, [r1, #8]
 8014264:	445c      	add	r4, fp
 8014266:	2800      	cmp	r0, #0
 8014268:	d0c8      	beq.n	80141fc <ai_platform_inputs_get+0xe0>
 801426a:	2100      	movs	r1, #0
 801426c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8014270:	6831      	ldr	r1, [r6, #0]
 8014272:	6041      	str	r1, [r0, #4]
 8014274:	b111      	cbz	r1, 801427c <ai_platform_inputs_get+0x160>
 8014276:	8849      	ldrh	r1, [r1, #2]
 8014278:	2900      	cmp	r1, #0
 801427a:	d1bb      	bne.n	80141f4 <ai_platform_inputs_get+0xd8>
 801427c:	69b1      	ldr	r1, [r6, #24]
 801427e:	2000      	movs	r0, #0
 8014280:	e7bc      	b.n	80141fc <ai_platform_inputs_get+0xe0>
 8014282:	e7fe      	b.n	8014282 <ai_platform_inputs_get+0x166>
 8014284:	2218      	movs	r2, #24
 8014286:	2111      	movs	r1, #17
 8014288:	f107 0010 	add.w	r0, r7, #16
 801428c:	f001 f9d4 	bl	8015638 <core_set_error>
 8014290:	2200      	movs	r2, #0
 8014292:	4610      	mov	r0, r2
 8014294:	9b02      	ldr	r3, [sp, #8]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d08e      	beq.n	80141b8 <ai_platform_inputs_get+0x9c>
 801429a:	801a      	strh	r2, [r3, #0]
 801429c:	b005      	add	sp, #20
 801429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a2:	9f03      	ldr	r7, [sp, #12]
 80142a4:	2a00      	cmp	r2, #0
 80142a6:	d0ed      	beq.n	8014284 <ai_platform_inputs_get+0x168>
 80142a8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80142ac:	6858      	ldr	r0, [r3, #4]
 80142ae:	e7f1      	b.n	8014294 <ai_platform_inputs_get+0x178>
 80142b0:	a1c00100 	.word	0xa1c00100
 80142b4:	e0042000 	.word	0xe0042000
 80142b8:	58024000 	.word	0x58024000
 80142bc:	f407a5c2 	.word	0xf407a5c2
 80142c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80142c4:	40023000 	.word	0x40023000

080142c8 <ai_platform_outputs_get>:
 80142c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142cc:	b085      	sub	sp, #20
 80142ce:	9102      	str	r1, [sp, #8]
 80142d0:	b1f0      	cbz	r0, 8014310 <ai_platform_outputs_get+0x48>
 80142d2:	4b5f      	ldr	r3, [pc, #380]	; (8014450 <ai_platform_outputs_get+0x188>)
 80142d4:	6802      	ldr	r2, [r0, #0]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	4607      	mov	r7, r0
 80142da:	d119      	bne.n	8014310 <ai_platform_outputs_get+0x48>
 80142dc:	f7ff fc92 	bl	8013c04 <_ai_platform_acquire_crc>
 80142e0:	4b5c      	ldr	r3, [pc, #368]	; (8014454 <ai_platform_outputs_get+0x18c>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80142e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80142ec:	d03d      	beq.n	801436a <ai_platform_outputs_get+0xa2>
 80142ee:	4a5a      	ldr	r2, [pc, #360]	; (8014458 <ai_platform_outputs_get+0x190>)
 80142f0:	2301      	movs	r3, #1
 80142f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80142f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d1fb      	bne.n	80142f6 <ai_platform_outputs_get+0x2e>
 80142fe:	4b57      	ldr	r3, [pc, #348]	; (801445c <ai_platform_outputs_get+0x194>)
 8014300:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014304:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014308:	4b55      	ldr	r3, [pc, #340]	; (8014460 <ai_platform_outputs_get+0x198>)
 801430a:	429a      	cmp	r2, r3
 801430c:	d039      	beq.n	8014382 <ai_platform_outputs_get+0xba>
 801430e:	e7fe      	b.n	801430e <ai_platform_outputs_get+0x46>
 8014310:	f7ff fc78 	bl	8013c04 <_ai_platform_acquire_crc>
 8014314:	4b4f      	ldr	r3, [pc, #316]	; (8014454 <ai_platform_outputs_get+0x18c>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801431c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014320:	d010      	beq.n	8014344 <ai_platform_outputs_get+0x7c>
 8014322:	4a4d      	ldr	r2, [pc, #308]	; (8014458 <ai_platform_outputs_get+0x190>)
 8014324:	2301      	movs	r3, #1
 8014326:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801432a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801432e:	2b00      	cmp	r3, #0
 8014330:	d1fb      	bne.n	801432a <ai_platform_outputs_get+0x62>
 8014332:	4b4a      	ldr	r3, [pc, #296]	; (801445c <ai_platform_outputs_get+0x194>)
 8014334:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014338:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801433c:	4b48      	ldr	r3, [pc, #288]	; (8014460 <ai_platform_outputs_get+0x198>)
 801433e:	429a      	cmp	r2, r3
 8014340:	d00d      	beq.n	801435e <ai_platform_outputs_get+0x96>
 8014342:	e7fe      	b.n	8014342 <ai_platform_outputs_get+0x7a>
 8014344:	4a47      	ldr	r2, [pc, #284]	; (8014464 <ai_platform_outputs_get+0x19c>)
 8014346:	2301      	movs	r3, #1
 8014348:	6093      	str	r3, [r2, #8]
 801434a:	6893      	ldr	r3, [r2, #8]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d1fc      	bne.n	801434a <ai_platform_outputs_get+0x82>
 8014350:	4b42      	ldr	r3, [pc, #264]	; (801445c <ai_platform_outputs_get+0x194>)
 8014352:	6013      	str	r3, [r2, #0]
 8014354:	6812      	ldr	r2, [r2, #0]
 8014356:	4b42      	ldr	r3, [pc, #264]	; (8014460 <ai_platform_outputs_get+0x198>)
 8014358:	429a      	cmp	r2, r3
 801435a:	d000      	beq.n	801435e <ai_platform_outputs_get+0x96>
 801435c:	e7fe      	b.n	801435c <ai_platform_outputs_get+0x94>
 801435e:	f7ff fc53 	bl	8013c08 <_ai_platform_release_crc>
 8014362:	2000      	movs	r0, #0
 8014364:	b005      	add	sp, #20
 8014366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436a:	4a3e      	ldr	r2, [pc, #248]	; (8014464 <ai_platform_outputs_get+0x19c>)
 801436c:	2301      	movs	r3, #1
 801436e:	6093      	str	r3, [r2, #8]
 8014370:	6893      	ldr	r3, [r2, #8]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d1fc      	bne.n	8014370 <ai_platform_outputs_get+0xa8>
 8014376:	4b39      	ldr	r3, [pc, #228]	; (801445c <ai_platform_outputs_get+0x194>)
 8014378:	6013      	str	r3, [r2, #0]
 801437a:	6812      	ldr	r2, [r2, #0]
 801437c:	4b38      	ldr	r3, [pc, #224]	; (8014460 <ai_platform_outputs_get+0x198>)
 801437e:	429a      	cmp	r2, r3
 8014380:	d150      	bne.n	8014424 <ai_platform_outputs_get+0x15c>
 8014382:	f7ff fc41 	bl	8013c08 <_ai_platform_release_crc>
 8014386:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014388:	2b01      	cmp	r3, #1
 801438a:	d958      	bls.n	801443e <ai_platform_outputs_get+0x176>
 801438c:	f04f 0b00 	mov.w	fp, #0
 8014390:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8014394:	9703      	str	r7, [sp, #12]
 8014396:	465d      	mov	r5, fp
 8014398:	e016      	b.n	80143c8 <ai_platform_outputs_get+0x100>
 801439a:	9901      	ldr	r1, [sp, #4]
 801439c:	2301      	movs	r3, #1
 801439e:	507b      	str	r3, [r7, r1]
 80143a0:	69b1      	ldr	r1, [r6, #24]
 80143a2:	6849      	ldr	r1, [r1, #4]
 80143a4:	6121      	str	r1, [r4, #16]
 80143a6:	f04f 0301 	mov.w	r3, #1
 80143aa:	7523      	strb	r3, [r4, #20]
 80143ac:	e9c4 c200 	strd	ip, r2, [r4]
 80143b0:	6962      	ldr	r2, [r4, #20]
 80143b2:	60a0      	str	r0, [r4, #8]
 80143b4:	2300      	movs	r3, #0
 80143b6:	f369 221f 	bfi	r2, r9, #8, #24
 80143ba:	f8c4 8018 	str.w	r8, [r4, #24]
 80143be:	60e3      	str	r3, [r4, #12]
 80143c0:	3501      	adds	r5, #1
 80143c2:	f10b 0b1c 	add.w	fp, fp, #28
 80143c6:	6162      	str	r2, [r4, #20]
 80143c8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80143cc:	42ab      	cmp	r3, r5
 80143ce:	b2aa      	uxth	r2, r5
 80143d0:	d929      	bls.n	8014426 <ai_platform_outputs_get+0x15e>
 80143d2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80143d6:	00e9      	lsls	r1, r5, #3
 80143d8:	9101      	str	r1, [sp, #4]
 80143da:	b323      	cbz	r3, 8014426 <ai_platform_outputs_get+0x15e>
 80143dc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80143e0:	b30e      	cbz	r6, 8014426 <ai_platform_outputs_get+0x15e>
 80143e2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80143e6:	69b2      	ldr	r2, [r6, #24]
 80143e8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80143ec:	6810      	ldr	r0, [r2, #0]
 80143ee:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80143f2:	68b3      	ldr	r3, [r6, #8]
 80143f4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80143f8:	f005 f844 	bl	8019484 <ai_array_to_buffer_fmt>
 80143fc:	69b1      	ldr	r1, [r6, #24]
 80143fe:	4684      	mov	ip, r0
 8014400:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8014404:	688a      	ldr	r2, [r1, #8]
 8014406:	445c      	add	r4, fp
 8014408:	2800      	cmp	r0, #0
 801440a:	d0ca      	beq.n	80143a2 <ai_platform_outputs_get+0xda>
 801440c:	2100      	movs	r1, #0
 801440e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8014412:	6831      	ldr	r1, [r6, #0]
 8014414:	6041      	str	r1, [r0, #4]
 8014416:	b111      	cbz	r1, 801441e <ai_platform_outputs_get+0x156>
 8014418:	8849      	ldrh	r1, [r1, #2]
 801441a:	2900      	cmp	r1, #0
 801441c:	d1bd      	bne.n	801439a <ai_platform_outputs_get+0xd2>
 801441e:	69b1      	ldr	r1, [r6, #24]
 8014420:	2000      	movs	r0, #0
 8014422:	e7be      	b.n	80143a2 <ai_platform_outputs_get+0xda>
 8014424:	e7fe      	b.n	8014424 <ai_platform_outputs_get+0x15c>
 8014426:	9f03      	ldr	r7, [sp, #12]
 8014428:	b14a      	cbz	r2, 801443e <ai_platform_outputs_get+0x176>
 801442a:	f8da 3014 	ldr.w	r3, [sl, #20]
 801442e:	6858      	ldr	r0, [r3, #4]
 8014430:	9b02      	ldr	r3, [sp, #8]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d096      	beq.n	8014364 <ai_platform_outputs_get+0x9c>
 8014436:	801a      	strh	r2, [r3, #0]
 8014438:	b005      	add	sp, #20
 801443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801443e:	2218      	movs	r2, #24
 8014440:	2111      	movs	r1, #17
 8014442:	f107 0010 	add.w	r0, r7, #16
 8014446:	f001 f8f7 	bl	8015638 <core_set_error>
 801444a:	2200      	movs	r2, #0
 801444c:	4610      	mov	r0, r2
 801444e:	e7ef      	b.n	8014430 <ai_platform_outputs_get+0x168>
 8014450:	a1c00100 	.word	0xa1c00100
 8014454:	e0042000 	.word	0xe0042000
 8014458:	58024000 	.word	0x58024000
 801445c:	f407a5c2 	.word	0xf407a5c2
 8014460:	b5e8b5cd 	.word	0xb5e8b5cd
 8014464:	40023000 	.word	0x40023000

08014468 <ai_platform_api_get_network_report>:
 8014468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446c:	b087      	sub	sp, #28
 801446e:	b1f8      	cbz	r0, 80144b0 <ai_platform_api_get_network_report+0x48>
 8014470:	4b95      	ldr	r3, [pc, #596]	; (80146c8 <ai_platform_api_get_network_report+0x260>)
 8014472:	6802      	ldr	r2, [r0, #0]
 8014474:	429a      	cmp	r2, r3
 8014476:	4607      	mov	r7, r0
 8014478:	d11a      	bne.n	80144b0 <ai_platform_api_get_network_report+0x48>
 801447a:	468b      	mov	fp, r1
 801447c:	f7ff fbc2 	bl	8013c04 <_ai_platform_acquire_crc>
 8014480:	4b92      	ldr	r3, [pc, #584]	; (80146cc <ai_platform_api_get_network_report+0x264>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801448c:	d03e      	beq.n	801450c <ai_platform_api_get_network_report+0xa4>
 801448e:	4a90      	ldr	r2, [pc, #576]	; (80146d0 <ai_platform_api_get_network_report+0x268>)
 8014490:	2301      	movs	r3, #1
 8014492:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014496:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801449a:	2b00      	cmp	r3, #0
 801449c:	d1fb      	bne.n	8014496 <ai_platform_api_get_network_report+0x2e>
 801449e:	4b8d      	ldr	r3, [pc, #564]	; (80146d4 <ai_platform_api_get_network_report+0x26c>)
 80144a0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80144a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80144a8:	4b8b      	ldr	r3, [pc, #556]	; (80146d8 <ai_platform_api_get_network_report+0x270>)
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d03a      	beq.n	8014524 <ai_platform_api_get_network_report+0xbc>
 80144ae:	e7fe      	b.n	80144ae <ai_platform_api_get_network_report+0x46>
 80144b0:	f7ff fba8 	bl	8013c04 <_ai_platform_acquire_crc>
 80144b4:	4b85      	ldr	r3, [pc, #532]	; (80146cc <ai_platform_api_get_network_report+0x264>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80144bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80144c0:	d010      	beq.n	80144e4 <ai_platform_api_get_network_report+0x7c>
 80144c2:	4a83      	ldr	r2, [pc, #524]	; (80146d0 <ai_platform_api_get_network_report+0x268>)
 80144c4:	2301      	movs	r3, #1
 80144c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80144ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1fb      	bne.n	80144ca <ai_platform_api_get_network_report+0x62>
 80144d2:	4b80      	ldr	r3, [pc, #512]	; (80146d4 <ai_platform_api_get_network_report+0x26c>)
 80144d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80144d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80144dc:	4b7e      	ldr	r3, [pc, #504]	; (80146d8 <ai_platform_api_get_network_report+0x270>)
 80144de:	429a      	cmp	r2, r3
 80144e0:	d00d      	beq.n	80144fe <ai_platform_api_get_network_report+0x96>
 80144e2:	e7fe      	b.n	80144e2 <ai_platform_api_get_network_report+0x7a>
 80144e4:	4a7d      	ldr	r2, [pc, #500]	; (80146dc <ai_platform_api_get_network_report+0x274>)
 80144e6:	2301      	movs	r3, #1
 80144e8:	6093      	str	r3, [r2, #8]
 80144ea:	6893      	ldr	r3, [r2, #8]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d1fc      	bne.n	80144ea <ai_platform_api_get_network_report+0x82>
 80144f0:	4b78      	ldr	r3, [pc, #480]	; (80146d4 <ai_platform_api_get_network_report+0x26c>)
 80144f2:	6013      	str	r3, [r2, #0]
 80144f4:	6812      	ldr	r2, [r2, #0]
 80144f6:	4b78      	ldr	r3, [pc, #480]	; (80146d8 <ai_platform_api_get_network_report+0x270>)
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d000      	beq.n	80144fe <ai_platform_api_get_network_report+0x96>
 80144fc:	e7fe      	b.n	80144fc <ai_platform_api_get_network_report+0x94>
 80144fe:	f7ff fb83 	bl	8013c08 <_ai_platform_release_crc>
 8014502:	2400      	movs	r4, #0
 8014504:	4620      	mov	r0, r4
 8014506:	b007      	add	sp, #28
 8014508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801450c:	4a73      	ldr	r2, [pc, #460]	; (80146dc <ai_platform_api_get_network_report+0x274>)
 801450e:	2301      	movs	r3, #1
 8014510:	6093      	str	r3, [r2, #8]
 8014512:	6893      	ldr	r3, [r2, #8]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d1fc      	bne.n	8014512 <ai_platform_api_get_network_report+0xaa>
 8014518:	4b6e      	ldr	r3, [pc, #440]	; (80146d4 <ai_platform_api_get_network_report+0x26c>)
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	6812      	ldr	r2, [r2, #0]
 801451e:	4b6e      	ldr	r3, [pc, #440]	; (80146d8 <ai_platform_api_get_network_report+0x270>)
 8014520:	429a      	cmp	r2, r3
 8014522:	d112      	bne.n	801454a <ai_platform_api_get_network_report+0xe2>
 8014524:	f7ff fb70 	bl	8013c08 <_ai_platform_release_crc>
 8014528:	f1bb 0f00 	cmp.w	fp, #0
 801452c:	d0e9      	beq.n	8014502 <ai_platform_api_get_network_report+0x9a>
 801452e:	2400      	movs	r4, #0
 8014530:	f8cb 4074 	str.w	r4, [fp, #116]	; 0x74
 8014534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014536:	b14b      	cbz	r3, 801454c <ai_platform_api_get_network_report+0xe4>
 8014538:	3401      	adds	r4, #1
 801453a:	f8cb 4074 	str.w	r4, [fp, #116]	; 0x74
 801453e:	691a      	ldr	r2, [r3, #16]
 8014540:	429a      	cmp	r2, r3
 8014542:	d003      	beq.n	801454c <ai_platform_api_get_network_report+0xe4>
 8014544:	b112      	cbz	r2, 801454c <ai_platform_api_get_network_report+0xe4>
 8014546:	4613      	mov	r3, r2
 8014548:	e7f5      	b.n	8014536 <ai_platform_api_get_network_report+0xce>
 801454a:	e7fe      	b.n	801454a <ai_platform_api_get_network_report+0xe2>
 801454c:	2c00      	cmp	r4, #0
 801454e:	f000 819d 	beq.w	801488c <ai_platform_api_get_network_report+0x424>
 8014552:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014554:	2b00      	cmp	r3, #0
 8014556:	d04e      	beq.n	80145f6 <ai_platform_api_get_network_report+0x18e>
 8014558:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 801455c:	f1b9 0f00 	cmp.w	r9, #0
 8014560:	d049      	beq.n	80145f6 <ai_platform_api_get_network_report+0x18e>
 8014562:	f04f 0a00 	mov.w	sl, #0
 8014566:	e9cd 7b00 	strd	r7, fp, [sp]
 801456a:	4655      	mov	r5, sl
 801456c:	e016      	b.n	801459c <ai_platform_api_get_network_report+0x134>
 801456e:	2101      	movs	r1, #1
 8014570:	f847 100e 	str.w	r1, [r7, lr]
 8014574:	69b1      	ldr	r1, [r6, #24]
 8014576:	6849      	ldr	r1, [r1, #4]
 8014578:	60a3      	str	r3, [r4, #8]
 801457a:	f04f 0301 	mov.w	r3, #1
 801457e:	7523      	strb	r3, [r4, #20]
 8014580:	2300      	movs	r3, #0
 8014582:	60e3      	str	r3, [r4, #12]
 8014584:	6963      	ldr	r3, [r4, #20]
 8014586:	6121      	str	r1, [r4, #16]
 8014588:	e9c4 0200 	strd	r0, r2, [r4]
 801458c:	f368 231f 	bfi	r3, r8, #8, #24
 8014590:	f8c4 b018 	str.w	fp, [r4, #24]
 8014594:	3501      	adds	r5, #1
 8014596:	f10a 0a1c 	add.w	sl, sl, #28
 801459a:	6163      	str	r3, [r4, #20]
 801459c:	f8b9 3000 	ldrh.w	r3, [r9]
 80145a0:	42ab      	cmp	r3, r5
 80145a2:	b2aa      	uxth	r2, r5
 80145a4:	d933      	bls.n	801460e <ai_platform_api_get_network_report+0x1a6>
 80145a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80145aa:	b383      	cbz	r3, 801460e <ai_platform_api_get_network_report+0x1a6>
 80145ac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80145b0:	b36e      	cbz	r6, 801460e <ai_platform_api_get_network_report+0x1a6>
 80145b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80145b6:	69b2      	ldr	r2, [r6, #24]
 80145b8:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80145bc:	6810      	ldr	r0, [r2, #0]
 80145be:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80145c2:	68b3      	ldr	r3, [r6, #8]
 80145c4:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80145c8:	f004 ff5c 	bl	8019484 <ai_array_to_buffer_fmt>
 80145cc:	69b1      	ldr	r1, [r6, #24]
 80145ce:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80145d2:	688a      	ldr	r2, [r1, #8]
 80145d4:	4454      	add	r4, sl
 80145d6:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d0cb      	beq.n	8014576 <ai_platform_api_get_network_report+0x10e>
 80145de:	2100      	movs	r1, #0
 80145e0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80145e4:	6831      	ldr	r1, [r6, #0]
 80145e6:	6059      	str	r1, [r3, #4]
 80145e8:	b111      	cbz	r1, 80145f0 <ai_platform_api_get_network_report+0x188>
 80145ea:	8849      	ldrh	r1, [r1, #2]
 80145ec:	2900      	cmp	r1, #0
 80145ee:	d1be      	bne.n	801456e <ai_platform_api_get_network_report+0x106>
 80145f0:	69b1      	ldr	r1, [r6, #24]
 80145f2:	2300      	movs	r3, #0
 80145f4:	e7bf      	b.n	8014576 <ai_platform_api_get_network_report+0x10e>
 80145f6:	2400      	movs	r4, #0
 80145f8:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
 80145fc:	f8ab 4030 	strh.w	r4, [fp, #48]	; 0x30
 8014600:	2218      	movs	r2, #24
 8014602:	2112      	movs	r1, #18
 8014604:	f107 0010 	add.w	r0, r7, #16
 8014608:	f001 f816 	bl	8015638 <core_set_error>
 801460c:	e77a      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 801460e:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8014612:	2a00      	cmp	r2, #0
 8014614:	d0ef      	beq.n	80145f6 <ai_platform_api_get_network_report+0x18e>
 8014616:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8014620:	f8ab 2030 	strh.w	r2, [fp, #48]	; 0x30
 8014624:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014626:	2b01      	cmp	r3, #1
 8014628:	f240 8124 	bls.w	8014874 <ai_platform_api_get_network_report+0x40c>
 801462c:	f04f 0a00 	mov.w	sl, #0
 8014630:	e9cd 7b00 	strd	r7, fp, [sp]
 8014634:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8014638:	4655      	mov	r5, sl
 801463a:	e016      	b.n	801466a <ai_platform_api_get_network_report+0x202>
 801463c:	2101      	movs	r1, #1
 801463e:	f847 100e 	str.w	r1, [r7, lr]
 8014642:	69b1      	ldr	r1, [r6, #24]
 8014644:	6849      	ldr	r1, [r1, #4]
 8014646:	60a3      	str	r3, [r4, #8]
 8014648:	f04f 0301 	mov.w	r3, #1
 801464c:	7523      	strb	r3, [r4, #20]
 801464e:	2300      	movs	r3, #0
 8014650:	60e3      	str	r3, [r4, #12]
 8014652:	6963      	ldr	r3, [r4, #20]
 8014654:	6121      	str	r1, [r4, #16]
 8014656:	e9c4 0200 	strd	r0, r2, [r4]
 801465a:	f368 231f 	bfi	r3, r8, #8, #24
 801465e:	f8c4 b018 	str.w	fp, [r4, #24]
 8014662:	3501      	adds	r5, #1
 8014664:	f10a 0a1c 	add.w	sl, sl, #28
 8014668:	6163      	str	r3, [r4, #20]
 801466a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801466e:	42ab      	cmp	r3, r5
 8014670:	b2aa      	uxth	r2, r5
 8014672:	d935      	bls.n	80146e0 <ai_platform_api_get_network_report+0x278>
 8014674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d031      	beq.n	80146e0 <ai_platform_api_get_network_report+0x278>
 801467c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8014680:	b376      	cbz	r6, 80146e0 <ai_platform_api_get_network_report+0x278>
 8014682:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014686:	69b2      	ldr	r2, [r6, #24]
 8014688:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 801468c:	6810      	ldr	r0, [r2, #0]
 801468e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8014692:	68b3      	ldr	r3, [r6, #8]
 8014694:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8014698:	f004 fef4 	bl	8019484 <ai_array_to_buffer_fmt>
 801469c:	69b1      	ldr	r1, [r6, #24]
 801469e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80146a2:	688a      	ldr	r2, [r1, #8]
 80146a4:	4454      	add	r4, sl
 80146a6:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d0ca      	beq.n	8014644 <ai_platform_api_get_network_report+0x1dc>
 80146ae:	2100      	movs	r1, #0
 80146b0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80146b4:	6831      	ldr	r1, [r6, #0]
 80146b6:	6059      	str	r1, [r3, #4]
 80146b8:	b111      	cbz	r1, 80146c0 <ai_platform_api_get_network_report+0x258>
 80146ba:	8849      	ldrh	r1, [r1, #2]
 80146bc:	2900      	cmp	r1, #0
 80146be:	d1bd      	bne.n	801463c <ai_platform_api_get_network_report+0x1d4>
 80146c0:	69b1      	ldr	r1, [r6, #24]
 80146c2:	2300      	movs	r3, #0
 80146c4:	e7be      	b.n	8014644 <ai_platform_api_get_network_report+0x1dc>
 80146c6:	bf00      	nop
 80146c8:	a1c00100 	.word	0xa1c00100
 80146cc:	e0042000 	.word	0xe0042000
 80146d0:	58024000 	.word	0x58024000
 80146d4:	f407a5c2 	.word	0xf407a5c2
 80146d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80146dc:	40023000 	.word	0x40023000
 80146e0:	e9dd 7b00 	ldrd	r7, fp, [sp]
 80146e4:	2a00      	cmp	r2, #0
 80146e6:	f000 80c5 	beq.w	8014874 <ai_platform_api_get_network_report+0x40c>
 80146ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80146ee:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 80146f8:	f8ab 2032 	strh.w	r2, [fp, #50]	; 0x32
 80146fc:	4628      	mov	r0, r5
 80146fe:	f7ff fa67 	bl	8013bd0 <ai_buffer_array_sane>
 8014702:	4604      	mov	r4, r0
 8014704:	b938      	cbnz	r0, 8014716 <ai_platform_api_get_network_report+0x2ae>
 8014706:	4628      	mov	r0, r5
 8014708:	f7ff fa62 	bl	8013bd0 <ai_buffer_array_sane>
 801470c:	b118      	cbz	r0, 8014716 <ai_platform_api_get_network_report+0x2ae>
 801470e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014710:	2b00      	cmp	r3, #0
 8014712:	f040 80c4 	bne.w	801489e <ai_platform_api_get_network_report+0x436>
 8014716:	f107 061c 	add.w	r6, r7, #28
 801471a:	4630      	mov	r0, r6
 801471c:	f7ff fa58 	bl	8013bd0 <ai_buffer_array_sane>
 8014720:	4604      	mov	r4, r0
 8014722:	b938      	cbnz	r0, 8014734 <ai_platform_api_get_network_report+0x2cc>
 8014724:	4630      	mov	r0, r6
 8014726:	f7ff fa53 	bl	8013bd0 <ai_buffer_array_sane>
 801472a:	b118      	cbz	r0, 8014734 <ai_platform_api_get_network_report+0x2cc>
 801472c:	8bfb      	ldrh	r3, [r7, #30]
 801472e:	2b00      	cmp	r3, #0
 8014730:	f040 80bc 	bne.w	80148ac <ai_platform_api_get_network_report+0x444>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8cb 3078 	str.w	r3, [fp, #120]	; 0x78
 801473a:	f7ff fa63 	bl	8013c04 <_ai_platform_acquire_crc>
 801473e:	4ba1      	ldr	r3, [pc, #644]	; (80149c4 <ai_platform_api_get_network_report+0x55c>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801474a:	d010      	beq.n	801476e <ai_platform_api_get_network_report+0x306>
 801474c:	4a9e      	ldr	r2, [pc, #632]	; (80149c8 <ai_platform_api_get_network_report+0x560>)
 801474e:	2301      	movs	r3, #1
 8014750:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014754:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014758:	2b00      	cmp	r3, #0
 801475a:	d1fb      	bne.n	8014754 <ai_platform_api_get_network_report+0x2ec>
 801475c:	4b9b      	ldr	r3, [pc, #620]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 801475e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014762:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014766:	4b9a      	ldr	r3, [pc, #616]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 8014768:	429a      	cmp	r2, r3
 801476a:	d00d      	beq.n	8014788 <ai_platform_api_get_network_report+0x320>
 801476c:	e7fe      	b.n	801476c <ai_platform_api_get_network_report+0x304>
 801476e:	4a99      	ldr	r2, [pc, #612]	; (80149d4 <ai_platform_api_get_network_report+0x56c>)
 8014770:	2301      	movs	r3, #1
 8014772:	6093      	str	r3, [r2, #8]
 8014774:	6893      	ldr	r3, [r2, #8]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d1fc      	bne.n	8014774 <ai_platform_api_get_network_report+0x30c>
 801477a:	4b94      	ldr	r3, [pc, #592]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 801477c:	6013      	str	r3, [r2, #0]
 801477e:	6812      	ldr	r2, [r2, #0]
 8014780:	4b93      	ldr	r3, [pc, #588]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 8014782:	429a      	cmp	r2, r3
 8014784:	f040 8089 	bne.w	801489a <ai_platform_api_get_network_report+0x432>
 8014788:	f7ff fa3e 	bl	8013c08 <_ai_platform_release_crc>
 801478c:	4b92      	ldr	r3, [pc, #584]	; (80149d8 <ai_platform_api_get_network_report+0x570>)
 801478e:	f8cb 3010 	str.w	r3, [fp, #16]
 8014792:	f7ff fa37 	bl	8013c04 <_ai_platform_acquire_crc>
 8014796:	4b8b      	ldr	r3, [pc, #556]	; (80149c4 <ai_platform_api_get_network_report+0x55c>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147a2:	d010      	beq.n	80147c6 <ai_platform_api_get_network_report+0x35e>
 80147a4:	4b88      	ldr	r3, [pc, #544]	; (80149c8 <ai_platform_api_get_network_report+0x560>)
 80147a6:	2201      	movs	r2, #1
 80147a8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80147ac:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80147b0:	2a00      	cmp	r2, #0
 80147b2:	d1fb      	bne.n	80147ac <ai_platform_api_get_network_report+0x344>
 80147b4:	4a85      	ldr	r2, [pc, #532]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 80147b6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80147ba:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80147be:	4b84      	ldr	r3, [pc, #528]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d00c      	beq.n	80147de <ai_platform_api_get_network_report+0x376>
 80147c4:	e7fe      	b.n	80147c4 <ai_platform_api_get_network_report+0x35c>
 80147c6:	4b83      	ldr	r3, [pc, #524]	; (80149d4 <ai_platform_api_get_network_report+0x56c>)
 80147c8:	2201      	movs	r2, #1
 80147ca:	609a      	str	r2, [r3, #8]
 80147cc:	689a      	ldr	r2, [r3, #8]
 80147ce:	2a00      	cmp	r2, #0
 80147d0:	d1fc      	bne.n	80147cc <ai_platform_api_get_network_report+0x364>
 80147d2:	4a7e      	ldr	r2, [pc, #504]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 80147d4:	601a      	str	r2, [r3, #0]
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	4b7d      	ldr	r3, [pc, #500]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 80147da:	429a      	cmp	r2, r3
 80147dc:	d15e      	bne.n	801489c <ai_platform_api_get_network_report+0x434>
 80147de:	f7ff fa13 	bl	8013c08 <_ai_platform_release_crc>
 80147e2:	2308      	movs	r3, #8
 80147e4:	f8cb 3014 	str.w	r3, [fp, #20]
 80147e8:	f7ff fa0c 	bl	8013c04 <_ai_platform_acquire_crc>
 80147ec:	4b75      	ldr	r3, [pc, #468]	; (80149c4 <ai_platform_api_get_network_report+0x55c>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80147f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147f8:	d010      	beq.n	801481c <ai_platform_api_get_network_report+0x3b4>
 80147fa:	4b73      	ldr	r3, [pc, #460]	; (80149c8 <ai_platform_api_get_network_report+0x560>)
 80147fc:	2201      	movs	r2, #1
 80147fe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8014802:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8014806:	2a00      	cmp	r2, #0
 8014808:	d1fb      	bne.n	8014802 <ai_platform_api_get_network_report+0x39a>
 801480a:	4a70      	ldr	r2, [pc, #448]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 801480c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8014810:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8014814:	4b6e      	ldr	r3, [pc, #440]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 8014816:	429a      	cmp	r2, r3
 8014818:	d00c      	beq.n	8014834 <ai_platform_api_get_network_report+0x3cc>
 801481a:	e7fe      	b.n	801481a <ai_platform_api_get_network_report+0x3b2>
 801481c:	4b6d      	ldr	r3, [pc, #436]	; (80149d4 <ai_platform_api_get_network_report+0x56c>)
 801481e:	2201      	movs	r2, #1
 8014820:	609a      	str	r2, [r3, #8]
 8014822:	689a      	ldr	r2, [r3, #8]
 8014824:	2a00      	cmp	r2, #0
 8014826:	d1fc      	bne.n	8014822 <ai_platform_api_get_network_report+0x3ba>
 8014828:	4a68      	ldr	r2, [pc, #416]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 801482a:	601a      	str	r2, [r3, #0]
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	4b68      	ldr	r3, [pc, #416]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 8014830:	429a      	cmp	r2, r3
 8014832:	d142      	bne.n	80148ba <ai_platform_api_get_network_report+0x452>
 8014834:	f7ff f9e8 	bl	8013c08 <_ai_platform_release_crc>
 8014838:	f240 2301 	movw	r3, #513	; 0x201
 801483c:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8014840:	f7ff f9e0 	bl	8013c04 <_ai_platform_acquire_crc>
 8014844:	4b5f      	ldr	r3, [pc, #380]	; (80149c4 <ai_platform_api_get_network_report+0x55c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801484c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014850:	d034      	beq.n	80148bc <ai_platform_api_get_network_report+0x454>
 8014852:	4b5d      	ldr	r3, [pc, #372]	; (80149c8 <ai_platform_api_get_network_report+0x560>)
 8014854:	2201      	movs	r2, #1
 8014856:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801485a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801485e:	2a00      	cmp	r2, #0
 8014860:	d1fb      	bne.n	801485a <ai_platform_api_get_network_report+0x3f2>
 8014862:	4a5a      	ldr	r2, [pc, #360]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 8014864:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8014868:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801486c:	4b58      	ldr	r3, [pc, #352]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 801486e:	429a      	cmp	r2, r3
 8014870:	d030      	beq.n	80148d4 <ai_platform_api_get_network_report+0x46c>
 8014872:	e7fe      	b.n	8014872 <ai_platform_api_get_network_report+0x40a>
 8014874:	2400      	movs	r4, #0
 8014876:	f8cb 4038 	str.w	r4, [fp, #56]	; 0x38
 801487a:	f8ab 4032 	strh.w	r4, [fp, #50]	; 0x32
 801487e:	2218      	movs	r2, #24
 8014880:	2113      	movs	r1, #19
 8014882:	f107 0010 	add.w	r0, r7, #16
 8014886:	f000 fed7 	bl	8015638 <core_set_error>
 801488a:	e63b      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 801488c:	2218      	movs	r2, #24
 801488e:	2111      	movs	r1, #17
 8014890:	f107 0010 	add.w	r0, r7, #16
 8014894:	f000 fed0 	bl	8015638 <core_set_error>
 8014898:	e634      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 801489a:	e7fe      	b.n	801489a <ai_platform_api_get_network_report+0x432>
 801489c:	e7fe      	b.n	801489c <ai_platform_api_get_network_report+0x434>
 801489e:	2213      	movs	r2, #19
 80148a0:	2111      	movs	r1, #17
 80148a2:	f107 0010 	add.w	r0, r7, #16
 80148a6:	f000 fec7 	bl	8015638 <core_set_error>
 80148aa:	e62b      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 80148ac:	2212      	movs	r2, #18
 80148ae:	2111      	movs	r1, #17
 80148b0:	f107 0010 	add.w	r0, r7, #16
 80148b4:	f000 fec0 	bl	8015638 <core_set_error>
 80148b8:	e624      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 80148ba:	e7fe      	b.n	80148ba <ai_platform_api_get_network_report+0x452>
 80148bc:	4b45      	ldr	r3, [pc, #276]	; (80149d4 <ai_platform_api_get_network_report+0x56c>)
 80148be:	2201      	movs	r2, #1
 80148c0:	609a      	str	r2, [r3, #8]
 80148c2:	689a      	ldr	r2, [r3, #8]
 80148c4:	2a00      	cmp	r2, #0
 80148c6:	d1fc      	bne.n	80148c2 <ai_platform_api_get_network_report+0x45a>
 80148c8:	4a40      	ldr	r2, [pc, #256]	; (80149cc <ai_platform_api_get_network_report+0x564>)
 80148ca:	601a      	str	r2, [r3, #0]
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	4b40      	ldr	r3, [pc, #256]	; (80149d0 <ai_platform_api_get_network_report+0x568>)
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d149      	bne.n	8014968 <ai_platform_api_get_network_report+0x500>
 80148d4:	f7ff f998 	bl	8013c08 <_ai_platform_release_crc>
 80148d8:	f240 5301 	movw	r3, #1281	; 0x501
 80148dc:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 80148e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80148e2:	f004 fda5 	bl	8019430 <ai_platform_version_get>
 80148e6:	4b3d      	ldr	r3, [pc, #244]	; (80149dc <ai_platform_api_get_network_report+0x574>)
 80148e8:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 80148ec:	f8cb 0020 	str.w	r0, [fp, #32]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d10d      	bne.n	8014910 <ai_platform_api_get_network_report+0x4a8>
 80148f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80148f8:	f10b 0248 	add.w	r2, fp, #72	; 0x48
 80148fc:	e882 0003 	stmia.w	r2, {r0, r1}
 8014900:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014904:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 8014908:	e883 0003 	stmia.w	r3, {r0, r1}
 801490c:	2401      	movs	r4, #1
 801490e:	e5f9      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 8014910:	2200      	movs	r2, #0
 8014912:	e9cb 2210 	strd	r2, r2, [fp, #64]	; 0x40
 8014916:	e9cb 2212 	strd	r2, r2, [fp, #72]	; 0x48
 801491a:	4b31      	ldr	r3, [pc, #196]	; (80149e0 <ai_platform_api_get_network_report+0x578>)
 801491c:	4a31      	ldr	r2, [pc, #196]	; (80149e4 <ai_platform_api_get_network_report+0x57c>)
 801491e:	f8cb 203c 	str.w	r2, [fp, #60]	; 0x3c
 8014922:	f240 4201 	movw	r2, #1025	; 0x401
 8014926:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
 801492a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801492c:	f10d 0908 	add.w	r9, sp, #8
 8014930:	f10b 043c 	add.w	r4, fp, #60	; 0x3c
 8014934:	f8cb 9054 	str.w	r9, [fp, #84]	; 0x54
 8014938:	46a6      	mov	lr, r4
 801493a:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 801493e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014942:	f10b 0858 	add.w	r8, fp, #88	; 0x58
 8014946:	46c4      	mov	ip, r8
 8014948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801494c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8014950:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8014954:	4628      	mov	r0, r5
 8014956:	f7ff f93b 	bl	8013bd0 <ai_buffer_array_sane>
 801495a:	b990      	cbnz	r0, 8014982 <ai_platform_api_get_network_report+0x51a>
 801495c:	4630      	mov	r0, r6
 801495e:	f7ff f937 	bl	8013bd0 <ai_buffer_array_sane>
 8014962:	b910      	cbnz	r0, 801496a <ai_platform_api_get_network_report+0x502>
 8014964:	2401      	movs	r4, #1
 8014966:	e5cd      	b.n	8014504 <ai_platform_api_get_network_report+0x9c>
 8014968:	e7fe      	b.n	8014968 <ai_platform_api_get_network_report+0x500>
 801496a:	4630      	mov	r0, r6
 801496c:	f7ff f930 	bl	8013bd0 <ai_buffer_array_sane>
 8014970:	b1b0      	cbz	r0, 80149a0 <ai_platform_api_get_network_report+0x538>
 8014972:	6a3d      	ldr	r5, [r7, #32]
 8014974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014978:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801497c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014980:	e7f0      	b.n	8014964 <ai_platform_api_get_network_report+0x4fc>
 8014982:	4628      	mov	r0, r5
 8014984:	f7ff f924 	bl	8013bd0 <ai_buffer_array_sane>
 8014988:	b190      	cbz	r0, 80149b0 <ai_platform_api_get_network_report+0x548>
 801498a:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 801498e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014992:	4645      	mov	r5, r8
 8014994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014996:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801499a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801499e:	e7dd      	b.n	801495c <ai_platform_api_get_network_report+0x4f4>
 80149a0:	4605      	mov	r5, r0
 80149a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80149aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80149ae:	deff      	udf	#255	; 0xff
 80149b0:	4604      	mov	r4, r0
 80149b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149b4:	4645      	mov	r5, r8
 80149b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80149bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80149c0:	deff      	udf	#255	; 0xff
 80149c2:	bf00      	nop
 80149c4:	e0042000 	.word	0xe0042000
 80149c8:	58024000 	.word	0x58024000
 80149cc:	f407a5c2 	.word	0xf407a5c2
 80149d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80149d4:	40023000 	.word	0x40023000
 80149d8:	08022158 	.word	0x08022158
 80149dc:	a1facade 	.word	0xa1facade
 80149e0:	080207e8 	.word	0x080207e8
 80149e4:	00040440 	.word	0x00040440

080149e8 <ai_platform_network_create>:
 80149e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149ec:	b083      	sub	sp, #12
 80149ee:	4606      	mov	r6, r0
 80149f0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80149f4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80149f8:	4615      	mov	r5, r2
 80149fa:	461f      	mov	r7, r3
 80149fc:	f7ff f902 	bl	8013c04 <_ai_platform_acquire_crc>
 8014a00:	b188      	cbz	r0, 8014a26 <ai_platform_network_create+0x3e>
 8014a02:	4a5d      	ldr	r2, [pc, #372]	; (8014b78 <ai_platform_network_create+0x190>)
 8014a04:	6812      	ldr	r2, [r2, #0]
 8014a06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8014a0a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8014a0e:	4603      	mov	r3, r0
 8014a10:	d00e      	beq.n	8014a30 <ai_platform_network_create+0x48>
 8014a12:	4a5a      	ldr	r2, [pc, #360]	; (8014b7c <ai_platform_network_create+0x194>)
 8014a14:	2118      	movs	r1, #24
 8014a16:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8014a1a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8014a1e:	2918      	cmp	r1, #24
 8014a20:	d018      	beq.n	8014a54 <ai_platform_network_create+0x6c>
 8014a22:	f7ff f8f1 	bl	8013c08 <_ai_platform_release_crc>
 8014a26:	f244 1033 	movw	r0, #16691	; 0x4133
 8014a2a:	b003      	add	sp, #12
 8014a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a30:	4a53      	ldr	r2, [pc, #332]	; (8014b80 <ai_platform_network_create+0x198>)
 8014a32:	2101      	movs	r1, #1
 8014a34:	6091      	str	r1, [r2, #8]
 8014a36:	2114      	movs	r1, #20
 8014a38:	e001      	b.n	8014a3e <ai_platform_network_create+0x56>
 8014a3a:	3901      	subs	r1, #1
 8014a3c:	d002      	beq.n	8014a44 <ai_platform_network_create+0x5c>
 8014a3e:	6894      	ldr	r4, [r2, #8]
 8014a40:	2c00      	cmp	r4, #0
 8014a42:	d1fa      	bne.n	8014a3a <ai_platform_network_create+0x52>
 8014a44:	4a4e      	ldr	r2, [pc, #312]	; (8014b80 <ai_platform_network_create+0x198>)
 8014a46:	6891      	ldr	r1, [r2, #8]
 8014a48:	b911      	cbnz	r1, 8014a50 <ai_platform_network_create+0x68>
 8014a4a:	6812      	ldr	r2, [r2, #0]
 8014a4c:	3201      	adds	r2, #1
 8014a4e:	d008      	beq.n	8014a62 <ai_platform_network_create+0x7a>
 8014a50:	4618      	mov	r0, r3
 8014a52:	e7e6      	b.n	8014a22 <ai_platform_network_create+0x3a>
 8014a54:	2101      	movs	r1, #1
 8014a56:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8014a5a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8014a5e:	2900      	cmp	r1, #0
 8014a60:	d1fb      	bne.n	8014a5a <ai_platform_network_create+0x72>
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7ff f8d0 	bl	8013c08 <_ai_platform_release_crc>
 8014a68:	f7ff f8cc 	bl	8013c04 <_ai_platform_acquire_crc>
 8014a6c:	4b42      	ldr	r3, [pc, #264]	; (8014b78 <ai_platform_network_create+0x190>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a78:	d010      	beq.n	8014a9c <ai_platform_network_create+0xb4>
 8014a7a:	4b40      	ldr	r3, [pc, #256]	; (8014b7c <ai_platform_network_create+0x194>)
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8014a82:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8014a86:	2900      	cmp	r1, #0
 8014a88:	d1fb      	bne.n	8014a82 <ai_platform_network_create+0x9a>
 8014a8a:	4a3e      	ldr	r2, [pc, #248]	; (8014b84 <ai_platform_network_create+0x19c>)
 8014a8c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8014a90:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8014a94:	4b3c      	ldr	r3, [pc, #240]	; (8014b88 <ai_platform_network_create+0x1a0>)
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d00c      	beq.n	8014ab4 <ai_platform_network_create+0xcc>
 8014a9a:	e7fe      	b.n	8014a9a <ai_platform_network_create+0xb2>
 8014a9c:	4a38      	ldr	r2, [pc, #224]	; (8014b80 <ai_platform_network_create+0x198>)
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	6093      	str	r3, [r2, #8]
 8014aa2:	6893      	ldr	r3, [r2, #8]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d1fc      	bne.n	8014aa2 <ai_platform_network_create+0xba>
 8014aa8:	4b36      	ldr	r3, [pc, #216]	; (8014b84 <ai_platform_network_create+0x19c>)
 8014aaa:	6013      	str	r3, [r2, #0]
 8014aac:	6812      	ldr	r2, [r2, #0]
 8014aae:	4b36      	ldr	r3, [pc, #216]	; (8014b88 <ai_platform_network_create+0x1a0>)
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d122      	bne.n	8014afa <ai_platform_network_create+0x112>
 8014ab4:	f7ff f8a8 	bl	8013c08 <_ai_platform_release_crc>
 8014ab8:	b38e      	cbz	r6, 8014b1e <ai_platform_network_create+0x136>
 8014aba:	4b34      	ldr	r3, [pc, #208]	; (8014b8c <ai_platform_network_create+0x1a4>)
 8014abc:	602b      	str	r3, [r5, #0]
 8014abe:	6035      	str	r5, [r6, #0]
 8014ac0:	f000 fdb2 	bl	8015628 <core_init>
 8014ac4:	b1d0      	cbz	r0, 8014afc <ai_platform_network_create+0x114>
 8014ac6:	f7ff f89d 	bl	8013c04 <_ai_platform_acquire_crc>
 8014aca:	4b2b      	ldr	r3, [pc, #172]	; (8014b78 <ai_platform_network_create+0x190>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ad6:	d025      	beq.n	8014b24 <ai_platform_network_create+0x13c>
 8014ad8:	4a28      	ldr	r2, [pc, #160]	; (8014b7c <ai_platform_network_create+0x194>)
 8014ada:	2301      	movs	r3, #1
 8014adc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014ae0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1fb      	bne.n	8014ae0 <ai_platform_network_create+0xf8>
 8014ae8:	4b26      	ldr	r3, [pc, #152]	; (8014b84 <ai_platform_network_create+0x19c>)
 8014aea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014aee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014af2:	4b25      	ldr	r3, [pc, #148]	; (8014b88 <ai_platform_network_create+0x1a0>)
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d022      	beq.n	8014b3e <ai_platform_network_create+0x156>
 8014af8:	e7fe      	b.n	8014af8 <ai_platform_network_create+0x110>
 8014afa:	e7fe      	b.n	8014afa <ai_platform_network_create+0x112>
 8014afc:	2430      	movs	r4, #48	; 0x30
 8014afe:	2300      	movs	r3, #0
 8014b00:	6033      	str	r3, [r6, #0]
 8014b02:	2610      	movs	r6, #16
 8014b04:	464a      	mov	r2, r9
 8014b06:	4641      	mov	r1, r8
 8014b08:	4638      	mov	r0, r7
 8014b0a:	f004 fc8b 	bl	8019424 <ai_version_get>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2000      	movs	r0, #0
 8014b12:	f364 0007 	bfi	r0, r4, #0, #8
 8014b16:	64ab      	str	r3, [r5, #72]	; 0x48
 8014b18:	f366 201f 	bfi	r0, r6, #8, #24
 8014b1c:	e785      	b.n	8014a2a <ai_platform_network_create+0x42>
 8014b1e:	f241 0010 	movw	r0, #4112	; 0x1010
 8014b22:	e782      	b.n	8014a2a <ai_platform_network_create+0x42>
 8014b24:	4a16      	ldr	r2, [pc, #88]	; (8014b80 <ai_platform_network_create+0x198>)
 8014b26:	2301      	movs	r3, #1
 8014b28:	6093      	str	r3, [r2, #8]
 8014b2a:	6893      	ldr	r3, [r2, #8]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d1fc      	bne.n	8014b2a <ai_platform_network_create+0x142>
 8014b30:	4b14      	ldr	r3, [pc, #80]	; (8014b84 <ai_platform_network_create+0x19c>)
 8014b32:	6013      	str	r3, [r2, #0]
 8014b34:	6812      	ldr	r2, [r2, #0]
 8014b36:	4b14      	ldr	r3, [pc, #80]	; (8014b88 <ai_platform_network_create+0x1a0>)
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d000      	beq.n	8014b3e <ai_platform_network_create+0x156>
 8014b3c:	e7fe      	b.n	8014b3c <ai_platform_network_create+0x154>
 8014b3e:	f7ff f863 	bl	8013c08 <_ai_platform_release_crc>
 8014b42:	2200      	movs	r2, #0
 8014b44:	4641      	mov	r1, r8
 8014b46:	4638      	mov	r0, r7
 8014b48:	f004 fc6c 	bl	8019424 <ai_version_get>
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	4604      	mov	r4, r0
 8014b50:	2105      	movs	r1, #5
 8014b52:	2001      	movs	r0, #1
 8014b54:	f004 fc66 	bl	8019424 <ai_version_get>
 8014b58:	4284      	cmp	r4, r0
 8014b5a:	d001      	beq.n	8014b60 <ai_platform_network_create+0x178>
 8014b5c:	2401      	movs	r4, #1
 8014b5e:	e7ce      	b.n	8014afe <ai_platform_network_create+0x116>
 8014b60:	4b0b      	ldr	r3, [pc, #44]	; (8014b90 <ai_platform_network_create+0x1a8>)
 8014b62:	9301      	str	r3, [sp, #4]
 8014b64:	a801      	add	r0, sp, #4
 8014b66:	f001 fbcf 	bl	8016308 <ai_check_custom_types>
 8014b6a:	b110      	cbz	r0, 8014b72 <ai_platform_network_create+0x18a>
 8014b6c:	2600      	movs	r6, #0
 8014b6e:	4634      	mov	r4, r6
 8014b70:	e7c8      	b.n	8014b04 <ai_platform_network_create+0x11c>
 8014b72:	2402      	movs	r4, #2
 8014b74:	e7c3      	b.n	8014afe <ai_platform_network_create+0x116>
 8014b76:	bf00      	nop
 8014b78:	e0042000 	.word	0xe0042000
 8014b7c:	58024000 	.word	0x58024000
 8014b80:	40023000 	.word	0x40023000
 8014b84:	f407a5c2 	.word	0xf407a5c2
 8014b88:	b5e8b5cd 	.word	0xb5e8b5cd
 8014b8c:	a1c00100 	.word	0xa1c00100
 8014b90:	84048403 	.word	0x84048403

08014b94 <ai_platform_network_init>:
 8014b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b98:	b1f8      	cbz	r0, 8014bda <ai_platform_network_init+0x46>
 8014b9a:	4b6e      	ldr	r3, [pc, #440]	; (8014d54 <ai_platform_network_init+0x1c0>)
 8014b9c:	6802      	ldr	r2, [r0, #0]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	d11a      	bne.n	8014bda <ai_platform_network_init+0x46>
 8014ba4:	460e      	mov	r6, r1
 8014ba6:	f7ff f82d 	bl	8013c04 <_ai_platform_acquire_crc>
 8014baa:	4b6b      	ldr	r3, [pc, #428]	; (8014d58 <ai_platform_network_init+0x1c4>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bb6:	d03d      	beq.n	8014c34 <ai_platform_network_init+0xa0>
 8014bb8:	4a68      	ldr	r2, [pc, #416]	; (8014d5c <ai_platform_network_init+0x1c8>)
 8014bba:	2301      	movs	r3, #1
 8014bbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014bc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d1fb      	bne.n	8014bc0 <ai_platform_network_init+0x2c>
 8014bc8:	4b65      	ldr	r3, [pc, #404]	; (8014d60 <ai_platform_network_init+0x1cc>)
 8014bca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014bce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014bd2:	4b64      	ldr	r3, [pc, #400]	; (8014d64 <ai_platform_network_init+0x1d0>)
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d039      	beq.n	8014c4c <ai_platform_network_init+0xb8>
 8014bd8:	e7fe      	b.n	8014bd8 <ai_platform_network_init+0x44>
 8014bda:	f7ff f813 	bl	8013c04 <_ai_platform_acquire_crc>
 8014bde:	4b5e      	ldr	r3, [pc, #376]	; (8014d58 <ai_platform_network_init+0x1c4>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bea:	d010      	beq.n	8014c0e <ai_platform_network_init+0x7a>
 8014bec:	4a5b      	ldr	r2, [pc, #364]	; (8014d5c <ai_platform_network_init+0x1c8>)
 8014bee:	2301      	movs	r3, #1
 8014bf0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014bf4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1fb      	bne.n	8014bf4 <ai_platform_network_init+0x60>
 8014bfc:	4b58      	ldr	r3, [pc, #352]	; (8014d60 <ai_platform_network_init+0x1cc>)
 8014bfe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014c02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014c06:	4b57      	ldr	r3, [pc, #348]	; (8014d64 <ai_platform_network_init+0x1d0>)
 8014c08:	429a      	cmp	r2, r3
 8014c0a:	d00d      	beq.n	8014c28 <ai_platform_network_init+0x94>
 8014c0c:	e7fe      	b.n	8014c0c <ai_platform_network_init+0x78>
 8014c0e:	4a56      	ldr	r2, [pc, #344]	; (8014d68 <ai_platform_network_init+0x1d4>)
 8014c10:	2301      	movs	r3, #1
 8014c12:	6093      	str	r3, [r2, #8]
 8014c14:	6893      	ldr	r3, [r2, #8]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d1fc      	bne.n	8014c14 <ai_platform_network_init+0x80>
 8014c1a:	4b51      	ldr	r3, [pc, #324]	; (8014d60 <ai_platform_network_init+0x1cc>)
 8014c1c:	6013      	str	r3, [r2, #0]
 8014c1e:	6812      	ldr	r2, [r2, #0]
 8014c20:	4b50      	ldr	r3, [pc, #320]	; (8014d64 <ai_platform_network_init+0x1d0>)
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d000      	beq.n	8014c28 <ai_platform_network_init+0x94>
 8014c26:	e7fe      	b.n	8014c26 <ai_platform_network_init+0x92>
 8014c28:	f7fe ffee 	bl	8013c08 <_ai_platform_release_crc>
 8014c2c:	2600      	movs	r6, #0
 8014c2e:	4630      	mov	r0, r6
 8014c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c34:	4a4c      	ldr	r2, [pc, #304]	; (8014d68 <ai_platform_network_init+0x1d4>)
 8014c36:	2301      	movs	r3, #1
 8014c38:	6093      	str	r3, [r2, #8]
 8014c3a:	6893      	ldr	r3, [r2, #8]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d1fc      	bne.n	8014c3a <ai_platform_network_init+0xa6>
 8014c40:	4b47      	ldr	r3, [pc, #284]	; (8014d60 <ai_platform_network_init+0x1cc>)
 8014c42:	6013      	str	r3, [r2, #0]
 8014c44:	6812      	ldr	r2, [r2, #0]
 8014c46:	4b47      	ldr	r3, [pc, #284]	; (8014d64 <ai_platform_network_init+0x1d0>)
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d11c      	bne.n	8014c86 <ai_platform_network_init+0xf2>
 8014c4c:	f7fe ffdc 	bl	8013c08 <_ai_platform_release_crc>
 8014c50:	2e00      	cmp	r6, #0
 8014c52:	d06f      	beq.n	8014d34 <ai_platform_network_init+0x1a0>
 8014c54:	4b45      	ldr	r3, [pc, #276]	; (8014d6c <ai_platform_network_init+0x1d8>)
 8014c56:	6832      	ldr	r2, [r6, #0]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d115      	bne.n	8014c88 <ai_platform_network_init+0xf4>
 8014c5c:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014c60:	6933      	ldr	r3, [r6, #16]
 8014c62:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8014c66:	89f7      	ldrh	r7, [r6, #14]
 8014c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c6a:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8014c6e:	2303      	movs	r3, #3
 8014c70:	84e7      	strh	r7, [r4, #38]	; 0x26
 8014c72:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8014c76:	60e3      	str	r3, [r4, #12]
 8014c78:	4620      	mov	r0, r4
 8014c7a:	4626      	mov	r6, r4
 8014c7c:	f001 fb6e 	bl	801635c <ai_layers_init_all>
 8014c80:	4630      	mov	r0, r6
 8014c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c86:	e7fe      	b.n	8014c86 <ai_platform_network_init+0xf2>
 8014c88:	2101      	movs	r1, #1
 8014c8a:	4630      	mov	r0, r6
 8014c8c:	4635      	mov	r5, r6
 8014c8e:	6876      	ldr	r6, [r6, #4]
 8014c90:	f7fe ff6a 	bl	8013b68 <ai_buffer_get_size>
 8014c94:	f105 081c 	add.w	r8, r5, #28
 8014c98:	4681      	mov	r9, r0
 8014c9a:	2101      	movs	r1, #1
 8014c9c:	4640      	mov	r0, r8
 8014c9e:	6a2f      	ldr	r7, [r5, #32]
 8014ca0:	f7fe ff62 	bl	8013b68 <ai_buffer_get_size>
 8014ca4:	f1b9 0f00 	cmp.w	r9, #0
 8014ca8:	d025      	beq.n	8014cf6 <ai_platform_network_init+0x162>
 8014caa:	2201      	movs	r2, #1
 8014cac:	4696      	mov	lr, r2
 8014cae:	bb30      	cbnz	r0, 8014cfe <ai_platform_network_init+0x16a>
 8014cb0:	4680      	mov	r8, r0
 8014cb2:	4607      	mov	r7, r0
 8014cb4:	b376      	cbz	r6, 8014d14 <ai_platform_network_init+0x180>
 8014cb6:	8be3      	ldrh	r3, [r4, #30]
 8014cb8:	4573      	cmp	r3, lr
 8014cba:	d323      	bcc.n	8014d04 <ai_platform_network_init+0x170>
 8014cbc:	b142      	cbz	r2, 8014cd0 <ai_platform_network_init+0x13c>
 8014cbe:	46ac      	mov	ip, r5
 8014cc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014cc4:	6a25      	ldr	r5, [r4, #32]
 8014cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cc8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014ccc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8014cd0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8014cd2:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8014cd6:	2600      	movs	r6, #0
 8014cd8:	42bb      	cmp	r3, r7
 8014cda:	83a6      	strh	r6, [r4, #28]
 8014cdc:	d323      	bcc.n	8014d26 <ai_platform_network_init+0x192>
 8014cde:	b37f      	cbz	r7, 8014d40 <ai_platform_network_init+0x1ac>
 8014ce0:	46c4      	mov	ip, r8
 8014ce2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ce6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8014ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014cee:	46b6      	mov	lr, r6
 8014cf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8014cf4:	e7bb      	b.n	8014c6e <ai_platform_network_init+0xda>
 8014cf6:	464a      	mov	r2, r9
 8014cf8:	46ce      	mov	lr, r9
 8014cfa:	464d      	mov	r5, r9
 8014cfc:	e7d7      	b.n	8014cae <ai_platform_network_init+0x11a>
 8014cfe:	b30f      	cbz	r7, 8014d44 <ai_platform_network_init+0x1b0>
 8014d00:	2701      	movs	r7, #1
 8014d02:	e7d7      	b.n	8014cb4 <ai_platform_network_init+0x120>
 8014d04:	2212      	movs	r2, #18
 8014d06:	2116      	movs	r1, #22
 8014d08:	f104 0010 	add.w	r0, r4, #16
 8014d0c:	f000 fc94 	bl	8015638 <core_set_error>
 8014d10:	2600      	movs	r6, #0
 8014d12:	e78c      	b.n	8014c2e <ai_platform_network_init+0x9a>
 8014d14:	f1b9 0f00 	cmp.w	r9, #0
 8014d18:	d0cd      	beq.n	8014cb6 <ai_platform_network_init+0x122>
 8014d1a:	2110      	movs	r1, #16
 8014d1c:	2212      	movs	r2, #18
 8014d1e:	1860      	adds	r0, r4, r1
 8014d20:	f000 fc8a 	bl	8015638 <core_set_error>
 8014d24:	e783      	b.n	8014c2e <ai_platform_network_init+0x9a>
 8014d26:	2213      	movs	r2, #19
 8014d28:	2116      	movs	r1, #22
 8014d2a:	f104 0010 	add.w	r0, r4, #16
 8014d2e:	f000 fc83 	bl	8015638 <core_set_error>
 8014d32:	e77c      	b.n	8014c2e <ai_platform_network_init+0x9a>
 8014d34:	2110      	movs	r1, #16
 8014d36:	2211      	movs	r2, #17
 8014d38:	1860      	adds	r0, r4, r1
 8014d3a:	f000 fc7d 	bl	8015638 <core_set_error>
 8014d3e:	e776      	b.n	8014c2e <ai_platform_network_init+0x9a>
 8014d40:	46be      	mov	lr, r7
 8014d42:	e794      	b.n	8014c6e <ai_platform_network_init+0xda>
 8014d44:	2110      	movs	r1, #16
 8014d46:	2213      	movs	r2, #19
 8014d48:	1860      	adds	r0, r4, r1
 8014d4a:	f000 fc75 	bl	8015638 <core_set_error>
 8014d4e:	463e      	mov	r6, r7
 8014d50:	e76d      	b.n	8014c2e <ai_platform_network_init+0x9a>
 8014d52:	bf00      	nop
 8014d54:	a1c00100 	.word	0xa1c00100
 8014d58:	e0042000 	.word	0xe0042000
 8014d5c:	58024000 	.word	0x58024000
 8014d60:	f407a5c2 	.word	0xf407a5c2
 8014d64:	b5e8b5cd 	.word	0xb5e8b5cd
 8014d68:	40023000 	.word	0x40023000
 8014d6c:	a1facade 	.word	0xa1facade

08014d70 <ai_platform_network_post_init>:
 8014d70:	b538      	push	{r3, r4, r5, lr}
 8014d72:	b1f0      	cbz	r0, 8014db2 <ai_platform_network_post_init+0x42>
 8014d74:	4b3c      	ldr	r3, [pc, #240]	; (8014e68 <ai_platform_network_post_init+0xf8>)
 8014d76:	6802      	ldr	r2, [r0, #0]
 8014d78:	429a      	cmp	r2, r3
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	d119      	bne.n	8014db2 <ai_platform_network_post_init+0x42>
 8014d7e:	f7fe ff41 	bl	8013c04 <_ai_platform_acquire_crc>
 8014d82:	4b3a      	ldr	r3, [pc, #232]	; (8014e6c <ai_platform_network_post_init+0xfc>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d8e:	d03b      	beq.n	8014e08 <ai_platform_network_post_init+0x98>
 8014d90:	4a37      	ldr	r2, [pc, #220]	; (8014e70 <ai_platform_network_post_init+0x100>)
 8014d92:	2301      	movs	r3, #1
 8014d94:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014d98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d1fb      	bne.n	8014d98 <ai_platform_network_post_init+0x28>
 8014da0:	4b34      	ldr	r3, [pc, #208]	; (8014e74 <ai_platform_network_post_init+0x104>)
 8014da2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014da6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014daa:	4b33      	ldr	r3, [pc, #204]	; (8014e78 <ai_platform_network_post_init+0x108>)
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d037      	beq.n	8014e20 <ai_platform_network_post_init+0xb0>
 8014db0:	e7fe      	b.n	8014db0 <ai_platform_network_post_init+0x40>
 8014db2:	f7fe ff27 	bl	8013c04 <_ai_platform_acquire_crc>
 8014db6:	4b2d      	ldr	r3, [pc, #180]	; (8014e6c <ai_platform_network_post_init+0xfc>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014dc2:	d010      	beq.n	8014de6 <ai_platform_network_post_init+0x76>
 8014dc4:	4a2a      	ldr	r2, [pc, #168]	; (8014e70 <ai_platform_network_post_init+0x100>)
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014dcc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d1fb      	bne.n	8014dcc <ai_platform_network_post_init+0x5c>
 8014dd4:	4b27      	ldr	r3, [pc, #156]	; (8014e74 <ai_platform_network_post_init+0x104>)
 8014dd6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014dda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014dde:	4b26      	ldr	r3, [pc, #152]	; (8014e78 <ai_platform_network_post_init+0x108>)
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d00d      	beq.n	8014e00 <ai_platform_network_post_init+0x90>
 8014de4:	e7fe      	b.n	8014de4 <ai_platform_network_post_init+0x74>
 8014de6:	4a25      	ldr	r2, [pc, #148]	; (8014e7c <ai_platform_network_post_init+0x10c>)
 8014de8:	2301      	movs	r3, #1
 8014dea:	6093      	str	r3, [r2, #8]
 8014dec:	6893      	ldr	r3, [r2, #8]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1fc      	bne.n	8014dec <ai_platform_network_post_init+0x7c>
 8014df2:	4b20      	ldr	r3, [pc, #128]	; (8014e74 <ai_platform_network_post_init+0x104>)
 8014df4:	6013      	str	r3, [r2, #0]
 8014df6:	6812      	ldr	r2, [r2, #0]
 8014df8:	4b1f      	ldr	r3, [pc, #124]	; (8014e78 <ai_platform_network_post_init+0x108>)
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	d000      	beq.n	8014e00 <ai_platform_network_post_init+0x90>
 8014dfe:	e7fe      	b.n	8014dfe <ai_platform_network_post_init+0x8e>
 8014e00:	f7fe ff02 	bl	8013c08 <_ai_platform_release_crc>
 8014e04:	2000      	movs	r0, #0
 8014e06:	bd38      	pop	{r3, r4, r5, pc}
 8014e08:	4a1c      	ldr	r2, [pc, #112]	; (8014e7c <ai_platform_network_post_init+0x10c>)
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	6093      	str	r3, [r2, #8]
 8014e0e:	6893      	ldr	r3, [r2, #8]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d1fc      	bne.n	8014e0e <ai_platform_network_post_init+0x9e>
 8014e14:	4b17      	ldr	r3, [pc, #92]	; (8014e74 <ai_platform_network_post_init+0x104>)
 8014e16:	6013      	str	r3, [r2, #0]
 8014e18:	6812      	ldr	r2, [r2, #0]
 8014e1a:	4b17      	ldr	r3, [pc, #92]	; (8014e78 <ai_platform_network_post_init+0x108>)
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d11a      	bne.n	8014e56 <ai_platform_network_post_init+0xe6>
 8014e20:	f7fe fef2 	bl	8013c08 <_ai_platform_release_crc>
 8014e24:	68e3      	ldr	r3, [r4, #12]
 8014e26:	f013 0502 	ands.w	r5, r3, #2
 8014e2a:	d015      	beq.n	8014e58 <ai_platform_network_post_init+0xe8>
 8014e2c:	4620      	mov	r0, r4
 8014e2e:	f001 faa3 	bl	8016378 <ai_layers_post_init_all>
 8014e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014e34:	b16b      	cbz	r3, 8014e52 <ai_platform_network_post_init+0xe2>
 8014e36:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8014e38:	e007      	b.n	8014e4a <ai_platform_network_post_init+0xda>
 8014e3a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8014e3e:	4798      	blx	r3
 8014e40:	692b      	ldr	r3, [r5, #16]
 8014e42:	42ab      	cmp	r3, r5
 8014e44:	d005      	beq.n	8014e52 <ai_platform_network_post_init+0xe2>
 8014e46:	b123      	cbz	r3, 8014e52 <ai_platform_network_post_init+0xe2>
 8014e48:	461d      	mov	r5, r3
 8014e4a:	4629      	mov	r1, r5
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	2d00      	cmp	r5, #0
 8014e50:	d1f3      	bne.n	8014e3a <ai_platform_network_post_init+0xca>
 8014e52:	2001      	movs	r0, #1
 8014e54:	bd38      	pop	{r3, r4, r5, pc}
 8014e56:	e7fe      	b.n	8014e56 <ai_platform_network_post_init+0xe6>
 8014e58:	2210      	movs	r2, #16
 8014e5a:	2111      	movs	r1, #17
 8014e5c:	18a0      	adds	r0, r4, r2
 8014e5e:	f000 fbeb 	bl	8015638 <core_set_error>
 8014e62:	4628      	mov	r0, r5
 8014e64:	bd38      	pop	{r3, r4, r5, pc}
 8014e66:	bf00      	nop
 8014e68:	a1c00100 	.word	0xa1c00100
 8014e6c:	e0042000 	.word	0xe0042000
 8014e70:	58024000 	.word	0x58024000
 8014e74:	f407a5c2 	.word	0xf407a5c2
 8014e78:	b5e8b5cd 	.word	0xb5e8b5cd
 8014e7c:	40023000 	.word	0x40023000

08014e80 <ai_platform_network_process>:
 8014e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	460e      	mov	r6, r1
 8014e86:	b085      	sub	sp, #20
 8014e88:	4693      	mov	fp, r2
 8014e8a:	4605      	mov	r5, r0
 8014e8c:	b120      	cbz	r0, 8014e98 <ai_platform_network_process+0x18>
 8014e8e:	4bb8      	ldr	r3, [pc, #736]	; (8015170 <ai_platform_network_process+0x2f0>)
 8014e90:	6802      	ldr	r2, [r0, #0]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	bf18      	it	ne
 8014e96:	2500      	movne	r5, #0
 8014e98:	f7fe feb4 	bl	8013c04 <_ai_platform_acquire_crc>
 8014e9c:	4bb5      	ldr	r3, [pc, #724]	; (8015174 <ai_platform_network_process+0x2f4>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ea8:	d010      	beq.n	8014ecc <ai_platform_network_process+0x4c>
 8014eaa:	4ab3      	ldr	r2, [pc, #716]	; (8015178 <ai_platform_network_process+0x2f8>)
 8014eac:	2301      	movs	r3, #1
 8014eae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014eb2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1fb      	bne.n	8014eb2 <ai_platform_network_process+0x32>
 8014eba:	4bb0      	ldr	r3, [pc, #704]	; (801517c <ai_platform_network_process+0x2fc>)
 8014ebc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014ec0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014ec4:	4bae      	ldr	r3, [pc, #696]	; (8015180 <ai_platform_network_process+0x300>)
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d00d      	beq.n	8014ee6 <ai_platform_network_process+0x66>
 8014eca:	e7fe      	b.n	8014eca <ai_platform_network_process+0x4a>
 8014ecc:	4aad      	ldr	r2, [pc, #692]	; (8015184 <ai_platform_network_process+0x304>)
 8014ece:	2301      	movs	r3, #1
 8014ed0:	6093      	str	r3, [r2, #8]
 8014ed2:	6893      	ldr	r3, [r2, #8]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d1fc      	bne.n	8014ed2 <ai_platform_network_process+0x52>
 8014ed8:	4ba8      	ldr	r3, [pc, #672]	; (801517c <ai_platform_network_process+0x2fc>)
 8014eda:	6013      	str	r3, [r2, #0]
 8014edc:	6812      	ldr	r2, [r2, #0]
 8014ede:	4ba8      	ldr	r3, [pc, #672]	; (8015180 <ai_platform_network_process+0x300>)
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	f040 812c 	bne.w	801513e <ai_platform_network_process+0x2be>
 8014ee6:	f7fe fe8f 	bl	8013c08 <_ai_platform_release_crc>
 8014eea:	2d00      	cmp	r5, #0
 8014eec:	f000 8154 	beq.w	8015198 <ai_platform_network_process+0x318>
 8014ef0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	f000 8124 	beq.w	8015140 <ai_platform_network_process+0x2c0>
 8014ef8:	68eb      	ldr	r3, [r5, #12]
 8014efa:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8014efe:	f003 0303 	and.w	r3, r3, #3
 8014f02:	2700      	movs	r7, #0
 8014f04:	2b03      	cmp	r3, #3
 8014f06:	616f      	str	r7, [r5, #20]
 8014f08:	f040 813e 	bne.w	8015188 <ai_platform_network_process+0x308>
 8014f0c:	2e00      	cmp	r6, #0
 8014f0e:	f000 811d 	beq.w	801514c <ai_platform_network_process+0x2cc>
 8014f12:	f1ba 0f00 	cmp.w	sl, #0
 8014f16:	f000 8119 	beq.w	801514c <ai_platform_network_process+0x2cc>
 8014f1a:	f8ba 3000 	ldrh.w	r3, [sl]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f000 8114 	beq.w	801514c <ai_platform_network_process+0x2cc>
 8014f24:	69b3      	ldr	r3, [r6, #24]
 8014f26:	f8cd b00c 	str.w	fp, [sp, #12]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8014f30:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d072      	beq.n	801501e <ai_platform_network_process+0x19e>
 8014f38:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8014f3c:	2c00      	cmp	r4, #0
 8014f3e:	d06e      	beq.n	801501e <ai_platform_network_process+0x19e>
 8014f40:	f8da 3008 	ldr.w	r3, [sl, #8]
 8014f44:	f8d3 9000 	ldr.w	r9, [r3]
 8014f48:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8014f4c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8014f50:	f000 81e0 	beq.w	8015314 <ai_platform_network_process+0x494>
 8014f54:	69a3      	ldr	r3, [r4, #24]
 8014f56:	2101      	movs	r1, #1
 8014f58:	4630      	mov	r0, r6
 8014f5a:	685d      	ldr	r5, [r3, #4]
 8014f5c:	f7fe fe04 	bl	8013b68 <ai_buffer_get_size>
 8014f60:	4285      	cmp	r5, r0
 8014f62:	f0c0 811b 	bcc.w	801519c <ai_platform_network_process+0x31c>
 8014f66:	68e0      	ldr	r0, [r4, #12]
 8014f68:	69b1      	ldr	r1, [r6, #24]
 8014f6a:	68c2      	ldr	r2, [r0, #12]
 8014f6c:	68cb      	ldr	r3, [r1, #12]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	f040 8114 	bne.w	801519c <ai_platform_network_process+0x31c>
 8014f74:	6882      	ldr	r2, [r0, #8]
 8014f76:	688b      	ldr	r3, [r1, #8]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	f040 810f 	bne.w	801519c <ai_platform_network_process+0x31c>
 8014f7e:	6842      	ldr	r2, [r0, #4]
 8014f80:	684b      	ldr	r3, [r1, #4]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	f040 810a 	bne.w	801519c <ai_platform_network_process+0x31c>
 8014f88:	69a3      	ldr	r3, [r4, #24]
 8014f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014f8e:	f004 fb0d 	bl	80195ac <ai_array_get_data_byte_size>
 8014f92:	4605      	mov	r5, r0
 8014f94:	4620      	mov	r0, r4
 8014f96:	f004 fa5d 	bl	8019454 <get_tensor_byte_size>
 8014f9a:	4285      	cmp	r5, r0
 8014f9c:	f0c0 80fe 	bcc.w	801519c <ai_platform_network_process+0x31c>
 8014fa0:	69a3      	ldr	r3, [r4, #24]
 8014fa2:	6818      	ldr	r0, [r3, #0]
 8014fa4:	f004 fa6e 	bl	8019484 <ai_array_to_buffer_fmt>
 8014fa8:	6833      	ldr	r3, [r6, #0]
 8014faa:	4058      	eors	r0, r3
 8014fac:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8014fb0:	f040 81bb 	bne.w	801532a <ai_platform_network_process+0x4aa>
 8014fb4:	6873      	ldr	r3, [r6, #4]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f000 81ae 	beq.w	8015318 <ai_platform_network_process+0x498>
 8014fbc:	69b3      	ldr	r3, [r6, #24]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f000 819e 	beq.w	8015302 <ai_platform_network_process+0x482>
 8014fc6:	9a01      	ldr	r2, [sp, #4]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	bf38      	it	cc
 8014fcc:	461a      	movcc	r2, r3
 8014fce:	4620      	mov	r0, r4
 8014fd0:	9201      	str	r2, [sp, #4]
 8014fd2:	f004 fa3f 	bl	8019454 <get_tensor_byte_size>
 8014fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8014fda:	69b3      	ldr	r3, [r6, #24]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	fb00 f303 	mul.w	r3, r0, r3
 8014fe2:	f8c8 300c 	str.w	r3, [r8, #12]
 8014fe6:	6871      	ldr	r1, [r6, #4]
 8014fe8:	f8c8 1004 	str.w	r1, [r8, #4]
 8014fec:	440b      	add	r3, r1
 8014fee:	f849 300b 	str.w	r3, [r9, fp]
 8014ff2:	69a0      	ldr	r0, [r4, #24]
 8014ff4:	6803      	ldr	r3, [r0, #0]
 8014ff6:	009a      	lsls	r2, r3, #2
 8014ff8:	f107 0701 	add.w	r7, r7, #1
 8014ffc:	f106 061c 	add.w	r6, r6, #28
 8015000:	f100 80af 	bmi.w	8015162 <ai_platform_network_process+0x2e2>
 8015004:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8015008:	1a9b      	subs	r3, r3, r2
 801500a:	4419      	add	r1, r3
 801500c:	6081      	str	r1, [r0, #8]
 801500e:	69a3      	ldr	r3, [r4, #24]
 8015010:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015014:	60da      	str	r2, [r3, #12]
 8015016:	f8ba 3000 	ldrh.w	r3, [sl]
 801501a:	42bb      	cmp	r3, r7
 801501c:	d888      	bhi.n	8014f30 <ai_platform_network_process+0xb0>
 801501e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8015022:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8015024:	f1bb 0f00 	cmp.w	fp, #0
 8015028:	f000 8188 	beq.w	801533c <ai_platform_network_process+0x4bc>
 801502c:	2a01      	cmp	r2, #1
 801502e:	f240 8160 	bls.w	80152f2 <ai_platform_network_process+0x472>
 8015032:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8015036:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801503a:	2b00      	cmp	r3, #0
 801503c:	f000 8159 	beq.w	80152f2 <ai_platform_network_process+0x472>
 8015040:	465e      	mov	r6, fp
 8015042:	2700      	movs	r7, #0
 8015044:	462c      	mov	r4, r5
 8015046:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801504a:	2b00      	cmp	r3, #0
 801504c:	f000 80b4 	beq.w	80151b8 <ai_platform_network_process+0x338>
 8015050:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8015054:	2d00      	cmp	r5, #0
 8015056:	f000 80af 	beq.w	80151b8 <ai_platform_network_process+0x338>
 801505a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801505e:	f8d3 8000 	ldr.w	r8, [r3]
 8015062:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8015066:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801506a:	f000 8173 	beq.w	8015354 <ai_platform_network_process+0x4d4>
 801506e:	69ab      	ldr	r3, [r5, #24]
 8015070:	2101      	movs	r1, #1
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	9302      	str	r3, [sp, #8]
 8015076:	4630      	mov	r0, r6
 8015078:	f7fe fd76 	bl	8013b68 <ai_buffer_get_size>
 801507c:	9b02      	ldr	r3, [sp, #8]
 801507e:	4283      	cmp	r3, r0
 8015080:	f0c0 8136 	bcc.w	80152f0 <ai_platform_network_process+0x470>
 8015084:	68e8      	ldr	r0, [r5, #12]
 8015086:	69b1      	ldr	r1, [r6, #24]
 8015088:	68c2      	ldr	r2, [r0, #12]
 801508a:	68cb      	ldr	r3, [r1, #12]
 801508c:	429a      	cmp	r2, r3
 801508e:	f040 812f 	bne.w	80152f0 <ai_platform_network_process+0x470>
 8015092:	6882      	ldr	r2, [r0, #8]
 8015094:	688b      	ldr	r3, [r1, #8]
 8015096:	429a      	cmp	r2, r3
 8015098:	f040 812a 	bne.w	80152f0 <ai_platform_network_process+0x470>
 801509c:	6842      	ldr	r2, [r0, #4]
 801509e:	684b      	ldr	r3, [r1, #4]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	f040 8125 	bne.w	80152f0 <ai_platform_network_process+0x470>
 80150a6:	69ab      	ldr	r3, [r5, #24]
 80150a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80150ac:	f004 fa7e 	bl	80195ac <ai_array_get_data_byte_size>
 80150b0:	9002      	str	r0, [sp, #8]
 80150b2:	4628      	mov	r0, r5
 80150b4:	f004 f9ce 	bl	8019454 <get_tensor_byte_size>
 80150b8:	9b02      	ldr	r3, [sp, #8]
 80150ba:	4283      	cmp	r3, r0
 80150bc:	f0c0 8118 	bcc.w	80152f0 <ai_platform_network_process+0x470>
 80150c0:	69ab      	ldr	r3, [r5, #24]
 80150c2:	6818      	ldr	r0, [r3, #0]
 80150c4:	f004 f9de 	bl	8019484 <ai_array_to_buffer_fmt>
 80150c8:	6833      	ldr	r3, [r6, #0]
 80150ca:	4058      	eors	r0, r3
 80150cc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80150d0:	f040 8138 	bne.w	8015344 <ai_platform_network_process+0x4c4>
 80150d4:	6873      	ldr	r3, [r6, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	f000 814f 	beq.w	801537a <ai_platform_network_process+0x4fa>
 80150dc:	69b3      	ldr	r3, [r6, #24]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f000 8141 	beq.w	8015368 <ai_platform_network_process+0x4e8>
 80150e6:	9a01      	ldr	r2, [sp, #4]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	bf38      	it	cc
 80150ec:	461a      	movcc	r2, r3
 80150ee:	4628      	mov	r0, r5
 80150f0:	9201      	str	r2, [sp, #4]
 80150f2:	f004 f9af 	bl	8019454 <get_tensor_byte_size>
 80150f6:	f8ca 0008 	str.w	r0, [sl, #8]
 80150fa:	69b3      	ldr	r3, [r6, #24]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	fb00 f303 	mul.w	r3, r0, r3
 8015102:	f8ca 300c 	str.w	r3, [sl, #12]
 8015106:	6871      	ldr	r1, [r6, #4]
 8015108:	f8ca 1004 	str.w	r1, [sl, #4]
 801510c:	440b      	add	r3, r1
 801510e:	f848 300b 	str.w	r3, [r8, fp]
 8015112:	69a8      	ldr	r0, [r5, #24]
 8015114:	6803      	ldr	r3, [r0, #0]
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	f107 0701 	add.w	r7, r7, #1
 801511c:	f106 061c 	add.w	r6, r6, #28
 8015120:	d445      	bmi.n	80151ae <ai_platform_network_process+0x32e>
 8015122:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8015126:	1a9b      	subs	r3, r3, r2
 8015128:	4419      	add	r1, r3
 801512a:	6081      	str	r1, [r0, #8]
 801512c:	69ab      	ldr	r3, [r5, #24]
 801512e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8015132:	60da      	str	r2, [r3, #12]
 8015134:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015138:	429f      	cmp	r7, r3
 801513a:	d384      	bcc.n	8015046 <ai_platform_network_process+0x1c6>
 801513c:	e03c      	b.n	80151b8 <ai_platform_network_process+0x338>
 801513e:	e7fe      	b.n	801513e <ai_platform_network_process+0x2be>
 8015140:	68ea      	ldr	r2, [r5, #12]
 8015142:	616b      	str	r3, [r5, #20]
 8015144:	f002 0203 	and.w	r2, r2, #3
 8015148:	2a03      	cmp	r2, #3
 801514a:	d11d      	bne.n	8015188 <ai_platform_network_process+0x308>
 801514c:	2217      	movs	r2, #23
 801514e:	2112      	movs	r1, #18
 8015150:	f105 0010 	add.w	r0, r5, #16
 8015154:	f000 fa70 	bl	8015638 <core_set_error>
 8015158:	2400      	movs	r4, #0
 801515a:	4620      	mov	r0, r4
 801515c:	b005      	add	sp, #20
 801515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015162:	f8ba 3000 	ldrh.w	r3, [sl]
 8015166:	429f      	cmp	r7, r3
 8015168:	f4ff aee2 	bcc.w	8014f30 <ai_platform_network_process+0xb0>
 801516c:	e757      	b.n	801501e <ai_platform_network_process+0x19e>
 801516e:	bf00      	nop
 8015170:	a1c00100 	.word	0xa1c00100
 8015174:	e0042000 	.word	0xe0042000
 8015178:	58024000 	.word	0x58024000
 801517c:	f407a5c2 	.word	0xf407a5c2
 8015180:	b5e8b5cd 	.word	0xb5e8b5cd
 8015184:	40023000 	.word	0x40023000
 8015188:	2230      	movs	r2, #48	; 0x30
 801518a:	2111      	movs	r1, #17
 801518c:	f105 0010 	add.w	r0, r5, #16
 8015190:	f000 fa52 	bl	8015638 <core_set_error>
 8015194:	2400      	movs	r4, #0
 8015196:	e7e0      	b.n	801515a <ai_platform_network_process+0x2da>
 8015198:	462c      	mov	r4, r5
 801519a:	e7de      	b.n	801515a <ai_platform_network_process+0x2da>
 801519c:	9d02      	ldr	r5, [sp, #8]
 801519e:	2218      	movs	r2, #24
 80151a0:	2112      	movs	r1, #18
 80151a2:	f105 0010 	add.w	r0, r5, #16
 80151a6:	f000 fa47 	bl	8015638 <core_set_error>
 80151aa:	2400      	movs	r4, #0
 80151ac:	e7d5      	b.n	801515a <ai_platform_network_process+0x2da>
 80151ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80151b2:	429f      	cmp	r7, r3
 80151b4:	f4ff af47 	bcc.w	8015046 <ai_platform_network_process+0x1c6>
 80151b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80151bc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80151be:	82a3      	strh	r3, [r4, #20]
 80151c0:	4625      	mov	r5, r4
 80151c2:	2a00      	cmp	r2, #0
 80151c4:	f040 808e 	bne.w	80152e4 <ai_platform_network_process+0x464>
 80151c8:	4616      	mov	r6, r2
 80151ca:	4617      	mov	r7, r2
 80151cc:	8aec      	ldrh	r4, [r5, #22]
 80151ce:	429c      	cmp	r4, r3
 80151d0:	bf38      	it	cc
 80151d2:	46ab      	movcc	fp, r5
 80151d4:	d2c1      	bcs.n	801515a <ai_platform_network_process+0x2da>
 80151d6:	2e00      	cmp	r6, #0
 80151d8:	d030      	beq.n	801523c <ai_platform_network_process+0x3bc>
 80151da:	f04f 0800 	mov.w	r8, #0
 80151de:	e014      	b.n	801520a <ai_platform_network_process+0x38a>
 80151e0:	6882      	ldr	r2, [r0, #8]
 80151e2:	68c5      	ldr	r5, [r0, #12]
 80151e4:	6863      	ldr	r3, [r4, #4]
 80151e6:	1b52      	subs	r2, r2, r5
 80151e8:	4413      	add	r3, r2
 80151ea:	6083      	str	r3, [r0, #8]
 80151ec:	698b      	ldr	r3, [r1, #24]
 80151ee:	6862      	ldr	r2, [r4, #4]
 80151f0:	60da      	str	r2, [r3, #12]
 80151f2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80151f6:	f859 200a 	ldr.w	r2, [r9, sl]
 80151fa:	440b      	add	r3, r1
 80151fc:	4293      	cmp	r3, r2
 80151fe:	bf24      	itt	cs
 8015200:	68e3      	ldrcs	r3, [r4, #12]
 8015202:	1ad3      	subcs	r3, r2, r3
 8015204:	6063      	str	r3, [r4, #4]
 8015206:	f108 0801 	add.w	r8, r8, #1
 801520a:	8833      	ldrh	r3, [r6, #0]
 801520c:	4543      	cmp	r3, r8
 801520e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8015212:	d913      	bls.n	801523c <ai_platform_network_process+0x3bc>
 8015214:	6873      	ldr	r3, [r6, #4]
 8015216:	b18b      	cbz	r3, 801523c <ai_platform_network_process+0x3bc>
 8015218:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801521c:	b171      	cbz	r1, 801523c <ai_platform_network_process+0x3bc>
 801521e:	6988      	ldr	r0, [r1, #24]
 8015220:	68b2      	ldr	r2, [r6, #8]
 8015222:	6803      	ldr	r3, [r0, #0]
 8015224:	f8d2 9000 	ldr.w	r9, [r2]
 8015228:	009d      	lsls	r5, r3, #2
 801522a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801522e:	d5d7      	bpl.n	80151e0 <ai_platform_network_process+0x360>
 8015230:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8015234:	6880      	ldr	r0, [r0, #8]
 8015236:	f006 fb32 	bl	801b89e <memcpy>
 801523a:	e7da      	b.n	80151f2 <ai_platform_network_process+0x372>
 801523c:	4658      	mov	r0, fp
 801523e:	f001 f8af 	bl	80163a0 <ai_layers_forward_all>
 8015242:	2f00      	cmp	r7, #0
 8015244:	d03f      	beq.n	80152c6 <ai_platform_network_process+0x446>
 8015246:	2400      	movs	r4, #0
 8015248:	e016      	b.n	8015278 <ai_platform_network_process+0x3f8>
 801524a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801524e:	f859 100a 	ldr.w	r1, [r9, sl]
 8015252:	4413      	add	r3, r2
 8015254:	428b      	cmp	r3, r1
 8015256:	bf24      	itt	cs
 8015258:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801525c:	1acb      	subcs	r3, r1, r3
 801525e:	f8c8 3004 	str.w	r3, [r8, #4]
 8015262:	6981      	ldr	r1, [r0, #24]
 8015264:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8015268:	1b52      	subs	r2, r2, r5
 801526a:	4413      	add	r3, r2
 801526c:	608b      	str	r3, [r1, #8]
 801526e:	6983      	ldr	r3, [r0, #24]
 8015270:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015274:	60da      	str	r2, [r3, #12]
 8015276:	3401      	adds	r4, #1
 8015278:	883b      	ldrh	r3, [r7, #0]
 801527a:	42a3      	cmp	r3, r4
 801527c:	d923      	bls.n	80152c6 <ai_platform_network_process+0x446>
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	b30b      	cbz	r3, 80152c6 <ai_platform_network_process+0x446>
 8015282:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015286:	b1f0      	cbz	r0, 80152c6 <ai_platform_network_process+0x446>
 8015288:	68ba      	ldr	r2, [r7, #8]
 801528a:	6983      	ldr	r3, [r0, #24]
 801528c:	f8d2 9000 	ldr.w	r9, [r2]
 8015290:	681a      	ldr	r2, [r3, #0]
 8015292:	0092      	lsls	r2, r2, #2
 8015294:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8015298:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801529c:	d5d5      	bpl.n	801524a <ai_platform_network_process+0x3ca>
 801529e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80152a2:	6899      	ldr	r1, [r3, #8]
 80152a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80152a8:	f006 faf9 	bl	801b89e <memcpy>
 80152ac:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80152b0:	f859 200a 	ldr.w	r2, [r9, sl]
 80152b4:	440b      	add	r3, r1
 80152b6:	4293      	cmp	r3, r2
 80152b8:	bf24      	itt	cs
 80152ba:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80152be:	1ad3      	subcs	r3, r2, r3
 80152c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80152c4:	e7d7      	b.n	8015276 <ai_platform_network_process+0x3f6>
 80152c6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80152ca:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80152ce:	3401      	adds	r4, #1
 80152d0:	b2a4      	uxth	r4, r4
 80152d2:	42a3      	cmp	r3, r4
 80152d4:	f8ab 4016 	strh.w	r4, [fp, #22]
 80152d8:	f63f af7d 	bhi.w	80151d6 <ai_platform_network_process+0x356>
 80152dc:	4620      	mov	r0, r4
 80152de:	b005      	add	sp, #20
 80152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e4:	2a01      	cmp	r2, #1
 80152e6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80152e8:	d03c      	beq.n	8015364 <ai_platform_network_process+0x4e4>
 80152ea:	f106 070c 	add.w	r7, r6, #12
 80152ee:	e76d      	b.n	80151cc <ai_platform_network_process+0x34c>
 80152f0:	4625      	mov	r5, r4
 80152f2:	2218      	movs	r2, #24
 80152f4:	2113      	movs	r1, #19
 80152f6:	f105 0010 	add.w	r0, r5, #16
 80152fa:	f000 f99d 	bl	8015638 <core_set_error>
 80152fe:	2400      	movs	r4, #0
 8015300:	e72b      	b.n	801515a <ai_platform_network_process+0x2da>
 8015302:	9d02      	ldr	r5, [sp, #8]
 8015304:	4604      	mov	r4, r0
 8015306:	2221      	movs	r2, #33	; 0x21
 8015308:	2112      	movs	r1, #18
 801530a:	f105 0010 	add.w	r0, r5, #16
 801530e:	f000 f993 	bl	8015638 <core_set_error>
 8015312:	e722      	b.n	801515a <ai_platform_network_process+0x2da>
 8015314:	9d02      	ldr	r5, [sp, #8]
 8015316:	e719      	b.n	801514c <ai_platform_network_process+0x2cc>
 8015318:	9d02      	ldr	r5, [sp, #8]
 801531a:	4604      	mov	r4, r0
 801531c:	2217      	movs	r2, #23
 801531e:	2112      	movs	r1, #18
 8015320:	f105 0010 	add.w	r0, r5, #16
 8015324:	f000 f988 	bl	8015638 <core_set_error>
 8015328:	e717      	b.n	801515a <ai_platform_network_process+0x2da>
 801532a:	9d02      	ldr	r5, [sp, #8]
 801532c:	2219      	movs	r2, #25
 801532e:	2112      	movs	r1, #18
 8015330:	f105 0010 	add.w	r0, r5, #16
 8015334:	f000 f980 	bl	8015638 <core_set_error>
 8015338:	2400      	movs	r4, #0
 801533a:	e70e      	b.n	801515a <ai_platform_network_process+0x2da>
 801533c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015340:	82ab      	strh	r3, [r5, #20]
 8015342:	e73e      	b.n	80151c2 <ai_platform_network_process+0x342>
 8015344:	f104 0010 	add.w	r0, r4, #16
 8015348:	2219      	movs	r2, #25
 801534a:	2113      	movs	r1, #19
 801534c:	f000 f974 	bl	8015638 <core_set_error>
 8015350:	2400      	movs	r4, #0
 8015352:	e702      	b.n	801515a <ai_platform_network_process+0x2da>
 8015354:	f104 0010 	add.w	r0, r4, #16
 8015358:	2217      	movs	r2, #23
 801535a:	2113      	movs	r1, #19
 801535c:	f000 f96c 	bl	8015638 <core_set_error>
 8015360:	4654      	mov	r4, sl
 8015362:	e6fa      	b.n	801515a <ai_platform_network_process+0x2da>
 8015364:	2700      	movs	r7, #0
 8015366:	e731      	b.n	80151cc <ai_platform_network_process+0x34c>
 8015368:	4625      	mov	r5, r4
 801536a:	2221      	movs	r2, #33	; 0x21
 801536c:	4604      	mov	r4, r0
 801536e:	2113      	movs	r1, #19
 8015370:	f105 0010 	add.w	r0, r5, #16
 8015374:	f000 f960 	bl	8015638 <core_set_error>
 8015378:	e6ef      	b.n	801515a <ai_platform_network_process+0x2da>
 801537a:	4625      	mov	r5, r4
 801537c:	2217      	movs	r2, #23
 801537e:	4604      	mov	r4, r0
 8015380:	2113      	movs	r1, #19
 8015382:	f105 0010 	add.w	r0, r5, #16
 8015386:	f000 f957 	bl	8015638 <core_set_error>
 801538a:	e6e6      	b.n	801515a <ai_platform_network_process+0x2da>

0801538c <node_convert>:
 801538c:	6982      	ldr	r2, [r0, #24]
 801538e:	8813      	ldrh	r3, [r2, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d04a      	beq.n	801542a <node_convert+0x9e>
 8015394:	6852      	ldr	r2, [r2, #4]
 8015396:	6850      	ldr	r0, [r2, #4]
 8015398:	b100      	cbz	r0, 801539c <node_convert+0x10>
 801539a:	6800      	ldr	r0, [r0, #0]
 801539c:	2b01      	cmp	r3, #1
 801539e:	f000 813c 	beq.w	801561a <node_convert+0x28e>
 80153a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a6:	6915      	ldr	r5, [r2, #16]
 80153a8:	b105      	cbz	r5, 80153ac <node_convert+0x20>
 80153aa:	682d      	ldr	r5, [r5, #0]
 80153ac:	6883      	ldr	r3, [r0, #8]
 80153ae:	0a1b      	lsrs	r3, r3, #8
 80153b0:	f000 80ed 	beq.w	801558e <node_convert+0x202>
 80153b4:	68c1      	ldr	r1, [r0, #12]
 80153b6:	2401      	movs	r4, #1
 80153b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80153bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80153c0:	4299      	cmp	r1, r3
 80153c2:	fb02 f404 	mul.w	r4, r2, r4
 80153c6:	d1f9      	bne.n	80153bc <node_convert+0x30>
 80153c8:	6982      	ldr	r2, [r0, #24]
 80153ca:	69af      	ldr	r7, [r5, #24]
 80153cc:	6813      	ldr	r3, [r2, #0]
 80153ce:	f3c3 4143 	ubfx	r1, r3, #17, #4
 80153d2:	2901      	cmp	r1, #1
 80153d4:	d02b      	beq.n	801542e <node_convert+0xa2>
 80153d6:	6801      	ldr	r1, [r0, #0]
 80153d8:	68bd      	ldr	r5, [r7, #8]
 80153da:	2900      	cmp	r1, #0
 80153dc:	d069      	beq.n	80154b2 <node_convert+0x126>
 80153de:	684e      	ldr	r6, [r1, #4]
 80153e0:	6892      	ldr	r2, [r2, #8]
 80153e2:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 80153e6:	2e00      	cmp	r6, #0
 80153e8:	f000 80b7 	beq.w	801555a <node_convert+0x1ce>
 80153ec:	884b      	ldrh	r3, [r1, #2]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f000 8088 	beq.w	8015504 <node_convert+0x178>
 80153f4:	6833      	ldr	r3, [r6, #0]
 80153f6:	ed93 7a00 	vldr	s14, [r3]
 80153fa:	6873      	ldr	r3, [r6, #4]
 80153fc:	2800      	cmp	r0, #0
 80153fe:	f000 80c4 	beq.w	801558a <node_convert+0x1fe>
 8015402:	f993 0000 	ldrsb.w	r0, [r3]
 8015406:	b174      	cbz	r4, 8015426 <node_convert+0x9a>
 8015408:	4629      	mov	r1, r5
 801540a:	4414      	add	r4, r2
 801540c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8015410:	1a1b      	subs	r3, r3, r0
 8015412:	ee07 3a90 	vmov	s15, r3
 8015416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801541a:	42a2      	cmp	r2, r4
 801541c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015420:	ece1 7a01 	vstmia	r1!, {s15}
 8015424:	d1f2      	bne.n	801540c <node_convert+0x80>
 8015426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	deff      	udf	#255	; 0xff
 801542e:	682e      	ldr	r6, [r5, #0]
 8015430:	6895      	ldr	r5, [r2, #8]
 8015432:	2e00      	cmp	r6, #0
 8015434:	f000 80ad 	beq.w	8015592 <node_convert+0x206>
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	6871      	ldr	r1, [r6, #4]
 801543c:	68ba      	ldr	r2, [r7, #8]
 801543e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8015442:	2900      	cmp	r1, #0
 8015444:	d063      	beq.n	801550e <node_convert+0x182>
 8015446:	8870      	ldrh	r0, [r6, #2]
 8015448:	2800      	cmp	r0, #0
 801544a:	d066      	beq.n	801551a <node_convert+0x18e>
 801544c:	6808      	ldr	r0, [r1, #0]
 801544e:	edd0 7a00 	vldr	s15, [r0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	f000 80d6 	beq.w	8015604 <node_convert+0x278>
 8015458:	684b      	ldr	r3, [r1, #4]
 801545a:	f993 3000 	ldrsb.w	r3, [r3]
 801545e:	ee06 3a90 	vmov	s13, r3
 8015462:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015466:	2c00      	cmp	r4, #0
 8015468:	d0dd      	beq.n	8015426 <node_convert+0x9a>
 801546a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801546e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8015472:	4414      	add	r4, r2
 8015474:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 8015620 <node_convert+0x294>
 8015478:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801547c:	ecb5 7a01 	vldmia	r5!, {s14}
 8015480:	eef0 7a66 	vmov.f32	s15, s13
 8015484:	eee7 7a06 	vfma.f32	s15, s14, s12
 8015488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015490:	bfac      	ite	ge
 8015492:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8015496:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 801549a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801549e:	ee17 3a90 	vmov	r3, s15
 80154a2:	f303 0307 	ssat	r3, #8, r3
 80154a6:	f802 3b01 	strb.w	r3, [r2], #1
 80154aa:	42a2      	cmp	r2, r4
 80154ac:	d1e6      	bne.n	801547c <node_convert+0xf0>
 80154ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154b2:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 80154b6:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 80154ba:	1b8e      	subs	r6, r1, r6
 80154bc:	3640      	adds	r6, #64	; 0x40
 80154be:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80154c2:	2908      	cmp	r1, #8
 80154c4:	6890      	ldr	r0, [r2, #8]
 80154c6:	eba6 0603 	sub.w	r6, r6, r3
 80154ca:	4622      	mov	r2, r4
 80154cc:	4629      	mov	r1, r5
 80154ce:	f000 808b 	beq.w	80155e8 <node_convert+0x25c>
 80154d2:	f003 fedb 	bl	801928c <arm_q15_to_float>
 80154d6:	2e00      	cmp	r6, #0
 80154d8:	d0a5      	beq.n	8015426 <node_convert+0x9a>
 80154da:	ee07 6a90 	vmov	s15, r6
 80154de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80154e2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80154e6:	f008 fd41 	bl	801df6c <powf>
 80154ea:	2c00      	cmp	r4, #0
 80154ec:	d09b      	beq.n	8015426 <node_convert+0x9a>
 80154ee:	2300      	movs	r3, #0
 80154f0:	ecf5 7a01 	vldmia	r5!, {s15}
 80154f4:	3301      	adds	r3, #1
 80154f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80154fa:	429c      	cmp	r4, r3
 80154fc:	ed45 7a01 	vstr	s15, [r5, #-4]
 8015500:	d1f6      	bne.n	80154f0 <node_convert+0x164>
 8015502:	e790      	b.n	8015426 <node_convert+0x9a>
 8015504:	b358      	cbz	r0, 801555e <node_convert+0x1d2>
 8015506:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8015624 <node_convert+0x298>
 801550a:	4618      	mov	r0, r3
 801550c:	e77b      	b.n	8015406 <node_convert+0x7a>
 801550e:	b133      	cbz	r3, 801551e <node_convert+0x192>
 8015510:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015624 <node_convert+0x298>
 8015514:	eef0 7a66 	vmov.f32	s15, s13
 8015518:	e7a5      	b.n	8015466 <node_convert+0xda>
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1f8      	bne.n	8015510 <node_convert+0x184>
 801551e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8015624 <node_convert+0x298>
 8015522:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015526:	2c00      	cmp	r4, #0
 8015528:	f43f af7d 	beq.w	8015426 <node_convert+0x9a>
 801552c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015530:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8015534:	4414      	add	r4, r2
 8015536:	ecb5 7a01 	vldmia	r5!, {s14}
 801553a:	eef0 7a66 	vmov.f32	s15, s13
 801553e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8015542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015546:	ee17 3a90 	vmov	r3, s15
 801554a:	f383 0308 	usat	r3, #8, r3
 801554e:	f802 3b01 	strb.w	r3, [r2], #1
 8015552:	42a2      	cmp	r2, r4
 8015554:	d1ef      	bne.n	8015536 <node_convert+0x1aa>
 8015556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801555a:	2800      	cmp	r0, #0
 801555c:	d147      	bne.n	80155ee <node_convert+0x262>
 801555e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015624 <node_convert+0x298>
 8015562:	2c00      	cmp	r4, #0
 8015564:	f43f af5f 	beq.w	8015426 <node_convert+0x9a>
 8015568:	4629      	mov	r1, r5
 801556a:	4414      	add	r4, r2
 801556c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8015570:	1a1b      	subs	r3, r3, r0
 8015572:	ee07 3a90 	vmov	s15, r3
 8015576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801557a:	42a2      	cmp	r2, r4
 801557c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015580:	ece1 7a01 	vstmia	r1!, {s15}
 8015584:	d1f2      	bne.n	801556c <node_convert+0x1e0>
 8015586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558a:	7818      	ldrb	r0, [r3, #0]
 801558c:	e7e9      	b.n	8015562 <node_convert+0x1d6>
 801558e:	2401      	movs	r4, #1
 8015590:	e71a      	b.n	80153c8 <node_convert+0x3c>
 8015592:	683a      	ldr	r2, [r7, #0]
 8015594:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8015598:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 801559c:	eba8 0303 	sub.w	r3, r8, r3
 80155a0:	3340      	adds	r3, #64	; 0x40
 80155a2:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 80155a6:	1a9b      	subs	r3, r3, r2
 80155a8:	d014      	beq.n	80155d4 <node_convert+0x248>
 80155aa:	425b      	negs	r3, r3
 80155ac:	ee00 3a90 	vmov	s1, r3
 80155b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80155b4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80155b8:	f008 fcd8 	bl	801df6c <powf>
 80155bc:	b154      	cbz	r4, 80155d4 <node_convert+0x248>
 80155be:	4633      	mov	r3, r6
 80155c0:	462a      	mov	r2, r5
 80155c2:	ecf2 7a01 	vldmia	r2!, {s15}
 80155c6:	3301      	adds	r3, #1
 80155c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80155cc:	42a3      	cmp	r3, r4
 80155ce:	ed42 7a01 	vstr	s15, [r2, #-4]
 80155d2:	d1f6      	bne.n	80155c2 <node_convert+0x236>
 80155d4:	f1b8 0f08 	cmp.w	r8, #8
 80155d8:	d00d      	beq.n	80155f6 <node_convert+0x26a>
 80155da:	68b9      	ldr	r1, [r7, #8]
 80155dc:	4622      	mov	r2, r4
 80155de:	4628      	mov	r0, r5
 80155e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155e4:	f003 bcae 	b.w	8018f44 <arm_float_to_q15>
 80155e8:	f003 feb6 	bl	8019358 <arm_q7_to_float>
 80155ec:	e773      	b.n	80154d6 <node_convert+0x14a>
 80155ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8015624 <node_convert+0x298>
 80155f2:	4630      	mov	r0, r6
 80155f4:	e707      	b.n	8015406 <node_convert+0x7a>
 80155f6:	68b9      	ldr	r1, [r7, #8]
 80155f8:	4622      	mov	r2, r4
 80155fa:	4628      	mov	r0, r5
 80155fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015600:	f003 bd66 	b.w	80190d0 <arm_float_to_q7>
 8015604:	684b      	ldr	r3, [r1, #4]
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	ee06 3a90 	vmov	s13, r3
 801560c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8015610:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015614:	ee76 6a87 	vadd.f32	s13, s13, s14
 8015618:	e785      	b.n	8015526 <node_convert+0x19a>
 801561a:	2300      	movs	r3, #0
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	deff      	udf	#255	; 0xff
 8015620:	3efffffc 	.word	0x3efffffc
 8015624:	00000000 	.word	0x00000000

08015628 <core_init>:
 8015628:	2001      	movs	r0, #1
 801562a:	4770      	bx	lr

0801562c <core_get_error>:
 801562c:	4603      	mov	r3, r0
 801562e:	2200      	movs	r2, #0
 8015630:	6800      	ldr	r0, [r0, #0]
 8015632:	601a      	str	r2, [r3, #0]
 8015634:	4770      	bx	lr
 8015636:	bf00      	nop

08015638 <core_set_error>:
 8015638:	4603      	mov	r3, r0
 801563a:	7800      	ldrb	r0, [r0, #0]
 801563c:	b108      	cbz	r0, 8015642 <core_set_error+0xa>
 801563e:	2000      	movs	r0, #0
 8015640:	4770      	bx	lr
 8015642:	7019      	strb	r1, [r3, #0]
 8015644:	6819      	ldr	r1, [r3, #0]
 8015646:	f362 211f 	bfi	r1, r2, #8, #24
 801564a:	2001      	movs	r0, #1
 801564c:	6019      	str	r1, [r3, #0]
 801564e:	4770      	bx	lr

08015650 <forward_dense_integer_SSSA>:
 8015650:	6982      	ldr	r2, [r0, #24]
 8015652:	8813      	ldrh	r3, [r2, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	f000 80c8 	beq.w	80157ea <forward_dense_integer_SSSA+0x19a>
 801565a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565e:	6852      	ldr	r2, [r2, #4]
 8015660:	6854      	ldr	r4, [r2, #4]
 8015662:	b093      	sub	sp, #76	; 0x4c
 8015664:	b104      	cbz	r4, 8015668 <forward_dense_integer_SSSA+0x18>
 8015666:	6824      	ldr	r4, [r4, #0]
 8015668:	2b01      	cmp	r3, #1
 801566a:	f000 815f 	beq.w	801592c <forward_dense_integer_SSSA+0x2dc>
 801566e:	6911      	ldr	r1, [r2, #16]
 8015670:	b101      	cbz	r1, 8015674 <forward_dense_integer_SSSA+0x24>
 8015672:	6809      	ldr	r1, [r1, #0]
 8015674:	2b02      	cmp	r3, #2
 8015676:	f000 815c 	beq.w	8015932 <forward_dense_integer_SSSA+0x2e2>
 801567a:	69d5      	ldr	r5, [r2, #28]
 801567c:	2d00      	cmp	r5, #0
 801567e:	f000 8108 	beq.w	8015892 <forward_dense_integer_SSSA+0x242>
 8015682:	8b16      	ldrh	r6, [r2, #24]
 8015684:	6828      	ldr	r0, [r5, #0]
 8015686:	2e01      	cmp	r6, #1
 8015688:	f240 812d 	bls.w	80158e6 <forward_dense_integer_SSSA+0x296>
 801568c:	686d      	ldr	r5, [r5, #4]
 801568e:	2b03      	cmp	r3, #3
 8015690:	f000 8152 	beq.w	8015938 <forward_dense_integer_SSSA+0x2e8>
 8015694:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 8015698:	69ab      	ldr	r3, [r5, #24]
 801569a:	f1b9 0f00 	cmp.w	r9, #0
 801569e:	f000 810f 	beq.w	80158c0 <forward_dense_integer_SSSA+0x270>
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	68e2      	ldr	r2, [r4, #12]
 80156a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80156a8:	68cb      	ldr	r3, [r1, #12]
 80156aa:	6856      	ldr	r6, [r2, #4]
 80156ac:	f8d9 9000 	ldr.w	r9, [r9]
 80156b0:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80156b4:	698d      	ldr	r5, [r1, #24]
 80156b6:	960f      	str	r6, [sp, #60]	; 0x3c
 80156b8:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	fb03 f302 	mul.w	r3, r3, r2
 80156c2:	930c      	str	r3, [sp, #48]	; 0x30
 80156c4:	b2b2      	uxth	r2, r6
 80156c6:	fa1f f38a 	uxth.w	r3, sl
 80156ca:	f1b9 0f00 	cmp.w	r9, #0
 80156ce:	d003      	beq.n	80156d8 <forward_dense_integer_SSSA+0x88>
 80156d0:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80156d4:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80156d8:	6827      	ldr	r7, [r4, #0]
 80156da:	f8d0 b000 	ldr.w	fp, [r0]
 80156de:	680c      	ldr	r4, [r1, #0]
 80156e0:	6981      	ldr	r1, [r0, #24]
 80156e2:	2f00      	cmp	r7, #0
 80156e4:	f000 8083 	beq.w	80157ee <forward_dense_integer_SSSA+0x19e>
 80156e8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80156ec:	f1bc 0f00 	cmp.w	ip, #0
 80156f0:	f000 80b1 	beq.w	8015856 <forward_dense_integer_SSSA+0x206>
 80156f4:	8878      	ldrh	r0, [r7, #2]
 80156f6:	2800      	cmp	r0, #0
 80156f8:	f000 809c 	beq.w	8015834 <forward_dense_integer_SSSA+0x1e4>
 80156fc:	f8dc 6000 	ldr.w	r6, [ip]
 8015700:	edd6 7a00 	vldr	s15, [r6]
 8015704:	2c00      	cmp	r4, #0
 8015706:	f000 809a 	beq.w	801583e <forward_dense_integer_SSSA+0x1ee>
 801570a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801570e:	f1b8 0f00 	cmp.w	r8, #0
 8015712:	f000 80a9 	beq.w	8015868 <forward_dense_integer_SSSA+0x218>
 8015716:	8860      	ldrh	r0, [r4, #2]
 8015718:	2800      	cmp	r0, #0
 801571a:	d074      	beq.n	8015806 <forward_dense_integer_SSSA+0x1b6>
 801571c:	68ae      	ldr	r6, [r5, #8]
 801571e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8015722:	950d      	str	r5, [sp, #52]	; 0x34
 8015724:	f8d8 5000 	ldr.w	r5, [r8]
 8015728:	6889      	ldr	r1, [r1, #8]
 801572a:	ed95 0a00 	vldr	s0, [r5]
 801572e:	f1bc 0f00 	cmp.w	ip, #0
 8015732:	d076      	beq.n	8015822 <forward_dense_integer_SSSA+0x1d2>
 8015734:	8878      	ldrh	r0, [r7, #2]
 8015736:	2800      	cmp	r0, #0
 8015738:	f000 80a3 	beq.w	8015882 <forward_dense_integer_SSSA+0x232>
 801573c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015740:	f990 7000 	ldrsb.w	r7, [r0]
 8015744:	2c00      	cmp	r4, #0
 8015746:	f000 80d6 	beq.w	80158f6 <forward_dense_integer_SSSA+0x2a6>
 801574a:	f1b8 0f00 	cmp.w	r8, #0
 801574e:	f000 809d 	beq.w	801588c <forward_dense_integer_SSSA+0x23c>
 8015752:	8860      	ldrh	r0, [r4, #2]
 8015754:	2800      	cmp	r0, #0
 8015756:	d167      	bne.n	8015828 <forward_dense_integer_SSSA+0x1d8>
 8015758:	900a      	str	r0, [sp, #40]	; 0x28
 801575a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801575e:	910e      	str	r1, [sp, #56]	; 0x38
 8015760:	f1bb 0f00 	cmp.w	fp, #0
 8015764:	f000 80dc 	beq.w	8015920 <forward_dense_integer_SSSA+0x2d0>
 8015768:	f8db 0004 	ldr.w	r0, [fp, #4]
 801576c:	2800      	cmp	r0, #0
 801576e:	f000 80d7 	beq.w	8015920 <forward_dense_integer_SSSA+0x2d0>
 8015772:	6800      	ldr	r0, [r0, #0]
 8015774:	2400      	movs	r4, #0
 8015776:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801577a:	9411      	str	r4, [sp, #68]	; 0x44
 801577c:	ed90 7a00 	vldr	s14, [r0]
 8015780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015784:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 8015788:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801578c:	4640      	mov	r0, r8
 801578e:	f001 fc73 	bl	8017078 <align_factor>
 8015792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015794:	9011      	str	r0, [sp, #68]	; 0x44
 8015796:	b32b      	cbz	r3, 80157e4 <forward_dense_integer_SSSA+0x194>
 8015798:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801579c:	4699      	mov	r9, r3
 801579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157a0:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 80157a4:	9a08      	ldr	r2, [sp, #32]
 80157a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80157a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80157aa:	970d      	str	r7, [sp, #52]	; 0x34
 80157ac:	fa1f fa8a 	uxth.w	sl, sl
 80157b0:	461f      	mov	r7, r3
 80157b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157b4:	9306      	str	r3, [sp, #24]
 80157b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157b8:	9304      	str	r3, [sp, #16]
 80157ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157bc:	9303      	str	r3, [sp, #12]
 80157be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157c0:	9605      	str	r6, [sp, #20]
 80157c2:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80157c6:	ab11      	add	r3, sp, #68	; 0x44
 80157c8:	9300      	str	r3, [sp, #0]
 80157ca:	4628      	mov	r0, r5
 80157cc:	3401      	adds	r4, #1
 80157ce:	463b      	mov	r3, r7
 80157d0:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80157d4:	f001 fd98 	bl	8017308 <st_sssa8_fully_connected>
 80157d8:	454c      	cmp	r4, r9
 80157da:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80157de:	4456      	add	r6, sl
 80157e0:	445d      	add	r5, fp
 80157e2:	d1e6      	bne.n	80157b2 <forward_dense_integer_SSSA+0x162>
 80157e4:	b013      	add	sp, #76	; 0x4c
 80157e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ea:	685b      	ldr	r3, [r3, #4]
 80157ec:	deff      	udf	#255	; 0xff
 80157ee:	2c00      	cmp	r4, #0
 80157f0:	d056      	beq.n	80158a0 <forward_dense_integer_SSSA+0x250>
 80157f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80157f6:	f1b8 0f00 	cmp.w	r8, #0
 80157fa:	d05d      	beq.n	80158b8 <forward_dense_integer_SSSA+0x268>
 80157fc:	8860      	ldrh	r0, [r4, #2]
 80157fe:	2800      	cmp	r0, #0
 8015800:	d17b      	bne.n	80158fa <forward_dense_integer_SSSA+0x2aa>
 8015802:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 8015806:	68ae      	ldr	r6, [r5, #8]
 8015808:	f8de 5008 	ldr.w	r5, [lr, #8]
 801580c:	6889      	ldr	r1, [r1, #8]
 801580e:	950d      	str	r5, [sp, #52]	; 0x34
 8015810:	2f00      	cmp	r7, #0
 8015812:	d041      	beq.n	8015898 <forward_dense_integer_SSSA+0x248>
 8015814:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8015818:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 801581c:	f1bc 0f00 	cmp.w	ip, #0
 8015820:	d188      	bne.n	8015734 <forward_dense_integer_SSSA+0xe4>
 8015822:	4667      	mov	r7, ip
 8015824:	2800      	cmp	r0, #0
 8015826:	d097      	beq.n	8015758 <forward_dense_integer_SSSA+0x108>
 8015828:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801582c:	f990 0000 	ldrsb.w	r0, [r0]
 8015830:	900a      	str	r0, [sp, #40]	; 0x28
 8015832:	e792      	b.n	801575a <forward_dense_integer_SSSA+0x10a>
 8015834:	eddf 7a42 	vldr	s15, [pc, #264]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 8015838:	2c00      	cmp	r4, #0
 801583a:	f47f af66 	bne.w	801570a <forward_dense_integer_SSSA+0xba>
 801583e:	68ae      	ldr	r6, [r5, #8]
 8015840:	f8de 5008 	ldr.w	r5, [lr, #8]
 8015844:	6889      	ldr	r1, [r1, #8]
 8015846:	950d      	str	r5, [sp, #52]	; 0x34
 8015848:	2800      	cmp	r0, #0
 801584a:	d14e      	bne.n	80158ea <forward_dense_integer_SSSA+0x29a>
 801584c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 8015850:	900a      	str	r0, [sp, #40]	; 0x28
 8015852:	4607      	mov	r7, r0
 8015854:	e781      	b.n	801575a <forward_dense_integer_SSSA+0x10a>
 8015856:	b31c      	cbz	r4, 80158a0 <forward_dense_integer_SSSA+0x250>
 8015858:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801585c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 8015860:	f1b8 0f00 	cmp.w	r8, #0
 8015864:	f47f af57 	bne.w	8015716 <forward_dense_integer_SSSA+0xc6>
 8015868:	f8de 0008 	ldr.w	r0, [lr, #8]
 801586c:	68ae      	ldr	r6, [r5, #8]
 801586e:	6889      	ldr	r1, [r1, #8]
 8015870:	900d      	str	r0, [sp, #52]	; 0x34
 8015872:	f1bc 0f00 	cmp.w	ip, #0
 8015876:	d00e      	beq.n	8015896 <forward_dense_integer_SSSA+0x246>
 8015878:	8878      	ldrh	r0, [r7, #2]
 801587a:	2800      	cmp	r0, #0
 801587c:	d149      	bne.n	8015912 <forward_dense_integer_SSSA+0x2c2>
 801587e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 8015882:	2700      	movs	r7, #0
 8015884:	f1b8 0f00 	cmp.w	r8, #0
 8015888:	f47f af63 	bne.w	8015752 <forward_dense_integer_SSSA+0x102>
 801588c:	2000      	movs	r0, #0
 801588e:	900a      	str	r0, [sp, #40]	; 0x28
 8015890:	e763      	b.n	801575a <forward_dense_integer_SSSA+0x10a>
 8015892:	4628      	mov	r0, r5
 8015894:	e6fb      	b.n	801568e <forward_dense_integer_SSSA+0x3e>
 8015896:	4667      	mov	r7, ip
 8015898:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 801589c:	970a      	str	r7, [sp, #40]	; 0x28
 801589e:	e75c      	b.n	801575a <forward_dense_integer_SSSA+0x10a>
 80158a0:	eddf 7a27 	vldr	s15, [pc, #156]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 80158a4:	4627      	mov	r7, r4
 80158a6:	f8de 0008 	ldr.w	r0, [lr, #8]
 80158aa:	68ae      	ldr	r6, [r5, #8]
 80158ac:	6889      	ldr	r1, [r1, #8]
 80158ae:	900d      	str	r0, [sp, #52]	; 0x34
 80158b0:	eeb0 0a67 	vmov.f32	s0, s15
 80158b4:	970a      	str	r7, [sp, #40]	; 0x28
 80158b6:	e750      	b.n	801575a <forward_dense_integer_SSSA+0x10a>
 80158b8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 80158bc:	4647      	mov	r7, r8
 80158be:	e7f2      	b.n	80158a6 <forward_dense_integer_SSSA+0x256>
 80158c0:	689b      	ldr	r3, [r3, #8]
 80158c2:	68e2      	ldr	r2, [r4, #12]
 80158c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80158c6:	68cb      	ldr	r3, [r1, #12]
 80158c8:	6856      	ldr	r6, [r2, #4]
 80158ca:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80158ce:	698d      	ldr	r5, [r1, #24]
 80158d0:	960f      	str	r6, [sp, #60]	; 0x3c
 80158d2:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80158d6:	68db      	ldr	r3, [r3, #12]
 80158d8:	fb03 f302 	mul.w	r3, r3, r2
 80158dc:	930c      	str	r3, [sp, #48]	; 0x30
 80158de:	b2b2      	uxth	r2, r6
 80158e0:	fa1f f38a 	uxth.w	r3, sl
 80158e4:	e6f8      	b.n	80156d8 <forward_dense_integer_SSSA+0x88>
 80158e6:	2500      	movs	r5, #0
 80158e8:	e6d1      	b.n	801568e <forward_dense_integer_SSSA+0x3e>
 80158ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80158ee:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 80158f2:	f990 7000 	ldrsb.w	r7, [r0]
 80158f6:	940a      	str	r4, [sp, #40]	; 0x28
 80158f8:	e72f      	b.n	801575a <forward_dense_integer_SSSA+0x10a>
 80158fa:	f8de 0008 	ldr.w	r0, [lr, #8]
 80158fe:	900d      	str	r0, [sp, #52]	; 0x34
 8015900:	f8d8 0000 	ldr.w	r0, [r8]
 8015904:	68ae      	ldr	r6, [r5, #8]
 8015906:	6889      	ldr	r1, [r1, #8]
 8015908:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 801590c:	ed90 0a00 	vldr	s0, [r0]
 8015910:	e78a      	b.n	8015828 <forward_dense_integer_SSSA+0x1d8>
 8015912:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015916:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015940 <forward_dense_integer_SSSA+0x2f0>
 801591a:	f990 7000 	ldrsb.w	r7, [r0]
 801591e:	e7b5      	b.n	801588c <forward_dense_integer_SSSA+0x23c>
 8015920:	2300      	movs	r3, #0
 8015922:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015926:	9311      	str	r3, [sp, #68]	; 0x44
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	deff      	udf	#255	; 0xff
 801592c:	2300      	movs	r3, #0
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	deff      	udf	#255	; 0xff
 8015932:	2300      	movs	r3, #0
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	deff      	udf	#255	; 0xff
 8015938:	2300      	movs	r3, #0
 801593a:	685b      	ldr	r3, [r3, #4]
 801593c:	deff      	udf	#255	; 0xff
 801593e:	bf00      	nop
 8015940:	00000000 	.word	0x00000000

08015944 <forward_upsample>:
 8015944:	6983      	ldr	r3, [r0, #24]
 8015946:	881a      	ldrh	r2, [r3, #0]
 8015948:	2a00      	cmp	r2, #0
 801594a:	f000 80f1 	beq.w	8015b30 <forward_upsample+0x1ec>
 801594e:	6859      	ldr	r1, [r3, #4]
 8015950:	684b      	ldr	r3, [r1, #4]
 8015952:	b103      	cbz	r3, 8015956 <forward_upsample+0x12>
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	2a01      	cmp	r2, #1
 8015958:	f000 81b0 	beq.w	8015cbc <forward_upsample+0x378>
 801595c:	690a      	ldr	r2, [r1, #16]
 801595e:	2a00      	cmp	r2, #0
 8015960:	f000 81af 	beq.w	8015cc2 <forward_upsample+0x37e>
 8015964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015968:	ed2d 8b04 	vpush	{d8-d9}
 801596c:	f8d2 9000 	ldr.w	r9, [r2]
 8015970:	68da      	ldr	r2, [r3, #12]
 8015972:	699b      	ldr	r3, [r3, #24]
 8015974:	68d1      	ldr	r1, [r2, #12]
 8015976:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801597a:	6a03      	ldr	r3, [r0, #32]
 801597c:	6895      	ldr	r5, [r2, #8]
 801597e:	689b      	ldr	r3, [r3, #8]
 8015980:	b087      	sub	sp, #28
 8015982:	edd3 8a00 	vldr	s17, [r3]
 8015986:	edd3 7a01 	vldr	s15, [r3, #4]
 801598a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801598e:	9104      	str	r1, [sp, #16]
 8015990:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8015994:	689c      	ldr	r4, [r3, #8]
 8015996:	7f03      	ldrb	r3, [r0, #28]
 8015998:	9503      	str	r5, [sp, #12]
 801599a:	6855      	ldr	r5, [r2, #4]
 801599c:	68ca      	ldr	r2, [r1, #12]
 801599e:	688f      	ldr	r7, [r1, #8]
 80159a0:	9202      	str	r2, [sp, #8]
 80159a2:	2b03      	cmp	r3, #3
 80159a4:	f200 80bf 	bhi.w	8015b26 <forward_upsample+0x1e2>
 80159a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80159ac:	00c5011e 	.word	0x00c5011e
 80159b0:	00c40004 	.word	0x00c40004
 80159b4:	7f43      	ldrb	r3, [r0, #29]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	f040 8173 	bne.w	8015ca2 <forward_upsample+0x35e>
 80159bc:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8015cc8 <forward_upsample+0x384>
 80159c0:	eeb0 2a60 	vmov.f32	s4, s1
 80159c4:	9b02      	ldr	r3, [sp, #8]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	f000 80ad 	beq.w	8015b26 <forward_upsample+0x1e2>
 80159cc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 80159d0:	ee83 0a28 	vdiv.f32	s0, s6, s17
 80159d4:	9b04      	ldr	r3, [sp, #16]
 80159d6:	3b01      	subs	r3, #1
 80159d8:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 80159dc:	eec3 1a27 	vdiv.f32	s3, s6, s15
 80159e0:	ee01 3a10 	vmov	s2, r3
 80159e4:	9b03      	ldr	r3, [sp, #12]
 80159e6:	eddf 2ab8 	vldr	s5, [pc, #736]	; 8015cc8 <forward_upsample+0x384>
 80159ea:	1e5a      	subs	r2, r3, #1
 80159ec:	ee03 2a90 	vmov	s7, r2
 80159f0:	fb05 f303 	mul.w	r3, r5, r3
 80159f4:	9304      	str	r3, [sp, #16]
 80159f6:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80159fa:	2300      	movs	r3, #0
 80159fc:	eef8 3a63 	vcvt.f32.u32	s7, s7
 8015a00:	9301      	str	r3, [sp, #4]
 8015a02:	eddd 7a01 	vldr	s15, [sp, #4]
 8015a06:	9b04      	ldr	r3, [sp, #16]
 8015a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a0c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015a10:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a1c:	bfb8      	it	lt
 8015a1e:	eef0 7a62 	vmovlt.f32	s15, s5
 8015a22:	eef4 7ac1 	vcmpe.f32	s15, s2
 8015a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2a:	bf88      	it	hi
 8015a2c:	eef0 7a41 	vmovhi.f32	s15, s2
 8015a30:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8015a34:	eef4 7a41 	vcmp.f32	s15, s2
 8015a38:	eeb8 4a47 	vcvt.f32.u32	s8, s14
 8015a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a40:	ee37 8ac4 	vsub.f32	s16, s15, s8
 8015a44:	bf14      	ite	ne
 8015a46:	469a      	movne	sl, r3
 8015a48:	f04f 0a00 	moveq.w	sl, #0
 8015a4c:	2f00      	cmp	r7, #0
 8015a4e:	d063      	beq.n	8015b18 <forward_upsample+0x1d4>
 8015a50:	ee73 7a67 	vsub.f32	s15, s6, s15
 8015a54:	ee17 2a10 	vmov	r2, s14
 8015a58:	9b03      	ldr	r3, [sp, #12]
 8015a5a:	ee37 4a84 	vadd.f32	s8, s15, s8
 8015a5e:	fb03 f902 	mul.w	r9, r3, r2
 8015a62:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8015a66:	f04f 0c00 	mov.w	ip, #0
 8015a6a:	ee07 ca90 	vmov	s15, ip
 8015a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015a72:	ee37 7a42 	vsub.f32	s14, s14, s4
 8015a76:	ee27 7a21 	vmul.f32	s14, s14, s3
 8015a7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a82:	bfb8      	it	lt
 8015a84:	eeb0 7a62 	vmovlt.f32	s14, s5
 8015a88:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8015a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a90:	bf88      	it	hi
 8015a92:	eeb0 7a63 	vmovhi.f32	s14, s7
 8015a96:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8015a9a:	ee73 5a47 	vsub.f32	s11, s6, s14
 8015a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015aa2:	eeb4 7a63 	vcmp.f32	s14, s7
 8015aa6:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8015aaa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015aae:	ee17 3a90 	vmov	r3, s15
 8015ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab6:	ee25 5a84 	vmul.f32	s10, s11, s8
 8015aba:	ee67 4a04 	vmul.f32	s9, s14, s8
 8015abe:	ee65 5a88 	vmul.f32	s11, s11, s16
 8015ac2:	ee28 7a07 	vmul.f32	s14, s16, s14
 8015ac6:	bf14      	ite	ne
 8015ac8:	462a      	movne	r2, r5
 8015aca:	2200      	moveq	r2, #0
 8015acc:	444b      	add	r3, r9
 8015ace:	b1fd      	cbz	r5, 8015b10 <forward_upsample+0x1cc>
 8015ad0:	fb0e 8303 	mla	r3, lr, r3, r8
 8015ad4:	eb02 010a 	add.w	r1, r2, sl
 8015ad8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015adc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015ae0:	eb03 000b 	add.w	r0, r3, fp
 8015ae4:	eb04 060e 	add.w	r6, r4, lr
 8015ae8:	ecf2 7a01 	vldmia	r2!, {s15}
 8015aec:	ecf3 6a01 	vldmia	r3!, {s13}
 8015af0:	ecb0 6a01 	vldmia	r0!, {s12}
 8015af4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015af8:	eee6 7a85 	vfma.f32	s15, s13, s10
 8015afc:	ecf1 6a01 	vldmia	r1!, {s13}
 8015b00:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015b04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015b08:	ece4 7a01 	vstmia	r4!, {s15}
 8015b0c:	42b4      	cmp	r4, r6
 8015b0e:	d1eb      	bne.n	8015ae8 <forward_upsample+0x1a4>
 8015b10:	f10c 0c01 	add.w	ip, ip, #1
 8015b14:	4567      	cmp	r7, ip
 8015b16:	d1a8      	bne.n	8015a6a <forward_upsample+0x126>
 8015b18:	9b01      	ldr	r3, [sp, #4]
 8015b1a:	9a02      	ldr	r2, [sp, #8]
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	9301      	str	r3, [sp, #4]
 8015b22:	f47f af6e 	bne.w	8015a02 <forward_upsample+0xbe>
 8015b26:	b007      	add	sp, #28
 8015b28:	ecbd 8b04 	vpop	{d8-d9}
 8015b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b30:	6853      	ldr	r3, [r2, #4]
 8015b32:	deff      	udf	#255	; 0xff
 8015b34:	e7fe      	b.n	8015b34 <forward_upsample+0x1f0>
 8015b36:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8015b3a:	2a03      	cmp	r2, #3
 8015b3c:	bf97      	itett	ls
 8015b3e:	4b63      	ldrls	r3, [pc, #396]	; (8015ccc <forward_upsample+0x388>)
 8015b40:	ed9f 8a63 	vldrhi	s16, [pc, #396]	; 8015cd0 <forward_upsample+0x38c>
 8015b44:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8015b48:	ed93 8a00 	vldrls	s16, [r3]
 8015b4c:	9b02      	ldr	r3, [sp, #8]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d0e9      	beq.n	8015b26 <forward_upsample+0x1e2>
 8015b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015b56:	ee87 9a28 	vdiv.f32	s18, s14, s17
 8015b5a:	00ad      	lsls	r5, r5, #2
 8015b5c:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8015b60:	2f00      	cmp	r7, #0
 8015b62:	d0e0      	beq.n	8015b26 <forward_upsample+0x1e2>
 8015b64:	fb07 f305 	mul.w	r3, r7, r5
 8015b68:	9304      	str	r3, [sp, #16]
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	9301      	str	r3, [sp, #4]
 8015b6e:	4626      	mov	r6, r4
 8015b70:	f04f 0b00 	mov.w	fp, #0
 8015b74:	eddd 7a01 	vldr	s15, [sp, #4]
 8015b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b80:	eea7 0a89 	vfma.f32	s0, s15, s18
 8015b84:	f008 fa80 	bl	801e088 <roundf>
 8015b88:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015b8c:	9b03      	ldr	r3, [sp, #12]
 8015b8e:	ee17 aa90 	vmov	sl, s15
 8015b92:	fb03 fa0a 	mul.w	sl, r3, sl
 8015b96:	ee07 ba90 	vmov	s15, fp
 8015b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8015ba2:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8015ba6:	f008 fa6f 	bl	801e088 <roundf>
 8015baa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015bae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015bb2:	ee17 1a90 	vmov	r1, s15
 8015bb6:	4451      	add	r1, sl
 8015bb8:	4630      	mov	r0, r6
 8015bba:	689a      	ldr	r2, [r3, #8]
 8015bbc:	f10b 0b01 	add.w	fp, fp, #1
 8015bc0:	fb05 8101 	mla	r1, r5, r1, r8
 8015bc4:	f005 fe6b 	bl	801b89e <memcpy>
 8015bc8:	455f      	cmp	r7, fp
 8015bca:	442e      	add	r6, r5
 8015bcc:	d1e3      	bne.n	8015b96 <forward_upsample+0x252>
 8015bce:	9a04      	ldr	r2, [sp, #16]
 8015bd0:	9b01      	ldr	r3, [sp, #4]
 8015bd2:	4414      	add	r4, r2
 8015bd4:	9a02      	ldr	r2, [sp, #8]
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	9301      	str	r3, [sp, #4]
 8015bdc:	d1c7      	bne.n	8015b6e <forward_upsample+0x22a>
 8015bde:	b007      	add	sp, #28
 8015be0:	ecbd 8b04 	vpop	{d8-d9}
 8015be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015bf0:	9a02      	ldr	r2, [sp, #8]
 8015bf2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bfa:	fb07 f202 	mul.w	r2, r7, r2
 8015bfe:	ee17 aa90 	vmov	sl, s15
 8015c02:	fb05 f202 	mul.w	r2, r5, r2
 8015c06:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8015c0a:	0092      	lsls	r2, r2, #2
 8015c0c:	2100      	movs	r1, #0
 8015c0e:	4620      	mov	r0, r4
 8015c10:	ee17 6a90 	vmov	r6, s15
 8015c14:	f005 fd8c 	bl	801b730 <memset>
 8015c18:	9b04      	ldr	r3, [sp, #16]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d083      	beq.n	8015b26 <forward_upsample+0x1e2>
 8015c1e:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8015c22:	9903      	ldr	r1, [sp, #12]
 8015c24:	fb0a 5a05 	mla	sl, sl, r5, r5
 8015c28:	fb05 f707 	mul.w	r7, r5, r7
 8015c2c:	ee17 3a90 	vmov	r3, s15
 8015c30:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8015c34:	00ad      	lsls	r5, r5, #2
 8015c36:	1c72      	adds	r2, r6, #1
 8015c38:	2900      	cmp	r1, #0
 8015c3a:	f43f af74 	beq.w	8015b26 <forward_upsample+0x1e2>
 8015c3e:	fb07 f303 	mul.w	r3, r7, r3
 8015c42:	fb02 f707 	mul.w	r7, r2, r7
 8015c46:	fb01 f205 	mul.w	r2, r1, r5
 8015c4a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	9205      	str	r2, [sp, #20]
 8015c52:	2200      	movs	r2, #0
 8015c54:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015c58:	9303      	str	r3, [sp, #12]
 8015c5a:	46c8      	mov	r8, r9
 8015c5c:	46b9      	mov	r9, r7
 8015c5e:	460f      	mov	r7, r1
 8015c60:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015c64:	2600      	movs	r6, #0
 8015c66:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015c6a:	4659      	mov	r1, fp
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	689a      	ldr	r2, [r3, #8]
 8015c70:	3601      	adds	r6, #1
 8015c72:	f005 fe14 	bl	801b89e <memcpy>
 8015c76:	42b7      	cmp	r7, r6
 8015c78:	44ab      	add	fp, r5
 8015c7a:	4454      	add	r4, sl
 8015c7c:	d1f3      	bne.n	8015c66 <forward_upsample+0x322>
 8015c7e:	9a01      	ldr	r2, [sp, #4]
 8015c80:	9905      	ldr	r1, [sp, #20]
 8015c82:	9b02      	ldr	r3, [sp, #8]
 8015c84:	440a      	add	r2, r1
 8015c86:	9201      	str	r2, [sp, #4]
 8015c88:	9a03      	ldr	r2, [sp, #12]
 8015c8a:	464c      	mov	r4, r9
 8015c8c:	4491      	add	r9, r2
 8015c8e:	9a04      	ldr	r2, [sp, #16]
 8015c90:	3301      	adds	r3, #1
 8015c92:	429a      	cmp	r2, r3
 8015c94:	9302      	str	r3, [sp, #8]
 8015c96:	d1e3      	bne.n	8015c60 <forward_upsample+0x31c>
 8015c98:	b007      	add	sp, #28
 8015c9a:	ecbd 8b04 	vpop	{d8-d9}
 8015c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015ca6:	ee78 0ac7 	vsub.f32	s1, s17, s14
 8015caa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015cae:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8015cb2:	ee60 0a82 	vmul.f32	s1, s1, s4
 8015cb6:	ee27 2a02 	vmul.f32	s4, s14, s4
 8015cba:	e683      	b.n	80159c4 <forward_upsample+0x80>
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	deff      	udf	#255	; 0xff
 8015cc2:	68d3      	ldr	r3, [r2, #12]
 8015cc4:	deff      	udf	#255	; 0xff
 8015cc6:	bf00      	nop
 8015cc8:	00000000 	.word	0x00000000
 8015ccc:	08022c18 	.word	0x08022c18
 8015cd0:	38d1b717 	.word	0x38d1b717

08015cd4 <nl_func_relu_array_integer>:
 8015cd4:	b410      	push	{r4}
 8015cd6:	6989      	ldr	r1, [r1, #24]
 8015cd8:	6984      	ldr	r4, [r0, #24]
 8015cda:	6808      	ldr	r0, [r1, #0]
 8015cdc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8015ce0:	6888      	ldr	r0, [r1, #8]
 8015ce2:	68a1      	ldr	r1, [r4, #8]
 8015ce4:	d010      	beq.n	8015d08 <nl_func_relu_array_integer+0x34>
 8015ce6:	f993 c000 	ldrsb.w	ip, [r3]
 8015cea:	b152      	cbz	r2, 8015d02 <nl_func_relu_array_integer+0x2e>
 8015cec:	3801      	subs	r0, #1
 8015cee:	440a      	add	r2, r1
 8015cf0:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 8015cf4:	4563      	cmp	r3, ip
 8015cf6:	bfb8      	it	lt
 8015cf8:	4663      	movlt	r3, ip
 8015cfa:	f801 3b01 	strb.w	r3, [r1], #1
 8015cfe:	428a      	cmp	r2, r1
 8015d00:	d1f6      	bne.n	8015cf0 <nl_func_relu_array_integer+0x1c>
 8015d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d06:	4770      	bx	lr
 8015d08:	f893 c000 	ldrb.w	ip, [r3]
 8015d0c:	2a00      	cmp	r2, #0
 8015d0e:	d0f8      	beq.n	8015d02 <nl_func_relu_array_integer+0x2e>
 8015d10:	3801      	subs	r0, #1
 8015d12:	440a      	add	r2, r1
 8015d14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015d18:	4563      	cmp	r3, ip
 8015d1a:	bf38      	it	cc
 8015d1c:	4663      	movcc	r3, ip
 8015d1e:	f801 3b01 	strb.w	r3, [r1], #1
 8015d22:	4291      	cmp	r1, r2
 8015d24:	d1f6      	bne.n	8015d14 <nl_func_relu_array_integer+0x40>
 8015d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d2a:	4770      	bx	lr

08015d2c <forward_nl_integer>:
 8015d2c:	6982      	ldr	r2, [r0, #24]
 8015d2e:	8813      	ldrh	r3, [r2, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d02f      	beq.n	8015d94 <forward_nl_integer+0x68>
 8015d34:	b470      	push	{r4, r5, r6}
 8015d36:	6852      	ldr	r2, [r2, #4]
 8015d38:	6855      	ldr	r5, [r2, #4]
 8015d3a:	b105      	cbz	r5, 8015d3e <forward_nl_integer+0x12>
 8015d3c:	682d      	ldr	r5, [r5, #0]
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	d048      	beq.n	8015dd4 <forward_nl_integer+0xa8>
 8015d42:	6916      	ldr	r6, [r2, #16]
 8015d44:	b106      	cbz	r6, 8015d48 <forward_nl_integer+0x1c>
 8015d46:	6836      	ldr	r6, [r6, #0]
 8015d48:	68ab      	ldr	r3, [r5, #8]
 8015d4a:	0a1b      	lsrs	r3, r3, #8
 8015d4c:	d033      	beq.n	8015db6 <forward_nl_integer+0x8a>
 8015d4e:	68ec      	ldr	r4, [r5, #12]
 8015d50:	2201      	movs	r2, #1
 8015d52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015d5a:	429c      	cmp	r4, r3
 8015d5c:	fb01 f202 	mul.w	r2, r1, r2
 8015d60:	d1f9      	bne.n	8015d56 <forward_nl_integer+0x2a>
 8015d62:	69ab      	ldr	r3, [r5, #24]
 8015d64:	69c0      	ldr	r0, [r0, #28]
 8015d66:	6819      	ldr	r1, [r3, #0]
 8015d68:	6884      	ldr	r4, [r0, #8]
 8015d6a:	69b0      	ldr	r0, [r6, #24]
 8015d6c:	020d      	lsls	r5, r1, #8
 8015d6e:	d513      	bpl.n	8015d98 <forward_nl_integer+0x6c>
 8015d70:	689e      	ldr	r6, [r3, #8]
 8015d72:	6885      	ldr	r5, [r0, #8]
 8015d74:	b162      	cbz	r2, 8015d90 <forward_nl_integer+0x64>
 8015d76:	1e70      	subs	r0, r6, #1
 8015d78:	4603      	mov	r3, r0
 8015d7a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8015d7e:	3302      	adds	r3, #2
 8015d80:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 8015d84:	1b9b      	subs	r3, r3, r6
 8015d86:	5c61      	ldrb	r1, [r4, r1]
 8015d88:	f805 1b01 	strb.w	r1, [r5], #1
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d8f3      	bhi.n	8015d78 <forward_nl_integer+0x4c>
 8015d90:	bc70      	pop	{r4, r5, r6}
 8015d92:	4770      	bx	lr
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	deff      	udf	#255	; 0xff
 8015d98:	6899      	ldr	r1, [r3, #8]
 8015d9a:	6883      	ldr	r3, [r0, #8]
 8015d9c:	2a00      	cmp	r2, #0
 8015d9e:	d0f7      	beq.n	8015d90 <forward_nl_integer+0x64>
 8015da0:	3901      	subs	r1, #1
 8015da2:	441a      	add	r2, r3
 8015da4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015da8:	5c20      	ldrb	r0, [r4, r0]
 8015daa:	f803 0b01 	strb.w	r0, [r3], #1
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d1f8      	bne.n	8015da4 <forward_nl_integer+0x78>
 8015db2:	bc70      	pop	{r4, r5, r6}
 8015db4:	4770      	bx	lr
 8015db6:	69ab      	ldr	r3, [r5, #24]
 8015db8:	69c2      	ldr	r2, [r0, #28]
 8015dba:	6819      	ldr	r1, [r3, #0]
 8015dbc:	6894      	ldr	r4, [r2, #8]
 8015dbe:	69b2      	ldr	r2, [r6, #24]
 8015dc0:	0209      	lsls	r1, r1, #8
 8015dc2:	d503      	bpl.n	8015dcc <forward_nl_integer+0xa0>
 8015dc4:	6895      	ldr	r5, [r2, #8]
 8015dc6:	689e      	ldr	r6, [r3, #8]
 8015dc8:	2201      	movs	r2, #1
 8015dca:	e7d4      	b.n	8015d76 <forward_nl_integer+0x4a>
 8015dcc:	6899      	ldr	r1, [r3, #8]
 8015dce:	6893      	ldr	r3, [r2, #8]
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	e7e5      	b.n	8015da0 <forward_nl_integer+0x74>
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	deff      	udf	#255	; 0xff
 8015dda:	bf00      	nop

08015ddc <func_dummy>:
 8015ddc:	4770      	bx	lr
 8015dde:	bf00      	nop

08015de0 <forward_conv2d_sssa8_ch_nl_pool>:
 8015de0:	6982      	ldr	r2, [r0, #24]
 8015de2:	8813      	ldrh	r3, [r2, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f000 822e 	beq.w	8016246 <forward_conv2d_sssa8_ch_nl_pool+0x466>
 8015dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dee:	ed2d 8b04 	vpush	{d8-d9}
 8015df2:	6852      	ldr	r2, [r2, #4]
 8015df4:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8015df8:	b0cd      	sub	sp, #308	; 0x134
 8015dfa:	4681      	mov	r9, r0
 8015dfc:	f1ba 0f00 	cmp.w	sl, #0
 8015e00:	d001      	beq.n	8015e06 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 8015e02:	f8da a000 	ldr.w	sl, [sl]
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	f000 8274 	beq.w	80162f4 <forward_conv2d_sssa8_ch_nl_pool+0x514>
 8015e0c:	6911      	ldr	r1, [r2, #16]
 8015e0e:	911a      	str	r1, [sp, #104]	; 0x68
 8015e10:	b109      	cbz	r1, 8015e16 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 8015e12:	6809      	ldr	r1, [r1, #0]
 8015e14:	911a      	str	r1, [sp, #104]	; 0x68
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	f000 8212 	beq.w	8016240 <forward_conv2d_sssa8_ch_nl_pool+0x460>
 8015e1c:	69d1      	ldr	r1, [r2, #28]
 8015e1e:	2900      	cmp	r1, #0
 8015e20:	f000 8263 	beq.w	80162ea <forward_conv2d_sssa8_ch_nl_pool+0x50a>
 8015e24:	8b10      	ldrh	r0, [r2, #24]
 8015e26:	680c      	ldr	r4, [r1, #0]
 8015e28:	9413      	str	r4, [sp, #76]	; 0x4c
 8015e2a:	2801      	cmp	r0, #1
 8015e2c:	f200 820d 	bhi.w	801624a <forward_conv2d_sssa8_ch_nl_pool+0x46a>
 8015e30:	2000      	movs	r0, #0
 8015e32:	9017      	str	r0, [sp, #92]	; 0x5c
 8015e34:	2b03      	cmp	r3, #3
 8015e36:	f000 8260 	beq.w	80162fa <forward_conv2d_sssa8_ch_nl_pool+0x51a>
 8015e3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	f000 8257 	beq.w	80162f0 <forward_conv2d_sssa8_ch_nl_pool+0x510>
 8015e42:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8015e4c:	922c      	str	r2, [sp, #176]	; 0xb0
 8015e4e:	9025      	str	r0, [sp, #148]	; 0x94
 8015e50:	2a00      	cmp	r2, #0
 8015e52:	f000 8244 	beq.w	80162de <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 8015e56:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8015e5a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015e5c:	f8da 500c 	ldr.w	r5, [sl, #12]
 8015e60:	68c0      	ldr	r0, [r0, #12]
 8015e62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e64:	68c6      	ldr	r6, [r0, #12]
 8015e66:	6880      	ldr	r0, [r0, #8]
 8015e68:	68e7      	ldr	r7, [r4, #12]
 8015e6a:	9032      	str	r0, [sp, #200]	; 0xc8
 8015e6c:	686c      	ldr	r4, [r5, #4]
 8015e6e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8015e72:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8015e76:	f8d9 c054 	ldr.w	ip, [r9, #84]	; 0x54
 8015e7a:	6852      	ldr	r2, [r2, #4]
 8015e7c:	9214      	str	r2, [sp, #80]	; 0x50
 8015e7e:	e9d5 5002 	ldrd	r5, r0, [r5, #8]
 8015e82:	951b      	str	r5, [sp, #108]	; 0x6c
 8015e84:	f8b9 5028 	ldrh.w	r5, [r9, #40]	; 0x28
 8015e88:	952d      	str	r5, [sp, #180]	; 0xb4
 8015e8a:	889d      	ldrh	r5, [r3, #4]
 8015e8c:	952f      	str	r5, [sp, #188]	; 0xbc
 8015e8e:	68bd      	ldr	r5, [r7, #8]
 8015e90:	9523      	str	r5, [sp, #140]	; 0x8c
 8015e92:	687d      	ldr	r5, [r7, #4]
 8015e94:	9530      	str	r5, [sp, #192]	; 0xc0
 8015e96:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	9416      	str	r4, [sp, #88]	; 0x58
 8015e9e:	689b      	ldr	r3, [r3, #8]
 8015ea0:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
 8015ea4:	961f      	str	r6, [sp, #124]	; 0x7c
 8015ea6:	9533      	str	r5, [sp, #204]	; 0xcc
 8015ea8:	f8d9 5048 	ldr.w	r5, [r9, #72]	; 0x48
 8015eac:	9534      	str	r5, [sp, #208]	; 0xd0
 8015eae:	f8d9 504c 	ldr.w	r5, [r9, #76]	; 0x4c
 8015eb2:	9518      	str	r5, [sp, #96]	; 0x60
 8015eb4:	f8dc 5000 	ldr.w	r5, [ip]
 8015eb8:	9526      	str	r5, [sp, #152]	; 0x98
 8015eba:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015ebe:	9535      	str	r5, [sp, #212]	; 0xd4
 8015ec0:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 8015ec4:	ee09 5a90 	vmov	s19, r5
 8015ec8:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015ecc:	951d      	str	r5, [sp, #116]	; 0x74
 8015ece:	b2a5      	uxth	r5, r4
 8015ed0:	952e      	str	r5, [sp, #184]	; 0xb8
 8015ed2:	b295      	uxth	r5, r2
 8015ed4:	9515      	str	r5, [sp, #84]	; 0x54
 8015ed6:	2900      	cmp	r1, #0
 8015ed8:	f000 81f4 	beq.w	80162c4 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 8015edc:	6889      	ldr	r1, [r1, #8]
 8015ede:	2900      	cmp	r1, #0
 8015ee0:	f000 81f0 	beq.w	80162c4 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 8015ee4:	698d      	ldr	r5, [r1, #24]
 8015ee6:	2d00      	cmp	r5, #0
 8015ee8:	bf08      	it	eq
 8015eea:	4629      	moveq	r1, r5
 8015eec:	ee08 1a90 	vmov	s17, r1
 8015ef0:	b292      	uxth	r2, r2
 8015ef2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015ef4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015ef6:	f8db 6018 	ldr.w	r6, [fp, #24]
 8015efa:	69bf      	ldr	r7, [r7, #24]
 8015efc:	9727      	str	r7, [sp, #156]	; 0x9c
 8015efe:	fa12 f383 	uxtah	r3, r2, r3
 8015f02:	4402      	add	r2, r0
 8015f04:	4403      	add	r3, r0
 8015f06:	921c      	str	r2, [sp, #112]	; 0x70
 8015f08:	b2a2      	uxth	r2, r4
 8015f0a:	9222      	str	r2, [sp, #136]	; 0x88
 8015f0c:	1a5b      	subs	r3, r3, r1
 8015f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f12:	aa3d      	add	r2, sp, #244	; 0xf4
 8015f14:	924a      	str	r2, [sp, #296]	; 0x128
 8015f16:	f240 4501 	movw	r5, #1025	; 0x401
 8015f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015f1e:	e9cd 2546 	strd	r2, r5, [sp, #280]	; 0x118
 8015f22:	9312      	str	r3, [sp, #72]	; 0x48
 8015f24:	f240 4502 	movw	r5, #1026	; 0x402
 8015f28:	2300      	movs	r3, #0
 8015f2a:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
 8015f2e:	e9cd 333d 	strd	r3, r3, [sp, #244]	; 0xf4
 8015f32:	9345      	str	r3, [sp, #276]	; 0x114
 8015f34:	933b      	str	r3, [sp, #236]	; 0xec
 8015f36:	933f      	str	r3, [sp, #252]	; 0xfc
 8015f38:	9549      	str	r5, [sp, #292]	; 0x124
 8015f3a:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8015f3e:	933c      	str	r3, [sp, #240]	; 0xf0
 8015f40:	9340      	str	r3, [sp, #256]	; 0x100
 8015f42:	934b      	str	r3, [sp, #300]	; 0x12c
 8015f44:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8015f48:	9321      	str	r3, [sp, #132]	; 0x84
 8015f4a:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8015f4e:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 8015f52:	9331      	str	r3, [sp, #196]	; 0xc4
 8015f54:	ac41      	add	r4, sp, #260	; 0x104
 8015f56:	4659      	mov	r1, fp
 8015f58:	a845      	add	r0, sp, #276	; 0x114
 8015f5a:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
 8015f5e:	f003 fb37 	bl	80195d0 <core_tensor_clone>
 8015f62:	4620      	mov	r0, r4
 8015f64:	4631      	mov	r1, r6
 8015f66:	f003 fb65 	bl	8019634 <core_array_clone>
 8015f6a:	944b      	str	r4, [sp, #300]	; 0x12c
 8015f6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015f72:	689b      	ldr	r3, [r3, #8]
 8015f74:	9319      	str	r3, [sp, #100]	; 0x64
 8015f76:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015f78:	f8da 2000 	ldr.w	r2, [sl]
 8015f7c:	699b      	ldr	r3, [r3, #24]
 8015f7e:	6808      	ldr	r0, [r1, #0]
 8015f80:	689b      	ldr	r3, [r3, #8]
 8015f82:	9324      	str	r3, [sp, #144]	; 0x90
 8015f84:	f9bd 4098 	ldrsh.w	r4, [sp, #152]	; 0x98
 8015f88:	f8d8 3000 	ldr.w	r3, [r8]
 8015f8c:	2a00      	cmp	r2, #0
 8015f8e:	f000 8181 	beq.w	8016294 <forward_conv2d_sssa8_ch_nl_pool+0x4b4>
 8015f92:	6851      	ldr	r1, [r2, #4]
 8015f94:	2900      	cmp	r1, #0
 8015f96:	f000 817d 	beq.w	8016294 <forward_conv2d_sssa8_ch_nl_pool+0x4b4>
 8015f9a:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8015f9e:	f1bc 0f00 	cmp.w	ip, #0
 8015fa2:	f000 8177 	beq.w	8016294 <forward_conv2d_sssa8_ch_nl_pool+0x4b4>
 8015fa6:	6809      	ldr	r1, [r1, #0]
 8015fa8:	ed91 0a00 	vldr	s0, [r1]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	f000 816e 	beq.w	801628e <forward_conv2d_sssa8_ch_nl_pool+0x4ae>
 8015fb2:	6859      	ldr	r1, [r3, #4]
 8015fb4:	2900      	cmp	r1, #0
 8015fb6:	f000 816a 	beq.w	801628e <forward_conv2d_sssa8_ch_nl_pool+0x4ae>
 8015fba:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8015fbe:	f1bc 0f00 	cmp.w	ip, #0
 8015fc2:	f000 8164 	beq.w	801628e <forward_conv2d_sssa8_ch_nl_pool+0x4ae>
 8015fc6:	6809      	ldr	r1, [r1, #0]
 8015fc8:	edd1 0a00 	vldr	s1, [r1]
 8015fcc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015fce:	f8da c018 	ldr.w	ip, [sl, #24]
 8015fd2:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8015fd6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015fd8:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8015fdc:	6989      	ldr	r1, [r1, #24]
 8015fde:	9717      	str	r7, [sp, #92]	; 0x5c
 8015fe0:	6889      	ldr	r1, [r1, #8]
 8015fe2:	f8de 7008 	ldr.w	r7, [lr, #8]
 8015fe6:	972a      	str	r7, [sp, #168]	; 0xa8
 8015fe8:	912b      	str	r1, [sp, #172]	; 0xac
 8015fea:	b110      	cbz	r0, 8015ff2 <forward_conv2d_sssa8_ch_nl_pool+0x212>
 8015fec:	6840      	ldr	r0, [r0, #4]
 8015fee:	b100      	cbz	r0, 8015ff2 <forward_conv2d_sssa8_ch_nl_pool+0x212>
 8015ff0:	6800      	ldr	r0, [r0, #0]
 8015ff2:	2a00      	cmp	r2, #0
 8015ff4:	f000 8164 	beq.w	80162c0 <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 8015ff8:	6851      	ldr	r1, [r2, #4]
 8015ffa:	2900      	cmp	r1, #0
 8015ffc:	f000 816d 	beq.w	80162da <forward_conv2d_sssa8_ch_nl_pool+0x4fa>
 8016000:	8852      	ldrh	r2, [r2, #2]
 8016002:	2a00      	cmp	r2, #0
 8016004:	f000 815c 	beq.w	80162c0 <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 8016008:	684a      	ldr	r2, [r1, #4]
 801600a:	f992 2000 	ldrsb.w	r2, [r2]
 801600e:	9228      	str	r2, [sp, #160]	; 0xa0
 8016010:	2b00      	cmp	r3, #0
 8016012:	f000 8153 	beq.w	80162bc <forward_conv2d_sssa8_ch_nl_pool+0x4dc>
 8016016:	685a      	ldr	r2, [r3, #4]
 8016018:	2a00      	cmp	r2, #0
 801601a:	f000 8164 	beq.w	80162e6 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 801601e:	885b      	ldrh	r3, [r3, #2]
 8016020:	2b00      	cmp	r3, #0
 8016022:	f000 814b 	beq.w	80162bc <forward_conv2d_sssa8_ch_nl_pool+0x4dc>
 8016026:	6853      	ldr	r3, [r2, #4]
 8016028:	f993 3000 	ldrsb.w	r3, [r3]
 801602c:	9329      	str	r3, [sp, #164]	; 0xa4
 801602e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
 8016032:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016034:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016036:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 801603a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801603e:	f001 f86f 	bl	8017120 <align_factor_ch>
 8016042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016044:	2b00      	cmp	r3, #0
 8016046:	f000 8116 	beq.w	8016276 <forward_conv2d_sssa8_ch_nl_pool+0x496>
 801604a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801604c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8016050:	9416      	str	r4, [sp, #88]	; 0x58
 8016052:	fb02 f10a 	mul.w	r1, r2, sl
 8016056:	b292      	uxth	r2, r2
 8016058:	ee08 1a10 	vmov	s16, r1
 801605c:	9220      	str	r2, [sp, #128]	; 0x80
 801605e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016060:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016062:	fb01 f202 	mul.w	r2, r1, r2
 8016066:	fb03 f202 	mul.w	r2, r3, r2
 801606a:	fb01 f303 	mul.w	r3, r1, r3
 801606e:	9337      	str	r3, [sp, #220]	; 0xdc
 8016070:	b28b      	uxth	r3, r1
 8016072:	ee09 3a10 	vmov	s18, r3
 8016076:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801607a:	931b      	str	r3, [sp, #108]	; 0x6c
 801607c:	f04f 0a00 	mov.w	sl, #0
 8016080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016082:	9236      	str	r2, [sp, #216]	; 0xd8
 8016084:	931e      	str	r3, [sp, #120]	; 0x78
 8016086:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801608a:	e0b7      	b.n	80161fc <forward_conv2d_sssa8_ch_nl_pool+0x41c>
 801608c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801608e:	68aa      	ldr	r2, [r5, #8]
 8016090:	9213      	str	r2, [sp, #76]	; 0x4c
 8016092:	429c      	cmp	r4, r3
 8016094:	bf06      	itte	eq
 8016096:	faba f38a 	clzeq	r3, sl
 801609a:	095b      	lsreq	r3, r3, #5
 801609c:	2300      	movne	r3, #0
 801609e:	9314      	str	r3, [sp, #80]	; 0x50
 80160a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80160a2:	6998      	ldr	r0, [r3, #24]
 80160a4:	e9d0 0100 	ldrd	r0, r1, [r0]
 80160a8:	f003 fa58 	bl	801955c <ai_array_get_byte_size>
 80160ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160ae:	930e      	str	r3, [sp, #56]	; 0x38
 80160b0:	2301      	movs	r3, #1
 80160b2:	930d      	str	r3, [sp, #52]	; 0x34
 80160b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160b6:	930c      	str	r3, [sp, #48]	; 0x30
 80160b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80160ba:	930a      	str	r3, [sp, #40]	; 0x28
 80160bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80160be:	9309      	str	r3, [sp, #36]	; 0x24
 80160c0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80160c2:	9308      	str	r3, [sp, #32]
 80160c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160c6:	9307      	str	r3, [sp, #28]
 80160c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80160ca:	9306      	str	r3, [sp, #24]
 80160cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80160ce:	9305      	str	r3, [sp, #20]
 80160d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160d2:	9304      	str	r3, [sp, #16]
 80160d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80160d6:	9301      	str	r3, [sp, #4]
 80160d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80160de:	9310      	str	r3, [sp, #64]	; 0x40
 80160e0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80160e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80160e6:	9303      	str	r3, [sp, #12]
 80160e8:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 80160ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80160ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80160f0:	9302      	str	r3, [sp, #8]
 80160f2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80160f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80160f6:	ee19 3a90 	vmov	r3, s19
 80160fa:	b2ba      	uxth	r2, r7
 80160fc:	ee19 1a10 	vmov	r1, s18
 8016100:	f000 fa68 	bl	80165d4 <forward_lite_conv2d_sssa8_ch>
 8016104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016106:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016108:	4293      	cmp	r3, r2
 801610a:	f000 80b0 	beq.w	801626e <forward_conv2d_sssa8_ch_nl_pool+0x48e>
 801610e:	1ad3      	subs	r3, r2, r3
 8016110:	429f      	cmp	r7, r3
 8016112:	463a      	mov	r2, r7
 8016114:	bf28      	it	cs
 8016116:	461a      	movcs	r2, r3
 8016118:	931c      	str	r3, [sp, #112]	; 0x70
 801611a:	921e      	str	r2, [sp, #120]	; 0x78
 801611c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801611e:	2b00      	cmp	r3, #0
 8016120:	f040 8096 	bne.w	8016250 <forward_conv2d_sssa8_ch_nl_pool+0x470>
 8016124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016126:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8016128:	4413      	add	r3, r2
 801612a:	9317      	str	r3, [sp, #92]	; 0x5c
 801612c:	ee18 3a90 	vmov	r3, s17
 8016130:	ee18 2a10 	vmov	r2, s16
 8016134:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8016136:	4641      	mov	r1, r8
 8016138:	4658      	mov	r0, fp
 801613a:	47b8      	blx	r7
 801613c:	3401      	adds	r4, #1
 801613e:	b224      	sxth	r4, r4
 8016140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016142:	429c      	cmp	r4, r3
 8016144:	db32      	blt.n	80161ac <forward_conv2d_sssa8_ch_nl_pool+0x3cc>
 8016146:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016148:	9308      	str	r3, [sp, #32]
 801614a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801614e:	9305      	str	r3, [sp, #20]
 8016150:	1ae4      	subs	r4, r4, r3
 8016152:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8016156:	9303      	str	r3, [sp, #12]
 8016158:	2201      	movs	r2, #1
 801615a:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	; 0xc8
 801615e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016160:	9207      	str	r2, [sp, #28]
 8016162:	9306      	str	r3, [sp, #24]
 8016164:	4492      	add	sl, r2
 8016166:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 801616a:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 801616e:	9304      	str	r3, [sp, #16]
 8016170:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 8016174:	9201      	str	r2, [sp, #4]
 8016176:	9302      	str	r3, [sp, #8]
 8016178:	1a52      	subs	r2, r2, r1
 801617a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 801617e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016180:	9300      	str	r3, [sp, #0]
 8016182:	b292      	uxth	r2, r2
 8016184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016186:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8016188:	a845      	add	r0, sp, #276	; 0x114
 801618a:	47b8      	blx	r7
 801618c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801618e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8016190:	695b      	ldr	r3, [r3, #20]
 8016192:	68da      	ldr	r2, [r3, #12]
 8016194:	688b      	ldr	r3, [r1, #8]
 8016196:	4413      	add	r3, r2
 8016198:	608b      	str	r3, [r1, #8]
 801619a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801619c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80161a0:	1ad3      	subs	r3, r2, r3
 80161a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161a6:	b21b      	sxth	r3, r3
 80161a8:	b224      	sxth	r4, r4
 80161aa:	9316      	str	r3, [sp, #88]	; 0x58
 80161ac:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80161b0:	68aa      	ldr	r2, [r5, #8]
 80161b2:	68db      	ldr	r3, [r3, #12]
 80161b4:	4413      	add	r3, r2
 80161b6:	60ab      	str	r3, [r5, #8]
 80161b8:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80161bc:	b132      	cbz	r2, 80161cc <forward_conv2d_sssa8_ch_nl_pool+0x3ec>
 80161be:	f8db 3014 	ldr.w	r3, [fp, #20]
 80161c2:	68da      	ldr	r2, [r3, #12]
 80161c4:	68b3      	ldr	r3, [r6, #8]
 80161c6:	4413      	add	r3, r2
 80161c8:	60b3      	str	r3, [r6, #8]
 80161ca:	68ab      	ldr	r3, [r5, #8]
 80161cc:	68ea      	ldr	r2, [r5, #12]
 80161ce:	9314      	str	r3, [sp, #80]	; 0x50
 80161d0:	4640      	mov	r0, r8
 80161d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80161d4:	f003 f93e 	bl	8019454 <get_tensor_byte_size>
 80161d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80161da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161dc:	4410      	add	r0, r2
 80161de:	4283      	cmp	r3, r0
 80161e0:	d306      	bcc.n	80161f0 <forward_conv2d_sssa8_ch_nl_pool+0x410>
 80161e2:	68eb      	ldr	r3, [r5, #12]
 80161e4:	60ab      	str	r3, [r5, #8]
 80161e6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80161ea:	b10b      	cbz	r3, 80161f0 <forward_conv2d_sssa8_ch_nl_pool+0x410>
 80161ec:	68f3      	ldr	r3, [r6, #12]
 80161ee:	60b3      	str	r3, [r6, #8]
 80161f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161f2:	3b01      	subs	r3, #1
 80161f4:	9312      	str	r3, [sp, #72]	; 0x48
 80161f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80161f8:	459a      	cmp	sl, r3
 80161fa:	d23c      	bcs.n	8016276 <forward_conv2d_sssa8_ch_nl_pool+0x496>
 80161fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161fe:	3301      	adds	r3, #1
 8016200:	2b00      	cmp	r3, #0
 8016202:	f73f af43 	bgt.w	801608c <forward_conv2d_sssa8_ch_nl_pool+0x2ac>
 8016206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016208:	2b00      	cmp	r3, #0
 801620a:	da99      	bge.n	8016140 <forward_conv2d_sssa8_ch_nl_pool+0x360>
 801620c:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8016210:	ee18 3a10 	vmov	r3, s16
 8016214:	fb03 1314 	mls	r3, r3, r4, r1
 8016218:	429a      	cmp	r2, r3
 801621a:	bf84      	itt	hi
 801621c:	6870      	ldrhi	r0, [r6, #4]
 801621e:	181b      	addhi	r3, r3, r0
 8016220:	429a      	cmp	r2, r3
 8016222:	d202      	bcs.n	801622a <forward_conv2d_sssa8_ch_nl_pool+0x44a>
 8016224:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016226:	42a0      	cmp	r0, r4
 8016228:	d137      	bne.n	801629a <forward_conv2d_sssa8_ch_nl_pool+0x4ba>
 801622a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801622c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801622e:	b2a4      	uxth	r4, r4
 8016230:	4413      	add	r3, r2
 8016232:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016234:	1b1b      	subs	r3, r3, r4
 8016236:	b21b      	sxth	r3, r3
 8016238:	4414      	add	r4, r2
 801623a:	9319      	str	r3, [sp, #100]	; 0x64
 801623c:	b224      	sxth	r4, r4
 801623e:	e77f      	b.n	8016140 <forward_conv2d_sssa8_ch_nl_pool+0x360>
 8016240:	2300      	movs	r3, #0
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	deff      	udf	#255	; 0xff
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	deff      	udf	#255	; 0xff
 801624a:	6848      	ldr	r0, [r1, #4]
 801624c:	9017      	str	r0, [sp, #92]	; 0x5c
 801624e:	e5f1      	b.n	8015e34 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8016250:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016252:	461a      	mov	r2, r3
 8016254:	1a5b      	subs	r3, r3, r1
 8016256:	d505      	bpl.n	8016264 <forward_conv2d_sssa8_ch_nl_pool+0x484>
 8016258:	1a8a      	subs	r2, r1, r2
 801625a:	9837      	ldr	r0, [sp, #220]	; 0xdc
 801625c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801625e:	fb00 1202 	mla	r2, r0, r2, r1
 8016262:	9217      	str	r2, [sp, #92]	; 0x5c
 8016264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016268:	b29b      	uxth	r3, r3
 801626a:	9315      	str	r3, [sp, #84]	; 0x54
 801626c:	e75e      	b.n	801612c <forward_conv2d_sssa8_ch_nl_pool+0x34c>
 801626e:	2300      	movs	r3, #0
 8016270:	931e      	str	r3, [sp, #120]	; 0x78
 8016272:	931c      	str	r3, [sp, #112]	; 0x70
 8016274:	e752      	b.n	801611c <forward_conv2d_sssa8_ch_nl_pool+0x33c>
 8016276:	68eb      	ldr	r3, [r5, #12]
 8016278:	60ab      	str	r3, [r5, #8]
 801627a:	68f3      	ldr	r3, [r6, #12]
 801627c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801627e:	60b3      	str	r3, [r6, #8]
 8016280:	68d3      	ldr	r3, [r2, #12]
 8016282:	6093      	str	r3, [r2, #8]
 8016284:	b04d      	add	sp, #308	; 0x134
 8016286:	ecbd 8b04 	vpop	{d8-d9}
 801628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801628e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016300 <forward_conv2d_sssa8_ch_nl_pool+0x520>
 8016292:	e69b      	b.n	8015fcc <forward_conv2d_sssa8_ch_nl_pool+0x1ec>
 8016294:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8016300 <forward_conv2d_sssa8_ch_nl_pool+0x520>
 8016298:	e688      	b.n	8015fac <forward_conv2d_sssa8_ch_nl_pool+0x1cc>
 801629a:	6870      	ldr	r0, [r6, #4]
 801629c:	4402      	add	r2, r0
 801629e:	4293      	cmp	r3, r2
 80162a0:	d2c3      	bcs.n	801622a <forward_conv2d_sssa8_ch_nl_pool+0x44a>
 80162a2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80162a4:	3901      	subs	r1, #1
 80162a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162aa:	f801 2f01 	strb.w	r2, [r1, #1]!
 80162ae:	68f2      	ldr	r2, [r6, #12]
 80162b0:	6870      	ldr	r0, [r6, #4]
 80162b2:	4402      	add	r2, r0
 80162b4:	4293      	cmp	r3, r2
 80162b6:	d3f6      	bcc.n	80162a6 <forward_conv2d_sssa8_ch_nl_pool+0x4c6>
 80162b8:	9712      	str	r7, [sp, #72]	; 0x48
 80162ba:	e7b6      	b.n	801622a <forward_conv2d_sssa8_ch_nl_pool+0x44a>
 80162bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80162be:	e6b6      	b.n	801602e <forward_conv2d_sssa8_ch_nl_pool+0x24e>
 80162c0:	9228      	str	r2, [sp, #160]	; 0xa0
 80162c2:	e6a5      	b.n	8016010 <forward_conv2d_sssa8_ch_nl_pool+0x230>
 80162c4:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80162c8:	ee08 1a90 	vmov	s17, r1
 80162cc:	2900      	cmp	r1, #0
 80162ce:	f43f ae0f 	beq.w	8015ef0 <forward_conv2d_sssa8_ch_nl_pool+0x110>
 80162d2:	6889      	ldr	r1, [r1, #8]
 80162d4:	ee08 1a90 	vmov	s17, r1
 80162d8:	e60a      	b.n	8015ef0 <forward_conv2d_sssa8_ch_nl_pool+0x110>
 80162da:	9128      	str	r1, [sp, #160]	; 0xa0
 80162dc:	e698      	b.n	8016010 <forward_conv2d_sssa8_ch_nl_pool+0x230>
 80162de:	4b09      	ldr	r3, [pc, #36]	; (8016304 <forward_conv2d_sssa8_ch_nl_pool+0x524>)
 80162e0:	932c      	str	r3, [sp, #176]	; 0xb0
 80162e2:	46c3      	mov	fp, r8
 80162e4:	e5b9      	b.n	8015e5a <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 80162e6:	9229      	str	r2, [sp, #164]	; 0xa4
 80162e8:	e6a1      	b.n	801602e <forward_conv2d_sssa8_ch_nl_pool+0x24e>
 80162ea:	9113      	str	r1, [sp, #76]	; 0x4c
 80162ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80162ee:	e5a1      	b.n	8015e34 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	deff      	udf	#255	; 0xff
 80162f4:	2300      	movs	r3, #0
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	deff      	udf	#255	; 0xff
 80162fa:	2300      	movs	r3, #0
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	deff      	udf	#255	; 0xff
 8016300:	00000000 	.word	0x00000000
 8016304:	08015ddd 	.word	0x08015ddd

08016308 <ai_check_custom_types>:
 8016308:	b082      	sub	sp, #8
 801630a:	4b13      	ldr	r3, [pc, #76]	; (8016358 <ai_check_custom_types+0x50>)
 801630c:	9301      	str	r3, [sp, #4]
 801630e:	b118      	cbz	r0, 8016318 <ai_check_custom_types+0x10>
 8016310:	7803      	ldrb	r3, [r0, #0]
 8016312:	2b03      	cmp	r3, #3
 8016314:	d002      	beq.n	801631c <ai_check_custom_types+0x14>
 8016316:	2000      	movs	r0, #0
 8016318:	b002      	add	sp, #8
 801631a:	4770      	bx	lr
 801631c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016320:	4293      	cmp	r3, r2
 8016322:	d004      	beq.n	801632e <ai_check_custom_types+0x26>
 8016324:	2001      	movs	r0, #1
 8016326:	f080 0001 	eor.w	r0, r0, #1
 801632a:	b002      	add	sp, #8
 801632c:	4770      	bx	lr
 801632e:	7842      	ldrb	r2, [r0, #1]
 8016330:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016334:	429a      	cmp	r2, r3
 8016336:	f100 0001 	add.w	r0, r0, #1
 801633a:	d1f3      	bne.n	8016324 <ai_check_custom_types+0x1c>
 801633c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8016340:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016344:	429a      	cmp	r2, r3
 8016346:	d1ed      	bne.n	8016324 <ai_check_custom_types+0x1c>
 8016348:	7842      	ldrb	r2, [r0, #1]
 801634a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801634e:	429a      	cmp	r2, r3
 8016350:	d1e8      	bne.n	8016324 <ai_check_custom_types+0x1c>
 8016352:	2000      	movs	r0, #0
 8016354:	e7e7      	b.n	8016326 <ai_check_custom_types+0x1e>
 8016356:	bf00      	nop
 8016358:	84048403 	.word	0x84048403

0801635c <ai_layers_init_all>:
 801635c:	4601      	mov	r1, r0
 801635e:	2000      	movs	r0, #0
 8016360:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016362:	b143      	cbz	r3, 8016376 <ai_layers_init_all+0x1a>
 8016364:	691a      	ldr	r2, [r3, #16]
 8016366:	60d9      	str	r1, [r3, #12]
 8016368:	429a      	cmp	r2, r3
 801636a:	f100 0001 	add.w	r0, r0, #1
 801636e:	d002      	beq.n	8016376 <ai_layers_init_all+0x1a>
 8016370:	b10a      	cbz	r2, 8016376 <ai_layers_init_all+0x1a>
 8016372:	4613      	mov	r3, r2
 8016374:	e7f5      	b.n	8016362 <ai_layers_init_all+0x6>
 8016376:	4770      	bx	lr

08016378 <ai_layers_post_init_all>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801637c:	2500      	movs	r5, #0
 801637e:	b16c      	cbz	r4, 801639c <ai_layers_post_init_all+0x24>
 8016380:	6863      	ldr	r3, [r4, #4]
 8016382:	07db      	lsls	r3, r3, #31
 8016384:	d504      	bpl.n	8016390 <ai_layers_post_init_all+0x18>
 8016386:	6a23      	ldr	r3, [r4, #32]
 8016388:	4620      	mov	r0, r4
 801638a:	b10b      	cbz	r3, 8016390 <ai_layers_post_init_all+0x18>
 801638c:	4798      	blx	r3
 801638e:	3501      	adds	r5, #1
 8016390:	6923      	ldr	r3, [r4, #16]
 8016392:	42a3      	cmp	r3, r4
 8016394:	d002      	beq.n	801639c <ai_layers_post_init_all+0x24>
 8016396:	b10b      	cbz	r3, 801639c <ai_layers_post_init_all+0x24>
 8016398:	461c      	mov	r4, r3
 801639a:	e7f0      	b.n	801637e <ai_layers_post_init_all+0x6>
 801639c:	4628      	mov	r0, r5
 801639e:	bd38      	pop	{r3, r4, r5, pc}

080163a0 <ai_layers_forward_all>:
 80163a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163a4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80163a8:	4604      	mov	r4, r0
 80163aa:	f1b8 0f00 	cmp.w	r8, #0
 80163ae:	d02b      	beq.n	8016408 <ai_layers_forward_all+0x68>
 80163b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80163b2:	6381      	str	r1, [r0, #56]	; 0x38
 80163b4:	b321      	cbz	r1, 8016400 <ai_layers_forward_all+0x60>
 80163b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80163b8:	2001      	movs	r0, #1
 80163ba:	47c0      	blx	r8
 80163bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80163be:	b1fe      	cbz	r6, 8016400 <ai_layers_forward_all+0x60>
 80163c0:	2700      	movs	r7, #0
 80163c2:	4631      	mov	r1, r6
 80163c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80163c6:	2002      	movs	r0, #2
 80163c8:	47c0      	blx	r8
 80163ca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80163cc:	4628      	mov	r0, r5
 80163ce:	696b      	ldr	r3, [r5, #20]
 80163d0:	4798      	blx	r3
 80163d2:	692e      	ldr	r6, [r5, #16]
 80163d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80163d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80163d8:	42b5      	cmp	r5, r6
 80163da:	f04f 0003 	mov.w	r0, #3
 80163de:	d007      	beq.n	80163f0 <ai_layers_forward_all+0x50>
 80163e0:	47c0      	blx	r8
 80163e2:	3701      	adds	r7, #1
 80163e4:	63a6      	str	r6, [r4, #56]	; 0x38
 80163e6:	2e00      	cmp	r6, #0
 80163e8:	d1eb      	bne.n	80163c2 <ai_layers_forward_all+0x22>
 80163ea:	4638      	mov	r0, r7
 80163ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f0:	2003      	movs	r0, #3
 80163f2:	47c0      	blx	r8
 80163f4:	2300      	movs	r3, #0
 80163f6:	3701      	adds	r7, #1
 80163f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80163fa:	4638      	mov	r0, r7
 80163fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016400:	2700      	movs	r7, #0
 8016402:	4638      	mov	r0, r7
 8016404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016408:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801640a:	6385      	str	r5, [r0, #56]	; 0x38
 801640c:	2d00      	cmp	r5, #0
 801640e:	d0f7      	beq.n	8016400 <ai_layers_forward_all+0x60>
 8016410:	4647      	mov	r7, r8
 8016412:	696b      	ldr	r3, [r5, #20]
 8016414:	4628      	mov	r0, r5
 8016416:	4798      	blx	r3
 8016418:	462b      	mov	r3, r5
 801641a:	692d      	ldr	r5, [r5, #16]
 801641c:	429d      	cmp	r5, r3
 801641e:	d004      	beq.n	801642a <ai_layers_forward_all+0x8a>
 8016420:	63a5      	str	r5, [r4, #56]	; 0x38
 8016422:	3701      	adds	r7, #1
 8016424:	2d00      	cmp	r5, #0
 8016426:	d1f4      	bne.n	8016412 <ai_layers_forward_all+0x72>
 8016428:	e7df      	b.n	80163ea <ai_layers_forward_all+0x4a>
 801642a:	2300      	movs	r3, #0
 801642c:	63a3      	str	r3, [r4, #56]	; 0x38
 801642e:	3701      	adds	r7, #1
 8016430:	e7db      	b.n	80163ea <ai_layers_forward_all+0x4a>
 8016432:	bf00      	nop

08016434 <pool_func_mp_array_integer_INT8>:
 8016434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016438:	b093      	sub	sp, #76	; 0x4c
 801643a:	468c      	mov	ip, r1
 801643c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016440:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8016444:	940d      	str	r4, [sp, #52]	; 0x34
 8016446:	469a      	mov	sl, r3
 8016448:	6804      	ldr	r4, [r0, #0]
 801644a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801644c:	910e      	str	r1, [sp, #56]	; 0x38
 801644e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8016452:	910f      	str	r1, [sp, #60]	; 0x3c
 8016454:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8016458:	9110      	str	r1, [sp, #64]	; 0x40
 801645a:	6980      	ldr	r0, [r0, #24]
 801645c:	6999      	ldr	r1, [r3, #24]
 801645e:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 8016462:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 8016466:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 801646a:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2c00      	cmp	r4, #0
 8016472:	d05b      	beq.n	801652c <pool_func_mp_array_integer_INT8+0xf8>
 8016474:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016478:	f1b9 0f00 	cmp.w	r9, #0
 801647c:	d040      	beq.n	8016500 <pool_func_mp_array_integer_INT8+0xcc>
 801647e:	8865      	ldrh	r5, [r4, #2]
 8016480:	2d00      	cmp	r5, #0
 8016482:	d06c      	beq.n	801655e <pool_func_mp_array_integer_INT8+0x12a>
 8016484:	f8d9 6000 	ldr.w	r6, [r9]
 8016488:	ed96 0a00 	vldr	s0, [r6]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d06a      	beq.n	8016566 <pool_func_mp_array_integer_INT8+0x132>
 8016490:	685e      	ldr	r6, [r3, #4]
 8016492:	2e00      	cmp	r6, #0
 8016494:	d03b      	beq.n	801650e <pool_func_mp_array_integer_INT8+0xda>
 8016496:	885d      	ldrh	r5, [r3, #2]
 8016498:	9511      	str	r5, [sp, #68]	; 0x44
 801649a:	2d00      	cmp	r5, #0
 801649c:	d04f      	beq.n	801653e <pool_func_mp_array_integer_INT8+0x10a>
 801649e:	6835      	ldr	r5, [r6, #0]
 80164a0:	6880      	ldr	r0, [r0, #8]
 80164a2:	6889      	ldr	r1, [r1, #8]
 80164a4:	edd5 0a00 	vldr	s1, [r5]
 80164a8:	f1b9 0f00 	cmp.w	r9, #0
 80164ac:	d051      	beq.n	8016552 <pool_func_mp_array_integer_INT8+0x11e>
 80164ae:	8864      	ldrh	r4, [r4, #2]
 80164b0:	2c00      	cmp	r4, #0
 80164b2:	d036      	beq.n	8016522 <pool_func_mp_array_integer_INT8+0xee>
 80164b4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80164b8:	f994 4000 	ldrsb.w	r4, [r4]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d04c      	beq.n	801655a <pool_func_mp_array_integer_INT8+0x126>
 80164c0:	2e00      	cmp	r6, #0
 80164c2:	d031      	beq.n	8016528 <pool_func_mp_array_integer_INT8+0xf4>
 80164c4:	885b      	ldrh	r3, [r3, #2]
 80164c6:	9311      	str	r3, [sp, #68]	; 0x44
 80164c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d045      	beq.n	801655a <pool_func_mp_array_integer_INT8+0x126>
 80164ce:	6873      	ldr	r3, [r6, #4]
 80164d0:	f993 5000 	ldrsb.w	r5, [r3]
 80164d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164d6:	9304      	str	r3, [sp, #16]
 80164d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164da:	9303      	str	r3, [sp, #12]
 80164dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164de:	9302      	str	r3, [sp, #8]
 80164e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164e2:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80164e6:	e9cd a300 	strd	sl, r3, [sp]
 80164ea:	e9cd e807 	strd	lr, r8, [sp, #28]
 80164ee:	4613      	mov	r3, r2
 80164f0:	e9cd b705 	strd	fp, r7, [sp, #20]
 80164f4:	4662      	mov	r2, ip
 80164f6:	f002 fa17 	bl	8018928 <st_int8_maxpool>
 80164fa:	b013      	add	sp, #76	; 0x4c
 80164fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016500:	2b00      	cmp	r3, #0
 8016502:	d03c      	beq.n	801657e <pool_func_mp_array_integer_INT8+0x14a>
 8016504:	685e      	ldr	r6, [r3, #4]
 8016506:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 801650a:	2e00      	cmp	r6, #0
 801650c:	d1c3      	bne.n	8016496 <pool_func_mp_array_integer_INT8+0x62>
 801650e:	6880      	ldr	r0, [r0, #8]
 8016510:	6889      	ldr	r1, [r1, #8]
 8016512:	f1b9 0f00 	cmp.w	r9, #0
 8016516:	d02d      	beq.n	8016574 <pool_func_mp_array_integer_INT8+0x140>
 8016518:	8864      	ldrh	r4, [r4, #2]
 801651a:	2c00      	cmp	r4, #0
 801651c:	d151      	bne.n	80165c2 <pool_func_mp_array_integer_INT8+0x18e>
 801651e:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 8016522:	2400      	movs	r4, #0
 8016524:	2e00      	cmp	r6, #0
 8016526:	d1cd      	bne.n	80164c4 <pool_func_mp_array_integer_INT8+0x90>
 8016528:	2500      	movs	r5, #0
 801652a:	e7d3      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 801652c:	b33b      	cbz	r3, 801657e <pool_func_mp_array_integer_INT8+0x14a>
 801652e:	685e      	ldr	r6, [r3, #4]
 8016530:	b376      	cbz	r6, 8016590 <pool_func_mp_array_integer_INT8+0x15c>
 8016532:	885d      	ldrh	r5, [r3, #2]
 8016534:	9511      	str	r5, [sp, #68]	; 0x44
 8016536:	2d00      	cmp	r5, #0
 8016538:	d133      	bne.n	80165a2 <pool_func_mp_array_integer_INT8+0x16e>
 801653a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 801653e:	6880      	ldr	r0, [r0, #8]
 8016540:	6889      	ldr	r1, [r1, #8]
 8016542:	b1c4      	cbz	r4, 8016576 <pool_func_mp_array_integer_INT8+0x142>
 8016544:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016548:	eddf 0a21 	vldr	s1, [pc, #132]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 801654c:	f1b9 0f00 	cmp.w	r9, #0
 8016550:	d1ad      	bne.n	80164ae <pool_func_mp_array_integer_INT8+0x7a>
 8016552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016554:	464c      	mov	r4, r9
 8016556:	2b00      	cmp	r3, #0
 8016558:	d1b9      	bne.n	80164ce <pool_func_mp_array_integer_INT8+0x9a>
 801655a:	461d      	mov	r5, r3
 801655c:	e7ba      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 801655e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 8016562:	2b00      	cmp	r3, #0
 8016564:	d194      	bne.n	8016490 <pool_func_mp_array_integer_INT8+0x5c>
 8016566:	6880      	ldr	r0, [r0, #8]
 8016568:	6889      	ldr	r1, [r1, #8]
 801656a:	bb15      	cbnz	r5, 80165b2 <pool_func_mp_array_integer_INT8+0x17e>
 801656c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 8016570:	462c      	mov	r4, r5
 8016572:	e7af      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 8016574:	464c      	mov	r4, r9
 8016576:	eddf 0a16 	vldr	s1, [pc, #88]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 801657a:	4625      	mov	r5, r4
 801657c:	e7aa      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 801657e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 8016582:	6880      	ldr	r0, [r0, #8]
 8016584:	6889      	ldr	r1, [r1, #8]
 8016586:	461c      	mov	r4, r3
 8016588:	eef0 0a40 	vmov.f32	s1, s0
 801658c:	461d      	mov	r5, r3
 801658e:	e7a1      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 8016590:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 8016594:	6880      	ldr	r0, [r0, #8]
 8016596:	6889      	ldr	r1, [r1, #8]
 8016598:	4634      	mov	r4, r6
 801659a:	eef0 0a40 	vmov.f32	s1, s0
 801659e:	4635      	mov	r5, r6
 80165a0:	e798      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 80165a2:	6833      	ldr	r3, [r6, #0]
 80165a4:	6880      	ldr	r0, [r0, #8]
 80165a6:	6889      	ldr	r1, [r1, #8]
 80165a8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 80165ac:	edd3 0a00 	vldr	s1, [r3]
 80165b0:	e78d      	b.n	80164ce <pool_func_mp_array_integer_INT8+0x9a>
 80165b2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80165b6:	eddf 0a06 	vldr	s1, [pc, #24]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 80165ba:	f994 4000 	ldrsb.w	r4, [r4]
 80165be:	461d      	mov	r5, r3
 80165c0:	e788      	b.n	80164d4 <pool_func_mp_array_integer_INT8+0xa0>
 80165c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80165c6:	eddf 0a02 	vldr	s1, [pc, #8]	; 80165d0 <pool_func_mp_array_integer_INT8+0x19c>
 80165ca:	f993 4000 	ldrsb.w	r4, [r3]
 80165ce:	e7ab      	b.n	8016528 <pool_func_mp_array_integer_INT8+0xf4>
 80165d0:	00000000 	.word	0x00000000

080165d4 <forward_lite_conv2d_sssa8_ch>:
 80165d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d8:	ed2d 8b08 	vpush	{d8-d11}
 80165dc:	b0cf      	sub	sp, #316	; 0x13c
 80165de:	4699      	mov	r9, r3
 80165e0:	f8bd 5190 	ldrh.w	r5, [sp, #400]	; 0x190
 80165e4:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 80165e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80165e8:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
 80165ec:	900e      	str	r0, [sp, #56]	; 0x38
 80165ee:	9303      	str	r3, [sp, #12]
 80165f0:	9870      	ldr	r0, [sp, #448]	; 0x1c0
 80165f2:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 80165f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80165f8:	4688      	mov	r8, r1
 80165fa:	f8bd 5194 	ldrh.w	r5, [sp, #404]	; 0x194
 80165fe:	f8bd 1188 	ldrh.w	r1, [sp, #392]	; 0x188
 8016602:	f8bd 61b0 	ldrh.w	r6, [sp, #432]	; 0x1b0
 8016606:	9323      	str	r3, [sp, #140]	; 0x8c
 8016608:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 801660c:	9300      	str	r3, [sp, #0]
 801660e:	9519      	str	r5, [sp, #100]	; 0x64
 8016610:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8016612:	f8bd 5198 	ldrh.w	r5, [sp, #408]	; 0x198
 8016616:	f99d 71a4 	ldrsb.w	r7, [sp, #420]	; 0x1a4
 801661a:	911c      	str	r1, [sp, #112]	; 0x70
 801661c:	468a      	mov	sl, r1
 801661e:	9301      	str	r3, [sp, #4]
 8016620:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8016624:	460b      	mov	r3, r1
 8016626:	4648      	mov	r0, r9
 8016628:	9516      	str	r5, [sp, #88]	; 0x58
 801662a:	960c      	str	r6, [sp, #48]	; 0x30
 801662c:	f8bd 519c 	ldrh.w	r5, [sp, #412]	; 0x19c
 8016630:	f8bd 61b4 	ldrh.w	r6, [sp, #436]	; 0x1b4
 8016634:	9960      	ldr	r1, [sp, #384]	; 0x180
 8016636:	9522      	str	r5, [sp, #136]	; 0x88
 8016638:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801663c:	ee09 2a90 	vmov	s19, r2
 8016640:	961f      	str	r6, [sp, #124]	; 0x7c
 8016642:	f99d 51a8 	ldrsb.w	r5, [sp, #424]	; 0x1a8
 8016646:	f8bd 61b8 	ldrh.w	r6, [sp, #440]	; 0x1b8
 801664a:	9702      	str	r7, [sp, #8]
 801664c:	f000 fdce 	bl	80171ec <st_sssa8_ch_convolve_rank1upd>
 8016650:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016652:	fb1a f303 	smulbb	r3, sl, r3
 8016656:	fb13 f309 	smulbb	r3, r3, r9
 801665a:	ee19 2a90 	vmov	r2, s19
 801665e:	b29b      	uxth	r3, r3
 8016660:	eb04 000b 	add.w	r0, r4, fp
 8016664:	9314      	str	r3, [sp, #80]	; 0x50
 8016666:	f06f 0309 	mvn.w	r3, #9
 801666a:	fb03 0302 	mla	r3, r3, r2, r0
 801666e:	ee0a 3a90 	vmov	s21, r3
 8016672:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016676:	9013      	str	r0, [sp, #76]	; 0x4c
 8016678:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801667c:	931d      	str	r3, [sp, #116]	; 0x74
 801667e:	b1ba      	cbz	r2, 80166b0 <forward_lite_conv2d_sssa8_ch+0xdc>
 8016680:	1d19      	adds	r1, r3, #4
 8016682:	f04f 0c01 	mov.w	ip, #1
 8016686:	f934 3b02 	ldrsh.w	r3, [r4], #2
 801668a:	1e5a      	subs	r2, r3, #1
 801668c:	b292      	uxth	r2, r2
 801668e:	fa0c f003 	lsl.w	r0, ip, r3
 8016692:	2a14      	cmp	r2, #20
 8016694:	fa05 f303 	lsl.w	r3, r5, r3
 8016698:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801669c:	f200 82b9 	bhi.w	8016c12 <forward_lite_conv2d_sssa8_ch+0x63e>
 80166a0:	f841 3c04 	str.w	r3, [r1, #-4]
 80166a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80166a6:	42a3      	cmp	r3, r4
 80166a8:	f101 0104 	add.w	r1, r1, #4
 80166ac:	d1eb      	bne.n	8016686 <forward_lite_conv2d_sssa8_ch+0xb2>
 80166ae:	461c      	mov	r4, r3
 80166b0:	eba4 030b 	sub.w	r3, r4, fp
 80166b4:	931e      	str	r3, [sp, #120]	; 0x78
 80166b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166b8:	932f      	str	r3, [sp, #188]	; 0xbc
 80166ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166bc:	9334      	str	r3, [sp, #208]	; 0xd0
 80166be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80166c0:	9333      	str	r3, [sp, #204]	; 0xcc
 80166c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166c4:	9346      	str	r3, [sp, #280]	; 0x118
 80166c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80166ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80166cc:	9348      	str	r3, [sp, #288]	; 0x120
 80166ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80166d0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80166d2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80166d4:	9349      	str	r3, [sp, #292]	; 0x124
 80166d6:	ab36      	add	r3, sp, #216	; 0xd8
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	aa2e      	add	r2, sp, #184	; 0xb8
 80166dc:	ab32      	add	r3, sp, #200	; 0xc8
 80166de:	a944      	add	r1, sp, #272	; 0x110
 80166e0:	a83a      	add	r0, sp, #232	; 0xe8
 80166e2:	9438      	str	r4, [sp, #224]	; 0xe0
 80166e4:	9537      	str	r5, [sp, #220]	; 0xdc
 80166e6:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 80166ea:	f001 f907 	bl	80178fc <ai_padding_opt_init>
 80166ee:	4629      	mov	r1, r5
 80166f0:	ee19 0a90 	vmov	r0, s19
 80166f4:	fb05 f504 	mul.w	r5, r5, r4
 80166f8:	fb09 f305 	mul.w	r3, r9, r5
 80166fc:	fb00 f303 	mul.w	r3, r0, r3
 8016700:	4622      	mov	r2, r4
 8016702:	005b      	lsls	r3, r3, #1
 8016704:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8016708:	bfd4      	ite	le
 801670a:	ebca 0403 	rsble	r4, sl, r3
 801670e:	f5ca 54a0 	rsbgt	r4, sl, #5120	; 0x1400
 8016712:	fb09 fa02 	mul.w	sl, r9, r2
 8016716:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016718:	fb0a f301 	mul.w	r3, sl, r1
 801671c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016720:	2e01      	cmp	r6, #1
 8016722:	ee0a 3a10 	vmov	s20, r3
 8016726:	ea4f 0464 	mov.w	r4, r4, asr #1
 801672a:	f000 8483 	beq.w	8017034 <forward_lite_conv2d_sssa8_ch+0xa60>
 801672e:	2300      	movs	r3, #0
 8016730:	9328      	str	r3, [sp, #160]	; 0xa0
 8016732:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016736:	ee19 1a90 	vmov	r1, s19
 801673a:	fb02 f303 	mul.w	r3, r2, r3
 801673e:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 8016740:	fb01 2303 	mla	r3, r1, r3, r2
 8016744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016746:	429a      	cmp	r2, r3
 8016748:	f080 813b 	bcs.w	80169c2 <forward_lite_conv2d_sssa8_ch+0x3ee>
 801674c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801674e:	fb03 f308 	mul.w	r3, r3, r8
 8016752:	fb09 2303 	mla	r3, r9, r3, r2
 8016756:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 8016758:	429a      	cmp	r2, r3
 801675a:	f080 8132 	bcs.w	80169c2 <forward_lite_conv2d_sssa8_ch+0x3ee>
 801675e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016760:	fb94 f3f3 	sdiv	r3, r4, r3
 8016764:	b29b      	uxth	r3, r3
 8016766:	4619      	mov	r1, r3
 8016768:	ee19 3a90 	vmov	r3, s19
 801676c:	4299      	cmp	r1, r3
 801676e:	bf28      	it	cs
 8016770:	4619      	movcs	r1, r3
 8016772:	fbb3 f2f1 	udiv	r2, r3, r1
 8016776:	fb01 3312 	mls	r3, r1, r2, r3
 801677a:	b29b      	uxth	r3, r3
 801677c:	b292      	uxth	r2, r2
 801677e:	912b      	str	r1, [sp, #172]	; 0xac
 8016780:	9229      	str	r2, [sp, #164]	; 0xa4
 8016782:	2b00      	cmp	r3, #0
 8016784:	f040 8468 	bne.w	8017058 <forward_lite_conv2d_sssa8_ch+0xa84>
 8016788:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801678a:	2b00      	cmp	r3, #0
 801678c:	f000 8393 	beq.w	8016eb6 <forward_lite_conv2d_sssa8_ch+0x8e2>
 8016790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016792:	f8cd 8020 	str.w	r8, [sp, #32]
 8016796:	fb09 f505 	mul.w	r5, r9, r5
 801679a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801679e:	9311      	str	r3, [sp, #68]	; 0x44
 80167a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80167a2:	3b01      	subs	r3, #1
 80167a4:	b29b      	uxth	r3, r3
 80167a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80167a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80167aa:	425b      	negs	r3, r3
 80167ac:	b29b      	uxth	r3, r3
 80167ae:	932a      	str	r3, [sp, #168]	; 0xa8
 80167b0:	f009 0303 	and.w	r3, r9, #3
 80167b4:	b23e      	sxth	r6, r7
 80167b6:	930d      	str	r3, [sp, #52]	; 0x34
 80167b8:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80167bc:	2400      	movs	r4, #0
 80167be:	9312      	str	r3, [sp, #72]	; 0x48
 80167c0:	ee08 aa90 	vmov	s17, sl
 80167c4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80167c8:	ee09 9a10 	vmov	s18, r9
 80167cc:	ee0b 6a90 	vmov	s23, r6
 80167d0:	9326      	str	r3, [sp, #152]	; 0x98
 80167d2:	4625      	mov	r5, r4
 80167d4:	a83a      	add	r0, sp, #232	; 0xe8
 80167d6:	f001 f8e9 	bl	80179ac <ai_padding_opt_phase1>
 80167da:	ee19 3a90 	vmov	r3, s19
 80167de:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
 80167e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80167e2:	fb05 f303 	mul.w	r3, r5, r3
 80167e6:	fb01 2303 	mla	r3, r1, r3, r2
 80167ea:	931a      	str	r3, [sp, #104]	; 0x68
 80167ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80167ee:	b953      	cbnz	r3, 8016806 <forward_lite_conv2d_sssa8_ch+0x232>
 80167f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f040 8410 	bne.w	8017018 <forward_lite_conv2d_sssa8_ch+0xa44>
 80167f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80167fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80167fc:	9860      	ldr	r0, [sp, #384]	; 0x180
 80167fe:	ee1a 1a10 	vmov	r1, s20
 8016802:	f001 fa79 	bl	8017cf8 <st_int8_to16_dual_interleaved>
 8016806:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016808:	2b00      	cmp	r3, #0
 801680a:	f000 8410 	beq.w	801702e <forward_lite_conv2d_sssa8_ch+0xa5a>
 801680e:	b2a3      	uxth	r3, r4
 8016810:	932c      	str	r3, [sp, #176]	; 0xb0
 8016812:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8016816:	1a9b      	subs	r3, r3, r2
 8016818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801681a:	edcd 9a25 	vstr	s19, [sp, #148]	; 0x94
 801681e:	fb05 3302 	mla	r3, r5, r2, r3
 8016822:	9309      	str	r3, [sp, #36]	; 0x24
 8016824:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 8016828:	9310      	str	r3, [sp, #64]	; 0x40
 801682a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801682c:	9324      	str	r3, [sp, #144]	; 0x90
 801682e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016830:	9317      	str	r3, [sp, #92]	; 0x5c
 8016832:	9b60      	ldr	r3, [sp, #384]	; 0x180
 8016834:	9327      	str	r3, [sp, #156]	; 0x9c
 8016836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016838:	931b      	str	r3, [sp, #108]	; 0x6c
 801683a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801683c:	9321      	str	r3, [sp, #132]	; 0x84
 801683e:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8016840:	9320      	str	r3, [sp, #128]	; 0x80
 8016842:	eeb0 ba6a 	vmov.f32	s22, s21
 8016846:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8016848:	923b      	str	r2, [sp, #236]	; 0xec
 801684a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801684c:	923c      	str	r2, [sp, #240]	; 0xf0
 801684e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016850:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8016852:	933a      	str	r3, [sp, #232]	; 0xe8
 8016854:	2a00      	cmp	r2, #0
 8016856:	f000 82e7 	beq.w	8016e28 <forward_lite_conv2d_sssa8_ch+0x854>
 801685a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801685c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801685e:	4252      	negs	r2, r2
 8016860:	b292      	uxth	r2, r2
 8016862:	9207      	str	r2, [sp, #28]
 8016864:	2100      	movs	r1, #0
 8016866:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016868:	9215      	str	r2, [sp, #84]	; 0x54
 801686a:	460a      	mov	r2, r1
 801686c:	2b00      	cmp	r3, #0
 801686e:	d070      	beq.n	8016952 <forward_lite_conv2d_sssa8_ch+0x37e>
 8016870:	3b01      	subs	r3, #1
 8016872:	933a      	str	r3, [sp, #232]	; 0xe8
 8016874:	2301      	movs	r3, #1
 8016876:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 801687a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801687c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801687e:	4283      	cmp	r3, r0
 8016880:	dd75      	ble.n	801696e <forward_lite_conv2d_sssa8_ch+0x39a>
 8016882:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016884:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016886:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 801688a:	fb02 3200 	mla	r2, r2, r0, r3
 801688e:	b28b      	uxth	r3, r1
 8016890:	930a      	str	r3, [sp, #40]	; 0x28
 8016892:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016894:	1ad5      	subs	r5, r2, r3
 8016896:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801689a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801689c:	ee19 7a10 	vmov	r7, s18
 80168a0:	ee1b 8a90 	vmov	r8, s23
 80168a4:	461e      	mov	r6, r3
 80168a6:	4693      	mov	fp, r2
 80168a8:	45ab      	cmp	fp, r5
 80168aa:	da39      	bge.n	8016920 <forward_lite_conv2d_sssa8_ch+0x34c>
 80168ac:	9a08      	ldr	r2, [sp, #32]
 80168ae:	2e00      	cmp	r6, #0
 80168b0:	fb03 f202 	mul.w	r2, r3, r2
 80168b4:	9206      	str	r2, [sp, #24]
 80168b6:	f2c0 8398 	blt.w	8016fea <forward_lite_conv2d_sssa8_ch+0xa16>
 80168ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168bc:	2a00      	cmp	r2, #0
 80168be:	f000 833f 	beq.w	8016f40 <forward_lite_conv2d_sssa8_ch+0x96c>
 80168c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168c4:	429a      	cmp	r2, r3
 80168c6:	46da      	mov	sl, fp
 80168c8:	f340 82fa 	ble.w	8016ec0 <forward_lite_conv2d_sssa8_ch+0x8ec>
 80168cc:	46dc      	mov	ip, fp
 80168ce:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 80168d2:	46b3      	mov	fp, r6
 80168d4:	e011      	b.n	80168fa <forward_lite_conv2d_sssa8_ch+0x326>
 80168d6:	9e08      	ldr	r6, [sp, #32]
 80168d8:	9b06      	ldr	r3, [sp, #24]
 80168da:	4566      	cmp	r6, ip
 80168dc:	4463      	add	r3, ip
 80168de:	dd12      	ble.n	8016906 <forward_lite_conv2d_sssa8_ch+0x332>
 80168e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80168e2:	f10a 0a01 	add.w	sl, sl, #1
 80168e6:	fa0f fa8a 	sxth.w	sl, sl
 80168ea:	fb07 0003 	mla	r0, r7, r3, r0
 80168ee:	f001 f877 	bl	80179e0 <st_int8_to16_no_shift>
 80168f2:	45aa      	cmp	sl, r5
 80168f4:	444c      	add	r4, r9
 80168f6:	46d4      	mov	ip, sl
 80168f8:	da0f      	bge.n	801691a <forward_lite_conv2d_sssa8_ch+0x346>
 80168fa:	f1ba 0f00 	cmp.w	sl, #0
 80168fe:	463a      	mov	r2, r7
 8016900:	4621      	mov	r1, r4
 8016902:	4640      	mov	r0, r8
 8016904:	dae7      	bge.n	80168d6 <forward_lite_conv2d_sssa8_ch+0x302>
 8016906:	f10a 0a01 	add.w	sl, sl, #1
 801690a:	fa0f fa8a 	sxth.w	sl, sl
 801690e:	f002 faeb 	bl	8018ee8 <arm_fill_q15>
 8016912:	45aa      	cmp	sl, r5
 8016914:	444c      	add	r4, r9
 8016916:	46d4      	mov	ip, sl
 8016918:	dbef      	blt.n	80168fa <forward_lite_conv2d_sssa8_ch+0x326>
 801691a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801691c:	465e      	mov	r6, fp
 801691e:	469b      	mov	fp, r3
 8016920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016922:	3601      	adds	r6, #1
 8016924:	b236      	sxth	r6, r6
 8016926:	4296      	cmp	r6, r2
 8016928:	4633      	mov	r3, r6
 801692a:	dbbd      	blt.n	80168a8 <forward_lite_conv2d_sssa8_ch+0x2d4>
 801692c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801692e:	42a3      	cmp	r3, r4
 8016930:	d022      	beq.n	8016978 <forward_lite_conv2d_sssa8_ch+0x3a4>
 8016932:	9b07      	ldr	r3, [sp, #28]
 8016934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016936:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016938:	4413      	add	r3, r2
 801693a:	b29b      	uxth	r3, r3
 801693c:	3101      	adds	r1, #1
 801693e:	9307      	str	r3, [sp, #28]
 8016940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016942:	b209      	sxth	r1, r1
 8016944:	428b      	cmp	r3, r1
 8016946:	460a      	mov	r2, r1
 8016948:	f340 8256 	ble.w	8016df8 <forward_lite_conv2d_sssa8_ch+0x824>
 801694c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801694e:	2b00      	cmp	r3, #0
 8016950:	d18e      	bne.n	8016870 <forward_lite_conv2d_sssa8_ch+0x29c>
 8016952:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8016954:	2b00      	cmp	r3, #0
 8016956:	f040 82c0 	bne.w	8016eda <forward_lite_conv2d_sssa8_ch+0x906>
 801695a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801695c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801695e:	3b01      	subs	r3, #1
 8016960:	933c      	str	r3, [sp, #240]	; 0xf0
 8016962:	2301      	movs	r3, #1
 8016964:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8016968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801696a:	4283      	cmp	r3, r0
 801696c:	dc89      	bgt.n	8016882 <forward_lite_conv2d_sssa8_ch+0x2ae>
 801696e:	b28b      	uxth	r3, r1
 8016970:	930a      	str	r3, [sp, #40]	; 0x28
 8016972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016974:	42a3      	cmp	r3, r4
 8016976:	d1dc      	bne.n	8016932 <forward_lite_conv2d_sssa8_ch+0x35e>
 8016978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801697a:	9305      	str	r3, [sp, #20]
 801697c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801697e:	9304      	str	r3, [sp, #16]
 8016980:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016982:	9303      	str	r3, [sp, #12]
 8016984:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016986:	9302      	str	r3, [sp, #8]
 8016988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801698a:	9301      	str	r3, [sp, #4]
 801698c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801698e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016990:	9300      	str	r3, [sp, #0]
 8016992:	ee1b 2a10 	vmov	r2, s22
 8016996:	ee19 3a90 	vmov	r3, s19
 801699a:	ee1a 0a10 	vmov	r0, s20
 801699e:	f001 fa99 	bl	8017ed4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80169a2:	9b07      	ldr	r3, [sp, #28]
 80169a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80169a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80169a8:	9015      	str	r0, [sp, #84]	; 0x54
 80169aa:	4413      	add	r3, r2
 80169ac:	b29b      	uxth	r3, r3
 80169ae:	3101      	adds	r1, #1
 80169b0:	9307      	str	r3, [sp, #28]
 80169b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169b4:	b209      	sxth	r1, r1
 80169b6:	428b      	cmp	r3, r1
 80169b8:	460a      	mov	r2, r1
 80169ba:	f340 8235 	ble.w	8016e28 <forward_lite_conv2d_sssa8_ch+0x854>
 80169be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80169c0:	e7c4      	b.n	801694c <forward_lite_conv2d_sssa8_ch+0x378>
 80169c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80169c4:	fb94 f3f3 	sdiv	r3, r4, r3
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	4619      	mov	r1, r3
 80169cc:	ee19 3a90 	vmov	r3, s19
 80169d0:	4299      	cmp	r1, r3
 80169d2:	bf28      	it	cs
 80169d4:	4619      	movcs	r1, r3
 80169d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80169da:	fb01 3312 	mls	r3, r1, r2, r3
 80169de:	b29b      	uxth	r3, r3
 80169e0:	b292      	uxth	r2, r2
 80169e2:	911b      	str	r1, [sp, #108]	; 0x6c
 80169e4:	9221      	str	r2, [sp, #132]	; 0x84
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	f000 811c 	beq.w	8016c24 <forward_lite_conv2d_sssa8_ch+0x650>
 80169ec:	4613      	mov	r3, r2
 80169ee:	3301      	adds	r3, #1
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	f000 825f 	beq.w	8016eb6 <forward_lite_conv2d_sssa8_ch+0x8e2>
 80169f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169fa:	edcd 9a24 	vstr	s19, [sp, #144]	; 0x90
 80169fe:	fb09 f505 	mul.w	r5, r9, r5
 8016a02:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016a06:	9311      	str	r3, [sp, #68]	; 0x44
 8016a08:	f009 0303 	and.w	r3, r9, #3
 8016a0c:	b23e      	sxth	r6, r7
 8016a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8016a10:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8016a14:	9312      	str	r3, [sp, #72]	; 0x48
 8016a16:	ee08 6a90 	vmov	s17, r6
 8016a1a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8016a1e:	9320      	str	r3, [sp, #128]	; 0x80
 8016a20:	f8cd 8020 	str.w	r8, [sp, #32]
 8016a24:	464f      	mov	r7, r9
 8016a26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016a28:	b953      	cbnz	r3, 8016a40 <forward_lite_conv2d_sssa8_ch+0x46c>
 8016a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	f040 81db 	bne.w	8016de8 <forward_lite_conv2d_sssa8_ch+0x814>
 8016a32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016a36:	9860      	ldr	r0, [sp, #384]	; 0x180
 8016a38:	ee1a 1a10 	vmov	r1, s20
 8016a3c:	f001 f95c 	bl	8017cf8 <st_int8_to16_dual_interleaved>
 8016a40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	f000 80b7 	beq.w	8016bb6 <forward_lite_conv2d_sssa8_ch+0x5e2>
 8016a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016a4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016a4c:	425b      	negs	r3, r3
 8016a4e:	b29b      	uxth	r3, r3
 8016a50:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a52:	2400      	movs	r4, #0
 8016a54:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
 8016a56:	9318      	str	r3, [sp, #96]	; 0x60
 8016a58:	4626      	mov	r6, r4
 8016a5a:	a83a      	add	r0, sp, #232	; 0xe8
 8016a5c:	f000 ffa6 	bl	80179ac <ai_padding_opt_phase1>
 8016a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	f000 81bd 	beq.w	8016de2 <forward_lite_conv2d_sssa8_ch+0x80e>
 8016a68:	b2a3      	uxth	r3, r4
 8016a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8016a6c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8016a70:	1a9b      	subs	r3, r3, r2
 8016a72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016a74:	fb06 3302 	mla	r3, r6, r2, r3
 8016a78:	9309      	str	r3, [sp, #36]	; 0x24
 8016a7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a7c:	425b      	negs	r3, r3
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	9307      	str	r3, [sp, #28]
 8016a82:	2100      	movs	r1, #0
 8016a84:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8016a88:	9310      	str	r3, [sp, #64]	; 0x40
 8016a8a:	460a      	mov	r2, r1
 8016a8c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	f000 80da 	beq.w	8016c48 <forward_lite_conv2d_sssa8_ch+0x674>
 8016a94:	3b01      	subs	r3, #1
 8016a96:	933a      	str	r3, [sp, #232]	; 0xe8
 8016a98:	2301      	movs	r3, #1
 8016a9a:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8016a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016aa2:	4283      	cmp	r3, r0
 8016aa4:	f280 80de 	bge.w	8016c64 <forward_lite_conv2d_sssa8_ch+0x690>
 8016aa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016aaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016aac:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8016ab0:	fb02 3200 	mla	r2, r2, r0, r3
 8016ab4:	b28b      	uxth	r3, r1
 8016ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8016ab8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016aba:	1ad4      	subs	r4, r2, r3
 8016abc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8016ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ac2:	ee08 aa10 	vmov	s16, sl
 8016ac6:	ee18 8a90 	vmov	r8, s17
 8016aca:	461e      	mov	r6, r3
 8016acc:	4693      	mov	fp, r2
 8016ace:	45a3      	cmp	fp, r4
 8016ad0:	da35      	bge.n	8016b3e <forward_lite_conv2d_sssa8_ch+0x56a>
 8016ad2:	9a08      	ldr	r2, [sp, #32]
 8016ad4:	2e00      	cmp	r6, #0
 8016ad6:	fb03 f202 	mul.w	r2, r3, r2
 8016ada:	9206      	str	r2, [sp, #24]
 8016adc:	f2c0 8173 	blt.w	8016dc6 <forward_lite_conv2d_sssa8_ch+0x7f2>
 8016ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ae2:	2a00      	cmp	r2, #0
 8016ae4:	f000 811c 	beq.w	8016d20 <forward_lite_conv2d_sssa8_ch+0x74c>
 8016ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016aea:	429a      	cmp	r2, r3
 8016aec:	46da      	mov	sl, fp
 8016aee:	f340 809e 	ble.w	8016c2e <forward_lite_conv2d_sssa8_ch+0x65a>
 8016af2:	46dc      	mov	ip, fp
 8016af4:	9615      	str	r6, [sp, #84]	; 0x54
 8016af6:	e011      	b.n	8016b1c <forward_lite_conv2d_sssa8_ch+0x548>
 8016af8:	9e08      	ldr	r6, [sp, #32]
 8016afa:	9b06      	ldr	r3, [sp, #24]
 8016afc:	4566      	cmp	r6, ip
 8016afe:	4463      	add	r3, ip
 8016b00:	dd12      	ble.n	8016b28 <forward_lite_conv2d_sssa8_ch+0x554>
 8016b02:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016b04:	f10a 0a01 	add.w	sl, sl, #1
 8016b08:	fa0f fa8a 	sxth.w	sl, sl
 8016b0c:	fb07 0003 	mla	r0, r7, r3, r0
 8016b10:	f000 ff66 	bl	80179e0 <st_int8_to16_no_shift>
 8016b14:	4554      	cmp	r4, sl
 8016b16:	444d      	add	r5, r9
 8016b18:	46d4      	mov	ip, sl
 8016b1a:	dd0f      	ble.n	8016b3c <forward_lite_conv2d_sssa8_ch+0x568>
 8016b1c:	f1ba 0f00 	cmp.w	sl, #0
 8016b20:	463a      	mov	r2, r7
 8016b22:	4629      	mov	r1, r5
 8016b24:	4640      	mov	r0, r8
 8016b26:	dae7      	bge.n	8016af8 <forward_lite_conv2d_sssa8_ch+0x524>
 8016b28:	f10a 0a01 	add.w	sl, sl, #1
 8016b2c:	fa0f fa8a 	sxth.w	sl, sl
 8016b30:	f002 f9da 	bl	8018ee8 <arm_fill_q15>
 8016b34:	4554      	cmp	r4, sl
 8016b36:	444d      	add	r5, r9
 8016b38:	46d4      	mov	ip, sl
 8016b3a:	dcef      	bgt.n	8016b1c <forward_lite_conv2d_sssa8_ch+0x548>
 8016b3c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b40:	3601      	adds	r6, #1
 8016b42:	b236      	sxth	r6, r6
 8016b44:	4296      	cmp	r6, r2
 8016b46:	4633      	mov	r3, r6
 8016b48:	dbc1      	blt.n	8016ace <forward_lite_conv2d_sssa8_ch+0x4fa>
 8016b4a:	ee18 aa10 	vmov	sl, s16
 8016b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b50:	42ab      	cmp	r3, r5
 8016b52:	f000 808d 	beq.w	8016c70 <forward_lite_conv2d_sssa8_ch+0x69c>
 8016b56:	9b07      	ldr	r3, [sp, #28]
 8016b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016b5c:	4413      	add	r3, r2
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	3101      	adds	r1, #1
 8016b62:	9307      	str	r3, [sp, #28]
 8016b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b66:	b209      	sxth	r1, r1
 8016b68:	428b      	cmp	r3, r1
 8016b6a:	460a      	mov	r2, r1
 8016b6c:	dc8e      	bgt.n	8016a8c <forward_lite_conv2d_sssa8_ch+0x4b8>
 8016b6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016b72:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016b74:	4413      	add	r3, r2
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	3401      	adds	r4, #1
 8016b7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b7e:	b224      	sxth	r4, r4
 8016b80:	42a3      	cmp	r3, r4
 8016b82:	4626      	mov	r6, r4
 8016b84:	f73f af69 	bgt.w	8016a5a <forward_lite_conv2d_sssa8_ch+0x486>
 8016b88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016b8a:	42a9      	cmp	r1, r5
 8016b8c:	d013      	beq.n	8016bb6 <forward_lite_conv2d_sssa8_ch+0x5e2>
 8016b8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b90:	9305      	str	r3, [sp, #20]
 8016b92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016b94:	9304      	str	r3, [sp, #16]
 8016b96:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8016b98:	9303      	str	r3, [sp, #12]
 8016b9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016b9c:	9302      	str	r3, [sp, #8]
 8016b9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ba0:	9301      	str	r3, [sp, #4]
 8016ba2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ba4:	9300      	str	r3, [sp, #0]
 8016ba6:	ee1a 2a90 	vmov	r2, s21
 8016baa:	ee19 3a90 	vmov	r3, s19
 8016bae:	ee1a 0a10 	vmov	r0, s20
 8016bb2:	f001 fcad 	bl	8018510 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8016bb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016bba:	1a9b      	subs	r3, r3, r2
 8016bbc:	b299      	uxth	r1, r3
 8016bbe:	428a      	cmp	r2, r1
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	bf28      	it	cs
 8016bc4:	460b      	movcs	r3, r1
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	9124      	str	r1, [sp, #144]	; 0x90
 8016bca:	b1cb      	cbz	r3, 8016c00 <forward_lite_conv2d_sssa8_ch+0x62c>
 8016bcc:	9960      	ldr	r1, [sp, #384]	; 0x180
 8016bce:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016bd0:	fb00 1102 	mla	r1, r0, r2, r1
 8016bd4:	9160      	str	r1, [sp, #384]	; 0x180
 8016bd6:	ee1a 1a90 	vmov	r1, s21
 8016bda:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016bde:	ee0a 1a90 	vmov	s21, r1
 8016be2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016be4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8016be8:	911e      	str	r1, [sp, #120]	; 0x78
 8016bea:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8016bec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016bf0:	9170      	str	r1, [sp, #448]	; 0x1c0
 8016bf2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016bf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016bf8:	911d      	str	r1, [sp, #116]	; 0x74
 8016bfa:	996b      	ldr	r1, [sp, #428]	; 0x1ac
 8016bfc:	4411      	add	r1, r2
 8016bfe:	916b      	str	r1, [sp, #428]	; 0x1ac
 8016c00:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016c02:	1e4a      	subs	r2, r1, #1
 8016c04:	b292      	uxth	r2, r2
 8016c06:	2900      	cmp	r1, #0
 8016c08:	f000 8155 	beq.w	8016eb6 <forward_lite_conv2d_sssa8_ch+0x8e2>
 8016c0c:	9221      	str	r2, [sp, #132]	; 0x84
 8016c0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c10:	e709      	b.n	8016a26 <forward_lite_conv2d_sssa8_ch+0x452>
 8016c12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c14:	f841 5c04 	str.w	r5, [r1, #-4]
 8016c18:	42a3      	cmp	r3, r4
 8016c1a:	f101 0104 	add.w	r1, r1, #4
 8016c1e:	f47f ad32 	bne.w	8016686 <forward_lite_conv2d_sssa8_ch+0xb2>
 8016c22:	e544      	b.n	80166ae <forward_lite_conv2d_sssa8_ch+0xda>
 8016c24:	4613      	mov	r3, r2
 8016c26:	3a01      	subs	r2, #1
 8016c28:	b292      	uxth	r2, r2
 8016c2a:	9221      	str	r2, [sp, #132]	; 0x84
 8016c2c:	e6e1      	b.n	80169f2 <forward_lite_conv2d_sssa8_ch+0x41e>
 8016c2e:	f10a 0a01 	add.w	sl, sl, #1
 8016c32:	4629      	mov	r1, r5
 8016c34:	463a      	mov	r2, r7
 8016c36:	4640      	mov	r0, r8
 8016c38:	fa0f fa8a 	sxth.w	sl, sl
 8016c3c:	f002 f954 	bl	8018ee8 <arm_fill_q15>
 8016c40:	45a2      	cmp	sl, r4
 8016c42:	444d      	add	r5, r9
 8016c44:	dbf3      	blt.n	8016c2e <forward_lite_conv2d_sssa8_ch+0x65a>
 8016c46:	e77a      	b.n	8016b3e <forward_lite_conv2d_sssa8_ch+0x56a>
 8016c48:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d135      	bne.n	8016cba <forward_lite_conv2d_sssa8_ch+0x6e6>
 8016c4e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8016c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c52:	3b01      	subs	r3, #1
 8016c54:	933c      	str	r3, [sp, #240]	; 0xf0
 8016c56:	2301      	movs	r3, #1
 8016c58:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8016c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c5e:	4283      	cmp	r3, r0
 8016c60:	f6ff af22 	blt.w	8016aa8 <forward_lite_conv2d_sssa8_ch+0x4d4>
 8016c64:	b28b      	uxth	r3, r1
 8016c66:	930a      	str	r3, [sp, #40]	; 0x28
 8016c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c6a:	42ab      	cmp	r3, r5
 8016c6c:	f47f af73 	bne.w	8016b56 <forward_lite_conv2d_sssa8_ch+0x582>
 8016c70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016c72:	9305      	str	r3, [sp, #20]
 8016c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016c76:	9304      	str	r3, [sp, #16]
 8016c78:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8016c7a:	9303      	str	r3, [sp, #12]
 8016c7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016c7e:	9302      	str	r3, [sp, #8]
 8016c80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c82:	9301      	str	r3, [sp, #4]
 8016c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016c88:	9300      	str	r3, [sp, #0]
 8016c8a:	ee1a 2a90 	vmov	r2, s21
 8016c8e:	ee19 3a90 	vmov	r3, s19
 8016c92:	ee1a 0a10 	vmov	r0, s20
 8016c96:	f001 f91d 	bl	8017ed4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8016c9a:	9b07      	ldr	r3, [sp, #28]
 8016c9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016ca0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016ca2:	9018      	str	r0, [sp, #96]	; 0x60
 8016ca4:	4413      	add	r3, r2
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	3101      	adds	r1, #1
 8016caa:	9307      	str	r3, [sp, #28]
 8016cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cae:	b209      	sxth	r1, r1
 8016cb0:	428b      	cmp	r3, r1
 8016cb2:	460a      	mov	r2, r1
 8016cb4:	f73f aeea 	bgt.w	8016a8c <forward_lite_conv2d_sssa8_ch+0x4b8>
 8016cb8:	e759      	b.n	8016b6e <forward_lite_conv2d_sssa8_ch+0x59a>
 8016cba:	3b01      	subs	r3, #1
 8016cbc:	933b      	str	r3, [sp, #236]	; 0xec
 8016cbe:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 8016cc2:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8016cc6:	2b01      	cmp	r3, #1
 8016cc8:	f43f aee9 	beq.w	8016a9e <forward_lite_conv2d_sssa8_ch+0x4ca>
 8016ccc:	b28b      	uxth	r3, r1
 8016cce:	930a      	str	r3, [sp, #40]	; 0x28
 8016cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cd2:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d152      	bne.n	8016d80 <forward_lite_conv2d_sssa8_ch+0x7ac>
 8016cda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016cde:	428b      	cmp	r3, r1
 8016ce0:	f6bf af35 	bge.w	8016b4e <forward_lite_conv2d_sssa8_ch+0x57a>
 8016ce4:	46b8      	mov	r8, r7
 8016ce6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016cea:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8016cee:	9f08      	ldr	r7, [sp, #32]
 8016cf0:	4652      	mov	r2, sl
 8016cf2:	461e      	mov	r6, r3
 8016cf4:	46aa      	mov	sl, r5
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	460d      	mov	r5, r1
 8016cfa:	fb00 4007 	mla	r0, r0, r7, r4
 8016cfe:	3601      	adds	r6, #1
 8016d00:	fb08 9000 	mla	r0, r8, r0, r9
 8016d04:	4651      	mov	r1, sl
 8016d06:	b236      	sxth	r6, r6
 8016d08:	9206      	str	r2, [sp, #24]
 8016d0a:	f000 fec9 	bl	8017aa0 <st_int8_to16_no_shift_interleaved>
 8016d0e:	42ae      	cmp	r6, r5
 8016d10:	9a06      	ldr	r2, [sp, #24]
 8016d12:	44da      	add	sl, fp
 8016d14:	4630      	mov	r0, r6
 8016d16:	dbf0      	blt.n	8016cfa <forward_lite_conv2d_sssa8_ch+0x726>
 8016d18:	4655      	mov	r5, sl
 8016d1a:	4647      	mov	r7, r8
 8016d1c:	4692      	mov	sl, r2
 8016d1e:	e716      	b.n	8016b4e <forward_lite_conv2d_sssa8_ch+0x57a>
 8016d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d22:	429a      	cmp	r2, r3
 8016d24:	46da      	mov	sl, fp
 8016d26:	dd1e      	ble.n	8016d66 <forward_lite_conv2d_sssa8_ch+0x792>
 8016d28:	46dc      	mov	ip, fp
 8016d2a:	9615      	str	r6, [sp, #84]	; 0x54
 8016d2c:	e012      	b.n	8016d54 <forward_lite_conv2d_sssa8_ch+0x780>
 8016d2e:	9e08      	ldr	r6, [sp, #32]
 8016d30:	9b06      	ldr	r3, [sp, #24]
 8016d32:	4566      	cmp	r6, ip
 8016d34:	4463      	add	r3, ip
 8016d36:	dd13      	ble.n	8016d60 <forward_lite_conv2d_sssa8_ch+0x78c>
 8016d38:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016d3a:	fb07 0003 	mla	r0, r7, r3, r0
 8016d3e:	f000 feaf 	bl	8017aa0 <st_int8_to16_no_shift_interleaved>
 8016d42:	f10a 0a01 	add.w	sl, sl, #1
 8016d46:	fa0f fa8a 	sxth.w	sl, sl
 8016d4a:	45a2      	cmp	sl, r4
 8016d4c:	444d      	add	r5, r9
 8016d4e:	46d4      	mov	ip, sl
 8016d50:	f6bf aef4 	bge.w	8016b3c <forward_lite_conv2d_sssa8_ch+0x568>
 8016d54:	f1ba 0f00 	cmp.w	sl, #0
 8016d58:	4629      	mov	r1, r5
 8016d5a:	463a      	mov	r2, r7
 8016d5c:	4640      	mov	r0, r8
 8016d5e:	dae6      	bge.n	8016d2e <forward_lite_conv2d_sssa8_ch+0x75a>
 8016d60:	f002 f8c2 	bl	8018ee8 <arm_fill_q15>
 8016d64:	e7ed      	b.n	8016d42 <forward_lite_conv2d_sssa8_ch+0x76e>
 8016d66:	f10a 0a01 	add.w	sl, sl, #1
 8016d6a:	4629      	mov	r1, r5
 8016d6c:	463a      	mov	r2, r7
 8016d6e:	4640      	mov	r0, r8
 8016d70:	fa0f fa8a 	sxth.w	sl, sl
 8016d74:	f002 f8b8 	bl	8018ee8 <arm_fill_q15>
 8016d78:	45a2      	cmp	sl, r4
 8016d7a:	444d      	add	r5, r9
 8016d7c:	dbf3      	blt.n	8016d66 <forward_lite_conv2d_sssa8_ch+0x792>
 8016d7e:	e6de      	b.n	8016b3e <forward_lite_conv2d_sssa8_ch+0x56a>
 8016d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d84:	428b      	cmp	r3, r1
 8016d86:	f6bf aee2 	bge.w	8016b4e <forward_lite_conv2d_sssa8_ch+0x57a>
 8016d8a:	46b8      	mov	r8, r7
 8016d8c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016d90:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8016d94:	9f08      	ldr	r7, [sp, #32]
 8016d96:	4652      	mov	r2, sl
 8016d98:	461e      	mov	r6, r3
 8016d9a:	46aa      	mov	sl, r5
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	460d      	mov	r5, r1
 8016da0:	fb00 4007 	mla	r0, r0, r7, r4
 8016da4:	3601      	adds	r6, #1
 8016da6:	fb08 9000 	mla	r0, r8, r0, r9
 8016daa:	4651      	mov	r1, sl
 8016dac:	b236      	sxth	r6, r6
 8016dae:	9206      	str	r2, [sp, #24]
 8016db0:	f000 fe16 	bl	80179e0 <st_int8_to16_no_shift>
 8016db4:	42ae      	cmp	r6, r5
 8016db6:	9a06      	ldr	r2, [sp, #24]
 8016db8:	44da      	add	sl, fp
 8016dba:	4630      	mov	r0, r6
 8016dbc:	dbf0      	blt.n	8016da0 <forward_lite_conv2d_sssa8_ch+0x7cc>
 8016dbe:	4655      	mov	r5, sl
 8016dc0:	4647      	mov	r7, r8
 8016dc2:	4692      	mov	sl, r2
 8016dc4:	e6c3      	b.n	8016b4e <forward_lite_conv2d_sssa8_ch+0x57a>
 8016dc6:	46da      	mov	sl, fp
 8016dc8:	f10a 0a01 	add.w	sl, sl, #1
 8016dcc:	4629      	mov	r1, r5
 8016dce:	463a      	mov	r2, r7
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	fa0f fa8a 	sxth.w	sl, sl
 8016dd6:	f002 f887 	bl	8018ee8 <arm_fill_q15>
 8016dda:	45a2      	cmp	sl, r4
 8016ddc:	444d      	add	r5, r9
 8016dde:	dbf3      	blt.n	8016dc8 <forward_lite_conv2d_sssa8_ch+0x7f4>
 8016de0:	e6ad      	b.n	8016b3e <forward_lite_conv2d_sssa8_ch+0x56a>
 8016de2:	b2a3      	uxth	r3, r4
 8016de4:	931a      	str	r3, [sp, #104]	; 0x68
 8016de6:	e6c2      	b.n	8016b6e <forward_lite_conv2d_sssa8_ch+0x59a>
 8016de8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016dec:	9860      	ldr	r0, [sp, #384]	; 0x180
 8016dee:	ee1a 1a10 	vmov	r1, s20
 8016df2:	f000 fe97 	bl	8017b24 <st_int8_to16_dual>
 8016df6:	e623      	b.n	8016a40 <forward_lite_conv2d_sssa8_ch+0x46c>
 8016df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016dfa:	429c      	cmp	r4, r3
 8016dfc:	d014      	beq.n	8016e28 <forward_lite_conv2d_sssa8_ch+0x854>
 8016dfe:	4619      	mov	r1, r3
 8016e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e02:	9305      	str	r3, [sp, #20]
 8016e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e06:	9304      	str	r3, [sp, #16]
 8016e08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e0a:	9303      	str	r3, [sp, #12]
 8016e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e0e:	9302      	str	r3, [sp, #8]
 8016e10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e12:	9301      	str	r3, [sp, #4]
 8016e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e16:	9300      	str	r3, [sp, #0]
 8016e18:	ee1b 2a10 	vmov	r2, s22
 8016e1c:	ee19 3a90 	vmov	r3, s19
 8016e20:	ee1a 0a10 	vmov	r0, s20
 8016e24:	f001 fb74 	bl	8018510 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8016e28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016e2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016e2e:	1a9b      	subs	r3, r3, r2
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	4293      	cmp	r3, r2
 8016e34:	9325      	str	r3, [sp, #148]	; 0x94
 8016e36:	bf28      	it	cs
 8016e38:	4613      	movcs	r3, r2
 8016e3a:	4411      	add	r1, r2
 8016e3c:	b29b      	uxth	r3, r3
 8016e3e:	911a      	str	r1, [sp, #104]	; 0x68
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	f000 80e0 	beq.w	8017006 <forward_lite_conv2d_sssa8_ch+0xa32>
 8016e46:	ee1b 4a10 	vmov	r4, s22
 8016e4a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8016e4e:	ee0b 4a10 	vmov	s22, r4
 8016e52:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8016e54:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8016e56:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016e58:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8016e5c:	9421      	str	r4, [sp, #132]	; 0x84
 8016e5e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8016e60:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8016e64:	9420      	str	r4, [sp, #128]	; 0x80
 8016e66:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8016e68:	fb01 0002 	mla	r0, r1, r2, r0
 8016e6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016e70:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e74:	9027      	str	r0, [sp, #156]	; 0x9c
 8016e76:	2a00      	cmp	r2, #0
 8016e78:	f040 80c7 	bne.w	801700a <forward_lite_conv2d_sssa8_ch+0xa36>
 8016e7c:	460a      	mov	r2, r1
 8016e7e:	ee1a 1a10 	vmov	r1, s20
 8016e82:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e84:	f000 ff38 	bl	8017cf8 <st_int8_to16_dual_interleaved>
 8016e88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016e8a:	3b01      	subs	r3, #1
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	461a      	mov	r2, r3
 8016e90:	9324      	str	r3, [sp, #144]	; 0x90
 8016e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e96:	429a      	cmp	r2, r3
 8016e98:	f47f acd5 	bne.w	8016846 <forward_lite_conv2d_sssa8_ch+0x272>
 8016e9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016e9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016ea0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8016ea2:	4413      	add	r3, r2
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	3401      	adds	r4, #1
 8016ea8:	932a      	str	r3, [sp, #168]	; 0xa8
 8016eaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016eac:	b224      	sxth	r4, r4
 8016eae:	42a3      	cmp	r3, r4
 8016eb0:	4625      	mov	r5, r4
 8016eb2:	f73f ac8f 	bgt.w	80167d4 <forward_lite_conv2d_sssa8_ch+0x200>
 8016eb6:	b04f      	add	sp, #316	; 0x13c
 8016eb8:	ecbd 8b08 	vpop	{d8-d11}
 8016ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec0:	f10a 0a01 	add.w	sl, sl, #1
 8016ec4:	4621      	mov	r1, r4
 8016ec6:	463a      	mov	r2, r7
 8016ec8:	4640      	mov	r0, r8
 8016eca:	fa0f fa8a 	sxth.w	sl, sl
 8016ece:	f002 f80b 	bl	8018ee8 <arm_fill_q15>
 8016ed2:	45aa      	cmp	sl, r5
 8016ed4:	444c      	add	r4, r9
 8016ed6:	dbf3      	blt.n	8016ec0 <forward_lite_conv2d_sssa8_ch+0x8ec>
 8016ed8:	e522      	b.n	8016920 <forward_lite_conv2d_sssa8_ch+0x34c>
 8016eda:	3b01      	subs	r3, #1
 8016edc:	933b      	str	r3, [sp, #236]	; 0xec
 8016ede:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 8016ee2:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 8016ee6:	2b01      	cmp	r3, #1
 8016ee8:	f43f acc7 	beq.w	801687a <forward_lite_conv2d_sssa8_ch+0x2a6>
 8016eec:	b28b      	uxth	r3, r1
 8016eee:	930a      	str	r3, [sp, #40]	; 0x28
 8016ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ef2:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d154      	bne.n	8016fa4 <forward_lite_conv2d_sssa8_ch+0x9d0>
 8016efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016efe:	4293      	cmp	r3, r2
 8016f00:	f77f ad14 	ble.w	801692c <forward_lite_conv2d_sssa8_ch+0x358>
 8016f04:	4616      	mov	r6, r2
 8016f06:	4610      	mov	r0, r2
 8016f08:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016f0c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8016f10:	9f08      	ldr	r7, [sp, #32]
 8016f12:	ee18 2a90 	vmov	r2, s17
 8016f16:	ee19 8a10 	vmov	r8, s18
 8016f1a:	46a2      	mov	sl, r4
 8016f1c:	461c      	mov	r4, r3
 8016f1e:	fb00 5007 	mla	r0, r0, r7, r5
 8016f22:	3601      	adds	r6, #1
 8016f24:	fb08 9000 	mla	r0, r8, r0, r9
 8016f28:	4651      	mov	r1, sl
 8016f2a:	b236      	sxth	r6, r6
 8016f2c:	9206      	str	r2, [sp, #24]
 8016f2e:	f000 fdb7 	bl	8017aa0 <st_int8_to16_no_shift_interleaved>
 8016f32:	42a6      	cmp	r6, r4
 8016f34:	9a06      	ldr	r2, [sp, #24]
 8016f36:	44da      	add	sl, fp
 8016f38:	4630      	mov	r0, r6
 8016f3a:	dbf0      	blt.n	8016f1e <forward_lite_conv2d_sssa8_ch+0x94a>
 8016f3c:	4654      	mov	r4, sl
 8016f3e:	e4f5      	b.n	801692c <forward_lite_conv2d_sssa8_ch+0x358>
 8016f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f42:	429a      	cmp	r2, r3
 8016f44:	46da      	mov	sl, fp
 8016f46:	dd20      	ble.n	8016f8a <forward_lite_conv2d_sssa8_ch+0x9b6>
 8016f48:	46dc      	mov	ip, fp
 8016f4a:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8016f4e:	46b3      	mov	fp, r6
 8016f50:	e012      	b.n	8016f78 <forward_lite_conv2d_sssa8_ch+0x9a4>
 8016f52:	9e08      	ldr	r6, [sp, #32]
 8016f54:	9b06      	ldr	r3, [sp, #24]
 8016f56:	4566      	cmp	r6, ip
 8016f58:	4463      	add	r3, ip
 8016f5a:	dd13      	ble.n	8016f84 <forward_lite_conv2d_sssa8_ch+0x9b0>
 8016f5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016f5e:	fb07 0003 	mla	r0, r7, r3, r0
 8016f62:	f000 fd9d 	bl	8017aa0 <st_int8_to16_no_shift_interleaved>
 8016f66:	f10a 0a01 	add.w	sl, sl, #1
 8016f6a:	fa0f fa8a 	sxth.w	sl, sl
 8016f6e:	45aa      	cmp	sl, r5
 8016f70:	444c      	add	r4, r9
 8016f72:	46d4      	mov	ip, sl
 8016f74:	f6bf acd1 	bge.w	801691a <forward_lite_conv2d_sssa8_ch+0x346>
 8016f78:	f1ba 0f00 	cmp.w	sl, #0
 8016f7c:	4621      	mov	r1, r4
 8016f7e:	463a      	mov	r2, r7
 8016f80:	4640      	mov	r0, r8
 8016f82:	dae6      	bge.n	8016f52 <forward_lite_conv2d_sssa8_ch+0x97e>
 8016f84:	f001 ffb0 	bl	8018ee8 <arm_fill_q15>
 8016f88:	e7ed      	b.n	8016f66 <forward_lite_conv2d_sssa8_ch+0x992>
 8016f8a:	f10a 0a01 	add.w	sl, sl, #1
 8016f8e:	4621      	mov	r1, r4
 8016f90:	463a      	mov	r2, r7
 8016f92:	4640      	mov	r0, r8
 8016f94:	fa0f fa8a 	sxth.w	sl, sl
 8016f98:	f001 ffa6 	bl	8018ee8 <arm_fill_q15>
 8016f9c:	4555      	cmp	r5, sl
 8016f9e:	444c      	add	r4, r9
 8016fa0:	dcf3      	bgt.n	8016f8a <forward_lite_conv2d_sssa8_ch+0x9b6>
 8016fa2:	e4bd      	b.n	8016920 <forward_lite_conv2d_sssa8_ch+0x34c>
 8016fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	f77f acbf 	ble.w	801692c <forward_lite_conv2d_sssa8_ch+0x358>
 8016fae:	4616      	mov	r6, r2
 8016fb0:	4610      	mov	r0, r2
 8016fb2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016fb6:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8016fba:	9f08      	ldr	r7, [sp, #32]
 8016fbc:	ee18 2a90 	vmov	r2, s17
 8016fc0:	ee19 8a10 	vmov	r8, s18
 8016fc4:	46a2      	mov	sl, r4
 8016fc6:	461c      	mov	r4, r3
 8016fc8:	fb00 5007 	mla	r0, r0, r7, r5
 8016fcc:	3601      	adds	r6, #1
 8016fce:	fb08 9000 	mla	r0, r8, r0, r9
 8016fd2:	4651      	mov	r1, sl
 8016fd4:	b236      	sxth	r6, r6
 8016fd6:	9206      	str	r2, [sp, #24]
 8016fd8:	f000 fd02 	bl	80179e0 <st_int8_to16_no_shift>
 8016fdc:	42a6      	cmp	r6, r4
 8016fde:	9a06      	ldr	r2, [sp, #24]
 8016fe0:	44da      	add	sl, fp
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	dbf0      	blt.n	8016fc8 <forward_lite_conv2d_sssa8_ch+0x9f4>
 8016fe6:	4654      	mov	r4, sl
 8016fe8:	e4a0      	b.n	801692c <forward_lite_conv2d_sssa8_ch+0x358>
 8016fea:	46da      	mov	sl, fp
 8016fec:	f10a 0a01 	add.w	sl, sl, #1
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	463a      	mov	r2, r7
 8016ff4:	4640      	mov	r0, r8
 8016ff6:	fa0f fa8a 	sxth.w	sl, sl
 8016ffa:	f001 ff75 	bl	8018ee8 <arm_fill_q15>
 8016ffe:	45aa      	cmp	sl, r5
 8017000:	444c      	add	r4, r9
 8017002:	dbf3      	blt.n	8016fec <forward_lite_conv2d_sssa8_ch+0xa18>
 8017004:	e48c      	b.n	8016920 <forward_lite_conv2d_sssa8_ch+0x34c>
 8017006:	9317      	str	r3, [sp, #92]	; 0x5c
 8017008:	e73e      	b.n	8016e88 <forward_lite_conv2d_sssa8_ch+0x8b4>
 801700a:	460a      	mov	r2, r1
 801700c:	ee1a 1a10 	vmov	r1, s20
 8017010:	9317      	str	r3, [sp, #92]	; 0x5c
 8017012:	f000 fd87 	bl	8017b24 <st_int8_to16_dual>
 8017016:	e737      	b.n	8016e88 <forward_lite_conv2d_sssa8_ch+0x8b4>
 8017018:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801701a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801701c:	9860      	ldr	r0, [sp, #384]	; 0x180
 801701e:	ee1a 1a10 	vmov	r1, s20
 8017022:	f000 fd7f 	bl	8017b24 <st_int8_to16_dual>
 8017026:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017028:	2b00      	cmp	r3, #0
 801702a:	f47f abf0 	bne.w	801680e <forward_lite_conv2d_sssa8_ch+0x23a>
 801702e:	b2a3      	uxth	r3, r4
 8017030:	932c      	str	r3, [sp, #176]	; 0xb0
 8017032:	e733      	b.n	8016e9c <forward_lite_conv2d_sssa8_ch+0x8c8>
 8017034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017036:	fb00 f302 	mul.w	r3, r0, r2
 801703a:	42a3      	cmp	r3, r4
 801703c:	f73f ab77 	bgt.w	801672e <forward_lite_conv2d_sssa8_ch+0x15a>
 8017040:	f019 0f03 	tst.w	r9, #3
 8017044:	9628      	str	r6, [sp, #160]	; 0xa0
 8017046:	d10d      	bne.n	8017064 <forward_lite_conv2d_sssa8_ch+0xa90>
 8017048:	4603      	mov	r3, r0
 801704a:	ee1a 1a10 	vmov	r1, s20
 801704e:	9860      	ldr	r0, [sp, #384]	; 0x180
 8017050:	f000 fe52 	bl	8017cf8 <st_int8_to16_dual_interleaved>
 8017054:	f7ff bb6d 	b.w	8016732 <forward_lite_conv2d_sssa8_ch+0x15e>
 8017058:	4613      	mov	r3, r2
 801705a:	3301      	adds	r3, #1
 801705c:	b29b      	uxth	r3, r3
 801705e:	9329      	str	r3, [sp, #164]	; 0xa4
 8017060:	f7ff bb92 	b.w	8016788 <forward_lite_conv2d_sssa8_ch+0x1b4>
 8017064:	ee19 3a90 	vmov	r3, s19
 8017068:	ee1a 1a10 	vmov	r1, s20
 801706c:	9860      	ldr	r0, [sp, #384]	; 0x180
 801706e:	f000 fd59 	bl	8017b24 <st_int8_to16_dual>
 8017072:	f7ff bb5e 	b.w	8016732 <forward_lite_conv2d_sssa8_ch+0x15e>
 8017076:	bf00      	nop

08017078 <align_factor>:
 8017078:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801707c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017080:	b508      	push	{r3, lr}
 8017082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017086:	f04f 0300 	mov.w	r3, #0
 801708a:	8003      	strh	r3, [r0, #0]
 801708c:	d425      	bmi.n	80170da <align_factor+0x62>
 801708e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017092:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017096:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801709a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 801709e:	e005      	b.n	80170ac <align_factor+0x34>
 80170a0:	8003      	strh	r3, [r0, #0]
 80170a2:	b293      	uxth	r3, r2
 80170a4:	428b      	cmp	r3, r1
 80170a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80170aa:	d02d      	beq.n	8017108 <align_factor+0x90>
 80170ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80170b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80170b8:	dcf2      	bgt.n	80170a0 <align_factor+0x28>
 80170ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 801711c <align_factor+0xa4>
 80170be:	ee60 7a27 	vmul.f32	s15, s0, s15
 80170c2:	ee17 0a90 	vmov	r0, s15
 80170c6:	f7e9 fe1f 	bl	8000d08 <__aeabi_f2lz>
 80170ca:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80170ce:	bf1c      	itt	ne
 80170d0:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 80170d4:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 80170d8:	bd08      	pop	{r3, pc}
 80170da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80170de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e2:	ddd4      	ble.n	801708e <align_factor+0x16>
 80170e4:	2301      	movs	r3, #1
 80170e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80170ea:	e005      	b.n	80170f8 <align_factor+0x80>
 80170ec:	8003      	strh	r3, [r0, #0]
 80170ee:	b293      	uxth	r3, r2
 80170f0:	2b21      	cmp	r3, #33	; 0x21
 80170f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80170f6:	d00d      	beq.n	8017114 <align_factor+0x9c>
 80170f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80170fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017100:	f103 0201 	add.w	r2, r3, #1
 8017104:	d4f2      	bmi.n	80170ec <align_factor+0x74>
 8017106:	e7d8      	b.n	80170ba <align_factor+0x42>
 8017108:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 801710c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017110:	8003      	strh	r3, [r0, #0]
 8017112:	e7d2      	b.n	80170ba <align_factor+0x42>
 8017114:	2300      	movs	r3, #0
 8017116:	8003      	strh	r3, [r0, #0]
 8017118:	4618      	mov	r0, r3
 801711a:	bd08      	pop	{r3, pc}
 801711c:	4f000000 	.word	0x4f000000

08017120 <align_factor_ch>:
 8017120:	2900      	cmp	r1, #0
 8017122:	d05f      	beq.n	80171e4 <align_factor_ch+0xc4>
 8017124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017128:	ed2d 8b04 	vpush	{d8-d9}
 801712c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8017130:	4604      	mov	r4, r0
 8017132:	4691      	mov	r9, r2
 8017134:	4698      	mov	r8, r3
 8017136:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801713a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 801713e:	2700      	movs	r7, #0
 8017140:	eddf 9a29 	vldr	s19, [pc, #164]	; 80171e8 <align_factor_ch+0xc8>
 8017144:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017148:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801714c:	ecf4 7a01 	vldmia	r4!, {s15}
 8017150:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017154:	eef4 7ae8 	vcmpe.f32	s15, s17
 8017158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801715c:	d529      	bpl.n	80171b2 <align_factor_ch+0x92>
 801715e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017166:	dd24      	ble.n	80171b2 <align_factor_ch+0x92>
 8017168:	2200      	movs	r2, #0
 801716a:	e003      	b.n	8017174 <align_factor_ch+0x54>
 801716c:	2a20      	cmp	r2, #32
 801716e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017172:	d033      	beq.n	80171dc <align_factor_ch+0xbc>
 8017174:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801717c:	b213      	sxth	r3, r2
 801717e:	f102 0201 	add.w	r2, r2, #1
 8017182:	d4f3      	bmi.n	801716c <align_factor_ch+0x4c>
 8017184:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8017188:	f8a8 3000 	strh.w	r3, [r8]
 801718c:	ee17 0a90 	vmov	r0, s15
 8017190:	f7e9 fdba 	bl	8000d08 <__aeabi_f2lz>
 8017194:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8017198:	bf18      	it	ne
 801719a:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 801719e:	42a5      	cmp	r5, r4
 80171a0:	f849 0b04 	str.w	r0, [r9], #4
 80171a4:	f108 0802 	add.w	r8, r8, #2
 80171a8:	d1d0      	bne.n	801714c <align_factor_ch+0x2c>
 80171aa:	ecbd 8b04 	vpop	{d8-d9}
 80171ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171b2:	2300      	movs	r3, #0
 80171b4:	e005      	b.n	80171c2 <align_factor_ch+0xa2>
 80171b6:	b213      	sxth	r3, r2
 80171b8:	f113 0f1f 	cmn.w	r3, #31
 80171bc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80171c0:	d007      	beq.n	80171d2 <align_factor_ch+0xb2>
 80171c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80171c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80171ce:	dcf2      	bgt.n	80171b6 <align_factor_ch+0x96>
 80171d0:	e7d8      	b.n	8017184 <align_factor_ch+0x64>
 80171d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80171d6:	f06f 031d 	mvn.w	r3, #29
 80171da:	e7d3      	b.n	8017184 <align_factor_ch+0x64>
 80171dc:	f8a8 7000 	strh.w	r7, [r8]
 80171e0:	2000      	movs	r0, #0
 80171e2:	e7dc      	b.n	801719e <align_factor_ch+0x7e>
 80171e4:	4770      	bx	lr
 80171e6:	bf00      	nop
 80171e8:	4f000000 	.word	0x4f000000

080171ec <st_sssa8_ch_convolve_rank1upd>:
 80171ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f0:	b085      	sub	sp, #20
 80171f2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80171f6:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 80171fa:	fb13 f304 	smulbb	r3, r3, r4
 80171fe:	fb13 f500 	smulbb	r5, r3, r0
 8017202:	460c      	mov	r4, r1
 8017204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017206:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017208:	2a00      	cmp	r2, #0
 801720a:	d073      	beq.n	80172f4 <st_sssa8_ch_convolve_rank1upd+0x108>
 801720c:	b2ad      	uxth	r5, r5
 801720e:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8017212:	f1a3 0904 	sub.w	r9, r3, #4
 8017216:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 801721a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 801721e:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 8017222:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 8017226:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 801722a:	0258      	lsls	r0, r3, #9
 801722c:	3301      	adds	r3, #1
 801722e:	025b      	lsls	r3, r3, #9
 8017230:	f005 0503 	and.w	r5, r5, #3
 8017234:	9301      	str	r3, [sp, #4]
 8017236:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 801723a:	9303      	str	r3, [sp, #12]
 801723c:	1e6b      	subs	r3, r5, #1
 801723e:	b29b      	uxth	r3, r3
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8017246:	b2bf      	uxth	r7, r7
 8017248:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 801724c:	9302      	str	r3, [sp, #8]
 801724e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8017252:	d954      	bls.n	80172fe <st_sssa8_ch_convolve_rank1upd+0x112>
 8017254:	9b03      	ldr	r3, [sp, #12]
 8017256:	f504 7000 	add.w	r0, r4, #512	; 0x200
 801725a:	eb04 0c03 	add.w	ip, r4, r3
 801725e:	2600      	movs	r6, #0
 8017260:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 8017264:	2200      	movs	r2, #0
 8017266:	f851 3b04 	ldr.w	r3, [r1], #4
 801726a:	fa2f fe83 	sxtb16	lr, r3
 801726e:	4281      	cmp	r1, r0
 8017270:	ea4f 2333 	mov.w	r3, r3, ror #8
 8017274:	fa92 f21e 	qadd16	r2, r2, lr
 8017278:	fa2f f383 	sxtb16	r3, r3
 801727c:	fa92 f213 	qadd16	r2, r2, r3
 8017280:	d1f1      	bne.n	8017266 <st_sssa8_ch_convolve_rank1upd+0x7a>
 8017282:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8017286:	b213      	sxth	r3, r2
 8017288:	eb03 4222 	add.w	r2, r3, r2, asr #16
 801728c:	4560      	cmp	r0, ip
 801728e:	4416      	add	r6, r2
 8017290:	d1e6      	bne.n	8017260 <st_sssa8_ch_convolve_rank1upd+0x74>
 8017292:	9b01      	ldr	r3, [sp, #4]
 8017294:	18e1      	adds	r1, r4, r3
 8017296:	463c      	mov	r4, r7
 8017298:	b37c      	cbz	r4, 80172fa <st_sssa8_ch_convolve_rank1upd+0x10e>
 801729a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801729e:	2200      	movs	r2, #0
 80172a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80172a4:	fa2f f083 	sxtb16	r0, r3
 80172a8:	428c      	cmp	r4, r1
 80172aa:	ea4f 2333 	mov.w	r3, r3, ror #8
 80172ae:	fa92 f210 	qadd16	r2, r2, r0
 80172b2:	fa2f f383 	sxtb16	r3, r3
 80172b6:	fa92 f213 	qadd16	r2, r2, r3
 80172ba:	d1f1      	bne.n	80172a0 <st_sssa8_ch_convolve_rank1upd+0xb4>
 80172bc:	b213      	sxth	r3, r2
 80172be:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80172c2:	441e      	add	r6, r3
 80172c4:	b16d      	cbz	r5, 80172e2 <st_sssa8_ch_convolve_rank1upd+0xf6>
 80172c6:	f994 3000 	ldrsb.w	r3, [r4]
 80172ca:	441e      	add	r6, r3
 80172cc:	9b00      	ldr	r3, [sp, #0]
 80172ce:	b13b      	cbz	r3, 80172e0 <st_sssa8_ch_convolve_rank1upd+0xf4>
 80172d0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80172d4:	2d02      	cmp	r5, #2
 80172d6:	441e      	add	r6, r3
 80172d8:	bf1c      	itt	ne
 80172da:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 80172de:	18f6      	addne	r6, r6, r3
 80172e0:	442c      	add	r4, r5
 80172e2:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80172e6:	fb0b 3616 	mls	r6, fp, r6, r3
 80172ea:	f84a 6b04 	str.w	r6, [sl], #4
 80172ee:	9b02      	ldr	r3, [sp, #8]
 80172f0:	459a      	cmp	sl, r3
 80172f2:	d1ac      	bne.n	801724e <st_sssa8_ch_convolve_rank1upd+0x62>
 80172f4:	b005      	add	sp, #20
 80172f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172fa:	460c      	mov	r4, r1
 80172fc:	e7e2      	b.n	80172c4 <st_sssa8_ch_convolve_rank1upd+0xd8>
 80172fe:	4621      	mov	r1, r4
 8017300:	2600      	movs	r6, #0
 8017302:	4644      	mov	r4, r8
 8017304:	e7c8      	b.n	8017298 <st_sssa8_ch_convolve_rank1upd+0xac>
 8017306:	bf00      	nop

08017308 <st_sssa8_fully_connected>:
 8017308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801730c:	b097      	sub	sp, #92	; 0x5c
 801730e:	460d      	mov	r5, r1
 8017310:	9313      	str	r3, [sp, #76]	; 0x4c
 8017312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017314:	9204      	str	r2, [sp, #16]
 8017316:	f9b3 1000 	ldrsh.w	r1, [r3]
 801731a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801731c:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 8017320:	6824      	ldr	r4, [r4, #0]
 8017322:	9408      	str	r4, [sp, #32]
 8017324:	1e4b      	subs	r3, r1, #1
 8017326:	b29a      	uxth	r2, r3
 8017328:	2a14      	cmp	r2, #20
 801732a:	930d      	str	r3, [sp, #52]	; 0x34
 801732c:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8017330:	9105      	str	r1, [sp, #20]
 8017332:	bf9f      	itttt	ls
 8017334:	2201      	movls	r2, #1
 8017336:	408b      	lslls	r3, r1
 8017338:	408a      	lslls	r2, r1
 801733a:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 801733e:	9309      	str	r3, [sp, #36]	; 0x24
 8017340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017342:	4683      	mov	fp, r0
 8017344:	2b00      	cmp	r3, #0
 8017346:	f000 81e4 	beq.w	8017712 <st_sssa8_fully_connected+0x40a>
 801734a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801734c:	9600      	str	r6, [sp, #0]
 801734e:	b2b3      	uxth	r3, r6
 8017350:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8017354:	9e04      	ldr	r6, [sp, #16]
 8017356:	0851      	lsrs	r1, r2, #1
 8017358:	460c      	mov	r4, r1
 801735a:	9115      	str	r1, [sp, #84]	; 0x54
 801735c:	4632      	mov	r2, r6
 801735e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8017360:	f000 fd82 	bl	8017e68 <st_int8_reordered_no_shift_zero>
 8017364:	4621      	mov	r1, r4
 8017366:	2c00      	cmp	r4, #0
 8017368:	f000 8149 	beq.w	80175fe <st_sssa8_fully_connected+0x2f6>
 801736c:	4634      	mov	r4, r6
 801736e:	f1a6 0310 	sub.w	r3, r6, #16
 8017372:	9e05      	ldr	r6, [sp, #20]
 8017374:	1e4a      	subs	r2, r1, #1
 8017376:	2001      	movs	r0, #1
 8017378:	1eb1      	subs	r1, r6, #2
 801737a:	fa00 f101 	lsl.w	r1, r0, r1
 801737e:	9112      	str	r1, [sp, #72]	; 0x48
 8017380:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017382:	b292      	uxth	r2, r2
 8017384:	3110      	adds	r1, #16
 8017386:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801738a:	920e      	str	r2, [sp, #56]	; 0x38
 801738c:	1ee2      	subs	r2, r4, #3
 801738e:	920f      	str	r2, [sp, #60]	; 0x3c
 8017390:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017392:	3208      	adds	r2, #8
 8017394:	9206      	str	r2, [sp, #24]
 8017396:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017398:	091b      	lsrs	r3, r3, #4
 801739a:	3301      	adds	r3, #1
 801739c:	3202      	adds	r2, #2
 801739e:	9207      	str	r2, [sp, #28]
 80173a0:	011a      	lsls	r2, r3, #4
 80173a2:	920a      	str	r2, [sp, #40]	; 0x28
 80173a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80173a6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80173aa:	9310      	str	r3, [sp, #64]	; 0x40
 80173ac:	1f23      	subs	r3, r4, #4
 80173ae:	9311      	str	r3, [sp, #68]	; 0x44
 80173b0:	1b83      	subs	r3, r0, r6
 80173b2:	9314      	str	r3, [sp, #80]	; 0x50
 80173b4:	9a06      	ldr	r2, [sp, #24]
 80173b6:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 80173ba:	9a04      	ldr	r2, [sp, #16]
 80173bc:	18ac      	adds	r4, r5, r2
 80173be:	2a0f      	cmp	r2, #15
 80173c0:	9403      	str	r4, [sp, #12]
 80173c2:	f340 81a0 	ble.w	8017706 <st_sssa8_fully_connected+0x3fe>
 80173c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173c8:	18ae      	adds	r6, r5, r2
 80173ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80173cc:	460f      	mov	r7, r1
 80173ce:	f8d4 e000 	ldr.w	lr, [r4]
 80173d2:	6828      	ldr	r0, [r5, #0]
 80173d4:	fa2f fc8e 	sxtb16	ip, lr
 80173d8:	ea4f 2130 	mov.w	r1, r0, ror #8
 80173dc:	ea4f 283e 	mov.w	r8, lr, ror #8
 80173e0:	fa2f f080 	sxtb16	r0, r0
 80173e4:	f8d2 e000 	ldr.w	lr, [r2]
 80173e8:	fa2f f181 	sxtb16	r1, r1
 80173ec:	fa2f f888 	sxtb16	r8, r8
 80173f0:	fb2e 3300 	smlad	r3, lr, r0, r3
 80173f4:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 80173f8:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80173fc:	fb2c 3301 	smlad	r3, ip, r1, r3
 8017400:	fb2c e808 	smlad	r8, ip, r8, lr
 8017404:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8017408:	686f      	ldr	r7, [r5, #4]
 801740a:	fa2f f08c 	sxtb16	r0, ip
 801740e:	ea4f 2137 	mov.w	r1, r7, ror #8
 8017412:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8017416:	fa2f f787 	sxtb16	r7, r7
 801741a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801741e:	fa2f f181 	sxtb16	r1, r1
 8017422:	fa2f fe8e 	sxtb16	lr, lr
 8017426:	fb2c 3707 	smlad	r7, ip, r7, r3
 801742a:	fb2c 8c00 	smlad	ip, ip, r0, r8
 801742e:	68d0      	ldr	r0, [r2, #12]
 8017430:	fb20 7701 	smlad	r7, r0, r1, r7
 8017434:	fb20 ce0e 	smlad	lr, r0, lr, ip
 8017438:	68a0      	ldr	r0, [r4, #8]
 801743a:	68a9      	ldr	r1, [r5, #8]
 801743c:	fa2f fc80 	sxtb16	ip, r0
 8017440:	ea4f 2331 	mov.w	r3, r1, ror #8
 8017444:	ea4f 2a30 	mov.w	sl, r0, ror #8
 8017448:	fa2f f181 	sxtb16	r1, r1
 801744c:	6910      	ldr	r0, [r2, #16]
 801744e:	fa2f f383 	sxtb16	r3, r3
 8017452:	fa2f fa8a 	sxtb16	sl, sl
 8017456:	fb20 7101 	smlad	r1, r0, r1, r7
 801745a:	fb20 e00c 	smlad	r0, r0, ip, lr
 801745e:	6957      	ldr	r7, [r2, #20]
 8017460:	fb27 1103 	smlad	r1, r7, r3, r1
 8017464:	fb27 0a0a 	smlad	sl, r7, sl, r0
 8017468:	68e7      	ldr	r7, [r4, #12]
 801746a:	68e8      	ldr	r0, [r5, #12]
 801746c:	fa2f fc87 	sxtb16	ip, r7
 8017470:	ea4f 2930 	mov.w	r9, r0, ror #8
 8017474:	ea4f 2837 	mov.w	r8, r7, ror #8
 8017478:	3510      	adds	r5, #16
 801747a:	6997      	ldr	r7, [r2, #24]
 801747c:	fa2f f380 	sxtb16	r3, r0
 8017480:	3410      	adds	r4, #16
 8017482:	fa2f f989 	sxtb16	r9, r9
 8017486:	fa2f f888 	sxtb16	r8, r8
 801748a:	fb27 1303 	smlad	r3, r7, r3, r1
 801748e:	fb27 a70c 	smlad	r7, r7, ip, sl
 8017492:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8017496:	3220      	adds	r2, #32
 8017498:	fb2e 3309 	smlad	r3, lr, r9, r3
 801749c:	fb2e 7708 	smlad	r7, lr, r8, r7
 80174a0:	42b5      	cmp	r5, r6
 80174a2:	d194      	bne.n	80173ce <st_sssa8_fully_connected+0xc6>
 80174a4:	9a03      	ldr	r2, [sp, #12]
 80174a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174a8:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80174ac:	4402      	add	r2, r0
 80174ae:	4639      	mov	r1, r7
 80174b0:	9203      	str	r2, [sp, #12]
 80174b2:	4681      	mov	r9, r0
 80174b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80174b6:	4591      	cmp	r9, r2
 80174b8:	f280 8123 	bge.w	8017702 <st_sssa8_fully_connected+0x3fa>
 80174bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80174be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80174c2:	eba2 0a09 	sub.w	sl, r2, r9
 80174c6:	ea4f 029a 	mov.w	r2, sl, lsr #2
 80174ca:	f102 0a01 	add.w	sl, r2, #1
 80174ce:	920c      	str	r2, [sp, #48]	; 0x30
 80174d0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80174d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80174d6:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 80174da:	465f      	mov	r7, fp
 80174dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80174e0:	f856 eb04 	ldr.w	lr, [r6], #4
 80174e4:	fa2f f082 	sxtb16	r0, r2
 80174e8:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 80174ec:	ea4f 2532 	mov.w	r5, r2, ror #8
 80174f0:	fa2f fe8e 	sxtb16	lr, lr
 80174f4:	683a      	ldr	r2, [r7, #0]
 80174f6:	fa2f fc8c 	sxtb16	ip, ip
 80174fa:	fa2f f585 	sxtb16	r5, r5
 80174fe:	fb22 330e 	smlad	r3, r2, lr, r3
 8017502:	fb22 1200 	smlad	r2, r2, r0, r1
 8017506:	6879      	ldr	r1, [r7, #4]
 8017508:	3708      	adds	r7, #8
 801750a:	fb21 330c 	smlad	r3, r1, ip, r3
 801750e:	fb21 2105 	smlad	r1, r1, r5, r2
 8017512:	42a6      	cmp	r6, r4
 8017514:	d1e2      	bne.n	80174dc <st_sssa8_fully_connected+0x1d4>
 8017516:	9a03      	ldr	r2, [sp, #12]
 8017518:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801751a:	4402      	add	r2, r0
 801751c:	9203      	str	r2, [sp, #12]
 801751e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017520:	f109 0904 	add.w	r9, r9, #4
 8017524:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 8017528:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 801752c:	9d04      	ldr	r5, [sp, #16]
 801752e:	454d      	cmp	r5, r9
 8017530:	dd38      	ble.n	80175a4 <st_sssa8_fully_connected+0x29c>
 8017532:	f9bb 2000 	ldrsh.w	r2, [fp]
 8017536:	f994 0000 	ldrsb.w	r0, [r4]
 801753a:	9e03      	ldr	r6, [sp, #12]
 801753c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8017540:	f996 0000 	ldrsb.w	r0, [r6]
 8017544:	fb12 1100 	smlabb	r1, r2, r0, r1
 8017548:	f109 0201 	add.w	r2, r9, #1
 801754c:	42aa      	cmp	r2, r5
 801754e:	da25      	bge.n	801759c <st_sssa8_fully_connected+0x294>
 8017550:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8017554:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8017558:	fb12 3300 	smlabb	r3, r2, r0, r3
 801755c:	f996 0001 	ldrsb.w	r0, [r6, #1]
 8017560:	fb12 1100 	smlabb	r1, r2, r0, r1
 8017564:	f109 0202 	add.w	r2, r9, #2
 8017568:	42aa      	cmp	r2, r5
 801756a:	da17      	bge.n	801759c <st_sssa8_fully_connected+0x294>
 801756c:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8017570:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8017574:	fb12 3300 	smlabb	r3, r2, r0, r3
 8017578:	f996 0002 	ldrsb.w	r0, [r6, #2]
 801757c:	fb12 1100 	smlabb	r1, r2, r0, r1
 8017580:	f109 0203 	add.w	r2, r9, #3
 8017584:	4295      	cmp	r5, r2
 8017586:	dd09      	ble.n	801759c <st_sssa8_fully_connected+0x294>
 8017588:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 801758c:	f996 0003 	ldrsb.w	r0, [r6, #3]
 8017590:	fb12 1100 	smlabb	r1, r2, r0, r1
 8017594:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8017598:	fb12 3300 	smlabb	r3, r2, r0, r3
 801759c:	9a04      	ldr	r2, [sp, #16]
 801759e:	eba2 0909 	sub.w	r9, r2, r9
 80175a2:	444c      	add	r4, r9
 80175a4:	9a05      	ldr	r2, [sp, #20]
 80175a6:	2a15      	cmp	r2, #21
 80175a8:	dd7b      	ble.n	80176a2 <st_sssa8_fully_connected+0x39a>
 80175aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80175ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80175ae:	9a08      	ldr	r2, [sp, #32]
 80175b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80175b2:	fb53 0302 	smmla	r3, r3, r2, r0
 80175b6:	412b      	asrs	r3, r5
 80175b8:	4433      	add	r3, r6
 80175ba:	fb51 0102 	smmla	r1, r1, r2, r0
 80175be:	f303 0307 	ssat	r3, #8, r3
 80175c2:	9a07      	ldr	r2, [sp, #28]
 80175c4:	4129      	asrs	r1, r5
 80175c6:	f802 3c02 	strb.w	r3, [r2, #-2]
 80175ca:	198b      	adds	r3, r1, r6
 80175cc:	f303 0307 	ssat	r3, #8, r3
 80175d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80175d4:	9a04      	ldr	r2, [sp, #16]
 80175d6:	9b06      	ldr	r3, [sp, #24]
 80175d8:	18a5      	adds	r5, r4, r2
 80175da:	9a07      	ldr	r2, [sp, #28]
 80175dc:	3202      	adds	r2, #2
 80175de:	9207      	str	r2, [sp, #28]
 80175e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175e2:	3308      	adds	r3, #8
 80175e4:	4293      	cmp	r3, r2
 80175e6:	9306      	str	r3, [sp, #24]
 80175e8:	f47f aee4 	bne.w	80173b4 <st_sssa8_fully_connected+0xac>
 80175ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80175ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175f0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80175f4:	9225      	str	r2, [sp, #148]	; 0x94
 80175f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80175f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80175fc:	9324      	str	r3, [sp, #144]	; 0x90
 80175fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017600:	07db      	lsls	r3, r3, #31
 8017602:	d54a      	bpl.n	801769a <st_sssa8_fully_connected+0x392>
 8017604:	9a04      	ldr	r2, [sp, #16]
 8017606:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017608:	0897      	lsrs	r7, r2, #2
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	f000 8173 	beq.w	80178f6 <st_sssa8_fully_connected+0x5ee>
 8017610:	9826      	ldr	r0, [sp, #152]	; 0x98
 8017612:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8017616:	f855 2b04 	ldr.w	r2, [r5], #4
 801761a:	6804      	ldr	r4, [r0, #0]
 801761c:	ea4f 2132 	mov.w	r1, r2, ror #8
 8017620:	fa2f f282 	sxtb16	r2, r2
 8017624:	fa2f f181 	sxtb16	r1, r1
 8017628:	fb24 3202 	smlad	r2, r4, r2, r3
 801762c:	6843      	ldr	r3, [r0, #4]
 801762e:	3008      	adds	r0, #8
 8017630:	fb23 2301 	smlad	r3, r3, r1, r2
 8017634:	42b5      	cmp	r5, r6
 8017636:	d1ee      	bne.n	8017616 <st_sssa8_fully_connected+0x30e>
 8017638:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801763a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 801763e:	9226      	str	r2, [sp, #152]	; 0x98
 8017640:	9a04      	ldr	r2, [sp, #16]
 8017642:	f012 0203 	ands.w	r2, r2, #3
 8017646:	d016      	beq.n	8017676 <st_sssa8_fully_connected+0x36e>
 8017648:	9826      	ldr	r0, [sp, #152]	; 0x98
 801764a:	f996 1000 	ldrsb.w	r1, [r6]
 801764e:	8800      	ldrh	r0, [r0, #0]
 8017650:	3a01      	subs	r2, #1
 8017652:	b292      	uxth	r2, r2
 8017654:	fb10 3301 	smlabb	r3, r0, r1, r3
 8017658:	b16a      	cbz	r2, 8017676 <st_sssa8_fully_connected+0x36e>
 801765a:	9826      	ldr	r0, [sp, #152]	; 0x98
 801765c:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8017660:	8840      	ldrh	r0, [r0, #2]
 8017662:	2a01      	cmp	r2, #1
 8017664:	fb10 3301 	smlabb	r3, r0, r1, r3
 8017668:	d005      	beq.n	8017676 <st_sssa8_fully_connected+0x36e>
 801766a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801766c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8017670:	8889      	ldrh	r1, [r1, #4]
 8017672:	fb11 3302 	smlabb	r3, r1, r2, r3
 8017676:	9a05      	ldr	r2, [sp, #20]
 8017678:	2a15      	cmp	r2, #21
 801767a:	f340 811a 	ble.w	80178b2 <st_sssa8_fully_connected+0x5aa>
 801767e:	1e91      	subs	r1, r2, #2
 8017680:	2201      	movs	r2, #1
 8017682:	408a      	lsls	r2, r1
 8017684:	9908      	ldr	r1, [sp, #32]
 8017686:	fb53 2301 	smmla	r3, r3, r1, r2
 801768a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801768c:	4113      	asrs	r3, r2
 801768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017690:	4413      	add	r3, r2
 8017692:	f303 0307 	ssat	r3, #8, r3
 8017696:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017698:	7013      	strb	r3, [r2, #0]
 801769a:	2000      	movs	r0, #0
 801769c:	b017      	add	sp, #92	; 0x5c
 801769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176a2:	2a00      	cmp	r2, #0
 80176a4:	dd13      	ble.n	80176ce <st_sssa8_fully_connected+0x3c6>
 80176a6:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	0049      	lsls	r1, r1, #1
 80176ae:	fb53 5300 	smmla	r3, r3, r0, r5
 80176b2:	fb51 5100 	smmla	r1, r1, r0, r5
 80176b6:	4113      	asrs	r3, r2
 80176b8:	f303 0307 	ssat	r3, #8, r3
 80176bc:	9807      	ldr	r0, [sp, #28]
 80176be:	4111      	asrs	r1, r2
 80176c0:	f800 3c02 	strb.w	r3, [r0, #-2]
 80176c4:	f301 0107 	ssat	r1, #8, r1
 80176c8:	f800 1c01 	strb.w	r1, [r0, #-1]
 80176cc:	e782      	b.n	80175d4 <st_sssa8_fully_connected+0x2cc>
 80176ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80176d0:	4093      	lsls	r3, r2
 80176d2:	f303 031f 	ssat	r3, #32, r3
 80176d6:	9808      	ldr	r0, [sp, #32]
 80176d8:	fb53 f310 	smmulr	r3, r3, r0
 80176dc:	fa01 f202 	lsl.w	r2, r1, r2
 80176e0:	f302 021f 	ssat	r2, #32, r2
 80176e4:	fb52 f210 	smmulr	r2, r2, r0
 80176e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176ea:	440b      	add	r3, r1
 80176ec:	f303 0307 	ssat	r3, #8, r3
 80176f0:	9807      	ldr	r0, [sp, #28]
 80176f2:	440a      	add	r2, r1
 80176f4:	f800 3c02 	strb.w	r3, [r0, #-2]
 80176f8:	f302 0207 	ssat	r2, #8, r2
 80176fc:	f800 2c01 	strb.w	r2, [r0, #-1]
 8017700:	e768      	b.n	80175d4 <st_sssa8_fully_connected+0x2cc>
 8017702:	4634      	mov	r4, r6
 8017704:	e712      	b.n	801752c <st_sssa8_fully_connected+0x224>
 8017706:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 801770a:	462e      	mov	r6, r5
 801770c:	f04f 0900 	mov.w	r9, #0
 8017710:	e6d0      	b.n	80174b4 <st_sssa8_fully_connected+0x1ac>
 8017712:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017714:	4274      	negs	r4, r6
 8017716:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 801771a:	2b00      	cmp	r3, #0
 801771c:	d0bd      	beq.n	801769a <st_sssa8_fully_connected+0x392>
 801771e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017720:	9904      	ldr	r1, [sp, #16]
 8017722:	9805      	ldr	r0, [sp, #20]
 8017724:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8017728:	f8cd b010 	str.w	fp, [sp, #16]
 801772c:	3301      	adds	r3, #1
 801772e:	18d3      	adds	r3, r2, r3
 8017730:	f1a1 0810 	sub.w	r8, r1, #16
 8017734:	9303      	str	r3, [sp, #12]
 8017736:	f102 0e01 	add.w	lr, r2, #1
 801773a:	f028 080f 	bic.w	r8, r8, #15
 801773e:	2201      	movs	r2, #1
 8017740:	1e83      	subs	r3, r0, #2
 8017742:	fa02 f303 	lsl.w	r3, r2, r3
 8017746:	f108 0810 	add.w	r8, r8, #16
 801774a:	9307      	str	r3, [sp, #28]
 801774c:	4689      	mov	r9, r1
 801774e:	eb0b 0308 	add.w	r3, fp, r8
 8017752:	9306      	str	r3, [sp, #24]
 8017754:	f1b9 0f0f 	cmp.w	r9, #15
 8017758:	eba2 0300 	sub.w	r3, r2, r0
 801775c:	930a      	str	r3, [sp, #40]	; 0x28
 801775e:	b236      	sxth	r6, r6
 8017760:	f85a 3b04 	ldr.w	r3, [sl], #4
 8017764:	f340 8081 	ble.w	801786a <st_sssa8_fully_connected+0x562>
 8017768:	9804      	ldr	r0, [sp, #16]
 801776a:	eb05 0c08 	add.w	ip, r5, r8
 801776e:	462a      	mov	r2, r5
 8017770:	f8d2 b000 	ldr.w	fp, [r2]
 8017774:	6801      	ldr	r1, [r0, #0]
 8017776:	ea4f 273b 	mov.w	r7, fp, ror #8
 801777a:	ea4f 2531 	mov.w	r5, r1, ror #8
 801777e:	fa2f fb8b 	sxtb16	fp, fp
 8017782:	fa2f f787 	sxtb16	r7, r7
 8017786:	fa24 f181 	sxtab16	r1, r4, r1
 801778a:	fa24 f585 	sxtab16	r5, r4, r5
 801778e:	fb21 330b 	smlad	r3, r1, fp, r3
 8017792:	fb25 3107 	smlad	r1, r5, r7, r3
 8017796:	f8d2 b004 	ldr.w	fp, [r2, #4]
 801779a:	6843      	ldr	r3, [r0, #4]
 801779c:	ea4f 273b 	mov.w	r7, fp, ror #8
 80177a0:	ea4f 2533 	mov.w	r5, r3, ror #8
 80177a4:	fa2f fb8b 	sxtb16	fp, fp
 80177a8:	fa2f f787 	sxtb16	r7, r7
 80177ac:	fa24 f383 	sxtab16	r3, r4, r3
 80177b0:	fa24 f585 	sxtab16	r5, r4, r5
 80177b4:	fb23 110b 	smlad	r1, r3, fp, r1
 80177b8:	fb25 1307 	smlad	r3, r5, r7, r1
 80177bc:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80177c0:	6885      	ldr	r5, [r0, #8]
 80177c2:	ea4f 273b 	mov.w	r7, fp, ror #8
 80177c6:	ea4f 2135 	mov.w	r1, r5, ror #8
 80177ca:	fa2f fb8b 	sxtb16	fp, fp
 80177ce:	fa2f f787 	sxtb16	r7, r7
 80177d2:	fa24 f585 	sxtab16	r5, r4, r5
 80177d6:	fa24 f181 	sxtab16	r1, r4, r1
 80177da:	fb25 330b 	smlad	r3, r5, fp, r3
 80177de:	fb21 3507 	smlad	r5, r1, r7, r3
 80177e2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80177e6:	68c3      	ldr	r3, [r0, #12]
 80177e8:	ea4f 273b 	mov.w	r7, fp, ror #8
 80177ec:	ea4f 2133 	mov.w	r1, r3, ror #8
 80177f0:	3210      	adds	r2, #16
 80177f2:	3010      	adds	r0, #16
 80177f4:	fa2f fb8b 	sxtb16	fp, fp
 80177f8:	fa2f f787 	sxtb16	r7, r7
 80177fc:	fa24 f383 	sxtab16	r3, r4, r3
 8017800:	fa24 f181 	sxtab16	r1, r4, r1
 8017804:	fb23 530b 	smlad	r3, r3, fp, r5
 8017808:	fb21 3307 	smlad	r3, r1, r7, r3
 801780c:	4594      	cmp	ip, r2
 801780e:	d1af      	bne.n	8017770 <st_sssa8_fully_connected+0x468>
 8017810:	4645      	mov	r5, r8
 8017812:	45a9      	cmp	r9, r5
 8017814:	9f06      	ldr	r7, [sp, #24]
 8017816:	dd2d      	ble.n	8017874 <st_sssa8_fully_connected+0x56c>
 8017818:	eba9 0505 	sub.w	r5, r9, r5
 801781c:	4415      	add	r5, r2
 801781e:	4611      	mov	r1, r2
 8017820:	f917 0b01 	ldrsb.w	r0, [r7], #1
 8017824:	7809      	ldrb	r1, [r1, #0]
 8017826:	3201      	adds	r2, #1
 8017828:	b249      	sxtb	r1, r1
 801782a:	1b80      	subs	r0, r0, r6
 801782c:	42aa      	cmp	r2, r5
 801782e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8017832:	d1f4      	bne.n	801781e <st_sssa8_fully_connected+0x516>
 8017834:	9a05      	ldr	r2, [sp, #20]
 8017836:	2a15      	cmp	r2, #21
 8017838:	dd20      	ble.n	801787c <st_sssa8_fully_connected+0x574>
 801783a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801783e:	fb53 1302 	smmla	r3, r3, r2, r1
 8017842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017844:	4113      	asrs	r3, r2
 8017846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017848:	4413      	add	r3, r2
 801784a:	f303 0307 	ssat	r3, #8, r3
 801784e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8017852:	9b03      	ldr	r3, [sp, #12]
 8017854:	f10e 0e01 	add.w	lr, lr, #1
 8017858:	459e      	cmp	lr, r3
 801785a:	f43f af1e 	beq.w	801769a <st_sssa8_fully_connected+0x392>
 801785e:	f1b9 0f0f 	cmp.w	r9, #15
 8017862:	f85a 3b04 	ldr.w	r3, [sl], #4
 8017866:	f73f af7f 	bgt.w	8017768 <st_sssa8_fully_connected+0x460>
 801786a:	462a      	mov	r2, r5
 801786c:	2500      	movs	r5, #0
 801786e:	45a9      	cmp	r9, r5
 8017870:	9f04      	ldr	r7, [sp, #16]
 8017872:	dcd1      	bgt.n	8017818 <st_sssa8_fully_connected+0x510>
 8017874:	4615      	mov	r5, r2
 8017876:	9a05      	ldr	r2, [sp, #20]
 8017878:	2a15      	cmp	r2, #21
 801787a:	dcde      	bgt.n	801783a <st_sssa8_fully_connected+0x532>
 801787c:	2a00      	cmp	r2, #0
 801787e:	dd0a      	ble.n	8017896 <st_sssa8_fully_connected+0x58e>
 8017880:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8017884:	005b      	lsls	r3, r3, #1
 8017886:	fb53 0301 	smmla	r3, r3, r1, r0
 801788a:	4113      	asrs	r3, r2
 801788c:	f303 0307 	ssat	r3, #8, r3
 8017890:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8017894:	e7dd      	b.n	8017852 <st_sssa8_fully_connected+0x54a>
 8017896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017898:	4093      	lsls	r3, r2
 801789a:	f303 031f 	ssat	r3, #32, r3
 801789e:	9a08      	ldr	r2, [sp, #32]
 80178a0:	fb53 f312 	smmulr	r3, r3, r2
 80178a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178a6:	4413      	add	r3, r2
 80178a8:	f303 0307 	ssat	r3, #8, r3
 80178ac:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80178b0:	e7cf      	b.n	8017852 <st_sssa8_fully_connected+0x54a>
 80178b2:	2a00      	cmp	r2, #0
 80178b4:	dd0d      	ble.n	80178d2 <st_sssa8_fully_connected+0x5ca>
 80178b6:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80178ba:	005b      	lsls	r3, r3, #1
 80178bc:	fb53 0301 	smmla	r3, r3, r1, r0
 80178c0:	4113      	asrs	r3, r2
 80178c2:	f303 0307 	ssat	r3, #8, r3
 80178c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80178c8:	2000      	movs	r0, #0
 80178ca:	7013      	strb	r3, [r2, #0]
 80178cc:	b017      	add	sp, #92	; 0x5c
 80178ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d2:	f1c2 0201 	rsb	r2, r2, #1
 80178d6:	4093      	lsls	r3, r2
 80178d8:	f303 031f 	ssat	r3, #32, r3
 80178dc:	9a08      	ldr	r2, [sp, #32]
 80178de:	fb53 f312 	smmulr	r3, r3, r2
 80178e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178e4:	441a      	add	r2, r3
 80178e6:	f302 0307 	ssat	r3, #8, r2
 80178ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80178ec:	2000      	movs	r0, #0
 80178ee:	7013      	strb	r3, [r2, #0]
 80178f0:	b017      	add	sp, #92	; 0x5c
 80178f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178f6:	462e      	mov	r6, r5
 80178f8:	e6a2      	b.n	8017640 <st_sssa8_fully_connected+0x338>
 80178fa:	bf00      	nop

080178fc <ai_padding_opt_init>:
 80178fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017900:	2700      	movs	r7, #0
 8017902:	e9c0 7700 	strd	r7, r7, [r0]
 8017906:	6087      	str	r7, [r0, #8]
 8017908:	690d      	ldr	r5, [r1, #16]
 801790a:	9c07      	ldr	r4, [sp, #28]
 801790c:	f1c5 0c00 	rsb	ip, r5, #0
 8017910:	689d      	ldr	r5, [r3, #8]
 8017912:	42bd      	cmp	r5, r7
 8017914:	46b9      	mov	r9, r7
 8017916:	dd1b      	ble.n	8017950 <ai_padding_opt_init+0x54>
 8017918:	463e      	mov	r6, r7
 801791a:	46be      	mov	lr, r7
 801791c:	e012      	b.n	8017944 <ai_padding_opt_init+0x48>
 801791e:	6895      	ldr	r5, [r2, #8]
 8017920:	eba5 080c 	sub.w	r8, r5, ip
 8017924:	68a5      	ldr	r5, [r4, #8]
 8017926:	45a8      	cmp	r8, r5
 8017928:	bfb5      	itete	lt
 801792a:	f109 0901 	addlt.w	r9, r9, #1
 801792e:	3701      	addge	r7, #1
 8017930:	f8c0 9008 	strlt.w	r9, [r0, #8]
 8017934:	6047      	strge	r7, [r0, #4]
 8017936:	688d      	ldr	r5, [r1, #8]
 8017938:	44ac      	add	ip, r5
 801793a:	689d      	ldr	r5, [r3, #8]
 801793c:	f10e 0e01 	add.w	lr, lr, #1
 8017940:	4575      	cmp	r5, lr
 8017942:	dd06      	ble.n	8017952 <ai_padding_opt_init+0x56>
 8017944:	f1bc 0f00 	cmp.w	ip, #0
 8017948:	dae9      	bge.n	801791e <ai_padding_opt_init+0x22>
 801794a:	3601      	adds	r6, #1
 801794c:	6006      	str	r6, [r0, #0]
 801794e:	e7f2      	b.n	8017936 <ai_padding_opt_init+0x3a>
 8017950:	463e      	mov	r6, r7
 8017952:	2500      	movs	r5, #0
 8017954:	e9c0 6703 	strd	r6, r7, [r0, #12]
 8017958:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801795c:	f8c0 9014 	str.w	r9, [r0, #20]
 8017960:	6205      	str	r5, [r0, #32]
 8017962:	694e      	ldr	r6, [r1, #20]
 8017964:	f1c6 0c00 	rsb	ip, r6, #0
 8017968:	685e      	ldr	r6, [r3, #4]
 801796a:	42ae      	cmp	r6, r5
 801796c:	dd1c      	ble.n	80179a8 <ai_padding_opt_init+0xac>
 801796e:	46ae      	mov	lr, r5
 8017970:	e00f      	b.n	8017992 <ai_padding_opt_init+0x96>
 8017972:	6855      	ldr	r5, [r2, #4]
 8017974:	6866      	ldr	r6, [r4, #4]
 8017976:	eba5 050c 	sub.w	r5, r5, ip
 801797a:	42b5      	cmp	r5, r6
 801797c:	da10      	bge.n	80179a0 <ai_padding_opt_init+0xa4>
 801797e:	6a05      	ldr	r5, [r0, #32]
 8017980:	3501      	adds	r5, #1
 8017982:	6205      	str	r5, [r0, #32]
 8017984:	68cd      	ldr	r5, [r1, #12]
 8017986:	44ac      	add	ip, r5
 8017988:	685d      	ldr	r5, [r3, #4]
 801798a:	f10e 0e01 	add.w	lr, lr, #1
 801798e:	4575      	cmp	r5, lr
 8017990:	dd0a      	ble.n	80179a8 <ai_padding_opt_init+0xac>
 8017992:	f1bc 0f00 	cmp.w	ip, #0
 8017996:	daec      	bge.n	8017972 <ai_padding_opt_init+0x76>
 8017998:	6985      	ldr	r5, [r0, #24]
 801799a:	3501      	adds	r5, #1
 801799c:	6185      	str	r5, [r0, #24]
 801799e:	e7f1      	b.n	8017984 <ai_padding_opt_init+0x88>
 80179a0:	69c5      	ldr	r5, [r0, #28]
 80179a2:	3501      	adds	r5, #1
 80179a4:	61c5      	str	r5, [r0, #28]
 80179a6:	e7ed      	b.n	8017984 <ai_padding_opt_init+0x88>
 80179a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080179ac <ai_padding_opt_phase1>:
 80179ac:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 80179b0:	b923      	cbnz	r3, 80179bc <ai_padding_opt_phase1+0x10>
 80179b2:	b17a      	cbz	r2, 80179d4 <ai_padding_opt_phase1+0x28>
 80179b4:	3a01      	subs	r2, #1
 80179b6:	8483      	strh	r3, [r0, #36]	; 0x24
 80179b8:	61c2      	str	r2, [r0, #28]
 80179ba:	e004      	b.n	80179c6 <ai_padding_opt_phase1+0x1a>
 80179bc:	b152      	cbz	r2, 80179d4 <ai_padding_opt_phase1+0x28>
 80179be:	2201      	movs	r2, #1
 80179c0:	3b01      	subs	r3, #1
 80179c2:	8482      	strh	r2, [r0, #36]	; 0x24
 80179c4:	6183      	str	r3, [r0, #24]
 80179c6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80179ca:	68c1      	ldr	r1, [r0, #12]
 80179cc:	6083      	str	r3, [r0, #8]
 80179ce:	e9c0 1200 	strd	r1, r2, [r0]
 80179d2:	4770      	bx	lr
 80179d4:	6a03      	ldr	r3, [r0, #32]
 80179d6:	2201      	movs	r2, #1
 80179d8:	3b01      	subs	r3, #1
 80179da:	8482      	strh	r2, [r0, #36]	; 0x24
 80179dc:	6203      	str	r3, [r0, #32]
 80179de:	e7f2      	b.n	80179c6 <ai_padding_opt_phase1+0x1a>

080179e0 <st_int8_to16_no_shift>:
 80179e0:	b570      	push	{r4, r5, r6, lr}
 80179e2:	f1b2 0410 	subs.w	r4, r2, #16
 80179e6:	f04f 0e00 	mov.w	lr, #0
 80179ea:	d437      	bmi.n	8017a5c <st_int8_to16_no_shift+0x7c>
 80179ec:	f8d0 c000 	ldr.w	ip, [r0]
 80179f0:	6843      	ldr	r3, [r0, #4]
 80179f2:	fa2f f59c 	sxtb16	r5, ip, ror #8
 80179f6:	fa2f fc8c 	sxtb16	ip, ip
 80179fa:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 80179fe:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8017a02:	fa2f f593 	sxtb16	r5, r3, ror #8
 8017a06:	604e      	str	r6, [r1, #4]
 8017a08:	f8c1 c000 	str.w	ip, [r1]
 8017a0c:	fa2f f383 	sxtb16	r3, r3
 8017a10:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8017a14:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8017a18:	60ce      	str	r6, [r1, #12]
 8017a1a:	608b      	str	r3, [r1, #8]
 8017a1c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8017a20:	68c3      	ldr	r3, [r0, #12]
 8017a22:	3010      	adds	r0, #16
 8017a24:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8017a28:	fa2f fc8c 	sxtb16	ip, ip
 8017a2c:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8017a30:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8017a34:	fa2f f593 	sxtb16	r5, r3, ror #8
 8017a38:	f8c1 c010 	str.w	ip, [r1, #16]
 8017a3c:	614e      	str	r6, [r1, #20]
 8017a3e:	f10e 0e10 	add.w	lr, lr, #16
 8017a42:	3120      	adds	r1, #32
 8017a44:	45a6      	cmp	lr, r4
 8017a46:	fa2f f383 	sxtb16	r3, r3
 8017a4a:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 8017a4e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8017a52:	f841 cc04 	str.w	ip, [r1, #-4]
 8017a56:	f841 3c08 	str.w	r3, [r1, #-8]
 8017a5a:	ddc7      	ble.n	80179ec <st_int8_to16_no_shift+0xc>
 8017a5c:	1f16      	subs	r6, r2, #4
 8017a5e:	4576      	cmp	r6, lr
 8017a60:	db12      	blt.n	8017a88 <st_int8_to16_no_shift+0xa8>
 8017a62:	f850 3b04 	ldr.w	r3, [r0], #4
 8017a66:	fa2f f493 	sxtb16	r4, r3, ror #8
 8017a6a:	3108      	adds	r1, #8
 8017a6c:	f10e 0e04 	add.w	lr, lr, #4
 8017a70:	45b6      	cmp	lr, r6
 8017a72:	fa2f f383 	sxtb16	r3, r3
 8017a76:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 8017a7a:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 8017a7e:	f841 5c04 	str.w	r5, [r1, #-4]
 8017a82:	f841 3c08 	str.w	r3, [r1, #-8]
 8017a86:	ddec      	ble.n	8017a62 <st_int8_to16_no_shift+0x82>
 8017a88:	4572      	cmp	r2, lr
 8017a8a:	dd08      	ble.n	8017a9e <st_int8_to16_no_shift+0xbe>
 8017a8c:	eba2 020e 	sub.w	r2, r2, lr
 8017a90:	4402      	add	r2, r0
 8017a92:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8017a96:	f821 3b02 	strh.w	r3, [r1], #2
 8017a9a:	4290      	cmp	r0, r2
 8017a9c:	d1f9      	bne.n	8017a92 <st_int8_to16_no_shift+0xb2>
 8017a9e:	bd70      	pop	{r4, r5, r6, pc}

08017aa0 <st_int8_to16_no_shift_interleaved>:
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	f1b2 0510 	subs.w	r5, r2, #16
 8017aa6:	f04f 0e00 	mov.w	lr, #0
 8017aaa:	d426      	bmi.n	8017afa <st_int8_to16_no_shift_interleaved+0x5a>
 8017aac:	f8d0 c000 	ldr.w	ip, [r0]
 8017ab0:	6843      	ldr	r3, [r0, #4]
 8017ab2:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8017ab6:	fa2f fc8c 	sxtb16	ip, ip
 8017aba:	fa2f f493 	sxtb16	r4, r3, ror #8
 8017abe:	600e      	str	r6, [r1, #0]
 8017ac0:	f8c1 c004 	str.w	ip, [r1, #4]
 8017ac4:	608c      	str	r4, [r1, #8]
 8017ac6:	fa2f f383 	sxtb16	r3, r3
 8017aca:	60cb      	str	r3, [r1, #12]
 8017acc:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8017ad0:	68c3      	ldr	r3, [r0, #12]
 8017ad2:	3010      	adds	r0, #16
 8017ad4:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8017ad8:	fa2f fc8c 	sxtb16	ip, ip
 8017adc:	fa2f f493 	sxtb16	r4, r3, ror #8
 8017ae0:	610e      	str	r6, [r1, #16]
 8017ae2:	f8c1 c014 	str.w	ip, [r1, #20]
 8017ae6:	618c      	str	r4, [r1, #24]
 8017ae8:	f10e 0e10 	add.w	lr, lr, #16
 8017aec:	3120      	adds	r1, #32
 8017aee:	45ae      	cmp	lr, r5
 8017af0:	fa2f f383 	sxtb16	r3, r3
 8017af4:	f841 3c04 	str.w	r3, [r1, #-4]
 8017af8:	ddd8      	ble.n	8017aac <st_int8_to16_no_shift_interleaved+0xc>
 8017afa:	1f14      	subs	r4, r2, #4
 8017afc:	4574      	cmp	r4, lr
 8017afe:	db10      	blt.n	8017b22 <st_int8_to16_no_shift_interleaved+0x82>
 8017b00:	ebae 0e00 	sub.w	lr, lr, r0
 8017b04:	f850 3b04 	ldr.w	r3, [r0], #4
 8017b08:	fa2f fc93 	sxtb16	ip, r3, ror #8
 8017b0c:	f8c1 c000 	str.w	ip, [r1]
 8017b10:	eb00 020e 	add.w	r2, r0, lr
 8017b14:	3108      	adds	r1, #8
 8017b16:	4294      	cmp	r4, r2
 8017b18:	fa2f f383 	sxtb16	r3, r3
 8017b1c:	f841 3c04 	str.w	r3, [r1, #-4]
 8017b20:	daf0      	bge.n	8017b04 <st_int8_to16_no_shift_interleaved+0x64>
 8017b22:	bd70      	pop	{r4, r5, r6, pc}

08017b24 <st_int8_to16_dual>:
 8017b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b28:	4698      	mov	r8, r3
 8017b2a:	085b      	lsrs	r3, r3, #1
 8017b2c:	eb00 0c02 	add.w	ip, r0, r2
 8017b30:	f000 80ba 	beq.w	8017ca8 <st_int8_to16_dual+0x184>
 8017b34:	f1a2 0710 	sub.w	r7, r2, #16
 8017b38:	1f16      	subs	r6, r2, #4
 8017b3a:	2f00      	cmp	r7, #0
 8017b3c:	f04f 0500 	mov.w	r5, #0
 8017b40:	db73      	blt.n	8017c2a <st_int8_to16_dual+0x106>
 8017b42:	f8d0 e000 	ldr.w	lr, [r0]
 8017b46:	f8dc 4000 	ldr.w	r4, [ip]
 8017b4a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017b4e:	fa2f fe8e 	sxtb16	lr, lr
 8017b52:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8017b56:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017b5a:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017b5e:	f8c1 e000 	str.w	lr, [r1]
 8017b62:	f8c1 a008 	str.w	sl, [r1, #8]
 8017b66:	fa2f f484 	sxtb16	r4, r4
 8017b6a:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8017b6e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8017b72:	f8c1 e00c 	str.w	lr, [r1, #12]
 8017b76:	604c      	str	r4, [r1, #4]
 8017b78:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8017b7c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017b80:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017b84:	fa2f fe8e 	sxtb16	lr, lr
 8017b88:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8017b8c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017b90:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017b94:	f8c1 e010 	str.w	lr, [r1, #16]
 8017b98:	f8c1 a018 	str.w	sl, [r1, #24]
 8017b9c:	fa2f f484 	sxtb16	r4, r4
 8017ba0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8017ba4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8017ba8:	f8c1 e01c 	str.w	lr, [r1, #28]
 8017bac:	614c      	str	r4, [r1, #20]
 8017bae:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8017bb2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8017bb6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017bba:	fa2f fe8e 	sxtb16	lr, lr
 8017bbe:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8017bc2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017bc6:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017bca:	3010      	adds	r0, #16
 8017bcc:	f8c1 e020 	str.w	lr, [r1, #32]
 8017bd0:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 8017bd4:	fa2f f484 	sxtb16	r4, r4
 8017bd8:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8017bdc:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8017be0:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 8017be4:	624c      	str	r4, [r1, #36]	; 0x24
 8017be6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017bea:	f850 ec04 	ldr.w	lr, [r0, #-4]
 8017bee:	f10c 0c10 	add.w	ip, ip, #16
 8017bf2:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017bf6:	fa2f fe8e 	sxtb16	lr, lr
 8017bfa:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8017bfe:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017c02:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017c06:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 8017c0a:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 8017c0e:	3510      	adds	r5, #16
 8017c10:	3140      	adds	r1, #64	; 0x40
 8017c12:	42bd      	cmp	r5, r7
 8017c14:	fa2f f484 	sxtb16	r4, r4
 8017c18:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8017c1c:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8017c20:	f841 ec04 	str.w	lr, [r1, #-4]
 8017c24:	f841 4c0c 	str.w	r4, [r1, #-12]
 8017c28:	dd8b      	ble.n	8017b42 <st_int8_to16_dual+0x1e>
 8017c2a:	42ae      	cmp	r6, r5
 8017c2c:	db1e      	blt.n	8017c6c <st_int8_to16_dual+0x148>
 8017c2e:	f850 4b04 	ldr.w	r4, [r0], #4
 8017c32:	f85c eb04 	ldr.w	lr, [ip], #4
 8017c36:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017c3a:	fa2f f484 	sxtb16	r4, r4
 8017c3e:	eac9 4a24 	pkhtb	sl, r9, r4, asr #16
 8017c42:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8017c46:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8017c4a:	600c      	str	r4, [r1, #0]
 8017c4c:	f8c1 a008 	str.w	sl, [r1, #8]
 8017c50:	3504      	adds	r5, #4
 8017c52:	3110      	adds	r1, #16
 8017c54:	42b5      	cmp	r5, r6
 8017c56:	fa2f fe8e 	sxtb16	lr, lr
 8017c5a:	eac9 442e 	pkhtb	r4, r9, lr, asr #16
 8017c5e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8017c62:	f841 4c04 	str.w	r4, [r1, #-4]
 8017c66:	f841 ec0c 	str.w	lr, [r1, #-12]
 8017c6a:	dde0      	ble.n	8017c2e <st_int8_to16_dual+0x10a>
 8017c6c:	42aa      	cmp	r2, r5
 8017c6e:	dd41      	ble.n	8017cf4 <st_int8_to16_dual+0x1d0>
 8017c70:	1b55      	subs	r5, r2, r5
 8017c72:	1d0c      	adds	r4, r1, #4
 8017c74:	eb00 0a05 	add.w	sl, r0, r5
 8017c78:	46e6      	mov	lr, ip
 8017c7a:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8017c7e:	f824 9c04 	strh.w	r9, [r4, #-4]
 8017c82:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 8017c86:	f824 9c02 	strh.w	r9, [r4, #-2]
 8017c8a:	4550      	cmp	r0, sl
 8017c8c:	f104 0404 	add.w	r4, r4, #4
 8017c90:	d1f3      	bne.n	8017c7a <st_int8_to16_dual+0x156>
 8017c92:	44ac      	add	ip, r5
 8017c94:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8017c98:	3b01      	subs	r3, #1
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	eb0a 0002 	add.w	r0, sl, r2
 8017ca0:	4494      	add	ip, r2
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	f47f af49 	bne.w	8017b3a <st_int8_to16_dual+0x16>
 8017ca8:	f018 0f01 	tst.w	r8, #1
 8017cac:	d020      	beq.n	8017cf0 <st_int8_to16_dual+0x1cc>
 8017cae:	1f17      	subs	r7, r2, #4
 8017cb0:	f04f 0400 	mov.w	r4, #0
 8017cb4:	d411      	bmi.n	8017cda <st_int8_to16_dual+0x1b6>
 8017cb6:	f850 3b04 	ldr.w	r3, [r0], #4
 8017cba:	fa2f f593 	sxtb16	r5, r3, ror #8
 8017cbe:	3108      	adds	r1, #8
 8017cc0:	3404      	adds	r4, #4
 8017cc2:	42a7      	cmp	r7, r4
 8017cc4:	fa2f f383 	sxtb16	r3, r3
 8017cc8:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8017ccc:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8017cd0:	f841 6c04 	str.w	r6, [r1, #-4]
 8017cd4:	f841 3c08 	str.w	r3, [r1, #-8]
 8017cd8:	daed      	bge.n	8017cb6 <st_int8_to16_dual+0x192>
 8017cda:	42a2      	cmp	r2, r4
 8017cdc:	dd08      	ble.n	8017cf0 <st_int8_to16_dual+0x1cc>
 8017cde:	1b13      	subs	r3, r2, r4
 8017ce0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017ce4:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8017ce8:	f821 2b02 	strh.w	r2, [r1], #2
 8017cec:	428b      	cmp	r3, r1
 8017cee:	d1f9      	bne.n	8017ce4 <st_int8_to16_dual+0x1c0>
 8017cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cf4:	4682      	mov	sl, r0
 8017cf6:	e7cf      	b.n	8017c98 <st_int8_to16_dual+0x174>

08017cf8 <st_int8_to16_dual_interleaved>:
 8017cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cfc:	4698      	mov	r8, r3
 8017cfe:	085b      	lsrs	r3, r3, #1
 8017d00:	eb00 0c02 	add.w	ip, r0, r2
 8017d04:	f000 808d 	beq.w	8017e22 <st_int8_to16_dual_interleaved+0x12a>
 8017d08:	f1a2 0710 	sub.w	r7, r2, #16
 8017d0c:	1f16      	subs	r6, r2, #4
 8017d0e:	2f00      	cmp	r7, #0
 8017d10:	f04f 0e00 	mov.w	lr, #0
 8017d14:	db4c      	blt.n	8017db0 <st_int8_to16_dual_interleaved+0xb8>
 8017d16:	6805      	ldr	r5, [r0, #0]
 8017d18:	f8dc 4000 	ldr.w	r4, [ip]
 8017d1c:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017d20:	fa2f f585 	sxtb16	r5, r5
 8017d24:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017d28:	f8c1 a000 	str.w	sl, [r1]
 8017d2c:	f8c1 9004 	str.w	r9, [r1, #4]
 8017d30:	608d      	str	r5, [r1, #8]
 8017d32:	fa2f f484 	sxtb16	r4, r4
 8017d36:	60cc      	str	r4, [r1, #12]
 8017d38:	6845      	ldr	r5, [r0, #4]
 8017d3a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017d3e:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017d42:	fa2f f585 	sxtb16	r5, r5
 8017d46:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017d4a:	f8c1 a010 	str.w	sl, [r1, #16]
 8017d4e:	f8c1 9014 	str.w	r9, [r1, #20]
 8017d52:	618d      	str	r5, [r1, #24]
 8017d54:	fa2f f484 	sxtb16	r4, r4
 8017d58:	61cc      	str	r4, [r1, #28]
 8017d5a:	6885      	ldr	r5, [r0, #8]
 8017d5c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8017d60:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017d64:	fa2f f585 	sxtb16	r5, r5
 8017d68:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017d6c:	f8c1 a020 	str.w	sl, [r1, #32]
 8017d70:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
 8017d74:	628d      	str	r5, [r1, #40]	; 0x28
 8017d76:	fa2f f484 	sxtb16	r4, r4
 8017d7a:	62cc      	str	r4, [r1, #44]	; 0x2c
 8017d7c:	68c5      	ldr	r5, [r0, #12]
 8017d7e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017d82:	3010      	adds	r0, #16
 8017d84:	f10c 0c10 	add.w	ip, ip, #16
 8017d88:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017d8c:	fa2f f585 	sxtb16	r5, r5
 8017d90:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017d94:	f8c1 a030 	str.w	sl, [r1, #48]	; 0x30
 8017d98:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
 8017d9c:	638d      	str	r5, [r1, #56]	; 0x38
 8017d9e:	f10e 0e10 	add.w	lr, lr, #16
 8017da2:	3140      	adds	r1, #64	; 0x40
 8017da4:	45be      	cmp	lr, r7
 8017da6:	fa2f f484 	sxtb16	r4, r4
 8017daa:	f841 4c04 	str.w	r4, [r1, #-4]
 8017dae:	ddb2      	ble.n	8017d16 <st_int8_to16_dual_interleaved+0x1e>
 8017db0:	4576      	cmp	r6, lr
 8017db2:	db17      	blt.n	8017de4 <st_int8_to16_dual_interleaved+0xec>
 8017db4:	f850 5b04 	ldr.w	r5, [r0], #4
 8017db8:	f85c 4b04 	ldr.w	r4, [ip], #4
 8017dbc:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8017dc0:	fa2f f585 	sxtb16	r5, r5
 8017dc4:	fa2f f994 	sxtb16	r9, r4, ror #8
 8017dc8:	f8c1 a000 	str.w	sl, [r1]
 8017dcc:	f8c1 9004 	str.w	r9, [r1, #4]
 8017dd0:	608d      	str	r5, [r1, #8]
 8017dd2:	f10e 0e04 	add.w	lr, lr, #4
 8017dd6:	3110      	adds	r1, #16
 8017dd8:	45b6      	cmp	lr, r6
 8017dda:	fa2f f484 	sxtb16	r4, r4
 8017dde:	f841 4c04 	str.w	r4, [r1, #-4]
 8017de2:	dde7      	ble.n	8017db4 <st_int8_to16_dual_interleaved+0xbc>
 8017de4:	4572      	cmp	r2, lr
 8017de6:	dd3d      	ble.n	8017e64 <st_int8_to16_dual_interleaved+0x16c>
 8017de8:	eba2 0e0e 	sub.w	lr, r2, lr
 8017dec:	1d0c      	adds	r4, r1, #4
 8017dee:	eb00 0a0e 	add.w	sl, r0, lr
 8017df2:	4665      	mov	r5, ip
 8017df4:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8017df8:	f824 9c04 	strh.w	r9, [r4, #-4]
 8017dfc:	f915 9b01 	ldrsb.w	r9, [r5], #1
 8017e00:	f824 9c02 	strh.w	r9, [r4, #-2]
 8017e04:	4550      	cmp	r0, sl
 8017e06:	f104 0404 	add.w	r4, r4, #4
 8017e0a:	d1f3      	bne.n	8017df4 <st_int8_to16_dual_interleaved+0xfc>
 8017e0c:	44f4      	add	ip, lr
 8017e0e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8017e12:	3b01      	subs	r3, #1
 8017e14:	b29b      	uxth	r3, r3
 8017e16:	eb0a 0002 	add.w	r0, sl, r2
 8017e1a:	4494      	add	ip, r2
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f47f af76 	bne.w	8017d0e <st_int8_to16_dual_interleaved+0x16>
 8017e22:	f018 0f01 	tst.w	r8, #1
 8017e26:	d01b      	beq.n	8017e60 <st_int8_to16_dual_interleaved+0x168>
 8017e28:	1f16      	subs	r6, r2, #4
 8017e2a:	f04f 0400 	mov.w	r4, #0
 8017e2e:	d40c      	bmi.n	8017e4a <st_int8_to16_dual_interleaved+0x152>
 8017e30:	f850 3b04 	ldr.w	r3, [r0], #4
 8017e34:	fa2f f593 	sxtb16	r5, r3, ror #8
 8017e38:	600d      	str	r5, [r1, #0]
 8017e3a:	3404      	adds	r4, #4
 8017e3c:	3108      	adds	r1, #8
 8017e3e:	42a6      	cmp	r6, r4
 8017e40:	fa2f f383 	sxtb16	r3, r3
 8017e44:	f841 3c04 	str.w	r3, [r1, #-4]
 8017e48:	daf2      	bge.n	8017e30 <st_int8_to16_dual_interleaved+0x138>
 8017e4a:	42a2      	cmp	r2, r4
 8017e4c:	dd08      	ble.n	8017e60 <st_int8_to16_dual_interleaved+0x168>
 8017e4e:	1b13      	subs	r3, r2, r4
 8017e50:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017e54:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8017e58:	f821 2b02 	strh.w	r2, [r1], #2
 8017e5c:	428b      	cmp	r3, r1
 8017e5e:	d1f9      	bne.n	8017e54 <st_int8_to16_dual_interleaved+0x15c>
 8017e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e64:	4682      	mov	sl, r0
 8017e66:	e7d4      	b.n	8017e12 <st_int8_to16_dual_interleaved+0x11a>

08017e68 <st_int8_reordered_no_shift_zero>:
 8017e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e6a:	0897      	lsrs	r7, r2, #2
 8017e6c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8017e70:	d02e      	beq.n	8017ed0 <st_int8_reordered_no_shift_zero+0x68>
 8017e72:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8017e76:	460c      	mov	r4, r1
 8017e78:	f850 cb04 	ldr.w	ip, [r0], #4
 8017e7c:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8017e80:	fa2f fe8e 	sxtb16	lr, lr
 8017e84:	fade fe03 	ssub16	lr, lr, r3
 8017e88:	fa2f fc8c 	sxtb16	ip, ip
 8017e8c:	fadc fc03 	ssub16	ip, ip, r3
 8017e90:	42a8      	cmp	r0, r5
 8017e92:	f8c4 c000 	str.w	ip, [r4]
 8017e96:	f8c4 e004 	str.w	lr, [r4, #4]
 8017e9a:	f104 0408 	add.w	r4, r4, #8
 8017e9e:	d1eb      	bne.n	8017e78 <st_int8_reordered_no_shift_zero+0x10>
 8017ea0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8017ea4:	f012 0203 	ands.w	r2, r2, #3
 8017ea8:	d011      	beq.n	8017ece <st_int8_reordered_no_shift_zero+0x66>
 8017eaa:	f995 3000 	ldrsb.w	r3, [r5]
 8017eae:	b276      	sxtb	r6, r6
 8017eb0:	1b9b      	subs	r3, r3, r6
 8017eb2:	3a01      	subs	r2, #1
 8017eb4:	800b      	strh	r3, [r1, #0]
 8017eb6:	d00a      	beq.n	8017ece <st_int8_reordered_no_shift_zero+0x66>
 8017eb8:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8017ebc:	2a01      	cmp	r2, #1
 8017ebe:	eba3 0306 	sub.w	r3, r3, r6
 8017ec2:	804b      	strh	r3, [r1, #2]
 8017ec4:	d003      	beq.n	8017ece <st_int8_reordered_no_shift_zero+0x66>
 8017ec6:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8017eca:	1b9e      	subs	r6, r3, r6
 8017ecc:	808e      	strh	r6, [r1, #4]
 8017ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ed0:	4605      	mov	r5, r0
 8017ed2:	e7e7      	b.n	8017ea4 <st_int8_reordered_no_shift_zero+0x3c>

08017ed4 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8017ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed8:	b09d      	sub	sp, #116	; 0x74
 8017eda:	4683      	mov	fp, r0
 8017edc:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8017ee0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017ee2:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8017ee6:	910c      	str	r1, [sp, #48]	; 0x30
 8017ee8:	e9cd 4317 	strd	r4, r3, [sp, #92]	; 0x5c
 8017eec:	441d      	add	r5, r3
 8017eee:	0864      	lsrs	r4, r4, #1
 8017ef0:	9216      	str	r2, [sp, #88]	; 0x58
 8017ef2:	9007      	str	r0, [sp, #28]
 8017ef4:	9515      	str	r5, [sp, #84]	; 0x54
 8017ef6:	9419      	str	r4, [sp, #100]	; 0x64
 8017ef8:	f000 81cc 	beq.w	8018294 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c0>
 8017efc:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8017f00:	4617      	mov	r7, r2
 8017f02:	1e62      	subs	r2, r4, #1
 8017f04:	460c      	mov	r4, r1
 8017f06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017f08:	960f      	str	r6, [sp, #60]	; 0x3c
 8017f0a:	b292      	uxth	r2, r2
 8017f0c:	3108      	adds	r1, #8
 8017f0e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017f12:	f1a0 0310 	sub.w	r3, r0, #16
 8017f16:	910e      	str	r1, [sp, #56]	; 0x38
 8017f18:	4601      	mov	r1, r0
 8017f1a:	3803      	subs	r0, #3
 8017f1c:	900d      	str	r0, [sp, #52]	; 0x34
 8017f1e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017f20:	9708      	str	r7, [sp, #32]
 8017f22:	3004      	adds	r0, #4
 8017f24:	9002      	str	r0, [sp, #8]
 8017f26:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8017f28:	3004      	adds	r0, #4
 8017f2a:	9005      	str	r0, [sp, #20]
 8017f2c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017f2e:	3004      	adds	r0, #4
 8017f30:	9003      	str	r0, [sp, #12]
 8017f32:	982b      	ldr	r0, [sp, #172]	; 0xac
 8017f34:	091b      	lsrs	r3, r3, #4
 8017f36:	3001      	adds	r0, #1
 8017f38:	3301      	adds	r3, #1
 8017f3a:	9004      	str	r0, [sp, #16]
 8017f3c:	1c68      	adds	r0, r5, #1
 8017f3e:	9006      	str	r0, [sp, #24]
 8017f40:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 8017f44:	9013      	str	r0, [sp, #76]	; 0x4c
 8017f46:	0198      	lsls	r0, r3, #6
 8017f48:	9010      	str	r0, [sp, #64]	; 0x40
 8017f4a:	0118      	lsls	r0, r3, #4
 8017f4c:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8017f50:	9311      	str	r3, [sp, #68]	; 0x44
 8017f52:	1f0b      	subs	r3, r1, #4
 8017f54:	9012      	str	r0, [sp, #72]	; 0x48
 8017f56:	9314      	str	r3, [sp, #80]	; 0x50
 8017f58:	46d9      	mov	r9, fp
 8017f5a:	9908      	ldr	r1, [sp, #32]
 8017f5c:	9c07      	ldr	r4, [sp, #28]
 8017f5e:	680b      	ldr	r3, [r1, #0]
 8017f60:	931b      	str	r3, [sp, #108]	; 0x6c
 8017f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017f66:	684a      	ldr	r2, [r1, #4]
 8017f68:	921b      	str	r2, [sp, #108]	; 0x6c
 8017f6a:	3108      	adds	r1, #8
 8017f6c:	2c0f      	cmp	r4, #15
 8017f6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017f70:	9108      	str	r1, [sp, #32]
 8017f72:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017f74:	f340 8282 	ble.w	801847c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a8>
 8017f78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017f7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017f7c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017f7e:	464d      	mov	r5, r9
 8017f80:	f8d4 e000 	ldr.w	lr, [r4]
 8017f84:	f8d7 a000 	ldr.w	sl, [r7]
 8017f88:	f8d5 c000 	ldr.w	ip, [r5]
 8017f8c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8017f90:	fb2c 330e 	smlad	r3, ip, lr, r3
 8017f94:	fb2c 000a 	smlad	r0, ip, sl, r0
 8017f98:	fb28 2e0e 	smlad	lr, r8, lr, r2
 8017f9c:	fb28 110a 	smlad	r1, r8, sl, r1
 8017fa0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8017fa4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8017fa8:	68aa      	ldr	r2, [r5, #8]
 8017faa:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 8017fae:	fb22 330c 	smlad	r3, r2, ip, r3
 8017fb2:	fb22 0008 	smlad	r0, r2, r8, r0
 8017fb6:	fb2b ee0c 	smlad	lr, fp, ip, lr
 8017fba:	fb2b 1808 	smlad	r8, fp, r8, r1
 8017fbe:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8017fc2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8017fc6:	692a      	ldr	r2, [r5, #16]
 8017fc8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8017fcc:	fb22 330c 	smlad	r3, r2, ip, r3
 8017fd0:	fb22 000b 	smlad	r0, r2, fp, r0
 8017fd4:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8017fd8:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 8017fdc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8017fe0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8017fe4:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8017fe8:	69e9      	ldr	r1, [r5, #28]
 8017fea:	fb28 330c 	smlad	r3, r8, ip, r3
 8017fee:	fb28 000a 	smlad	r0, r8, sl, r0
 8017ff2:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8017ff6:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8017ffa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8017ffe:	6939      	ldr	r1, [r7, #16]
 8018000:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8018004:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8018006:	fb28 330e 	smlad	r3, r8, lr, r3
 801800a:	fb28 0001 	smlad	r0, r8, r1, r0
 801800e:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8018012:	fb22 a101 	smlad	r1, r2, r1, sl
 8018016:	f8d4 e014 	ldr.w	lr, [r4, #20]
 801801a:	f8d7 a014 	ldr.w	sl, [r7, #20]
 801801e:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 8018022:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8018024:	fb28 330e 	smlad	r3, r8, lr, r3
 8018028:	fb28 000a 	smlad	r0, r8, sl, r0
 801802c:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8018030:	fb22 120a 	smlad	r2, r2, sl, r1
 8018034:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8018038:	f8d7 b018 	ldr.w	fp, [r7, #24]
 801803c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8018040:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8018042:	fb28 330e 	smlad	r3, r8, lr, r3
 8018046:	fb28 080b 	smlad	r8, r8, fp, r0
 801804a:	fb21 ce0e 	smlad	lr, r1, lr, ip
 801804e:	fb21 210b 	smlad	r1, r1, fp, r2
 8018052:	69e2      	ldr	r2, [r4, #28]
 8018054:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8018058:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801805a:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 801805e:	3420      	adds	r4, #32
 8018060:	3720      	adds	r7, #32
 8018062:	3540      	adds	r5, #64	; 0x40
 8018064:	fb20 3302 	smlad	r3, r0, r2, r3
 8018068:	fb20 800b 	smlad	r0, r0, fp, r8
 801806c:	fb2c e202 	smlad	r2, ip, r2, lr
 8018070:	fb2c 110b 	smlad	r1, ip, fp, r1
 8018074:	42a6      	cmp	r6, r4
 8018076:	d183      	bne.n	8017f80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xac>
 8018078:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801807a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801807e:	44a9      	add	r9, r5
 8018080:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018082:	9501      	str	r5, [sp, #4]
 8018084:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018086:	45ab      	cmp	fp, r5
 8018088:	f280 8201 	bge.w	801848e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5ba>
 801808c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801808e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8018092:	eba5 050b 	sub.w	r5, r5, fp
 8018096:	08ad      	lsrs	r5, r5, #2
 8018098:	950b      	str	r5, [sp, #44]	; 0x2c
 801809a:	3501      	adds	r5, #1
 801809c:	00ee      	lsls	r6, r5, #3
 801809e:	950a      	str	r5, [sp, #40]	; 0x28
 80180a0:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 80180a4:	9609      	str	r6, [sp, #36]	; 0x24
 80180a6:	464d      	mov	r5, r9
 80180a8:	f8d4 e000 	ldr.w	lr, [r4]
 80180ac:	f8dc 7000 	ldr.w	r7, [ip]
 80180b0:	f8d5 a000 	ldr.w	sl, [r5]
 80180b4:	686e      	ldr	r6, [r5, #4]
 80180b6:	fb2a 330e 	smlad	r3, sl, lr, r3
 80180ba:	fb2a 0007 	smlad	r0, sl, r7, r0
 80180be:	fb26 220e 	smlad	r2, r6, lr, r2
 80180c2:	fb26 1107 	smlad	r1, r6, r7, r1
 80180c6:	6867      	ldr	r7, [r4, #4]
 80180c8:	f8dc a004 	ldr.w	sl, [ip, #4]
 80180cc:	68ae      	ldr	r6, [r5, #8]
 80180ce:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80180d2:	3408      	adds	r4, #8
 80180d4:	f10c 0c08 	add.w	ip, ip, #8
 80180d8:	3510      	adds	r5, #16
 80180da:	fb26 3307 	smlad	r3, r6, r7, r3
 80180de:	fb26 000a 	smlad	r0, r6, sl, r0
 80180e2:	fb2e 2207 	smlad	r2, lr, r7, r2
 80180e6:	fb2e 110a 	smlad	r1, lr, sl, r1
 80180ea:	4544      	cmp	r4, r8
 80180ec:	d1dc      	bne.n	80180a8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d4>
 80180ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80180f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80180f2:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 80180f6:	9c01      	ldr	r4, [sp, #4]
 80180f8:	442c      	add	r4, r5
 80180fa:	9401      	str	r4, [sp, #4]
 80180fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80180fe:	f10b 0b04 	add.w	fp, fp, #4
 8018102:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8018106:	9f07      	ldr	r7, [sp, #28]
 8018108:	455f      	cmp	r7, fp
 801810a:	dd54      	ble.n	80181b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e2>
 801810c:	f9b8 5000 	ldrsh.w	r5, [r8]
 8018110:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 8018114:	f9b9 6000 	ldrsh.w	r6, [r9]
 8018118:	fb05 2204 	mla	r2, r5, r4, r2
 801811c:	fb06 3305 	mla	r3, r6, r5, r3
 8018120:	9d01      	ldr	r5, [sp, #4]
 8018122:	f9b5 5000 	ldrsh.w	r5, [r5]
 8018126:	fb05 1104 	mla	r1, r5, r4, r1
 801812a:	f10b 0401 	add.w	r4, fp, #1
 801812e:	42a7      	cmp	r7, r4
 8018130:	fb06 0005 	mla	r0, r6, r5, r0
 8018134:	dd3a      	ble.n	80181ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 8018136:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801813a:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 801813e:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8018142:	fb05 2204 	mla	r2, r5, r4, r2
 8018146:	fb06 3305 	mla	r3, r6, r5, r3
 801814a:	9d01      	ldr	r5, [sp, #4]
 801814c:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8018150:	fb05 1104 	mla	r1, r5, r4, r1
 8018154:	f10b 0402 	add.w	r4, fp, #2
 8018158:	42a7      	cmp	r7, r4
 801815a:	fb06 0005 	mla	r0, r6, r5, r0
 801815e:	dd25      	ble.n	80181ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 8018160:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8018164:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 8018168:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801816c:	fb05 2204 	mla	r2, r5, r4, r2
 8018170:	fb06 3305 	mla	r3, r6, r5, r3
 8018174:	9d01      	ldr	r5, [sp, #4]
 8018176:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 801817a:	fb05 1104 	mla	r1, r5, r4, r1
 801817e:	f10b 0403 	add.w	r4, fp, #3
 8018182:	42a7      	cmp	r7, r4
 8018184:	fb06 0005 	mla	r0, r6, r5, r0
 8018188:	dd10      	ble.n	80181ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 801818a:	9c01      	ldr	r4, [sp, #4]
 801818c:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 8018190:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8018194:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 8018198:	fb04 3305 	mla	r3, r4, r5, r3
 801819c:	fb04 0006 	mla	r0, r4, r6, r0
 80181a0:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 80181a4:	fb05 2204 	mla	r2, r5, r4, r2
 80181a8:	fb06 1104 	mla	r1, r6, r4, r1
 80181ac:	9c07      	ldr	r4, [sp, #28]
 80181ae:	eba4 0b0b 	sub.w	fp, r4, fp
 80181b2:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 80181b6:	9c02      	ldr	r4, [sp, #8]
 80181b8:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 80181bc:	2c15      	cmp	r4, #21
 80181be:	f340 80e4 	ble.w	801838a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b6>
 80181c2:	9d03      	ldr	r5, [sp, #12]
 80181c4:	1ea6      	subs	r6, r4, #2
 80181c6:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80181ca:	2501      	movs	r5, #1
 80181cc:	fa05 f606 	lsl.w	r6, r5, r6
 80181d0:	9d05      	ldr	r5, [sp, #20]
 80181d2:	3c01      	subs	r4, #1
 80181d4:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80181d8:	fb53 6305 	smmla	r3, r3, r5, r6
 80181dc:	4123      	asrs	r3, r4
 80181de:	fb50 6005 	smmla	r0, r0, r5, r6
 80181e2:	443b      	add	r3, r7
 80181e4:	f303 0307 	ssat	r3, #8, r3
 80181e8:	4120      	asrs	r0, r4
 80181ea:	9c04      	ldr	r4, [sp, #16]
 80181ec:	4438      	add	r0, r7
 80181ee:	f804 3c01 	strb.w	r3, [r4, #-1]
 80181f2:	f300 0007 	ssat	r0, #8, r0
 80181f6:	9b06      	ldr	r3, [sp, #24]
 80181f8:	f803 0c01 	strb.w	r0, [r3, #-1]
 80181fc:	9b02      	ldr	r3, [sp, #8]
 80181fe:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8018202:	2b15      	cmp	r3, #21
 8018204:	f340 80e2 	ble.w	80183cc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4f8>
 8018208:	9803      	ldr	r0, [sp, #12]
 801820a:	1e9c      	subs	r4, r3, #2
 801820c:	6805      	ldr	r5, [r0, #0]
 801820e:	2001      	movs	r0, #1
 8018210:	fa00 f404 	lsl.w	r4, r0, r4
 8018214:	9805      	ldr	r0, [sp, #20]
 8018216:	3b01      	subs	r3, #1
 8018218:	6800      	ldr	r0, [r0, #0]
 801821a:	fb52 4200 	smmla	r2, r2, r0, r4
 801821e:	411a      	asrs	r2, r3
 8018220:	fb51 4100 	smmla	r1, r1, r0, r4
 8018224:	442a      	add	r2, r5
 8018226:	f302 0207 	ssat	r2, #8, r2
 801822a:	4119      	asrs	r1, r3
 801822c:	9b04      	ldr	r3, [sp, #16]
 801822e:	4429      	add	r1, r5
 8018230:	701a      	strb	r2, [r3, #0]
 8018232:	f301 0107 	ssat	r1, #8, r1
 8018236:	9b06      	ldr	r3, [sp, #24]
 8018238:	7019      	strb	r1, [r3, #0]
 801823a:	9a05      	ldr	r2, [sp, #20]
 801823c:	9b02      	ldr	r3, [sp, #8]
 801823e:	3208      	adds	r2, #8
 8018240:	9205      	str	r2, [sp, #20]
 8018242:	9a03      	ldr	r2, [sp, #12]
 8018244:	3208      	adds	r2, #8
 8018246:	9203      	str	r2, [sp, #12]
 8018248:	9a04      	ldr	r2, [sp, #16]
 801824a:	3202      	adds	r2, #2
 801824c:	9204      	str	r2, [sp, #16]
 801824e:	9a06      	ldr	r2, [sp, #24]
 8018250:	3202      	adds	r2, #2
 8018252:	9206      	str	r2, [sp, #24]
 8018254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018256:	3304      	adds	r3, #4
 8018258:	4293      	cmp	r3, r2
 801825a:	9302      	str	r3, [sp, #8]
 801825c:	f47f ae7d 	bne.w	8017f5a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 8018260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018262:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018264:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018268:	9229      	str	r2, [sp, #164]	; 0xa4
 801826a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801826c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018270:	922a      	str	r2, [sp, #168]	; 0xa8
 8018272:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018274:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8018278:	922b      	str	r2, [sp, #172]	; 0xac
 801827a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801827c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8018280:	9215      	str	r2, [sp, #84]	; 0x54
 8018282:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018284:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018288:	9216      	str	r2, [sp, #88]	; 0x58
 801828a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801828c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018290:	46cb      	mov	fp, r9
 8018292:	9328      	str	r3, [sp, #160]	; 0xa0
 8018294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018296:	07db      	lsls	r3, r3, #31
 8018298:	d56e      	bpl.n	8018378 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 801829a:	9a07      	ldr	r2, [sp, #28]
 801829c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801829e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	0896      	lsrs	r6, r2, #2
 80182a4:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 80182a8:	f000 812f 	beq.w	801850a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x636>
 80182ac:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 80182b0:	463c      	mov	r4, r7
 80182b2:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 80182b6:	461a      	mov	r2, r3
 80182b8:	f8db 5000 	ldr.w	r5, [fp]
 80182bc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80182c0:	f8d0 e000 	ldr.w	lr, [r0]
 80182c4:	f10b 0b08 	add.w	fp, fp, #8
 80182c8:	fb25 330e 	smlad	r3, r5, lr, r3
 80182cc:	f8d4 e000 	ldr.w	lr, [r4]
 80182d0:	fb25 220e 	smlad	r2, r5, lr, r2
 80182d4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80182d8:	6865      	ldr	r5, [r4, #4]
 80182da:	3008      	adds	r0, #8
 80182dc:	3408      	adds	r4, #8
 80182de:	fb21 330e 	smlad	r3, r1, lr, r3
 80182e2:	fb21 2205 	smlad	r2, r1, r5, r2
 80182e6:	45b3      	cmp	fp, r6
 80182e8:	d1e6      	bne.n	80182b8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e4>
 80182ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80182ec:	4461      	add	r1, ip
 80182ee:	4467      	add	r7, ip
 80182f0:	910c      	str	r1, [sp, #48]	; 0x30
 80182f2:	9907      	ldr	r1, [sp, #28]
 80182f4:	f011 0103 	ands.w	r1, r1, #3
 80182f8:	d01d      	beq.n	8018336 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 80182fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80182fc:	f9b6 0000 	ldrsh.w	r0, [r6]
 8018300:	882c      	ldrh	r4, [r5, #0]
 8018302:	3901      	subs	r1, #1
 8018304:	fb14 3300 	smlabb	r3, r4, r0, r3
 8018308:	883c      	ldrh	r4, [r7, #0]
 801830a:	b289      	uxth	r1, r1
 801830c:	fb14 2200 	smlabb	r2, r4, r0, r2
 8018310:	b189      	cbz	r1, 8018336 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 8018312:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8018316:	886c      	ldrh	r4, [r5, #2]
 8018318:	fb14 3300 	smlabb	r3, r4, r0, r3
 801831c:	887c      	ldrh	r4, [r7, #2]
 801831e:	2901      	cmp	r1, #1
 8018320:	fb14 2200 	smlabb	r2, r4, r0, r2
 8018324:	d007      	beq.n	8018336 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 8018326:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 801832a:	88a8      	ldrh	r0, [r5, #4]
 801832c:	fb11 3300 	smlabb	r3, r1, r0, r3
 8018330:	88b8      	ldrh	r0, [r7, #4]
 8018332:	fb11 2200 	smlabb	r2, r1, r0, r2
 8018336:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018338:	f9b1 1000 	ldrsh.w	r1, [r1]
 801833c:	2915      	cmp	r1, #21
 801833e:	f340 80a8 	ble.w	8018492 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5be>
 8018342:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018344:	6804      	ldr	r4, [r0, #0]
 8018346:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8018348:	1e8d      	subs	r5, r1, #2
 801834a:	2601      	movs	r6, #1
 801834c:	3901      	subs	r1, #1
 801834e:	6800      	ldr	r0, [r0, #0]
 8018350:	40ae      	lsls	r6, r5
 8018352:	fb53 6500 	smmla	r5, r3, r0, r6
 8018356:	fb52 6300 	smmla	r3, r2, r0, r6
 801835a:	fa45 f201 	asr.w	r2, r5, r1
 801835e:	4422      	add	r2, r4
 8018360:	f302 0207 	ssat	r2, #8, r2
 8018364:	982b      	ldr	r0, [sp, #172]	; 0xac
 8018366:	410b      	asrs	r3, r1
 8018368:	4423      	add	r3, r4
 801836a:	f800 2b01 	strb.w	r2, [r0], #1
 801836e:	f303 0307 	ssat	r3, #8, r3
 8018372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018374:	902b      	str	r0, [sp, #172]	; 0xac
 8018376:	7013      	strb	r3, [r2, #0]
 8018378:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 801837c:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 8018380:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018382:	4418      	add	r0, r3
 8018384:	b01d      	add	sp, #116	; 0x74
 8018386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801838a:	2c00      	cmp	r4, #0
 801838c:	dd36      	ble.n	80183fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x528>
 801838e:	9d05      	ldr	r5, [sp, #20]
 8018390:	9e03      	ldr	r6, [sp, #12]
 8018392:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8018396:	f856 6c04 	ldr.w	r6, [r6, #-4]
 801839a:	005b      	lsls	r3, r3, #1
 801839c:	0040      	lsls	r0, r0, #1
 801839e:	fb53 6305 	smmla	r3, r3, r5, r6
 80183a2:	fb50 6005 	smmla	r0, r0, r5, r6
 80183a6:	4123      	asrs	r3, r4
 80183a8:	f303 0307 	ssat	r3, #8, r3
 80183ac:	9d04      	ldr	r5, [sp, #16]
 80183ae:	fa40 f404 	asr.w	r4, r0, r4
 80183b2:	f805 3c01 	strb.w	r3, [r5, #-1]
 80183b6:	f304 0407 	ssat	r4, #8, r4
 80183ba:	9b06      	ldr	r3, [sp, #24]
 80183bc:	f803 4c01 	strb.w	r4, [r3, #-1]
 80183c0:	9b02      	ldr	r3, [sp, #8]
 80183c2:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80183c6:	2b15      	cmp	r3, #21
 80183c8:	f73f af1e 	bgt.w	8018208 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x334>
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	dd37      	ble.n	8018440 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56c>
 80183d0:	9805      	ldr	r0, [sp, #20]
 80183d2:	9c03      	ldr	r4, [sp, #12]
 80183d4:	6800      	ldr	r0, [r0, #0]
 80183d6:	6824      	ldr	r4, [r4, #0]
 80183d8:	0052      	lsls	r2, r2, #1
 80183da:	0049      	lsls	r1, r1, #1
 80183dc:	fb52 4200 	smmla	r2, r2, r0, r4
 80183e0:	fb51 4100 	smmla	r1, r1, r0, r4
 80183e4:	411a      	asrs	r2, r3
 80183e6:	f302 0207 	ssat	r2, #8, r2
 80183ea:	9804      	ldr	r0, [sp, #16]
 80183ec:	fa41 f303 	asr.w	r3, r1, r3
 80183f0:	7002      	strb	r2, [r0, #0]
 80183f2:	f303 0307 	ssat	r3, #8, r3
 80183f6:	9a06      	ldr	r2, [sp, #24]
 80183f8:	7013      	strb	r3, [r2, #0]
 80183fa:	e71e      	b.n	801823a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 80183fc:	f1c4 0401 	rsb	r4, r4, #1
 8018400:	fa03 f504 	lsl.w	r5, r3, r4
 8018404:	f305 051f 	ssat	r5, #32, r5
 8018408:	9b05      	ldr	r3, [sp, #20]
 801840a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801840e:	fb55 f516 	smmulr	r5, r5, r6
 8018412:	40a0      	lsls	r0, r4
 8018414:	f300 001f 	ssat	r0, #32, r0
 8018418:	fb50 f016 	smmulr	r0, r0, r6
 801841c:	9c03      	ldr	r4, [sp, #12]
 801841e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018422:	442b      	add	r3, r5
 8018424:	f303 0307 	ssat	r3, #8, r3
 8018428:	9d04      	ldr	r5, [sp, #16]
 801842a:	f805 3c01 	strb.w	r3, [r5, #-1]
 801842e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018432:	4403      	add	r3, r0
 8018434:	f303 0307 	ssat	r3, #8, r3
 8018438:	9806      	ldr	r0, [sp, #24]
 801843a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801843e:	e6dd      	b.n	80181fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x328>
 8018440:	f1c3 0301 	rsb	r3, r3, #1
 8018444:	fa02 f003 	lsl.w	r0, r2, r3
 8018448:	f300 001f 	ssat	r0, #32, r0
 801844c:	9a05      	ldr	r2, [sp, #20]
 801844e:	6814      	ldr	r4, [r2, #0]
 8018450:	fb50 f014 	smmulr	r0, r0, r4
 8018454:	fa01 f303 	lsl.w	r3, r1, r3
 8018458:	f303 021f 	ssat	r2, #32, r3
 801845c:	fb52 f214 	smmulr	r2, r2, r4
 8018460:	9903      	ldr	r1, [sp, #12]
 8018462:	680b      	ldr	r3, [r1, #0]
 8018464:	4403      	add	r3, r0
 8018466:	f303 0307 	ssat	r3, #8, r3
 801846a:	9804      	ldr	r0, [sp, #16]
 801846c:	7003      	strb	r3, [r0, #0]
 801846e:	680b      	ldr	r3, [r1, #0]
 8018470:	4413      	add	r3, r2
 8018472:	f303 0307 	ssat	r3, #8, r3
 8018476:	9a06      	ldr	r2, [sp, #24]
 8018478:	7013      	strb	r3, [r2, #0]
 801847a:	e6de      	b.n	801823a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 801847c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801847e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018480:	9401      	str	r4, [sp, #4]
 8018482:	f04f 0b00 	mov.w	fp, #0
 8018486:	45ab      	cmp	fp, r5
 8018488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801848a:	f6ff adff 	blt.w	801808c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1b8>
 801848e:	46a0      	mov	r8, r4
 8018490:	e639      	b.n	8018106 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x232>
 8018492:	2900      	cmp	r1, #0
 8018494:	dd1a      	ble.n	80184cc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f8>
 8018496:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8018498:	6804      	ldr	r4, [r0, #0]
 801849a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801849c:	005b      	lsls	r3, r3, #1
 801849e:	6805      	ldr	r5, [r0, #0]
 80184a0:	fb53 5004 	smmla	r0, r3, r4, r5
 80184a4:	0052      	lsls	r2, r2, #1
 80184a6:	fb52 5304 	smmla	r3, r2, r4, r5
 80184aa:	fa40 f201 	asr.w	r2, r0, r1
 80184ae:	f302 0207 	ssat	r2, #8, r2
 80184b2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80184b4:	f800 2b01 	strb.w	r2, [r0], #1
 80184b8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80184ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80184be:	4113      	asrs	r3, r2
 80184c0:	f303 0307 	ssat	r3, #8, r3
 80184c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80184c6:	902b      	str	r0, [sp, #172]	; 0xac
 80184c8:	7013      	strb	r3, [r2, #0]
 80184ca:	e755      	b.n	8018378 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 80184cc:	f1c1 0101 	rsb	r1, r1, #1
 80184d0:	408b      	lsls	r3, r1
 80184d2:	f303 031f 	ssat	r3, #32, r3
 80184d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80184d8:	6800      	ldr	r0, [r0, #0]
 80184da:	fb53 f310 	smmulr	r3, r3, r0
 80184de:	408a      	lsls	r2, r1
 80184e0:	f302 021f 	ssat	r2, #32, r2
 80184e4:	fb52 f210 	smmulr	r2, r2, r0
 80184e8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80184ea:	6809      	ldr	r1, [r1, #0]
 80184ec:	440b      	add	r3, r1
 80184ee:	f303 0307 	ssat	r3, #8, r3
 80184f2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80184f4:	f801 3b01 	strb.w	r3, [r1], #1
 80184f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	4413      	add	r3, r2
 80184fe:	f303 0307 	ssat	r3, #8, r3
 8018502:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018504:	912b      	str	r1, [sp, #172]	; 0xac
 8018506:	7013      	strb	r3, [r2, #0]
 8018508:	e736      	b.n	8018378 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 801850a:	465e      	mov	r6, fp
 801850c:	461a      	mov	r2, r3
 801850e:	e6f0      	b.n	80182f2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x41e>

08018510 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8018510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018514:	b093      	sub	sp, #76	; 0x4c
 8018516:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801851a:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801851e:	930e      	str	r3, [sp, #56]	; 0x38
 8018520:	085d      	lsrs	r5, r3, #1
 8018522:	9405      	str	r4, [sp, #20]
 8018524:	9107      	str	r1, [sp, #28]
 8018526:	920d      	str	r2, [sp, #52]	; 0x34
 8018528:	950f      	str	r5, [sp, #60]	; 0x3c
 801852a:	f000 81fa 	beq.w	8018922 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x412>
 801852e:	4616      	mov	r6, r2
 8018530:	1e6a      	subs	r2, r5, #1
 8018532:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8018534:	460f      	mov	r7, r1
 8018536:	b292      	uxth	r2, r2
 8018538:	1d29      	adds	r1, r5, #4
 801853a:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801853e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018540:	9509      	str	r5, [sp, #36]	; 0x24
 8018542:	f102 0b02 	add.w	fp, r2, #2
 8018546:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018548:	3204      	adds	r2, #4
 801854a:	9203      	str	r2, [sp, #12]
 801854c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801854e:	3208      	adds	r2, #8
 8018550:	9202      	str	r2, [sp, #8]
 8018552:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018554:	3208      	adds	r2, #8
 8018556:	f1a4 0310 	sub.w	r3, r4, #16
 801855a:	9201      	str	r2, [sp, #4]
 801855c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801855e:	091b      	lsrs	r3, r3, #4
 8018560:	3301      	adds	r3, #1
 8018562:	3202      	adds	r2, #2
 8018564:	9204      	str	r2, [sp, #16]
 8018566:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 801856a:	019a      	lsls	r2, r3, #6
 801856c:	011b      	lsls	r3, r3, #4
 801856e:	1ee5      	subs	r5, r4, #3
 8018570:	930b      	str	r3, [sp, #44]	; 0x2c
 8018572:	1f23      	subs	r3, r4, #4
 8018574:	9508      	str	r5, [sp, #32]
 8018576:	f106 0a08 	add.w	sl, r6, #8
 801857a:	920a      	str	r2, [sp, #40]	; 0x28
 801857c:	930c      	str	r3, [sp, #48]	; 0x30
 801857e:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8018582:	9905      	ldr	r1, [sp, #20]
 8018584:	9311      	str	r3, [sp, #68]	; 0x44
 8018586:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 801858a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801858c:	9211      	str	r2, [sp, #68]	; 0x44
 801858e:	290f      	cmp	r1, #15
 8018590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018592:	9c07      	ldr	r4, [sp, #28]
 8018594:	f340 819a 	ble.w	80188cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3bc>
 8018598:	4601      	mov	r1, r0
 801859a:	f8d4 c000 	ldr.w	ip, [r4]
 801859e:	680e      	ldr	r6, [r1, #0]
 80185a0:	fb26 330c 	smlad	r3, r6, ip, r3
 80185a4:	684d      	ldr	r5, [r1, #4]
 80185a6:	fb25 220c 	smlad	r2, r5, ip, r2
 80185aa:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80185ae:	688e      	ldr	r6, [r1, #8]
 80185b0:	fb26 360c 	smlad	r6, r6, ip, r3
 80185b4:	68cd      	ldr	r5, [r1, #12]
 80185b6:	fb25 250c 	smlad	r5, r5, ip, r2
 80185ba:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80185be:	690b      	ldr	r3, [r1, #16]
 80185c0:	fb23 660c 	smlad	r6, r3, ip, r6
 80185c4:	694a      	ldr	r2, [r1, #20]
 80185c6:	fb22 550c 	smlad	r5, r2, ip, r5
 80185ca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80185ce:	698b      	ldr	r3, [r1, #24]
 80185d0:	fb23 630c 	smlad	r3, r3, ip, r6
 80185d4:	69ca      	ldr	r2, [r1, #28]
 80185d6:	fb22 520c 	smlad	r2, r2, ip, r5
 80185da:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80185de:	6a0e      	ldr	r6, [r1, #32]
 80185e0:	fb26 330c 	smlad	r3, r6, ip, r3
 80185e4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80185e6:	fb25 220c 	smlad	r2, r5, ip, r2
 80185ea:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80185ee:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80185f0:	fb26 360c 	smlad	r6, r6, ip, r3
 80185f4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80185f6:	fb25 250c 	smlad	r5, r5, ip, r2
 80185fa:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80185fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8018600:	fb23 660c 	smlad	r6, r3, ip, r6
 8018604:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8018606:	fb22 550c 	smlad	r5, r2, ip, r5
 801860a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 801860e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8018610:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8018612:	3420      	adds	r4, #32
 8018614:	3140      	adds	r1, #64	; 0x40
 8018616:	fb23 630c 	smlad	r3, r3, ip, r6
 801861a:	fb22 520c 	smlad	r2, r2, ip, r5
 801861e:	42bc      	cmp	r4, r7
 8018620:	d1bb      	bne.n	801859a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 8018622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018624:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8018628:	4408      	add	r0, r1
 801862a:	463c      	mov	r4, r7
 801862c:	9908      	ldr	r1, [sp, #32]
 801862e:	458e      	cmp	lr, r1
 8018630:	da24      	bge.n	801867c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16c>
 8018632:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018634:	eba1 090e 	sub.w	r9, r1, lr
 8018638:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801863c:	f109 0101 	add.w	r1, r9, #1
 8018640:	9106      	str	r1, [sp, #24]
 8018642:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8018646:	4601      	mov	r1, r0
 8018648:	6825      	ldr	r5, [r4, #0]
 801864a:	680e      	ldr	r6, [r1, #0]
 801864c:	fb26 3305 	smlad	r3, r6, r5, r3
 8018650:	684e      	ldr	r6, [r1, #4]
 8018652:	fb26 2505 	smlad	r5, r6, r5, r2
 8018656:	6866      	ldr	r6, [r4, #4]
 8018658:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801865c:	68ca      	ldr	r2, [r1, #12]
 801865e:	3408      	adds	r4, #8
 8018660:	3110      	adds	r1, #16
 8018662:	fb2c 3306 	smlad	r3, ip, r6, r3
 8018666:	fb22 5206 	smlad	r2, r2, r6, r5
 801866a:	45a0      	cmp	r8, r4
 801866c:	d1ec      	bne.n	8018648 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x138>
 801866e:	9906      	ldr	r1, [sp, #24]
 8018670:	f10e 0e04 	add.w	lr, lr, #4
 8018674:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8018678:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801867c:	9e05      	ldr	r6, [sp, #20]
 801867e:	4576      	cmp	r6, lr
 8018680:	dd30      	ble.n	80186e4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d4>
 8018682:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018686:	8805      	ldrh	r5, [r0, #0]
 8018688:	fb15 3301 	smlabb	r3, r5, r1, r3
 801868c:	8845      	ldrh	r5, [r0, #2]
 801868e:	fb11 2205 	smlabb	r2, r1, r5, r2
 8018692:	f10e 0101 	add.w	r1, lr, #1
 8018696:	428e      	cmp	r6, r1
 8018698:	dd1f      	ble.n	80186da <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ca>
 801869a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801869e:	8885      	ldrh	r5, [r0, #4]
 80186a0:	fb15 3301 	smlabb	r3, r5, r1, r3
 80186a4:	88c5      	ldrh	r5, [r0, #6]
 80186a6:	fb11 2205 	smlabb	r2, r1, r5, r2
 80186aa:	f10e 0102 	add.w	r1, lr, #2
 80186ae:	428e      	cmp	r6, r1
 80186b0:	dd13      	ble.n	80186da <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ca>
 80186b2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80186b6:	8905      	ldrh	r5, [r0, #8]
 80186b8:	fb15 3301 	smlabb	r3, r5, r1, r3
 80186bc:	8945      	ldrh	r5, [r0, #10]
 80186be:	fb11 2205 	smlabb	r2, r1, r5, r2
 80186c2:	f10e 0103 	add.w	r1, lr, #3
 80186c6:	428e      	cmp	r6, r1
 80186c8:	dd07      	ble.n	80186da <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ca>
 80186ca:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80186ce:	8984      	ldrh	r4, [r0, #12]
 80186d0:	fb14 3301 	smlabb	r3, r4, r1, r3
 80186d4:	89c4      	ldrh	r4, [r0, #14]
 80186d6:	fb11 2204 	smlabb	r2, r1, r4, r2
 80186da:	9905      	ldr	r1, [sp, #20]
 80186dc:	eba1 0e0e 	sub.w	lr, r1, lr
 80186e0:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 80186e4:	9903      	ldr	r1, [sp, #12]
 80186e6:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 80186ea:	2d15      	cmp	r5, #21
 80186ec:	f340 80b1 	ble.w	8018852 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x342>
 80186f0:	9901      	ldr	r1, [sp, #4]
 80186f2:	f851 6c08 	ldr.w	r6, [r1, #-8]
 80186f6:	9902      	ldr	r1, [sp, #8]
 80186f8:	1eac      	subs	r4, r5, #2
 80186fa:	f04f 0c01 	mov.w	ip, #1
 80186fe:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8018702:	fa0c f404 	lsl.w	r4, ip, r4
 8018706:	3d01      	subs	r5, #1
 8018708:	fb53 4301 	smmla	r3, r3, r1, r4
 801870c:	9c02      	ldr	r4, [sp, #8]
 801870e:	9901      	ldr	r1, [sp, #4]
 8018710:	412b      	asrs	r3, r5
 8018712:	4433      	add	r3, r6
 8018714:	f1a4 0e04 	sub.w	lr, r4, #4
 8018718:	1f0e      	subs	r6, r1, #4
 801871a:	f303 0307 	ssat	r3, #8, r3
 801871e:	f80b 3c02 	strb.w	r3, [fp, #-2]
 8018722:	9b04      	ldr	r3, [sp, #16]
 8018724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018728:	2b15      	cmp	r3, #21
 801872a:	f340 8084 	ble.w	8018836 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x326>
 801872e:	6834      	ldr	r4, [r6, #0]
 8018730:	f8de 1000 	ldr.w	r1, [lr]
 8018734:	1e9d      	subs	r5, r3, #2
 8018736:	2601      	movs	r6, #1
 8018738:	3b01      	subs	r3, #1
 801873a:	fa06 f505 	lsl.w	r5, r6, r5
 801873e:	fb52 5501 	smmla	r5, r2, r1, r5
 8018742:	411d      	asrs	r5, r3
 8018744:	4425      	add	r5, r4
 8018746:	f305 0507 	ssat	r5, #8, r5
 801874a:	f80b 5c01 	strb.w	r5, [fp, #-1]
 801874e:	9b03      	ldr	r3, [sp, #12]
 8018750:	3304      	adds	r3, #4
 8018752:	9303      	str	r3, [sp, #12]
 8018754:	9b02      	ldr	r3, [sp, #8]
 8018756:	3308      	adds	r3, #8
 8018758:	9302      	str	r3, [sp, #8]
 801875a:	9b01      	ldr	r3, [sp, #4]
 801875c:	3308      	adds	r3, #8
 801875e:	9301      	str	r3, [sp, #4]
 8018760:	9b04      	ldr	r3, [sp, #16]
 8018762:	3304      	adds	r3, #4
 8018764:	9304      	str	r3, [sp, #16]
 8018766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018768:	f10b 0b02 	add.w	fp, fp, #2
 801876c:	459b      	cmp	fp, r3
 801876e:	f10a 0a08 	add.w	sl, sl, #8
 8018772:	f47f af04 	bne.w	801857e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 8018776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018778:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801877a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801877e:	921e      	str	r2, [sp, #120]	; 0x78
 8018780:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018782:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018786:	921f      	str	r2, [sp, #124]	; 0x7c
 8018788:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801878a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801878e:	9220      	str	r2, [sp, #128]	; 0x80
 8018790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018792:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018796:	920d      	str	r2, [sp, #52]	; 0x34
 8018798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801879a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801879e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187a0:	07db      	lsls	r3, r3, #31
 80187a2:	d544      	bpl.n	801882e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 80187a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187a6:	681a      	ldr	r2, [r3, #0]
 80187a8:	9b05      	ldr	r3, [sp, #20]
 80187aa:	089e      	lsrs	r6, r3, #2
 80187ac:	d013      	beq.n	80187d6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c6>
 80187ae:	9b07      	ldr	r3, [sp, #28]
 80187b0:	00f7      	lsls	r7, r6, #3
 80187b2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80187b6:	6805      	ldr	r5, [r0, #0]
 80187b8:	6844      	ldr	r4, [r0, #4]
 80187ba:	f8d3 c000 	ldr.w	ip, [r3]
 80187be:	3008      	adds	r0, #8
 80187c0:	fb25 220c 	smlad	r2, r5, ip, r2
 80187c4:	685d      	ldr	r5, [r3, #4]
 80187c6:	3308      	adds	r3, #8
 80187c8:	fb24 2205 	smlad	r2, r4, r5, r2
 80187cc:	4286      	cmp	r6, r0
 80187ce:	d1f2      	bne.n	80187b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a6>
 80187d0:	9b07      	ldr	r3, [sp, #28]
 80187d2:	443b      	add	r3, r7
 80187d4:	9307      	str	r3, [sp, #28]
 80187d6:	9b05      	ldr	r3, [sp, #20]
 80187d8:	f013 0303 	ands.w	r3, r3, #3
 80187dc:	d011      	beq.n	8018802 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 80187de:	9e07      	ldr	r6, [sp, #28]
 80187e0:	8804      	ldrh	r4, [r0, #0]
 80187e2:	8835      	ldrh	r5, [r6, #0]
 80187e4:	3b01      	subs	r3, #1
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	fb15 2204 	smlabb	r2, r5, r4, r2
 80187ec:	b14b      	cbz	r3, 8018802 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 80187ee:	8845      	ldrh	r5, [r0, #2]
 80187f0:	8874      	ldrh	r4, [r6, #2]
 80187f2:	2b01      	cmp	r3, #1
 80187f4:	fb15 2204 	smlabb	r2, r5, r4, r2
 80187f8:	d003      	beq.n	8018802 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 80187fa:	8880      	ldrh	r0, [r0, #4]
 80187fc:	88b3      	ldrh	r3, [r6, #4]
 80187fe:	fb10 2203 	smlabb	r2, r0, r3, r2
 8018802:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018808:	2b15      	cmp	r3, #21
 801880a:	dd62      	ble.n	80188d2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 801880c:	9820      	ldr	r0, [sp, #128]	; 0x80
 801880e:	6805      	ldr	r5, [r0, #0]
 8018810:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018812:	1e9e      	subs	r6, r3, #2
 8018814:	2401      	movs	r4, #1
 8018816:	3b01      	subs	r3, #1
 8018818:	6800      	ldr	r0, [r0, #0]
 801881a:	40b4      	lsls	r4, r6
 801881c:	fb52 4200 	smmla	r2, r2, r0, r4
 8018820:	fa42 f303 	asr.w	r3, r2, r3
 8018824:	442b      	add	r3, r5
 8018826:	f303 0307 	ssat	r3, #8, r3
 801882a:	f801 3b01 	strb.w	r3, [r1], #1
 801882e:	4608      	mov	r0, r1
 8018830:	b013      	add	sp, #76	; 0x4c
 8018832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018836:	2b00      	cmp	r3, #0
 8018838:	dd21      	ble.n	801887e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36e>
 801883a:	f8de 1000 	ldr.w	r1, [lr]
 801883e:	6834      	ldr	r4, [r6, #0]
 8018840:	0052      	lsls	r2, r2, #1
 8018842:	fb52 4201 	smmla	r2, r2, r1, r4
 8018846:	411a      	asrs	r2, r3
 8018848:	f302 0207 	ssat	r2, #8, r2
 801884c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8018850:	e77d      	b.n	801874e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 8018852:	2d00      	cmp	r5, #0
 8018854:	dd24      	ble.n	80188a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x390>
 8018856:	9e02      	ldr	r6, [sp, #8]
 8018858:	9c01      	ldr	r4, [sp, #4]
 801885a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801885e:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8018862:	005b      	lsls	r3, r3, #1
 8018864:	fb53 4301 	smmla	r3, r3, r1, r4
 8018868:	9c01      	ldr	r4, [sp, #4]
 801886a:	f1a6 0e04 	sub.w	lr, r6, #4
 801886e:	fa43 f505 	asr.w	r5, r3, r5
 8018872:	1f26      	subs	r6, r4, #4
 8018874:	f305 0507 	ssat	r5, #8, r5
 8018878:	f80b 5c02 	strb.w	r5, [fp, #-2]
 801887c:	e751      	b.n	8018722 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 801887e:	f1c3 0301 	rsb	r3, r3, #1
 8018882:	fa02 f303 	lsl.w	r3, r2, r3
 8018886:	f303 031f 	ssat	r3, #32, r3
 801888a:	f8de 2000 	ldr.w	r2, [lr]
 801888e:	fb53 f312 	smmulr	r3, r3, r2
 8018892:	6832      	ldr	r2, [r6, #0]
 8018894:	441a      	add	r2, r3
 8018896:	f302 0207 	ssat	r2, #8, r2
 801889a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801889e:	e756      	b.n	801874e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x23e>
 80188a0:	f1c5 0501 	rsb	r5, r5, #1
 80188a4:	40ab      	lsls	r3, r5
 80188a6:	f303 031f 	ssat	r3, #32, r3
 80188aa:	9902      	ldr	r1, [sp, #8]
 80188ac:	f1a1 0e04 	sub.w	lr, r1, #4
 80188b0:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80188b4:	fb53 f111 	smmulr	r1, r3, r1
 80188b8:	9c01      	ldr	r4, [sp, #4]
 80188ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80188be:	1f26      	subs	r6, r4, #4
 80188c0:	440b      	add	r3, r1
 80188c2:	f303 0307 	ssat	r3, #8, r3
 80188c6:	f80b 3c02 	strb.w	r3, [fp, #-2]
 80188ca:	e72a      	b.n	8018722 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 80188cc:	f04f 0e00 	mov.w	lr, #0
 80188d0:	e6ac      	b.n	801862c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x11c>
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	dd10      	ble.n	80188f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3e8>
 80188d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80188d8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80188da:	6800      	ldr	r0, [r0, #0]
 80188dc:	6824      	ldr	r4, [r4, #0]
 80188de:	0052      	lsls	r2, r2, #1
 80188e0:	fb52 4200 	smmla	r2, r2, r0, r4
 80188e4:	fa42 f303 	asr.w	r3, r2, r3
 80188e8:	f303 0307 	ssat	r3, #8, r3
 80188ec:	f801 3b01 	strb.w	r3, [r1], #1
 80188f0:	4608      	mov	r0, r1
 80188f2:	b013      	add	sp, #76	; 0x4c
 80188f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f8:	f1c3 0301 	rsb	r3, r3, #1
 80188fc:	fa02 f303 	lsl.w	r3, r2, r3
 8018900:	f303 031f 	ssat	r3, #32, r3
 8018904:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018906:	6812      	ldr	r2, [r2, #0]
 8018908:	fb53 f312 	smmulr	r3, r3, r2
 801890c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801890e:	6812      	ldr	r2, [r2, #0]
 8018910:	4413      	add	r3, r2
 8018912:	f303 0307 	ssat	r3, #8, r3
 8018916:	f801 3b01 	strb.w	r3, [r1], #1
 801891a:	4608      	mov	r0, r1
 801891c:	b013      	add	sp, #76	; 0x4c
 801891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018922:	9921      	ldr	r1, [sp, #132]	; 0x84
 8018924:	e73b      	b.n	801879e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x28e>
 8018926:	bf00      	nop

08018928 <st_int8_maxpool>:
 8018928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801892c:	b095      	sub	sp, #84	; 0x54
 801892e:	e9cd 1000 	strd	r1, r0, [sp]
 8018932:	9306      	str	r3, [sp, #24]
 8018934:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8018938:	9307      	str	r3, [sp, #28]
 801893a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801893e:	9308      	str	r3, [sp, #32]
 8018940:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8018944:	9309      	str	r3, [sp, #36]	; 0x24
 8018946:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 801894a:	930a      	str	r3, [sp, #40]	; 0x28
 801894c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8018950:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 8018954:	930b      	str	r3, [sp, #44]	; 0x2c
 8018956:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801895a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801895e:	930c      	str	r3, [sp, #48]	; 0x30
 8018960:	4692      	mov	sl, r2
 8018962:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8018966:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801896a:	9104      	str	r1, [sp, #16]
 801896c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018970:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 8018974:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 8018978:	9303      	str	r3, [sp, #12]
 801897a:	eec0 6a20 	vdiv.f32	s13, s0, s1
 801897e:	9205      	str	r2, [sp, #20]
 8018980:	9102      	str	r1, [sp, #8]
 8018982:	f2c0 80a5 	blt.w	8018ad0 <st_int8_maxpool+0x1a8>
 8018986:	2a00      	cmp	r2, #0
 8018988:	f000 809f 	beq.w	8018aca <st_int8_maxpool+0x1a2>
 801898c:	9b03      	ldr	r3, [sp, #12]
 801898e:	2b00      	cmp	r3, #0
 8018990:	f000 809b 	beq.w	8018aca <st_int8_maxpool+0x1a2>
 8018994:	f1b8 0f00 	cmp.w	r8, #0
 8018998:	f000 8097 	beq.w	8018aca <st_int8_maxpool+0x1a2>
 801899c:	f1b8 0f01 	cmp.w	r8, #1
 80189a0:	f040 81f5 	bne.w	8018d8e <st_int8_maxpool+0x466>
 80189a4:	ee07 1a90 	vmov	s15, r1
 80189a8:	2300      	movs	r3, #0
 80189aa:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80189ae:	ed9f 6a9e 	vldr	s12, [pc, #632]	; 8018c28 <st_int8_maxpool+0x300>
 80189b2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80189b6:	930d      	str	r3, [sp, #52]	; 0x34
 80189b8:	469b      	mov	fp, r3
 80189ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189bc:	9a03      	ldr	r2, [sp, #12]
 80189be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80189c0:	fb0b f303 	mul.w	r3, fp, r3
 80189c4:	fb0b f202 	mul.w	r2, fp, r2
 80189c8:	9204      	str	r2, [sp, #16]
 80189ca:	1a5a      	subs	r2, r3, r1
 80189cc:	1acb      	subs	r3, r1, r3
 80189ce:	9906      	ldr	r1, [sp, #24]
 80189d0:	2a00      	cmp	r2, #0
 80189d2:	bfd8      	it	le
 80189d4:	4699      	movle	r9, r3
 80189d6:	440b      	add	r3, r1
 80189d8:	9908      	ldr	r1, [sp, #32]
 80189da:	bfc8      	it	gt
 80189dc:	f04f 0900 	movgt.w	r9, #0
 80189e0:	444a      	add	r2, r9
 80189e2:	4299      	cmp	r1, r3
 80189e4:	bfa8      	it	ge
 80189e6:	4619      	movge	r1, r3
 80189e8:	f04f 0b00 	mov.w	fp, #0
 80189ec:	fb0a f302 	mul.w	r3, sl, r2
 80189f0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80189f4:	468c      	mov	ip, r1
 80189f6:	930e      	str	r3, [sp, #56]	; 0x38
 80189f8:	46de      	mov	lr, fp
 80189fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80189fe:	fb0e f203 	mul.w	r2, lr, r3
 8018a02:	9b04      	ldr	r3, [sp, #16]
 8018a04:	449e      	add	lr, r3
 8018a06:	1a53      	subs	r3, r2, r1
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	eba1 0202 	sub.w	r2, r1, r2
 8018a0e:	bfd8      	it	le
 8018a10:	4617      	movle	r7, r2
 8018a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a14:	ebaa 0403 	sub.w	r4, sl, r3
 8018a18:	eb03 0502 	add.w	r5, r3, r2
 8018a1c:	9b07      	ldr	r3, [sp, #28]
 8018a1e:	bfc8      	it	gt
 8018a20:	2700      	movgt	r7, #0
 8018a22:	429c      	cmp	r4, r3
 8018a24:	bfa8      	it	ge
 8018a26:	461c      	movge	r4, r3
 8018a28:	45cc      	cmp	ip, r9
 8018a2a:	443d      	add	r5, r7
 8018a2c:	f340 80f8 	ble.w	8018c20 <st_int8_maxpool+0x2f8>
 8018a30:	9b01      	ldr	r3, [sp, #4]
 8018a32:	464e      	mov	r6, r9
 8018a34:	441d      	add	r5, r3
 8018a36:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8018a3a:	42bc      	cmp	r4, r7
 8018a3c:	dd09      	ble.n	8018a52 <st_int8_maxpool+0x12a>
 8018a3e:	462a      	mov	r2, r5
 8018a40:	463b      	mov	r3, r7
 8018a42:	f912 0b01 	ldrsb.w	r0, [r2], #1
 8018a46:	3301      	adds	r3, #1
 8018a48:	4281      	cmp	r1, r0
 8018a4a:	bfb8      	it	lt
 8018a4c:	4601      	movlt	r1, r0
 8018a4e:	42a3      	cmp	r3, r4
 8018a50:	d1f7      	bne.n	8018a42 <st_int8_maxpool+0x11a>
 8018a52:	3601      	adds	r6, #1
 8018a54:	4566      	cmp	r6, ip
 8018a56:	4455      	add	r5, sl
 8018a58:	d1ef      	bne.n	8018a3a <st_int8_maxpool+0x112>
 8018a5a:	eeb4 0a60 	vcmp.f32	s0, s1
 8018a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a62:	d103      	bne.n	8018a6c <st_int8_maxpool+0x144>
 8018a64:	9b02      	ldr	r3, [sp, #8]
 8018a66:	4598      	cmp	r8, r3
 8018a68:	f000 80d6 	beq.w	8018c18 <st_int8_maxpool+0x2f0>
 8018a6c:	eba1 0108 	sub.w	r1, r1, r8
 8018a70:	ee07 1a90 	vmov	s15, r1
 8018a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a78:	eeb0 7a65 	vmov.f32	s14, s11
 8018a7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018a80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a88:	bfb4      	ite	lt
 8018a8a:	eef0 7a46 	vmovlt.f32	s15, s12
 8018a8e:	eef0 7a45 	vmovge.f32	s15, s10
 8018a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a9a:	ee17 3a90 	vmov	r3, s15
 8018a9e:	f303 0307 	ssat	r3, #8, r3
 8018aa2:	9a00      	ldr	r2, [sp, #0]
 8018aa4:	f802 300e 	strb.w	r3, [r2, lr]
 8018aa8:	9b03      	ldr	r3, [sp, #12]
 8018aaa:	f10b 0b01 	add.w	fp, fp, #1
 8018aae:	fa0f fb8b 	sxth.w	fp, fp
 8018ab2:	455b      	cmp	r3, fp
 8018ab4:	46de      	mov	lr, fp
 8018ab6:	dca0      	bgt.n	80189fa <st_int8_maxpool+0xd2>
 8018ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018aba:	9a05      	ldr	r2, [sp, #20]
 8018abc:	3301      	adds	r3, #1
 8018abe:	b21b      	sxth	r3, r3
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8018ac4:	469b      	mov	fp, r3
 8018ac6:	f73f af78 	bgt.w	80189ba <st_int8_maxpool+0x92>
 8018aca:	b015      	add	sp, #84	; 0x54
 8018acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad0:	2a00      	cmp	r2, #0
 8018ad2:	d0fa      	beq.n	8018aca <st_int8_maxpool+0x1a2>
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d0f8      	beq.n	8018aca <st_int8_maxpool+0x1a2>
 8018ad8:	f1b8 0f00 	cmp.w	r8, #0
 8018adc:	d0f5      	beq.n	8018aca <st_int8_maxpool+0x1a2>
 8018ade:	f1b8 0f01 	cmp.w	r8, #1
 8018ae2:	f040 80a3 	bne.w	8018c2c <st_int8_maxpool+0x304>
 8018ae6:	ee07 1a90 	vmov	s15, r1
 8018aea:	2300      	movs	r3, #0
 8018aec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018af0:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8018c28 <st_int8_maxpool+0x300>
 8018af4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018af8:	930d      	str	r3, [sp, #52]	; 0x34
 8018afa:	469b      	mov	fp, r3
 8018afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018afe:	9a03      	ldr	r2, [sp, #12]
 8018b00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018b02:	fb0b f303 	mul.w	r3, fp, r3
 8018b06:	fb0b f202 	mul.w	r2, fp, r2
 8018b0a:	9204      	str	r2, [sp, #16]
 8018b0c:	1a5a      	subs	r2, r3, r1
 8018b0e:	1acb      	subs	r3, r1, r3
 8018b10:	9906      	ldr	r1, [sp, #24]
 8018b12:	2a00      	cmp	r2, #0
 8018b14:	bfd8      	it	le
 8018b16:	4699      	movle	r9, r3
 8018b18:	440b      	add	r3, r1
 8018b1a:	9908      	ldr	r1, [sp, #32]
 8018b1c:	bfc8      	it	gt
 8018b1e:	f04f 0900 	movgt.w	r9, #0
 8018b22:	444a      	add	r2, r9
 8018b24:	4299      	cmp	r1, r3
 8018b26:	bfa8      	it	ge
 8018b28:	4619      	movge	r1, r3
 8018b2a:	f04f 0b00 	mov.w	fp, #0
 8018b2e:	fb0a f302 	mul.w	r3, sl, r2
 8018b32:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8018b36:	468c      	mov	ip, r1
 8018b38:	930e      	str	r3, [sp, #56]	; 0x38
 8018b3a:	46de      	mov	lr, fp
 8018b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b40:	fb0e f203 	mul.w	r2, lr, r3
 8018b44:	9b04      	ldr	r3, [sp, #16]
 8018b46:	449e      	add	lr, r3
 8018b48:	1a53      	subs	r3, r2, r1
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	eba1 0202 	sub.w	r2, r1, r2
 8018b50:	bfd8      	it	le
 8018b52:	4617      	movle	r7, r2
 8018b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b56:	ebaa 0403 	sub.w	r4, sl, r3
 8018b5a:	eb03 0502 	add.w	r5, r3, r2
 8018b5e:	9b07      	ldr	r3, [sp, #28]
 8018b60:	bfc8      	it	gt
 8018b62:	2700      	movgt	r7, #0
 8018b64:	429c      	cmp	r4, r3
 8018b66:	bfa8      	it	ge
 8018b68:	461c      	movge	r4, r3
 8018b6a:	45cc      	cmp	ip, r9
 8018b6c:	443d      	add	r5, r7
 8018b6e:	dd51      	ble.n	8018c14 <st_int8_maxpool+0x2ec>
 8018b70:	9b01      	ldr	r3, [sp, #4]
 8018b72:	464e      	mov	r6, r9
 8018b74:	441d      	add	r5, r3
 8018b76:	217f      	movs	r1, #127	; 0x7f
 8018b78:	42bc      	cmp	r4, r7
 8018b7a:	dd09      	ble.n	8018b90 <st_int8_maxpool+0x268>
 8018b7c:	462a      	mov	r2, r5
 8018b7e:	463b      	mov	r3, r7
 8018b80:	f912 0b01 	ldrsb.w	r0, [r2], #1
 8018b84:	3301      	adds	r3, #1
 8018b86:	4281      	cmp	r1, r0
 8018b88:	bfa8      	it	ge
 8018b8a:	4601      	movge	r1, r0
 8018b8c:	429c      	cmp	r4, r3
 8018b8e:	d1f7      	bne.n	8018b80 <st_int8_maxpool+0x258>
 8018b90:	3601      	adds	r6, #1
 8018b92:	45b4      	cmp	ip, r6
 8018b94:	4455      	add	r5, sl
 8018b96:	d1ef      	bne.n	8018b78 <st_int8_maxpool+0x250>
 8018b98:	eeb4 0a60 	vcmp.f32	s0, s1
 8018b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba0:	d102      	bne.n	8018ba8 <st_int8_maxpool+0x280>
 8018ba2:	9b02      	ldr	r3, [sp, #8]
 8018ba4:	4598      	cmp	r8, r3
 8018ba6:	d031      	beq.n	8018c0c <st_int8_maxpool+0x2e4>
 8018ba8:	eba1 0108 	sub.w	r1, r1, r8
 8018bac:	ee07 1a90 	vmov	s15, r1
 8018bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018bb4:	eeb0 7a65 	vmov.f32	s14, s11
 8018bb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018bbc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bc4:	bfb4      	ite	lt
 8018bc6:	eef0 7a46 	vmovlt.f32	s15, s12
 8018bca:	eef0 7a45 	vmovge.f32	s15, s10
 8018bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018bd2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018bd6:	ee17 3a90 	vmov	r3, s15
 8018bda:	f303 0307 	ssat	r3, #8, r3
 8018bde:	9a00      	ldr	r2, [sp, #0]
 8018be0:	f802 300e 	strb.w	r3, [r2, lr]
 8018be4:	9b03      	ldr	r3, [sp, #12]
 8018be6:	f10b 0b01 	add.w	fp, fp, #1
 8018bea:	fa0f fb8b 	sxth.w	fp, fp
 8018bee:	455b      	cmp	r3, fp
 8018bf0:	46de      	mov	lr, fp
 8018bf2:	dca3      	bgt.n	8018b3c <st_int8_maxpool+0x214>
 8018bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bf6:	9a05      	ldr	r2, [sp, #20]
 8018bf8:	3301      	adds	r3, #1
 8018bfa:	b21b      	sxth	r3, r3
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8018c00:	469b      	mov	fp, r3
 8018c02:	f73f af7b 	bgt.w	8018afc <st_int8_maxpool+0x1d4>
 8018c06:	b015      	add	sp, #84	; 0x54
 8018c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0c:	9b00      	ldr	r3, [sp, #0]
 8018c0e:	f803 100e 	strb.w	r1, [r3, lr]
 8018c12:	e7e7      	b.n	8018be4 <st_int8_maxpool+0x2bc>
 8018c14:	217f      	movs	r1, #127	; 0x7f
 8018c16:	e7bf      	b.n	8018b98 <st_int8_maxpool+0x270>
 8018c18:	9b00      	ldr	r3, [sp, #0]
 8018c1a:	f803 100e 	strb.w	r1, [r3, lr]
 8018c1e:	e743      	b.n	8018aa8 <st_int8_maxpool+0x180>
 8018c20:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8018c24:	e719      	b.n	8018a5a <st_int8_maxpool+0x132>
 8018c26:	bf00      	nop
 8018c28:	befffffc 	.word	0xbefffffc
 8018c2c:	ee07 1a90 	vmov	s15, r1
 8018c30:	f04f 0e00 	mov.w	lr, #0
 8018c34:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018c38:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 8018c28 <st_int8_maxpool+0x300>
 8018c3c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018c40:	fb0a fb08 	mul.w	fp, sl, r8
 8018c44:	4673      	mov	r3, lr
 8018c46:	46f4      	mov	ip, lr
 8018c48:	9903      	ldr	r1, [sp, #12]
 8018c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c4c:	9806      	ldr	r0, [sp, #24]
 8018c4e:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8018c52:	fb03 f202 	mul.w	r2, r3, r2
 8018c56:	fb03 f301 	mul.w	r3, r3, r1
 8018c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8018c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c5e:	1ad1      	subs	r1, r2, r3
 8018c60:	2900      	cmp	r1, #0
 8018c62:	eba3 0302 	sub.w	r3, r3, r2
 8018c66:	bfd4      	ite	le
 8018c68:	461a      	movle	r2, r3
 8018c6a:	2200      	movgt	r2, #0
 8018c6c:	4411      	add	r1, r2
 8018c6e:	920f      	str	r2, [sp, #60]	; 0x3c
 8018c70:	9a08      	ldr	r2, [sp, #32]
 8018c72:	4403      	add	r3, r0
 8018c74:	429a      	cmp	r2, r3
 8018c76:	bfa8      	it	ge
 8018c78:	461a      	movge	r2, r3
 8018c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c7c:	fb03 f301 	mul.w	r3, r3, r1
 8018c80:	9311      	str	r3, [sp, #68]	; 0x44
 8018c82:	2300      	movs	r3, #0
 8018c84:	4692      	mov	sl, r2
 8018c86:	930d      	str	r3, [sp, #52]	; 0x34
 8018c88:	461a      	mov	r2, r3
 8018c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c8c:	9c07      	ldr	r4, [sp, #28]
 8018c8e:	fb02 f103 	mul.w	r1, r2, r3
 8018c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c94:	441a      	add	r2, r3
 8018c96:	9b00      	ldr	r3, [sp, #0]
 8018c98:	fb08 3c02 	mla	ip, r8, r2, r3
 8018c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c9e:	1a8b      	subs	r3, r1, r2
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	eba2 0101 	sub.w	r1, r2, r1
 8018ca6:	bfd8      	it	le
 8018ca8:	460f      	movle	r7, r1
 8018caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018cac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018cae:	bfc8      	it	gt
 8018cb0:	2700      	movgt	r7, #0
 8018cb2:	189a      	adds	r2, r3, r2
 8018cb4:	1acb      	subs	r3, r1, r3
 8018cb6:	429c      	cmp	r4, r3
 8018cb8:	443a      	add	r2, r7
 8018cba:	bfa8      	it	ge
 8018cbc:	461c      	movge	r4, r3
 8018cbe:	f04f 0e00 	mov.w	lr, #0
 8018cc2:	fb08 f302 	mul.w	r3, r8, r2
 8018cc6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8018cca:	9312      	str	r3, [sp, #72]	; 0x48
 8018ccc:	46f1      	mov	r9, lr
 8018cce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018cd0:	4555      	cmp	r5, sl
 8018cd2:	da5a      	bge.n	8018d8a <st_int8_maxpool+0x462>
 8018cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018cd6:	eb09 0603 	add.w	r6, r9, r3
 8018cda:	9b01      	ldr	r3, [sp, #4]
 8018cdc:	217f      	movs	r1, #127	; 0x7f
 8018cde:	441e      	add	r6, r3
 8018ce0:	42a7      	cmp	r7, r4
 8018ce2:	da0a      	bge.n	8018cfa <st_int8_maxpool+0x3d2>
 8018ce4:	4632      	mov	r2, r6
 8018ce6:	463b      	mov	r3, r7
 8018ce8:	f992 0000 	ldrsb.w	r0, [r2]
 8018cec:	3301      	adds	r3, #1
 8018cee:	4281      	cmp	r1, r0
 8018cf0:	bfa8      	it	ge
 8018cf2:	4601      	movge	r1, r0
 8018cf4:	429c      	cmp	r4, r3
 8018cf6:	4442      	add	r2, r8
 8018cf8:	d1f6      	bne.n	8018ce8 <st_int8_maxpool+0x3c0>
 8018cfa:	3501      	adds	r5, #1
 8018cfc:	45aa      	cmp	sl, r5
 8018cfe:	445e      	add	r6, fp
 8018d00:	d1ee      	bne.n	8018ce0 <st_int8_maxpool+0x3b8>
 8018d02:	eeb4 0a60 	vcmp.f32	s0, s1
 8018d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d0a:	d103      	bne.n	8018d14 <st_int8_maxpool+0x3ec>
 8018d0c:	9b04      	ldr	r3, [sp, #16]
 8018d0e:	9a02      	ldr	r2, [sp, #8]
 8018d10:	4293      	cmp	r3, r2
 8018d12:	d037      	beq.n	8018d84 <st_int8_maxpool+0x45c>
 8018d14:	9b04      	ldr	r3, [sp, #16]
 8018d16:	1ac9      	subs	r1, r1, r3
 8018d18:	ee07 1a90 	vmov	s15, r1
 8018d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d20:	eeb0 7a65 	vmov.f32	s14, s11
 8018d24:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018d28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d30:	bfb4      	ite	lt
 8018d32:	eef0 7a46 	vmovlt.f32	s15, s12
 8018d36:	eef0 7a45 	vmovge.f32	s15, s10
 8018d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d42:	ee17 3a90 	vmov	r3, s15
 8018d46:	f303 0307 	ssat	r3, #8, r3
 8018d4a:	f80c 3009 	strb.w	r3, [ip, r9]
 8018d4e:	f10e 0e01 	add.w	lr, lr, #1
 8018d52:	fa0f fe8e 	sxth.w	lr, lr
 8018d56:	45c6      	cmp	lr, r8
 8018d58:	46f1      	mov	r9, lr
 8018d5a:	dbb8      	blt.n	8018cce <st_int8_maxpool+0x3a6>
 8018d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d5e:	9903      	ldr	r1, [sp, #12]
 8018d60:	3301      	adds	r3, #1
 8018d62:	b21b      	sxth	r3, r3
 8018d64:	428b      	cmp	r3, r1
 8018d66:	930d      	str	r3, [sp, #52]	; 0x34
 8018d68:	461a      	mov	r2, r3
 8018d6a:	db8e      	blt.n	8018c8a <st_int8_maxpool+0x362>
 8018d6c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8018d70:	9a05      	ldr	r2, [sp, #20]
 8018d72:	f10c 0301 	add.w	r3, ip, #1
 8018d76:	fa0f fc83 	sxth.w	ip, r3
 8018d7a:	4594      	cmp	ip, r2
 8018d7c:	4663      	mov	r3, ip
 8018d7e:	f6ff af63 	blt.w	8018c48 <st_int8_maxpool+0x320>
 8018d82:	e6a2      	b.n	8018aca <st_int8_maxpool+0x1a2>
 8018d84:	f80c 1009 	strb.w	r1, [ip, r9]
 8018d88:	e7e1      	b.n	8018d4e <st_int8_maxpool+0x426>
 8018d8a:	217f      	movs	r1, #127	; 0x7f
 8018d8c:	e7b9      	b.n	8018d02 <st_int8_maxpool+0x3da>
 8018d8e:	ee07 1a90 	vmov	s15, r1
 8018d92:	2300      	movs	r3, #0
 8018d94:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018d98:	ed1f 6a5d 	vldr	s12, [pc, #-372]	; 8018c28 <st_int8_maxpool+0x300>
 8018d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8018d9e:	fb0a fb08 	mul.w	fp, sl, r8
 8018da2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8018da6:	9903      	ldr	r1, [sp, #12]
 8018da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018daa:	9806      	ldr	r0, [sp, #24]
 8018dac:	fb03 f202 	mul.w	r2, r3, r2
 8018db0:	fb03 f301 	mul.w	r3, r3, r1
 8018db4:	9312      	str	r3, [sp, #72]	; 0x48
 8018db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018db8:	1ad1      	subs	r1, r2, r3
 8018dba:	2900      	cmp	r1, #0
 8018dbc:	eba3 0302 	sub.w	r3, r3, r2
 8018dc0:	bfd4      	ite	le
 8018dc2:	461a      	movle	r2, r3
 8018dc4:	2200      	movgt	r2, #0
 8018dc6:	4411      	add	r1, r2
 8018dc8:	920d      	str	r2, [sp, #52]	; 0x34
 8018dca:	9a08      	ldr	r2, [sp, #32]
 8018dcc:	4403      	add	r3, r0
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	bfa8      	it	ge
 8018dd2:	461a      	movge	r2, r3
 8018dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018dd6:	fb03 f301 	mul.w	r3, r3, r1
 8018dda:	9313      	str	r3, [sp, #76]	; 0x4c
 8018ddc:	2300      	movs	r3, #0
 8018dde:	4696      	mov	lr, r2
 8018de0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018de2:	461a      	mov	r2, r3
 8018de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018de6:	9c07      	ldr	r4, [sp, #28]
 8018de8:	fb02 f103 	mul.w	r1, r2, r3
 8018dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018dee:	441a      	add	r2, r3
 8018df0:	9b00      	ldr	r3, [sp, #0]
 8018df2:	fb08 3902 	mla	r9, r8, r2, r3
 8018df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018df8:	1a8b      	subs	r3, r1, r2
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	eba2 0101 	sub.w	r1, r2, r1
 8018e00:	bfd8      	it	le
 8018e02:	460f      	movle	r7, r1
 8018e04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018e06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018e08:	bfc8      	it	gt
 8018e0a:	2700      	movgt	r7, #0
 8018e0c:	189a      	adds	r2, r3, r2
 8018e0e:	1acb      	subs	r3, r1, r3
 8018e10:	429c      	cmp	r4, r3
 8018e12:	443a      	add	r2, r7
 8018e14:	bfa8      	it	ge
 8018e16:	461c      	movge	r4, r3
 8018e18:	f04f 0c00 	mov.w	ip, #0
 8018e1c:	fb08 f302 	mul.w	r3, r8, r2
 8018e20:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8018e24:	9310      	str	r3, [sp, #64]	; 0x40
 8018e26:	46e2      	mov	sl, ip
 8018e28:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8018e2a:	4576      	cmp	r6, lr
 8018e2c:	da58      	bge.n	8018ee0 <st_int8_maxpool+0x5b8>
 8018e2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018e30:	eb0a 0503 	add.w	r5, sl, r3
 8018e34:	9b01      	ldr	r3, [sp, #4]
 8018e36:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8018e3a:	441d      	add	r5, r3
 8018e3c:	42a7      	cmp	r7, r4
 8018e3e:	da0a      	bge.n	8018e56 <st_int8_maxpool+0x52e>
 8018e40:	462a      	mov	r2, r5
 8018e42:	463b      	mov	r3, r7
 8018e44:	f992 0000 	ldrsb.w	r0, [r2]
 8018e48:	3301      	adds	r3, #1
 8018e4a:	4281      	cmp	r1, r0
 8018e4c:	bfb8      	it	lt
 8018e4e:	4601      	movlt	r1, r0
 8018e50:	429c      	cmp	r4, r3
 8018e52:	4442      	add	r2, r8
 8018e54:	d1f6      	bne.n	8018e44 <st_int8_maxpool+0x51c>
 8018e56:	3601      	adds	r6, #1
 8018e58:	45b6      	cmp	lr, r6
 8018e5a:	445d      	add	r5, fp
 8018e5c:	d1ee      	bne.n	8018e3c <st_int8_maxpool+0x514>
 8018e5e:	eeb4 0a60 	vcmp.f32	s0, s1
 8018e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e66:	d103      	bne.n	8018e70 <st_int8_maxpool+0x548>
 8018e68:	9b04      	ldr	r3, [sp, #16]
 8018e6a:	9a02      	ldr	r2, [sp, #8]
 8018e6c:	4293      	cmp	r3, r2
 8018e6e:	d034      	beq.n	8018eda <st_int8_maxpool+0x5b2>
 8018e70:	9b04      	ldr	r3, [sp, #16]
 8018e72:	1ac9      	subs	r1, r1, r3
 8018e74:	ee07 1a90 	vmov	s15, r1
 8018e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e7c:	eeb0 7a65 	vmov.f32	s14, s11
 8018e80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018e84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e8c:	bfb4      	ite	lt
 8018e8e:	eef0 7a46 	vmovlt.f32	s15, s12
 8018e92:	eef0 7a45 	vmovge.f32	s15, s10
 8018e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e9e:	ee17 3a90 	vmov	r3, s15
 8018ea2:	f303 0307 	ssat	r3, #8, r3
 8018ea6:	f809 300a 	strb.w	r3, [r9, sl]
 8018eaa:	f10c 0c01 	add.w	ip, ip, #1
 8018eae:	fa0f fc8c 	sxth.w	ip, ip
 8018eb2:	45c4      	cmp	ip, r8
 8018eb4:	46e2      	mov	sl, ip
 8018eb6:	dbb7      	blt.n	8018e28 <st_int8_maxpool+0x500>
 8018eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018eba:	9903      	ldr	r1, [sp, #12]
 8018ebc:	3301      	adds	r3, #1
 8018ebe:	b21b      	sxth	r3, r3
 8018ec0:	428b      	cmp	r3, r1
 8018ec2:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ec4:	461a      	mov	r2, r3
 8018ec6:	db8d      	blt.n	8018de4 <st_int8_maxpool+0x4bc>
 8018ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018eca:	9905      	ldr	r1, [sp, #20]
 8018ecc:	3301      	adds	r3, #1
 8018ece:	b21b      	sxth	r3, r3
 8018ed0:	428b      	cmp	r3, r1
 8018ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8018ed4:	f6ff af67 	blt.w	8018da6 <st_int8_maxpool+0x47e>
 8018ed8:	e5f7      	b.n	8018aca <st_int8_maxpool+0x1a2>
 8018eda:	f809 100a 	strb.w	r1, [r9, sl]
 8018ede:	e7e4      	b.n	8018eaa <st_int8_maxpool+0x582>
 8018ee0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8018ee4:	e7bb      	b.n	8018e5e <st_int8_maxpool+0x536>
 8018ee6:	bf00      	nop

08018ee8 <arm_fill_q15>:
 8018ee8:	b510      	push	{r4, lr}
 8018eea:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 8018eee:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8018ef2:	d013      	beq.n	8018f1c <arm_fill_q15+0x34>
 8018ef4:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8018ef8:	2b09      	cmp	r3, #9
 8018efa:	460b      	mov	r3, r1
 8018efc:	d919      	bls.n	8018f32 <arm_fill_q15+0x4a>
 8018efe:	f011 0f07 	tst.w	r1, #7
 8018f02:	d116      	bne.n	8018f32 <arm_fill_q15+0x4a>
 8018f04:	f04f 0c00 	mov.w	ip, #0
 8018f08:	f10c 0c01 	add.w	ip, ip, #1
 8018f0c:	45e6      	cmp	lr, ip
 8018f0e:	e9c3 4400 	strd	r4, r4, [r3]
 8018f12:	f103 0308 	add.w	r3, r3, #8
 8018f16:	d1f7      	bne.n	8018f08 <arm_fill_q15+0x20>
 8018f18:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8018f1c:	f012 0203 	ands.w	r2, r2, #3
 8018f20:	d006      	beq.n	8018f30 <arm_fill_q15+0x48>
 8018f22:	3a01      	subs	r2, #1
 8018f24:	8008      	strh	r0, [r1, #0]
 8018f26:	d003      	beq.n	8018f30 <arm_fill_q15+0x48>
 8018f28:	2a01      	cmp	r2, #1
 8018f2a:	8048      	strh	r0, [r1, #2]
 8018f2c:	bf18      	it	ne
 8018f2e:	8088      	strhne	r0, [r1, #4]
 8018f30:	bd10      	pop	{r4, pc}
 8018f32:	46f4      	mov	ip, lr
 8018f34:	f1bc 0c01 	subs.w	ip, ip, #1
 8018f38:	601c      	str	r4, [r3, #0]
 8018f3a:	605c      	str	r4, [r3, #4]
 8018f3c:	f103 0308 	add.w	r3, r3, #8
 8018f40:	d1f8      	bne.n	8018f34 <arm_fill_q15+0x4c>
 8018f42:	e7e9      	b.n	8018f18 <arm_fill_q15+0x30>

08018f44 <arm_float_to_q15>:
 8018f44:	b530      	push	{r4, r5, lr}
 8018f46:	0895      	lsrs	r5, r2, #2
 8018f48:	d072      	beq.n	8019030 <arm_float_to_q15+0xec>
 8018f4a:	eddf 5a60 	vldr	s11, [pc, #384]	; 80190cc <arm_float_to_q15+0x188>
 8018f4e:	f100 0c10 	add.w	ip, r0, #16
 8018f52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018f56:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 8018f5a:	f101 0e08 	add.w	lr, r1, #8
 8018f5e:	462c      	mov	r4, r5
 8018f60:	ed5c 7a04 	vldr	s15, [ip, #-16]
 8018f64:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8018f68:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f70:	bfd4      	ite	le
 8018f72:	eef0 7a45 	vmovle.f32	s15, s10
 8018f76:	eef0 7a47 	vmovgt.f32	s15, s14
 8018f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f82:	ee17 3a90 	vmov	r3, s15
 8018f86:	f303 030f 	ssat	r3, #16, r3
 8018f8a:	f82e 3c08 	strh.w	r3, [lr, #-8]
 8018f8e:	ed5c 7a03 	vldr	s15, [ip, #-12]
 8018f92:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8018f96:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9e:	bfd4      	ite	le
 8018fa0:	eef0 7a45 	vmovle.f32	s15, s10
 8018fa4:	eef0 7a47 	vmovgt.f32	s15, s14
 8018fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fb0:	ee17 3a90 	vmov	r3, s15
 8018fb4:	f303 030f 	ssat	r3, #16, r3
 8018fb8:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8018fbc:	ed5c 7a02 	vldr	s15, [ip, #-8]
 8018fc0:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8018fc4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fcc:	bfd4      	ite	le
 8018fce:	eef0 7a45 	vmovle.f32	s15, s10
 8018fd2:	eef0 7a47 	vmovgt.f32	s15, s14
 8018fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fde:	ee17 3a90 	vmov	r3, s15
 8018fe2:	f303 030f 	ssat	r3, #16, r3
 8018fe6:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8018fea:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8018fee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018ff2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018ff6:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8018ffa:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018ffe:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8019002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801900a:	bfcc      	ite	gt
 801900c:	ee16 3a90 	vmovgt	r3, s13
 8019010:	ee16 3a10 	vmovle	r3, s12
 8019014:	f303 030f 	ssat	r3, #16, r3
 8019018:	3c01      	subs	r4, #1
 801901a:	f82e 3c02 	strh.w	r3, [lr, #-2]
 801901e:	f10c 0c10 	add.w	ip, ip, #16
 8019022:	f10e 0e08 	add.w	lr, lr, #8
 8019026:	d19b      	bne.n	8018f60 <arm_float_to_q15+0x1c>
 8019028:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801902c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019030:	f012 0203 	ands.w	r2, r2, #3
 8019034:	d049      	beq.n	80190ca <arm_float_to_q15+0x186>
 8019036:	edd0 7a00 	vldr	s15, [r0]
 801903a:	eddf 5a24 	vldr	s11, [pc, #144]	; 80190cc <arm_float_to_q15+0x188>
 801903e:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8019042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019046:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801904a:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019052:	bfd4      	ite	le
 8019054:	eef0 7a46 	vmovle.f32	s15, s12
 8019058:	eef0 7a47 	vmovgt.f32	s15, s14
 801905c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019064:	ee17 3a90 	vmov	r3, s15
 8019068:	f303 030f 	ssat	r3, #16, r3
 801906c:	3a01      	subs	r2, #1
 801906e:	800b      	strh	r3, [r1, #0]
 8019070:	d02b      	beq.n	80190ca <arm_float_to_q15+0x186>
 8019072:	edd0 7a01 	vldr	s15, [r0, #4]
 8019076:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801907a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019082:	bfd4      	ite	le
 8019084:	eef0 6a46 	vmovle.f32	s13, s12
 8019088:	eef0 6a47 	vmovgt.f32	s13, s14
 801908c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019094:	ee17 3a90 	vmov	r3, s15
 8019098:	f303 030f 	ssat	r3, #16, r3
 801909c:	2a01      	cmp	r2, #1
 801909e:	804b      	strh	r3, [r1, #2]
 80190a0:	d013      	beq.n	80190ca <arm_float_to_q15+0x186>
 80190a2:	edd0 7a02 	vldr	s15, [r0, #8]
 80190a6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80190aa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80190ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190b2:	bfd8      	it	le
 80190b4:	eeb0 7a46 	vmovle.f32	s14, s12
 80190b8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80190bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80190c0:	ee17 3a10 	vmov	r3, s14
 80190c4:	f303 030f 	ssat	r3, #16, r3
 80190c8:	808b      	strh	r3, [r1, #4]
 80190ca:	bd30      	pop	{r4, r5, pc}
 80190cc:	47000000 	.word	0x47000000

080190d0 <arm_float_to_q7>:
 80190d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190d2:	0895      	lsrs	r5, r2, #2
 80190d4:	d078      	beq.n	80191c8 <arm_float_to_q7+0xf8>
 80190d6:	f101 0c04 	add.w	ip, r1, #4
 80190da:	eddf 5a6b 	vldr	s11, [pc, #428]	; 8019288 <arm_float_to_q7+0x1b8>
 80190de:	f100 0e10 	add.w	lr, r0, #16
 80190e2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80190e6:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 80190ea:	00ae      	lsls	r6, r5, #2
 80190ec:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 80190f0:	ed5e 7a04 	vldr	s15, [lr, #-16]
 80190f4:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80190f8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80190fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019100:	bfd4      	ite	le
 8019102:	eef0 7a45 	vmovle.f32	s15, s10
 8019106:	eef0 7a46 	vmovgt.f32	s15, s12
 801910a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801910e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019112:	ee17 3a90 	vmov	r3, s15
 8019116:	b21b      	sxth	r3, r3
 8019118:	f303 0307 	ssat	r3, #8, r3
 801911c:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8019120:	ed5e 7a03 	vldr	s15, [lr, #-12]
 8019124:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8019128:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801912c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019130:	bfd4      	ite	le
 8019132:	eef0 7a45 	vmovle.f32	s15, s10
 8019136:	eef0 7a46 	vmovgt.f32	s15, s12
 801913a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801913e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019142:	ee17 3a90 	vmov	r3, s15
 8019146:	b21b      	sxth	r3, r3
 8019148:	f303 0307 	ssat	r3, #8, r3
 801914c:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8019150:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8019154:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8019158:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801915c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019160:	bfd4      	ite	le
 8019162:	eef0 7a45 	vmovle.f32	s15, s10
 8019166:	eef0 7a46 	vmovgt.f32	s15, s12
 801916a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801916e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019172:	ee17 3a90 	vmov	r3, s15
 8019176:	b21b      	sxth	r3, r3
 8019178:	f303 0307 	ssat	r3, #8, r3
 801917c:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8019180:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8019184:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8019188:	ee76 7a86 	vadd.f32	s15, s13, s12
 801918c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8019190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019194:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019198:	ee17 3a90 	vmov	r3, s15
 801919c:	ee17 7a10 	vmov	r7, s14
 80191a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80191a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191a8:	b21b      	sxth	r3, r3
 80191aa:	b23f      	sxth	r7, r7
 80191ac:	dd5f      	ble.n	801926e <arm_float_to_q7+0x19e>
 80191ae:	f303 0307 	ssat	r3, #8, r3
 80191b2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80191b6:	f10c 0c04 	add.w	ip, ip, #4
 80191ba:	4564      	cmp	r4, ip
 80191bc:	f10e 0e10 	add.w	lr, lr, #16
 80191c0:	d196      	bne.n	80190f0 <arm_float_to_q7+0x20>
 80191c2:	4431      	add	r1, r6
 80191c4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80191c8:	f012 0203 	ands.w	r2, r2, #3
 80191cc:	d04e      	beq.n	801926c <arm_float_to_q7+0x19c>
 80191ce:	edd0 7a00 	vldr	s15, [r0]
 80191d2:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8019288 <arm_float_to_q7+0x1b8>
 80191d6:	ee67 6a85 	vmul.f32	s13, s15, s10
 80191da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80191de:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80191e2:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80191e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ea:	bfd4      	ite	le
 80191ec:	eef0 7a65 	vmovle.f32	s15, s11
 80191f0:	eef0 7a47 	vmovgt.f32	s15, s14
 80191f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80191f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191fc:	ee17 3a90 	vmov	r3, s15
 8019200:	b21b      	sxth	r3, r3
 8019202:	f303 0307 	ssat	r3, #8, r3
 8019206:	3a01      	subs	r2, #1
 8019208:	700b      	strb	r3, [r1, #0]
 801920a:	d02f      	beq.n	801926c <arm_float_to_q7+0x19c>
 801920c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019210:	ee26 6a85 	vmul.f32	s12, s13, s10
 8019214:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8019218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801921c:	bfd4      	ite	le
 801921e:	eef0 6a65 	vmovle.f32	s13, s11
 8019222:	eef0 6a47 	vmovgt.f32	s13, s14
 8019226:	ee76 6a86 	vadd.f32	s13, s13, s12
 801922a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801922e:	ee16 3a90 	vmov	r3, s13
 8019232:	b21b      	sxth	r3, r3
 8019234:	f303 0307 	ssat	r3, #8, r3
 8019238:	2a01      	cmp	r2, #1
 801923a:	704b      	strb	r3, [r1, #1]
 801923c:	d016      	beq.n	801926c <arm_float_to_q7+0x19c>
 801923e:	edd0 7a02 	vldr	s15, [r0, #8]
 8019242:	ee27 5a85 	vmul.f32	s10, s15, s10
 8019246:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801924e:	bfd4      	ite	le
 8019250:	eef0 7a65 	vmovle.f32	s15, s11
 8019254:	eef0 7a47 	vmovgt.f32	s15, s14
 8019258:	ee77 7a85 	vadd.f32	s15, s15, s10
 801925c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019260:	ee17 3a90 	vmov	r3, s15
 8019264:	b21b      	sxth	r3, r3
 8019266:	f303 0307 	ssat	r3, #8, r3
 801926a:	708b      	strb	r3, [r1, #2]
 801926c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801926e:	f307 0707 	ssat	r7, #8, r7
 8019272:	f80c 7c01 	strb.w	r7, [ip, #-1]
 8019276:	f10c 0c04 	add.w	ip, ip, #4
 801927a:	45a4      	cmp	ip, r4
 801927c:	f10e 0e10 	add.w	lr, lr, #16
 8019280:	f47f af36 	bne.w	80190f0 <arm_float_to_q7+0x20>
 8019284:	e79d      	b.n	80191c2 <arm_float_to_q7+0xf2>
 8019286:	bf00      	nop
 8019288:	43000000 	.word	0x43000000

0801928c <arm_q15_to_float>:
 801928c:	b530      	push	{r4, r5, lr}
 801928e:	0894      	lsrs	r4, r2, #2
 8019290:	d038      	beq.n	8019304 <arm_q15_to_float+0x78>
 8019292:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019354 <arm_q15_to_float+0xc8>
 8019296:	f100 0c08 	add.w	ip, r0, #8
 801929a:	f101 0310 	add.w	r3, r1, #16
 801929e:	46a6      	mov	lr, r4
 80192a0:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 80192a4:	ee07 5a90 	vmov	s15, r5
 80192a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192ac:	3310      	adds	r3, #16
 80192ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192b2:	f10c 0c08 	add.w	ip, ip, #8
 80192b6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80192ba:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 80192be:	ee07 5a90 	vmov	s15, r5
 80192c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192c6:	f1be 0e01 	subs.w	lr, lr, #1
 80192ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192ce:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80192d2:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 80192d6:	ee07 5a90 	vmov	s15, r5
 80192da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192e2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80192e6:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 80192ea:	ee07 5a90 	vmov	s15, r5
 80192ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192f6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80192fa:	d1d1      	bne.n	80192a0 <arm_q15_to_float+0x14>
 80192fc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8019300:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8019304:	f012 0203 	ands.w	r2, r2, #3
 8019308:	d023      	beq.n	8019352 <arm_q15_to_float+0xc6>
 801930a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801930e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8019354 <arm_q15_to_float+0xc8>
 8019312:	ee07 3a90 	vmov	s15, r3
 8019316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801931a:	3a01      	subs	r2, #1
 801931c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019320:	edc1 7a00 	vstr	s15, [r1]
 8019324:	d015      	beq.n	8019352 <arm_q15_to_float+0xc6>
 8019326:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801932a:	ee07 3a90 	vmov	s15, r3
 801932e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019332:	2a01      	cmp	r2, #1
 8019334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019338:	edc1 7a01 	vstr	s15, [r1, #4]
 801933c:	d009      	beq.n	8019352 <arm_q15_to_float+0xc6>
 801933e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019342:	ee07 3a90 	vmov	s15, r3
 8019346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801934a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801934e:	edc1 7a02 	vstr	s15, [r1, #8]
 8019352:	bd30      	pop	{r4, r5, pc}
 8019354:	38000000 	.word	0x38000000

08019358 <arm_q7_to_float>:
 8019358:	b530      	push	{r4, r5, lr}
 801935a:	0894      	lsrs	r4, r2, #2
 801935c:	d037      	beq.n	80193ce <arm_q7_to_float+0x76>
 801935e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019420 <arm_q7_to_float+0xc8>
 8019362:	1d03      	adds	r3, r0, #4
 8019364:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8019368:	f101 0010 	add.w	r0, r1, #16
 801936c:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 8019370:	ee07 ea90 	vmov	s15, lr
 8019374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019378:	469e      	mov	lr, r3
 801937a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801937e:	3304      	adds	r3, #4
 8019380:	ed40 7a04 	vstr	s15, [r0, #-16]
 8019384:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 8019388:	ee07 5a90 	vmov	s15, r5
 801938c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019390:	45e6      	cmp	lr, ip
 8019392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019396:	f100 0010 	add.w	r0, r0, #16
 801939a:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 801939e:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 80193a2:	ee07 5a90 	vmov	s15, r5
 80193a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80193ae:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 80193b2:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 80193b6:	ee07 5a90 	vmov	s15, r5
 80193ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80193c2:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 80193c6:	d1d1      	bne.n	801936c <arm_q7_to_float+0x14>
 80193c8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80193cc:	4660      	mov	r0, ip
 80193ce:	f012 0203 	ands.w	r2, r2, #3
 80193d2:	d023      	beq.n	801941c <arm_q7_to_float+0xc4>
 80193d4:	f990 3000 	ldrsb.w	r3, [r0]
 80193d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8019420 <arm_q7_to_float+0xc8>
 80193dc:	ee07 3a90 	vmov	s15, r3
 80193e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193e4:	3a01      	subs	r2, #1
 80193e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80193ea:	edc1 7a00 	vstr	s15, [r1]
 80193ee:	d015      	beq.n	801941c <arm_q7_to_float+0xc4>
 80193f0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80193f4:	ee07 3a90 	vmov	s15, r3
 80193f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193fc:	2a01      	cmp	r2, #1
 80193fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019402:	edc1 7a01 	vstr	s15, [r1, #4]
 8019406:	d009      	beq.n	801941c <arm_q7_to_float+0xc4>
 8019408:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801940c:	ee07 3a90 	vmov	s15, r3
 8019410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019418:	edc1 7a02 	vstr	s15, [r1, #8]
 801941c:	bd30      	pop	{r4, r5, pc}
 801941e:	bf00      	nop
 8019420:	3c000000 	.word	0x3c000000

08019424 <ai_version_get>:
 8019424:	0212      	lsls	r2, r2, #8
 8019426:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801942a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801942e:	4770      	bx	lr

08019430 <ai_platform_version_get>:
 8019430:	0e02      	lsrs	r2, r0, #24
 8019432:	2300      	movs	r3, #0
 8019434:	f362 0307 	bfi	r3, r2, #0, #8
 8019438:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801943c:	f362 230f 	bfi	r3, r2, #8, #8
 8019440:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019444:	f360 4317 	bfi	r3, r0, #16, #8
 8019448:	b082      	sub	sp, #8
 801944a:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 801944e:	b002      	add	sp, #8
 8019450:	4770      	bx	lr
 8019452:	bf00      	nop

08019454 <get_tensor_byte_size>:
 8019454:	b410      	push	{r4}
 8019456:	6983      	ldr	r3, [r0, #24]
 8019458:	68c4      	ldr	r4, [r0, #12]
 801945a:	6941      	ldr	r1, [r0, #20]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	68e0      	ldr	r0, [r4, #12]
 8019460:	4a07      	ldr	r2, [pc, #28]	; (8019480 <get_tensor_byte_size+0x2c>)
 8019462:	68c9      	ldr	r1, [r1, #12]
 8019464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019468:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801946c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019470:	fb01 f000 	mul.w	r0, r1, r0
 8019474:	4293      	cmp	r3, r2
 8019476:	bf04      	itt	eq
 8019478:	3007      	addeq	r0, #7
 801947a:	08c0      	lsreq	r0, r0, #3
 801947c:	4770      	bx	lr
 801947e:	bf00      	nop
 8019480:	000400c0 	.word	0x000400c0

08019484 <ai_array_to_buffer_fmt>:
 8019484:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8019488:	2b02      	cmp	r3, #2
 801948a:	d050      	beq.n	801952e <ai_array_to_buffer_fmt+0xaa>
 801948c:	4b2a      	ldr	r3, [pc, #168]	; (8019538 <ai_array_to_buffer_fmt+0xb4>)
 801948e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8019492:	429a      	cmp	r2, r3
 8019494:	d00b      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 8019496:	dc1c      	bgt.n	80194d2 <ai_array_to_buffer_fmt+0x4e>
 8019498:	4b28      	ldr	r3, [pc, #160]	; (801953c <ai_array_to_buffer_fmt+0xb8>)
 801949a:	429a      	cmp	r2, r3
 801949c:	d007      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 801949e:	dd0b      	ble.n	80194b8 <ai_array_to_buffer_fmt+0x34>
 80194a0:	4b27      	ldr	r3, [pc, #156]	; (8019540 <ai_array_to_buffer_fmt+0xbc>)
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d003      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 80194a6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d131      	bne.n	8019512 <ai_array_to_buffer_fmt+0x8e>
 80194ae:	4613      	mov	r3, r2
 80194b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80194b4:	4318      	orrs	r0, r3
 80194b6:	4770      	bx	lr
 80194b8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80194bc:	429a      	cmp	r2, r3
 80194be:	d0f6      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 80194c0:	dd2c      	ble.n	801951c <ai_array_to_buffer_fmt+0x98>
 80194c2:	4b20      	ldr	r3, [pc, #128]	; (8019544 <ai_array_to_buffer_fmt+0xc0>)
 80194c4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80194c8:	429a      	cmp	r2, r3
 80194ca:	bf18      	it	ne
 80194cc:	2340      	movne	r3, #64	; 0x40
 80194ce:	4318      	orrs	r0, r3
 80194d0:	4770      	bx	lr
 80194d2:	4b1d      	ldr	r3, [pc, #116]	; (8019548 <ai_array_to_buffer_fmt+0xc4>)
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d0ea      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 80194d8:	dd0e      	ble.n	80194f8 <ai_array_to_buffer_fmt+0x74>
 80194da:	4b1c      	ldr	r3, [pc, #112]	; (801954c <ai_array_to_buffer_fmt+0xc8>)
 80194dc:	429a      	cmp	r2, r3
 80194de:	d0e6      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 80194e0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d0e2      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 80194e8:	4b19      	ldr	r3, [pc, #100]	; (8019550 <ai_array_to_buffer_fmt+0xcc>)
 80194ea:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80194ee:	429a      	cmp	r2, r3
 80194f0:	bf18      	it	ne
 80194f2:	2340      	movne	r3, #64	; 0x40
 80194f4:	4318      	orrs	r0, r3
 80194f6:	4770      	bx	lr
 80194f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80194fc:	429a      	cmp	r2, r3
 80194fe:	d0d6      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 8019500:	3307      	adds	r3, #7
 8019502:	429a      	cmp	r2, r3
 8019504:	d0d3      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 8019506:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801950a:	429a      	cmp	r2, r3
 801950c:	bf18      	it	ne
 801950e:	2340      	movne	r3, #64	; 0x40
 8019510:	e7ce      	b.n	80194b0 <ai_array_to_buffer_fmt+0x2c>
 8019512:	4b10      	ldr	r3, [pc, #64]	; (8019554 <ai_array_to_buffer_fmt+0xd0>)
 8019514:	429a      	cmp	r2, r3
 8019516:	bf18      	it	ne
 8019518:	2340      	movne	r3, #64	; 0x40
 801951a:	e7c9      	b.n	80194b0 <ai_array_to_buffer_fmt+0x2c>
 801951c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8019520:	429a      	cmp	r2, r3
 8019522:	d0c4      	beq.n	80194ae <ai_array_to_buffer_fmt+0x2a>
 8019524:	3380      	adds	r3, #128	; 0x80
 8019526:	429a      	cmp	r2, r3
 8019528:	bf18      	it	ne
 801952a:	2340      	movne	r3, #64	; 0x40
 801952c:	e7c0      	b.n	80194b0 <ai_array_to_buffer_fmt+0x2c>
 801952e:	4b0a      	ldr	r3, [pc, #40]	; (8019558 <ai_array_to_buffer_fmt+0xd4>)
 8019530:	4003      	ands	r3, r0
 8019532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019536:	e7bb      	b.n	80194b0 <ai_array_to_buffer_fmt+0x2c>
 8019538:	00840040 	.word	0x00840040
 801953c:	00040840 	.word	0x00040840
 8019540:	00041040 	.word	0x00041040
 8019544:	00040447 	.word	0x00040447
 8019548:	00840840 	.word	0x00840840
 801954c:	00841040 	.word	0x00841040
 8019550:	0084084f 	.word	0x0084084f
 8019554:	0004084f 	.word	0x0004084f
 8019558:	00803fff 	.word	0x00803fff

0801955c <ai_array_get_byte_size>:
 801955c:	b319      	cbz	r1, 80195a6 <ai_array_get_byte_size+0x4a>
 801955e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8019562:	fb03 f101 	mul.w	r1, r3, r1
 8019566:	3107      	adds	r1, #7
 8019568:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801956c:	f021 0307 	bic.w	r3, r1, #7
 8019570:	2a04      	cmp	r2, #4
 8019572:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8019576:	fa23 f101 	lsr.w	r1, r3, r1
 801957a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801957e:	d00b      	beq.n	8019598 <ai_array_get_byte_size+0x3c>
 8019580:	2a08      	cmp	r2, #8
 8019582:	d002      	beq.n	801958a <ai_array_get_byte_size+0x2e>
 8019584:	3107      	adds	r1, #7
 8019586:	08c8      	lsrs	r0, r1, #3
 8019588:	4770      	bx	lr
 801958a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801958e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8019592:	3107      	adds	r1, #7
 8019594:	08c8      	lsrs	r0, r1, #3
 8019596:	4770      	bx	lr
 8019598:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801959c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80195a0:	3107      	adds	r1, #7
 80195a2:	08c8      	lsrs	r0, r1, #3
 80195a4:	4770      	bx	lr
 80195a6:	4608      	mov	r0, r1
 80195a8:	4770      	bx	lr
 80195aa:	bf00      	nop

080195ac <ai_array_get_data_byte_size>:
 80195ac:	b169      	cbz	r1, 80195ca <ai_array_get_data_byte_size+0x1e>
 80195ae:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80195b2:	fb02 f101 	mul.w	r1, r2, r1
 80195b6:	1dcb      	adds	r3, r1, #7
 80195b8:	f023 0307 	bic.w	r3, r3, #7
 80195bc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80195c0:	fa23 f000 	lsr.w	r0, r3, r0
 80195c4:	3007      	adds	r0, #7
 80195c6:	08c0      	lsrs	r0, r0, #3
 80195c8:	4770      	bx	lr
 80195ca:	4608      	mov	r0, r1
 80195cc:	4770      	bx	lr
 80195ce:	bf00      	nop

080195d0 <core_tensor_clone>:
 80195d0:	680b      	ldr	r3, [r1, #0]
 80195d2:	6003      	str	r3, [r0, #0]
 80195d4:	684b      	ldr	r3, [r1, #4]
 80195d6:	6043      	str	r3, [r0, #4]
 80195d8:	698b      	ldr	r3, [r1, #24]
 80195da:	6183      	str	r3, [r0, #24]
 80195dc:	688b      	ldr	r3, [r1, #8]
 80195de:	6882      	ldr	r2, [r0, #8]
 80195e0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80195e4:	f363 221f 	bfi	r2, r3, #8, #24
 80195e8:	b410      	push	{r4}
 80195ea:	6082      	str	r2, [r0, #8]
 80195ec:	b15b      	cbz	r3, 8019606 <core_tensor_clone+0x36>
 80195ee:	2300      	movs	r3, #0
 80195f0:	68cc      	ldr	r4, [r1, #12]
 80195f2:	68c2      	ldr	r2, [r0, #12]
 80195f4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80195f8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80195fc:	6882      	ldr	r2, [r0, #8]
 80195fe:	3301      	adds	r3, #1
 8019600:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8019604:	d3f4      	bcc.n	80195f0 <core_tensor_clone+0x20>
 8019606:	690b      	ldr	r3, [r1, #16]
 8019608:	6902      	ldr	r2, [r0, #16]
 801960a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801960e:	f363 221f 	bfi	r2, r3, #8, #24
 8019612:	6102      	str	r2, [r0, #16]
 8019614:	b15b      	cbz	r3, 801962e <core_tensor_clone+0x5e>
 8019616:	2300      	movs	r3, #0
 8019618:	694c      	ldr	r4, [r1, #20]
 801961a:	6942      	ldr	r2, [r0, #20]
 801961c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8019620:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8019624:	6902      	ldr	r2, [r0, #16]
 8019626:	3301      	adds	r3, #1
 8019628:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 801962c:	d3f4      	bcc.n	8019618 <core_tensor_clone+0x48>
 801962e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019632:	4770      	bx	lr

08019634 <core_array_clone>:
 8019634:	4684      	mov	ip, r0
 8019636:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8019638:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801963c:	4770      	bx	lr
 801963e:	bf00      	nop

08019640 <calloc>:
 8019640:	4b02      	ldr	r3, [pc, #8]	; (801964c <calloc+0xc>)
 8019642:	460a      	mov	r2, r1
 8019644:	4601      	mov	r1, r0
 8019646:	6818      	ldr	r0, [r3, #0]
 8019648:	f000 b802 	b.w	8019650 <_calloc_r>
 801964c:	20000e40 	.word	0x20000e40

08019650 <_calloc_r>:
 8019650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019652:	fba1 2402 	umull	r2, r4, r1, r2
 8019656:	b94c      	cbnz	r4, 801966c <_calloc_r+0x1c>
 8019658:	4611      	mov	r1, r2
 801965a:	9201      	str	r2, [sp, #4]
 801965c:	f000 f83e 	bl	80196dc <_malloc_r>
 8019660:	9a01      	ldr	r2, [sp, #4]
 8019662:	4605      	mov	r5, r0
 8019664:	b930      	cbnz	r0, 8019674 <_calloc_r+0x24>
 8019666:	4628      	mov	r0, r5
 8019668:	b003      	add	sp, #12
 801966a:	bd30      	pop	{r4, r5, pc}
 801966c:	220c      	movs	r2, #12
 801966e:	6002      	str	r2, [r0, #0]
 8019670:	2500      	movs	r5, #0
 8019672:	e7f8      	b.n	8019666 <_calloc_r+0x16>
 8019674:	4621      	mov	r1, r4
 8019676:	f002 f85b 	bl	801b730 <memset>
 801967a:	e7f4      	b.n	8019666 <_calloc_r+0x16>

0801967c <malloc>:
 801967c:	4b02      	ldr	r3, [pc, #8]	; (8019688 <malloc+0xc>)
 801967e:	4601      	mov	r1, r0
 8019680:	6818      	ldr	r0, [r3, #0]
 8019682:	f000 b82b 	b.w	80196dc <_malloc_r>
 8019686:	bf00      	nop
 8019688:	20000e40 	.word	0x20000e40

0801968c <free>:
 801968c:	4b02      	ldr	r3, [pc, #8]	; (8019698 <free+0xc>)
 801968e:	4601      	mov	r1, r0
 8019690:	6818      	ldr	r0, [r3, #0]
 8019692:	f002 bfbb 	b.w	801c60c <_free_r>
 8019696:	bf00      	nop
 8019698:	20000e40 	.word	0x20000e40

0801969c <sbrk_aligned>:
 801969c:	b570      	push	{r4, r5, r6, lr}
 801969e:	4e0e      	ldr	r6, [pc, #56]	; (80196d8 <sbrk_aligned+0x3c>)
 80196a0:	460c      	mov	r4, r1
 80196a2:	6831      	ldr	r1, [r6, #0]
 80196a4:	4605      	mov	r5, r0
 80196a6:	b911      	cbnz	r1, 80196ae <sbrk_aligned+0x12>
 80196a8:	f002 f8a2 	bl	801b7f0 <_sbrk_r>
 80196ac:	6030      	str	r0, [r6, #0]
 80196ae:	4621      	mov	r1, r4
 80196b0:	4628      	mov	r0, r5
 80196b2:	f002 f89d 	bl	801b7f0 <_sbrk_r>
 80196b6:	1c43      	adds	r3, r0, #1
 80196b8:	d00a      	beq.n	80196d0 <sbrk_aligned+0x34>
 80196ba:	1cc4      	adds	r4, r0, #3
 80196bc:	f024 0403 	bic.w	r4, r4, #3
 80196c0:	42a0      	cmp	r0, r4
 80196c2:	d007      	beq.n	80196d4 <sbrk_aligned+0x38>
 80196c4:	1a21      	subs	r1, r4, r0
 80196c6:	4628      	mov	r0, r5
 80196c8:	f002 f892 	bl	801b7f0 <_sbrk_r>
 80196cc:	3001      	adds	r0, #1
 80196ce:	d101      	bne.n	80196d4 <sbrk_aligned+0x38>
 80196d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80196d4:	4620      	mov	r0, r4
 80196d6:	bd70      	pop	{r4, r5, r6, pc}
 80196d8:	20002d0c 	.word	0x20002d0c

080196dc <_malloc_r>:
 80196dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196e0:	1ccd      	adds	r5, r1, #3
 80196e2:	f025 0503 	bic.w	r5, r5, #3
 80196e6:	3508      	adds	r5, #8
 80196e8:	2d0c      	cmp	r5, #12
 80196ea:	bf38      	it	cc
 80196ec:	250c      	movcc	r5, #12
 80196ee:	2d00      	cmp	r5, #0
 80196f0:	4607      	mov	r7, r0
 80196f2:	db01      	blt.n	80196f8 <_malloc_r+0x1c>
 80196f4:	42a9      	cmp	r1, r5
 80196f6:	d905      	bls.n	8019704 <_malloc_r+0x28>
 80196f8:	230c      	movs	r3, #12
 80196fa:	603b      	str	r3, [r7, #0]
 80196fc:	2600      	movs	r6, #0
 80196fe:	4630      	mov	r0, r6
 8019700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80197d8 <_malloc_r+0xfc>
 8019708:	f000 f868 	bl	80197dc <__malloc_lock>
 801970c:	f8d8 3000 	ldr.w	r3, [r8]
 8019710:	461c      	mov	r4, r3
 8019712:	bb5c      	cbnz	r4, 801976c <_malloc_r+0x90>
 8019714:	4629      	mov	r1, r5
 8019716:	4638      	mov	r0, r7
 8019718:	f7ff ffc0 	bl	801969c <sbrk_aligned>
 801971c:	1c43      	adds	r3, r0, #1
 801971e:	4604      	mov	r4, r0
 8019720:	d155      	bne.n	80197ce <_malloc_r+0xf2>
 8019722:	f8d8 4000 	ldr.w	r4, [r8]
 8019726:	4626      	mov	r6, r4
 8019728:	2e00      	cmp	r6, #0
 801972a:	d145      	bne.n	80197b8 <_malloc_r+0xdc>
 801972c:	2c00      	cmp	r4, #0
 801972e:	d048      	beq.n	80197c2 <_malloc_r+0xe6>
 8019730:	6823      	ldr	r3, [r4, #0]
 8019732:	4631      	mov	r1, r6
 8019734:	4638      	mov	r0, r7
 8019736:	eb04 0903 	add.w	r9, r4, r3
 801973a:	f002 f859 	bl	801b7f0 <_sbrk_r>
 801973e:	4581      	cmp	r9, r0
 8019740:	d13f      	bne.n	80197c2 <_malloc_r+0xe6>
 8019742:	6821      	ldr	r1, [r4, #0]
 8019744:	1a6d      	subs	r5, r5, r1
 8019746:	4629      	mov	r1, r5
 8019748:	4638      	mov	r0, r7
 801974a:	f7ff ffa7 	bl	801969c <sbrk_aligned>
 801974e:	3001      	adds	r0, #1
 8019750:	d037      	beq.n	80197c2 <_malloc_r+0xe6>
 8019752:	6823      	ldr	r3, [r4, #0]
 8019754:	442b      	add	r3, r5
 8019756:	6023      	str	r3, [r4, #0]
 8019758:	f8d8 3000 	ldr.w	r3, [r8]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d038      	beq.n	80197d2 <_malloc_r+0xf6>
 8019760:	685a      	ldr	r2, [r3, #4]
 8019762:	42a2      	cmp	r2, r4
 8019764:	d12b      	bne.n	80197be <_malloc_r+0xe2>
 8019766:	2200      	movs	r2, #0
 8019768:	605a      	str	r2, [r3, #4]
 801976a:	e00f      	b.n	801978c <_malloc_r+0xb0>
 801976c:	6822      	ldr	r2, [r4, #0]
 801976e:	1b52      	subs	r2, r2, r5
 8019770:	d41f      	bmi.n	80197b2 <_malloc_r+0xd6>
 8019772:	2a0b      	cmp	r2, #11
 8019774:	d917      	bls.n	80197a6 <_malloc_r+0xca>
 8019776:	1961      	adds	r1, r4, r5
 8019778:	42a3      	cmp	r3, r4
 801977a:	6025      	str	r5, [r4, #0]
 801977c:	bf18      	it	ne
 801977e:	6059      	strne	r1, [r3, #4]
 8019780:	6863      	ldr	r3, [r4, #4]
 8019782:	bf08      	it	eq
 8019784:	f8c8 1000 	streq.w	r1, [r8]
 8019788:	5162      	str	r2, [r4, r5]
 801978a:	604b      	str	r3, [r1, #4]
 801978c:	4638      	mov	r0, r7
 801978e:	f104 060b 	add.w	r6, r4, #11
 8019792:	f000 f829 	bl	80197e8 <__malloc_unlock>
 8019796:	f026 0607 	bic.w	r6, r6, #7
 801979a:	1d23      	adds	r3, r4, #4
 801979c:	1af2      	subs	r2, r6, r3
 801979e:	d0ae      	beq.n	80196fe <_malloc_r+0x22>
 80197a0:	1b9b      	subs	r3, r3, r6
 80197a2:	50a3      	str	r3, [r4, r2]
 80197a4:	e7ab      	b.n	80196fe <_malloc_r+0x22>
 80197a6:	42a3      	cmp	r3, r4
 80197a8:	6862      	ldr	r2, [r4, #4]
 80197aa:	d1dd      	bne.n	8019768 <_malloc_r+0x8c>
 80197ac:	f8c8 2000 	str.w	r2, [r8]
 80197b0:	e7ec      	b.n	801978c <_malloc_r+0xb0>
 80197b2:	4623      	mov	r3, r4
 80197b4:	6864      	ldr	r4, [r4, #4]
 80197b6:	e7ac      	b.n	8019712 <_malloc_r+0x36>
 80197b8:	4634      	mov	r4, r6
 80197ba:	6876      	ldr	r6, [r6, #4]
 80197bc:	e7b4      	b.n	8019728 <_malloc_r+0x4c>
 80197be:	4613      	mov	r3, r2
 80197c0:	e7cc      	b.n	801975c <_malloc_r+0x80>
 80197c2:	230c      	movs	r3, #12
 80197c4:	603b      	str	r3, [r7, #0]
 80197c6:	4638      	mov	r0, r7
 80197c8:	f000 f80e 	bl	80197e8 <__malloc_unlock>
 80197cc:	e797      	b.n	80196fe <_malloc_r+0x22>
 80197ce:	6025      	str	r5, [r4, #0]
 80197d0:	e7dc      	b.n	801978c <_malloc_r+0xb0>
 80197d2:	605b      	str	r3, [r3, #4]
 80197d4:	deff      	udf	#255	; 0xff
 80197d6:	bf00      	nop
 80197d8:	20002d08 	.word	0x20002d08

080197dc <__malloc_lock>:
 80197dc:	4801      	ldr	r0, [pc, #4]	; (80197e4 <__malloc_lock+0x8>)
 80197de:	f002 b854 	b.w	801b88a <__retarget_lock_acquire_recursive>
 80197e2:	bf00      	nop
 80197e4:	20002e50 	.word	0x20002e50

080197e8 <__malloc_unlock>:
 80197e8:	4801      	ldr	r0, [pc, #4]	; (80197f0 <__malloc_unlock+0x8>)
 80197ea:	f002 b84f 	b.w	801b88c <__retarget_lock_release_recursive>
 80197ee:	bf00      	nop
 80197f0:	20002e50 	.word	0x20002e50

080197f4 <rand>:
 80197f4:	4b16      	ldr	r3, [pc, #88]	; (8019850 <rand+0x5c>)
 80197f6:	b510      	push	{r4, lr}
 80197f8:	681c      	ldr	r4, [r3, #0]
 80197fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80197fc:	b9b3      	cbnz	r3, 801982c <rand+0x38>
 80197fe:	2018      	movs	r0, #24
 8019800:	f7ff ff3c 	bl	801967c <malloc>
 8019804:	4602      	mov	r2, r0
 8019806:	6320      	str	r0, [r4, #48]	; 0x30
 8019808:	b920      	cbnz	r0, 8019814 <rand+0x20>
 801980a:	4b12      	ldr	r3, [pc, #72]	; (8019854 <rand+0x60>)
 801980c:	4812      	ldr	r0, [pc, #72]	; (8019858 <rand+0x64>)
 801980e:	2152      	movs	r1, #82	; 0x52
 8019810:	f002 f864 	bl	801b8dc <__assert_func>
 8019814:	4911      	ldr	r1, [pc, #68]	; (801985c <rand+0x68>)
 8019816:	4b12      	ldr	r3, [pc, #72]	; (8019860 <rand+0x6c>)
 8019818:	e9c0 1300 	strd	r1, r3, [r0]
 801981c:	4b11      	ldr	r3, [pc, #68]	; (8019864 <rand+0x70>)
 801981e:	6083      	str	r3, [r0, #8]
 8019820:	230b      	movs	r3, #11
 8019822:	8183      	strh	r3, [r0, #12]
 8019824:	2100      	movs	r1, #0
 8019826:	2001      	movs	r0, #1
 8019828:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801982c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801982e:	480e      	ldr	r0, [pc, #56]	; (8019868 <rand+0x74>)
 8019830:	690b      	ldr	r3, [r1, #16]
 8019832:	694c      	ldr	r4, [r1, #20]
 8019834:	4a0d      	ldr	r2, [pc, #52]	; (801986c <rand+0x78>)
 8019836:	4358      	muls	r0, r3
 8019838:	fb02 0004 	mla	r0, r2, r4, r0
 801983c:	fba3 3202 	umull	r3, r2, r3, r2
 8019840:	3301      	adds	r3, #1
 8019842:	eb40 0002 	adc.w	r0, r0, r2
 8019846:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801984a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801984e:	bd10      	pop	{r4, pc}
 8019850:	20000e40 	.word	0x20000e40
 8019854:	08022c28 	.word	0x08022c28
 8019858:	08022c3f 	.word	0x08022c3f
 801985c:	abcd330e 	.word	0xabcd330e
 8019860:	e66d1234 	.word	0xe66d1234
 8019864:	0005deec 	.word	0x0005deec
 8019868:	5851f42d 	.word	0x5851f42d
 801986c:	4c957f2d 	.word	0x4c957f2d

08019870 <_realloc_r>:
 8019870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019874:	4680      	mov	r8, r0
 8019876:	4614      	mov	r4, r2
 8019878:	460e      	mov	r6, r1
 801987a:	b921      	cbnz	r1, 8019886 <_realloc_r+0x16>
 801987c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019880:	4611      	mov	r1, r2
 8019882:	f7ff bf2b 	b.w	80196dc <_malloc_r>
 8019886:	b92a      	cbnz	r2, 8019894 <_realloc_r+0x24>
 8019888:	f002 fec0 	bl	801c60c <_free_r>
 801988c:	4625      	mov	r5, r4
 801988e:	4628      	mov	r0, r5
 8019890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019894:	f003 ff1d 	bl	801d6d2 <_malloc_usable_size_r>
 8019898:	4284      	cmp	r4, r0
 801989a:	4607      	mov	r7, r0
 801989c:	d802      	bhi.n	80198a4 <_realloc_r+0x34>
 801989e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80198a2:	d812      	bhi.n	80198ca <_realloc_r+0x5a>
 80198a4:	4621      	mov	r1, r4
 80198a6:	4640      	mov	r0, r8
 80198a8:	f7ff ff18 	bl	80196dc <_malloc_r>
 80198ac:	4605      	mov	r5, r0
 80198ae:	2800      	cmp	r0, #0
 80198b0:	d0ed      	beq.n	801988e <_realloc_r+0x1e>
 80198b2:	42bc      	cmp	r4, r7
 80198b4:	4622      	mov	r2, r4
 80198b6:	4631      	mov	r1, r6
 80198b8:	bf28      	it	cs
 80198ba:	463a      	movcs	r2, r7
 80198bc:	f001 ffef 	bl	801b89e <memcpy>
 80198c0:	4631      	mov	r1, r6
 80198c2:	4640      	mov	r0, r8
 80198c4:	f002 fea2 	bl	801c60c <_free_r>
 80198c8:	e7e1      	b.n	801988e <_realloc_r+0x1e>
 80198ca:	4635      	mov	r5, r6
 80198cc:	e7df      	b.n	801988e <_realloc_r+0x1e>

080198ce <sulp>:
 80198ce:	b570      	push	{r4, r5, r6, lr}
 80198d0:	4604      	mov	r4, r0
 80198d2:	460d      	mov	r5, r1
 80198d4:	ec45 4b10 	vmov	d0, r4, r5
 80198d8:	4616      	mov	r6, r2
 80198da:	f003 fdb9 	bl	801d450 <__ulp>
 80198de:	ec51 0b10 	vmov	r0, r1, d0
 80198e2:	b17e      	cbz	r6, 8019904 <sulp+0x36>
 80198e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80198e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	dd09      	ble.n	8019904 <sulp+0x36>
 80198f0:	051b      	lsls	r3, r3, #20
 80198f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80198f6:	2400      	movs	r4, #0
 80198f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80198fc:	4622      	mov	r2, r4
 80198fe:	462b      	mov	r3, r5
 8019900:	f7e6 fea2 	bl	8000648 <__aeabi_dmul>
 8019904:	bd70      	pop	{r4, r5, r6, pc}
	...

08019908 <_strtod_l>:
 8019908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990c:	ed2d 8b02 	vpush	{d8}
 8019910:	b09b      	sub	sp, #108	; 0x6c
 8019912:	4604      	mov	r4, r0
 8019914:	9213      	str	r2, [sp, #76]	; 0x4c
 8019916:	2200      	movs	r2, #0
 8019918:	9216      	str	r2, [sp, #88]	; 0x58
 801991a:	460d      	mov	r5, r1
 801991c:	f04f 0800 	mov.w	r8, #0
 8019920:	f04f 0900 	mov.w	r9, #0
 8019924:	460a      	mov	r2, r1
 8019926:	9215      	str	r2, [sp, #84]	; 0x54
 8019928:	7811      	ldrb	r1, [r2, #0]
 801992a:	292b      	cmp	r1, #43	; 0x2b
 801992c:	d04c      	beq.n	80199c8 <_strtod_l+0xc0>
 801992e:	d83a      	bhi.n	80199a6 <_strtod_l+0x9e>
 8019930:	290d      	cmp	r1, #13
 8019932:	d834      	bhi.n	801999e <_strtod_l+0x96>
 8019934:	2908      	cmp	r1, #8
 8019936:	d834      	bhi.n	80199a2 <_strtod_l+0x9a>
 8019938:	2900      	cmp	r1, #0
 801993a:	d03d      	beq.n	80199b8 <_strtod_l+0xb0>
 801993c:	2200      	movs	r2, #0
 801993e:	920a      	str	r2, [sp, #40]	; 0x28
 8019940:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019942:	7832      	ldrb	r2, [r6, #0]
 8019944:	2a30      	cmp	r2, #48	; 0x30
 8019946:	f040 80b4 	bne.w	8019ab2 <_strtod_l+0x1aa>
 801994a:	7872      	ldrb	r2, [r6, #1]
 801994c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019950:	2a58      	cmp	r2, #88	; 0x58
 8019952:	d170      	bne.n	8019a36 <_strtod_l+0x12e>
 8019954:	9302      	str	r3, [sp, #8]
 8019956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019958:	9301      	str	r3, [sp, #4]
 801995a:	ab16      	add	r3, sp, #88	; 0x58
 801995c:	9300      	str	r3, [sp, #0]
 801995e:	4a8e      	ldr	r2, [pc, #568]	; (8019b98 <_strtod_l+0x290>)
 8019960:	ab17      	add	r3, sp, #92	; 0x5c
 8019962:	a915      	add	r1, sp, #84	; 0x54
 8019964:	4620      	mov	r0, r4
 8019966:	f002 ff05 	bl	801c774 <__gethex>
 801996a:	f010 070f 	ands.w	r7, r0, #15
 801996e:	4605      	mov	r5, r0
 8019970:	d005      	beq.n	801997e <_strtod_l+0x76>
 8019972:	2f06      	cmp	r7, #6
 8019974:	d12a      	bne.n	80199cc <_strtod_l+0xc4>
 8019976:	3601      	adds	r6, #1
 8019978:	2300      	movs	r3, #0
 801997a:	9615      	str	r6, [sp, #84]	; 0x54
 801997c:	930a      	str	r3, [sp, #40]	; 0x28
 801997e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019980:	2b00      	cmp	r3, #0
 8019982:	f040 857f 	bne.w	801a484 <_strtod_l+0xb7c>
 8019986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019988:	b1db      	cbz	r3, 80199c2 <_strtod_l+0xba>
 801998a:	4642      	mov	r2, r8
 801998c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019990:	ec43 2b10 	vmov	d0, r2, r3
 8019994:	b01b      	add	sp, #108	; 0x6c
 8019996:	ecbd 8b02 	vpop	{d8}
 801999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801999e:	2920      	cmp	r1, #32
 80199a0:	d1cc      	bne.n	801993c <_strtod_l+0x34>
 80199a2:	3201      	adds	r2, #1
 80199a4:	e7bf      	b.n	8019926 <_strtod_l+0x1e>
 80199a6:	292d      	cmp	r1, #45	; 0x2d
 80199a8:	d1c8      	bne.n	801993c <_strtod_l+0x34>
 80199aa:	2101      	movs	r1, #1
 80199ac:	910a      	str	r1, [sp, #40]	; 0x28
 80199ae:	1c51      	adds	r1, r2, #1
 80199b0:	9115      	str	r1, [sp, #84]	; 0x54
 80199b2:	7852      	ldrb	r2, [r2, #1]
 80199b4:	2a00      	cmp	r2, #0
 80199b6:	d1c3      	bne.n	8019940 <_strtod_l+0x38>
 80199b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80199ba:	9515      	str	r5, [sp, #84]	; 0x54
 80199bc:	2b00      	cmp	r3, #0
 80199be:	f040 855f 	bne.w	801a480 <_strtod_l+0xb78>
 80199c2:	4642      	mov	r2, r8
 80199c4:	464b      	mov	r3, r9
 80199c6:	e7e3      	b.n	8019990 <_strtod_l+0x88>
 80199c8:	2100      	movs	r1, #0
 80199ca:	e7ef      	b.n	80199ac <_strtod_l+0xa4>
 80199cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80199ce:	b13a      	cbz	r2, 80199e0 <_strtod_l+0xd8>
 80199d0:	2135      	movs	r1, #53	; 0x35
 80199d2:	a818      	add	r0, sp, #96	; 0x60
 80199d4:	f003 fe39 	bl	801d64a <__copybits>
 80199d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80199da:	4620      	mov	r0, r4
 80199dc:	f003 fa0c 	bl	801cdf8 <_Bfree>
 80199e0:	3f01      	subs	r7, #1
 80199e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80199e4:	2f04      	cmp	r7, #4
 80199e6:	d806      	bhi.n	80199f6 <_strtod_l+0xee>
 80199e8:	e8df f007 	tbb	[pc, r7]
 80199ec:	201d0314 	.word	0x201d0314
 80199f0:	14          	.byte	0x14
 80199f1:	00          	.byte	0x00
 80199f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80199f6:	05e9      	lsls	r1, r5, #23
 80199f8:	bf48      	it	mi
 80199fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80199fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019a02:	0d1b      	lsrs	r3, r3, #20
 8019a04:	051b      	lsls	r3, r3, #20
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d1b9      	bne.n	801997e <_strtod_l+0x76>
 8019a0a:	f001 ff13 	bl	801b834 <__errno>
 8019a0e:	2322      	movs	r3, #34	; 0x22
 8019a10:	6003      	str	r3, [r0, #0]
 8019a12:	e7b4      	b.n	801997e <_strtod_l+0x76>
 8019a14:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8019a18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019a1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019a20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019a24:	e7e7      	b.n	80199f6 <_strtod_l+0xee>
 8019a26:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8019ba0 <_strtod_l+0x298>
 8019a2a:	e7e4      	b.n	80199f6 <_strtod_l+0xee>
 8019a2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019a30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019a34:	e7df      	b.n	80199f6 <_strtod_l+0xee>
 8019a36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a38:	1c5a      	adds	r2, r3, #1
 8019a3a:	9215      	str	r2, [sp, #84]	; 0x54
 8019a3c:	785b      	ldrb	r3, [r3, #1]
 8019a3e:	2b30      	cmp	r3, #48	; 0x30
 8019a40:	d0f9      	beq.n	8019a36 <_strtod_l+0x12e>
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d09b      	beq.n	801997e <_strtod_l+0x76>
 8019a46:	2301      	movs	r3, #1
 8019a48:	f04f 0a00 	mov.w	sl, #0
 8019a4c:	9304      	str	r3, [sp, #16]
 8019a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019a56:	46d3      	mov	fp, sl
 8019a58:	220a      	movs	r2, #10
 8019a5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019a5c:	7806      	ldrb	r6, [r0, #0]
 8019a5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019a62:	b2d9      	uxtb	r1, r3
 8019a64:	2909      	cmp	r1, #9
 8019a66:	d926      	bls.n	8019ab6 <_strtod_l+0x1ae>
 8019a68:	494c      	ldr	r1, [pc, #304]	; (8019b9c <_strtod_l+0x294>)
 8019a6a:	2201      	movs	r2, #1
 8019a6c:	f001 fe75 	bl	801b75a <strncmp>
 8019a70:	2800      	cmp	r0, #0
 8019a72:	d030      	beq.n	8019ad6 <_strtod_l+0x1ce>
 8019a74:	2000      	movs	r0, #0
 8019a76:	4632      	mov	r2, r6
 8019a78:	9005      	str	r0, [sp, #20]
 8019a7a:	465e      	mov	r6, fp
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	2a65      	cmp	r2, #101	; 0x65
 8019a80:	d001      	beq.n	8019a86 <_strtod_l+0x17e>
 8019a82:	2a45      	cmp	r2, #69	; 0x45
 8019a84:	d113      	bne.n	8019aae <_strtod_l+0x1a6>
 8019a86:	b91e      	cbnz	r6, 8019a90 <_strtod_l+0x188>
 8019a88:	9a04      	ldr	r2, [sp, #16]
 8019a8a:	4302      	orrs	r2, r0
 8019a8c:	d094      	beq.n	80199b8 <_strtod_l+0xb0>
 8019a8e:	2600      	movs	r6, #0
 8019a90:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019a92:	1c6a      	adds	r2, r5, #1
 8019a94:	9215      	str	r2, [sp, #84]	; 0x54
 8019a96:	786a      	ldrb	r2, [r5, #1]
 8019a98:	2a2b      	cmp	r2, #43	; 0x2b
 8019a9a:	d074      	beq.n	8019b86 <_strtod_l+0x27e>
 8019a9c:	2a2d      	cmp	r2, #45	; 0x2d
 8019a9e:	d078      	beq.n	8019b92 <_strtod_l+0x28a>
 8019aa0:	f04f 0c00 	mov.w	ip, #0
 8019aa4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019aa8:	2909      	cmp	r1, #9
 8019aaa:	d97f      	bls.n	8019bac <_strtod_l+0x2a4>
 8019aac:	9515      	str	r5, [sp, #84]	; 0x54
 8019aae:	2700      	movs	r7, #0
 8019ab0:	e09e      	b.n	8019bf0 <_strtod_l+0x2e8>
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	e7c8      	b.n	8019a48 <_strtod_l+0x140>
 8019ab6:	f1bb 0f08 	cmp.w	fp, #8
 8019aba:	bfd8      	it	le
 8019abc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8019abe:	f100 0001 	add.w	r0, r0, #1
 8019ac2:	bfda      	itte	le
 8019ac4:	fb02 3301 	mlale	r3, r2, r1, r3
 8019ac8:	9309      	strle	r3, [sp, #36]	; 0x24
 8019aca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8019ace:	f10b 0b01 	add.w	fp, fp, #1
 8019ad2:	9015      	str	r0, [sp, #84]	; 0x54
 8019ad4:	e7c1      	b.n	8019a5a <_strtod_l+0x152>
 8019ad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ad8:	1c5a      	adds	r2, r3, #1
 8019ada:	9215      	str	r2, [sp, #84]	; 0x54
 8019adc:	785a      	ldrb	r2, [r3, #1]
 8019ade:	f1bb 0f00 	cmp.w	fp, #0
 8019ae2:	d037      	beq.n	8019b54 <_strtod_l+0x24c>
 8019ae4:	9005      	str	r0, [sp, #20]
 8019ae6:	465e      	mov	r6, fp
 8019ae8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8019aec:	2b09      	cmp	r3, #9
 8019aee:	d912      	bls.n	8019b16 <_strtod_l+0x20e>
 8019af0:	2301      	movs	r3, #1
 8019af2:	e7c4      	b.n	8019a7e <_strtod_l+0x176>
 8019af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019af6:	1c5a      	adds	r2, r3, #1
 8019af8:	9215      	str	r2, [sp, #84]	; 0x54
 8019afa:	785a      	ldrb	r2, [r3, #1]
 8019afc:	3001      	adds	r0, #1
 8019afe:	2a30      	cmp	r2, #48	; 0x30
 8019b00:	d0f8      	beq.n	8019af4 <_strtod_l+0x1ec>
 8019b02:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019b06:	2b08      	cmp	r3, #8
 8019b08:	f200 84c1 	bhi.w	801a48e <_strtod_l+0xb86>
 8019b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b0e:	9005      	str	r0, [sp, #20]
 8019b10:	2000      	movs	r0, #0
 8019b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b14:	4606      	mov	r6, r0
 8019b16:	3a30      	subs	r2, #48	; 0x30
 8019b18:	f100 0301 	add.w	r3, r0, #1
 8019b1c:	d014      	beq.n	8019b48 <_strtod_l+0x240>
 8019b1e:	9905      	ldr	r1, [sp, #20]
 8019b20:	4419      	add	r1, r3
 8019b22:	9105      	str	r1, [sp, #20]
 8019b24:	4633      	mov	r3, r6
 8019b26:	eb00 0c06 	add.w	ip, r0, r6
 8019b2a:	210a      	movs	r1, #10
 8019b2c:	4563      	cmp	r3, ip
 8019b2e:	d113      	bne.n	8019b58 <_strtod_l+0x250>
 8019b30:	1833      	adds	r3, r6, r0
 8019b32:	2b08      	cmp	r3, #8
 8019b34:	f106 0601 	add.w	r6, r6, #1
 8019b38:	4406      	add	r6, r0
 8019b3a:	dc1a      	bgt.n	8019b72 <_strtod_l+0x26a>
 8019b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b3e:	230a      	movs	r3, #10
 8019b40:	fb03 2301 	mla	r3, r3, r1, r2
 8019b44:	9309      	str	r3, [sp, #36]	; 0x24
 8019b46:	2300      	movs	r3, #0
 8019b48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019b4a:	1c51      	adds	r1, r2, #1
 8019b4c:	9115      	str	r1, [sp, #84]	; 0x54
 8019b4e:	7852      	ldrb	r2, [r2, #1]
 8019b50:	4618      	mov	r0, r3
 8019b52:	e7c9      	b.n	8019ae8 <_strtod_l+0x1e0>
 8019b54:	4658      	mov	r0, fp
 8019b56:	e7d2      	b.n	8019afe <_strtod_l+0x1f6>
 8019b58:	2b08      	cmp	r3, #8
 8019b5a:	f103 0301 	add.w	r3, r3, #1
 8019b5e:	dc03      	bgt.n	8019b68 <_strtod_l+0x260>
 8019b60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019b62:	434f      	muls	r7, r1
 8019b64:	9709      	str	r7, [sp, #36]	; 0x24
 8019b66:	e7e1      	b.n	8019b2c <_strtod_l+0x224>
 8019b68:	2b10      	cmp	r3, #16
 8019b6a:	bfd8      	it	le
 8019b6c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8019b70:	e7dc      	b.n	8019b2c <_strtod_l+0x224>
 8019b72:	2e10      	cmp	r6, #16
 8019b74:	bfdc      	itt	le
 8019b76:	230a      	movle	r3, #10
 8019b78:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8019b7c:	e7e3      	b.n	8019b46 <_strtod_l+0x23e>
 8019b7e:	2300      	movs	r3, #0
 8019b80:	9305      	str	r3, [sp, #20]
 8019b82:	2301      	movs	r3, #1
 8019b84:	e780      	b.n	8019a88 <_strtod_l+0x180>
 8019b86:	f04f 0c00 	mov.w	ip, #0
 8019b8a:	1caa      	adds	r2, r5, #2
 8019b8c:	9215      	str	r2, [sp, #84]	; 0x54
 8019b8e:	78aa      	ldrb	r2, [r5, #2]
 8019b90:	e788      	b.n	8019aa4 <_strtod_l+0x19c>
 8019b92:	f04f 0c01 	mov.w	ip, #1
 8019b96:	e7f8      	b.n	8019b8a <_strtod_l+0x282>
 8019b98:	08022c9c 	.word	0x08022c9c
 8019b9c:	08022c97 	.word	0x08022c97
 8019ba0:	7ff00000 	.word	0x7ff00000
 8019ba4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019ba6:	1c51      	adds	r1, r2, #1
 8019ba8:	9115      	str	r1, [sp, #84]	; 0x54
 8019baa:	7852      	ldrb	r2, [r2, #1]
 8019bac:	2a30      	cmp	r2, #48	; 0x30
 8019bae:	d0f9      	beq.n	8019ba4 <_strtod_l+0x29c>
 8019bb0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8019bb4:	2908      	cmp	r1, #8
 8019bb6:	f63f af7a 	bhi.w	8019aae <_strtod_l+0x1a6>
 8019bba:	3a30      	subs	r2, #48	; 0x30
 8019bbc:	9208      	str	r2, [sp, #32]
 8019bbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019bc0:	920c      	str	r2, [sp, #48]	; 0x30
 8019bc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019bc4:	1c57      	adds	r7, r2, #1
 8019bc6:	9715      	str	r7, [sp, #84]	; 0x54
 8019bc8:	7852      	ldrb	r2, [r2, #1]
 8019bca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8019bce:	f1be 0f09 	cmp.w	lr, #9
 8019bd2:	d938      	bls.n	8019c46 <_strtod_l+0x33e>
 8019bd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019bd6:	1a7f      	subs	r7, r7, r1
 8019bd8:	2f08      	cmp	r7, #8
 8019bda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8019bde:	dc03      	bgt.n	8019be8 <_strtod_l+0x2e0>
 8019be0:	9908      	ldr	r1, [sp, #32]
 8019be2:	428f      	cmp	r7, r1
 8019be4:	bfa8      	it	ge
 8019be6:	460f      	movge	r7, r1
 8019be8:	f1bc 0f00 	cmp.w	ip, #0
 8019bec:	d000      	beq.n	8019bf0 <_strtod_l+0x2e8>
 8019bee:	427f      	negs	r7, r7
 8019bf0:	2e00      	cmp	r6, #0
 8019bf2:	d14f      	bne.n	8019c94 <_strtod_l+0x38c>
 8019bf4:	9904      	ldr	r1, [sp, #16]
 8019bf6:	4301      	orrs	r1, r0
 8019bf8:	f47f aec1 	bne.w	801997e <_strtod_l+0x76>
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	f47f aedb 	bne.w	80199b8 <_strtod_l+0xb0>
 8019c02:	2a69      	cmp	r2, #105	; 0x69
 8019c04:	d029      	beq.n	8019c5a <_strtod_l+0x352>
 8019c06:	dc26      	bgt.n	8019c56 <_strtod_l+0x34e>
 8019c08:	2a49      	cmp	r2, #73	; 0x49
 8019c0a:	d026      	beq.n	8019c5a <_strtod_l+0x352>
 8019c0c:	2a4e      	cmp	r2, #78	; 0x4e
 8019c0e:	f47f aed3 	bne.w	80199b8 <_strtod_l+0xb0>
 8019c12:	499b      	ldr	r1, [pc, #620]	; (8019e80 <_strtod_l+0x578>)
 8019c14:	a815      	add	r0, sp, #84	; 0x54
 8019c16:	f002 ffed 	bl	801cbf4 <__match>
 8019c1a:	2800      	cmp	r0, #0
 8019c1c:	f43f aecc 	beq.w	80199b8 <_strtod_l+0xb0>
 8019c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c22:	781b      	ldrb	r3, [r3, #0]
 8019c24:	2b28      	cmp	r3, #40	; 0x28
 8019c26:	d12f      	bne.n	8019c88 <_strtod_l+0x380>
 8019c28:	4996      	ldr	r1, [pc, #600]	; (8019e84 <_strtod_l+0x57c>)
 8019c2a:	aa18      	add	r2, sp, #96	; 0x60
 8019c2c:	a815      	add	r0, sp, #84	; 0x54
 8019c2e:	f002 fff5 	bl	801cc1c <__hexnan>
 8019c32:	2805      	cmp	r0, #5
 8019c34:	d128      	bne.n	8019c88 <_strtod_l+0x380>
 8019c36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019c3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019c40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019c44:	e69b      	b.n	801997e <_strtod_l+0x76>
 8019c46:	9f08      	ldr	r7, [sp, #32]
 8019c48:	210a      	movs	r1, #10
 8019c4a:	fb01 2107 	mla	r1, r1, r7, r2
 8019c4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019c52:	9208      	str	r2, [sp, #32]
 8019c54:	e7b5      	b.n	8019bc2 <_strtod_l+0x2ba>
 8019c56:	2a6e      	cmp	r2, #110	; 0x6e
 8019c58:	e7d9      	b.n	8019c0e <_strtod_l+0x306>
 8019c5a:	498b      	ldr	r1, [pc, #556]	; (8019e88 <_strtod_l+0x580>)
 8019c5c:	a815      	add	r0, sp, #84	; 0x54
 8019c5e:	f002 ffc9 	bl	801cbf4 <__match>
 8019c62:	2800      	cmp	r0, #0
 8019c64:	f43f aea8 	beq.w	80199b8 <_strtod_l+0xb0>
 8019c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c6a:	4988      	ldr	r1, [pc, #544]	; (8019e8c <_strtod_l+0x584>)
 8019c6c:	3b01      	subs	r3, #1
 8019c6e:	a815      	add	r0, sp, #84	; 0x54
 8019c70:	9315      	str	r3, [sp, #84]	; 0x54
 8019c72:	f002 ffbf 	bl	801cbf4 <__match>
 8019c76:	b910      	cbnz	r0, 8019c7e <_strtod_l+0x376>
 8019c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	9315      	str	r3, [sp, #84]	; 0x54
 8019c7e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8019e9c <_strtod_l+0x594>
 8019c82:	f04f 0800 	mov.w	r8, #0
 8019c86:	e67a      	b.n	801997e <_strtod_l+0x76>
 8019c88:	4881      	ldr	r0, [pc, #516]	; (8019e90 <_strtod_l+0x588>)
 8019c8a:	f001 fe19 	bl	801b8c0 <nan>
 8019c8e:	ec59 8b10 	vmov	r8, r9, d0
 8019c92:	e674      	b.n	801997e <_strtod_l+0x76>
 8019c94:	9b05      	ldr	r3, [sp, #20]
 8019c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c98:	1afb      	subs	r3, r7, r3
 8019c9a:	f1bb 0f00 	cmp.w	fp, #0
 8019c9e:	bf08      	it	eq
 8019ca0:	46b3      	moveq	fp, r6
 8019ca2:	2e10      	cmp	r6, #16
 8019ca4:	9308      	str	r3, [sp, #32]
 8019ca6:	4635      	mov	r5, r6
 8019ca8:	bfa8      	it	ge
 8019caa:	2510      	movge	r5, #16
 8019cac:	f7e6 fc52 	bl	8000554 <__aeabi_ui2d>
 8019cb0:	2e09      	cmp	r6, #9
 8019cb2:	4680      	mov	r8, r0
 8019cb4:	4689      	mov	r9, r1
 8019cb6:	dd13      	ble.n	8019ce0 <_strtod_l+0x3d8>
 8019cb8:	4b76      	ldr	r3, [pc, #472]	; (8019e94 <_strtod_l+0x58c>)
 8019cba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019cbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019cc2:	f7e6 fcc1 	bl	8000648 <__aeabi_dmul>
 8019cc6:	4680      	mov	r8, r0
 8019cc8:	4650      	mov	r0, sl
 8019cca:	4689      	mov	r9, r1
 8019ccc:	f7e6 fc42 	bl	8000554 <__aeabi_ui2d>
 8019cd0:	4602      	mov	r2, r0
 8019cd2:	460b      	mov	r3, r1
 8019cd4:	4640      	mov	r0, r8
 8019cd6:	4649      	mov	r1, r9
 8019cd8:	f7e6 fb00 	bl	80002dc <__adddf3>
 8019cdc:	4680      	mov	r8, r0
 8019cde:	4689      	mov	r9, r1
 8019ce0:	2e0f      	cmp	r6, #15
 8019ce2:	dc38      	bgt.n	8019d56 <_strtod_l+0x44e>
 8019ce4:	9b08      	ldr	r3, [sp, #32]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	f43f ae49 	beq.w	801997e <_strtod_l+0x76>
 8019cec:	dd24      	ble.n	8019d38 <_strtod_l+0x430>
 8019cee:	2b16      	cmp	r3, #22
 8019cf0:	dc0b      	bgt.n	8019d0a <_strtod_l+0x402>
 8019cf2:	4968      	ldr	r1, [pc, #416]	; (8019e94 <_strtod_l+0x58c>)
 8019cf4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cfc:	4642      	mov	r2, r8
 8019cfe:	464b      	mov	r3, r9
 8019d00:	f7e6 fca2 	bl	8000648 <__aeabi_dmul>
 8019d04:	4680      	mov	r8, r0
 8019d06:	4689      	mov	r9, r1
 8019d08:	e639      	b.n	801997e <_strtod_l+0x76>
 8019d0a:	9a08      	ldr	r2, [sp, #32]
 8019d0c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8019d10:	4293      	cmp	r3, r2
 8019d12:	db20      	blt.n	8019d56 <_strtod_l+0x44e>
 8019d14:	4c5f      	ldr	r4, [pc, #380]	; (8019e94 <_strtod_l+0x58c>)
 8019d16:	f1c6 060f 	rsb	r6, r6, #15
 8019d1a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8019d1e:	4642      	mov	r2, r8
 8019d20:	464b      	mov	r3, r9
 8019d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d26:	f7e6 fc8f 	bl	8000648 <__aeabi_dmul>
 8019d2a:	9b08      	ldr	r3, [sp, #32]
 8019d2c:	1b9e      	subs	r6, r3, r6
 8019d2e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019d32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019d36:	e7e3      	b.n	8019d00 <_strtod_l+0x3f8>
 8019d38:	9b08      	ldr	r3, [sp, #32]
 8019d3a:	3316      	adds	r3, #22
 8019d3c:	db0b      	blt.n	8019d56 <_strtod_l+0x44e>
 8019d3e:	9b05      	ldr	r3, [sp, #20]
 8019d40:	1bdf      	subs	r7, r3, r7
 8019d42:	4b54      	ldr	r3, [pc, #336]	; (8019e94 <_strtod_l+0x58c>)
 8019d44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019d4c:	4640      	mov	r0, r8
 8019d4e:	4649      	mov	r1, r9
 8019d50:	f7e6 fda4 	bl	800089c <__aeabi_ddiv>
 8019d54:	e7d6      	b.n	8019d04 <_strtod_l+0x3fc>
 8019d56:	9b08      	ldr	r3, [sp, #32]
 8019d58:	1b75      	subs	r5, r6, r5
 8019d5a:	441d      	add	r5, r3
 8019d5c:	2d00      	cmp	r5, #0
 8019d5e:	dd70      	ble.n	8019e42 <_strtod_l+0x53a>
 8019d60:	f015 030f 	ands.w	r3, r5, #15
 8019d64:	d00a      	beq.n	8019d7c <_strtod_l+0x474>
 8019d66:	494b      	ldr	r1, [pc, #300]	; (8019e94 <_strtod_l+0x58c>)
 8019d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019d6c:	4642      	mov	r2, r8
 8019d6e:	464b      	mov	r3, r9
 8019d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d74:	f7e6 fc68 	bl	8000648 <__aeabi_dmul>
 8019d78:	4680      	mov	r8, r0
 8019d7a:	4689      	mov	r9, r1
 8019d7c:	f035 050f 	bics.w	r5, r5, #15
 8019d80:	d04d      	beq.n	8019e1e <_strtod_l+0x516>
 8019d82:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8019d86:	dd22      	ble.n	8019dce <_strtod_l+0x4c6>
 8019d88:	2500      	movs	r5, #0
 8019d8a:	46ab      	mov	fp, r5
 8019d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8019d8e:	9505      	str	r5, [sp, #20]
 8019d90:	2322      	movs	r3, #34	; 0x22
 8019d92:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019e9c <_strtod_l+0x594>
 8019d96:	6023      	str	r3, [r4, #0]
 8019d98:	f04f 0800 	mov.w	r8, #0
 8019d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	f43f aded 	beq.w	801997e <_strtod_l+0x76>
 8019da4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019da6:	4620      	mov	r0, r4
 8019da8:	f003 f826 	bl	801cdf8 <_Bfree>
 8019dac:	9905      	ldr	r1, [sp, #20]
 8019dae:	4620      	mov	r0, r4
 8019db0:	f003 f822 	bl	801cdf8 <_Bfree>
 8019db4:	4659      	mov	r1, fp
 8019db6:	4620      	mov	r0, r4
 8019db8:	f003 f81e 	bl	801cdf8 <_Bfree>
 8019dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019dbe:	4620      	mov	r0, r4
 8019dc0:	f003 f81a 	bl	801cdf8 <_Bfree>
 8019dc4:	4629      	mov	r1, r5
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	f003 f816 	bl	801cdf8 <_Bfree>
 8019dcc:	e5d7      	b.n	801997e <_strtod_l+0x76>
 8019dce:	4b32      	ldr	r3, [pc, #200]	; (8019e98 <_strtod_l+0x590>)
 8019dd0:	9304      	str	r3, [sp, #16]
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	112d      	asrs	r5, r5, #4
 8019dd6:	4640      	mov	r0, r8
 8019dd8:	4649      	mov	r1, r9
 8019dda:	469a      	mov	sl, r3
 8019ddc:	2d01      	cmp	r5, #1
 8019dde:	dc21      	bgt.n	8019e24 <_strtod_l+0x51c>
 8019de0:	b10b      	cbz	r3, 8019de6 <_strtod_l+0x4de>
 8019de2:	4680      	mov	r8, r0
 8019de4:	4689      	mov	r9, r1
 8019de6:	492c      	ldr	r1, [pc, #176]	; (8019e98 <_strtod_l+0x590>)
 8019de8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8019dec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019df0:	4642      	mov	r2, r8
 8019df2:	464b      	mov	r3, r9
 8019df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019df8:	f7e6 fc26 	bl	8000648 <__aeabi_dmul>
 8019dfc:	4b27      	ldr	r3, [pc, #156]	; (8019e9c <_strtod_l+0x594>)
 8019dfe:	460a      	mov	r2, r1
 8019e00:	400b      	ands	r3, r1
 8019e02:	4927      	ldr	r1, [pc, #156]	; (8019ea0 <_strtod_l+0x598>)
 8019e04:	428b      	cmp	r3, r1
 8019e06:	4680      	mov	r8, r0
 8019e08:	d8be      	bhi.n	8019d88 <_strtod_l+0x480>
 8019e0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8019e0e:	428b      	cmp	r3, r1
 8019e10:	bf86      	itte	hi
 8019e12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8019ea4 <_strtod_l+0x59c>
 8019e16:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8019e1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8019e1e:	2300      	movs	r3, #0
 8019e20:	9304      	str	r3, [sp, #16]
 8019e22:	e07b      	b.n	8019f1c <_strtod_l+0x614>
 8019e24:	07ea      	lsls	r2, r5, #31
 8019e26:	d505      	bpl.n	8019e34 <_strtod_l+0x52c>
 8019e28:	9b04      	ldr	r3, [sp, #16]
 8019e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e2e:	f7e6 fc0b 	bl	8000648 <__aeabi_dmul>
 8019e32:	2301      	movs	r3, #1
 8019e34:	9a04      	ldr	r2, [sp, #16]
 8019e36:	3208      	adds	r2, #8
 8019e38:	f10a 0a01 	add.w	sl, sl, #1
 8019e3c:	106d      	asrs	r5, r5, #1
 8019e3e:	9204      	str	r2, [sp, #16]
 8019e40:	e7cc      	b.n	8019ddc <_strtod_l+0x4d4>
 8019e42:	d0ec      	beq.n	8019e1e <_strtod_l+0x516>
 8019e44:	426d      	negs	r5, r5
 8019e46:	f015 020f 	ands.w	r2, r5, #15
 8019e4a:	d00a      	beq.n	8019e62 <_strtod_l+0x55a>
 8019e4c:	4b11      	ldr	r3, [pc, #68]	; (8019e94 <_strtod_l+0x58c>)
 8019e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019e52:	4640      	mov	r0, r8
 8019e54:	4649      	mov	r1, r9
 8019e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e5a:	f7e6 fd1f 	bl	800089c <__aeabi_ddiv>
 8019e5e:	4680      	mov	r8, r0
 8019e60:	4689      	mov	r9, r1
 8019e62:	112d      	asrs	r5, r5, #4
 8019e64:	d0db      	beq.n	8019e1e <_strtod_l+0x516>
 8019e66:	2d1f      	cmp	r5, #31
 8019e68:	dd1e      	ble.n	8019ea8 <_strtod_l+0x5a0>
 8019e6a:	2500      	movs	r5, #0
 8019e6c:	46ab      	mov	fp, r5
 8019e6e:	9509      	str	r5, [sp, #36]	; 0x24
 8019e70:	9505      	str	r5, [sp, #20]
 8019e72:	2322      	movs	r3, #34	; 0x22
 8019e74:	f04f 0800 	mov.w	r8, #0
 8019e78:	f04f 0900 	mov.w	r9, #0
 8019e7c:	6023      	str	r3, [r4, #0]
 8019e7e:	e78d      	b.n	8019d9c <_strtod_l+0x494>
 8019e80:	08022dfe 	.word	0x08022dfe
 8019e84:	08022cb0 	.word	0x08022cb0
 8019e88:	08022df6 	.word	0x08022df6
 8019e8c:	08022e71 	.word	0x08022e71
 8019e90:	08022e6d 	.word	0x08022e6d
 8019e94:	08022fc8 	.word	0x08022fc8
 8019e98:	08022fa0 	.word	0x08022fa0
 8019e9c:	7ff00000 	.word	0x7ff00000
 8019ea0:	7ca00000 	.word	0x7ca00000
 8019ea4:	7fefffff 	.word	0x7fefffff
 8019ea8:	f015 0310 	ands.w	r3, r5, #16
 8019eac:	bf18      	it	ne
 8019eae:	236a      	movne	r3, #106	; 0x6a
 8019eb0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801a254 <_strtod_l+0x94c>
 8019eb4:	9304      	str	r3, [sp, #16]
 8019eb6:	4640      	mov	r0, r8
 8019eb8:	4649      	mov	r1, r9
 8019eba:	2300      	movs	r3, #0
 8019ebc:	07ea      	lsls	r2, r5, #31
 8019ebe:	d504      	bpl.n	8019eca <_strtod_l+0x5c2>
 8019ec0:	e9da 2300 	ldrd	r2, r3, [sl]
 8019ec4:	f7e6 fbc0 	bl	8000648 <__aeabi_dmul>
 8019ec8:	2301      	movs	r3, #1
 8019eca:	106d      	asrs	r5, r5, #1
 8019ecc:	f10a 0a08 	add.w	sl, sl, #8
 8019ed0:	d1f4      	bne.n	8019ebc <_strtod_l+0x5b4>
 8019ed2:	b10b      	cbz	r3, 8019ed8 <_strtod_l+0x5d0>
 8019ed4:	4680      	mov	r8, r0
 8019ed6:	4689      	mov	r9, r1
 8019ed8:	9b04      	ldr	r3, [sp, #16]
 8019eda:	b1bb      	cbz	r3, 8019f0c <_strtod_l+0x604>
 8019edc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8019ee0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	dd10      	ble.n	8019f0c <_strtod_l+0x604>
 8019eea:	2b1f      	cmp	r3, #31
 8019eec:	f340 811e 	ble.w	801a12c <_strtod_l+0x824>
 8019ef0:	2b34      	cmp	r3, #52	; 0x34
 8019ef2:	bfde      	ittt	le
 8019ef4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8019ef8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8019efc:	4093      	lslle	r3, r2
 8019efe:	f04f 0800 	mov.w	r8, #0
 8019f02:	bfcc      	ite	gt
 8019f04:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019f08:	ea03 0901 	andle.w	r9, r3, r1
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	2300      	movs	r3, #0
 8019f10:	4640      	mov	r0, r8
 8019f12:	4649      	mov	r1, r9
 8019f14:	f7e6 fe00 	bl	8000b18 <__aeabi_dcmpeq>
 8019f18:	2800      	cmp	r0, #0
 8019f1a:	d1a6      	bne.n	8019e6a <_strtod_l+0x562>
 8019f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f1e:	9300      	str	r3, [sp, #0]
 8019f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019f22:	4633      	mov	r3, r6
 8019f24:	465a      	mov	r2, fp
 8019f26:	4620      	mov	r0, r4
 8019f28:	f002 ffce 	bl	801cec8 <__s2b>
 8019f2c:	9009      	str	r0, [sp, #36]	; 0x24
 8019f2e:	2800      	cmp	r0, #0
 8019f30:	f43f af2a 	beq.w	8019d88 <_strtod_l+0x480>
 8019f34:	9a08      	ldr	r2, [sp, #32]
 8019f36:	9b05      	ldr	r3, [sp, #20]
 8019f38:	2a00      	cmp	r2, #0
 8019f3a:	eba3 0307 	sub.w	r3, r3, r7
 8019f3e:	bfa8      	it	ge
 8019f40:	2300      	movge	r3, #0
 8019f42:	930c      	str	r3, [sp, #48]	; 0x30
 8019f44:	2500      	movs	r5, #0
 8019f46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8019f4c:	46ab      	mov	fp, r5
 8019f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f50:	4620      	mov	r0, r4
 8019f52:	6859      	ldr	r1, [r3, #4]
 8019f54:	f002 ff10 	bl	801cd78 <_Balloc>
 8019f58:	9005      	str	r0, [sp, #20]
 8019f5a:	2800      	cmp	r0, #0
 8019f5c:	f43f af18 	beq.w	8019d90 <_strtod_l+0x488>
 8019f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f62:	691a      	ldr	r2, [r3, #16]
 8019f64:	3202      	adds	r2, #2
 8019f66:	f103 010c 	add.w	r1, r3, #12
 8019f6a:	0092      	lsls	r2, r2, #2
 8019f6c:	300c      	adds	r0, #12
 8019f6e:	f001 fc96 	bl	801b89e <memcpy>
 8019f72:	ec49 8b10 	vmov	d0, r8, r9
 8019f76:	aa18      	add	r2, sp, #96	; 0x60
 8019f78:	a917      	add	r1, sp, #92	; 0x5c
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f003 fad8 	bl	801d530 <__d2b>
 8019f80:	ec49 8b18 	vmov	d8, r8, r9
 8019f84:	9016      	str	r0, [sp, #88]	; 0x58
 8019f86:	2800      	cmp	r0, #0
 8019f88:	f43f af02 	beq.w	8019d90 <_strtod_l+0x488>
 8019f8c:	2101      	movs	r1, #1
 8019f8e:	4620      	mov	r0, r4
 8019f90:	f003 f832 	bl	801cff8 <__i2b>
 8019f94:	4683      	mov	fp, r0
 8019f96:	2800      	cmp	r0, #0
 8019f98:	f43f aefa 	beq.w	8019d90 <_strtod_l+0x488>
 8019f9c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019f9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019fa0:	2e00      	cmp	r6, #0
 8019fa2:	bfab      	itete	ge
 8019fa4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8019fa6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8019fa8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8019faa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8019fae:	bfac      	ite	ge
 8019fb0:	eb06 0a03 	addge.w	sl, r6, r3
 8019fb4:	1b9f      	sublt	r7, r3, r6
 8019fb6:	9b04      	ldr	r3, [sp, #16]
 8019fb8:	1af6      	subs	r6, r6, r3
 8019fba:	4416      	add	r6, r2
 8019fbc:	4ba0      	ldr	r3, [pc, #640]	; (801a240 <_strtod_l+0x938>)
 8019fbe:	3e01      	subs	r6, #1
 8019fc0:	429e      	cmp	r6, r3
 8019fc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019fc6:	f280 80c4 	bge.w	801a152 <_strtod_l+0x84a>
 8019fca:	1b9b      	subs	r3, r3, r6
 8019fcc:	2b1f      	cmp	r3, #31
 8019fce:	eba2 0203 	sub.w	r2, r2, r3
 8019fd2:	f04f 0101 	mov.w	r1, #1
 8019fd6:	f300 80b0 	bgt.w	801a13a <_strtod_l+0x832>
 8019fda:	fa01 f303 	lsl.w	r3, r1, r3
 8019fde:	930e      	str	r3, [sp, #56]	; 0x38
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8019fe4:	eb0a 0602 	add.w	r6, sl, r2
 8019fe8:	9b04      	ldr	r3, [sp, #16]
 8019fea:	45b2      	cmp	sl, r6
 8019fec:	4417      	add	r7, r2
 8019fee:	441f      	add	r7, r3
 8019ff0:	4653      	mov	r3, sl
 8019ff2:	bfa8      	it	ge
 8019ff4:	4633      	movge	r3, r6
 8019ff6:	42bb      	cmp	r3, r7
 8019ff8:	bfa8      	it	ge
 8019ffa:	463b      	movge	r3, r7
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	bfc2      	ittt	gt
 801a000:	1af6      	subgt	r6, r6, r3
 801a002:	1aff      	subgt	r7, r7, r3
 801a004:	ebaa 0a03 	subgt.w	sl, sl, r3
 801a008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	dd17      	ble.n	801a03e <_strtod_l+0x736>
 801a00e:	4659      	mov	r1, fp
 801a010:	461a      	mov	r2, r3
 801a012:	4620      	mov	r0, r4
 801a014:	f003 f8b0 	bl	801d178 <__pow5mult>
 801a018:	4683      	mov	fp, r0
 801a01a:	2800      	cmp	r0, #0
 801a01c:	f43f aeb8 	beq.w	8019d90 <_strtod_l+0x488>
 801a020:	4601      	mov	r1, r0
 801a022:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a024:	4620      	mov	r0, r4
 801a026:	f002 fffd 	bl	801d024 <__multiply>
 801a02a:	900b      	str	r0, [sp, #44]	; 0x2c
 801a02c:	2800      	cmp	r0, #0
 801a02e:	f43f aeaf 	beq.w	8019d90 <_strtod_l+0x488>
 801a032:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a034:	4620      	mov	r0, r4
 801a036:	f002 fedf 	bl	801cdf8 <_Bfree>
 801a03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a03c:	9316      	str	r3, [sp, #88]	; 0x58
 801a03e:	2e00      	cmp	r6, #0
 801a040:	f300 808c 	bgt.w	801a15c <_strtod_l+0x854>
 801a044:	9b08      	ldr	r3, [sp, #32]
 801a046:	2b00      	cmp	r3, #0
 801a048:	dd08      	ble.n	801a05c <_strtod_l+0x754>
 801a04a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a04c:	9905      	ldr	r1, [sp, #20]
 801a04e:	4620      	mov	r0, r4
 801a050:	f003 f892 	bl	801d178 <__pow5mult>
 801a054:	9005      	str	r0, [sp, #20]
 801a056:	2800      	cmp	r0, #0
 801a058:	f43f ae9a 	beq.w	8019d90 <_strtod_l+0x488>
 801a05c:	2f00      	cmp	r7, #0
 801a05e:	dd08      	ble.n	801a072 <_strtod_l+0x76a>
 801a060:	9905      	ldr	r1, [sp, #20]
 801a062:	463a      	mov	r2, r7
 801a064:	4620      	mov	r0, r4
 801a066:	f003 f8e1 	bl	801d22c <__lshift>
 801a06a:	9005      	str	r0, [sp, #20]
 801a06c:	2800      	cmp	r0, #0
 801a06e:	f43f ae8f 	beq.w	8019d90 <_strtod_l+0x488>
 801a072:	f1ba 0f00 	cmp.w	sl, #0
 801a076:	dd08      	ble.n	801a08a <_strtod_l+0x782>
 801a078:	4659      	mov	r1, fp
 801a07a:	4652      	mov	r2, sl
 801a07c:	4620      	mov	r0, r4
 801a07e:	f003 f8d5 	bl	801d22c <__lshift>
 801a082:	4683      	mov	fp, r0
 801a084:	2800      	cmp	r0, #0
 801a086:	f43f ae83 	beq.w	8019d90 <_strtod_l+0x488>
 801a08a:	9a05      	ldr	r2, [sp, #20]
 801a08c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a08e:	4620      	mov	r0, r4
 801a090:	f003 f954 	bl	801d33c <__mdiff>
 801a094:	4605      	mov	r5, r0
 801a096:	2800      	cmp	r0, #0
 801a098:	f43f ae7a 	beq.w	8019d90 <_strtod_l+0x488>
 801a09c:	68c3      	ldr	r3, [r0, #12]
 801a09e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	60c3      	str	r3, [r0, #12]
 801a0a4:	4659      	mov	r1, fp
 801a0a6:	f003 f92d 	bl	801d304 <__mcmp>
 801a0aa:	2800      	cmp	r0, #0
 801a0ac:	da60      	bge.n	801a170 <_strtod_l+0x868>
 801a0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0b0:	ea53 0308 	orrs.w	r3, r3, r8
 801a0b4:	f040 8084 	bne.w	801a1c0 <_strtod_l+0x8b8>
 801a0b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d17f      	bne.n	801a1c0 <_strtod_l+0x8b8>
 801a0c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a0c4:	0d1b      	lsrs	r3, r3, #20
 801a0c6:	051b      	lsls	r3, r3, #20
 801a0c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a0cc:	d978      	bls.n	801a1c0 <_strtod_l+0x8b8>
 801a0ce:	696b      	ldr	r3, [r5, #20]
 801a0d0:	b913      	cbnz	r3, 801a0d8 <_strtod_l+0x7d0>
 801a0d2:	692b      	ldr	r3, [r5, #16]
 801a0d4:	2b01      	cmp	r3, #1
 801a0d6:	dd73      	ble.n	801a1c0 <_strtod_l+0x8b8>
 801a0d8:	4629      	mov	r1, r5
 801a0da:	2201      	movs	r2, #1
 801a0dc:	4620      	mov	r0, r4
 801a0de:	f003 f8a5 	bl	801d22c <__lshift>
 801a0e2:	4659      	mov	r1, fp
 801a0e4:	4605      	mov	r5, r0
 801a0e6:	f003 f90d 	bl	801d304 <__mcmp>
 801a0ea:	2800      	cmp	r0, #0
 801a0ec:	dd68      	ble.n	801a1c0 <_strtod_l+0x8b8>
 801a0ee:	9904      	ldr	r1, [sp, #16]
 801a0f0:	4a54      	ldr	r2, [pc, #336]	; (801a244 <_strtod_l+0x93c>)
 801a0f2:	464b      	mov	r3, r9
 801a0f4:	2900      	cmp	r1, #0
 801a0f6:	f000 8084 	beq.w	801a202 <_strtod_l+0x8fa>
 801a0fa:	ea02 0109 	and.w	r1, r2, r9
 801a0fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a102:	dc7e      	bgt.n	801a202 <_strtod_l+0x8fa>
 801a104:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a108:	f77f aeb3 	ble.w	8019e72 <_strtod_l+0x56a>
 801a10c:	4b4e      	ldr	r3, [pc, #312]	; (801a248 <_strtod_l+0x940>)
 801a10e:	4640      	mov	r0, r8
 801a110:	4649      	mov	r1, r9
 801a112:	2200      	movs	r2, #0
 801a114:	f7e6 fa98 	bl	8000648 <__aeabi_dmul>
 801a118:	4b4a      	ldr	r3, [pc, #296]	; (801a244 <_strtod_l+0x93c>)
 801a11a:	400b      	ands	r3, r1
 801a11c:	4680      	mov	r8, r0
 801a11e:	4689      	mov	r9, r1
 801a120:	2b00      	cmp	r3, #0
 801a122:	f47f ae3f 	bne.w	8019da4 <_strtod_l+0x49c>
 801a126:	2322      	movs	r3, #34	; 0x22
 801a128:	6023      	str	r3, [r4, #0]
 801a12a:	e63b      	b.n	8019da4 <_strtod_l+0x49c>
 801a12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a130:	fa02 f303 	lsl.w	r3, r2, r3
 801a134:	ea03 0808 	and.w	r8, r3, r8
 801a138:	e6e8      	b.n	8019f0c <_strtod_l+0x604>
 801a13a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801a13e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801a142:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801a146:	36e2      	adds	r6, #226	; 0xe2
 801a148:	fa01 f306 	lsl.w	r3, r1, r6
 801a14c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801a150:	e748      	b.n	8019fe4 <_strtod_l+0x6dc>
 801a152:	2100      	movs	r1, #0
 801a154:	2301      	movs	r3, #1
 801a156:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801a15a:	e743      	b.n	8019fe4 <_strtod_l+0x6dc>
 801a15c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a15e:	4632      	mov	r2, r6
 801a160:	4620      	mov	r0, r4
 801a162:	f003 f863 	bl	801d22c <__lshift>
 801a166:	9016      	str	r0, [sp, #88]	; 0x58
 801a168:	2800      	cmp	r0, #0
 801a16a:	f47f af6b 	bne.w	801a044 <_strtod_l+0x73c>
 801a16e:	e60f      	b.n	8019d90 <_strtod_l+0x488>
 801a170:	46ca      	mov	sl, r9
 801a172:	d171      	bne.n	801a258 <_strtod_l+0x950>
 801a174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a176:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a17a:	b352      	cbz	r2, 801a1d2 <_strtod_l+0x8ca>
 801a17c:	4a33      	ldr	r2, [pc, #204]	; (801a24c <_strtod_l+0x944>)
 801a17e:	4293      	cmp	r3, r2
 801a180:	d12a      	bne.n	801a1d8 <_strtod_l+0x8d0>
 801a182:	9b04      	ldr	r3, [sp, #16]
 801a184:	4641      	mov	r1, r8
 801a186:	b1fb      	cbz	r3, 801a1c8 <_strtod_l+0x8c0>
 801a188:	4b2e      	ldr	r3, [pc, #184]	; (801a244 <_strtod_l+0x93c>)
 801a18a:	ea09 0303 	and.w	r3, r9, r3
 801a18e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a196:	d81a      	bhi.n	801a1ce <_strtod_l+0x8c6>
 801a198:	0d1b      	lsrs	r3, r3, #20
 801a19a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a19e:	fa02 f303 	lsl.w	r3, r2, r3
 801a1a2:	4299      	cmp	r1, r3
 801a1a4:	d118      	bne.n	801a1d8 <_strtod_l+0x8d0>
 801a1a6:	4b2a      	ldr	r3, [pc, #168]	; (801a250 <_strtod_l+0x948>)
 801a1a8:	459a      	cmp	sl, r3
 801a1aa:	d102      	bne.n	801a1b2 <_strtod_l+0x8aa>
 801a1ac:	3101      	adds	r1, #1
 801a1ae:	f43f adef 	beq.w	8019d90 <_strtod_l+0x488>
 801a1b2:	4b24      	ldr	r3, [pc, #144]	; (801a244 <_strtod_l+0x93c>)
 801a1b4:	ea0a 0303 	and.w	r3, sl, r3
 801a1b8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a1bc:	f04f 0800 	mov.w	r8, #0
 801a1c0:	9b04      	ldr	r3, [sp, #16]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d1a2      	bne.n	801a10c <_strtod_l+0x804>
 801a1c6:	e5ed      	b.n	8019da4 <_strtod_l+0x49c>
 801a1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1cc:	e7e9      	b.n	801a1a2 <_strtod_l+0x89a>
 801a1ce:	4613      	mov	r3, r2
 801a1d0:	e7e7      	b.n	801a1a2 <_strtod_l+0x89a>
 801a1d2:	ea53 0308 	orrs.w	r3, r3, r8
 801a1d6:	d08a      	beq.n	801a0ee <_strtod_l+0x7e6>
 801a1d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1da:	b1e3      	cbz	r3, 801a216 <_strtod_l+0x90e>
 801a1dc:	ea13 0f0a 	tst.w	r3, sl
 801a1e0:	d0ee      	beq.n	801a1c0 <_strtod_l+0x8b8>
 801a1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1e4:	9a04      	ldr	r2, [sp, #16]
 801a1e6:	4640      	mov	r0, r8
 801a1e8:	4649      	mov	r1, r9
 801a1ea:	b1c3      	cbz	r3, 801a21e <_strtod_l+0x916>
 801a1ec:	f7ff fb6f 	bl	80198ce <sulp>
 801a1f0:	4602      	mov	r2, r0
 801a1f2:	460b      	mov	r3, r1
 801a1f4:	ec51 0b18 	vmov	r0, r1, d8
 801a1f8:	f7e6 f870 	bl	80002dc <__adddf3>
 801a1fc:	4680      	mov	r8, r0
 801a1fe:	4689      	mov	r9, r1
 801a200:	e7de      	b.n	801a1c0 <_strtod_l+0x8b8>
 801a202:	4013      	ands	r3, r2
 801a204:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a208:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a20c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a210:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a214:	e7d4      	b.n	801a1c0 <_strtod_l+0x8b8>
 801a216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a218:	ea13 0f08 	tst.w	r3, r8
 801a21c:	e7e0      	b.n	801a1e0 <_strtod_l+0x8d8>
 801a21e:	f7ff fb56 	bl	80198ce <sulp>
 801a222:	4602      	mov	r2, r0
 801a224:	460b      	mov	r3, r1
 801a226:	ec51 0b18 	vmov	r0, r1, d8
 801a22a:	f7e6 f855 	bl	80002d8 <__aeabi_dsub>
 801a22e:	2200      	movs	r2, #0
 801a230:	2300      	movs	r3, #0
 801a232:	4680      	mov	r8, r0
 801a234:	4689      	mov	r9, r1
 801a236:	f7e6 fc6f 	bl	8000b18 <__aeabi_dcmpeq>
 801a23a:	2800      	cmp	r0, #0
 801a23c:	d0c0      	beq.n	801a1c0 <_strtod_l+0x8b8>
 801a23e:	e618      	b.n	8019e72 <_strtod_l+0x56a>
 801a240:	fffffc02 	.word	0xfffffc02
 801a244:	7ff00000 	.word	0x7ff00000
 801a248:	39500000 	.word	0x39500000
 801a24c:	000fffff 	.word	0x000fffff
 801a250:	7fefffff 	.word	0x7fefffff
 801a254:	08022cc8 	.word	0x08022cc8
 801a258:	4659      	mov	r1, fp
 801a25a:	4628      	mov	r0, r5
 801a25c:	f003 f9c2 	bl	801d5e4 <__ratio>
 801a260:	ec57 6b10 	vmov	r6, r7, d0
 801a264:	ee10 0a10 	vmov	r0, s0
 801a268:	2200      	movs	r2, #0
 801a26a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a26e:	4639      	mov	r1, r7
 801a270:	f7e6 fc66 	bl	8000b40 <__aeabi_dcmple>
 801a274:	2800      	cmp	r0, #0
 801a276:	d071      	beq.n	801a35c <_strtod_l+0xa54>
 801a278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d17c      	bne.n	801a378 <_strtod_l+0xa70>
 801a27e:	f1b8 0f00 	cmp.w	r8, #0
 801a282:	d15a      	bne.n	801a33a <_strtod_l+0xa32>
 801a284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d15d      	bne.n	801a348 <_strtod_l+0xa40>
 801a28c:	4b90      	ldr	r3, [pc, #576]	; (801a4d0 <_strtod_l+0xbc8>)
 801a28e:	2200      	movs	r2, #0
 801a290:	4630      	mov	r0, r6
 801a292:	4639      	mov	r1, r7
 801a294:	f7e6 fc4a 	bl	8000b2c <__aeabi_dcmplt>
 801a298:	2800      	cmp	r0, #0
 801a29a:	d15c      	bne.n	801a356 <_strtod_l+0xa4e>
 801a29c:	4630      	mov	r0, r6
 801a29e:	4639      	mov	r1, r7
 801a2a0:	4b8c      	ldr	r3, [pc, #560]	; (801a4d4 <_strtod_l+0xbcc>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	f7e6 f9d0 	bl	8000648 <__aeabi_dmul>
 801a2a8:	4606      	mov	r6, r0
 801a2aa:	460f      	mov	r7, r1
 801a2ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801a2b0:	9606      	str	r6, [sp, #24]
 801a2b2:	9307      	str	r3, [sp, #28]
 801a2b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a2b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801a2bc:	4b86      	ldr	r3, [pc, #536]	; (801a4d8 <_strtod_l+0xbd0>)
 801a2be:	ea0a 0303 	and.w	r3, sl, r3
 801a2c2:	930d      	str	r3, [sp, #52]	; 0x34
 801a2c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a2c6:	4b85      	ldr	r3, [pc, #532]	; (801a4dc <_strtod_l+0xbd4>)
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	f040 8090 	bne.w	801a3ee <_strtod_l+0xae6>
 801a2ce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801a2d2:	ec49 8b10 	vmov	d0, r8, r9
 801a2d6:	f003 f8bb 	bl	801d450 <__ulp>
 801a2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a2de:	ec51 0b10 	vmov	r0, r1, d0
 801a2e2:	f7e6 f9b1 	bl	8000648 <__aeabi_dmul>
 801a2e6:	4642      	mov	r2, r8
 801a2e8:	464b      	mov	r3, r9
 801a2ea:	f7e5 fff7 	bl	80002dc <__adddf3>
 801a2ee:	460b      	mov	r3, r1
 801a2f0:	4979      	ldr	r1, [pc, #484]	; (801a4d8 <_strtod_l+0xbd0>)
 801a2f2:	4a7b      	ldr	r2, [pc, #492]	; (801a4e0 <_strtod_l+0xbd8>)
 801a2f4:	4019      	ands	r1, r3
 801a2f6:	4291      	cmp	r1, r2
 801a2f8:	4680      	mov	r8, r0
 801a2fa:	d944      	bls.n	801a386 <_strtod_l+0xa7e>
 801a2fc:	ee18 2a90 	vmov	r2, s17
 801a300:	4b78      	ldr	r3, [pc, #480]	; (801a4e4 <_strtod_l+0xbdc>)
 801a302:	429a      	cmp	r2, r3
 801a304:	d104      	bne.n	801a310 <_strtod_l+0xa08>
 801a306:	ee18 3a10 	vmov	r3, s16
 801a30a:	3301      	adds	r3, #1
 801a30c:	f43f ad40 	beq.w	8019d90 <_strtod_l+0x488>
 801a310:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801a4e4 <_strtod_l+0xbdc>
 801a314:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a318:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a31a:	4620      	mov	r0, r4
 801a31c:	f002 fd6c 	bl	801cdf8 <_Bfree>
 801a320:	9905      	ldr	r1, [sp, #20]
 801a322:	4620      	mov	r0, r4
 801a324:	f002 fd68 	bl	801cdf8 <_Bfree>
 801a328:	4659      	mov	r1, fp
 801a32a:	4620      	mov	r0, r4
 801a32c:	f002 fd64 	bl	801cdf8 <_Bfree>
 801a330:	4629      	mov	r1, r5
 801a332:	4620      	mov	r0, r4
 801a334:	f002 fd60 	bl	801cdf8 <_Bfree>
 801a338:	e609      	b.n	8019f4e <_strtod_l+0x646>
 801a33a:	f1b8 0f01 	cmp.w	r8, #1
 801a33e:	d103      	bne.n	801a348 <_strtod_l+0xa40>
 801a340:	f1b9 0f00 	cmp.w	r9, #0
 801a344:	f43f ad95 	beq.w	8019e72 <_strtod_l+0x56a>
 801a348:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801a4a0 <_strtod_l+0xb98>
 801a34c:	4f60      	ldr	r7, [pc, #384]	; (801a4d0 <_strtod_l+0xbc8>)
 801a34e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a352:	2600      	movs	r6, #0
 801a354:	e7ae      	b.n	801a2b4 <_strtod_l+0x9ac>
 801a356:	4f5f      	ldr	r7, [pc, #380]	; (801a4d4 <_strtod_l+0xbcc>)
 801a358:	2600      	movs	r6, #0
 801a35a:	e7a7      	b.n	801a2ac <_strtod_l+0x9a4>
 801a35c:	4b5d      	ldr	r3, [pc, #372]	; (801a4d4 <_strtod_l+0xbcc>)
 801a35e:	4630      	mov	r0, r6
 801a360:	4639      	mov	r1, r7
 801a362:	2200      	movs	r2, #0
 801a364:	f7e6 f970 	bl	8000648 <__aeabi_dmul>
 801a368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a36a:	4606      	mov	r6, r0
 801a36c:	460f      	mov	r7, r1
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d09c      	beq.n	801a2ac <_strtod_l+0x9a4>
 801a372:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a376:	e79d      	b.n	801a2b4 <_strtod_l+0x9ac>
 801a378:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801a4a8 <_strtod_l+0xba0>
 801a37c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a380:	ec57 6b17 	vmov	r6, r7, d7
 801a384:	e796      	b.n	801a2b4 <_strtod_l+0x9ac>
 801a386:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a38a:	9b04      	ldr	r3, [sp, #16]
 801a38c:	46ca      	mov	sl, r9
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d1c2      	bne.n	801a318 <_strtod_l+0xa10>
 801a392:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a398:	0d1b      	lsrs	r3, r3, #20
 801a39a:	051b      	lsls	r3, r3, #20
 801a39c:	429a      	cmp	r2, r3
 801a39e:	d1bb      	bne.n	801a318 <_strtod_l+0xa10>
 801a3a0:	4630      	mov	r0, r6
 801a3a2:	4639      	mov	r1, r7
 801a3a4:	f7e6 fcc4 	bl	8000d30 <__aeabi_d2lz>
 801a3a8:	f7e6 f920 	bl	80005ec <__aeabi_l2d>
 801a3ac:	4602      	mov	r2, r0
 801a3ae:	460b      	mov	r3, r1
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	4639      	mov	r1, r7
 801a3b4:	f7e5 ff90 	bl	80002d8 <__aeabi_dsub>
 801a3b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a3ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a3be:	ea43 0308 	orr.w	r3, r3, r8
 801a3c2:	4313      	orrs	r3, r2
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	460f      	mov	r7, r1
 801a3c8:	d054      	beq.n	801a474 <_strtod_l+0xb6c>
 801a3ca:	a339      	add	r3, pc, #228	; (adr r3, 801a4b0 <_strtod_l+0xba8>)
 801a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d0:	f7e6 fbac 	bl	8000b2c <__aeabi_dcmplt>
 801a3d4:	2800      	cmp	r0, #0
 801a3d6:	f47f ace5 	bne.w	8019da4 <_strtod_l+0x49c>
 801a3da:	a337      	add	r3, pc, #220	; (adr r3, 801a4b8 <_strtod_l+0xbb0>)
 801a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	4639      	mov	r1, r7
 801a3e4:	f7e6 fbc0 	bl	8000b68 <__aeabi_dcmpgt>
 801a3e8:	2800      	cmp	r0, #0
 801a3ea:	d095      	beq.n	801a318 <_strtod_l+0xa10>
 801a3ec:	e4da      	b.n	8019da4 <_strtod_l+0x49c>
 801a3ee:	9b04      	ldr	r3, [sp, #16]
 801a3f0:	b333      	cbz	r3, 801a440 <_strtod_l+0xb38>
 801a3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a3f8:	d822      	bhi.n	801a440 <_strtod_l+0xb38>
 801a3fa:	a331      	add	r3, pc, #196	; (adr r3, 801a4c0 <_strtod_l+0xbb8>)
 801a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a400:	4630      	mov	r0, r6
 801a402:	4639      	mov	r1, r7
 801a404:	f7e6 fb9c 	bl	8000b40 <__aeabi_dcmple>
 801a408:	b1a0      	cbz	r0, 801a434 <_strtod_l+0xb2c>
 801a40a:	4639      	mov	r1, r7
 801a40c:	4630      	mov	r0, r6
 801a40e:	f7e6 fbf3 	bl	8000bf8 <__aeabi_d2uiz>
 801a412:	2801      	cmp	r0, #1
 801a414:	bf38      	it	cc
 801a416:	2001      	movcc	r0, #1
 801a418:	f7e6 f89c 	bl	8000554 <__aeabi_ui2d>
 801a41c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a41e:	4606      	mov	r6, r0
 801a420:	460f      	mov	r7, r1
 801a422:	bb23      	cbnz	r3, 801a46e <_strtod_l+0xb66>
 801a424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a428:	9010      	str	r0, [sp, #64]	; 0x40
 801a42a:	9311      	str	r3, [sp, #68]	; 0x44
 801a42c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a430:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801a434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a438:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a43c:	1a9b      	subs	r3, r3, r2
 801a43e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a440:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a444:	eeb0 0a48 	vmov.f32	s0, s16
 801a448:	eef0 0a68 	vmov.f32	s1, s17
 801a44c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801a450:	f002 fffe 	bl	801d450 <__ulp>
 801a454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a458:	ec53 2b10 	vmov	r2, r3, d0
 801a45c:	f7e6 f8f4 	bl	8000648 <__aeabi_dmul>
 801a460:	ec53 2b18 	vmov	r2, r3, d8
 801a464:	f7e5 ff3a 	bl	80002dc <__adddf3>
 801a468:	4680      	mov	r8, r0
 801a46a:	4689      	mov	r9, r1
 801a46c:	e78d      	b.n	801a38a <_strtod_l+0xa82>
 801a46e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801a472:	e7db      	b.n	801a42c <_strtod_l+0xb24>
 801a474:	a314      	add	r3, pc, #80	; (adr r3, 801a4c8 <_strtod_l+0xbc0>)
 801a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a47a:	f7e6 fb57 	bl	8000b2c <__aeabi_dcmplt>
 801a47e:	e7b3      	b.n	801a3e8 <_strtod_l+0xae0>
 801a480:	2300      	movs	r3, #0
 801a482:	930a      	str	r3, [sp, #40]	; 0x28
 801a484:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a488:	6013      	str	r3, [r2, #0]
 801a48a:	f7ff ba7c 	b.w	8019986 <_strtod_l+0x7e>
 801a48e:	2a65      	cmp	r2, #101	; 0x65
 801a490:	f43f ab75 	beq.w	8019b7e <_strtod_l+0x276>
 801a494:	2a45      	cmp	r2, #69	; 0x45
 801a496:	f43f ab72 	beq.w	8019b7e <_strtod_l+0x276>
 801a49a:	2301      	movs	r3, #1
 801a49c:	f7ff bbaa 	b.w	8019bf4 <_strtod_l+0x2ec>
 801a4a0:	00000000 	.word	0x00000000
 801a4a4:	bff00000 	.word	0xbff00000
 801a4a8:	00000000 	.word	0x00000000
 801a4ac:	3ff00000 	.word	0x3ff00000
 801a4b0:	94a03595 	.word	0x94a03595
 801a4b4:	3fdfffff 	.word	0x3fdfffff
 801a4b8:	35afe535 	.word	0x35afe535
 801a4bc:	3fe00000 	.word	0x3fe00000
 801a4c0:	ffc00000 	.word	0xffc00000
 801a4c4:	41dfffff 	.word	0x41dfffff
 801a4c8:	94a03595 	.word	0x94a03595
 801a4cc:	3fcfffff 	.word	0x3fcfffff
 801a4d0:	3ff00000 	.word	0x3ff00000
 801a4d4:	3fe00000 	.word	0x3fe00000
 801a4d8:	7ff00000 	.word	0x7ff00000
 801a4dc:	7fe00000 	.word	0x7fe00000
 801a4e0:	7c9fffff 	.word	0x7c9fffff
 801a4e4:	7fefffff 	.word	0x7fefffff

0801a4e8 <_strtod_r>:
 801a4e8:	4b01      	ldr	r3, [pc, #4]	; (801a4f0 <_strtod_r+0x8>)
 801a4ea:	f7ff ba0d 	b.w	8019908 <_strtod_l>
 801a4ee:	bf00      	nop
 801a4f0:	20000c88 	.word	0x20000c88

0801a4f4 <strtod>:
 801a4f4:	460a      	mov	r2, r1
 801a4f6:	4601      	mov	r1, r0
 801a4f8:	4802      	ldr	r0, [pc, #8]	; (801a504 <strtod+0x10>)
 801a4fa:	4b03      	ldr	r3, [pc, #12]	; (801a508 <strtod+0x14>)
 801a4fc:	6800      	ldr	r0, [r0, #0]
 801a4fe:	f7ff ba03 	b.w	8019908 <_strtod_l>
 801a502:	bf00      	nop
 801a504:	20000e40 	.word	0x20000e40
 801a508:	20000c88 	.word	0x20000c88

0801a50c <__cvt>:
 801a50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a510:	ec55 4b10 	vmov	r4, r5, d0
 801a514:	2d00      	cmp	r5, #0
 801a516:	460e      	mov	r6, r1
 801a518:	4619      	mov	r1, r3
 801a51a:	462b      	mov	r3, r5
 801a51c:	bfbb      	ittet	lt
 801a51e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a522:	461d      	movlt	r5, r3
 801a524:	2300      	movge	r3, #0
 801a526:	232d      	movlt	r3, #45	; 0x2d
 801a528:	700b      	strb	r3, [r1, #0]
 801a52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a52c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a530:	4691      	mov	r9, r2
 801a532:	f023 0820 	bic.w	r8, r3, #32
 801a536:	bfbc      	itt	lt
 801a538:	4622      	movlt	r2, r4
 801a53a:	4614      	movlt	r4, r2
 801a53c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a540:	d005      	beq.n	801a54e <__cvt+0x42>
 801a542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a546:	d100      	bne.n	801a54a <__cvt+0x3e>
 801a548:	3601      	adds	r6, #1
 801a54a:	2102      	movs	r1, #2
 801a54c:	e000      	b.n	801a550 <__cvt+0x44>
 801a54e:	2103      	movs	r1, #3
 801a550:	ab03      	add	r3, sp, #12
 801a552:	9301      	str	r3, [sp, #4]
 801a554:	ab02      	add	r3, sp, #8
 801a556:	9300      	str	r3, [sp, #0]
 801a558:	ec45 4b10 	vmov	d0, r4, r5
 801a55c:	4653      	mov	r3, sl
 801a55e:	4632      	mov	r2, r6
 801a560:	f001 fa62 	bl	801ba28 <_dtoa_r>
 801a564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a568:	4607      	mov	r7, r0
 801a56a:	d102      	bne.n	801a572 <__cvt+0x66>
 801a56c:	f019 0f01 	tst.w	r9, #1
 801a570:	d022      	beq.n	801a5b8 <__cvt+0xac>
 801a572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a576:	eb07 0906 	add.w	r9, r7, r6
 801a57a:	d110      	bne.n	801a59e <__cvt+0x92>
 801a57c:	783b      	ldrb	r3, [r7, #0]
 801a57e:	2b30      	cmp	r3, #48	; 0x30
 801a580:	d10a      	bne.n	801a598 <__cvt+0x8c>
 801a582:	2200      	movs	r2, #0
 801a584:	2300      	movs	r3, #0
 801a586:	4620      	mov	r0, r4
 801a588:	4629      	mov	r1, r5
 801a58a:	f7e6 fac5 	bl	8000b18 <__aeabi_dcmpeq>
 801a58e:	b918      	cbnz	r0, 801a598 <__cvt+0x8c>
 801a590:	f1c6 0601 	rsb	r6, r6, #1
 801a594:	f8ca 6000 	str.w	r6, [sl]
 801a598:	f8da 3000 	ldr.w	r3, [sl]
 801a59c:	4499      	add	r9, r3
 801a59e:	2200      	movs	r2, #0
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	4629      	mov	r1, r5
 801a5a6:	f7e6 fab7 	bl	8000b18 <__aeabi_dcmpeq>
 801a5aa:	b108      	cbz	r0, 801a5b0 <__cvt+0xa4>
 801a5ac:	f8cd 900c 	str.w	r9, [sp, #12]
 801a5b0:	2230      	movs	r2, #48	; 0x30
 801a5b2:	9b03      	ldr	r3, [sp, #12]
 801a5b4:	454b      	cmp	r3, r9
 801a5b6:	d307      	bcc.n	801a5c8 <__cvt+0xbc>
 801a5b8:	9b03      	ldr	r3, [sp, #12]
 801a5ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5bc:	1bdb      	subs	r3, r3, r7
 801a5be:	4638      	mov	r0, r7
 801a5c0:	6013      	str	r3, [r2, #0]
 801a5c2:	b004      	add	sp, #16
 801a5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5c8:	1c59      	adds	r1, r3, #1
 801a5ca:	9103      	str	r1, [sp, #12]
 801a5cc:	701a      	strb	r2, [r3, #0]
 801a5ce:	e7f0      	b.n	801a5b2 <__cvt+0xa6>

0801a5d0 <__exponent>:
 801a5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	2900      	cmp	r1, #0
 801a5d6:	bfb8      	it	lt
 801a5d8:	4249      	neglt	r1, r1
 801a5da:	f803 2b02 	strb.w	r2, [r3], #2
 801a5de:	bfb4      	ite	lt
 801a5e0:	222d      	movlt	r2, #45	; 0x2d
 801a5e2:	222b      	movge	r2, #43	; 0x2b
 801a5e4:	2909      	cmp	r1, #9
 801a5e6:	7042      	strb	r2, [r0, #1]
 801a5e8:	dd2a      	ble.n	801a640 <__exponent+0x70>
 801a5ea:	f10d 0207 	add.w	r2, sp, #7
 801a5ee:	4617      	mov	r7, r2
 801a5f0:	260a      	movs	r6, #10
 801a5f2:	4694      	mov	ip, r2
 801a5f4:	fb91 f5f6 	sdiv	r5, r1, r6
 801a5f8:	fb06 1415 	mls	r4, r6, r5, r1
 801a5fc:	3430      	adds	r4, #48	; 0x30
 801a5fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a602:	460c      	mov	r4, r1
 801a604:	2c63      	cmp	r4, #99	; 0x63
 801a606:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801a60a:	4629      	mov	r1, r5
 801a60c:	dcf1      	bgt.n	801a5f2 <__exponent+0x22>
 801a60e:	3130      	adds	r1, #48	; 0x30
 801a610:	f1ac 0402 	sub.w	r4, ip, #2
 801a614:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a618:	1c41      	adds	r1, r0, #1
 801a61a:	4622      	mov	r2, r4
 801a61c:	42ba      	cmp	r2, r7
 801a61e:	d30a      	bcc.n	801a636 <__exponent+0x66>
 801a620:	f10d 0209 	add.w	r2, sp, #9
 801a624:	eba2 020c 	sub.w	r2, r2, ip
 801a628:	42bc      	cmp	r4, r7
 801a62a:	bf88      	it	hi
 801a62c:	2200      	movhi	r2, #0
 801a62e:	4413      	add	r3, r2
 801a630:	1a18      	subs	r0, r3, r0
 801a632:	b003      	add	sp, #12
 801a634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a636:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a63a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a63e:	e7ed      	b.n	801a61c <__exponent+0x4c>
 801a640:	2330      	movs	r3, #48	; 0x30
 801a642:	3130      	adds	r1, #48	; 0x30
 801a644:	7083      	strb	r3, [r0, #2]
 801a646:	70c1      	strb	r1, [r0, #3]
 801a648:	1d03      	adds	r3, r0, #4
 801a64a:	e7f1      	b.n	801a630 <__exponent+0x60>

0801a64c <_printf_float>:
 801a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a650:	ed2d 8b02 	vpush	{d8}
 801a654:	b08d      	sub	sp, #52	; 0x34
 801a656:	460c      	mov	r4, r1
 801a658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a65c:	4616      	mov	r6, r2
 801a65e:	461f      	mov	r7, r3
 801a660:	4605      	mov	r5, r0
 801a662:	f001 f88d 	bl	801b780 <_localeconv_r>
 801a666:	f8d0 a000 	ldr.w	sl, [r0]
 801a66a:	4650      	mov	r0, sl
 801a66c:	f7e5 fe28 	bl	80002c0 <strlen>
 801a670:	2300      	movs	r3, #0
 801a672:	930a      	str	r3, [sp, #40]	; 0x28
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	9305      	str	r3, [sp, #20]
 801a678:	f8d8 3000 	ldr.w	r3, [r8]
 801a67c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a680:	3307      	adds	r3, #7
 801a682:	f023 0307 	bic.w	r3, r3, #7
 801a686:	f103 0208 	add.w	r2, r3, #8
 801a68a:	f8c8 2000 	str.w	r2, [r8]
 801a68e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a696:	9307      	str	r3, [sp, #28]
 801a698:	f8cd 8018 	str.w	r8, [sp, #24]
 801a69c:	ee08 0a10 	vmov	s16, r0
 801a6a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801a6a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a6a8:	4b9e      	ldr	r3, [pc, #632]	; (801a924 <_printf_float+0x2d8>)
 801a6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a6ae:	f7e6 fa65 	bl	8000b7c <__aeabi_dcmpun>
 801a6b2:	bb88      	cbnz	r0, 801a718 <_printf_float+0xcc>
 801a6b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a6b8:	4b9a      	ldr	r3, [pc, #616]	; (801a924 <_printf_float+0x2d8>)
 801a6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a6be:	f7e6 fa3f 	bl	8000b40 <__aeabi_dcmple>
 801a6c2:	bb48      	cbnz	r0, 801a718 <_printf_float+0xcc>
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	4640      	mov	r0, r8
 801a6ca:	4649      	mov	r1, r9
 801a6cc:	f7e6 fa2e 	bl	8000b2c <__aeabi_dcmplt>
 801a6d0:	b110      	cbz	r0, 801a6d8 <_printf_float+0x8c>
 801a6d2:	232d      	movs	r3, #45	; 0x2d
 801a6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6d8:	4a93      	ldr	r2, [pc, #588]	; (801a928 <_printf_float+0x2dc>)
 801a6da:	4b94      	ldr	r3, [pc, #592]	; (801a92c <_printf_float+0x2e0>)
 801a6dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a6e0:	bf94      	ite	ls
 801a6e2:	4690      	movls	r8, r2
 801a6e4:	4698      	movhi	r8, r3
 801a6e6:	2303      	movs	r3, #3
 801a6e8:	6123      	str	r3, [r4, #16]
 801a6ea:	9b05      	ldr	r3, [sp, #20]
 801a6ec:	f023 0304 	bic.w	r3, r3, #4
 801a6f0:	6023      	str	r3, [r4, #0]
 801a6f2:	f04f 0900 	mov.w	r9, #0
 801a6f6:	9700      	str	r7, [sp, #0]
 801a6f8:	4633      	mov	r3, r6
 801a6fa:	aa0b      	add	r2, sp, #44	; 0x2c
 801a6fc:	4621      	mov	r1, r4
 801a6fe:	4628      	mov	r0, r5
 801a700:	f000 f9da 	bl	801aab8 <_printf_common>
 801a704:	3001      	adds	r0, #1
 801a706:	f040 8090 	bne.w	801a82a <_printf_float+0x1de>
 801a70a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a70e:	b00d      	add	sp, #52	; 0x34
 801a710:	ecbd 8b02 	vpop	{d8}
 801a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a718:	4642      	mov	r2, r8
 801a71a:	464b      	mov	r3, r9
 801a71c:	4640      	mov	r0, r8
 801a71e:	4649      	mov	r1, r9
 801a720:	f7e6 fa2c 	bl	8000b7c <__aeabi_dcmpun>
 801a724:	b140      	cbz	r0, 801a738 <_printf_float+0xec>
 801a726:	464b      	mov	r3, r9
 801a728:	2b00      	cmp	r3, #0
 801a72a:	bfbc      	itt	lt
 801a72c:	232d      	movlt	r3, #45	; 0x2d
 801a72e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a732:	4a7f      	ldr	r2, [pc, #508]	; (801a930 <_printf_float+0x2e4>)
 801a734:	4b7f      	ldr	r3, [pc, #508]	; (801a934 <_printf_float+0x2e8>)
 801a736:	e7d1      	b.n	801a6dc <_printf_float+0x90>
 801a738:	6863      	ldr	r3, [r4, #4]
 801a73a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a73e:	9206      	str	r2, [sp, #24]
 801a740:	1c5a      	adds	r2, r3, #1
 801a742:	d13f      	bne.n	801a7c4 <_printf_float+0x178>
 801a744:	2306      	movs	r3, #6
 801a746:	6063      	str	r3, [r4, #4]
 801a748:	9b05      	ldr	r3, [sp, #20]
 801a74a:	6861      	ldr	r1, [r4, #4]
 801a74c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a750:	2300      	movs	r3, #0
 801a752:	9303      	str	r3, [sp, #12]
 801a754:	ab0a      	add	r3, sp, #40	; 0x28
 801a756:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a75a:	ab09      	add	r3, sp, #36	; 0x24
 801a75c:	ec49 8b10 	vmov	d0, r8, r9
 801a760:	9300      	str	r3, [sp, #0]
 801a762:	6022      	str	r2, [r4, #0]
 801a764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a768:	4628      	mov	r0, r5
 801a76a:	f7ff fecf 	bl	801a50c <__cvt>
 801a76e:	9b06      	ldr	r3, [sp, #24]
 801a770:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a772:	2b47      	cmp	r3, #71	; 0x47
 801a774:	4680      	mov	r8, r0
 801a776:	d108      	bne.n	801a78a <_printf_float+0x13e>
 801a778:	1cc8      	adds	r0, r1, #3
 801a77a:	db02      	blt.n	801a782 <_printf_float+0x136>
 801a77c:	6863      	ldr	r3, [r4, #4]
 801a77e:	4299      	cmp	r1, r3
 801a780:	dd41      	ble.n	801a806 <_printf_float+0x1ba>
 801a782:	f1ab 0302 	sub.w	r3, fp, #2
 801a786:	fa5f fb83 	uxtb.w	fp, r3
 801a78a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a78e:	d820      	bhi.n	801a7d2 <_printf_float+0x186>
 801a790:	3901      	subs	r1, #1
 801a792:	465a      	mov	r2, fp
 801a794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a798:	9109      	str	r1, [sp, #36]	; 0x24
 801a79a:	f7ff ff19 	bl	801a5d0 <__exponent>
 801a79e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7a0:	1813      	adds	r3, r2, r0
 801a7a2:	2a01      	cmp	r2, #1
 801a7a4:	4681      	mov	r9, r0
 801a7a6:	6123      	str	r3, [r4, #16]
 801a7a8:	dc02      	bgt.n	801a7b0 <_printf_float+0x164>
 801a7aa:	6822      	ldr	r2, [r4, #0]
 801a7ac:	07d2      	lsls	r2, r2, #31
 801a7ae:	d501      	bpl.n	801a7b4 <_printf_float+0x168>
 801a7b0:	3301      	adds	r3, #1
 801a7b2:	6123      	str	r3, [r4, #16]
 801a7b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d09c      	beq.n	801a6f6 <_printf_float+0xaa>
 801a7bc:	232d      	movs	r3, #45	; 0x2d
 801a7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7c2:	e798      	b.n	801a6f6 <_printf_float+0xaa>
 801a7c4:	9a06      	ldr	r2, [sp, #24]
 801a7c6:	2a47      	cmp	r2, #71	; 0x47
 801a7c8:	d1be      	bne.n	801a748 <_printf_float+0xfc>
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d1bc      	bne.n	801a748 <_printf_float+0xfc>
 801a7ce:	2301      	movs	r3, #1
 801a7d0:	e7b9      	b.n	801a746 <_printf_float+0xfa>
 801a7d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a7d6:	d118      	bne.n	801a80a <_printf_float+0x1be>
 801a7d8:	2900      	cmp	r1, #0
 801a7da:	6863      	ldr	r3, [r4, #4]
 801a7dc:	dd0b      	ble.n	801a7f6 <_printf_float+0x1aa>
 801a7de:	6121      	str	r1, [r4, #16]
 801a7e0:	b913      	cbnz	r3, 801a7e8 <_printf_float+0x19c>
 801a7e2:	6822      	ldr	r2, [r4, #0]
 801a7e4:	07d0      	lsls	r0, r2, #31
 801a7e6:	d502      	bpl.n	801a7ee <_printf_float+0x1a2>
 801a7e8:	3301      	adds	r3, #1
 801a7ea:	440b      	add	r3, r1
 801a7ec:	6123      	str	r3, [r4, #16]
 801a7ee:	65a1      	str	r1, [r4, #88]	; 0x58
 801a7f0:	f04f 0900 	mov.w	r9, #0
 801a7f4:	e7de      	b.n	801a7b4 <_printf_float+0x168>
 801a7f6:	b913      	cbnz	r3, 801a7fe <_printf_float+0x1b2>
 801a7f8:	6822      	ldr	r2, [r4, #0]
 801a7fa:	07d2      	lsls	r2, r2, #31
 801a7fc:	d501      	bpl.n	801a802 <_printf_float+0x1b6>
 801a7fe:	3302      	adds	r3, #2
 801a800:	e7f4      	b.n	801a7ec <_printf_float+0x1a0>
 801a802:	2301      	movs	r3, #1
 801a804:	e7f2      	b.n	801a7ec <_printf_float+0x1a0>
 801a806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a80c:	4299      	cmp	r1, r3
 801a80e:	db05      	blt.n	801a81c <_printf_float+0x1d0>
 801a810:	6823      	ldr	r3, [r4, #0]
 801a812:	6121      	str	r1, [r4, #16]
 801a814:	07d8      	lsls	r0, r3, #31
 801a816:	d5ea      	bpl.n	801a7ee <_printf_float+0x1a2>
 801a818:	1c4b      	adds	r3, r1, #1
 801a81a:	e7e7      	b.n	801a7ec <_printf_float+0x1a0>
 801a81c:	2900      	cmp	r1, #0
 801a81e:	bfd4      	ite	le
 801a820:	f1c1 0202 	rsble	r2, r1, #2
 801a824:	2201      	movgt	r2, #1
 801a826:	4413      	add	r3, r2
 801a828:	e7e0      	b.n	801a7ec <_printf_float+0x1a0>
 801a82a:	6823      	ldr	r3, [r4, #0]
 801a82c:	055a      	lsls	r2, r3, #21
 801a82e:	d407      	bmi.n	801a840 <_printf_float+0x1f4>
 801a830:	6923      	ldr	r3, [r4, #16]
 801a832:	4642      	mov	r2, r8
 801a834:	4631      	mov	r1, r6
 801a836:	4628      	mov	r0, r5
 801a838:	47b8      	blx	r7
 801a83a:	3001      	adds	r0, #1
 801a83c:	d12c      	bne.n	801a898 <_printf_float+0x24c>
 801a83e:	e764      	b.n	801a70a <_printf_float+0xbe>
 801a840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a844:	f240 80e0 	bls.w	801aa08 <_printf_float+0x3bc>
 801a848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a84c:	2200      	movs	r2, #0
 801a84e:	2300      	movs	r3, #0
 801a850:	f7e6 f962 	bl	8000b18 <__aeabi_dcmpeq>
 801a854:	2800      	cmp	r0, #0
 801a856:	d034      	beq.n	801a8c2 <_printf_float+0x276>
 801a858:	4a37      	ldr	r2, [pc, #220]	; (801a938 <_printf_float+0x2ec>)
 801a85a:	2301      	movs	r3, #1
 801a85c:	4631      	mov	r1, r6
 801a85e:	4628      	mov	r0, r5
 801a860:	47b8      	blx	r7
 801a862:	3001      	adds	r0, #1
 801a864:	f43f af51 	beq.w	801a70a <_printf_float+0xbe>
 801a868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a86c:	429a      	cmp	r2, r3
 801a86e:	db02      	blt.n	801a876 <_printf_float+0x22a>
 801a870:	6823      	ldr	r3, [r4, #0]
 801a872:	07d8      	lsls	r0, r3, #31
 801a874:	d510      	bpl.n	801a898 <_printf_float+0x24c>
 801a876:	ee18 3a10 	vmov	r3, s16
 801a87a:	4652      	mov	r2, sl
 801a87c:	4631      	mov	r1, r6
 801a87e:	4628      	mov	r0, r5
 801a880:	47b8      	blx	r7
 801a882:	3001      	adds	r0, #1
 801a884:	f43f af41 	beq.w	801a70a <_printf_float+0xbe>
 801a888:	f04f 0800 	mov.w	r8, #0
 801a88c:	f104 091a 	add.w	r9, r4, #26
 801a890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a892:	3b01      	subs	r3, #1
 801a894:	4543      	cmp	r3, r8
 801a896:	dc09      	bgt.n	801a8ac <_printf_float+0x260>
 801a898:	6823      	ldr	r3, [r4, #0]
 801a89a:	079b      	lsls	r3, r3, #30
 801a89c:	f100 8107 	bmi.w	801aaae <_printf_float+0x462>
 801a8a0:	68e0      	ldr	r0, [r4, #12]
 801a8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8a4:	4298      	cmp	r0, r3
 801a8a6:	bfb8      	it	lt
 801a8a8:	4618      	movlt	r0, r3
 801a8aa:	e730      	b.n	801a70e <_printf_float+0xc2>
 801a8ac:	2301      	movs	r3, #1
 801a8ae:	464a      	mov	r2, r9
 801a8b0:	4631      	mov	r1, r6
 801a8b2:	4628      	mov	r0, r5
 801a8b4:	47b8      	blx	r7
 801a8b6:	3001      	adds	r0, #1
 801a8b8:	f43f af27 	beq.w	801a70a <_printf_float+0xbe>
 801a8bc:	f108 0801 	add.w	r8, r8, #1
 801a8c0:	e7e6      	b.n	801a890 <_printf_float+0x244>
 801a8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	dc39      	bgt.n	801a93c <_printf_float+0x2f0>
 801a8c8:	4a1b      	ldr	r2, [pc, #108]	; (801a938 <_printf_float+0x2ec>)
 801a8ca:	2301      	movs	r3, #1
 801a8cc:	4631      	mov	r1, r6
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	47b8      	blx	r7
 801a8d2:	3001      	adds	r0, #1
 801a8d4:	f43f af19 	beq.w	801a70a <_printf_float+0xbe>
 801a8d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a8dc:	4313      	orrs	r3, r2
 801a8de:	d102      	bne.n	801a8e6 <_printf_float+0x29a>
 801a8e0:	6823      	ldr	r3, [r4, #0]
 801a8e2:	07d9      	lsls	r1, r3, #31
 801a8e4:	d5d8      	bpl.n	801a898 <_printf_float+0x24c>
 801a8e6:	ee18 3a10 	vmov	r3, s16
 801a8ea:	4652      	mov	r2, sl
 801a8ec:	4631      	mov	r1, r6
 801a8ee:	4628      	mov	r0, r5
 801a8f0:	47b8      	blx	r7
 801a8f2:	3001      	adds	r0, #1
 801a8f4:	f43f af09 	beq.w	801a70a <_printf_float+0xbe>
 801a8f8:	f04f 0900 	mov.w	r9, #0
 801a8fc:	f104 0a1a 	add.w	sl, r4, #26
 801a900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a902:	425b      	negs	r3, r3
 801a904:	454b      	cmp	r3, r9
 801a906:	dc01      	bgt.n	801a90c <_printf_float+0x2c0>
 801a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a90a:	e792      	b.n	801a832 <_printf_float+0x1e6>
 801a90c:	2301      	movs	r3, #1
 801a90e:	4652      	mov	r2, sl
 801a910:	4631      	mov	r1, r6
 801a912:	4628      	mov	r0, r5
 801a914:	47b8      	blx	r7
 801a916:	3001      	adds	r0, #1
 801a918:	f43f aef7 	beq.w	801a70a <_printf_float+0xbe>
 801a91c:	f109 0901 	add.w	r9, r9, #1
 801a920:	e7ee      	b.n	801a900 <_printf_float+0x2b4>
 801a922:	bf00      	nop
 801a924:	7fefffff 	.word	0x7fefffff
 801a928:	08022df1 	.word	0x08022df1
 801a92c:	08022df5 	.word	0x08022df5
 801a930:	08022df9 	.word	0x08022df9
 801a934:	08022dfd 	.word	0x08022dfd
 801a938:	08022e01 	.word	0x08022e01
 801a93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a93e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a940:	429a      	cmp	r2, r3
 801a942:	bfa8      	it	ge
 801a944:	461a      	movge	r2, r3
 801a946:	2a00      	cmp	r2, #0
 801a948:	4691      	mov	r9, r2
 801a94a:	dc37      	bgt.n	801a9bc <_printf_float+0x370>
 801a94c:	f04f 0b00 	mov.w	fp, #0
 801a950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a954:	f104 021a 	add.w	r2, r4, #26
 801a958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a95a:	9305      	str	r3, [sp, #20]
 801a95c:	eba3 0309 	sub.w	r3, r3, r9
 801a960:	455b      	cmp	r3, fp
 801a962:	dc33      	bgt.n	801a9cc <_printf_float+0x380>
 801a964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a968:	429a      	cmp	r2, r3
 801a96a:	db3b      	blt.n	801a9e4 <_printf_float+0x398>
 801a96c:	6823      	ldr	r3, [r4, #0]
 801a96e:	07da      	lsls	r2, r3, #31
 801a970:	d438      	bmi.n	801a9e4 <_printf_float+0x398>
 801a972:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a976:	eba2 0903 	sub.w	r9, r2, r3
 801a97a:	9b05      	ldr	r3, [sp, #20]
 801a97c:	1ad2      	subs	r2, r2, r3
 801a97e:	4591      	cmp	r9, r2
 801a980:	bfa8      	it	ge
 801a982:	4691      	movge	r9, r2
 801a984:	f1b9 0f00 	cmp.w	r9, #0
 801a988:	dc35      	bgt.n	801a9f6 <_printf_float+0x3aa>
 801a98a:	f04f 0800 	mov.w	r8, #0
 801a98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a992:	f104 0a1a 	add.w	sl, r4, #26
 801a996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a99a:	1a9b      	subs	r3, r3, r2
 801a99c:	eba3 0309 	sub.w	r3, r3, r9
 801a9a0:	4543      	cmp	r3, r8
 801a9a2:	f77f af79 	ble.w	801a898 <_printf_float+0x24c>
 801a9a6:	2301      	movs	r3, #1
 801a9a8:	4652      	mov	r2, sl
 801a9aa:	4631      	mov	r1, r6
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	47b8      	blx	r7
 801a9b0:	3001      	adds	r0, #1
 801a9b2:	f43f aeaa 	beq.w	801a70a <_printf_float+0xbe>
 801a9b6:	f108 0801 	add.w	r8, r8, #1
 801a9ba:	e7ec      	b.n	801a996 <_printf_float+0x34a>
 801a9bc:	4613      	mov	r3, r2
 801a9be:	4631      	mov	r1, r6
 801a9c0:	4642      	mov	r2, r8
 801a9c2:	4628      	mov	r0, r5
 801a9c4:	47b8      	blx	r7
 801a9c6:	3001      	adds	r0, #1
 801a9c8:	d1c0      	bne.n	801a94c <_printf_float+0x300>
 801a9ca:	e69e      	b.n	801a70a <_printf_float+0xbe>
 801a9cc:	2301      	movs	r3, #1
 801a9ce:	4631      	mov	r1, r6
 801a9d0:	4628      	mov	r0, r5
 801a9d2:	9205      	str	r2, [sp, #20]
 801a9d4:	47b8      	blx	r7
 801a9d6:	3001      	adds	r0, #1
 801a9d8:	f43f ae97 	beq.w	801a70a <_printf_float+0xbe>
 801a9dc:	9a05      	ldr	r2, [sp, #20]
 801a9de:	f10b 0b01 	add.w	fp, fp, #1
 801a9e2:	e7b9      	b.n	801a958 <_printf_float+0x30c>
 801a9e4:	ee18 3a10 	vmov	r3, s16
 801a9e8:	4652      	mov	r2, sl
 801a9ea:	4631      	mov	r1, r6
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	47b8      	blx	r7
 801a9f0:	3001      	adds	r0, #1
 801a9f2:	d1be      	bne.n	801a972 <_printf_float+0x326>
 801a9f4:	e689      	b.n	801a70a <_printf_float+0xbe>
 801a9f6:	9a05      	ldr	r2, [sp, #20]
 801a9f8:	464b      	mov	r3, r9
 801a9fa:	4442      	add	r2, r8
 801a9fc:	4631      	mov	r1, r6
 801a9fe:	4628      	mov	r0, r5
 801aa00:	47b8      	blx	r7
 801aa02:	3001      	adds	r0, #1
 801aa04:	d1c1      	bne.n	801a98a <_printf_float+0x33e>
 801aa06:	e680      	b.n	801a70a <_printf_float+0xbe>
 801aa08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa0a:	2a01      	cmp	r2, #1
 801aa0c:	dc01      	bgt.n	801aa12 <_printf_float+0x3c6>
 801aa0e:	07db      	lsls	r3, r3, #31
 801aa10:	d53a      	bpl.n	801aa88 <_printf_float+0x43c>
 801aa12:	2301      	movs	r3, #1
 801aa14:	4642      	mov	r2, r8
 801aa16:	4631      	mov	r1, r6
 801aa18:	4628      	mov	r0, r5
 801aa1a:	47b8      	blx	r7
 801aa1c:	3001      	adds	r0, #1
 801aa1e:	f43f ae74 	beq.w	801a70a <_printf_float+0xbe>
 801aa22:	ee18 3a10 	vmov	r3, s16
 801aa26:	4652      	mov	r2, sl
 801aa28:	4631      	mov	r1, r6
 801aa2a:	4628      	mov	r0, r5
 801aa2c:	47b8      	blx	r7
 801aa2e:	3001      	adds	r0, #1
 801aa30:	f43f ae6b 	beq.w	801a70a <_printf_float+0xbe>
 801aa34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aa38:	2200      	movs	r2, #0
 801aa3a:	2300      	movs	r3, #0
 801aa3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801aa40:	f7e6 f86a 	bl	8000b18 <__aeabi_dcmpeq>
 801aa44:	b9d8      	cbnz	r0, 801aa7e <_printf_float+0x432>
 801aa46:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801aa4a:	f108 0201 	add.w	r2, r8, #1
 801aa4e:	4631      	mov	r1, r6
 801aa50:	4628      	mov	r0, r5
 801aa52:	47b8      	blx	r7
 801aa54:	3001      	adds	r0, #1
 801aa56:	d10e      	bne.n	801aa76 <_printf_float+0x42a>
 801aa58:	e657      	b.n	801a70a <_printf_float+0xbe>
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	4652      	mov	r2, sl
 801aa5e:	4631      	mov	r1, r6
 801aa60:	4628      	mov	r0, r5
 801aa62:	47b8      	blx	r7
 801aa64:	3001      	adds	r0, #1
 801aa66:	f43f ae50 	beq.w	801a70a <_printf_float+0xbe>
 801aa6a:	f108 0801 	add.w	r8, r8, #1
 801aa6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa70:	3b01      	subs	r3, #1
 801aa72:	4543      	cmp	r3, r8
 801aa74:	dcf1      	bgt.n	801aa5a <_printf_float+0x40e>
 801aa76:	464b      	mov	r3, r9
 801aa78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801aa7c:	e6da      	b.n	801a834 <_printf_float+0x1e8>
 801aa7e:	f04f 0800 	mov.w	r8, #0
 801aa82:	f104 0a1a 	add.w	sl, r4, #26
 801aa86:	e7f2      	b.n	801aa6e <_printf_float+0x422>
 801aa88:	2301      	movs	r3, #1
 801aa8a:	4642      	mov	r2, r8
 801aa8c:	e7df      	b.n	801aa4e <_printf_float+0x402>
 801aa8e:	2301      	movs	r3, #1
 801aa90:	464a      	mov	r2, r9
 801aa92:	4631      	mov	r1, r6
 801aa94:	4628      	mov	r0, r5
 801aa96:	47b8      	blx	r7
 801aa98:	3001      	adds	r0, #1
 801aa9a:	f43f ae36 	beq.w	801a70a <_printf_float+0xbe>
 801aa9e:	f108 0801 	add.w	r8, r8, #1
 801aaa2:	68e3      	ldr	r3, [r4, #12]
 801aaa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801aaa6:	1a5b      	subs	r3, r3, r1
 801aaa8:	4543      	cmp	r3, r8
 801aaaa:	dcf0      	bgt.n	801aa8e <_printf_float+0x442>
 801aaac:	e6f8      	b.n	801a8a0 <_printf_float+0x254>
 801aaae:	f04f 0800 	mov.w	r8, #0
 801aab2:	f104 0919 	add.w	r9, r4, #25
 801aab6:	e7f4      	b.n	801aaa2 <_printf_float+0x456>

0801aab8 <_printf_common>:
 801aab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aabc:	4616      	mov	r6, r2
 801aabe:	4699      	mov	r9, r3
 801aac0:	688a      	ldr	r2, [r1, #8]
 801aac2:	690b      	ldr	r3, [r1, #16]
 801aac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aac8:	4293      	cmp	r3, r2
 801aaca:	bfb8      	it	lt
 801aacc:	4613      	movlt	r3, r2
 801aace:	6033      	str	r3, [r6, #0]
 801aad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aad4:	4607      	mov	r7, r0
 801aad6:	460c      	mov	r4, r1
 801aad8:	b10a      	cbz	r2, 801aade <_printf_common+0x26>
 801aada:	3301      	adds	r3, #1
 801aadc:	6033      	str	r3, [r6, #0]
 801aade:	6823      	ldr	r3, [r4, #0]
 801aae0:	0699      	lsls	r1, r3, #26
 801aae2:	bf42      	ittt	mi
 801aae4:	6833      	ldrmi	r3, [r6, #0]
 801aae6:	3302      	addmi	r3, #2
 801aae8:	6033      	strmi	r3, [r6, #0]
 801aaea:	6825      	ldr	r5, [r4, #0]
 801aaec:	f015 0506 	ands.w	r5, r5, #6
 801aaf0:	d106      	bne.n	801ab00 <_printf_common+0x48>
 801aaf2:	f104 0a19 	add.w	sl, r4, #25
 801aaf6:	68e3      	ldr	r3, [r4, #12]
 801aaf8:	6832      	ldr	r2, [r6, #0]
 801aafa:	1a9b      	subs	r3, r3, r2
 801aafc:	42ab      	cmp	r3, r5
 801aafe:	dc26      	bgt.n	801ab4e <_printf_common+0x96>
 801ab00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ab04:	1e13      	subs	r3, r2, #0
 801ab06:	6822      	ldr	r2, [r4, #0]
 801ab08:	bf18      	it	ne
 801ab0a:	2301      	movne	r3, #1
 801ab0c:	0692      	lsls	r2, r2, #26
 801ab0e:	d42b      	bmi.n	801ab68 <_printf_common+0xb0>
 801ab10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab14:	4649      	mov	r1, r9
 801ab16:	4638      	mov	r0, r7
 801ab18:	47c0      	blx	r8
 801ab1a:	3001      	adds	r0, #1
 801ab1c:	d01e      	beq.n	801ab5c <_printf_common+0xa4>
 801ab1e:	6823      	ldr	r3, [r4, #0]
 801ab20:	6922      	ldr	r2, [r4, #16]
 801ab22:	f003 0306 	and.w	r3, r3, #6
 801ab26:	2b04      	cmp	r3, #4
 801ab28:	bf02      	ittt	eq
 801ab2a:	68e5      	ldreq	r5, [r4, #12]
 801ab2c:	6833      	ldreq	r3, [r6, #0]
 801ab2e:	1aed      	subeq	r5, r5, r3
 801ab30:	68a3      	ldr	r3, [r4, #8]
 801ab32:	bf0c      	ite	eq
 801ab34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab38:	2500      	movne	r5, #0
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	bfc4      	itt	gt
 801ab3e:	1a9b      	subgt	r3, r3, r2
 801ab40:	18ed      	addgt	r5, r5, r3
 801ab42:	2600      	movs	r6, #0
 801ab44:	341a      	adds	r4, #26
 801ab46:	42b5      	cmp	r5, r6
 801ab48:	d11a      	bne.n	801ab80 <_printf_common+0xc8>
 801ab4a:	2000      	movs	r0, #0
 801ab4c:	e008      	b.n	801ab60 <_printf_common+0xa8>
 801ab4e:	2301      	movs	r3, #1
 801ab50:	4652      	mov	r2, sl
 801ab52:	4649      	mov	r1, r9
 801ab54:	4638      	mov	r0, r7
 801ab56:	47c0      	blx	r8
 801ab58:	3001      	adds	r0, #1
 801ab5a:	d103      	bne.n	801ab64 <_printf_common+0xac>
 801ab5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab64:	3501      	adds	r5, #1
 801ab66:	e7c6      	b.n	801aaf6 <_printf_common+0x3e>
 801ab68:	18e1      	adds	r1, r4, r3
 801ab6a:	1c5a      	adds	r2, r3, #1
 801ab6c:	2030      	movs	r0, #48	; 0x30
 801ab6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab72:	4422      	add	r2, r4
 801ab74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab7c:	3302      	adds	r3, #2
 801ab7e:	e7c7      	b.n	801ab10 <_printf_common+0x58>
 801ab80:	2301      	movs	r3, #1
 801ab82:	4622      	mov	r2, r4
 801ab84:	4649      	mov	r1, r9
 801ab86:	4638      	mov	r0, r7
 801ab88:	47c0      	blx	r8
 801ab8a:	3001      	adds	r0, #1
 801ab8c:	d0e6      	beq.n	801ab5c <_printf_common+0xa4>
 801ab8e:	3601      	adds	r6, #1
 801ab90:	e7d9      	b.n	801ab46 <_printf_common+0x8e>
	...

0801ab94 <_printf_i>:
 801ab94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab98:	7e0f      	ldrb	r7, [r1, #24]
 801ab9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ab9c:	2f78      	cmp	r7, #120	; 0x78
 801ab9e:	4691      	mov	r9, r2
 801aba0:	4680      	mov	r8, r0
 801aba2:	460c      	mov	r4, r1
 801aba4:	469a      	mov	sl, r3
 801aba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801abaa:	d807      	bhi.n	801abbc <_printf_i+0x28>
 801abac:	2f62      	cmp	r7, #98	; 0x62
 801abae:	d80a      	bhi.n	801abc6 <_printf_i+0x32>
 801abb0:	2f00      	cmp	r7, #0
 801abb2:	f000 80d4 	beq.w	801ad5e <_printf_i+0x1ca>
 801abb6:	2f58      	cmp	r7, #88	; 0x58
 801abb8:	f000 80c0 	beq.w	801ad3c <_printf_i+0x1a8>
 801abbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801abc4:	e03a      	b.n	801ac3c <_printf_i+0xa8>
 801abc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801abca:	2b15      	cmp	r3, #21
 801abcc:	d8f6      	bhi.n	801abbc <_printf_i+0x28>
 801abce:	a101      	add	r1, pc, #4	; (adr r1, 801abd4 <_printf_i+0x40>)
 801abd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801abd4:	0801ac2d 	.word	0x0801ac2d
 801abd8:	0801ac41 	.word	0x0801ac41
 801abdc:	0801abbd 	.word	0x0801abbd
 801abe0:	0801abbd 	.word	0x0801abbd
 801abe4:	0801abbd 	.word	0x0801abbd
 801abe8:	0801abbd 	.word	0x0801abbd
 801abec:	0801ac41 	.word	0x0801ac41
 801abf0:	0801abbd 	.word	0x0801abbd
 801abf4:	0801abbd 	.word	0x0801abbd
 801abf8:	0801abbd 	.word	0x0801abbd
 801abfc:	0801abbd 	.word	0x0801abbd
 801ac00:	0801ad45 	.word	0x0801ad45
 801ac04:	0801ac6d 	.word	0x0801ac6d
 801ac08:	0801acff 	.word	0x0801acff
 801ac0c:	0801abbd 	.word	0x0801abbd
 801ac10:	0801abbd 	.word	0x0801abbd
 801ac14:	0801ad67 	.word	0x0801ad67
 801ac18:	0801abbd 	.word	0x0801abbd
 801ac1c:	0801ac6d 	.word	0x0801ac6d
 801ac20:	0801abbd 	.word	0x0801abbd
 801ac24:	0801abbd 	.word	0x0801abbd
 801ac28:	0801ad07 	.word	0x0801ad07
 801ac2c:	682b      	ldr	r3, [r5, #0]
 801ac2e:	1d1a      	adds	r2, r3, #4
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	602a      	str	r2, [r5, #0]
 801ac34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	e09f      	b.n	801ad80 <_printf_i+0x1ec>
 801ac40:	6820      	ldr	r0, [r4, #0]
 801ac42:	682b      	ldr	r3, [r5, #0]
 801ac44:	0607      	lsls	r7, r0, #24
 801ac46:	f103 0104 	add.w	r1, r3, #4
 801ac4a:	6029      	str	r1, [r5, #0]
 801ac4c:	d501      	bpl.n	801ac52 <_printf_i+0xbe>
 801ac4e:	681e      	ldr	r6, [r3, #0]
 801ac50:	e003      	b.n	801ac5a <_printf_i+0xc6>
 801ac52:	0646      	lsls	r6, r0, #25
 801ac54:	d5fb      	bpl.n	801ac4e <_printf_i+0xba>
 801ac56:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ac5a:	2e00      	cmp	r6, #0
 801ac5c:	da03      	bge.n	801ac66 <_printf_i+0xd2>
 801ac5e:	232d      	movs	r3, #45	; 0x2d
 801ac60:	4276      	negs	r6, r6
 801ac62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac66:	485a      	ldr	r0, [pc, #360]	; (801add0 <_printf_i+0x23c>)
 801ac68:	230a      	movs	r3, #10
 801ac6a:	e012      	b.n	801ac92 <_printf_i+0xfe>
 801ac6c:	682b      	ldr	r3, [r5, #0]
 801ac6e:	6820      	ldr	r0, [r4, #0]
 801ac70:	1d19      	adds	r1, r3, #4
 801ac72:	6029      	str	r1, [r5, #0]
 801ac74:	0605      	lsls	r5, r0, #24
 801ac76:	d501      	bpl.n	801ac7c <_printf_i+0xe8>
 801ac78:	681e      	ldr	r6, [r3, #0]
 801ac7a:	e002      	b.n	801ac82 <_printf_i+0xee>
 801ac7c:	0641      	lsls	r1, r0, #25
 801ac7e:	d5fb      	bpl.n	801ac78 <_printf_i+0xe4>
 801ac80:	881e      	ldrh	r6, [r3, #0]
 801ac82:	4853      	ldr	r0, [pc, #332]	; (801add0 <_printf_i+0x23c>)
 801ac84:	2f6f      	cmp	r7, #111	; 0x6f
 801ac86:	bf0c      	ite	eq
 801ac88:	2308      	moveq	r3, #8
 801ac8a:	230a      	movne	r3, #10
 801ac8c:	2100      	movs	r1, #0
 801ac8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac92:	6865      	ldr	r5, [r4, #4]
 801ac94:	60a5      	str	r5, [r4, #8]
 801ac96:	2d00      	cmp	r5, #0
 801ac98:	bfa2      	ittt	ge
 801ac9a:	6821      	ldrge	r1, [r4, #0]
 801ac9c:	f021 0104 	bicge.w	r1, r1, #4
 801aca0:	6021      	strge	r1, [r4, #0]
 801aca2:	b90e      	cbnz	r6, 801aca8 <_printf_i+0x114>
 801aca4:	2d00      	cmp	r5, #0
 801aca6:	d04b      	beq.n	801ad40 <_printf_i+0x1ac>
 801aca8:	4615      	mov	r5, r2
 801acaa:	fbb6 f1f3 	udiv	r1, r6, r3
 801acae:	fb03 6711 	mls	r7, r3, r1, r6
 801acb2:	5dc7      	ldrb	r7, [r0, r7]
 801acb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801acb8:	4637      	mov	r7, r6
 801acba:	42bb      	cmp	r3, r7
 801acbc:	460e      	mov	r6, r1
 801acbe:	d9f4      	bls.n	801acaa <_printf_i+0x116>
 801acc0:	2b08      	cmp	r3, #8
 801acc2:	d10b      	bne.n	801acdc <_printf_i+0x148>
 801acc4:	6823      	ldr	r3, [r4, #0]
 801acc6:	07de      	lsls	r6, r3, #31
 801acc8:	d508      	bpl.n	801acdc <_printf_i+0x148>
 801acca:	6923      	ldr	r3, [r4, #16]
 801accc:	6861      	ldr	r1, [r4, #4]
 801acce:	4299      	cmp	r1, r3
 801acd0:	bfde      	ittt	le
 801acd2:	2330      	movle	r3, #48	; 0x30
 801acd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801acd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801acdc:	1b52      	subs	r2, r2, r5
 801acde:	6122      	str	r2, [r4, #16]
 801ace0:	f8cd a000 	str.w	sl, [sp]
 801ace4:	464b      	mov	r3, r9
 801ace6:	aa03      	add	r2, sp, #12
 801ace8:	4621      	mov	r1, r4
 801acea:	4640      	mov	r0, r8
 801acec:	f7ff fee4 	bl	801aab8 <_printf_common>
 801acf0:	3001      	adds	r0, #1
 801acf2:	d14a      	bne.n	801ad8a <_printf_i+0x1f6>
 801acf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acf8:	b004      	add	sp, #16
 801acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acfe:	6823      	ldr	r3, [r4, #0]
 801ad00:	f043 0320 	orr.w	r3, r3, #32
 801ad04:	6023      	str	r3, [r4, #0]
 801ad06:	4833      	ldr	r0, [pc, #204]	; (801add4 <_printf_i+0x240>)
 801ad08:	2778      	movs	r7, #120	; 0x78
 801ad0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ad0e:	6823      	ldr	r3, [r4, #0]
 801ad10:	6829      	ldr	r1, [r5, #0]
 801ad12:	061f      	lsls	r7, r3, #24
 801ad14:	f851 6b04 	ldr.w	r6, [r1], #4
 801ad18:	d402      	bmi.n	801ad20 <_printf_i+0x18c>
 801ad1a:	065f      	lsls	r7, r3, #25
 801ad1c:	bf48      	it	mi
 801ad1e:	b2b6      	uxthmi	r6, r6
 801ad20:	07df      	lsls	r7, r3, #31
 801ad22:	bf48      	it	mi
 801ad24:	f043 0320 	orrmi.w	r3, r3, #32
 801ad28:	6029      	str	r1, [r5, #0]
 801ad2a:	bf48      	it	mi
 801ad2c:	6023      	strmi	r3, [r4, #0]
 801ad2e:	b91e      	cbnz	r6, 801ad38 <_printf_i+0x1a4>
 801ad30:	6823      	ldr	r3, [r4, #0]
 801ad32:	f023 0320 	bic.w	r3, r3, #32
 801ad36:	6023      	str	r3, [r4, #0]
 801ad38:	2310      	movs	r3, #16
 801ad3a:	e7a7      	b.n	801ac8c <_printf_i+0xf8>
 801ad3c:	4824      	ldr	r0, [pc, #144]	; (801add0 <_printf_i+0x23c>)
 801ad3e:	e7e4      	b.n	801ad0a <_printf_i+0x176>
 801ad40:	4615      	mov	r5, r2
 801ad42:	e7bd      	b.n	801acc0 <_printf_i+0x12c>
 801ad44:	682b      	ldr	r3, [r5, #0]
 801ad46:	6826      	ldr	r6, [r4, #0]
 801ad48:	6961      	ldr	r1, [r4, #20]
 801ad4a:	1d18      	adds	r0, r3, #4
 801ad4c:	6028      	str	r0, [r5, #0]
 801ad4e:	0635      	lsls	r5, r6, #24
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	d501      	bpl.n	801ad58 <_printf_i+0x1c4>
 801ad54:	6019      	str	r1, [r3, #0]
 801ad56:	e002      	b.n	801ad5e <_printf_i+0x1ca>
 801ad58:	0670      	lsls	r0, r6, #25
 801ad5a:	d5fb      	bpl.n	801ad54 <_printf_i+0x1c0>
 801ad5c:	8019      	strh	r1, [r3, #0]
 801ad5e:	2300      	movs	r3, #0
 801ad60:	6123      	str	r3, [r4, #16]
 801ad62:	4615      	mov	r5, r2
 801ad64:	e7bc      	b.n	801ace0 <_printf_i+0x14c>
 801ad66:	682b      	ldr	r3, [r5, #0]
 801ad68:	1d1a      	adds	r2, r3, #4
 801ad6a:	602a      	str	r2, [r5, #0]
 801ad6c:	681d      	ldr	r5, [r3, #0]
 801ad6e:	6862      	ldr	r2, [r4, #4]
 801ad70:	2100      	movs	r1, #0
 801ad72:	4628      	mov	r0, r5
 801ad74:	f7e5 fa54 	bl	8000220 <memchr>
 801ad78:	b108      	cbz	r0, 801ad7e <_printf_i+0x1ea>
 801ad7a:	1b40      	subs	r0, r0, r5
 801ad7c:	6060      	str	r0, [r4, #4]
 801ad7e:	6863      	ldr	r3, [r4, #4]
 801ad80:	6123      	str	r3, [r4, #16]
 801ad82:	2300      	movs	r3, #0
 801ad84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad88:	e7aa      	b.n	801ace0 <_printf_i+0x14c>
 801ad8a:	6923      	ldr	r3, [r4, #16]
 801ad8c:	462a      	mov	r2, r5
 801ad8e:	4649      	mov	r1, r9
 801ad90:	4640      	mov	r0, r8
 801ad92:	47d0      	blx	sl
 801ad94:	3001      	adds	r0, #1
 801ad96:	d0ad      	beq.n	801acf4 <_printf_i+0x160>
 801ad98:	6823      	ldr	r3, [r4, #0]
 801ad9a:	079b      	lsls	r3, r3, #30
 801ad9c:	d413      	bmi.n	801adc6 <_printf_i+0x232>
 801ad9e:	68e0      	ldr	r0, [r4, #12]
 801ada0:	9b03      	ldr	r3, [sp, #12]
 801ada2:	4298      	cmp	r0, r3
 801ada4:	bfb8      	it	lt
 801ada6:	4618      	movlt	r0, r3
 801ada8:	e7a6      	b.n	801acf8 <_printf_i+0x164>
 801adaa:	2301      	movs	r3, #1
 801adac:	4632      	mov	r2, r6
 801adae:	4649      	mov	r1, r9
 801adb0:	4640      	mov	r0, r8
 801adb2:	47d0      	blx	sl
 801adb4:	3001      	adds	r0, #1
 801adb6:	d09d      	beq.n	801acf4 <_printf_i+0x160>
 801adb8:	3501      	adds	r5, #1
 801adba:	68e3      	ldr	r3, [r4, #12]
 801adbc:	9903      	ldr	r1, [sp, #12]
 801adbe:	1a5b      	subs	r3, r3, r1
 801adc0:	42ab      	cmp	r3, r5
 801adc2:	dcf2      	bgt.n	801adaa <_printf_i+0x216>
 801adc4:	e7eb      	b.n	801ad9e <_printf_i+0x20a>
 801adc6:	2500      	movs	r5, #0
 801adc8:	f104 0619 	add.w	r6, r4, #25
 801adcc:	e7f5      	b.n	801adba <_printf_i+0x226>
 801adce:	bf00      	nop
 801add0:	08022e03 	.word	0x08022e03
 801add4:	08022e14 	.word	0x08022e14

0801add8 <_scanf_float>:
 801add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801addc:	b087      	sub	sp, #28
 801adde:	4617      	mov	r7, r2
 801ade0:	9303      	str	r3, [sp, #12]
 801ade2:	688b      	ldr	r3, [r1, #8]
 801ade4:	1e5a      	subs	r2, r3, #1
 801ade6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801adea:	bf83      	ittte	hi
 801adec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801adf0:	195b      	addhi	r3, r3, r5
 801adf2:	9302      	strhi	r3, [sp, #8]
 801adf4:	2300      	movls	r3, #0
 801adf6:	bf86      	itte	hi
 801adf8:	f240 135d 	movwhi	r3, #349	; 0x15d
 801adfc:	608b      	strhi	r3, [r1, #8]
 801adfe:	9302      	strls	r3, [sp, #8]
 801ae00:	680b      	ldr	r3, [r1, #0]
 801ae02:	468b      	mov	fp, r1
 801ae04:	2500      	movs	r5, #0
 801ae06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ae0a:	f84b 3b1c 	str.w	r3, [fp], #28
 801ae0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ae12:	4680      	mov	r8, r0
 801ae14:	460c      	mov	r4, r1
 801ae16:	465e      	mov	r6, fp
 801ae18:	46aa      	mov	sl, r5
 801ae1a:	46a9      	mov	r9, r5
 801ae1c:	9501      	str	r5, [sp, #4]
 801ae1e:	68a2      	ldr	r2, [r4, #8]
 801ae20:	b152      	cbz	r2, 801ae38 <_scanf_float+0x60>
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	781b      	ldrb	r3, [r3, #0]
 801ae26:	2b4e      	cmp	r3, #78	; 0x4e
 801ae28:	d864      	bhi.n	801aef4 <_scanf_float+0x11c>
 801ae2a:	2b40      	cmp	r3, #64	; 0x40
 801ae2c:	d83c      	bhi.n	801aea8 <_scanf_float+0xd0>
 801ae2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ae32:	b2c8      	uxtb	r0, r1
 801ae34:	280e      	cmp	r0, #14
 801ae36:	d93a      	bls.n	801aeae <_scanf_float+0xd6>
 801ae38:	f1b9 0f00 	cmp.w	r9, #0
 801ae3c:	d003      	beq.n	801ae46 <_scanf_float+0x6e>
 801ae3e:	6823      	ldr	r3, [r4, #0]
 801ae40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ae44:	6023      	str	r3, [r4, #0]
 801ae46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ae4a:	f1ba 0f01 	cmp.w	sl, #1
 801ae4e:	f200 8113 	bhi.w	801b078 <_scanf_float+0x2a0>
 801ae52:	455e      	cmp	r6, fp
 801ae54:	f200 8105 	bhi.w	801b062 <_scanf_float+0x28a>
 801ae58:	2501      	movs	r5, #1
 801ae5a:	4628      	mov	r0, r5
 801ae5c:	b007      	add	sp, #28
 801ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ae66:	2a0d      	cmp	r2, #13
 801ae68:	d8e6      	bhi.n	801ae38 <_scanf_float+0x60>
 801ae6a:	a101      	add	r1, pc, #4	; (adr r1, 801ae70 <_scanf_float+0x98>)
 801ae6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ae70:	0801afaf 	.word	0x0801afaf
 801ae74:	0801ae39 	.word	0x0801ae39
 801ae78:	0801ae39 	.word	0x0801ae39
 801ae7c:	0801ae39 	.word	0x0801ae39
 801ae80:	0801b00f 	.word	0x0801b00f
 801ae84:	0801afe7 	.word	0x0801afe7
 801ae88:	0801ae39 	.word	0x0801ae39
 801ae8c:	0801ae39 	.word	0x0801ae39
 801ae90:	0801afbd 	.word	0x0801afbd
 801ae94:	0801ae39 	.word	0x0801ae39
 801ae98:	0801ae39 	.word	0x0801ae39
 801ae9c:	0801ae39 	.word	0x0801ae39
 801aea0:	0801ae39 	.word	0x0801ae39
 801aea4:	0801af75 	.word	0x0801af75
 801aea8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801aeac:	e7db      	b.n	801ae66 <_scanf_float+0x8e>
 801aeae:	290e      	cmp	r1, #14
 801aeb0:	d8c2      	bhi.n	801ae38 <_scanf_float+0x60>
 801aeb2:	a001      	add	r0, pc, #4	; (adr r0, 801aeb8 <_scanf_float+0xe0>)
 801aeb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801aeb8:	0801af67 	.word	0x0801af67
 801aebc:	0801ae39 	.word	0x0801ae39
 801aec0:	0801af67 	.word	0x0801af67
 801aec4:	0801affb 	.word	0x0801affb
 801aec8:	0801ae39 	.word	0x0801ae39
 801aecc:	0801af15 	.word	0x0801af15
 801aed0:	0801af51 	.word	0x0801af51
 801aed4:	0801af51 	.word	0x0801af51
 801aed8:	0801af51 	.word	0x0801af51
 801aedc:	0801af51 	.word	0x0801af51
 801aee0:	0801af51 	.word	0x0801af51
 801aee4:	0801af51 	.word	0x0801af51
 801aee8:	0801af51 	.word	0x0801af51
 801aeec:	0801af51 	.word	0x0801af51
 801aef0:	0801af51 	.word	0x0801af51
 801aef4:	2b6e      	cmp	r3, #110	; 0x6e
 801aef6:	d809      	bhi.n	801af0c <_scanf_float+0x134>
 801aef8:	2b60      	cmp	r3, #96	; 0x60
 801aefa:	d8b2      	bhi.n	801ae62 <_scanf_float+0x8a>
 801aefc:	2b54      	cmp	r3, #84	; 0x54
 801aefe:	d077      	beq.n	801aff0 <_scanf_float+0x218>
 801af00:	2b59      	cmp	r3, #89	; 0x59
 801af02:	d199      	bne.n	801ae38 <_scanf_float+0x60>
 801af04:	2d07      	cmp	r5, #7
 801af06:	d197      	bne.n	801ae38 <_scanf_float+0x60>
 801af08:	2508      	movs	r5, #8
 801af0a:	e029      	b.n	801af60 <_scanf_float+0x188>
 801af0c:	2b74      	cmp	r3, #116	; 0x74
 801af0e:	d06f      	beq.n	801aff0 <_scanf_float+0x218>
 801af10:	2b79      	cmp	r3, #121	; 0x79
 801af12:	e7f6      	b.n	801af02 <_scanf_float+0x12a>
 801af14:	6821      	ldr	r1, [r4, #0]
 801af16:	05c8      	lsls	r0, r1, #23
 801af18:	d51a      	bpl.n	801af50 <_scanf_float+0x178>
 801af1a:	9b02      	ldr	r3, [sp, #8]
 801af1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801af20:	6021      	str	r1, [r4, #0]
 801af22:	f109 0901 	add.w	r9, r9, #1
 801af26:	b11b      	cbz	r3, 801af30 <_scanf_float+0x158>
 801af28:	3b01      	subs	r3, #1
 801af2a:	3201      	adds	r2, #1
 801af2c:	9302      	str	r3, [sp, #8]
 801af2e:	60a2      	str	r2, [r4, #8]
 801af30:	68a3      	ldr	r3, [r4, #8]
 801af32:	3b01      	subs	r3, #1
 801af34:	60a3      	str	r3, [r4, #8]
 801af36:	6923      	ldr	r3, [r4, #16]
 801af38:	3301      	adds	r3, #1
 801af3a:	6123      	str	r3, [r4, #16]
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	3b01      	subs	r3, #1
 801af40:	2b00      	cmp	r3, #0
 801af42:	607b      	str	r3, [r7, #4]
 801af44:	f340 8084 	ble.w	801b050 <_scanf_float+0x278>
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	3301      	adds	r3, #1
 801af4c:	603b      	str	r3, [r7, #0]
 801af4e:	e766      	b.n	801ae1e <_scanf_float+0x46>
 801af50:	eb1a 0f05 	cmn.w	sl, r5
 801af54:	f47f af70 	bne.w	801ae38 <_scanf_float+0x60>
 801af58:	6822      	ldr	r2, [r4, #0]
 801af5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801af5e:	6022      	str	r2, [r4, #0]
 801af60:	f806 3b01 	strb.w	r3, [r6], #1
 801af64:	e7e4      	b.n	801af30 <_scanf_float+0x158>
 801af66:	6822      	ldr	r2, [r4, #0]
 801af68:	0610      	lsls	r0, r2, #24
 801af6a:	f57f af65 	bpl.w	801ae38 <_scanf_float+0x60>
 801af6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801af72:	e7f4      	b.n	801af5e <_scanf_float+0x186>
 801af74:	f1ba 0f00 	cmp.w	sl, #0
 801af78:	d10e      	bne.n	801af98 <_scanf_float+0x1c0>
 801af7a:	f1b9 0f00 	cmp.w	r9, #0
 801af7e:	d10e      	bne.n	801af9e <_scanf_float+0x1c6>
 801af80:	6822      	ldr	r2, [r4, #0]
 801af82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801af86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801af8a:	d108      	bne.n	801af9e <_scanf_float+0x1c6>
 801af8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801af90:	6022      	str	r2, [r4, #0]
 801af92:	f04f 0a01 	mov.w	sl, #1
 801af96:	e7e3      	b.n	801af60 <_scanf_float+0x188>
 801af98:	f1ba 0f02 	cmp.w	sl, #2
 801af9c:	d055      	beq.n	801b04a <_scanf_float+0x272>
 801af9e:	2d01      	cmp	r5, #1
 801afa0:	d002      	beq.n	801afa8 <_scanf_float+0x1d0>
 801afa2:	2d04      	cmp	r5, #4
 801afa4:	f47f af48 	bne.w	801ae38 <_scanf_float+0x60>
 801afa8:	3501      	adds	r5, #1
 801afaa:	b2ed      	uxtb	r5, r5
 801afac:	e7d8      	b.n	801af60 <_scanf_float+0x188>
 801afae:	f1ba 0f01 	cmp.w	sl, #1
 801afb2:	f47f af41 	bne.w	801ae38 <_scanf_float+0x60>
 801afb6:	f04f 0a02 	mov.w	sl, #2
 801afba:	e7d1      	b.n	801af60 <_scanf_float+0x188>
 801afbc:	b97d      	cbnz	r5, 801afde <_scanf_float+0x206>
 801afbe:	f1b9 0f00 	cmp.w	r9, #0
 801afc2:	f47f af3c 	bne.w	801ae3e <_scanf_float+0x66>
 801afc6:	6822      	ldr	r2, [r4, #0]
 801afc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801afcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801afd0:	f47f af39 	bne.w	801ae46 <_scanf_float+0x6e>
 801afd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801afd8:	6022      	str	r2, [r4, #0]
 801afda:	2501      	movs	r5, #1
 801afdc:	e7c0      	b.n	801af60 <_scanf_float+0x188>
 801afde:	2d03      	cmp	r5, #3
 801afe0:	d0e2      	beq.n	801afa8 <_scanf_float+0x1d0>
 801afe2:	2d05      	cmp	r5, #5
 801afe4:	e7de      	b.n	801afa4 <_scanf_float+0x1cc>
 801afe6:	2d02      	cmp	r5, #2
 801afe8:	f47f af26 	bne.w	801ae38 <_scanf_float+0x60>
 801afec:	2503      	movs	r5, #3
 801afee:	e7b7      	b.n	801af60 <_scanf_float+0x188>
 801aff0:	2d06      	cmp	r5, #6
 801aff2:	f47f af21 	bne.w	801ae38 <_scanf_float+0x60>
 801aff6:	2507      	movs	r5, #7
 801aff8:	e7b2      	b.n	801af60 <_scanf_float+0x188>
 801affa:	6822      	ldr	r2, [r4, #0]
 801affc:	0591      	lsls	r1, r2, #22
 801affe:	f57f af1b 	bpl.w	801ae38 <_scanf_float+0x60>
 801b002:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b006:	6022      	str	r2, [r4, #0]
 801b008:	f8cd 9004 	str.w	r9, [sp, #4]
 801b00c:	e7a8      	b.n	801af60 <_scanf_float+0x188>
 801b00e:	6822      	ldr	r2, [r4, #0]
 801b010:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b014:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b018:	d006      	beq.n	801b028 <_scanf_float+0x250>
 801b01a:	0550      	lsls	r0, r2, #21
 801b01c:	f57f af0c 	bpl.w	801ae38 <_scanf_float+0x60>
 801b020:	f1b9 0f00 	cmp.w	r9, #0
 801b024:	f43f af0f 	beq.w	801ae46 <_scanf_float+0x6e>
 801b028:	0591      	lsls	r1, r2, #22
 801b02a:	bf58      	it	pl
 801b02c:	9901      	ldrpl	r1, [sp, #4]
 801b02e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b032:	bf58      	it	pl
 801b034:	eba9 0101 	subpl.w	r1, r9, r1
 801b038:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b03c:	bf58      	it	pl
 801b03e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b042:	6022      	str	r2, [r4, #0]
 801b044:	f04f 0900 	mov.w	r9, #0
 801b048:	e78a      	b.n	801af60 <_scanf_float+0x188>
 801b04a:	f04f 0a03 	mov.w	sl, #3
 801b04e:	e787      	b.n	801af60 <_scanf_float+0x188>
 801b050:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b054:	4639      	mov	r1, r7
 801b056:	4640      	mov	r0, r8
 801b058:	4798      	blx	r3
 801b05a:	2800      	cmp	r0, #0
 801b05c:	f43f aedf 	beq.w	801ae1e <_scanf_float+0x46>
 801b060:	e6ea      	b.n	801ae38 <_scanf_float+0x60>
 801b062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b06a:	463a      	mov	r2, r7
 801b06c:	4640      	mov	r0, r8
 801b06e:	4798      	blx	r3
 801b070:	6923      	ldr	r3, [r4, #16]
 801b072:	3b01      	subs	r3, #1
 801b074:	6123      	str	r3, [r4, #16]
 801b076:	e6ec      	b.n	801ae52 <_scanf_float+0x7a>
 801b078:	1e6b      	subs	r3, r5, #1
 801b07a:	2b06      	cmp	r3, #6
 801b07c:	d825      	bhi.n	801b0ca <_scanf_float+0x2f2>
 801b07e:	2d02      	cmp	r5, #2
 801b080:	d836      	bhi.n	801b0f0 <_scanf_float+0x318>
 801b082:	455e      	cmp	r6, fp
 801b084:	f67f aee8 	bls.w	801ae58 <_scanf_float+0x80>
 801b088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b08c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b090:	463a      	mov	r2, r7
 801b092:	4640      	mov	r0, r8
 801b094:	4798      	blx	r3
 801b096:	6923      	ldr	r3, [r4, #16]
 801b098:	3b01      	subs	r3, #1
 801b09a:	6123      	str	r3, [r4, #16]
 801b09c:	e7f1      	b.n	801b082 <_scanf_float+0x2aa>
 801b09e:	9802      	ldr	r0, [sp, #8]
 801b0a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b0a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b0a8:	9002      	str	r0, [sp, #8]
 801b0aa:	463a      	mov	r2, r7
 801b0ac:	4640      	mov	r0, r8
 801b0ae:	4798      	blx	r3
 801b0b0:	6923      	ldr	r3, [r4, #16]
 801b0b2:	3b01      	subs	r3, #1
 801b0b4:	6123      	str	r3, [r4, #16]
 801b0b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b0ba:	fa5f fa8a 	uxtb.w	sl, sl
 801b0be:	f1ba 0f02 	cmp.w	sl, #2
 801b0c2:	d1ec      	bne.n	801b09e <_scanf_float+0x2c6>
 801b0c4:	3d03      	subs	r5, #3
 801b0c6:	b2ed      	uxtb	r5, r5
 801b0c8:	1b76      	subs	r6, r6, r5
 801b0ca:	6823      	ldr	r3, [r4, #0]
 801b0cc:	05da      	lsls	r2, r3, #23
 801b0ce:	d52f      	bpl.n	801b130 <_scanf_float+0x358>
 801b0d0:	055b      	lsls	r3, r3, #21
 801b0d2:	d510      	bpl.n	801b0f6 <_scanf_float+0x31e>
 801b0d4:	455e      	cmp	r6, fp
 801b0d6:	f67f aebf 	bls.w	801ae58 <_scanf_float+0x80>
 801b0da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b0de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b0e2:	463a      	mov	r2, r7
 801b0e4:	4640      	mov	r0, r8
 801b0e6:	4798      	blx	r3
 801b0e8:	6923      	ldr	r3, [r4, #16]
 801b0ea:	3b01      	subs	r3, #1
 801b0ec:	6123      	str	r3, [r4, #16]
 801b0ee:	e7f1      	b.n	801b0d4 <_scanf_float+0x2fc>
 801b0f0:	46aa      	mov	sl, r5
 801b0f2:	9602      	str	r6, [sp, #8]
 801b0f4:	e7df      	b.n	801b0b6 <_scanf_float+0x2de>
 801b0f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b0fa:	6923      	ldr	r3, [r4, #16]
 801b0fc:	2965      	cmp	r1, #101	; 0x65
 801b0fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801b102:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801b106:	6123      	str	r3, [r4, #16]
 801b108:	d00c      	beq.n	801b124 <_scanf_float+0x34c>
 801b10a:	2945      	cmp	r1, #69	; 0x45
 801b10c:	d00a      	beq.n	801b124 <_scanf_float+0x34c>
 801b10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b112:	463a      	mov	r2, r7
 801b114:	4640      	mov	r0, r8
 801b116:	4798      	blx	r3
 801b118:	6923      	ldr	r3, [r4, #16]
 801b11a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b11e:	3b01      	subs	r3, #1
 801b120:	1eb5      	subs	r5, r6, #2
 801b122:	6123      	str	r3, [r4, #16]
 801b124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b128:	463a      	mov	r2, r7
 801b12a:	4640      	mov	r0, r8
 801b12c:	4798      	blx	r3
 801b12e:	462e      	mov	r6, r5
 801b130:	6825      	ldr	r5, [r4, #0]
 801b132:	f015 0510 	ands.w	r5, r5, #16
 801b136:	d158      	bne.n	801b1ea <_scanf_float+0x412>
 801b138:	7035      	strb	r5, [r6, #0]
 801b13a:	6823      	ldr	r3, [r4, #0]
 801b13c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b144:	d11c      	bne.n	801b180 <_scanf_float+0x3a8>
 801b146:	9b01      	ldr	r3, [sp, #4]
 801b148:	454b      	cmp	r3, r9
 801b14a:	eba3 0209 	sub.w	r2, r3, r9
 801b14e:	d124      	bne.n	801b19a <_scanf_float+0x3c2>
 801b150:	2200      	movs	r2, #0
 801b152:	4659      	mov	r1, fp
 801b154:	4640      	mov	r0, r8
 801b156:	f7ff f9c7 	bl	801a4e8 <_strtod_r>
 801b15a:	9b03      	ldr	r3, [sp, #12]
 801b15c:	6821      	ldr	r1, [r4, #0]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	f011 0f02 	tst.w	r1, #2
 801b164:	ec57 6b10 	vmov	r6, r7, d0
 801b168:	f103 0204 	add.w	r2, r3, #4
 801b16c:	d020      	beq.n	801b1b0 <_scanf_float+0x3d8>
 801b16e:	9903      	ldr	r1, [sp, #12]
 801b170:	600a      	str	r2, [r1, #0]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	e9c3 6700 	strd	r6, r7, [r3]
 801b178:	68e3      	ldr	r3, [r4, #12]
 801b17a:	3301      	adds	r3, #1
 801b17c:	60e3      	str	r3, [r4, #12]
 801b17e:	e66c      	b.n	801ae5a <_scanf_float+0x82>
 801b180:	9b04      	ldr	r3, [sp, #16]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d0e4      	beq.n	801b150 <_scanf_float+0x378>
 801b186:	9905      	ldr	r1, [sp, #20]
 801b188:	230a      	movs	r3, #10
 801b18a:	462a      	mov	r2, r5
 801b18c:	3101      	adds	r1, #1
 801b18e:	4640      	mov	r0, r8
 801b190:	f002 fb2a 	bl	801d7e8 <_strtol_r>
 801b194:	9b04      	ldr	r3, [sp, #16]
 801b196:	9e05      	ldr	r6, [sp, #20]
 801b198:	1ac2      	subs	r2, r0, r3
 801b19a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b19e:	429e      	cmp	r6, r3
 801b1a0:	bf28      	it	cs
 801b1a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b1a6:	4912      	ldr	r1, [pc, #72]	; (801b1f0 <_scanf_float+0x418>)
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	f000 f9af 	bl	801b50c <siprintf>
 801b1ae:	e7cf      	b.n	801b150 <_scanf_float+0x378>
 801b1b0:	f011 0f04 	tst.w	r1, #4
 801b1b4:	9903      	ldr	r1, [sp, #12]
 801b1b6:	600a      	str	r2, [r1, #0]
 801b1b8:	d1db      	bne.n	801b172 <_scanf_float+0x39a>
 801b1ba:	f8d3 8000 	ldr.w	r8, [r3]
 801b1be:	ee10 2a10 	vmov	r2, s0
 801b1c2:	ee10 0a10 	vmov	r0, s0
 801b1c6:	463b      	mov	r3, r7
 801b1c8:	4639      	mov	r1, r7
 801b1ca:	f7e5 fcd7 	bl	8000b7c <__aeabi_dcmpun>
 801b1ce:	b128      	cbz	r0, 801b1dc <_scanf_float+0x404>
 801b1d0:	4808      	ldr	r0, [pc, #32]	; (801b1f4 <_scanf_float+0x41c>)
 801b1d2:	f000 fb7d 	bl	801b8d0 <nanf>
 801b1d6:	ed88 0a00 	vstr	s0, [r8]
 801b1da:	e7cd      	b.n	801b178 <_scanf_float+0x3a0>
 801b1dc:	4630      	mov	r0, r6
 801b1de:	4639      	mov	r1, r7
 801b1e0:	f7e5 fd2a 	bl	8000c38 <__aeabi_d2f>
 801b1e4:	f8c8 0000 	str.w	r0, [r8]
 801b1e8:	e7c6      	b.n	801b178 <_scanf_float+0x3a0>
 801b1ea:	2500      	movs	r5, #0
 801b1ec:	e635      	b.n	801ae5a <_scanf_float+0x82>
 801b1ee:	bf00      	nop
 801b1f0:	08022e25 	.word	0x08022e25
 801b1f4:	08022e6d 	.word	0x08022e6d

0801b1f8 <__sflush_r>:
 801b1f8:	898a      	ldrh	r2, [r1, #12]
 801b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fe:	4605      	mov	r5, r0
 801b200:	0710      	lsls	r0, r2, #28
 801b202:	460c      	mov	r4, r1
 801b204:	d458      	bmi.n	801b2b8 <__sflush_r+0xc0>
 801b206:	684b      	ldr	r3, [r1, #4]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	dc05      	bgt.n	801b218 <__sflush_r+0x20>
 801b20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b20e:	2b00      	cmp	r3, #0
 801b210:	dc02      	bgt.n	801b218 <__sflush_r+0x20>
 801b212:	2000      	movs	r0, #0
 801b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b21a:	2e00      	cmp	r6, #0
 801b21c:	d0f9      	beq.n	801b212 <__sflush_r+0x1a>
 801b21e:	2300      	movs	r3, #0
 801b220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b224:	682f      	ldr	r7, [r5, #0]
 801b226:	6a21      	ldr	r1, [r4, #32]
 801b228:	602b      	str	r3, [r5, #0]
 801b22a:	d032      	beq.n	801b292 <__sflush_r+0x9a>
 801b22c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b22e:	89a3      	ldrh	r3, [r4, #12]
 801b230:	075a      	lsls	r2, r3, #29
 801b232:	d505      	bpl.n	801b240 <__sflush_r+0x48>
 801b234:	6863      	ldr	r3, [r4, #4]
 801b236:	1ac0      	subs	r0, r0, r3
 801b238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b23a:	b10b      	cbz	r3, 801b240 <__sflush_r+0x48>
 801b23c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b23e:	1ac0      	subs	r0, r0, r3
 801b240:	2300      	movs	r3, #0
 801b242:	4602      	mov	r2, r0
 801b244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b246:	6a21      	ldr	r1, [r4, #32]
 801b248:	4628      	mov	r0, r5
 801b24a:	47b0      	blx	r6
 801b24c:	1c43      	adds	r3, r0, #1
 801b24e:	89a3      	ldrh	r3, [r4, #12]
 801b250:	d106      	bne.n	801b260 <__sflush_r+0x68>
 801b252:	6829      	ldr	r1, [r5, #0]
 801b254:	291d      	cmp	r1, #29
 801b256:	d82b      	bhi.n	801b2b0 <__sflush_r+0xb8>
 801b258:	4a29      	ldr	r2, [pc, #164]	; (801b300 <__sflush_r+0x108>)
 801b25a:	410a      	asrs	r2, r1
 801b25c:	07d6      	lsls	r6, r2, #31
 801b25e:	d427      	bmi.n	801b2b0 <__sflush_r+0xb8>
 801b260:	2200      	movs	r2, #0
 801b262:	6062      	str	r2, [r4, #4]
 801b264:	04d9      	lsls	r1, r3, #19
 801b266:	6922      	ldr	r2, [r4, #16]
 801b268:	6022      	str	r2, [r4, #0]
 801b26a:	d504      	bpl.n	801b276 <__sflush_r+0x7e>
 801b26c:	1c42      	adds	r2, r0, #1
 801b26e:	d101      	bne.n	801b274 <__sflush_r+0x7c>
 801b270:	682b      	ldr	r3, [r5, #0]
 801b272:	b903      	cbnz	r3, 801b276 <__sflush_r+0x7e>
 801b274:	6560      	str	r0, [r4, #84]	; 0x54
 801b276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b278:	602f      	str	r7, [r5, #0]
 801b27a:	2900      	cmp	r1, #0
 801b27c:	d0c9      	beq.n	801b212 <__sflush_r+0x1a>
 801b27e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b282:	4299      	cmp	r1, r3
 801b284:	d002      	beq.n	801b28c <__sflush_r+0x94>
 801b286:	4628      	mov	r0, r5
 801b288:	f001 f9c0 	bl	801c60c <_free_r>
 801b28c:	2000      	movs	r0, #0
 801b28e:	6360      	str	r0, [r4, #52]	; 0x34
 801b290:	e7c0      	b.n	801b214 <__sflush_r+0x1c>
 801b292:	2301      	movs	r3, #1
 801b294:	4628      	mov	r0, r5
 801b296:	47b0      	blx	r6
 801b298:	1c41      	adds	r1, r0, #1
 801b29a:	d1c8      	bne.n	801b22e <__sflush_r+0x36>
 801b29c:	682b      	ldr	r3, [r5, #0]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d0c5      	beq.n	801b22e <__sflush_r+0x36>
 801b2a2:	2b1d      	cmp	r3, #29
 801b2a4:	d001      	beq.n	801b2aa <__sflush_r+0xb2>
 801b2a6:	2b16      	cmp	r3, #22
 801b2a8:	d101      	bne.n	801b2ae <__sflush_r+0xb6>
 801b2aa:	602f      	str	r7, [r5, #0]
 801b2ac:	e7b1      	b.n	801b212 <__sflush_r+0x1a>
 801b2ae:	89a3      	ldrh	r3, [r4, #12]
 801b2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2b4:	81a3      	strh	r3, [r4, #12]
 801b2b6:	e7ad      	b.n	801b214 <__sflush_r+0x1c>
 801b2b8:	690f      	ldr	r7, [r1, #16]
 801b2ba:	2f00      	cmp	r7, #0
 801b2bc:	d0a9      	beq.n	801b212 <__sflush_r+0x1a>
 801b2be:	0793      	lsls	r3, r2, #30
 801b2c0:	680e      	ldr	r6, [r1, #0]
 801b2c2:	bf08      	it	eq
 801b2c4:	694b      	ldreq	r3, [r1, #20]
 801b2c6:	600f      	str	r7, [r1, #0]
 801b2c8:	bf18      	it	ne
 801b2ca:	2300      	movne	r3, #0
 801b2cc:	eba6 0807 	sub.w	r8, r6, r7
 801b2d0:	608b      	str	r3, [r1, #8]
 801b2d2:	f1b8 0f00 	cmp.w	r8, #0
 801b2d6:	dd9c      	ble.n	801b212 <__sflush_r+0x1a>
 801b2d8:	6a21      	ldr	r1, [r4, #32]
 801b2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b2dc:	4643      	mov	r3, r8
 801b2de:	463a      	mov	r2, r7
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	47b0      	blx	r6
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	dc06      	bgt.n	801b2f6 <__sflush_r+0xfe>
 801b2e8:	89a3      	ldrh	r3, [r4, #12]
 801b2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2ee:	81a3      	strh	r3, [r4, #12]
 801b2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2f4:	e78e      	b.n	801b214 <__sflush_r+0x1c>
 801b2f6:	4407      	add	r7, r0
 801b2f8:	eba8 0800 	sub.w	r8, r8, r0
 801b2fc:	e7e9      	b.n	801b2d2 <__sflush_r+0xda>
 801b2fe:	bf00      	nop
 801b300:	dfbffffe 	.word	0xdfbffffe

0801b304 <_fflush_r>:
 801b304:	b538      	push	{r3, r4, r5, lr}
 801b306:	690b      	ldr	r3, [r1, #16]
 801b308:	4605      	mov	r5, r0
 801b30a:	460c      	mov	r4, r1
 801b30c:	b913      	cbnz	r3, 801b314 <_fflush_r+0x10>
 801b30e:	2500      	movs	r5, #0
 801b310:	4628      	mov	r0, r5
 801b312:	bd38      	pop	{r3, r4, r5, pc}
 801b314:	b118      	cbz	r0, 801b31e <_fflush_r+0x1a>
 801b316:	6a03      	ldr	r3, [r0, #32]
 801b318:	b90b      	cbnz	r3, 801b31e <_fflush_r+0x1a>
 801b31a:	f000 f8a7 	bl	801b46c <__sinit>
 801b31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d0f3      	beq.n	801b30e <_fflush_r+0xa>
 801b326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b328:	07d0      	lsls	r0, r2, #31
 801b32a:	d404      	bmi.n	801b336 <_fflush_r+0x32>
 801b32c:	0599      	lsls	r1, r3, #22
 801b32e:	d402      	bmi.n	801b336 <_fflush_r+0x32>
 801b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b332:	f000 faaa 	bl	801b88a <__retarget_lock_acquire_recursive>
 801b336:	4628      	mov	r0, r5
 801b338:	4621      	mov	r1, r4
 801b33a:	f7ff ff5d 	bl	801b1f8 <__sflush_r>
 801b33e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b340:	07da      	lsls	r2, r3, #31
 801b342:	4605      	mov	r5, r0
 801b344:	d4e4      	bmi.n	801b310 <_fflush_r+0xc>
 801b346:	89a3      	ldrh	r3, [r4, #12]
 801b348:	059b      	lsls	r3, r3, #22
 801b34a:	d4e1      	bmi.n	801b310 <_fflush_r+0xc>
 801b34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b34e:	f000 fa9d 	bl	801b88c <__retarget_lock_release_recursive>
 801b352:	e7dd      	b.n	801b310 <_fflush_r+0xc>

0801b354 <std>:
 801b354:	2300      	movs	r3, #0
 801b356:	b510      	push	{r4, lr}
 801b358:	4604      	mov	r4, r0
 801b35a:	e9c0 3300 	strd	r3, r3, [r0]
 801b35e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b362:	6083      	str	r3, [r0, #8]
 801b364:	8181      	strh	r1, [r0, #12]
 801b366:	6643      	str	r3, [r0, #100]	; 0x64
 801b368:	81c2      	strh	r2, [r0, #14]
 801b36a:	6183      	str	r3, [r0, #24]
 801b36c:	4619      	mov	r1, r3
 801b36e:	2208      	movs	r2, #8
 801b370:	305c      	adds	r0, #92	; 0x5c
 801b372:	f000 f9dd 	bl	801b730 <memset>
 801b376:	4b0d      	ldr	r3, [pc, #52]	; (801b3ac <std+0x58>)
 801b378:	6263      	str	r3, [r4, #36]	; 0x24
 801b37a:	4b0d      	ldr	r3, [pc, #52]	; (801b3b0 <std+0x5c>)
 801b37c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b37e:	4b0d      	ldr	r3, [pc, #52]	; (801b3b4 <std+0x60>)
 801b380:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b382:	4b0d      	ldr	r3, [pc, #52]	; (801b3b8 <std+0x64>)
 801b384:	6323      	str	r3, [r4, #48]	; 0x30
 801b386:	4b0d      	ldr	r3, [pc, #52]	; (801b3bc <std+0x68>)
 801b388:	6224      	str	r4, [r4, #32]
 801b38a:	429c      	cmp	r4, r3
 801b38c:	d006      	beq.n	801b39c <std+0x48>
 801b38e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b392:	4294      	cmp	r4, r2
 801b394:	d002      	beq.n	801b39c <std+0x48>
 801b396:	33d0      	adds	r3, #208	; 0xd0
 801b398:	429c      	cmp	r4, r3
 801b39a:	d105      	bne.n	801b3a8 <std+0x54>
 801b39c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3a4:	f000 ba70 	b.w	801b888 <__retarget_lock_init_recursive>
 801b3a8:	bd10      	pop	{r4, pc}
 801b3aa:	bf00      	nop
 801b3ac:	0801b54d 	.word	0x0801b54d
 801b3b0:	0801b56f 	.word	0x0801b56f
 801b3b4:	0801b5a7 	.word	0x0801b5a7
 801b3b8:	0801b5cb 	.word	0x0801b5cb
 801b3bc:	20002d10 	.word	0x20002d10

0801b3c0 <stdio_exit_handler>:
 801b3c0:	4a02      	ldr	r2, [pc, #8]	; (801b3cc <stdio_exit_handler+0xc>)
 801b3c2:	4903      	ldr	r1, [pc, #12]	; (801b3d0 <stdio_exit_handler+0x10>)
 801b3c4:	4803      	ldr	r0, [pc, #12]	; (801b3d4 <stdio_exit_handler+0x14>)
 801b3c6:	f000 b869 	b.w	801b49c <_fwalk_sglue>
 801b3ca:	bf00      	nop
 801b3cc:	20000c7c 	.word	0x20000c7c
 801b3d0:	0801b305 	.word	0x0801b305
 801b3d4:	20000df4 	.word	0x20000df4

0801b3d8 <cleanup_stdio>:
 801b3d8:	6841      	ldr	r1, [r0, #4]
 801b3da:	4b0c      	ldr	r3, [pc, #48]	; (801b40c <cleanup_stdio+0x34>)
 801b3dc:	4299      	cmp	r1, r3
 801b3de:	b510      	push	{r4, lr}
 801b3e0:	4604      	mov	r4, r0
 801b3e2:	d001      	beq.n	801b3e8 <cleanup_stdio+0x10>
 801b3e4:	f7ff ff8e 	bl	801b304 <_fflush_r>
 801b3e8:	68a1      	ldr	r1, [r4, #8]
 801b3ea:	4b09      	ldr	r3, [pc, #36]	; (801b410 <cleanup_stdio+0x38>)
 801b3ec:	4299      	cmp	r1, r3
 801b3ee:	d002      	beq.n	801b3f6 <cleanup_stdio+0x1e>
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f7ff ff87 	bl	801b304 <_fflush_r>
 801b3f6:	68e1      	ldr	r1, [r4, #12]
 801b3f8:	4b06      	ldr	r3, [pc, #24]	; (801b414 <cleanup_stdio+0x3c>)
 801b3fa:	4299      	cmp	r1, r3
 801b3fc:	d004      	beq.n	801b408 <cleanup_stdio+0x30>
 801b3fe:	4620      	mov	r0, r4
 801b400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b404:	f7ff bf7e 	b.w	801b304 <_fflush_r>
 801b408:	bd10      	pop	{r4, pc}
 801b40a:	bf00      	nop
 801b40c:	20002d10 	.word	0x20002d10
 801b410:	20002d78 	.word	0x20002d78
 801b414:	20002de0 	.word	0x20002de0

0801b418 <global_stdio_init.part.0>:
 801b418:	b510      	push	{r4, lr}
 801b41a:	4b0b      	ldr	r3, [pc, #44]	; (801b448 <global_stdio_init.part.0+0x30>)
 801b41c:	4c0b      	ldr	r4, [pc, #44]	; (801b44c <global_stdio_init.part.0+0x34>)
 801b41e:	4a0c      	ldr	r2, [pc, #48]	; (801b450 <global_stdio_init.part.0+0x38>)
 801b420:	601a      	str	r2, [r3, #0]
 801b422:	4620      	mov	r0, r4
 801b424:	2200      	movs	r2, #0
 801b426:	2104      	movs	r1, #4
 801b428:	f7ff ff94 	bl	801b354 <std>
 801b42c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b430:	2201      	movs	r2, #1
 801b432:	2109      	movs	r1, #9
 801b434:	f7ff ff8e 	bl	801b354 <std>
 801b438:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b43c:	2202      	movs	r2, #2
 801b43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b442:	2112      	movs	r1, #18
 801b444:	f7ff bf86 	b.w	801b354 <std>
 801b448:	20002e48 	.word	0x20002e48
 801b44c:	20002d10 	.word	0x20002d10
 801b450:	0801b3c1 	.word	0x0801b3c1

0801b454 <__sfp_lock_acquire>:
 801b454:	4801      	ldr	r0, [pc, #4]	; (801b45c <__sfp_lock_acquire+0x8>)
 801b456:	f000 ba18 	b.w	801b88a <__retarget_lock_acquire_recursive>
 801b45a:	bf00      	nop
 801b45c:	20002e51 	.word	0x20002e51

0801b460 <__sfp_lock_release>:
 801b460:	4801      	ldr	r0, [pc, #4]	; (801b468 <__sfp_lock_release+0x8>)
 801b462:	f000 ba13 	b.w	801b88c <__retarget_lock_release_recursive>
 801b466:	bf00      	nop
 801b468:	20002e51 	.word	0x20002e51

0801b46c <__sinit>:
 801b46c:	b510      	push	{r4, lr}
 801b46e:	4604      	mov	r4, r0
 801b470:	f7ff fff0 	bl	801b454 <__sfp_lock_acquire>
 801b474:	6a23      	ldr	r3, [r4, #32]
 801b476:	b11b      	cbz	r3, 801b480 <__sinit+0x14>
 801b478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b47c:	f7ff bff0 	b.w	801b460 <__sfp_lock_release>
 801b480:	4b04      	ldr	r3, [pc, #16]	; (801b494 <__sinit+0x28>)
 801b482:	6223      	str	r3, [r4, #32]
 801b484:	4b04      	ldr	r3, [pc, #16]	; (801b498 <__sinit+0x2c>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d1f5      	bne.n	801b478 <__sinit+0xc>
 801b48c:	f7ff ffc4 	bl	801b418 <global_stdio_init.part.0>
 801b490:	e7f2      	b.n	801b478 <__sinit+0xc>
 801b492:	bf00      	nop
 801b494:	0801b3d9 	.word	0x0801b3d9
 801b498:	20002e48 	.word	0x20002e48

0801b49c <_fwalk_sglue>:
 801b49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4a0:	4607      	mov	r7, r0
 801b4a2:	4688      	mov	r8, r1
 801b4a4:	4614      	mov	r4, r2
 801b4a6:	2600      	movs	r6, #0
 801b4a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b4ac:	f1b9 0901 	subs.w	r9, r9, #1
 801b4b0:	d505      	bpl.n	801b4be <_fwalk_sglue+0x22>
 801b4b2:	6824      	ldr	r4, [r4, #0]
 801b4b4:	2c00      	cmp	r4, #0
 801b4b6:	d1f7      	bne.n	801b4a8 <_fwalk_sglue+0xc>
 801b4b8:	4630      	mov	r0, r6
 801b4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4be:	89ab      	ldrh	r3, [r5, #12]
 801b4c0:	2b01      	cmp	r3, #1
 801b4c2:	d907      	bls.n	801b4d4 <_fwalk_sglue+0x38>
 801b4c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b4c8:	3301      	adds	r3, #1
 801b4ca:	d003      	beq.n	801b4d4 <_fwalk_sglue+0x38>
 801b4cc:	4629      	mov	r1, r5
 801b4ce:	4638      	mov	r0, r7
 801b4d0:	47c0      	blx	r8
 801b4d2:	4306      	orrs	r6, r0
 801b4d4:	3568      	adds	r5, #104	; 0x68
 801b4d6:	e7e9      	b.n	801b4ac <_fwalk_sglue+0x10>

0801b4d8 <iprintf>:
 801b4d8:	b40f      	push	{r0, r1, r2, r3}
 801b4da:	b507      	push	{r0, r1, r2, lr}
 801b4dc:	4906      	ldr	r1, [pc, #24]	; (801b4f8 <iprintf+0x20>)
 801b4de:	ab04      	add	r3, sp, #16
 801b4e0:	6808      	ldr	r0, [r1, #0]
 801b4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4e6:	6881      	ldr	r1, [r0, #8]
 801b4e8:	9301      	str	r3, [sp, #4]
 801b4ea:	f002 fb0f 	bl	801db0c <_vfiprintf_r>
 801b4ee:	b003      	add	sp, #12
 801b4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b4f4:	b004      	add	sp, #16
 801b4f6:	4770      	bx	lr
 801b4f8:	20000e40 	.word	0x20000e40

0801b4fc <putchar>:
 801b4fc:	4b02      	ldr	r3, [pc, #8]	; (801b508 <putchar+0xc>)
 801b4fe:	4601      	mov	r1, r0
 801b500:	6818      	ldr	r0, [r3, #0]
 801b502:	6882      	ldr	r2, [r0, #8]
 801b504:	f002 bc90 	b.w	801de28 <_putc_r>
 801b508:	20000e40 	.word	0x20000e40

0801b50c <siprintf>:
 801b50c:	b40e      	push	{r1, r2, r3}
 801b50e:	b500      	push	{lr}
 801b510:	b09c      	sub	sp, #112	; 0x70
 801b512:	ab1d      	add	r3, sp, #116	; 0x74
 801b514:	9002      	str	r0, [sp, #8]
 801b516:	9006      	str	r0, [sp, #24]
 801b518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b51c:	4809      	ldr	r0, [pc, #36]	; (801b544 <siprintf+0x38>)
 801b51e:	9107      	str	r1, [sp, #28]
 801b520:	9104      	str	r1, [sp, #16]
 801b522:	4909      	ldr	r1, [pc, #36]	; (801b548 <siprintf+0x3c>)
 801b524:	f853 2b04 	ldr.w	r2, [r3], #4
 801b528:	9105      	str	r1, [sp, #20]
 801b52a:	6800      	ldr	r0, [r0, #0]
 801b52c:	9301      	str	r3, [sp, #4]
 801b52e:	a902      	add	r1, sp, #8
 801b530:	f002 f9c4 	bl	801d8bc <_svfiprintf_r>
 801b534:	9b02      	ldr	r3, [sp, #8]
 801b536:	2200      	movs	r2, #0
 801b538:	701a      	strb	r2, [r3, #0]
 801b53a:	b01c      	add	sp, #112	; 0x70
 801b53c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b540:	b003      	add	sp, #12
 801b542:	4770      	bx	lr
 801b544:	20000e40 	.word	0x20000e40
 801b548:	ffff0208 	.word	0xffff0208

0801b54c <__sread>:
 801b54c:	b510      	push	{r4, lr}
 801b54e:	460c      	mov	r4, r1
 801b550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b554:	f000 f93a 	bl	801b7cc <_read_r>
 801b558:	2800      	cmp	r0, #0
 801b55a:	bfab      	itete	ge
 801b55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b55e:	89a3      	ldrhlt	r3, [r4, #12]
 801b560:	181b      	addge	r3, r3, r0
 801b562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b566:	bfac      	ite	ge
 801b568:	6563      	strge	r3, [r4, #84]	; 0x54
 801b56a:	81a3      	strhlt	r3, [r4, #12]
 801b56c:	bd10      	pop	{r4, pc}

0801b56e <__swrite>:
 801b56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b572:	461f      	mov	r7, r3
 801b574:	898b      	ldrh	r3, [r1, #12]
 801b576:	05db      	lsls	r3, r3, #23
 801b578:	4605      	mov	r5, r0
 801b57a:	460c      	mov	r4, r1
 801b57c:	4616      	mov	r6, r2
 801b57e:	d505      	bpl.n	801b58c <__swrite+0x1e>
 801b580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b584:	2302      	movs	r3, #2
 801b586:	2200      	movs	r2, #0
 801b588:	f000 f90e 	bl	801b7a8 <_lseek_r>
 801b58c:	89a3      	ldrh	r3, [r4, #12]
 801b58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b596:	81a3      	strh	r3, [r4, #12]
 801b598:	4632      	mov	r2, r6
 801b59a:	463b      	mov	r3, r7
 801b59c:	4628      	mov	r0, r5
 801b59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5a2:	f000 b935 	b.w	801b810 <_write_r>

0801b5a6 <__sseek>:
 801b5a6:	b510      	push	{r4, lr}
 801b5a8:	460c      	mov	r4, r1
 801b5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5ae:	f000 f8fb 	bl	801b7a8 <_lseek_r>
 801b5b2:	1c43      	adds	r3, r0, #1
 801b5b4:	89a3      	ldrh	r3, [r4, #12]
 801b5b6:	bf15      	itete	ne
 801b5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b5c2:	81a3      	strheq	r3, [r4, #12]
 801b5c4:	bf18      	it	ne
 801b5c6:	81a3      	strhne	r3, [r4, #12]
 801b5c8:	bd10      	pop	{r4, pc}

0801b5ca <__sclose>:
 801b5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5ce:	f000 b8db 	b.w	801b788 <_close_r>

0801b5d2 <__swbuf_r>:
 801b5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5d4:	460e      	mov	r6, r1
 801b5d6:	4614      	mov	r4, r2
 801b5d8:	4605      	mov	r5, r0
 801b5da:	b118      	cbz	r0, 801b5e4 <__swbuf_r+0x12>
 801b5dc:	6a03      	ldr	r3, [r0, #32]
 801b5de:	b90b      	cbnz	r3, 801b5e4 <__swbuf_r+0x12>
 801b5e0:	f7ff ff44 	bl	801b46c <__sinit>
 801b5e4:	69a3      	ldr	r3, [r4, #24]
 801b5e6:	60a3      	str	r3, [r4, #8]
 801b5e8:	89a3      	ldrh	r3, [r4, #12]
 801b5ea:	071a      	lsls	r2, r3, #28
 801b5ec:	d525      	bpl.n	801b63a <__swbuf_r+0x68>
 801b5ee:	6923      	ldr	r3, [r4, #16]
 801b5f0:	b31b      	cbz	r3, 801b63a <__swbuf_r+0x68>
 801b5f2:	6823      	ldr	r3, [r4, #0]
 801b5f4:	6922      	ldr	r2, [r4, #16]
 801b5f6:	1a98      	subs	r0, r3, r2
 801b5f8:	6963      	ldr	r3, [r4, #20]
 801b5fa:	b2f6      	uxtb	r6, r6
 801b5fc:	4283      	cmp	r3, r0
 801b5fe:	4637      	mov	r7, r6
 801b600:	dc04      	bgt.n	801b60c <__swbuf_r+0x3a>
 801b602:	4621      	mov	r1, r4
 801b604:	4628      	mov	r0, r5
 801b606:	f7ff fe7d 	bl	801b304 <_fflush_r>
 801b60a:	b9e0      	cbnz	r0, 801b646 <__swbuf_r+0x74>
 801b60c:	68a3      	ldr	r3, [r4, #8]
 801b60e:	3b01      	subs	r3, #1
 801b610:	60a3      	str	r3, [r4, #8]
 801b612:	6823      	ldr	r3, [r4, #0]
 801b614:	1c5a      	adds	r2, r3, #1
 801b616:	6022      	str	r2, [r4, #0]
 801b618:	701e      	strb	r6, [r3, #0]
 801b61a:	6962      	ldr	r2, [r4, #20]
 801b61c:	1c43      	adds	r3, r0, #1
 801b61e:	429a      	cmp	r2, r3
 801b620:	d004      	beq.n	801b62c <__swbuf_r+0x5a>
 801b622:	89a3      	ldrh	r3, [r4, #12]
 801b624:	07db      	lsls	r3, r3, #31
 801b626:	d506      	bpl.n	801b636 <__swbuf_r+0x64>
 801b628:	2e0a      	cmp	r6, #10
 801b62a:	d104      	bne.n	801b636 <__swbuf_r+0x64>
 801b62c:	4621      	mov	r1, r4
 801b62e:	4628      	mov	r0, r5
 801b630:	f7ff fe68 	bl	801b304 <_fflush_r>
 801b634:	b938      	cbnz	r0, 801b646 <__swbuf_r+0x74>
 801b636:	4638      	mov	r0, r7
 801b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b63a:	4621      	mov	r1, r4
 801b63c:	4628      	mov	r0, r5
 801b63e:	f000 f805 	bl	801b64c <__swsetup_r>
 801b642:	2800      	cmp	r0, #0
 801b644:	d0d5      	beq.n	801b5f2 <__swbuf_r+0x20>
 801b646:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b64a:	e7f4      	b.n	801b636 <__swbuf_r+0x64>

0801b64c <__swsetup_r>:
 801b64c:	b538      	push	{r3, r4, r5, lr}
 801b64e:	4b2a      	ldr	r3, [pc, #168]	; (801b6f8 <__swsetup_r+0xac>)
 801b650:	4605      	mov	r5, r0
 801b652:	6818      	ldr	r0, [r3, #0]
 801b654:	460c      	mov	r4, r1
 801b656:	b118      	cbz	r0, 801b660 <__swsetup_r+0x14>
 801b658:	6a03      	ldr	r3, [r0, #32]
 801b65a:	b90b      	cbnz	r3, 801b660 <__swsetup_r+0x14>
 801b65c:	f7ff ff06 	bl	801b46c <__sinit>
 801b660:	89a3      	ldrh	r3, [r4, #12]
 801b662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b666:	0718      	lsls	r0, r3, #28
 801b668:	d422      	bmi.n	801b6b0 <__swsetup_r+0x64>
 801b66a:	06d9      	lsls	r1, r3, #27
 801b66c:	d407      	bmi.n	801b67e <__swsetup_r+0x32>
 801b66e:	2309      	movs	r3, #9
 801b670:	602b      	str	r3, [r5, #0]
 801b672:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b676:	81a3      	strh	r3, [r4, #12]
 801b678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b67c:	e034      	b.n	801b6e8 <__swsetup_r+0x9c>
 801b67e:	0758      	lsls	r0, r3, #29
 801b680:	d512      	bpl.n	801b6a8 <__swsetup_r+0x5c>
 801b682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b684:	b141      	cbz	r1, 801b698 <__swsetup_r+0x4c>
 801b686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b68a:	4299      	cmp	r1, r3
 801b68c:	d002      	beq.n	801b694 <__swsetup_r+0x48>
 801b68e:	4628      	mov	r0, r5
 801b690:	f000 ffbc 	bl	801c60c <_free_r>
 801b694:	2300      	movs	r3, #0
 801b696:	6363      	str	r3, [r4, #52]	; 0x34
 801b698:	89a3      	ldrh	r3, [r4, #12]
 801b69a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b69e:	81a3      	strh	r3, [r4, #12]
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	6063      	str	r3, [r4, #4]
 801b6a4:	6923      	ldr	r3, [r4, #16]
 801b6a6:	6023      	str	r3, [r4, #0]
 801b6a8:	89a3      	ldrh	r3, [r4, #12]
 801b6aa:	f043 0308 	orr.w	r3, r3, #8
 801b6ae:	81a3      	strh	r3, [r4, #12]
 801b6b0:	6923      	ldr	r3, [r4, #16]
 801b6b2:	b94b      	cbnz	r3, 801b6c8 <__swsetup_r+0x7c>
 801b6b4:	89a3      	ldrh	r3, [r4, #12]
 801b6b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b6ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b6be:	d003      	beq.n	801b6c8 <__swsetup_r+0x7c>
 801b6c0:	4621      	mov	r1, r4
 801b6c2:	4628      	mov	r0, r5
 801b6c4:	f002 fb74 	bl	801ddb0 <__smakebuf_r>
 801b6c8:	89a0      	ldrh	r0, [r4, #12]
 801b6ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b6ce:	f010 0301 	ands.w	r3, r0, #1
 801b6d2:	d00a      	beq.n	801b6ea <__swsetup_r+0x9e>
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	60a3      	str	r3, [r4, #8]
 801b6d8:	6963      	ldr	r3, [r4, #20]
 801b6da:	425b      	negs	r3, r3
 801b6dc:	61a3      	str	r3, [r4, #24]
 801b6de:	6923      	ldr	r3, [r4, #16]
 801b6e0:	b943      	cbnz	r3, 801b6f4 <__swsetup_r+0xa8>
 801b6e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b6e6:	d1c4      	bne.n	801b672 <__swsetup_r+0x26>
 801b6e8:	bd38      	pop	{r3, r4, r5, pc}
 801b6ea:	0781      	lsls	r1, r0, #30
 801b6ec:	bf58      	it	pl
 801b6ee:	6963      	ldrpl	r3, [r4, #20]
 801b6f0:	60a3      	str	r3, [r4, #8]
 801b6f2:	e7f4      	b.n	801b6de <__swsetup_r+0x92>
 801b6f4:	2000      	movs	r0, #0
 801b6f6:	e7f7      	b.n	801b6e8 <__swsetup_r+0x9c>
 801b6f8:	20000e40 	.word	0x20000e40

0801b6fc <memmove>:
 801b6fc:	4288      	cmp	r0, r1
 801b6fe:	b510      	push	{r4, lr}
 801b700:	eb01 0402 	add.w	r4, r1, r2
 801b704:	d902      	bls.n	801b70c <memmove+0x10>
 801b706:	4284      	cmp	r4, r0
 801b708:	4623      	mov	r3, r4
 801b70a:	d807      	bhi.n	801b71c <memmove+0x20>
 801b70c:	1e43      	subs	r3, r0, #1
 801b70e:	42a1      	cmp	r1, r4
 801b710:	d008      	beq.n	801b724 <memmove+0x28>
 801b712:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b716:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b71a:	e7f8      	b.n	801b70e <memmove+0x12>
 801b71c:	4402      	add	r2, r0
 801b71e:	4601      	mov	r1, r0
 801b720:	428a      	cmp	r2, r1
 801b722:	d100      	bne.n	801b726 <memmove+0x2a>
 801b724:	bd10      	pop	{r4, pc}
 801b726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b72a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b72e:	e7f7      	b.n	801b720 <memmove+0x24>

0801b730 <memset>:
 801b730:	4402      	add	r2, r0
 801b732:	4603      	mov	r3, r0
 801b734:	4293      	cmp	r3, r2
 801b736:	d100      	bne.n	801b73a <memset+0xa>
 801b738:	4770      	bx	lr
 801b73a:	f803 1b01 	strb.w	r1, [r3], #1
 801b73e:	e7f9      	b.n	801b734 <memset+0x4>

0801b740 <strchr>:
 801b740:	b2c9      	uxtb	r1, r1
 801b742:	4603      	mov	r3, r0
 801b744:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b748:	b11a      	cbz	r2, 801b752 <strchr+0x12>
 801b74a:	428a      	cmp	r2, r1
 801b74c:	d1f9      	bne.n	801b742 <strchr+0x2>
 801b74e:	4618      	mov	r0, r3
 801b750:	4770      	bx	lr
 801b752:	2900      	cmp	r1, #0
 801b754:	bf18      	it	ne
 801b756:	2300      	movne	r3, #0
 801b758:	e7f9      	b.n	801b74e <strchr+0xe>

0801b75a <strncmp>:
 801b75a:	b510      	push	{r4, lr}
 801b75c:	b16a      	cbz	r2, 801b77a <strncmp+0x20>
 801b75e:	3901      	subs	r1, #1
 801b760:	1884      	adds	r4, r0, r2
 801b762:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b766:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b76a:	429a      	cmp	r2, r3
 801b76c:	d103      	bne.n	801b776 <strncmp+0x1c>
 801b76e:	42a0      	cmp	r0, r4
 801b770:	d001      	beq.n	801b776 <strncmp+0x1c>
 801b772:	2a00      	cmp	r2, #0
 801b774:	d1f5      	bne.n	801b762 <strncmp+0x8>
 801b776:	1ad0      	subs	r0, r2, r3
 801b778:	bd10      	pop	{r4, pc}
 801b77a:	4610      	mov	r0, r2
 801b77c:	e7fc      	b.n	801b778 <strncmp+0x1e>
	...

0801b780 <_localeconv_r>:
 801b780:	4800      	ldr	r0, [pc, #0]	; (801b784 <_localeconv_r+0x4>)
 801b782:	4770      	bx	lr
 801b784:	20000d78 	.word	0x20000d78

0801b788 <_close_r>:
 801b788:	b538      	push	{r3, r4, r5, lr}
 801b78a:	4d06      	ldr	r5, [pc, #24]	; (801b7a4 <_close_r+0x1c>)
 801b78c:	2300      	movs	r3, #0
 801b78e:	4604      	mov	r4, r0
 801b790:	4608      	mov	r0, r1
 801b792:	602b      	str	r3, [r5, #0]
 801b794:	f7e5 fcec 	bl	8001170 <_close>
 801b798:	1c43      	adds	r3, r0, #1
 801b79a:	d102      	bne.n	801b7a2 <_close_r+0x1a>
 801b79c:	682b      	ldr	r3, [r5, #0]
 801b79e:	b103      	cbz	r3, 801b7a2 <_close_r+0x1a>
 801b7a0:	6023      	str	r3, [r4, #0]
 801b7a2:	bd38      	pop	{r3, r4, r5, pc}
 801b7a4:	20002e4c 	.word	0x20002e4c

0801b7a8 <_lseek_r>:
 801b7a8:	b538      	push	{r3, r4, r5, lr}
 801b7aa:	4d07      	ldr	r5, [pc, #28]	; (801b7c8 <_lseek_r+0x20>)
 801b7ac:	4604      	mov	r4, r0
 801b7ae:	4608      	mov	r0, r1
 801b7b0:	4611      	mov	r1, r2
 801b7b2:	2200      	movs	r2, #0
 801b7b4:	602a      	str	r2, [r5, #0]
 801b7b6:	461a      	mov	r2, r3
 801b7b8:	f7e5 fce6 	bl	8001188 <_lseek>
 801b7bc:	1c43      	adds	r3, r0, #1
 801b7be:	d102      	bne.n	801b7c6 <_lseek_r+0x1e>
 801b7c0:	682b      	ldr	r3, [r5, #0]
 801b7c2:	b103      	cbz	r3, 801b7c6 <_lseek_r+0x1e>
 801b7c4:	6023      	str	r3, [r4, #0]
 801b7c6:	bd38      	pop	{r3, r4, r5, pc}
 801b7c8:	20002e4c 	.word	0x20002e4c

0801b7cc <_read_r>:
 801b7cc:	b538      	push	{r3, r4, r5, lr}
 801b7ce:	4d07      	ldr	r5, [pc, #28]	; (801b7ec <_read_r+0x20>)
 801b7d0:	4604      	mov	r4, r0
 801b7d2:	4608      	mov	r0, r1
 801b7d4:	4611      	mov	r1, r2
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	602a      	str	r2, [r5, #0]
 801b7da:	461a      	mov	r2, r3
 801b7dc:	f7e5 fc9e 	bl	800111c <_read>
 801b7e0:	1c43      	adds	r3, r0, #1
 801b7e2:	d102      	bne.n	801b7ea <_read_r+0x1e>
 801b7e4:	682b      	ldr	r3, [r5, #0]
 801b7e6:	b103      	cbz	r3, 801b7ea <_read_r+0x1e>
 801b7e8:	6023      	str	r3, [r4, #0]
 801b7ea:	bd38      	pop	{r3, r4, r5, pc}
 801b7ec:	20002e4c 	.word	0x20002e4c

0801b7f0 <_sbrk_r>:
 801b7f0:	b538      	push	{r3, r4, r5, lr}
 801b7f2:	4d06      	ldr	r5, [pc, #24]	; (801b80c <_sbrk_r+0x1c>)
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	4604      	mov	r4, r0
 801b7f8:	4608      	mov	r0, r1
 801b7fa:	602b      	str	r3, [r5, #0]
 801b7fc:	f7e5 fc9c 	bl	8001138 <_sbrk>
 801b800:	1c43      	adds	r3, r0, #1
 801b802:	d102      	bne.n	801b80a <_sbrk_r+0x1a>
 801b804:	682b      	ldr	r3, [r5, #0]
 801b806:	b103      	cbz	r3, 801b80a <_sbrk_r+0x1a>
 801b808:	6023      	str	r3, [r4, #0]
 801b80a:	bd38      	pop	{r3, r4, r5, pc}
 801b80c:	20002e4c 	.word	0x20002e4c

0801b810 <_write_r>:
 801b810:	b538      	push	{r3, r4, r5, lr}
 801b812:	4d07      	ldr	r5, [pc, #28]	; (801b830 <_write_r+0x20>)
 801b814:	4604      	mov	r4, r0
 801b816:	4608      	mov	r0, r1
 801b818:	4611      	mov	r1, r2
 801b81a:	2200      	movs	r2, #0
 801b81c:	602a      	str	r2, [r5, #0]
 801b81e:	461a      	mov	r2, r3
 801b820:	f7f0 f92a 	bl	800ba78 <_write>
 801b824:	1c43      	adds	r3, r0, #1
 801b826:	d102      	bne.n	801b82e <_write_r+0x1e>
 801b828:	682b      	ldr	r3, [r5, #0]
 801b82a:	b103      	cbz	r3, 801b82e <_write_r+0x1e>
 801b82c:	6023      	str	r3, [r4, #0]
 801b82e:	bd38      	pop	{r3, r4, r5, pc}
 801b830:	20002e4c 	.word	0x20002e4c

0801b834 <__errno>:
 801b834:	4b01      	ldr	r3, [pc, #4]	; (801b83c <__errno+0x8>)
 801b836:	6818      	ldr	r0, [r3, #0]
 801b838:	4770      	bx	lr
 801b83a:	bf00      	nop
 801b83c:	20000e40 	.word	0x20000e40

0801b840 <__libc_init_array>:
 801b840:	b570      	push	{r4, r5, r6, lr}
 801b842:	4d0d      	ldr	r5, [pc, #52]	; (801b878 <__libc_init_array+0x38>)
 801b844:	4c0d      	ldr	r4, [pc, #52]	; (801b87c <__libc_init_array+0x3c>)
 801b846:	1b64      	subs	r4, r4, r5
 801b848:	10a4      	asrs	r4, r4, #2
 801b84a:	2600      	movs	r6, #0
 801b84c:	42a6      	cmp	r6, r4
 801b84e:	d109      	bne.n	801b864 <__libc_init_array+0x24>
 801b850:	4d0b      	ldr	r5, [pc, #44]	; (801b880 <__libc_init_array+0x40>)
 801b852:	4c0c      	ldr	r4, [pc, #48]	; (801b884 <__libc_init_array+0x44>)
 801b854:	f002 ff70 	bl	801e738 <_init>
 801b858:	1b64      	subs	r4, r4, r5
 801b85a:	10a4      	asrs	r4, r4, #2
 801b85c:	2600      	movs	r6, #0
 801b85e:	42a6      	cmp	r6, r4
 801b860:	d105      	bne.n	801b86e <__libc_init_array+0x2e>
 801b862:	bd70      	pop	{r4, r5, r6, pc}
 801b864:	f855 3b04 	ldr.w	r3, [r5], #4
 801b868:	4798      	blx	r3
 801b86a:	3601      	adds	r6, #1
 801b86c:	e7ee      	b.n	801b84c <__libc_init_array+0xc>
 801b86e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b872:	4798      	blx	r3
 801b874:	3601      	adds	r6, #1
 801b876:	e7f2      	b.n	801b85e <__libc_init_array+0x1e>
 801b878:	080230d0 	.word	0x080230d0
 801b87c:	080230d0 	.word	0x080230d0
 801b880:	080230d0 	.word	0x080230d0
 801b884:	080230d4 	.word	0x080230d4

0801b888 <__retarget_lock_init_recursive>:
 801b888:	4770      	bx	lr

0801b88a <__retarget_lock_acquire_recursive>:
 801b88a:	4770      	bx	lr

0801b88c <__retarget_lock_release_recursive>:
 801b88c:	4770      	bx	lr

0801b88e <strcpy>:
 801b88e:	4603      	mov	r3, r0
 801b890:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b894:	f803 2b01 	strb.w	r2, [r3], #1
 801b898:	2a00      	cmp	r2, #0
 801b89a:	d1f9      	bne.n	801b890 <strcpy+0x2>
 801b89c:	4770      	bx	lr

0801b89e <memcpy>:
 801b89e:	440a      	add	r2, r1
 801b8a0:	4291      	cmp	r1, r2
 801b8a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b8a6:	d100      	bne.n	801b8aa <memcpy+0xc>
 801b8a8:	4770      	bx	lr
 801b8aa:	b510      	push	{r4, lr}
 801b8ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b8b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b8b4:	4291      	cmp	r1, r2
 801b8b6:	d1f9      	bne.n	801b8ac <memcpy+0xe>
 801b8b8:	bd10      	pop	{r4, pc}
 801b8ba:	0000      	movs	r0, r0
 801b8bc:	0000      	movs	r0, r0
	...

0801b8c0 <nan>:
 801b8c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b8c8 <nan+0x8>
 801b8c4:	4770      	bx	lr
 801b8c6:	bf00      	nop
 801b8c8:	00000000 	.word	0x00000000
 801b8cc:	7ff80000 	.word	0x7ff80000

0801b8d0 <nanf>:
 801b8d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b8d8 <nanf+0x8>
 801b8d4:	4770      	bx	lr
 801b8d6:	bf00      	nop
 801b8d8:	7fc00000 	.word	0x7fc00000

0801b8dc <__assert_func>:
 801b8dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b8de:	4614      	mov	r4, r2
 801b8e0:	461a      	mov	r2, r3
 801b8e2:	4b09      	ldr	r3, [pc, #36]	; (801b908 <__assert_func+0x2c>)
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	4605      	mov	r5, r0
 801b8e8:	68d8      	ldr	r0, [r3, #12]
 801b8ea:	b14c      	cbz	r4, 801b900 <__assert_func+0x24>
 801b8ec:	4b07      	ldr	r3, [pc, #28]	; (801b90c <__assert_func+0x30>)
 801b8ee:	9100      	str	r1, [sp, #0]
 801b8f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b8f4:	4906      	ldr	r1, [pc, #24]	; (801b910 <__assert_func+0x34>)
 801b8f6:	462b      	mov	r3, r5
 801b8f8:	f002 fa22 	bl	801dd40 <fiprintf>
 801b8fc:	f002 faea 	bl	801ded4 <abort>
 801b900:	4b04      	ldr	r3, [pc, #16]	; (801b914 <__assert_func+0x38>)
 801b902:	461c      	mov	r4, r3
 801b904:	e7f3      	b.n	801b8ee <__assert_func+0x12>
 801b906:	bf00      	nop
 801b908:	20000e40 	.word	0x20000e40
 801b90c:	08022e32 	.word	0x08022e32
 801b910:	08022e3f 	.word	0x08022e3f
 801b914:	08022e6d 	.word	0x08022e6d

0801b918 <quorem>:
 801b918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91c:	6903      	ldr	r3, [r0, #16]
 801b91e:	690c      	ldr	r4, [r1, #16]
 801b920:	42a3      	cmp	r3, r4
 801b922:	4607      	mov	r7, r0
 801b924:	db7e      	blt.n	801ba24 <quorem+0x10c>
 801b926:	3c01      	subs	r4, #1
 801b928:	f101 0814 	add.w	r8, r1, #20
 801b92c:	f100 0514 	add.w	r5, r0, #20
 801b930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b934:	9301      	str	r3, [sp, #4]
 801b936:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b93a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b93e:	3301      	adds	r3, #1
 801b940:	429a      	cmp	r2, r3
 801b942:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b946:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b94a:	fbb2 f6f3 	udiv	r6, r2, r3
 801b94e:	d331      	bcc.n	801b9b4 <quorem+0x9c>
 801b950:	f04f 0e00 	mov.w	lr, #0
 801b954:	4640      	mov	r0, r8
 801b956:	46ac      	mov	ip, r5
 801b958:	46f2      	mov	sl, lr
 801b95a:	f850 2b04 	ldr.w	r2, [r0], #4
 801b95e:	b293      	uxth	r3, r2
 801b960:	fb06 e303 	mla	r3, r6, r3, lr
 801b964:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b968:	0c1a      	lsrs	r2, r3, #16
 801b96a:	b29b      	uxth	r3, r3
 801b96c:	ebaa 0303 	sub.w	r3, sl, r3
 801b970:	f8dc a000 	ldr.w	sl, [ip]
 801b974:	fa13 f38a 	uxtah	r3, r3, sl
 801b978:	fb06 220e 	mla	r2, r6, lr, r2
 801b97c:	9300      	str	r3, [sp, #0]
 801b97e:	9b00      	ldr	r3, [sp, #0]
 801b980:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b984:	b292      	uxth	r2, r2
 801b986:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b98a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b98e:	f8bd 3000 	ldrh.w	r3, [sp]
 801b992:	4581      	cmp	r9, r0
 801b994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b998:	f84c 3b04 	str.w	r3, [ip], #4
 801b99c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b9a0:	d2db      	bcs.n	801b95a <quorem+0x42>
 801b9a2:	f855 300b 	ldr.w	r3, [r5, fp]
 801b9a6:	b92b      	cbnz	r3, 801b9b4 <quorem+0x9c>
 801b9a8:	9b01      	ldr	r3, [sp, #4]
 801b9aa:	3b04      	subs	r3, #4
 801b9ac:	429d      	cmp	r5, r3
 801b9ae:	461a      	mov	r2, r3
 801b9b0:	d32c      	bcc.n	801ba0c <quorem+0xf4>
 801b9b2:	613c      	str	r4, [r7, #16]
 801b9b4:	4638      	mov	r0, r7
 801b9b6:	f001 fca5 	bl	801d304 <__mcmp>
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	db22      	blt.n	801ba04 <quorem+0xec>
 801b9be:	3601      	adds	r6, #1
 801b9c0:	4629      	mov	r1, r5
 801b9c2:	2000      	movs	r0, #0
 801b9c4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b9c8:	f8d1 c000 	ldr.w	ip, [r1]
 801b9cc:	b293      	uxth	r3, r2
 801b9ce:	1ac3      	subs	r3, r0, r3
 801b9d0:	0c12      	lsrs	r2, r2, #16
 801b9d2:	fa13 f38c 	uxtah	r3, r3, ip
 801b9d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b9da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b9de:	b29b      	uxth	r3, r3
 801b9e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b9e4:	45c1      	cmp	r9, r8
 801b9e6:	f841 3b04 	str.w	r3, [r1], #4
 801b9ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b9ee:	d2e9      	bcs.n	801b9c4 <quorem+0xac>
 801b9f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b9f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b9f8:	b922      	cbnz	r2, 801ba04 <quorem+0xec>
 801b9fa:	3b04      	subs	r3, #4
 801b9fc:	429d      	cmp	r5, r3
 801b9fe:	461a      	mov	r2, r3
 801ba00:	d30a      	bcc.n	801ba18 <quorem+0x100>
 801ba02:	613c      	str	r4, [r7, #16]
 801ba04:	4630      	mov	r0, r6
 801ba06:	b003      	add	sp, #12
 801ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0c:	6812      	ldr	r2, [r2, #0]
 801ba0e:	3b04      	subs	r3, #4
 801ba10:	2a00      	cmp	r2, #0
 801ba12:	d1ce      	bne.n	801b9b2 <quorem+0x9a>
 801ba14:	3c01      	subs	r4, #1
 801ba16:	e7c9      	b.n	801b9ac <quorem+0x94>
 801ba18:	6812      	ldr	r2, [r2, #0]
 801ba1a:	3b04      	subs	r3, #4
 801ba1c:	2a00      	cmp	r2, #0
 801ba1e:	d1f0      	bne.n	801ba02 <quorem+0xea>
 801ba20:	3c01      	subs	r4, #1
 801ba22:	e7eb      	b.n	801b9fc <quorem+0xe4>
 801ba24:	2000      	movs	r0, #0
 801ba26:	e7ee      	b.n	801ba06 <quorem+0xee>

0801ba28 <_dtoa_r>:
 801ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba2c:	ed2d 8b04 	vpush	{d8-d9}
 801ba30:	69c5      	ldr	r5, [r0, #28]
 801ba32:	b093      	sub	sp, #76	; 0x4c
 801ba34:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ba38:	ec57 6b10 	vmov	r6, r7, d0
 801ba3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ba40:	9107      	str	r1, [sp, #28]
 801ba42:	4604      	mov	r4, r0
 801ba44:	920a      	str	r2, [sp, #40]	; 0x28
 801ba46:	930d      	str	r3, [sp, #52]	; 0x34
 801ba48:	b975      	cbnz	r5, 801ba68 <_dtoa_r+0x40>
 801ba4a:	2010      	movs	r0, #16
 801ba4c:	f7fd fe16 	bl	801967c <malloc>
 801ba50:	4602      	mov	r2, r0
 801ba52:	61e0      	str	r0, [r4, #28]
 801ba54:	b920      	cbnz	r0, 801ba60 <_dtoa_r+0x38>
 801ba56:	4bae      	ldr	r3, [pc, #696]	; (801bd10 <_dtoa_r+0x2e8>)
 801ba58:	21ef      	movs	r1, #239	; 0xef
 801ba5a:	48ae      	ldr	r0, [pc, #696]	; (801bd14 <_dtoa_r+0x2ec>)
 801ba5c:	f7ff ff3e 	bl	801b8dc <__assert_func>
 801ba60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ba64:	6005      	str	r5, [r0, #0]
 801ba66:	60c5      	str	r5, [r0, #12]
 801ba68:	69e3      	ldr	r3, [r4, #28]
 801ba6a:	6819      	ldr	r1, [r3, #0]
 801ba6c:	b151      	cbz	r1, 801ba84 <_dtoa_r+0x5c>
 801ba6e:	685a      	ldr	r2, [r3, #4]
 801ba70:	604a      	str	r2, [r1, #4]
 801ba72:	2301      	movs	r3, #1
 801ba74:	4093      	lsls	r3, r2
 801ba76:	608b      	str	r3, [r1, #8]
 801ba78:	4620      	mov	r0, r4
 801ba7a:	f001 f9bd 	bl	801cdf8 <_Bfree>
 801ba7e:	69e3      	ldr	r3, [r4, #28]
 801ba80:	2200      	movs	r2, #0
 801ba82:	601a      	str	r2, [r3, #0]
 801ba84:	1e3b      	subs	r3, r7, #0
 801ba86:	bfbb      	ittet	lt
 801ba88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ba8c:	9303      	strlt	r3, [sp, #12]
 801ba8e:	2300      	movge	r3, #0
 801ba90:	2201      	movlt	r2, #1
 801ba92:	bfac      	ite	ge
 801ba94:	f8c8 3000 	strge.w	r3, [r8]
 801ba98:	f8c8 2000 	strlt.w	r2, [r8]
 801ba9c:	4b9e      	ldr	r3, [pc, #632]	; (801bd18 <_dtoa_r+0x2f0>)
 801ba9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801baa2:	ea33 0308 	bics.w	r3, r3, r8
 801baa6:	d11b      	bne.n	801bae0 <_dtoa_r+0xb8>
 801baa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801baaa:	f242 730f 	movw	r3, #9999	; 0x270f
 801baae:	6013      	str	r3, [r2, #0]
 801bab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801bab4:	4333      	orrs	r3, r6
 801bab6:	f000 8593 	beq.w	801c5e0 <_dtoa_r+0xbb8>
 801baba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801babc:	b963      	cbnz	r3, 801bad8 <_dtoa_r+0xb0>
 801babe:	4b97      	ldr	r3, [pc, #604]	; (801bd1c <_dtoa_r+0x2f4>)
 801bac0:	e027      	b.n	801bb12 <_dtoa_r+0xea>
 801bac2:	4b97      	ldr	r3, [pc, #604]	; (801bd20 <_dtoa_r+0x2f8>)
 801bac4:	9300      	str	r3, [sp, #0]
 801bac6:	3308      	adds	r3, #8
 801bac8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801baca:	6013      	str	r3, [r2, #0]
 801bacc:	9800      	ldr	r0, [sp, #0]
 801bace:	b013      	add	sp, #76	; 0x4c
 801bad0:	ecbd 8b04 	vpop	{d8-d9}
 801bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad8:	4b90      	ldr	r3, [pc, #576]	; (801bd1c <_dtoa_r+0x2f4>)
 801bada:	9300      	str	r3, [sp, #0]
 801badc:	3303      	adds	r3, #3
 801bade:	e7f3      	b.n	801bac8 <_dtoa_r+0xa0>
 801bae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bae4:	2200      	movs	r2, #0
 801bae6:	ec51 0b17 	vmov	r0, r1, d7
 801baea:	eeb0 8a47 	vmov.f32	s16, s14
 801baee:	eef0 8a67 	vmov.f32	s17, s15
 801baf2:	2300      	movs	r3, #0
 801baf4:	f7e5 f810 	bl	8000b18 <__aeabi_dcmpeq>
 801baf8:	4681      	mov	r9, r0
 801bafa:	b160      	cbz	r0, 801bb16 <_dtoa_r+0xee>
 801bafc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bafe:	2301      	movs	r3, #1
 801bb00:	6013      	str	r3, [r2, #0]
 801bb02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	f000 8568 	beq.w	801c5da <_dtoa_r+0xbb2>
 801bb0a:	4b86      	ldr	r3, [pc, #536]	; (801bd24 <_dtoa_r+0x2fc>)
 801bb0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb0e:	6013      	str	r3, [r2, #0]
 801bb10:	3b01      	subs	r3, #1
 801bb12:	9300      	str	r3, [sp, #0]
 801bb14:	e7da      	b.n	801bacc <_dtoa_r+0xa4>
 801bb16:	aa10      	add	r2, sp, #64	; 0x40
 801bb18:	a911      	add	r1, sp, #68	; 0x44
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	eeb0 0a48 	vmov.f32	s0, s16
 801bb20:	eef0 0a68 	vmov.f32	s1, s17
 801bb24:	f001 fd04 	bl	801d530 <__d2b>
 801bb28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801bb2c:	4682      	mov	sl, r0
 801bb2e:	2d00      	cmp	r5, #0
 801bb30:	d07f      	beq.n	801bc32 <_dtoa_r+0x20a>
 801bb32:	ee18 3a90 	vmov	r3, s17
 801bb36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bb3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801bb3e:	ec51 0b18 	vmov	r0, r1, d8
 801bb42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801bb46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bb4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801bb4e:	4619      	mov	r1, r3
 801bb50:	2200      	movs	r2, #0
 801bb52:	4b75      	ldr	r3, [pc, #468]	; (801bd28 <_dtoa_r+0x300>)
 801bb54:	f7e4 fbc0 	bl	80002d8 <__aeabi_dsub>
 801bb58:	a367      	add	r3, pc, #412	; (adr r3, 801bcf8 <_dtoa_r+0x2d0>)
 801bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb5e:	f7e4 fd73 	bl	8000648 <__aeabi_dmul>
 801bb62:	a367      	add	r3, pc, #412	; (adr r3, 801bd00 <_dtoa_r+0x2d8>)
 801bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb68:	f7e4 fbb8 	bl	80002dc <__adddf3>
 801bb6c:	4606      	mov	r6, r0
 801bb6e:	4628      	mov	r0, r5
 801bb70:	460f      	mov	r7, r1
 801bb72:	f7e4 fcff 	bl	8000574 <__aeabi_i2d>
 801bb76:	a364      	add	r3, pc, #400	; (adr r3, 801bd08 <_dtoa_r+0x2e0>)
 801bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb7c:	f7e4 fd64 	bl	8000648 <__aeabi_dmul>
 801bb80:	4602      	mov	r2, r0
 801bb82:	460b      	mov	r3, r1
 801bb84:	4630      	mov	r0, r6
 801bb86:	4639      	mov	r1, r7
 801bb88:	f7e4 fba8 	bl	80002dc <__adddf3>
 801bb8c:	4606      	mov	r6, r0
 801bb8e:	460f      	mov	r7, r1
 801bb90:	f7e5 f80a 	bl	8000ba8 <__aeabi_d2iz>
 801bb94:	2200      	movs	r2, #0
 801bb96:	4683      	mov	fp, r0
 801bb98:	2300      	movs	r3, #0
 801bb9a:	4630      	mov	r0, r6
 801bb9c:	4639      	mov	r1, r7
 801bb9e:	f7e4 ffc5 	bl	8000b2c <__aeabi_dcmplt>
 801bba2:	b148      	cbz	r0, 801bbb8 <_dtoa_r+0x190>
 801bba4:	4658      	mov	r0, fp
 801bba6:	f7e4 fce5 	bl	8000574 <__aeabi_i2d>
 801bbaa:	4632      	mov	r2, r6
 801bbac:	463b      	mov	r3, r7
 801bbae:	f7e4 ffb3 	bl	8000b18 <__aeabi_dcmpeq>
 801bbb2:	b908      	cbnz	r0, 801bbb8 <_dtoa_r+0x190>
 801bbb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bbb8:	f1bb 0f16 	cmp.w	fp, #22
 801bbbc:	d857      	bhi.n	801bc6e <_dtoa_r+0x246>
 801bbbe:	4b5b      	ldr	r3, [pc, #364]	; (801bd2c <_dtoa_r+0x304>)
 801bbc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc8:	ec51 0b18 	vmov	r0, r1, d8
 801bbcc:	f7e4 ffae 	bl	8000b2c <__aeabi_dcmplt>
 801bbd0:	2800      	cmp	r0, #0
 801bbd2:	d04e      	beq.n	801bc72 <_dtoa_r+0x24a>
 801bbd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bbd8:	2300      	movs	r3, #0
 801bbda:	930c      	str	r3, [sp, #48]	; 0x30
 801bbdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbde:	1b5b      	subs	r3, r3, r5
 801bbe0:	1e5a      	subs	r2, r3, #1
 801bbe2:	bf45      	ittet	mi
 801bbe4:	f1c3 0301 	rsbmi	r3, r3, #1
 801bbe8:	9305      	strmi	r3, [sp, #20]
 801bbea:	2300      	movpl	r3, #0
 801bbec:	2300      	movmi	r3, #0
 801bbee:	9206      	str	r2, [sp, #24]
 801bbf0:	bf54      	ite	pl
 801bbf2:	9305      	strpl	r3, [sp, #20]
 801bbf4:	9306      	strmi	r3, [sp, #24]
 801bbf6:	f1bb 0f00 	cmp.w	fp, #0
 801bbfa:	db3c      	blt.n	801bc76 <_dtoa_r+0x24e>
 801bbfc:	9b06      	ldr	r3, [sp, #24]
 801bbfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801bc02:	445b      	add	r3, fp
 801bc04:	9306      	str	r3, [sp, #24]
 801bc06:	2300      	movs	r3, #0
 801bc08:	9308      	str	r3, [sp, #32]
 801bc0a:	9b07      	ldr	r3, [sp, #28]
 801bc0c:	2b09      	cmp	r3, #9
 801bc0e:	d868      	bhi.n	801bce2 <_dtoa_r+0x2ba>
 801bc10:	2b05      	cmp	r3, #5
 801bc12:	bfc4      	itt	gt
 801bc14:	3b04      	subgt	r3, #4
 801bc16:	9307      	strgt	r3, [sp, #28]
 801bc18:	9b07      	ldr	r3, [sp, #28]
 801bc1a:	f1a3 0302 	sub.w	r3, r3, #2
 801bc1e:	bfcc      	ite	gt
 801bc20:	2500      	movgt	r5, #0
 801bc22:	2501      	movle	r5, #1
 801bc24:	2b03      	cmp	r3, #3
 801bc26:	f200 8085 	bhi.w	801bd34 <_dtoa_r+0x30c>
 801bc2a:	e8df f003 	tbb	[pc, r3]
 801bc2e:	3b2e      	.short	0x3b2e
 801bc30:	5839      	.short	0x5839
 801bc32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bc36:	441d      	add	r5, r3
 801bc38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bc3c:	2b20      	cmp	r3, #32
 801bc3e:	bfc1      	itttt	gt
 801bc40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bc44:	fa08 f803 	lslgt.w	r8, r8, r3
 801bc48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801bc4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 801bc50:	bfd6      	itet	le
 801bc52:	f1c3 0320 	rsble	r3, r3, #32
 801bc56:	ea48 0003 	orrgt.w	r0, r8, r3
 801bc5a:	fa06 f003 	lslle.w	r0, r6, r3
 801bc5e:	f7e4 fc79 	bl	8000554 <__aeabi_ui2d>
 801bc62:	2201      	movs	r2, #1
 801bc64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801bc68:	3d01      	subs	r5, #1
 801bc6a:	920e      	str	r2, [sp, #56]	; 0x38
 801bc6c:	e76f      	b.n	801bb4e <_dtoa_r+0x126>
 801bc6e:	2301      	movs	r3, #1
 801bc70:	e7b3      	b.n	801bbda <_dtoa_r+0x1b2>
 801bc72:	900c      	str	r0, [sp, #48]	; 0x30
 801bc74:	e7b2      	b.n	801bbdc <_dtoa_r+0x1b4>
 801bc76:	9b05      	ldr	r3, [sp, #20]
 801bc78:	eba3 030b 	sub.w	r3, r3, fp
 801bc7c:	9305      	str	r3, [sp, #20]
 801bc7e:	f1cb 0300 	rsb	r3, fp, #0
 801bc82:	9308      	str	r3, [sp, #32]
 801bc84:	2300      	movs	r3, #0
 801bc86:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc88:	e7bf      	b.n	801bc0a <_dtoa_r+0x1e2>
 801bc8a:	2300      	movs	r3, #0
 801bc8c:	9309      	str	r3, [sp, #36]	; 0x24
 801bc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	dc52      	bgt.n	801bd3a <_dtoa_r+0x312>
 801bc94:	2301      	movs	r3, #1
 801bc96:	9301      	str	r3, [sp, #4]
 801bc98:	9304      	str	r3, [sp, #16]
 801bc9a:	461a      	mov	r2, r3
 801bc9c:	920a      	str	r2, [sp, #40]	; 0x28
 801bc9e:	e00b      	b.n	801bcb8 <_dtoa_r+0x290>
 801bca0:	2301      	movs	r3, #1
 801bca2:	e7f3      	b.n	801bc8c <_dtoa_r+0x264>
 801bca4:	2300      	movs	r3, #0
 801bca6:	9309      	str	r3, [sp, #36]	; 0x24
 801bca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcaa:	445b      	add	r3, fp
 801bcac:	9301      	str	r3, [sp, #4]
 801bcae:	3301      	adds	r3, #1
 801bcb0:	2b01      	cmp	r3, #1
 801bcb2:	9304      	str	r3, [sp, #16]
 801bcb4:	bfb8      	it	lt
 801bcb6:	2301      	movlt	r3, #1
 801bcb8:	69e0      	ldr	r0, [r4, #28]
 801bcba:	2100      	movs	r1, #0
 801bcbc:	2204      	movs	r2, #4
 801bcbe:	f102 0614 	add.w	r6, r2, #20
 801bcc2:	429e      	cmp	r6, r3
 801bcc4:	d93d      	bls.n	801bd42 <_dtoa_r+0x31a>
 801bcc6:	6041      	str	r1, [r0, #4]
 801bcc8:	4620      	mov	r0, r4
 801bcca:	f001 f855 	bl	801cd78 <_Balloc>
 801bcce:	9000      	str	r0, [sp, #0]
 801bcd0:	2800      	cmp	r0, #0
 801bcd2:	d139      	bne.n	801bd48 <_dtoa_r+0x320>
 801bcd4:	4b16      	ldr	r3, [pc, #88]	; (801bd30 <_dtoa_r+0x308>)
 801bcd6:	4602      	mov	r2, r0
 801bcd8:	f240 11af 	movw	r1, #431	; 0x1af
 801bcdc:	e6bd      	b.n	801ba5a <_dtoa_r+0x32>
 801bcde:	2301      	movs	r3, #1
 801bce0:	e7e1      	b.n	801bca6 <_dtoa_r+0x27e>
 801bce2:	2501      	movs	r5, #1
 801bce4:	2300      	movs	r3, #0
 801bce6:	9307      	str	r3, [sp, #28]
 801bce8:	9509      	str	r5, [sp, #36]	; 0x24
 801bcea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bcee:	9301      	str	r3, [sp, #4]
 801bcf0:	9304      	str	r3, [sp, #16]
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	2312      	movs	r3, #18
 801bcf6:	e7d1      	b.n	801bc9c <_dtoa_r+0x274>
 801bcf8:	636f4361 	.word	0x636f4361
 801bcfc:	3fd287a7 	.word	0x3fd287a7
 801bd00:	8b60c8b3 	.word	0x8b60c8b3
 801bd04:	3fc68a28 	.word	0x3fc68a28
 801bd08:	509f79fb 	.word	0x509f79fb
 801bd0c:	3fd34413 	.word	0x3fd34413
 801bd10:	08022c28 	.word	0x08022c28
 801bd14:	08022e7b 	.word	0x08022e7b
 801bd18:	7ff00000 	.word	0x7ff00000
 801bd1c:	08022e77 	.word	0x08022e77
 801bd20:	08022e6e 	.word	0x08022e6e
 801bd24:	08022e02 	.word	0x08022e02
 801bd28:	3ff80000 	.word	0x3ff80000
 801bd2c:	08022fc8 	.word	0x08022fc8
 801bd30:	08022ed3 	.word	0x08022ed3
 801bd34:	2301      	movs	r3, #1
 801bd36:	9309      	str	r3, [sp, #36]	; 0x24
 801bd38:	e7d7      	b.n	801bcea <_dtoa_r+0x2c2>
 801bd3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd3c:	9301      	str	r3, [sp, #4]
 801bd3e:	9304      	str	r3, [sp, #16]
 801bd40:	e7ba      	b.n	801bcb8 <_dtoa_r+0x290>
 801bd42:	3101      	adds	r1, #1
 801bd44:	0052      	lsls	r2, r2, #1
 801bd46:	e7ba      	b.n	801bcbe <_dtoa_r+0x296>
 801bd48:	69e3      	ldr	r3, [r4, #28]
 801bd4a:	9a00      	ldr	r2, [sp, #0]
 801bd4c:	601a      	str	r2, [r3, #0]
 801bd4e:	9b04      	ldr	r3, [sp, #16]
 801bd50:	2b0e      	cmp	r3, #14
 801bd52:	f200 80a8 	bhi.w	801bea6 <_dtoa_r+0x47e>
 801bd56:	2d00      	cmp	r5, #0
 801bd58:	f000 80a5 	beq.w	801bea6 <_dtoa_r+0x47e>
 801bd5c:	f1bb 0f00 	cmp.w	fp, #0
 801bd60:	dd38      	ble.n	801bdd4 <_dtoa_r+0x3ac>
 801bd62:	4bc0      	ldr	r3, [pc, #768]	; (801c064 <_dtoa_r+0x63c>)
 801bd64:	f00b 020f 	and.w	r2, fp, #15
 801bd68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bd70:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bd74:	ea4f 182b 	mov.w	r8, fp, asr #4
 801bd78:	d019      	beq.n	801bdae <_dtoa_r+0x386>
 801bd7a:	4bbb      	ldr	r3, [pc, #748]	; (801c068 <_dtoa_r+0x640>)
 801bd7c:	ec51 0b18 	vmov	r0, r1, d8
 801bd80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bd84:	f7e4 fd8a 	bl	800089c <__aeabi_ddiv>
 801bd88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd8c:	f008 080f 	and.w	r8, r8, #15
 801bd90:	2503      	movs	r5, #3
 801bd92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801c068 <_dtoa_r+0x640>
 801bd96:	f1b8 0f00 	cmp.w	r8, #0
 801bd9a:	d10a      	bne.n	801bdb2 <_dtoa_r+0x38a>
 801bd9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bda0:	4632      	mov	r2, r6
 801bda2:	463b      	mov	r3, r7
 801bda4:	f7e4 fd7a 	bl	800089c <__aeabi_ddiv>
 801bda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdac:	e02b      	b.n	801be06 <_dtoa_r+0x3de>
 801bdae:	2502      	movs	r5, #2
 801bdb0:	e7ef      	b.n	801bd92 <_dtoa_r+0x36a>
 801bdb2:	f018 0f01 	tst.w	r8, #1
 801bdb6:	d008      	beq.n	801bdca <_dtoa_r+0x3a2>
 801bdb8:	4630      	mov	r0, r6
 801bdba:	4639      	mov	r1, r7
 801bdbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bdc0:	f7e4 fc42 	bl	8000648 <__aeabi_dmul>
 801bdc4:	3501      	adds	r5, #1
 801bdc6:	4606      	mov	r6, r0
 801bdc8:	460f      	mov	r7, r1
 801bdca:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bdce:	f109 0908 	add.w	r9, r9, #8
 801bdd2:	e7e0      	b.n	801bd96 <_dtoa_r+0x36e>
 801bdd4:	f000 809f 	beq.w	801bf16 <_dtoa_r+0x4ee>
 801bdd8:	f1cb 0600 	rsb	r6, fp, #0
 801bddc:	4ba1      	ldr	r3, [pc, #644]	; (801c064 <_dtoa_r+0x63c>)
 801bdde:	4fa2      	ldr	r7, [pc, #648]	; (801c068 <_dtoa_r+0x640>)
 801bde0:	f006 020f 	and.w	r2, r6, #15
 801bde4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdec:	ec51 0b18 	vmov	r0, r1, d8
 801bdf0:	f7e4 fc2a 	bl	8000648 <__aeabi_dmul>
 801bdf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdf8:	1136      	asrs	r6, r6, #4
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	2502      	movs	r5, #2
 801bdfe:	2e00      	cmp	r6, #0
 801be00:	d17e      	bne.n	801bf00 <_dtoa_r+0x4d8>
 801be02:	2b00      	cmp	r3, #0
 801be04:	d1d0      	bne.n	801bda8 <_dtoa_r+0x380>
 801be06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	f000 8084 	beq.w	801bf1a <_dtoa_r+0x4f2>
 801be12:	4b96      	ldr	r3, [pc, #600]	; (801c06c <_dtoa_r+0x644>)
 801be14:	2200      	movs	r2, #0
 801be16:	4640      	mov	r0, r8
 801be18:	4649      	mov	r1, r9
 801be1a:	f7e4 fe87 	bl	8000b2c <__aeabi_dcmplt>
 801be1e:	2800      	cmp	r0, #0
 801be20:	d07b      	beq.n	801bf1a <_dtoa_r+0x4f2>
 801be22:	9b04      	ldr	r3, [sp, #16]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d078      	beq.n	801bf1a <_dtoa_r+0x4f2>
 801be28:	9b01      	ldr	r3, [sp, #4]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	dd39      	ble.n	801bea2 <_dtoa_r+0x47a>
 801be2e:	4b90      	ldr	r3, [pc, #576]	; (801c070 <_dtoa_r+0x648>)
 801be30:	2200      	movs	r2, #0
 801be32:	4640      	mov	r0, r8
 801be34:	4649      	mov	r1, r9
 801be36:	f7e4 fc07 	bl	8000648 <__aeabi_dmul>
 801be3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be3e:	9e01      	ldr	r6, [sp, #4]
 801be40:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801be44:	3501      	adds	r5, #1
 801be46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801be4a:	4628      	mov	r0, r5
 801be4c:	f7e4 fb92 	bl	8000574 <__aeabi_i2d>
 801be50:	4642      	mov	r2, r8
 801be52:	464b      	mov	r3, r9
 801be54:	f7e4 fbf8 	bl	8000648 <__aeabi_dmul>
 801be58:	4b86      	ldr	r3, [pc, #536]	; (801c074 <_dtoa_r+0x64c>)
 801be5a:	2200      	movs	r2, #0
 801be5c:	f7e4 fa3e 	bl	80002dc <__adddf3>
 801be60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801be64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be68:	9303      	str	r3, [sp, #12]
 801be6a:	2e00      	cmp	r6, #0
 801be6c:	d158      	bne.n	801bf20 <_dtoa_r+0x4f8>
 801be6e:	4b82      	ldr	r3, [pc, #520]	; (801c078 <_dtoa_r+0x650>)
 801be70:	2200      	movs	r2, #0
 801be72:	4640      	mov	r0, r8
 801be74:	4649      	mov	r1, r9
 801be76:	f7e4 fa2f 	bl	80002d8 <__aeabi_dsub>
 801be7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be7e:	4680      	mov	r8, r0
 801be80:	4689      	mov	r9, r1
 801be82:	f7e4 fe71 	bl	8000b68 <__aeabi_dcmpgt>
 801be86:	2800      	cmp	r0, #0
 801be88:	f040 8296 	bne.w	801c3b8 <_dtoa_r+0x990>
 801be8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801be90:	4640      	mov	r0, r8
 801be92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be96:	4649      	mov	r1, r9
 801be98:	f7e4 fe48 	bl	8000b2c <__aeabi_dcmplt>
 801be9c:	2800      	cmp	r0, #0
 801be9e:	f040 8289 	bne.w	801c3b4 <_dtoa_r+0x98c>
 801bea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	f2c0 814e 	blt.w	801c14a <_dtoa_r+0x722>
 801beae:	f1bb 0f0e 	cmp.w	fp, #14
 801beb2:	f300 814a 	bgt.w	801c14a <_dtoa_r+0x722>
 801beb6:	4b6b      	ldr	r3, [pc, #428]	; (801c064 <_dtoa_r+0x63c>)
 801beb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	f280 80dc 	bge.w	801c080 <_dtoa_r+0x658>
 801bec8:	9b04      	ldr	r3, [sp, #16]
 801beca:	2b00      	cmp	r3, #0
 801becc:	f300 80d8 	bgt.w	801c080 <_dtoa_r+0x658>
 801bed0:	f040 826f 	bne.w	801c3b2 <_dtoa_r+0x98a>
 801bed4:	4b68      	ldr	r3, [pc, #416]	; (801c078 <_dtoa_r+0x650>)
 801bed6:	2200      	movs	r2, #0
 801bed8:	4640      	mov	r0, r8
 801beda:	4649      	mov	r1, r9
 801bedc:	f7e4 fbb4 	bl	8000648 <__aeabi_dmul>
 801bee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bee4:	f7e4 fe36 	bl	8000b54 <__aeabi_dcmpge>
 801bee8:	9e04      	ldr	r6, [sp, #16]
 801beea:	4637      	mov	r7, r6
 801beec:	2800      	cmp	r0, #0
 801beee:	f040 8245 	bne.w	801c37c <_dtoa_r+0x954>
 801bef2:	9d00      	ldr	r5, [sp, #0]
 801bef4:	2331      	movs	r3, #49	; 0x31
 801bef6:	f805 3b01 	strb.w	r3, [r5], #1
 801befa:	f10b 0b01 	add.w	fp, fp, #1
 801befe:	e241      	b.n	801c384 <_dtoa_r+0x95c>
 801bf00:	07f2      	lsls	r2, r6, #31
 801bf02:	d505      	bpl.n	801bf10 <_dtoa_r+0x4e8>
 801bf04:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bf08:	f7e4 fb9e 	bl	8000648 <__aeabi_dmul>
 801bf0c:	3501      	adds	r5, #1
 801bf0e:	2301      	movs	r3, #1
 801bf10:	1076      	asrs	r6, r6, #1
 801bf12:	3708      	adds	r7, #8
 801bf14:	e773      	b.n	801bdfe <_dtoa_r+0x3d6>
 801bf16:	2502      	movs	r5, #2
 801bf18:	e775      	b.n	801be06 <_dtoa_r+0x3de>
 801bf1a:	9e04      	ldr	r6, [sp, #16]
 801bf1c:	465f      	mov	r7, fp
 801bf1e:	e792      	b.n	801be46 <_dtoa_r+0x41e>
 801bf20:	9900      	ldr	r1, [sp, #0]
 801bf22:	4b50      	ldr	r3, [pc, #320]	; (801c064 <_dtoa_r+0x63c>)
 801bf24:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bf28:	4431      	add	r1, r6
 801bf2a:	9102      	str	r1, [sp, #8]
 801bf2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bf2e:	eeb0 9a47 	vmov.f32	s18, s14
 801bf32:	eef0 9a67 	vmov.f32	s19, s15
 801bf36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bf3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bf3e:	2900      	cmp	r1, #0
 801bf40:	d044      	beq.n	801bfcc <_dtoa_r+0x5a4>
 801bf42:	494e      	ldr	r1, [pc, #312]	; (801c07c <_dtoa_r+0x654>)
 801bf44:	2000      	movs	r0, #0
 801bf46:	f7e4 fca9 	bl	800089c <__aeabi_ddiv>
 801bf4a:	ec53 2b19 	vmov	r2, r3, d9
 801bf4e:	f7e4 f9c3 	bl	80002d8 <__aeabi_dsub>
 801bf52:	9d00      	ldr	r5, [sp, #0]
 801bf54:	ec41 0b19 	vmov	d9, r0, r1
 801bf58:	4649      	mov	r1, r9
 801bf5a:	4640      	mov	r0, r8
 801bf5c:	f7e4 fe24 	bl	8000ba8 <__aeabi_d2iz>
 801bf60:	4606      	mov	r6, r0
 801bf62:	f7e4 fb07 	bl	8000574 <__aeabi_i2d>
 801bf66:	4602      	mov	r2, r0
 801bf68:	460b      	mov	r3, r1
 801bf6a:	4640      	mov	r0, r8
 801bf6c:	4649      	mov	r1, r9
 801bf6e:	f7e4 f9b3 	bl	80002d8 <__aeabi_dsub>
 801bf72:	3630      	adds	r6, #48	; 0x30
 801bf74:	f805 6b01 	strb.w	r6, [r5], #1
 801bf78:	ec53 2b19 	vmov	r2, r3, d9
 801bf7c:	4680      	mov	r8, r0
 801bf7e:	4689      	mov	r9, r1
 801bf80:	f7e4 fdd4 	bl	8000b2c <__aeabi_dcmplt>
 801bf84:	2800      	cmp	r0, #0
 801bf86:	d164      	bne.n	801c052 <_dtoa_r+0x62a>
 801bf88:	4642      	mov	r2, r8
 801bf8a:	464b      	mov	r3, r9
 801bf8c:	4937      	ldr	r1, [pc, #220]	; (801c06c <_dtoa_r+0x644>)
 801bf8e:	2000      	movs	r0, #0
 801bf90:	f7e4 f9a2 	bl	80002d8 <__aeabi_dsub>
 801bf94:	ec53 2b19 	vmov	r2, r3, d9
 801bf98:	f7e4 fdc8 	bl	8000b2c <__aeabi_dcmplt>
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	f040 80b6 	bne.w	801c10e <_dtoa_r+0x6e6>
 801bfa2:	9b02      	ldr	r3, [sp, #8]
 801bfa4:	429d      	cmp	r5, r3
 801bfa6:	f43f af7c 	beq.w	801bea2 <_dtoa_r+0x47a>
 801bfaa:	4b31      	ldr	r3, [pc, #196]	; (801c070 <_dtoa_r+0x648>)
 801bfac:	ec51 0b19 	vmov	r0, r1, d9
 801bfb0:	2200      	movs	r2, #0
 801bfb2:	f7e4 fb49 	bl	8000648 <__aeabi_dmul>
 801bfb6:	4b2e      	ldr	r3, [pc, #184]	; (801c070 <_dtoa_r+0x648>)
 801bfb8:	ec41 0b19 	vmov	d9, r0, r1
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	4640      	mov	r0, r8
 801bfc0:	4649      	mov	r1, r9
 801bfc2:	f7e4 fb41 	bl	8000648 <__aeabi_dmul>
 801bfc6:	4680      	mov	r8, r0
 801bfc8:	4689      	mov	r9, r1
 801bfca:	e7c5      	b.n	801bf58 <_dtoa_r+0x530>
 801bfcc:	ec51 0b17 	vmov	r0, r1, d7
 801bfd0:	f7e4 fb3a 	bl	8000648 <__aeabi_dmul>
 801bfd4:	9b02      	ldr	r3, [sp, #8]
 801bfd6:	9d00      	ldr	r5, [sp, #0]
 801bfd8:	930f      	str	r3, [sp, #60]	; 0x3c
 801bfda:	ec41 0b19 	vmov	d9, r0, r1
 801bfde:	4649      	mov	r1, r9
 801bfe0:	4640      	mov	r0, r8
 801bfe2:	f7e4 fde1 	bl	8000ba8 <__aeabi_d2iz>
 801bfe6:	4606      	mov	r6, r0
 801bfe8:	f7e4 fac4 	bl	8000574 <__aeabi_i2d>
 801bfec:	3630      	adds	r6, #48	; 0x30
 801bfee:	4602      	mov	r2, r0
 801bff0:	460b      	mov	r3, r1
 801bff2:	4640      	mov	r0, r8
 801bff4:	4649      	mov	r1, r9
 801bff6:	f7e4 f96f 	bl	80002d8 <__aeabi_dsub>
 801bffa:	f805 6b01 	strb.w	r6, [r5], #1
 801bffe:	9b02      	ldr	r3, [sp, #8]
 801c000:	429d      	cmp	r5, r3
 801c002:	4680      	mov	r8, r0
 801c004:	4689      	mov	r9, r1
 801c006:	f04f 0200 	mov.w	r2, #0
 801c00a:	d124      	bne.n	801c056 <_dtoa_r+0x62e>
 801c00c:	4b1b      	ldr	r3, [pc, #108]	; (801c07c <_dtoa_r+0x654>)
 801c00e:	ec51 0b19 	vmov	r0, r1, d9
 801c012:	f7e4 f963 	bl	80002dc <__adddf3>
 801c016:	4602      	mov	r2, r0
 801c018:	460b      	mov	r3, r1
 801c01a:	4640      	mov	r0, r8
 801c01c:	4649      	mov	r1, r9
 801c01e:	f7e4 fda3 	bl	8000b68 <__aeabi_dcmpgt>
 801c022:	2800      	cmp	r0, #0
 801c024:	d173      	bne.n	801c10e <_dtoa_r+0x6e6>
 801c026:	ec53 2b19 	vmov	r2, r3, d9
 801c02a:	4914      	ldr	r1, [pc, #80]	; (801c07c <_dtoa_r+0x654>)
 801c02c:	2000      	movs	r0, #0
 801c02e:	f7e4 f953 	bl	80002d8 <__aeabi_dsub>
 801c032:	4602      	mov	r2, r0
 801c034:	460b      	mov	r3, r1
 801c036:	4640      	mov	r0, r8
 801c038:	4649      	mov	r1, r9
 801c03a:	f7e4 fd77 	bl	8000b2c <__aeabi_dcmplt>
 801c03e:	2800      	cmp	r0, #0
 801c040:	f43f af2f 	beq.w	801bea2 <_dtoa_r+0x47a>
 801c044:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c046:	1e6b      	subs	r3, r5, #1
 801c048:	930f      	str	r3, [sp, #60]	; 0x3c
 801c04a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c04e:	2b30      	cmp	r3, #48	; 0x30
 801c050:	d0f8      	beq.n	801c044 <_dtoa_r+0x61c>
 801c052:	46bb      	mov	fp, r7
 801c054:	e04a      	b.n	801c0ec <_dtoa_r+0x6c4>
 801c056:	4b06      	ldr	r3, [pc, #24]	; (801c070 <_dtoa_r+0x648>)
 801c058:	f7e4 faf6 	bl	8000648 <__aeabi_dmul>
 801c05c:	4680      	mov	r8, r0
 801c05e:	4689      	mov	r9, r1
 801c060:	e7bd      	b.n	801bfde <_dtoa_r+0x5b6>
 801c062:	bf00      	nop
 801c064:	08022fc8 	.word	0x08022fc8
 801c068:	08022fa0 	.word	0x08022fa0
 801c06c:	3ff00000 	.word	0x3ff00000
 801c070:	40240000 	.word	0x40240000
 801c074:	401c0000 	.word	0x401c0000
 801c078:	40140000 	.word	0x40140000
 801c07c:	3fe00000 	.word	0x3fe00000
 801c080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c084:	9d00      	ldr	r5, [sp, #0]
 801c086:	4642      	mov	r2, r8
 801c088:	464b      	mov	r3, r9
 801c08a:	4630      	mov	r0, r6
 801c08c:	4639      	mov	r1, r7
 801c08e:	f7e4 fc05 	bl	800089c <__aeabi_ddiv>
 801c092:	f7e4 fd89 	bl	8000ba8 <__aeabi_d2iz>
 801c096:	9001      	str	r0, [sp, #4]
 801c098:	f7e4 fa6c 	bl	8000574 <__aeabi_i2d>
 801c09c:	4642      	mov	r2, r8
 801c09e:	464b      	mov	r3, r9
 801c0a0:	f7e4 fad2 	bl	8000648 <__aeabi_dmul>
 801c0a4:	4602      	mov	r2, r0
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	4630      	mov	r0, r6
 801c0aa:	4639      	mov	r1, r7
 801c0ac:	f7e4 f914 	bl	80002d8 <__aeabi_dsub>
 801c0b0:	9e01      	ldr	r6, [sp, #4]
 801c0b2:	9f04      	ldr	r7, [sp, #16]
 801c0b4:	3630      	adds	r6, #48	; 0x30
 801c0b6:	f805 6b01 	strb.w	r6, [r5], #1
 801c0ba:	9e00      	ldr	r6, [sp, #0]
 801c0bc:	1bae      	subs	r6, r5, r6
 801c0be:	42b7      	cmp	r7, r6
 801c0c0:	4602      	mov	r2, r0
 801c0c2:	460b      	mov	r3, r1
 801c0c4:	d134      	bne.n	801c130 <_dtoa_r+0x708>
 801c0c6:	f7e4 f909 	bl	80002dc <__adddf3>
 801c0ca:	4642      	mov	r2, r8
 801c0cc:	464b      	mov	r3, r9
 801c0ce:	4606      	mov	r6, r0
 801c0d0:	460f      	mov	r7, r1
 801c0d2:	f7e4 fd49 	bl	8000b68 <__aeabi_dcmpgt>
 801c0d6:	b9c8      	cbnz	r0, 801c10c <_dtoa_r+0x6e4>
 801c0d8:	4642      	mov	r2, r8
 801c0da:	464b      	mov	r3, r9
 801c0dc:	4630      	mov	r0, r6
 801c0de:	4639      	mov	r1, r7
 801c0e0:	f7e4 fd1a 	bl	8000b18 <__aeabi_dcmpeq>
 801c0e4:	b110      	cbz	r0, 801c0ec <_dtoa_r+0x6c4>
 801c0e6:	9b01      	ldr	r3, [sp, #4]
 801c0e8:	07db      	lsls	r3, r3, #31
 801c0ea:	d40f      	bmi.n	801c10c <_dtoa_r+0x6e4>
 801c0ec:	4651      	mov	r1, sl
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	f000 fe82 	bl	801cdf8 <_Bfree>
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c0f8:	702b      	strb	r3, [r5, #0]
 801c0fa:	f10b 0301 	add.w	r3, fp, #1
 801c0fe:	6013      	str	r3, [r2, #0]
 801c100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c102:	2b00      	cmp	r3, #0
 801c104:	f43f ace2 	beq.w	801bacc <_dtoa_r+0xa4>
 801c108:	601d      	str	r5, [r3, #0]
 801c10a:	e4df      	b.n	801bacc <_dtoa_r+0xa4>
 801c10c:	465f      	mov	r7, fp
 801c10e:	462b      	mov	r3, r5
 801c110:	461d      	mov	r5, r3
 801c112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c116:	2a39      	cmp	r2, #57	; 0x39
 801c118:	d106      	bne.n	801c128 <_dtoa_r+0x700>
 801c11a:	9a00      	ldr	r2, [sp, #0]
 801c11c:	429a      	cmp	r2, r3
 801c11e:	d1f7      	bne.n	801c110 <_dtoa_r+0x6e8>
 801c120:	9900      	ldr	r1, [sp, #0]
 801c122:	2230      	movs	r2, #48	; 0x30
 801c124:	3701      	adds	r7, #1
 801c126:	700a      	strb	r2, [r1, #0]
 801c128:	781a      	ldrb	r2, [r3, #0]
 801c12a:	3201      	adds	r2, #1
 801c12c:	701a      	strb	r2, [r3, #0]
 801c12e:	e790      	b.n	801c052 <_dtoa_r+0x62a>
 801c130:	4ba3      	ldr	r3, [pc, #652]	; (801c3c0 <_dtoa_r+0x998>)
 801c132:	2200      	movs	r2, #0
 801c134:	f7e4 fa88 	bl	8000648 <__aeabi_dmul>
 801c138:	2200      	movs	r2, #0
 801c13a:	2300      	movs	r3, #0
 801c13c:	4606      	mov	r6, r0
 801c13e:	460f      	mov	r7, r1
 801c140:	f7e4 fcea 	bl	8000b18 <__aeabi_dcmpeq>
 801c144:	2800      	cmp	r0, #0
 801c146:	d09e      	beq.n	801c086 <_dtoa_r+0x65e>
 801c148:	e7d0      	b.n	801c0ec <_dtoa_r+0x6c4>
 801c14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c14c:	2a00      	cmp	r2, #0
 801c14e:	f000 80ca 	beq.w	801c2e6 <_dtoa_r+0x8be>
 801c152:	9a07      	ldr	r2, [sp, #28]
 801c154:	2a01      	cmp	r2, #1
 801c156:	f300 80ad 	bgt.w	801c2b4 <_dtoa_r+0x88c>
 801c15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c15c:	2a00      	cmp	r2, #0
 801c15e:	f000 80a5 	beq.w	801c2ac <_dtoa_r+0x884>
 801c162:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c166:	9e08      	ldr	r6, [sp, #32]
 801c168:	9d05      	ldr	r5, [sp, #20]
 801c16a:	9a05      	ldr	r2, [sp, #20]
 801c16c:	441a      	add	r2, r3
 801c16e:	9205      	str	r2, [sp, #20]
 801c170:	9a06      	ldr	r2, [sp, #24]
 801c172:	2101      	movs	r1, #1
 801c174:	441a      	add	r2, r3
 801c176:	4620      	mov	r0, r4
 801c178:	9206      	str	r2, [sp, #24]
 801c17a:	f000 ff3d 	bl	801cff8 <__i2b>
 801c17e:	4607      	mov	r7, r0
 801c180:	b165      	cbz	r5, 801c19c <_dtoa_r+0x774>
 801c182:	9b06      	ldr	r3, [sp, #24]
 801c184:	2b00      	cmp	r3, #0
 801c186:	dd09      	ble.n	801c19c <_dtoa_r+0x774>
 801c188:	42ab      	cmp	r3, r5
 801c18a:	9a05      	ldr	r2, [sp, #20]
 801c18c:	bfa8      	it	ge
 801c18e:	462b      	movge	r3, r5
 801c190:	1ad2      	subs	r2, r2, r3
 801c192:	9205      	str	r2, [sp, #20]
 801c194:	9a06      	ldr	r2, [sp, #24]
 801c196:	1aed      	subs	r5, r5, r3
 801c198:	1ad3      	subs	r3, r2, r3
 801c19a:	9306      	str	r3, [sp, #24]
 801c19c:	9b08      	ldr	r3, [sp, #32]
 801c19e:	b1f3      	cbz	r3, 801c1de <_dtoa_r+0x7b6>
 801c1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	f000 80a3 	beq.w	801c2ee <_dtoa_r+0x8c6>
 801c1a8:	2e00      	cmp	r6, #0
 801c1aa:	dd10      	ble.n	801c1ce <_dtoa_r+0x7a6>
 801c1ac:	4639      	mov	r1, r7
 801c1ae:	4632      	mov	r2, r6
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f000 ffe1 	bl	801d178 <__pow5mult>
 801c1b6:	4652      	mov	r2, sl
 801c1b8:	4601      	mov	r1, r0
 801c1ba:	4607      	mov	r7, r0
 801c1bc:	4620      	mov	r0, r4
 801c1be:	f000 ff31 	bl	801d024 <__multiply>
 801c1c2:	4651      	mov	r1, sl
 801c1c4:	4680      	mov	r8, r0
 801c1c6:	4620      	mov	r0, r4
 801c1c8:	f000 fe16 	bl	801cdf8 <_Bfree>
 801c1cc:	46c2      	mov	sl, r8
 801c1ce:	9b08      	ldr	r3, [sp, #32]
 801c1d0:	1b9a      	subs	r2, r3, r6
 801c1d2:	d004      	beq.n	801c1de <_dtoa_r+0x7b6>
 801c1d4:	4651      	mov	r1, sl
 801c1d6:	4620      	mov	r0, r4
 801c1d8:	f000 ffce 	bl	801d178 <__pow5mult>
 801c1dc:	4682      	mov	sl, r0
 801c1de:	2101      	movs	r1, #1
 801c1e0:	4620      	mov	r0, r4
 801c1e2:	f000 ff09 	bl	801cff8 <__i2b>
 801c1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	4606      	mov	r6, r0
 801c1ec:	f340 8081 	ble.w	801c2f2 <_dtoa_r+0x8ca>
 801c1f0:	461a      	mov	r2, r3
 801c1f2:	4601      	mov	r1, r0
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f000 ffbf 	bl	801d178 <__pow5mult>
 801c1fa:	9b07      	ldr	r3, [sp, #28]
 801c1fc:	2b01      	cmp	r3, #1
 801c1fe:	4606      	mov	r6, r0
 801c200:	dd7a      	ble.n	801c2f8 <_dtoa_r+0x8d0>
 801c202:	f04f 0800 	mov.w	r8, #0
 801c206:	6933      	ldr	r3, [r6, #16]
 801c208:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c20c:	6918      	ldr	r0, [r3, #16]
 801c20e:	f000 fea5 	bl	801cf5c <__hi0bits>
 801c212:	f1c0 0020 	rsb	r0, r0, #32
 801c216:	9b06      	ldr	r3, [sp, #24]
 801c218:	4418      	add	r0, r3
 801c21a:	f010 001f 	ands.w	r0, r0, #31
 801c21e:	f000 8094 	beq.w	801c34a <_dtoa_r+0x922>
 801c222:	f1c0 0320 	rsb	r3, r0, #32
 801c226:	2b04      	cmp	r3, #4
 801c228:	f340 8085 	ble.w	801c336 <_dtoa_r+0x90e>
 801c22c:	9b05      	ldr	r3, [sp, #20]
 801c22e:	f1c0 001c 	rsb	r0, r0, #28
 801c232:	4403      	add	r3, r0
 801c234:	9305      	str	r3, [sp, #20]
 801c236:	9b06      	ldr	r3, [sp, #24]
 801c238:	4403      	add	r3, r0
 801c23a:	4405      	add	r5, r0
 801c23c:	9306      	str	r3, [sp, #24]
 801c23e:	9b05      	ldr	r3, [sp, #20]
 801c240:	2b00      	cmp	r3, #0
 801c242:	dd05      	ble.n	801c250 <_dtoa_r+0x828>
 801c244:	4651      	mov	r1, sl
 801c246:	461a      	mov	r2, r3
 801c248:	4620      	mov	r0, r4
 801c24a:	f000 ffef 	bl	801d22c <__lshift>
 801c24e:	4682      	mov	sl, r0
 801c250:	9b06      	ldr	r3, [sp, #24]
 801c252:	2b00      	cmp	r3, #0
 801c254:	dd05      	ble.n	801c262 <_dtoa_r+0x83a>
 801c256:	4631      	mov	r1, r6
 801c258:	461a      	mov	r2, r3
 801c25a:	4620      	mov	r0, r4
 801c25c:	f000 ffe6 	bl	801d22c <__lshift>
 801c260:	4606      	mov	r6, r0
 801c262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c264:	2b00      	cmp	r3, #0
 801c266:	d072      	beq.n	801c34e <_dtoa_r+0x926>
 801c268:	4631      	mov	r1, r6
 801c26a:	4650      	mov	r0, sl
 801c26c:	f001 f84a 	bl	801d304 <__mcmp>
 801c270:	2800      	cmp	r0, #0
 801c272:	da6c      	bge.n	801c34e <_dtoa_r+0x926>
 801c274:	2300      	movs	r3, #0
 801c276:	4651      	mov	r1, sl
 801c278:	220a      	movs	r2, #10
 801c27a:	4620      	mov	r0, r4
 801c27c:	f000 fdde 	bl	801ce3c <__multadd>
 801c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c282:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c286:	4682      	mov	sl, r0
 801c288:	2b00      	cmp	r3, #0
 801c28a:	f000 81b0 	beq.w	801c5ee <_dtoa_r+0xbc6>
 801c28e:	2300      	movs	r3, #0
 801c290:	4639      	mov	r1, r7
 801c292:	220a      	movs	r2, #10
 801c294:	4620      	mov	r0, r4
 801c296:	f000 fdd1 	bl	801ce3c <__multadd>
 801c29a:	9b01      	ldr	r3, [sp, #4]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	4607      	mov	r7, r0
 801c2a0:	f300 8096 	bgt.w	801c3d0 <_dtoa_r+0x9a8>
 801c2a4:	9b07      	ldr	r3, [sp, #28]
 801c2a6:	2b02      	cmp	r3, #2
 801c2a8:	dc59      	bgt.n	801c35e <_dtoa_r+0x936>
 801c2aa:	e091      	b.n	801c3d0 <_dtoa_r+0x9a8>
 801c2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c2b2:	e758      	b.n	801c166 <_dtoa_r+0x73e>
 801c2b4:	9b04      	ldr	r3, [sp, #16]
 801c2b6:	1e5e      	subs	r6, r3, #1
 801c2b8:	9b08      	ldr	r3, [sp, #32]
 801c2ba:	42b3      	cmp	r3, r6
 801c2bc:	bfbf      	itttt	lt
 801c2be:	9b08      	ldrlt	r3, [sp, #32]
 801c2c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801c2c2:	9608      	strlt	r6, [sp, #32]
 801c2c4:	1af3      	sublt	r3, r6, r3
 801c2c6:	bfb4      	ite	lt
 801c2c8:	18d2      	addlt	r2, r2, r3
 801c2ca:	1b9e      	subge	r6, r3, r6
 801c2cc:	9b04      	ldr	r3, [sp, #16]
 801c2ce:	bfbc      	itt	lt
 801c2d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801c2d2:	2600      	movlt	r6, #0
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	bfb7      	itett	lt
 801c2d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801c2dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801c2e0:	1a9d      	sublt	r5, r3, r2
 801c2e2:	2300      	movlt	r3, #0
 801c2e4:	e741      	b.n	801c16a <_dtoa_r+0x742>
 801c2e6:	9e08      	ldr	r6, [sp, #32]
 801c2e8:	9d05      	ldr	r5, [sp, #20]
 801c2ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c2ec:	e748      	b.n	801c180 <_dtoa_r+0x758>
 801c2ee:	9a08      	ldr	r2, [sp, #32]
 801c2f0:	e770      	b.n	801c1d4 <_dtoa_r+0x7ac>
 801c2f2:	9b07      	ldr	r3, [sp, #28]
 801c2f4:	2b01      	cmp	r3, #1
 801c2f6:	dc19      	bgt.n	801c32c <_dtoa_r+0x904>
 801c2f8:	9b02      	ldr	r3, [sp, #8]
 801c2fa:	b9bb      	cbnz	r3, 801c32c <_dtoa_r+0x904>
 801c2fc:	9b03      	ldr	r3, [sp, #12]
 801c2fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c302:	b99b      	cbnz	r3, 801c32c <_dtoa_r+0x904>
 801c304:	9b03      	ldr	r3, [sp, #12]
 801c306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c30a:	0d1b      	lsrs	r3, r3, #20
 801c30c:	051b      	lsls	r3, r3, #20
 801c30e:	b183      	cbz	r3, 801c332 <_dtoa_r+0x90a>
 801c310:	9b05      	ldr	r3, [sp, #20]
 801c312:	3301      	adds	r3, #1
 801c314:	9305      	str	r3, [sp, #20]
 801c316:	9b06      	ldr	r3, [sp, #24]
 801c318:	3301      	adds	r3, #1
 801c31a:	9306      	str	r3, [sp, #24]
 801c31c:	f04f 0801 	mov.w	r8, #1
 801c320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c322:	2b00      	cmp	r3, #0
 801c324:	f47f af6f 	bne.w	801c206 <_dtoa_r+0x7de>
 801c328:	2001      	movs	r0, #1
 801c32a:	e774      	b.n	801c216 <_dtoa_r+0x7ee>
 801c32c:	f04f 0800 	mov.w	r8, #0
 801c330:	e7f6      	b.n	801c320 <_dtoa_r+0x8f8>
 801c332:	4698      	mov	r8, r3
 801c334:	e7f4      	b.n	801c320 <_dtoa_r+0x8f8>
 801c336:	d082      	beq.n	801c23e <_dtoa_r+0x816>
 801c338:	9a05      	ldr	r2, [sp, #20]
 801c33a:	331c      	adds	r3, #28
 801c33c:	441a      	add	r2, r3
 801c33e:	9205      	str	r2, [sp, #20]
 801c340:	9a06      	ldr	r2, [sp, #24]
 801c342:	441a      	add	r2, r3
 801c344:	441d      	add	r5, r3
 801c346:	9206      	str	r2, [sp, #24]
 801c348:	e779      	b.n	801c23e <_dtoa_r+0x816>
 801c34a:	4603      	mov	r3, r0
 801c34c:	e7f4      	b.n	801c338 <_dtoa_r+0x910>
 801c34e:	9b04      	ldr	r3, [sp, #16]
 801c350:	2b00      	cmp	r3, #0
 801c352:	dc37      	bgt.n	801c3c4 <_dtoa_r+0x99c>
 801c354:	9b07      	ldr	r3, [sp, #28]
 801c356:	2b02      	cmp	r3, #2
 801c358:	dd34      	ble.n	801c3c4 <_dtoa_r+0x99c>
 801c35a:	9b04      	ldr	r3, [sp, #16]
 801c35c:	9301      	str	r3, [sp, #4]
 801c35e:	9b01      	ldr	r3, [sp, #4]
 801c360:	b963      	cbnz	r3, 801c37c <_dtoa_r+0x954>
 801c362:	4631      	mov	r1, r6
 801c364:	2205      	movs	r2, #5
 801c366:	4620      	mov	r0, r4
 801c368:	f000 fd68 	bl	801ce3c <__multadd>
 801c36c:	4601      	mov	r1, r0
 801c36e:	4606      	mov	r6, r0
 801c370:	4650      	mov	r0, sl
 801c372:	f000 ffc7 	bl	801d304 <__mcmp>
 801c376:	2800      	cmp	r0, #0
 801c378:	f73f adbb 	bgt.w	801bef2 <_dtoa_r+0x4ca>
 801c37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c37e:	9d00      	ldr	r5, [sp, #0]
 801c380:	ea6f 0b03 	mvn.w	fp, r3
 801c384:	f04f 0800 	mov.w	r8, #0
 801c388:	4631      	mov	r1, r6
 801c38a:	4620      	mov	r0, r4
 801c38c:	f000 fd34 	bl	801cdf8 <_Bfree>
 801c390:	2f00      	cmp	r7, #0
 801c392:	f43f aeab 	beq.w	801c0ec <_dtoa_r+0x6c4>
 801c396:	f1b8 0f00 	cmp.w	r8, #0
 801c39a:	d005      	beq.n	801c3a8 <_dtoa_r+0x980>
 801c39c:	45b8      	cmp	r8, r7
 801c39e:	d003      	beq.n	801c3a8 <_dtoa_r+0x980>
 801c3a0:	4641      	mov	r1, r8
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	f000 fd28 	bl	801cdf8 <_Bfree>
 801c3a8:	4639      	mov	r1, r7
 801c3aa:	4620      	mov	r0, r4
 801c3ac:	f000 fd24 	bl	801cdf8 <_Bfree>
 801c3b0:	e69c      	b.n	801c0ec <_dtoa_r+0x6c4>
 801c3b2:	2600      	movs	r6, #0
 801c3b4:	4637      	mov	r7, r6
 801c3b6:	e7e1      	b.n	801c37c <_dtoa_r+0x954>
 801c3b8:	46bb      	mov	fp, r7
 801c3ba:	4637      	mov	r7, r6
 801c3bc:	e599      	b.n	801bef2 <_dtoa_r+0x4ca>
 801c3be:	bf00      	nop
 801c3c0:	40240000 	.word	0x40240000
 801c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	f000 80c8 	beq.w	801c55c <_dtoa_r+0xb34>
 801c3cc:	9b04      	ldr	r3, [sp, #16]
 801c3ce:	9301      	str	r3, [sp, #4]
 801c3d0:	2d00      	cmp	r5, #0
 801c3d2:	dd05      	ble.n	801c3e0 <_dtoa_r+0x9b8>
 801c3d4:	4639      	mov	r1, r7
 801c3d6:	462a      	mov	r2, r5
 801c3d8:	4620      	mov	r0, r4
 801c3da:	f000 ff27 	bl	801d22c <__lshift>
 801c3de:	4607      	mov	r7, r0
 801c3e0:	f1b8 0f00 	cmp.w	r8, #0
 801c3e4:	d05b      	beq.n	801c49e <_dtoa_r+0xa76>
 801c3e6:	6879      	ldr	r1, [r7, #4]
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	f000 fcc5 	bl	801cd78 <_Balloc>
 801c3ee:	4605      	mov	r5, r0
 801c3f0:	b928      	cbnz	r0, 801c3fe <_dtoa_r+0x9d6>
 801c3f2:	4b83      	ldr	r3, [pc, #524]	; (801c600 <_dtoa_r+0xbd8>)
 801c3f4:	4602      	mov	r2, r0
 801c3f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c3fa:	f7ff bb2e 	b.w	801ba5a <_dtoa_r+0x32>
 801c3fe:	693a      	ldr	r2, [r7, #16]
 801c400:	3202      	adds	r2, #2
 801c402:	0092      	lsls	r2, r2, #2
 801c404:	f107 010c 	add.w	r1, r7, #12
 801c408:	300c      	adds	r0, #12
 801c40a:	f7ff fa48 	bl	801b89e <memcpy>
 801c40e:	2201      	movs	r2, #1
 801c410:	4629      	mov	r1, r5
 801c412:	4620      	mov	r0, r4
 801c414:	f000 ff0a 	bl	801d22c <__lshift>
 801c418:	9b00      	ldr	r3, [sp, #0]
 801c41a:	3301      	adds	r3, #1
 801c41c:	9304      	str	r3, [sp, #16]
 801c41e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c422:	4413      	add	r3, r2
 801c424:	9308      	str	r3, [sp, #32]
 801c426:	9b02      	ldr	r3, [sp, #8]
 801c428:	f003 0301 	and.w	r3, r3, #1
 801c42c:	46b8      	mov	r8, r7
 801c42e:	9306      	str	r3, [sp, #24]
 801c430:	4607      	mov	r7, r0
 801c432:	9b04      	ldr	r3, [sp, #16]
 801c434:	4631      	mov	r1, r6
 801c436:	3b01      	subs	r3, #1
 801c438:	4650      	mov	r0, sl
 801c43a:	9301      	str	r3, [sp, #4]
 801c43c:	f7ff fa6c 	bl	801b918 <quorem>
 801c440:	4641      	mov	r1, r8
 801c442:	9002      	str	r0, [sp, #8]
 801c444:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c448:	4650      	mov	r0, sl
 801c44a:	f000 ff5b 	bl	801d304 <__mcmp>
 801c44e:	463a      	mov	r2, r7
 801c450:	9005      	str	r0, [sp, #20]
 801c452:	4631      	mov	r1, r6
 801c454:	4620      	mov	r0, r4
 801c456:	f000 ff71 	bl	801d33c <__mdiff>
 801c45a:	68c2      	ldr	r2, [r0, #12]
 801c45c:	4605      	mov	r5, r0
 801c45e:	bb02      	cbnz	r2, 801c4a2 <_dtoa_r+0xa7a>
 801c460:	4601      	mov	r1, r0
 801c462:	4650      	mov	r0, sl
 801c464:	f000 ff4e 	bl	801d304 <__mcmp>
 801c468:	4602      	mov	r2, r0
 801c46a:	4629      	mov	r1, r5
 801c46c:	4620      	mov	r0, r4
 801c46e:	9209      	str	r2, [sp, #36]	; 0x24
 801c470:	f000 fcc2 	bl	801cdf8 <_Bfree>
 801c474:	9b07      	ldr	r3, [sp, #28]
 801c476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c478:	9d04      	ldr	r5, [sp, #16]
 801c47a:	ea43 0102 	orr.w	r1, r3, r2
 801c47e:	9b06      	ldr	r3, [sp, #24]
 801c480:	4319      	orrs	r1, r3
 801c482:	d110      	bne.n	801c4a6 <_dtoa_r+0xa7e>
 801c484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c488:	d029      	beq.n	801c4de <_dtoa_r+0xab6>
 801c48a:	9b05      	ldr	r3, [sp, #20]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	dd02      	ble.n	801c496 <_dtoa_r+0xa6e>
 801c490:	9b02      	ldr	r3, [sp, #8]
 801c492:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801c496:	9b01      	ldr	r3, [sp, #4]
 801c498:	f883 9000 	strb.w	r9, [r3]
 801c49c:	e774      	b.n	801c388 <_dtoa_r+0x960>
 801c49e:	4638      	mov	r0, r7
 801c4a0:	e7ba      	b.n	801c418 <_dtoa_r+0x9f0>
 801c4a2:	2201      	movs	r2, #1
 801c4a4:	e7e1      	b.n	801c46a <_dtoa_r+0xa42>
 801c4a6:	9b05      	ldr	r3, [sp, #20]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	db04      	blt.n	801c4b6 <_dtoa_r+0xa8e>
 801c4ac:	9907      	ldr	r1, [sp, #28]
 801c4ae:	430b      	orrs	r3, r1
 801c4b0:	9906      	ldr	r1, [sp, #24]
 801c4b2:	430b      	orrs	r3, r1
 801c4b4:	d120      	bne.n	801c4f8 <_dtoa_r+0xad0>
 801c4b6:	2a00      	cmp	r2, #0
 801c4b8:	dded      	ble.n	801c496 <_dtoa_r+0xa6e>
 801c4ba:	4651      	mov	r1, sl
 801c4bc:	2201      	movs	r2, #1
 801c4be:	4620      	mov	r0, r4
 801c4c0:	f000 feb4 	bl	801d22c <__lshift>
 801c4c4:	4631      	mov	r1, r6
 801c4c6:	4682      	mov	sl, r0
 801c4c8:	f000 ff1c 	bl	801d304 <__mcmp>
 801c4cc:	2800      	cmp	r0, #0
 801c4ce:	dc03      	bgt.n	801c4d8 <_dtoa_r+0xab0>
 801c4d0:	d1e1      	bne.n	801c496 <_dtoa_r+0xa6e>
 801c4d2:	f019 0f01 	tst.w	r9, #1
 801c4d6:	d0de      	beq.n	801c496 <_dtoa_r+0xa6e>
 801c4d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c4dc:	d1d8      	bne.n	801c490 <_dtoa_r+0xa68>
 801c4de:	9a01      	ldr	r2, [sp, #4]
 801c4e0:	2339      	movs	r3, #57	; 0x39
 801c4e2:	7013      	strb	r3, [r2, #0]
 801c4e4:	462b      	mov	r3, r5
 801c4e6:	461d      	mov	r5, r3
 801c4e8:	3b01      	subs	r3, #1
 801c4ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c4ee:	2a39      	cmp	r2, #57	; 0x39
 801c4f0:	d06c      	beq.n	801c5cc <_dtoa_r+0xba4>
 801c4f2:	3201      	adds	r2, #1
 801c4f4:	701a      	strb	r2, [r3, #0]
 801c4f6:	e747      	b.n	801c388 <_dtoa_r+0x960>
 801c4f8:	2a00      	cmp	r2, #0
 801c4fa:	dd07      	ble.n	801c50c <_dtoa_r+0xae4>
 801c4fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c500:	d0ed      	beq.n	801c4de <_dtoa_r+0xab6>
 801c502:	9a01      	ldr	r2, [sp, #4]
 801c504:	f109 0301 	add.w	r3, r9, #1
 801c508:	7013      	strb	r3, [r2, #0]
 801c50a:	e73d      	b.n	801c388 <_dtoa_r+0x960>
 801c50c:	9b04      	ldr	r3, [sp, #16]
 801c50e:	9a08      	ldr	r2, [sp, #32]
 801c510:	f803 9c01 	strb.w	r9, [r3, #-1]
 801c514:	4293      	cmp	r3, r2
 801c516:	d043      	beq.n	801c5a0 <_dtoa_r+0xb78>
 801c518:	4651      	mov	r1, sl
 801c51a:	2300      	movs	r3, #0
 801c51c:	220a      	movs	r2, #10
 801c51e:	4620      	mov	r0, r4
 801c520:	f000 fc8c 	bl	801ce3c <__multadd>
 801c524:	45b8      	cmp	r8, r7
 801c526:	4682      	mov	sl, r0
 801c528:	f04f 0300 	mov.w	r3, #0
 801c52c:	f04f 020a 	mov.w	r2, #10
 801c530:	4641      	mov	r1, r8
 801c532:	4620      	mov	r0, r4
 801c534:	d107      	bne.n	801c546 <_dtoa_r+0xb1e>
 801c536:	f000 fc81 	bl	801ce3c <__multadd>
 801c53a:	4680      	mov	r8, r0
 801c53c:	4607      	mov	r7, r0
 801c53e:	9b04      	ldr	r3, [sp, #16]
 801c540:	3301      	adds	r3, #1
 801c542:	9304      	str	r3, [sp, #16]
 801c544:	e775      	b.n	801c432 <_dtoa_r+0xa0a>
 801c546:	f000 fc79 	bl	801ce3c <__multadd>
 801c54a:	4639      	mov	r1, r7
 801c54c:	4680      	mov	r8, r0
 801c54e:	2300      	movs	r3, #0
 801c550:	220a      	movs	r2, #10
 801c552:	4620      	mov	r0, r4
 801c554:	f000 fc72 	bl	801ce3c <__multadd>
 801c558:	4607      	mov	r7, r0
 801c55a:	e7f0      	b.n	801c53e <_dtoa_r+0xb16>
 801c55c:	9b04      	ldr	r3, [sp, #16]
 801c55e:	9301      	str	r3, [sp, #4]
 801c560:	9d00      	ldr	r5, [sp, #0]
 801c562:	4631      	mov	r1, r6
 801c564:	4650      	mov	r0, sl
 801c566:	f7ff f9d7 	bl	801b918 <quorem>
 801c56a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c56e:	9b00      	ldr	r3, [sp, #0]
 801c570:	f805 9b01 	strb.w	r9, [r5], #1
 801c574:	1aea      	subs	r2, r5, r3
 801c576:	9b01      	ldr	r3, [sp, #4]
 801c578:	4293      	cmp	r3, r2
 801c57a:	dd07      	ble.n	801c58c <_dtoa_r+0xb64>
 801c57c:	4651      	mov	r1, sl
 801c57e:	2300      	movs	r3, #0
 801c580:	220a      	movs	r2, #10
 801c582:	4620      	mov	r0, r4
 801c584:	f000 fc5a 	bl	801ce3c <__multadd>
 801c588:	4682      	mov	sl, r0
 801c58a:	e7ea      	b.n	801c562 <_dtoa_r+0xb3a>
 801c58c:	9b01      	ldr	r3, [sp, #4]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	bfc8      	it	gt
 801c592:	461d      	movgt	r5, r3
 801c594:	9b00      	ldr	r3, [sp, #0]
 801c596:	bfd8      	it	le
 801c598:	2501      	movle	r5, #1
 801c59a:	441d      	add	r5, r3
 801c59c:	f04f 0800 	mov.w	r8, #0
 801c5a0:	4651      	mov	r1, sl
 801c5a2:	2201      	movs	r2, #1
 801c5a4:	4620      	mov	r0, r4
 801c5a6:	f000 fe41 	bl	801d22c <__lshift>
 801c5aa:	4631      	mov	r1, r6
 801c5ac:	4682      	mov	sl, r0
 801c5ae:	f000 fea9 	bl	801d304 <__mcmp>
 801c5b2:	2800      	cmp	r0, #0
 801c5b4:	dc96      	bgt.n	801c4e4 <_dtoa_r+0xabc>
 801c5b6:	d102      	bne.n	801c5be <_dtoa_r+0xb96>
 801c5b8:	f019 0f01 	tst.w	r9, #1
 801c5bc:	d192      	bne.n	801c4e4 <_dtoa_r+0xabc>
 801c5be:	462b      	mov	r3, r5
 801c5c0:	461d      	mov	r5, r3
 801c5c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c5c6:	2a30      	cmp	r2, #48	; 0x30
 801c5c8:	d0fa      	beq.n	801c5c0 <_dtoa_r+0xb98>
 801c5ca:	e6dd      	b.n	801c388 <_dtoa_r+0x960>
 801c5cc:	9a00      	ldr	r2, [sp, #0]
 801c5ce:	429a      	cmp	r2, r3
 801c5d0:	d189      	bne.n	801c4e6 <_dtoa_r+0xabe>
 801c5d2:	f10b 0b01 	add.w	fp, fp, #1
 801c5d6:	2331      	movs	r3, #49	; 0x31
 801c5d8:	e796      	b.n	801c508 <_dtoa_r+0xae0>
 801c5da:	4b0a      	ldr	r3, [pc, #40]	; (801c604 <_dtoa_r+0xbdc>)
 801c5dc:	f7ff ba99 	b.w	801bb12 <_dtoa_r+0xea>
 801c5e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	f47f aa6d 	bne.w	801bac2 <_dtoa_r+0x9a>
 801c5e8:	4b07      	ldr	r3, [pc, #28]	; (801c608 <_dtoa_r+0xbe0>)
 801c5ea:	f7ff ba92 	b.w	801bb12 <_dtoa_r+0xea>
 801c5ee:	9b01      	ldr	r3, [sp, #4]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	dcb5      	bgt.n	801c560 <_dtoa_r+0xb38>
 801c5f4:	9b07      	ldr	r3, [sp, #28]
 801c5f6:	2b02      	cmp	r3, #2
 801c5f8:	f73f aeb1 	bgt.w	801c35e <_dtoa_r+0x936>
 801c5fc:	e7b0      	b.n	801c560 <_dtoa_r+0xb38>
 801c5fe:	bf00      	nop
 801c600:	08022ed3 	.word	0x08022ed3
 801c604:	08022e01 	.word	0x08022e01
 801c608:	08022e6e 	.word	0x08022e6e

0801c60c <_free_r>:
 801c60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c60e:	2900      	cmp	r1, #0
 801c610:	d044      	beq.n	801c69c <_free_r+0x90>
 801c612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c616:	9001      	str	r0, [sp, #4]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	f1a1 0404 	sub.w	r4, r1, #4
 801c61e:	bfb8      	it	lt
 801c620:	18e4      	addlt	r4, r4, r3
 801c622:	f7fd f8db 	bl	80197dc <__malloc_lock>
 801c626:	4a1e      	ldr	r2, [pc, #120]	; (801c6a0 <_free_r+0x94>)
 801c628:	9801      	ldr	r0, [sp, #4]
 801c62a:	6813      	ldr	r3, [r2, #0]
 801c62c:	b933      	cbnz	r3, 801c63c <_free_r+0x30>
 801c62e:	6063      	str	r3, [r4, #4]
 801c630:	6014      	str	r4, [r2, #0]
 801c632:	b003      	add	sp, #12
 801c634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c638:	f7fd b8d6 	b.w	80197e8 <__malloc_unlock>
 801c63c:	42a3      	cmp	r3, r4
 801c63e:	d908      	bls.n	801c652 <_free_r+0x46>
 801c640:	6825      	ldr	r5, [r4, #0]
 801c642:	1961      	adds	r1, r4, r5
 801c644:	428b      	cmp	r3, r1
 801c646:	bf01      	itttt	eq
 801c648:	6819      	ldreq	r1, [r3, #0]
 801c64a:	685b      	ldreq	r3, [r3, #4]
 801c64c:	1949      	addeq	r1, r1, r5
 801c64e:	6021      	streq	r1, [r4, #0]
 801c650:	e7ed      	b.n	801c62e <_free_r+0x22>
 801c652:	461a      	mov	r2, r3
 801c654:	685b      	ldr	r3, [r3, #4]
 801c656:	b10b      	cbz	r3, 801c65c <_free_r+0x50>
 801c658:	42a3      	cmp	r3, r4
 801c65a:	d9fa      	bls.n	801c652 <_free_r+0x46>
 801c65c:	6811      	ldr	r1, [r2, #0]
 801c65e:	1855      	adds	r5, r2, r1
 801c660:	42a5      	cmp	r5, r4
 801c662:	d10b      	bne.n	801c67c <_free_r+0x70>
 801c664:	6824      	ldr	r4, [r4, #0]
 801c666:	4421      	add	r1, r4
 801c668:	1854      	adds	r4, r2, r1
 801c66a:	42a3      	cmp	r3, r4
 801c66c:	6011      	str	r1, [r2, #0]
 801c66e:	d1e0      	bne.n	801c632 <_free_r+0x26>
 801c670:	681c      	ldr	r4, [r3, #0]
 801c672:	685b      	ldr	r3, [r3, #4]
 801c674:	6053      	str	r3, [r2, #4]
 801c676:	440c      	add	r4, r1
 801c678:	6014      	str	r4, [r2, #0]
 801c67a:	e7da      	b.n	801c632 <_free_r+0x26>
 801c67c:	d902      	bls.n	801c684 <_free_r+0x78>
 801c67e:	230c      	movs	r3, #12
 801c680:	6003      	str	r3, [r0, #0]
 801c682:	e7d6      	b.n	801c632 <_free_r+0x26>
 801c684:	6825      	ldr	r5, [r4, #0]
 801c686:	1961      	adds	r1, r4, r5
 801c688:	428b      	cmp	r3, r1
 801c68a:	bf04      	itt	eq
 801c68c:	6819      	ldreq	r1, [r3, #0]
 801c68e:	685b      	ldreq	r3, [r3, #4]
 801c690:	6063      	str	r3, [r4, #4]
 801c692:	bf04      	itt	eq
 801c694:	1949      	addeq	r1, r1, r5
 801c696:	6021      	streq	r1, [r4, #0]
 801c698:	6054      	str	r4, [r2, #4]
 801c69a:	e7ca      	b.n	801c632 <_free_r+0x26>
 801c69c:	b003      	add	sp, #12
 801c69e:	bd30      	pop	{r4, r5, pc}
 801c6a0:	20002d08 	.word	0x20002d08

0801c6a4 <rshift>:
 801c6a4:	6903      	ldr	r3, [r0, #16]
 801c6a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c6ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c6b2:	f100 0414 	add.w	r4, r0, #20
 801c6b6:	dd45      	ble.n	801c744 <rshift+0xa0>
 801c6b8:	f011 011f 	ands.w	r1, r1, #31
 801c6bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c6c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c6c4:	d10c      	bne.n	801c6e0 <rshift+0x3c>
 801c6c6:	f100 0710 	add.w	r7, r0, #16
 801c6ca:	4629      	mov	r1, r5
 801c6cc:	42b1      	cmp	r1, r6
 801c6ce:	d334      	bcc.n	801c73a <rshift+0x96>
 801c6d0:	1a9b      	subs	r3, r3, r2
 801c6d2:	009b      	lsls	r3, r3, #2
 801c6d4:	1eea      	subs	r2, r5, #3
 801c6d6:	4296      	cmp	r6, r2
 801c6d8:	bf38      	it	cc
 801c6da:	2300      	movcc	r3, #0
 801c6dc:	4423      	add	r3, r4
 801c6de:	e015      	b.n	801c70c <rshift+0x68>
 801c6e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c6e4:	f1c1 0820 	rsb	r8, r1, #32
 801c6e8:	40cf      	lsrs	r7, r1
 801c6ea:	f105 0e04 	add.w	lr, r5, #4
 801c6ee:	46a1      	mov	r9, r4
 801c6f0:	4576      	cmp	r6, lr
 801c6f2:	46f4      	mov	ip, lr
 801c6f4:	d815      	bhi.n	801c722 <rshift+0x7e>
 801c6f6:	1a9a      	subs	r2, r3, r2
 801c6f8:	0092      	lsls	r2, r2, #2
 801c6fa:	3a04      	subs	r2, #4
 801c6fc:	3501      	adds	r5, #1
 801c6fe:	42ae      	cmp	r6, r5
 801c700:	bf38      	it	cc
 801c702:	2200      	movcc	r2, #0
 801c704:	18a3      	adds	r3, r4, r2
 801c706:	50a7      	str	r7, [r4, r2]
 801c708:	b107      	cbz	r7, 801c70c <rshift+0x68>
 801c70a:	3304      	adds	r3, #4
 801c70c:	1b1a      	subs	r2, r3, r4
 801c70e:	42a3      	cmp	r3, r4
 801c710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c714:	bf08      	it	eq
 801c716:	2300      	moveq	r3, #0
 801c718:	6102      	str	r2, [r0, #16]
 801c71a:	bf08      	it	eq
 801c71c:	6143      	streq	r3, [r0, #20]
 801c71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c722:	f8dc c000 	ldr.w	ip, [ip]
 801c726:	fa0c fc08 	lsl.w	ip, ip, r8
 801c72a:	ea4c 0707 	orr.w	r7, ip, r7
 801c72e:	f849 7b04 	str.w	r7, [r9], #4
 801c732:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c736:	40cf      	lsrs	r7, r1
 801c738:	e7da      	b.n	801c6f0 <rshift+0x4c>
 801c73a:	f851 cb04 	ldr.w	ip, [r1], #4
 801c73e:	f847 cf04 	str.w	ip, [r7, #4]!
 801c742:	e7c3      	b.n	801c6cc <rshift+0x28>
 801c744:	4623      	mov	r3, r4
 801c746:	e7e1      	b.n	801c70c <rshift+0x68>

0801c748 <__hexdig_fun>:
 801c748:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c74c:	2b09      	cmp	r3, #9
 801c74e:	d802      	bhi.n	801c756 <__hexdig_fun+0xe>
 801c750:	3820      	subs	r0, #32
 801c752:	b2c0      	uxtb	r0, r0
 801c754:	4770      	bx	lr
 801c756:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c75a:	2b05      	cmp	r3, #5
 801c75c:	d801      	bhi.n	801c762 <__hexdig_fun+0x1a>
 801c75e:	3847      	subs	r0, #71	; 0x47
 801c760:	e7f7      	b.n	801c752 <__hexdig_fun+0xa>
 801c762:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c766:	2b05      	cmp	r3, #5
 801c768:	d801      	bhi.n	801c76e <__hexdig_fun+0x26>
 801c76a:	3827      	subs	r0, #39	; 0x27
 801c76c:	e7f1      	b.n	801c752 <__hexdig_fun+0xa>
 801c76e:	2000      	movs	r0, #0
 801c770:	4770      	bx	lr
	...

0801c774 <__gethex>:
 801c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c778:	4617      	mov	r7, r2
 801c77a:	680a      	ldr	r2, [r1, #0]
 801c77c:	b085      	sub	sp, #20
 801c77e:	f102 0b02 	add.w	fp, r2, #2
 801c782:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c786:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c78a:	4681      	mov	r9, r0
 801c78c:	468a      	mov	sl, r1
 801c78e:	9302      	str	r3, [sp, #8]
 801c790:	32fe      	adds	r2, #254	; 0xfe
 801c792:	eb02 030b 	add.w	r3, r2, fp
 801c796:	46d8      	mov	r8, fp
 801c798:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801c79c:	9301      	str	r3, [sp, #4]
 801c79e:	2830      	cmp	r0, #48	; 0x30
 801c7a0:	d0f7      	beq.n	801c792 <__gethex+0x1e>
 801c7a2:	f7ff ffd1 	bl	801c748 <__hexdig_fun>
 801c7a6:	4604      	mov	r4, r0
 801c7a8:	2800      	cmp	r0, #0
 801c7aa:	d138      	bne.n	801c81e <__gethex+0xaa>
 801c7ac:	49a7      	ldr	r1, [pc, #668]	; (801ca4c <__gethex+0x2d8>)
 801c7ae:	2201      	movs	r2, #1
 801c7b0:	4640      	mov	r0, r8
 801c7b2:	f7fe ffd2 	bl	801b75a <strncmp>
 801c7b6:	4606      	mov	r6, r0
 801c7b8:	2800      	cmp	r0, #0
 801c7ba:	d169      	bne.n	801c890 <__gethex+0x11c>
 801c7bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c7c0:	465d      	mov	r5, fp
 801c7c2:	f7ff ffc1 	bl	801c748 <__hexdig_fun>
 801c7c6:	2800      	cmp	r0, #0
 801c7c8:	d064      	beq.n	801c894 <__gethex+0x120>
 801c7ca:	465a      	mov	r2, fp
 801c7cc:	7810      	ldrb	r0, [r2, #0]
 801c7ce:	2830      	cmp	r0, #48	; 0x30
 801c7d0:	4690      	mov	r8, r2
 801c7d2:	f102 0201 	add.w	r2, r2, #1
 801c7d6:	d0f9      	beq.n	801c7cc <__gethex+0x58>
 801c7d8:	f7ff ffb6 	bl	801c748 <__hexdig_fun>
 801c7dc:	2301      	movs	r3, #1
 801c7de:	fab0 f480 	clz	r4, r0
 801c7e2:	0964      	lsrs	r4, r4, #5
 801c7e4:	465e      	mov	r6, fp
 801c7e6:	9301      	str	r3, [sp, #4]
 801c7e8:	4642      	mov	r2, r8
 801c7ea:	4615      	mov	r5, r2
 801c7ec:	3201      	adds	r2, #1
 801c7ee:	7828      	ldrb	r0, [r5, #0]
 801c7f0:	f7ff ffaa 	bl	801c748 <__hexdig_fun>
 801c7f4:	2800      	cmp	r0, #0
 801c7f6:	d1f8      	bne.n	801c7ea <__gethex+0x76>
 801c7f8:	4994      	ldr	r1, [pc, #592]	; (801ca4c <__gethex+0x2d8>)
 801c7fa:	2201      	movs	r2, #1
 801c7fc:	4628      	mov	r0, r5
 801c7fe:	f7fe ffac 	bl	801b75a <strncmp>
 801c802:	b978      	cbnz	r0, 801c824 <__gethex+0xb0>
 801c804:	b946      	cbnz	r6, 801c818 <__gethex+0xa4>
 801c806:	1c6e      	adds	r6, r5, #1
 801c808:	4632      	mov	r2, r6
 801c80a:	4615      	mov	r5, r2
 801c80c:	3201      	adds	r2, #1
 801c80e:	7828      	ldrb	r0, [r5, #0]
 801c810:	f7ff ff9a 	bl	801c748 <__hexdig_fun>
 801c814:	2800      	cmp	r0, #0
 801c816:	d1f8      	bne.n	801c80a <__gethex+0x96>
 801c818:	1b73      	subs	r3, r6, r5
 801c81a:	009e      	lsls	r6, r3, #2
 801c81c:	e004      	b.n	801c828 <__gethex+0xb4>
 801c81e:	2400      	movs	r4, #0
 801c820:	4626      	mov	r6, r4
 801c822:	e7e1      	b.n	801c7e8 <__gethex+0x74>
 801c824:	2e00      	cmp	r6, #0
 801c826:	d1f7      	bne.n	801c818 <__gethex+0xa4>
 801c828:	782b      	ldrb	r3, [r5, #0]
 801c82a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c82e:	2b50      	cmp	r3, #80	; 0x50
 801c830:	d13d      	bne.n	801c8ae <__gethex+0x13a>
 801c832:	786b      	ldrb	r3, [r5, #1]
 801c834:	2b2b      	cmp	r3, #43	; 0x2b
 801c836:	d02f      	beq.n	801c898 <__gethex+0x124>
 801c838:	2b2d      	cmp	r3, #45	; 0x2d
 801c83a:	d031      	beq.n	801c8a0 <__gethex+0x12c>
 801c83c:	1c69      	adds	r1, r5, #1
 801c83e:	f04f 0b00 	mov.w	fp, #0
 801c842:	7808      	ldrb	r0, [r1, #0]
 801c844:	f7ff ff80 	bl	801c748 <__hexdig_fun>
 801c848:	1e42      	subs	r2, r0, #1
 801c84a:	b2d2      	uxtb	r2, r2
 801c84c:	2a18      	cmp	r2, #24
 801c84e:	d82e      	bhi.n	801c8ae <__gethex+0x13a>
 801c850:	f1a0 0210 	sub.w	r2, r0, #16
 801c854:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c858:	f7ff ff76 	bl	801c748 <__hexdig_fun>
 801c85c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801c860:	fa5f fc8c 	uxtb.w	ip, ip
 801c864:	f1bc 0f18 	cmp.w	ip, #24
 801c868:	d91d      	bls.n	801c8a6 <__gethex+0x132>
 801c86a:	f1bb 0f00 	cmp.w	fp, #0
 801c86e:	d000      	beq.n	801c872 <__gethex+0xfe>
 801c870:	4252      	negs	r2, r2
 801c872:	4416      	add	r6, r2
 801c874:	f8ca 1000 	str.w	r1, [sl]
 801c878:	b1dc      	cbz	r4, 801c8b2 <__gethex+0x13e>
 801c87a:	9b01      	ldr	r3, [sp, #4]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	bf14      	ite	ne
 801c880:	f04f 0800 	movne.w	r8, #0
 801c884:	f04f 0806 	moveq.w	r8, #6
 801c888:	4640      	mov	r0, r8
 801c88a:	b005      	add	sp, #20
 801c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c890:	4645      	mov	r5, r8
 801c892:	4626      	mov	r6, r4
 801c894:	2401      	movs	r4, #1
 801c896:	e7c7      	b.n	801c828 <__gethex+0xb4>
 801c898:	f04f 0b00 	mov.w	fp, #0
 801c89c:	1ca9      	adds	r1, r5, #2
 801c89e:	e7d0      	b.n	801c842 <__gethex+0xce>
 801c8a0:	f04f 0b01 	mov.w	fp, #1
 801c8a4:	e7fa      	b.n	801c89c <__gethex+0x128>
 801c8a6:	230a      	movs	r3, #10
 801c8a8:	fb03 0002 	mla	r0, r3, r2, r0
 801c8ac:	e7d0      	b.n	801c850 <__gethex+0xdc>
 801c8ae:	4629      	mov	r1, r5
 801c8b0:	e7e0      	b.n	801c874 <__gethex+0x100>
 801c8b2:	eba5 0308 	sub.w	r3, r5, r8
 801c8b6:	3b01      	subs	r3, #1
 801c8b8:	4621      	mov	r1, r4
 801c8ba:	2b07      	cmp	r3, #7
 801c8bc:	dc0a      	bgt.n	801c8d4 <__gethex+0x160>
 801c8be:	4648      	mov	r0, r9
 801c8c0:	f000 fa5a 	bl	801cd78 <_Balloc>
 801c8c4:	4604      	mov	r4, r0
 801c8c6:	b940      	cbnz	r0, 801c8da <__gethex+0x166>
 801c8c8:	4b61      	ldr	r3, [pc, #388]	; (801ca50 <__gethex+0x2dc>)
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	21e4      	movs	r1, #228	; 0xe4
 801c8ce:	4861      	ldr	r0, [pc, #388]	; (801ca54 <__gethex+0x2e0>)
 801c8d0:	f7ff f804 	bl	801b8dc <__assert_func>
 801c8d4:	3101      	adds	r1, #1
 801c8d6:	105b      	asrs	r3, r3, #1
 801c8d8:	e7ef      	b.n	801c8ba <__gethex+0x146>
 801c8da:	f100 0a14 	add.w	sl, r0, #20
 801c8de:	2300      	movs	r3, #0
 801c8e0:	495a      	ldr	r1, [pc, #360]	; (801ca4c <__gethex+0x2d8>)
 801c8e2:	f8cd a004 	str.w	sl, [sp, #4]
 801c8e6:	469b      	mov	fp, r3
 801c8e8:	45a8      	cmp	r8, r5
 801c8ea:	d342      	bcc.n	801c972 <__gethex+0x1fe>
 801c8ec:	9801      	ldr	r0, [sp, #4]
 801c8ee:	f840 bb04 	str.w	fp, [r0], #4
 801c8f2:	eba0 000a 	sub.w	r0, r0, sl
 801c8f6:	1080      	asrs	r0, r0, #2
 801c8f8:	6120      	str	r0, [r4, #16]
 801c8fa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801c8fe:	4658      	mov	r0, fp
 801c900:	f000 fb2c 	bl	801cf5c <__hi0bits>
 801c904:	683d      	ldr	r5, [r7, #0]
 801c906:	eba8 0000 	sub.w	r0, r8, r0
 801c90a:	42a8      	cmp	r0, r5
 801c90c:	dd59      	ble.n	801c9c2 <__gethex+0x24e>
 801c90e:	eba0 0805 	sub.w	r8, r0, r5
 801c912:	4641      	mov	r1, r8
 801c914:	4620      	mov	r0, r4
 801c916:	f000 febb 	bl	801d690 <__any_on>
 801c91a:	4683      	mov	fp, r0
 801c91c:	b1b8      	cbz	r0, 801c94e <__gethex+0x1da>
 801c91e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801c922:	1159      	asrs	r1, r3, #5
 801c924:	f003 021f 	and.w	r2, r3, #31
 801c928:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c92c:	f04f 0b01 	mov.w	fp, #1
 801c930:	fa0b f202 	lsl.w	r2, fp, r2
 801c934:	420a      	tst	r2, r1
 801c936:	d00a      	beq.n	801c94e <__gethex+0x1da>
 801c938:	455b      	cmp	r3, fp
 801c93a:	dd06      	ble.n	801c94a <__gethex+0x1d6>
 801c93c:	f1a8 0102 	sub.w	r1, r8, #2
 801c940:	4620      	mov	r0, r4
 801c942:	f000 fea5 	bl	801d690 <__any_on>
 801c946:	2800      	cmp	r0, #0
 801c948:	d138      	bne.n	801c9bc <__gethex+0x248>
 801c94a:	f04f 0b02 	mov.w	fp, #2
 801c94e:	4641      	mov	r1, r8
 801c950:	4620      	mov	r0, r4
 801c952:	f7ff fea7 	bl	801c6a4 <rshift>
 801c956:	4446      	add	r6, r8
 801c958:	68bb      	ldr	r3, [r7, #8]
 801c95a:	42b3      	cmp	r3, r6
 801c95c:	da41      	bge.n	801c9e2 <__gethex+0x26e>
 801c95e:	4621      	mov	r1, r4
 801c960:	4648      	mov	r0, r9
 801c962:	f000 fa49 	bl	801cdf8 <_Bfree>
 801c966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c968:	2300      	movs	r3, #0
 801c96a:	6013      	str	r3, [r2, #0]
 801c96c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801c970:	e78a      	b.n	801c888 <__gethex+0x114>
 801c972:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801c976:	2a2e      	cmp	r2, #46	; 0x2e
 801c978:	d014      	beq.n	801c9a4 <__gethex+0x230>
 801c97a:	2b20      	cmp	r3, #32
 801c97c:	d106      	bne.n	801c98c <__gethex+0x218>
 801c97e:	9b01      	ldr	r3, [sp, #4]
 801c980:	f843 bb04 	str.w	fp, [r3], #4
 801c984:	f04f 0b00 	mov.w	fp, #0
 801c988:	9301      	str	r3, [sp, #4]
 801c98a:	465b      	mov	r3, fp
 801c98c:	7828      	ldrb	r0, [r5, #0]
 801c98e:	9303      	str	r3, [sp, #12]
 801c990:	f7ff feda 	bl	801c748 <__hexdig_fun>
 801c994:	9b03      	ldr	r3, [sp, #12]
 801c996:	f000 000f 	and.w	r0, r0, #15
 801c99a:	4098      	lsls	r0, r3
 801c99c:	ea4b 0b00 	orr.w	fp, fp, r0
 801c9a0:	3304      	adds	r3, #4
 801c9a2:	e7a1      	b.n	801c8e8 <__gethex+0x174>
 801c9a4:	45a8      	cmp	r8, r5
 801c9a6:	d8e8      	bhi.n	801c97a <__gethex+0x206>
 801c9a8:	2201      	movs	r2, #1
 801c9aa:	4628      	mov	r0, r5
 801c9ac:	9303      	str	r3, [sp, #12]
 801c9ae:	f7fe fed4 	bl	801b75a <strncmp>
 801c9b2:	4926      	ldr	r1, [pc, #152]	; (801ca4c <__gethex+0x2d8>)
 801c9b4:	9b03      	ldr	r3, [sp, #12]
 801c9b6:	2800      	cmp	r0, #0
 801c9b8:	d1df      	bne.n	801c97a <__gethex+0x206>
 801c9ba:	e795      	b.n	801c8e8 <__gethex+0x174>
 801c9bc:	f04f 0b03 	mov.w	fp, #3
 801c9c0:	e7c5      	b.n	801c94e <__gethex+0x1da>
 801c9c2:	da0b      	bge.n	801c9dc <__gethex+0x268>
 801c9c4:	eba5 0800 	sub.w	r8, r5, r0
 801c9c8:	4621      	mov	r1, r4
 801c9ca:	4642      	mov	r2, r8
 801c9cc:	4648      	mov	r0, r9
 801c9ce:	f000 fc2d 	bl	801d22c <__lshift>
 801c9d2:	eba6 0608 	sub.w	r6, r6, r8
 801c9d6:	4604      	mov	r4, r0
 801c9d8:	f100 0a14 	add.w	sl, r0, #20
 801c9dc:	f04f 0b00 	mov.w	fp, #0
 801c9e0:	e7ba      	b.n	801c958 <__gethex+0x1e4>
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	42b3      	cmp	r3, r6
 801c9e6:	dd73      	ble.n	801cad0 <__gethex+0x35c>
 801c9e8:	1b9e      	subs	r6, r3, r6
 801c9ea:	42b5      	cmp	r5, r6
 801c9ec:	dc34      	bgt.n	801ca58 <__gethex+0x2e4>
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	2b02      	cmp	r3, #2
 801c9f2:	d023      	beq.n	801ca3c <__gethex+0x2c8>
 801c9f4:	2b03      	cmp	r3, #3
 801c9f6:	d025      	beq.n	801ca44 <__gethex+0x2d0>
 801c9f8:	2b01      	cmp	r3, #1
 801c9fa:	d115      	bne.n	801ca28 <__gethex+0x2b4>
 801c9fc:	42b5      	cmp	r5, r6
 801c9fe:	d113      	bne.n	801ca28 <__gethex+0x2b4>
 801ca00:	2d01      	cmp	r5, #1
 801ca02:	d10b      	bne.n	801ca1c <__gethex+0x2a8>
 801ca04:	9a02      	ldr	r2, [sp, #8]
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	6013      	str	r3, [r2, #0]
 801ca0a:	2301      	movs	r3, #1
 801ca0c:	6123      	str	r3, [r4, #16]
 801ca0e:	f8ca 3000 	str.w	r3, [sl]
 801ca12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca14:	f04f 0862 	mov.w	r8, #98	; 0x62
 801ca18:	601c      	str	r4, [r3, #0]
 801ca1a:	e735      	b.n	801c888 <__gethex+0x114>
 801ca1c:	1e69      	subs	r1, r5, #1
 801ca1e:	4620      	mov	r0, r4
 801ca20:	f000 fe36 	bl	801d690 <__any_on>
 801ca24:	2800      	cmp	r0, #0
 801ca26:	d1ed      	bne.n	801ca04 <__gethex+0x290>
 801ca28:	4621      	mov	r1, r4
 801ca2a:	4648      	mov	r0, r9
 801ca2c:	f000 f9e4 	bl	801cdf8 <_Bfree>
 801ca30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca32:	2300      	movs	r3, #0
 801ca34:	6013      	str	r3, [r2, #0]
 801ca36:	f04f 0850 	mov.w	r8, #80	; 0x50
 801ca3a:	e725      	b.n	801c888 <__gethex+0x114>
 801ca3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d1f2      	bne.n	801ca28 <__gethex+0x2b4>
 801ca42:	e7df      	b.n	801ca04 <__gethex+0x290>
 801ca44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d1dc      	bne.n	801ca04 <__gethex+0x290>
 801ca4a:	e7ed      	b.n	801ca28 <__gethex+0x2b4>
 801ca4c:	08022c97 	.word	0x08022c97
 801ca50:	08022ed3 	.word	0x08022ed3
 801ca54:	08022ee4 	.word	0x08022ee4
 801ca58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801ca5c:	f1bb 0f00 	cmp.w	fp, #0
 801ca60:	d133      	bne.n	801caca <__gethex+0x356>
 801ca62:	f1b8 0f00 	cmp.w	r8, #0
 801ca66:	d004      	beq.n	801ca72 <__gethex+0x2fe>
 801ca68:	4641      	mov	r1, r8
 801ca6a:	4620      	mov	r0, r4
 801ca6c:	f000 fe10 	bl	801d690 <__any_on>
 801ca70:	4683      	mov	fp, r0
 801ca72:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ca76:	2301      	movs	r3, #1
 801ca78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ca7c:	f008 081f 	and.w	r8, r8, #31
 801ca80:	fa03 f308 	lsl.w	r3, r3, r8
 801ca84:	4213      	tst	r3, r2
 801ca86:	4631      	mov	r1, r6
 801ca88:	4620      	mov	r0, r4
 801ca8a:	bf18      	it	ne
 801ca8c:	f04b 0b02 	orrne.w	fp, fp, #2
 801ca90:	1bad      	subs	r5, r5, r6
 801ca92:	f7ff fe07 	bl	801c6a4 <rshift>
 801ca96:	687e      	ldr	r6, [r7, #4]
 801ca98:	f04f 0802 	mov.w	r8, #2
 801ca9c:	f1bb 0f00 	cmp.w	fp, #0
 801caa0:	d04a      	beq.n	801cb38 <__gethex+0x3c4>
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	2b02      	cmp	r3, #2
 801caa6:	d016      	beq.n	801cad6 <__gethex+0x362>
 801caa8:	2b03      	cmp	r3, #3
 801caaa:	d018      	beq.n	801cade <__gethex+0x36a>
 801caac:	2b01      	cmp	r3, #1
 801caae:	d109      	bne.n	801cac4 <__gethex+0x350>
 801cab0:	f01b 0f02 	tst.w	fp, #2
 801cab4:	d006      	beq.n	801cac4 <__gethex+0x350>
 801cab6:	f8da 3000 	ldr.w	r3, [sl]
 801caba:	ea4b 0b03 	orr.w	fp, fp, r3
 801cabe:	f01b 0f01 	tst.w	fp, #1
 801cac2:	d10f      	bne.n	801cae4 <__gethex+0x370>
 801cac4:	f048 0810 	orr.w	r8, r8, #16
 801cac8:	e036      	b.n	801cb38 <__gethex+0x3c4>
 801caca:	f04f 0b01 	mov.w	fp, #1
 801cace:	e7d0      	b.n	801ca72 <__gethex+0x2fe>
 801cad0:	f04f 0801 	mov.w	r8, #1
 801cad4:	e7e2      	b.n	801ca9c <__gethex+0x328>
 801cad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cad8:	f1c3 0301 	rsb	r3, r3, #1
 801cadc:	930f      	str	r3, [sp, #60]	; 0x3c
 801cade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d0ef      	beq.n	801cac4 <__gethex+0x350>
 801cae4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cae8:	f104 0214 	add.w	r2, r4, #20
 801caec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801caf0:	9301      	str	r3, [sp, #4]
 801caf2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801caf6:	2300      	movs	r3, #0
 801caf8:	4694      	mov	ip, r2
 801cafa:	f852 1b04 	ldr.w	r1, [r2], #4
 801cafe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801cb02:	d01e      	beq.n	801cb42 <__gethex+0x3ce>
 801cb04:	3101      	adds	r1, #1
 801cb06:	f8cc 1000 	str.w	r1, [ip]
 801cb0a:	f1b8 0f02 	cmp.w	r8, #2
 801cb0e:	f104 0214 	add.w	r2, r4, #20
 801cb12:	d13d      	bne.n	801cb90 <__gethex+0x41c>
 801cb14:	683b      	ldr	r3, [r7, #0]
 801cb16:	3b01      	subs	r3, #1
 801cb18:	42ab      	cmp	r3, r5
 801cb1a:	d10b      	bne.n	801cb34 <__gethex+0x3c0>
 801cb1c:	1169      	asrs	r1, r5, #5
 801cb1e:	2301      	movs	r3, #1
 801cb20:	f005 051f 	and.w	r5, r5, #31
 801cb24:	fa03 f505 	lsl.w	r5, r3, r5
 801cb28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cb2c:	421d      	tst	r5, r3
 801cb2e:	bf18      	it	ne
 801cb30:	f04f 0801 	movne.w	r8, #1
 801cb34:	f048 0820 	orr.w	r8, r8, #32
 801cb38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb3a:	601c      	str	r4, [r3, #0]
 801cb3c:	9b02      	ldr	r3, [sp, #8]
 801cb3e:	601e      	str	r6, [r3, #0]
 801cb40:	e6a2      	b.n	801c888 <__gethex+0x114>
 801cb42:	4290      	cmp	r0, r2
 801cb44:	f842 3c04 	str.w	r3, [r2, #-4]
 801cb48:	d8d6      	bhi.n	801caf8 <__gethex+0x384>
 801cb4a:	68a2      	ldr	r2, [r4, #8]
 801cb4c:	4593      	cmp	fp, r2
 801cb4e:	db17      	blt.n	801cb80 <__gethex+0x40c>
 801cb50:	6861      	ldr	r1, [r4, #4]
 801cb52:	4648      	mov	r0, r9
 801cb54:	3101      	adds	r1, #1
 801cb56:	f000 f90f 	bl	801cd78 <_Balloc>
 801cb5a:	4682      	mov	sl, r0
 801cb5c:	b918      	cbnz	r0, 801cb66 <__gethex+0x3f2>
 801cb5e:	4b1b      	ldr	r3, [pc, #108]	; (801cbcc <__gethex+0x458>)
 801cb60:	4602      	mov	r2, r0
 801cb62:	2184      	movs	r1, #132	; 0x84
 801cb64:	e6b3      	b.n	801c8ce <__gethex+0x15a>
 801cb66:	6922      	ldr	r2, [r4, #16]
 801cb68:	3202      	adds	r2, #2
 801cb6a:	f104 010c 	add.w	r1, r4, #12
 801cb6e:	0092      	lsls	r2, r2, #2
 801cb70:	300c      	adds	r0, #12
 801cb72:	f7fe fe94 	bl	801b89e <memcpy>
 801cb76:	4621      	mov	r1, r4
 801cb78:	4648      	mov	r0, r9
 801cb7a:	f000 f93d 	bl	801cdf8 <_Bfree>
 801cb7e:	4654      	mov	r4, sl
 801cb80:	6922      	ldr	r2, [r4, #16]
 801cb82:	1c51      	adds	r1, r2, #1
 801cb84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cb88:	6121      	str	r1, [r4, #16]
 801cb8a:	2101      	movs	r1, #1
 801cb8c:	6151      	str	r1, [r2, #20]
 801cb8e:	e7bc      	b.n	801cb0a <__gethex+0x396>
 801cb90:	6921      	ldr	r1, [r4, #16]
 801cb92:	4559      	cmp	r1, fp
 801cb94:	dd0b      	ble.n	801cbae <__gethex+0x43a>
 801cb96:	2101      	movs	r1, #1
 801cb98:	4620      	mov	r0, r4
 801cb9a:	f7ff fd83 	bl	801c6a4 <rshift>
 801cb9e:	68bb      	ldr	r3, [r7, #8]
 801cba0:	3601      	adds	r6, #1
 801cba2:	42b3      	cmp	r3, r6
 801cba4:	f6ff aedb 	blt.w	801c95e <__gethex+0x1ea>
 801cba8:	f04f 0801 	mov.w	r8, #1
 801cbac:	e7c2      	b.n	801cb34 <__gethex+0x3c0>
 801cbae:	f015 051f 	ands.w	r5, r5, #31
 801cbb2:	d0f9      	beq.n	801cba8 <__gethex+0x434>
 801cbb4:	9b01      	ldr	r3, [sp, #4]
 801cbb6:	441a      	add	r2, r3
 801cbb8:	f1c5 0520 	rsb	r5, r5, #32
 801cbbc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801cbc0:	f000 f9cc 	bl	801cf5c <__hi0bits>
 801cbc4:	42a8      	cmp	r0, r5
 801cbc6:	dbe6      	blt.n	801cb96 <__gethex+0x422>
 801cbc8:	e7ee      	b.n	801cba8 <__gethex+0x434>
 801cbca:	bf00      	nop
 801cbcc:	08022ed3 	.word	0x08022ed3

0801cbd0 <L_shift>:
 801cbd0:	f1c2 0208 	rsb	r2, r2, #8
 801cbd4:	0092      	lsls	r2, r2, #2
 801cbd6:	b570      	push	{r4, r5, r6, lr}
 801cbd8:	f1c2 0620 	rsb	r6, r2, #32
 801cbdc:	6843      	ldr	r3, [r0, #4]
 801cbde:	6804      	ldr	r4, [r0, #0]
 801cbe0:	fa03 f506 	lsl.w	r5, r3, r6
 801cbe4:	432c      	orrs	r4, r5
 801cbe6:	40d3      	lsrs	r3, r2
 801cbe8:	6004      	str	r4, [r0, #0]
 801cbea:	f840 3f04 	str.w	r3, [r0, #4]!
 801cbee:	4288      	cmp	r0, r1
 801cbf0:	d3f4      	bcc.n	801cbdc <L_shift+0xc>
 801cbf2:	bd70      	pop	{r4, r5, r6, pc}

0801cbf4 <__match>:
 801cbf4:	b530      	push	{r4, r5, lr}
 801cbf6:	6803      	ldr	r3, [r0, #0]
 801cbf8:	3301      	adds	r3, #1
 801cbfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cbfe:	b914      	cbnz	r4, 801cc06 <__match+0x12>
 801cc00:	6003      	str	r3, [r0, #0]
 801cc02:	2001      	movs	r0, #1
 801cc04:	bd30      	pop	{r4, r5, pc}
 801cc06:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cc0e:	2d19      	cmp	r5, #25
 801cc10:	bf98      	it	ls
 801cc12:	3220      	addls	r2, #32
 801cc14:	42a2      	cmp	r2, r4
 801cc16:	d0f0      	beq.n	801cbfa <__match+0x6>
 801cc18:	2000      	movs	r0, #0
 801cc1a:	e7f3      	b.n	801cc04 <__match+0x10>

0801cc1c <__hexnan>:
 801cc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc20:	680b      	ldr	r3, [r1, #0]
 801cc22:	6801      	ldr	r1, [r0, #0]
 801cc24:	115e      	asrs	r6, r3, #5
 801cc26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cc2a:	f013 031f 	ands.w	r3, r3, #31
 801cc2e:	b087      	sub	sp, #28
 801cc30:	bf18      	it	ne
 801cc32:	3604      	addne	r6, #4
 801cc34:	2500      	movs	r5, #0
 801cc36:	1f37      	subs	r7, r6, #4
 801cc38:	4682      	mov	sl, r0
 801cc3a:	4690      	mov	r8, r2
 801cc3c:	9301      	str	r3, [sp, #4]
 801cc3e:	f846 5c04 	str.w	r5, [r6, #-4]
 801cc42:	46b9      	mov	r9, r7
 801cc44:	463c      	mov	r4, r7
 801cc46:	9502      	str	r5, [sp, #8]
 801cc48:	46ab      	mov	fp, r5
 801cc4a:	784a      	ldrb	r2, [r1, #1]
 801cc4c:	1c4b      	adds	r3, r1, #1
 801cc4e:	9303      	str	r3, [sp, #12]
 801cc50:	b342      	cbz	r2, 801cca4 <__hexnan+0x88>
 801cc52:	4610      	mov	r0, r2
 801cc54:	9105      	str	r1, [sp, #20]
 801cc56:	9204      	str	r2, [sp, #16]
 801cc58:	f7ff fd76 	bl	801c748 <__hexdig_fun>
 801cc5c:	2800      	cmp	r0, #0
 801cc5e:	d14f      	bne.n	801cd00 <__hexnan+0xe4>
 801cc60:	9a04      	ldr	r2, [sp, #16]
 801cc62:	9905      	ldr	r1, [sp, #20]
 801cc64:	2a20      	cmp	r2, #32
 801cc66:	d818      	bhi.n	801cc9a <__hexnan+0x7e>
 801cc68:	9b02      	ldr	r3, [sp, #8]
 801cc6a:	459b      	cmp	fp, r3
 801cc6c:	dd13      	ble.n	801cc96 <__hexnan+0x7a>
 801cc6e:	454c      	cmp	r4, r9
 801cc70:	d206      	bcs.n	801cc80 <__hexnan+0x64>
 801cc72:	2d07      	cmp	r5, #7
 801cc74:	dc04      	bgt.n	801cc80 <__hexnan+0x64>
 801cc76:	462a      	mov	r2, r5
 801cc78:	4649      	mov	r1, r9
 801cc7a:	4620      	mov	r0, r4
 801cc7c:	f7ff ffa8 	bl	801cbd0 <L_shift>
 801cc80:	4544      	cmp	r4, r8
 801cc82:	d950      	bls.n	801cd26 <__hexnan+0x10a>
 801cc84:	2300      	movs	r3, #0
 801cc86:	f1a4 0904 	sub.w	r9, r4, #4
 801cc8a:	f844 3c04 	str.w	r3, [r4, #-4]
 801cc8e:	f8cd b008 	str.w	fp, [sp, #8]
 801cc92:	464c      	mov	r4, r9
 801cc94:	461d      	mov	r5, r3
 801cc96:	9903      	ldr	r1, [sp, #12]
 801cc98:	e7d7      	b.n	801cc4a <__hexnan+0x2e>
 801cc9a:	2a29      	cmp	r2, #41	; 0x29
 801cc9c:	d155      	bne.n	801cd4a <__hexnan+0x12e>
 801cc9e:	3102      	adds	r1, #2
 801cca0:	f8ca 1000 	str.w	r1, [sl]
 801cca4:	f1bb 0f00 	cmp.w	fp, #0
 801cca8:	d04f      	beq.n	801cd4a <__hexnan+0x12e>
 801ccaa:	454c      	cmp	r4, r9
 801ccac:	d206      	bcs.n	801ccbc <__hexnan+0xa0>
 801ccae:	2d07      	cmp	r5, #7
 801ccb0:	dc04      	bgt.n	801ccbc <__hexnan+0xa0>
 801ccb2:	462a      	mov	r2, r5
 801ccb4:	4649      	mov	r1, r9
 801ccb6:	4620      	mov	r0, r4
 801ccb8:	f7ff ff8a 	bl	801cbd0 <L_shift>
 801ccbc:	4544      	cmp	r4, r8
 801ccbe:	d934      	bls.n	801cd2a <__hexnan+0x10e>
 801ccc0:	f1a8 0204 	sub.w	r2, r8, #4
 801ccc4:	4623      	mov	r3, r4
 801ccc6:	f853 1b04 	ldr.w	r1, [r3], #4
 801ccca:	f842 1f04 	str.w	r1, [r2, #4]!
 801ccce:	429f      	cmp	r7, r3
 801ccd0:	d2f9      	bcs.n	801ccc6 <__hexnan+0xaa>
 801ccd2:	1b3b      	subs	r3, r7, r4
 801ccd4:	f023 0303 	bic.w	r3, r3, #3
 801ccd8:	3304      	adds	r3, #4
 801ccda:	3e03      	subs	r6, #3
 801ccdc:	3401      	adds	r4, #1
 801ccde:	42a6      	cmp	r6, r4
 801cce0:	bf38      	it	cc
 801cce2:	2304      	movcc	r3, #4
 801cce4:	4443      	add	r3, r8
 801cce6:	2200      	movs	r2, #0
 801cce8:	f843 2b04 	str.w	r2, [r3], #4
 801ccec:	429f      	cmp	r7, r3
 801ccee:	d2fb      	bcs.n	801cce8 <__hexnan+0xcc>
 801ccf0:	683b      	ldr	r3, [r7, #0]
 801ccf2:	b91b      	cbnz	r3, 801ccfc <__hexnan+0xe0>
 801ccf4:	4547      	cmp	r7, r8
 801ccf6:	d126      	bne.n	801cd46 <__hexnan+0x12a>
 801ccf8:	2301      	movs	r3, #1
 801ccfa:	603b      	str	r3, [r7, #0]
 801ccfc:	2005      	movs	r0, #5
 801ccfe:	e025      	b.n	801cd4c <__hexnan+0x130>
 801cd00:	3501      	adds	r5, #1
 801cd02:	2d08      	cmp	r5, #8
 801cd04:	f10b 0b01 	add.w	fp, fp, #1
 801cd08:	dd06      	ble.n	801cd18 <__hexnan+0xfc>
 801cd0a:	4544      	cmp	r4, r8
 801cd0c:	d9c3      	bls.n	801cc96 <__hexnan+0x7a>
 801cd0e:	2300      	movs	r3, #0
 801cd10:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd14:	2501      	movs	r5, #1
 801cd16:	3c04      	subs	r4, #4
 801cd18:	6822      	ldr	r2, [r4, #0]
 801cd1a:	f000 000f 	and.w	r0, r0, #15
 801cd1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801cd22:	6020      	str	r0, [r4, #0]
 801cd24:	e7b7      	b.n	801cc96 <__hexnan+0x7a>
 801cd26:	2508      	movs	r5, #8
 801cd28:	e7b5      	b.n	801cc96 <__hexnan+0x7a>
 801cd2a:	9b01      	ldr	r3, [sp, #4]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d0df      	beq.n	801ccf0 <__hexnan+0xd4>
 801cd30:	f1c3 0320 	rsb	r3, r3, #32
 801cd34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cd38:	40da      	lsrs	r2, r3
 801cd3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801cd3e:	4013      	ands	r3, r2
 801cd40:	f846 3c04 	str.w	r3, [r6, #-4]
 801cd44:	e7d4      	b.n	801ccf0 <__hexnan+0xd4>
 801cd46:	3f04      	subs	r7, #4
 801cd48:	e7d2      	b.n	801ccf0 <__hexnan+0xd4>
 801cd4a:	2004      	movs	r0, #4
 801cd4c:	b007      	add	sp, #28
 801cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd52 <__ascii_mbtowc>:
 801cd52:	b082      	sub	sp, #8
 801cd54:	b901      	cbnz	r1, 801cd58 <__ascii_mbtowc+0x6>
 801cd56:	a901      	add	r1, sp, #4
 801cd58:	b142      	cbz	r2, 801cd6c <__ascii_mbtowc+0x1a>
 801cd5a:	b14b      	cbz	r3, 801cd70 <__ascii_mbtowc+0x1e>
 801cd5c:	7813      	ldrb	r3, [r2, #0]
 801cd5e:	600b      	str	r3, [r1, #0]
 801cd60:	7812      	ldrb	r2, [r2, #0]
 801cd62:	1e10      	subs	r0, r2, #0
 801cd64:	bf18      	it	ne
 801cd66:	2001      	movne	r0, #1
 801cd68:	b002      	add	sp, #8
 801cd6a:	4770      	bx	lr
 801cd6c:	4610      	mov	r0, r2
 801cd6e:	e7fb      	b.n	801cd68 <__ascii_mbtowc+0x16>
 801cd70:	f06f 0001 	mvn.w	r0, #1
 801cd74:	e7f8      	b.n	801cd68 <__ascii_mbtowc+0x16>
	...

0801cd78 <_Balloc>:
 801cd78:	b570      	push	{r4, r5, r6, lr}
 801cd7a:	69c6      	ldr	r6, [r0, #28]
 801cd7c:	4604      	mov	r4, r0
 801cd7e:	460d      	mov	r5, r1
 801cd80:	b976      	cbnz	r6, 801cda0 <_Balloc+0x28>
 801cd82:	2010      	movs	r0, #16
 801cd84:	f7fc fc7a 	bl	801967c <malloc>
 801cd88:	4602      	mov	r2, r0
 801cd8a:	61e0      	str	r0, [r4, #28]
 801cd8c:	b920      	cbnz	r0, 801cd98 <_Balloc+0x20>
 801cd8e:	4b18      	ldr	r3, [pc, #96]	; (801cdf0 <_Balloc+0x78>)
 801cd90:	4818      	ldr	r0, [pc, #96]	; (801cdf4 <_Balloc+0x7c>)
 801cd92:	216b      	movs	r1, #107	; 0x6b
 801cd94:	f7fe fda2 	bl	801b8dc <__assert_func>
 801cd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd9c:	6006      	str	r6, [r0, #0]
 801cd9e:	60c6      	str	r6, [r0, #12]
 801cda0:	69e6      	ldr	r6, [r4, #28]
 801cda2:	68f3      	ldr	r3, [r6, #12]
 801cda4:	b183      	cbz	r3, 801cdc8 <_Balloc+0x50>
 801cda6:	69e3      	ldr	r3, [r4, #28]
 801cda8:	68db      	ldr	r3, [r3, #12]
 801cdaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cdae:	b9b8      	cbnz	r0, 801cde0 <_Balloc+0x68>
 801cdb0:	2101      	movs	r1, #1
 801cdb2:	fa01 f605 	lsl.w	r6, r1, r5
 801cdb6:	1d72      	adds	r2, r6, #5
 801cdb8:	0092      	lsls	r2, r2, #2
 801cdba:	4620      	mov	r0, r4
 801cdbc:	f7fc fc48 	bl	8019650 <_calloc_r>
 801cdc0:	b160      	cbz	r0, 801cddc <_Balloc+0x64>
 801cdc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cdc6:	e00e      	b.n	801cde6 <_Balloc+0x6e>
 801cdc8:	2221      	movs	r2, #33	; 0x21
 801cdca:	2104      	movs	r1, #4
 801cdcc:	4620      	mov	r0, r4
 801cdce:	f7fc fc3f 	bl	8019650 <_calloc_r>
 801cdd2:	69e3      	ldr	r3, [r4, #28]
 801cdd4:	60f0      	str	r0, [r6, #12]
 801cdd6:	68db      	ldr	r3, [r3, #12]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d1e4      	bne.n	801cda6 <_Balloc+0x2e>
 801cddc:	2000      	movs	r0, #0
 801cdde:	bd70      	pop	{r4, r5, r6, pc}
 801cde0:	6802      	ldr	r2, [r0, #0]
 801cde2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cde6:	2300      	movs	r3, #0
 801cde8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cdec:	e7f7      	b.n	801cdde <_Balloc+0x66>
 801cdee:	bf00      	nop
 801cdf0:	08022c28 	.word	0x08022c28
 801cdf4:	08022f44 	.word	0x08022f44

0801cdf8 <_Bfree>:
 801cdf8:	b570      	push	{r4, r5, r6, lr}
 801cdfa:	69c6      	ldr	r6, [r0, #28]
 801cdfc:	4605      	mov	r5, r0
 801cdfe:	460c      	mov	r4, r1
 801ce00:	b976      	cbnz	r6, 801ce20 <_Bfree+0x28>
 801ce02:	2010      	movs	r0, #16
 801ce04:	f7fc fc3a 	bl	801967c <malloc>
 801ce08:	4602      	mov	r2, r0
 801ce0a:	61e8      	str	r0, [r5, #28]
 801ce0c:	b920      	cbnz	r0, 801ce18 <_Bfree+0x20>
 801ce0e:	4b09      	ldr	r3, [pc, #36]	; (801ce34 <_Bfree+0x3c>)
 801ce10:	4809      	ldr	r0, [pc, #36]	; (801ce38 <_Bfree+0x40>)
 801ce12:	218f      	movs	r1, #143	; 0x8f
 801ce14:	f7fe fd62 	bl	801b8dc <__assert_func>
 801ce18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ce1c:	6006      	str	r6, [r0, #0]
 801ce1e:	60c6      	str	r6, [r0, #12]
 801ce20:	b13c      	cbz	r4, 801ce32 <_Bfree+0x3a>
 801ce22:	69eb      	ldr	r3, [r5, #28]
 801ce24:	6862      	ldr	r2, [r4, #4]
 801ce26:	68db      	ldr	r3, [r3, #12]
 801ce28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ce2c:	6021      	str	r1, [r4, #0]
 801ce2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ce32:	bd70      	pop	{r4, r5, r6, pc}
 801ce34:	08022c28 	.word	0x08022c28
 801ce38:	08022f44 	.word	0x08022f44

0801ce3c <__multadd>:
 801ce3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce40:	690d      	ldr	r5, [r1, #16]
 801ce42:	4607      	mov	r7, r0
 801ce44:	460c      	mov	r4, r1
 801ce46:	461e      	mov	r6, r3
 801ce48:	f101 0c14 	add.w	ip, r1, #20
 801ce4c:	2000      	movs	r0, #0
 801ce4e:	f8dc 3000 	ldr.w	r3, [ip]
 801ce52:	b299      	uxth	r1, r3
 801ce54:	fb02 6101 	mla	r1, r2, r1, r6
 801ce58:	0c1e      	lsrs	r6, r3, #16
 801ce5a:	0c0b      	lsrs	r3, r1, #16
 801ce5c:	fb02 3306 	mla	r3, r2, r6, r3
 801ce60:	b289      	uxth	r1, r1
 801ce62:	3001      	adds	r0, #1
 801ce64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ce68:	4285      	cmp	r5, r0
 801ce6a:	f84c 1b04 	str.w	r1, [ip], #4
 801ce6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ce72:	dcec      	bgt.n	801ce4e <__multadd+0x12>
 801ce74:	b30e      	cbz	r6, 801ceba <__multadd+0x7e>
 801ce76:	68a3      	ldr	r3, [r4, #8]
 801ce78:	42ab      	cmp	r3, r5
 801ce7a:	dc19      	bgt.n	801ceb0 <__multadd+0x74>
 801ce7c:	6861      	ldr	r1, [r4, #4]
 801ce7e:	4638      	mov	r0, r7
 801ce80:	3101      	adds	r1, #1
 801ce82:	f7ff ff79 	bl	801cd78 <_Balloc>
 801ce86:	4680      	mov	r8, r0
 801ce88:	b928      	cbnz	r0, 801ce96 <__multadd+0x5a>
 801ce8a:	4602      	mov	r2, r0
 801ce8c:	4b0c      	ldr	r3, [pc, #48]	; (801cec0 <__multadd+0x84>)
 801ce8e:	480d      	ldr	r0, [pc, #52]	; (801cec4 <__multadd+0x88>)
 801ce90:	21ba      	movs	r1, #186	; 0xba
 801ce92:	f7fe fd23 	bl	801b8dc <__assert_func>
 801ce96:	6922      	ldr	r2, [r4, #16]
 801ce98:	3202      	adds	r2, #2
 801ce9a:	f104 010c 	add.w	r1, r4, #12
 801ce9e:	0092      	lsls	r2, r2, #2
 801cea0:	300c      	adds	r0, #12
 801cea2:	f7fe fcfc 	bl	801b89e <memcpy>
 801cea6:	4621      	mov	r1, r4
 801cea8:	4638      	mov	r0, r7
 801ceaa:	f7ff ffa5 	bl	801cdf8 <_Bfree>
 801ceae:	4644      	mov	r4, r8
 801ceb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ceb4:	3501      	adds	r5, #1
 801ceb6:	615e      	str	r6, [r3, #20]
 801ceb8:	6125      	str	r5, [r4, #16]
 801ceba:	4620      	mov	r0, r4
 801cebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cec0:	08022ed3 	.word	0x08022ed3
 801cec4:	08022f44 	.word	0x08022f44

0801cec8 <__s2b>:
 801cec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cecc:	460c      	mov	r4, r1
 801cece:	4615      	mov	r5, r2
 801ced0:	461f      	mov	r7, r3
 801ced2:	2209      	movs	r2, #9
 801ced4:	3308      	adds	r3, #8
 801ced6:	4606      	mov	r6, r0
 801ced8:	fb93 f3f2 	sdiv	r3, r3, r2
 801cedc:	2100      	movs	r1, #0
 801cede:	2201      	movs	r2, #1
 801cee0:	429a      	cmp	r2, r3
 801cee2:	db09      	blt.n	801cef8 <__s2b+0x30>
 801cee4:	4630      	mov	r0, r6
 801cee6:	f7ff ff47 	bl	801cd78 <_Balloc>
 801ceea:	b940      	cbnz	r0, 801cefe <__s2b+0x36>
 801ceec:	4602      	mov	r2, r0
 801ceee:	4b19      	ldr	r3, [pc, #100]	; (801cf54 <__s2b+0x8c>)
 801cef0:	4819      	ldr	r0, [pc, #100]	; (801cf58 <__s2b+0x90>)
 801cef2:	21d3      	movs	r1, #211	; 0xd3
 801cef4:	f7fe fcf2 	bl	801b8dc <__assert_func>
 801cef8:	0052      	lsls	r2, r2, #1
 801cefa:	3101      	adds	r1, #1
 801cefc:	e7f0      	b.n	801cee0 <__s2b+0x18>
 801cefe:	9b08      	ldr	r3, [sp, #32]
 801cf00:	6143      	str	r3, [r0, #20]
 801cf02:	2d09      	cmp	r5, #9
 801cf04:	f04f 0301 	mov.w	r3, #1
 801cf08:	6103      	str	r3, [r0, #16]
 801cf0a:	dd16      	ble.n	801cf3a <__s2b+0x72>
 801cf0c:	f104 0909 	add.w	r9, r4, #9
 801cf10:	46c8      	mov	r8, r9
 801cf12:	442c      	add	r4, r5
 801cf14:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cf18:	4601      	mov	r1, r0
 801cf1a:	3b30      	subs	r3, #48	; 0x30
 801cf1c:	220a      	movs	r2, #10
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7ff ff8c 	bl	801ce3c <__multadd>
 801cf24:	45a0      	cmp	r8, r4
 801cf26:	d1f5      	bne.n	801cf14 <__s2b+0x4c>
 801cf28:	f1a5 0408 	sub.w	r4, r5, #8
 801cf2c:	444c      	add	r4, r9
 801cf2e:	1b2d      	subs	r5, r5, r4
 801cf30:	1963      	adds	r3, r4, r5
 801cf32:	42bb      	cmp	r3, r7
 801cf34:	db04      	blt.n	801cf40 <__s2b+0x78>
 801cf36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf3a:	340a      	adds	r4, #10
 801cf3c:	2509      	movs	r5, #9
 801cf3e:	e7f6      	b.n	801cf2e <__s2b+0x66>
 801cf40:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cf44:	4601      	mov	r1, r0
 801cf46:	3b30      	subs	r3, #48	; 0x30
 801cf48:	220a      	movs	r2, #10
 801cf4a:	4630      	mov	r0, r6
 801cf4c:	f7ff ff76 	bl	801ce3c <__multadd>
 801cf50:	e7ee      	b.n	801cf30 <__s2b+0x68>
 801cf52:	bf00      	nop
 801cf54:	08022ed3 	.word	0x08022ed3
 801cf58:	08022f44 	.word	0x08022f44

0801cf5c <__hi0bits>:
 801cf5c:	0c03      	lsrs	r3, r0, #16
 801cf5e:	041b      	lsls	r3, r3, #16
 801cf60:	b9d3      	cbnz	r3, 801cf98 <__hi0bits+0x3c>
 801cf62:	0400      	lsls	r0, r0, #16
 801cf64:	2310      	movs	r3, #16
 801cf66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cf6a:	bf04      	itt	eq
 801cf6c:	0200      	lsleq	r0, r0, #8
 801cf6e:	3308      	addeq	r3, #8
 801cf70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cf74:	bf04      	itt	eq
 801cf76:	0100      	lsleq	r0, r0, #4
 801cf78:	3304      	addeq	r3, #4
 801cf7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cf7e:	bf04      	itt	eq
 801cf80:	0080      	lsleq	r0, r0, #2
 801cf82:	3302      	addeq	r3, #2
 801cf84:	2800      	cmp	r0, #0
 801cf86:	db05      	blt.n	801cf94 <__hi0bits+0x38>
 801cf88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cf8c:	f103 0301 	add.w	r3, r3, #1
 801cf90:	bf08      	it	eq
 801cf92:	2320      	moveq	r3, #32
 801cf94:	4618      	mov	r0, r3
 801cf96:	4770      	bx	lr
 801cf98:	2300      	movs	r3, #0
 801cf9a:	e7e4      	b.n	801cf66 <__hi0bits+0xa>

0801cf9c <__lo0bits>:
 801cf9c:	6803      	ldr	r3, [r0, #0]
 801cf9e:	f013 0207 	ands.w	r2, r3, #7
 801cfa2:	d00c      	beq.n	801cfbe <__lo0bits+0x22>
 801cfa4:	07d9      	lsls	r1, r3, #31
 801cfa6:	d422      	bmi.n	801cfee <__lo0bits+0x52>
 801cfa8:	079a      	lsls	r2, r3, #30
 801cfaa:	bf49      	itett	mi
 801cfac:	085b      	lsrmi	r3, r3, #1
 801cfae:	089b      	lsrpl	r3, r3, #2
 801cfb0:	6003      	strmi	r3, [r0, #0]
 801cfb2:	2201      	movmi	r2, #1
 801cfb4:	bf5c      	itt	pl
 801cfb6:	6003      	strpl	r3, [r0, #0]
 801cfb8:	2202      	movpl	r2, #2
 801cfba:	4610      	mov	r0, r2
 801cfbc:	4770      	bx	lr
 801cfbe:	b299      	uxth	r1, r3
 801cfc0:	b909      	cbnz	r1, 801cfc6 <__lo0bits+0x2a>
 801cfc2:	0c1b      	lsrs	r3, r3, #16
 801cfc4:	2210      	movs	r2, #16
 801cfc6:	b2d9      	uxtb	r1, r3
 801cfc8:	b909      	cbnz	r1, 801cfce <__lo0bits+0x32>
 801cfca:	3208      	adds	r2, #8
 801cfcc:	0a1b      	lsrs	r3, r3, #8
 801cfce:	0719      	lsls	r1, r3, #28
 801cfd0:	bf04      	itt	eq
 801cfd2:	091b      	lsreq	r3, r3, #4
 801cfd4:	3204      	addeq	r2, #4
 801cfd6:	0799      	lsls	r1, r3, #30
 801cfd8:	bf04      	itt	eq
 801cfda:	089b      	lsreq	r3, r3, #2
 801cfdc:	3202      	addeq	r2, #2
 801cfde:	07d9      	lsls	r1, r3, #31
 801cfe0:	d403      	bmi.n	801cfea <__lo0bits+0x4e>
 801cfe2:	085b      	lsrs	r3, r3, #1
 801cfe4:	f102 0201 	add.w	r2, r2, #1
 801cfe8:	d003      	beq.n	801cff2 <__lo0bits+0x56>
 801cfea:	6003      	str	r3, [r0, #0]
 801cfec:	e7e5      	b.n	801cfba <__lo0bits+0x1e>
 801cfee:	2200      	movs	r2, #0
 801cff0:	e7e3      	b.n	801cfba <__lo0bits+0x1e>
 801cff2:	2220      	movs	r2, #32
 801cff4:	e7e1      	b.n	801cfba <__lo0bits+0x1e>
	...

0801cff8 <__i2b>:
 801cff8:	b510      	push	{r4, lr}
 801cffa:	460c      	mov	r4, r1
 801cffc:	2101      	movs	r1, #1
 801cffe:	f7ff febb 	bl	801cd78 <_Balloc>
 801d002:	4602      	mov	r2, r0
 801d004:	b928      	cbnz	r0, 801d012 <__i2b+0x1a>
 801d006:	4b05      	ldr	r3, [pc, #20]	; (801d01c <__i2b+0x24>)
 801d008:	4805      	ldr	r0, [pc, #20]	; (801d020 <__i2b+0x28>)
 801d00a:	f240 1145 	movw	r1, #325	; 0x145
 801d00e:	f7fe fc65 	bl	801b8dc <__assert_func>
 801d012:	2301      	movs	r3, #1
 801d014:	6144      	str	r4, [r0, #20]
 801d016:	6103      	str	r3, [r0, #16]
 801d018:	bd10      	pop	{r4, pc}
 801d01a:	bf00      	nop
 801d01c:	08022ed3 	.word	0x08022ed3
 801d020:	08022f44 	.word	0x08022f44

0801d024 <__multiply>:
 801d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d028:	4691      	mov	r9, r2
 801d02a:	690a      	ldr	r2, [r1, #16]
 801d02c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d030:	429a      	cmp	r2, r3
 801d032:	bfb8      	it	lt
 801d034:	460b      	movlt	r3, r1
 801d036:	460c      	mov	r4, r1
 801d038:	bfbc      	itt	lt
 801d03a:	464c      	movlt	r4, r9
 801d03c:	4699      	movlt	r9, r3
 801d03e:	6927      	ldr	r7, [r4, #16]
 801d040:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d044:	68a3      	ldr	r3, [r4, #8]
 801d046:	6861      	ldr	r1, [r4, #4]
 801d048:	eb07 060a 	add.w	r6, r7, sl
 801d04c:	42b3      	cmp	r3, r6
 801d04e:	b085      	sub	sp, #20
 801d050:	bfb8      	it	lt
 801d052:	3101      	addlt	r1, #1
 801d054:	f7ff fe90 	bl	801cd78 <_Balloc>
 801d058:	b930      	cbnz	r0, 801d068 <__multiply+0x44>
 801d05a:	4602      	mov	r2, r0
 801d05c:	4b44      	ldr	r3, [pc, #272]	; (801d170 <__multiply+0x14c>)
 801d05e:	4845      	ldr	r0, [pc, #276]	; (801d174 <__multiply+0x150>)
 801d060:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d064:	f7fe fc3a 	bl	801b8dc <__assert_func>
 801d068:	f100 0514 	add.w	r5, r0, #20
 801d06c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d070:	462b      	mov	r3, r5
 801d072:	2200      	movs	r2, #0
 801d074:	4543      	cmp	r3, r8
 801d076:	d321      	bcc.n	801d0bc <__multiply+0x98>
 801d078:	f104 0314 	add.w	r3, r4, #20
 801d07c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d080:	f109 0314 	add.w	r3, r9, #20
 801d084:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d088:	9202      	str	r2, [sp, #8]
 801d08a:	1b3a      	subs	r2, r7, r4
 801d08c:	3a15      	subs	r2, #21
 801d08e:	f022 0203 	bic.w	r2, r2, #3
 801d092:	3204      	adds	r2, #4
 801d094:	f104 0115 	add.w	r1, r4, #21
 801d098:	428f      	cmp	r7, r1
 801d09a:	bf38      	it	cc
 801d09c:	2204      	movcc	r2, #4
 801d09e:	9201      	str	r2, [sp, #4]
 801d0a0:	9a02      	ldr	r2, [sp, #8]
 801d0a2:	9303      	str	r3, [sp, #12]
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d80c      	bhi.n	801d0c2 <__multiply+0x9e>
 801d0a8:	2e00      	cmp	r6, #0
 801d0aa:	dd03      	ble.n	801d0b4 <__multiply+0x90>
 801d0ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d05b      	beq.n	801d16c <__multiply+0x148>
 801d0b4:	6106      	str	r6, [r0, #16]
 801d0b6:	b005      	add	sp, #20
 801d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0bc:	f843 2b04 	str.w	r2, [r3], #4
 801d0c0:	e7d8      	b.n	801d074 <__multiply+0x50>
 801d0c2:	f8b3 a000 	ldrh.w	sl, [r3]
 801d0c6:	f1ba 0f00 	cmp.w	sl, #0
 801d0ca:	d024      	beq.n	801d116 <__multiply+0xf2>
 801d0cc:	f104 0e14 	add.w	lr, r4, #20
 801d0d0:	46a9      	mov	r9, r5
 801d0d2:	f04f 0c00 	mov.w	ip, #0
 801d0d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d0da:	f8d9 1000 	ldr.w	r1, [r9]
 801d0de:	fa1f fb82 	uxth.w	fp, r2
 801d0e2:	b289      	uxth	r1, r1
 801d0e4:	fb0a 110b 	mla	r1, sl, fp, r1
 801d0e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d0ec:	f8d9 2000 	ldr.w	r2, [r9]
 801d0f0:	4461      	add	r1, ip
 801d0f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d0f6:	fb0a c20b 	mla	r2, sl, fp, ip
 801d0fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d0fe:	b289      	uxth	r1, r1
 801d100:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d104:	4577      	cmp	r7, lr
 801d106:	f849 1b04 	str.w	r1, [r9], #4
 801d10a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d10e:	d8e2      	bhi.n	801d0d6 <__multiply+0xb2>
 801d110:	9a01      	ldr	r2, [sp, #4]
 801d112:	f845 c002 	str.w	ip, [r5, r2]
 801d116:	9a03      	ldr	r2, [sp, #12]
 801d118:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d11c:	3304      	adds	r3, #4
 801d11e:	f1b9 0f00 	cmp.w	r9, #0
 801d122:	d021      	beq.n	801d168 <__multiply+0x144>
 801d124:	6829      	ldr	r1, [r5, #0]
 801d126:	f104 0c14 	add.w	ip, r4, #20
 801d12a:	46ae      	mov	lr, r5
 801d12c:	f04f 0a00 	mov.w	sl, #0
 801d130:	f8bc b000 	ldrh.w	fp, [ip]
 801d134:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d138:	fb09 220b 	mla	r2, r9, fp, r2
 801d13c:	4452      	add	r2, sl
 801d13e:	b289      	uxth	r1, r1
 801d140:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d144:	f84e 1b04 	str.w	r1, [lr], #4
 801d148:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d14c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d150:	f8be 1000 	ldrh.w	r1, [lr]
 801d154:	fb09 110a 	mla	r1, r9, sl, r1
 801d158:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d15c:	4567      	cmp	r7, ip
 801d15e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d162:	d8e5      	bhi.n	801d130 <__multiply+0x10c>
 801d164:	9a01      	ldr	r2, [sp, #4]
 801d166:	50a9      	str	r1, [r5, r2]
 801d168:	3504      	adds	r5, #4
 801d16a:	e799      	b.n	801d0a0 <__multiply+0x7c>
 801d16c:	3e01      	subs	r6, #1
 801d16e:	e79b      	b.n	801d0a8 <__multiply+0x84>
 801d170:	08022ed3 	.word	0x08022ed3
 801d174:	08022f44 	.word	0x08022f44

0801d178 <__pow5mult>:
 801d178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d17c:	4615      	mov	r5, r2
 801d17e:	f012 0203 	ands.w	r2, r2, #3
 801d182:	4606      	mov	r6, r0
 801d184:	460f      	mov	r7, r1
 801d186:	d007      	beq.n	801d198 <__pow5mult+0x20>
 801d188:	4c25      	ldr	r4, [pc, #148]	; (801d220 <__pow5mult+0xa8>)
 801d18a:	3a01      	subs	r2, #1
 801d18c:	2300      	movs	r3, #0
 801d18e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d192:	f7ff fe53 	bl	801ce3c <__multadd>
 801d196:	4607      	mov	r7, r0
 801d198:	10ad      	asrs	r5, r5, #2
 801d19a:	d03d      	beq.n	801d218 <__pow5mult+0xa0>
 801d19c:	69f4      	ldr	r4, [r6, #28]
 801d19e:	b97c      	cbnz	r4, 801d1c0 <__pow5mult+0x48>
 801d1a0:	2010      	movs	r0, #16
 801d1a2:	f7fc fa6b 	bl	801967c <malloc>
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	61f0      	str	r0, [r6, #28]
 801d1aa:	b928      	cbnz	r0, 801d1b8 <__pow5mult+0x40>
 801d1ac:	4b1d      	ldr	r3, [pc, #116]	; (801d224 <__pow5mult+0xac>)
 801d1ae:	481e      	ldr	r0, [pc, #120]	; (801d228 <__pow5mult+0xb0>)
 801d1b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d1b4:	f7fe fb92 	bl	801b8dc <__assert_func>
 801d1b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d1bc:	6004      	str	r4, [r0, #0]
 801d1be:	60c4      	str	r4, [r0, #12]
 801d1c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d1c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d1c8:	b94c      	cbnz	r4, 801d1de <__pow5mult+0x66>
 801d1ca:	f240 2171 	movw	r1, #625	; 0x271
 801d1ce:	4630      	mov	r0, r6
 801d1d0:	f7ff ff12 	bl	801cff8 <__i2b>
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d1da:	4604      	mov	r4, r0
 801d1dc:	6003      	str	r3, [r0, #0]
 801d1de:	f04f 0900 	mov.w	r9, #0
 801d1e2:	07eb      	lsls	r3, r5, #31
 801d1e4:	d50a      	bpl.n	801d1fc <__pow5mult+0x84>
 801d1e6:	4639      	mov	r1, r7
 801d1e8:	4622      	mov	r2, r4
 801d1ea:	4630      	mov	r0, r6
 801d1ec:	f7ff ff1a 	bl	801d024 <__multiply>
 801d1f0:	4639      	mov	r1, r7
 801d1f2:	4680      	mov	r8, r0
 801d1f4:	4630      	mov	r0, r6
 801d1f6:	f7ff fdff 	bl	801cdf8 <_Bfree>
 801d1fa:	4647      	mov	r7, r8
 801d1fc:	106d      	asrs	r5, r5, #1
 801d1fe:	d00b      	beq.n	801d218 <__pow5mult+0xa0>
 801d200:	6820      	ldr	r0, [r4, #0]
 801d202:	b938      	cbnz	r0, 801d214 <__pow5mult+0x9c>
 801d204:	4622      	mov	r2, r4
 801d206:	4621      	mov	r1, r4
 801d208:	4630      	mov	r0, r6
 801d20a:	f7ff ff0b 	bl	801d024 <__multiply>
 801d20e:	6020      	str	r0, [r4, #0]
 801d210:	f8c0 9000 	str.w	r9, [r0]
 801d214:	4604      	mov	r4, r0
 801d216:	e7e4      	b.n	801d1e2 <__pow5mult+0x6a>
 801d218:	4638      	mov	r0, r7
 801d21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d21e:	bf00      	nop
 801d220:	08023090 	.word	0x08023090
 801d224:	08022c28 	.word	0x08022c28
 801d228:	08022f44 	.word	0x08022f44

0801d22c <__lshift>:
 801d22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d230:	460c      	mov	r4, r1
 801d232:	6849      	ldr	r1, [r1, #4]
 801d234:	6923      	ldr	r3, [r4, #16]
 801d236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d23a:	68a3      	ldr	r3, [r4, #8]
 801d23c:	4607      	mov	r7, r0
 801d23e:	4691      	mov	r9, r2
 801d240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d244:	f108 0601 	add.w	r6, r8, #1
 801d248:	42b3      	cmp	r3, r6
 801d24a:	db0b      	blt.n	801d264 <__lshift+0x38>
 801d24c:	4638      	mov	r0, r7
 801d24e:	f7ff fd93 	bl	801cd78 <_Balloc>
 801d252:	4605      	mov	r5, r0
 801d254:	b948      	cbnz	r0, 801d26a <__lshift+0x3e>
 801d256:	4602      	mov	r2, r0
 801d258:	4b28      	ldr	r3, [pc, #160]	; (801d2fc <__lshift+0xd0>)
 801d25a:	4829      	ldr	r0, [pc, #164]	; (801d300 <__lshift+0xd4>)
 801d25c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d260:	f7fe fb3c 	bl	801b8dc <__assert_func>
 801d264:	3101      	adds	r1, #1
 801d266:	005b      	lsls	r3, r3, #1
 801d268:	e7ee      	b.n	801d248 <__lshift+0x1c>
 801d26a:	2300      	movs	r3, #0
 801d26c:	f100 0114 	add.w	r1, r0, #20
 801d270:	f100 0210 	add.w	r2, r0, #16
 801d274:	4618      	mov	r0, r3
 801d276:	4553      	cmp	r3, sl
 801d278:	db33      	blt.n	801d2e2 <__lshift+0xb6>
 801d27a:	6920      	ldr	r0, [r4, #16]
 801d27c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d280:	f104 0314 	add.w	r3, r4, #20
 801d284:	f019 091f 	ands.w	r9, r9, #31
 801d288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d28c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d290:	d02b      	beq.n	801d2ea <__lshift+0xbe>
 801d292:	f1c9 0e20 	rsb	lr, r9, #32
 801d296:	468a      	mov	sl, r1
 801d298:	2200      	movs	r2, #0
 801d29a:	6818      	ldr	r0, [r3, #0]
 801d29c:	fa00 f009 	lsl.w	r0, r0, r9
 801d2a0:	4310      	orrs	r0, r2
 801d2a2:	f84a 0b04 	str.w	r0, [sl], #4
 801d2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2aa:	459c      	cmp	ip, r3
 801d2ac:	fa22 f20e 	lsr.w	r2, r2, lr
 801d2b0:	d8f3      	bhi.n	801d29a <__lshift+0x6e>
 801d2b2:	ebac 0304 	sub.w	r3, ip, r4
 801d2b6:	3b15      	subs	r3, #21
 801d2b8:	f023 0303 	bic.w	r3, r3, #3
 801d2bc:	3304      	adds	r3, #4
 801d2be:	f104 0015 	add.w	r0, r4, #21
 801d2c2:	4584      	cmp	ip, r0
 801d2c4:	bf38      	it	cc
 801d2c6:	2304      	movcc	r3, #4
 801d2c8:	50ca      	str	r2, [r1, r3]
 801d2ca:	b10a      	cbz	r2, 801d2d0 <__lshift+0xa4>
 801d2cc:	f108 0602 	add.w	r6, r8, #2
 801d2d0:	3e01      	subs	r6, #1
 801d2d2:	4638      	mov	r0, r7
 801d2d4:	612e      	str	r6, [r5, #16]
 801d2d6:	4621      	mov	r1, r4
 801d2d8:	f7ff fd8e 	bl	801cdf8 <_Bfree>
 801d2dc:	4628      	mov	r0, r5
 801d2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2e2:	f842 0f04 	str.w	r0, [r2, #4]!
 801d2e6:	3301      	adds	r3, #1
 801d2e8:	e7c5      	b.n	801d276 <__lshift+0x4a>
 801d2ea:	3904      	subs	r1, #4
 801d2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 801d2f4:	459c      	cmp	ip, r3
 801d2f6:	d8f9      	bhi.n	801d2ec <__lshift+0xc0>
 801d2f8:	e7ea      	b.n	801d2d0 <__lshift+0xa4>
 801d2fa:	bf00      	nop
 801d2fc:	08022ed3 	.word	0x08022ed3
 801d300:	08022f44 	.word	0x08022f44

0801d304 <__mcmp>:
 801d304:	b530      	push	{r4, r5, lr}
 801d306:	6902      	ldr	r2, [r0, #16]
 801d308:	690c      	ldr	r4, [r1, #16]
 801d30a:	1b12      	subs	r2, r2, r4
 801d30c:	d10e      	bne.n	801d32c <__mcmp+0x28>
 801d30e:	f100 0314 	add.w	r3, r0, #20
 801d312:	3114      	adds	r1, #20
 801d314:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d31c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d320:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d324:	42a5      	cmp	r5, r4
 801d326:	d003      	beq.n	801d330 <__mcmp+0x2c>
 801d328:	d305      	bcc.n	801d336 <__mcmp+0x32>
 801d32a:	2201      	movs	r2, #1
 801d32c:	4610      	mov	r0, r2
 801d32e:	bd30      	pop	{r4, r5, pc}
 801d330:	4283      	cmp	r3, r0
 801d332:	d3f3      	bcc.n	801d31c <__mcmp+0x18>
 801d334:	e7fa      	b.n	801d32c <__mcmp+0x28>
 801d336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d33a:	e7f7      	b.n	801d32c <__mcmp+0x28>

0801d33c <__mdiff>:
 801d33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d340:	460c      	mov	r4, r1
 801d342:	4606      	mov	r6, r0
 801d344:	4611      	mov	r1, r2
 801d346:	4620      	mov	r0, r4
 801d348:	4690      	mov	r8, r2
 801d34a:	f7ff ffdb 	bl	801d304 <__mcmp>
 801d34e:	1e05      	subs	r5, r0, #0
 801d350:	d110      	bne.n	801d374 <__mdiff+0x38>
 801d352:	4629      	mov	r1, r5
 801d354:	4630      	mov	r0, r6
 801d356:	f7ff fd0f 	bl	801cd78 <_Balloc>
 801d35a:	b930      	cbnz	r0, 801d36a <__mdiff+0x2e>
 801d35c:	4b3a      	ldr	r3, [pc, #232]	; (801d448 <__mdiff+0x10c>)
 801d35e:	4602      	mov	r2, r0
 801d360:	f240 2137 	movw	r1, #567	; 0x237
 801d364:	4839      	ldr	r0, [pc, #228]	; (801d44c <__mdiff+0x110>)
 801d366:	f7fe fab9 	bl	801b8dc <__assert_func>
 801d36a:	2301      	movs	r3, #1
 801d36c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d374:	bfa4      	itt	ge
 801d376:	4643      	movge	r3, r8
 801d378:	46a0      	movge	r8, r4
 801d37a:	4630      	mov	r0, r6
 801d37c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d380:	bfa6      	itte	ge
 801d382:	461c      	movge	r4, r3
 801d384:	2500      	movge	r5, #0
 801d386:	2501      	movlt	r5, #1
 801d388:	f7ff fcf6 	bl	801cd78 <_Balloc>
 801d38c:	b920      	cbnz	r0, 801d398 <__mdiff+0x5c>
 801d38e:	4b2e      	ldr	r3, [pc, #184]	; (801d448 <__mdiff+0x10c>)
 801d390:	4602      	mov	r2, r0
 801d392:	f240 2145 	movw	r1, #581	; 0x245
 801d396:	e7e5      	b.n	801d364 <__mdiff+0x28>
 801d398:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d39c:	6926      	ldr	r6, [r4, #16]
 801d39e:	60c5      	str	r5, [r0, #12]
 801d3a0:	f104 0914 	add.w	r9, r4, #20
 801d3a4:	f108 0514 	add.w	r5, r8, #20
 801d3a8:	f100 0e14 	add.w	lr, r0, #20
 801d3ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d3b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d3b4:	f108 0210 	add.w	r2, r8, #16
 801d3b8:	46f2      	mov	sl, lr
 801d3ba:	2100      	movs	r1, #0
 801d3bc:	f859 3b04 	ldr.w	r3, [r9], #4
 801d3c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d3c4:	fa11 f88b 	uxtah	r8, r1, fp
 801d3c8:	b299      	uxth	r1, r3
 801d3ca:	0c1b      	lsrs	r3, r3, #16
 801d3cc:	eba8 0801 	sub.w	r8, r8, r1
 801d3d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d3d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d3d8:	fa1f f888 	uxth.w	r8, r8
 801d3dc:	1419      	asrs	r1, r3, #16
 801d3de:	454e      	cmp	r6, r9
 801d3e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d3e4:	f84a 3b04 	str.w	r3, [sl], #4
 801d3e8:	d8e8      	bhi.n	801d3bc <__mdiff+0x80>
 801d3ea:	1b33      	subs	r3, r6, r4
 801d3ec:	3b15      	subs	r3, #21
 801d3ee:	f023 0303 	bic.w	r3, r3, #3
 801d3f2:	3304      	adds	r3, #4
 801d3f4:	3415      	adds	r4, #21
 801d3f6:	42a6      	cmp	r6, r4
 801d3f8:	bf38      	it	cc
 801d3fa:	2304      	movcc	r3, #4
 801d3fc:	441d      	add	r5, r3
 801d3fe:	4473      	add	r3, lr
 801d400:	469e      	mov	lr, r3
 801d402:	462e      	mov	r6, r5
 801d404:	4566      	cmp	r6, ip
 801d406:	d30e      	bcc.n	801d426 <__mdiff+0xea>
 801d408:	f10c 0203 	add.w	r2, ip, #3
 801d40c:	1b52      	subs	r2, r2, r5
 801d40e:	f022 0203 	bic.w	r2, r2, #3
 801d412:	3d03      	subs	r5, #3
 801d414:	45ac      	cmp	ip, r5
 801d416:	bf38      	it	cc
 801d418:	2200      	movcc	r2, #0
 801d41a:	4413      	add	r3, r2
 801d41c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d420:	b17a      	cbz	r2, 801d442 <__mdiff+0x106>
 801d422:	6107      	str	r7, [r0, #16]
 801d424:	e7a4      	b.n	801d370 <__mdiff+0x34>
 801d426:	f856 8b04 	ldr.w	r8, [r6], #4
 801d42a:	fa11 f288 	uxtah	r2, r1, r8
 801d42e:	1414      	asrs	r4, r2, #16
 801d430:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d434:	b292      	uxth	r2, r2
 801d436:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d43a:	f84e 2b04 	str.w	r2, [lr], #4
 801d43e:	1421      	asrs	r1, r4, #16
 801d440:	e7e0      	b.n	801d404 <__mdiff+0xc8>
 801d442:	3f01      	subs	r7, #1
 801d444:	e7ea      	b.n	801d41c <__mdiff+0xe0>
 801d446:	bf00      	nop
 801d448:	08022ed3 	.word	0x08022ed3
 801d44c:	08022f44 	.word	0x08022f44

0801d450 <__ulp>:
 801d450:	b082      	sub	sp, #8
 801d452:	ed8d 0b00 	vstr	d0, [sp]
 801d456:	9a01      	ldr	r2, [sp, #4]
 801d458:	4b0f      	ldr	r3, [pc, #60]	; (801d498 <__ulp+0x48>)
 801d45a:	4013      	ands	r3, r2
 801d45c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d460:	2b00      	cmp	r3, #0
 801d462:	dc08      	bgt.n	801d476 <__ulp+0x26>
 801d464:	425b      	negs	r3, r3
 801d466:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d46a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d46e:	da04      	bge.n	801d47a <__ulp+0x2a>
 801d470:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d474:	4113      	asrs	r3, r2
 801d476:	2200      	movs	r2, #0
 801d478:	e008      	b.n	801d48c <__ulp+0x3c>
 801d47a:	f1a2 0314 	sub.w	r3, r2, #20
 801d47e:	2b1e      	cmp	r3, #30
 801d480:	bfda      	itte	le
 801d482:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d486:	40da      	lsrle	r2, r3
 801d488:	2201      	movgt	r2, #1
 801d48a:	2300      	movs	r3, #0
 801d48c:	4619      	mov	r1, r3
 801d48e:	4610      	mov	r0, r2
 801d490:	ec41 0b10 	vmov	d0, r0, r1
 801d494:	b002      	add	sp, #8
 801d496:	4770      	bx	lr
 801d498:	7ff00000 	.word	0x7ff00000

0801d49c <__b2d>:
 801d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4a0:	6906      	ldr	r6, [r0, #16]
 801d4a2:	f100 0814 	add.w	r8, r0, #20
 801d4a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d4aa:	1f37      	subs	r7, r6, #4
 801d4ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d4b0:	4610      	mov	r0, r2
 801d4b2:	f7ff fd53 	bl	801cf5c <__hi0bits>
 801d4b6:	f1c0 0320 	rsb	r3, r0, #32
 801d4ba:	280a      	cmp	r0, #10
 801d4bc:	600b      	str	r3, [r1, #0]
 801d4be:	491b      	ldr	r1, [pc, #108]	; (801d52c <__b2d+0x90>)
 801d4c0:	dc15      	bgt.n	801d4ee <__b2d+0x52>
 801d4c2:	f1c0 0c0b 	rsb	ip, r0, #11
 801d4c6:	fa22 f30c 	lsr.w	r3, r2, ip
 801d4ca:	45b8      	cmp	r8, r7
 801d4cc:	ea43 0501 	orr.w	r5, r3, r1
 801d4d0:	bf34      	ite	cc
 801d4d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d4d6:	2300      	movcs	r3, #0
 801d4d8:	3015      	adds	r0, #21
 801d4da:	fa02 f000 	lsl.w	r0, r2, r0
 801d4de:	fa23 f30c 	lsr.w	r3, r3, ip
 801d4e2:	4303      	orrs	r3, r0
 801d4e4:	461c      	mov	r4, r3
 801d4e6:	ec45 4b10 	vmov	d0, r4, r5
 801d4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4ee:	45b8      	cmp	r8, r7
 801d4f0:	bf3a      	itte	cc
 801d4f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d4f6:	f1a6 0708 	subcc.w	r7, r6, #8
 801d4fa:	2300      	movcs	r3, #0
 801d4fc:	380b      	subs	r0, #11
 801d4fe:	d012      	beq.n	801d526 <__b2d+0x8a>
 801d500:	f1c0 0120 	rsb	r1, r0, #32
 801d504:	fa23 f401 	lsr.w	r4, r3, r1
 801d508:	4082      	lsls	r2, r0
 801d50a:	4322      	orrs	r2, r4
 801d50c:	4547      	cmp	r7, r8
 801d50e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d512:	bf8c      	ite	hi
 801d514:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d518:	2200      	movls	r2, #0
 801d51a:	4083      	lsls	r3, r0
 801d51c:	40ca      	lsrs	r2, r1
 801d51e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d522:	4313      	orrs	r3, r2
 801d524:	e7de      	b.n	801d4e4 <__b2d+0x48>
 801d526:	ea42 0501 	orr.w	r5, r2, r1
 801d52a:	e7db      	b.n	801d4e4 <__b2d+0x48>
 801d52c:	3ff00000 	.word	0x3ff00000

0801d530 <__d2b>:
 801d530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d534:	460f      	mov	r7, r1
 801d536:	2101      	movs	r1, #1
 801d538:	ec59 8b10 	vmov	r8, r9, d0
 801d53c:	4616      	mov	r6, r2
 801d53e:	f7ff fc1b 	bl	801cd78 <_Balloc>
 801d542:	4604      	mov	r4, r0
 801d544:	b930      	cbnz	r0, 801d554 <__d2b+0x24>
 801d546:	4602      	mov	r2, r0
 801d548:	4b24      	ldr	r3, [pc, #144]	; (801d5dc <__d2b+0xac>)
 801d54a:	4825      	ldr	r0, [pc, #148]	; (801d5e0 <__d2b+0xb0>)
 801d54c:	f240 310f 	movw	r1, #783	; 0x30f
 801d550:	f7fe f9c4 	bl	801b8dc <__assert_func>
 801d554:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d55c:	bb2d      	cbnz	r5, 801d5aa <__d2b+0x7a>
 801d55e:	9301      	str	r3, [sp, #4]
 801d560:	f1b8 0300 	subs.w	r3, r8, #0
 801d564:	d026      	beq.n	801d5b4 <__d2b+0x84>
 801d566:	4668      	mov	r0, sp
 801d568:	9300      	str	r3, [sp, #0]
 801d56a:	f7ff fd17 	bl	801cf9c <__lo0bits>
 801d56e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d572:	b1e8      	cbz	r0, 801d5b0 <__d2b+0x80>
 801d574:	f1c0 0320 	rsb	r3, r0, #32
 801d578:	fa02 f303 	lsl.w	r3, r2, r3
 801d57c:	430b      	orrs	r3, r1
 801d57e:	40c2      	lsrs	r2, r0
 801d580:	6163      	str	r3, [r4, #20]
 801d582:	9201      	str	r2, [sp, #4]
 801d584:	9b01      	ldr	r3, [sp, #4]
 801d586:	61a3      	str	r3, [r4, #24]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	bf14      	ite	ne
 801d58c:	2202      	movne	r2, #2
 801d58e:	2201      	moveq	r2, #1
 801d590:	6122      	str	r2, [r4, #16]
 801d592:	b1bd      	cbz	r5, 801d5c4 <__d2b+0x94>
 801d594:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d598:	4405      	add	r5, r0
 801d59a:	603d      	str	r5, [r7, #0]
 801d59c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d5a0:	6030      	str	r0, [r6, #0]
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	b003      	add	sp, #12
 801d5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d5ae:	e7d6      	b.n	801d55e <__d2b+0x2e>
 801d5b0:	6161      	str	r1, [r4, #20]
 801d5b2:	e7e7      	b.n	801d584 <__d2b+0x54>
 801d5b4:	a801      	add	r0, sp, #4
 801d5b6:	f7ff fcf1 	bl	801cf9c <__lo0bits>
 801d5ba:	9b01      	ldr	r3, [sp, #4]
 801d5bc:	6163      	str	r3, [r4, #20]
 801d5be:	3020      	adds	r0, #32
 801d5c0:	2201      	movs	r2, #1
 801d5c2:	e7e5      	b.n	801d590 <__d2b+0x60>
 801d5c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d5c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d5cc:	6038      	str	r0, [r7, #0]
 801d5ce:	6918      	ldr	r0, [r3, #16]
 801d5d0:	f7ff fcc4 	bl	801cf5c <__hi0bits>
 801d5d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d5d8:	e7e2      	b.n	801d5a0 <__d2b+0x70>
 801d5da:	bf00      	nop
 801d5dc:	08022ed3 	.word	0x08022ed3
 801d5e0:	08022f44 	.word	0x08022f44

0801d5e4 <__ratio>:
 801d5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e8:	4688      	mov	r8, r1
 801d5ea:	4669      	mov	r1, sp
 801d5ec:	4681      	mov	r9, r0
 801d5ee:	f7ff ff55 	bl	801d49c <__b2d>
 801d5f2:	a901      	add	r1, sp, #4
 801d5f4:	4640      	mov	r0, r8
 801d5f6:	ec55 4b10 	vmov	r4, r5, d0
 801d5fa:	f7ff ff4f 	bl	801d49c <__b2d>
 801d5fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d602:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d606:	eba3 0c02 	sub.w	ip, r3, r2
 801d60a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d60e:	1a9b      	subs	r3, r3, r2
 801d610:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d614:	ec51 0b10 	vmov	r0, r1, d0
 801d618:	2b00      	cmp	r3, #0
 801d61a:	bfd6      	itet	le
 801d61c:	460a      	movle	r2, r1
 801d61e:	462a      	movgt	r2, r5
 801d620:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d624:	468b      	mov	fp, r1
 801d626:	462f      	mov	r7, r5
 801d628:	bfd4      	ite	le
 801d62a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d62e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d632:	4620      	mov	r0, r4
 801d634:	ee10 2a10 	vmov	r2, s0
 801d638:	465b      	mov	r3, fp
 801d63a:	4639      	mov	r1, r7
 801d63c:	f7e3 f92e 	bl	800089c <__aeabi_ddiv>
 801d640:	ec41 0b10 	vmov	d0, r0, r1
 801d644:	b003      	add	sp, #12
 801d646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d64a <__copybits>:
 801d64a:	3901      	subs	r1, #1
 801d64c:	b570      	push	{r4, r5, r6, lr}
 801d64e:	1149      	asrs	r1, r1, #5
 801d650:	6914      	ldr	r4, [r2, #16]
 801d652:	3101      	adds	r1, #1
 801d654:	f102 0314 	add.w	r3, r2, #20
 801d658:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d65c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d660:	1f05      	subs	r5, r0, #4
 801d662:	42a3      	cmp	r3, r4
 801d664:	d30c      	bcc.n	801d680 <__copybits+0x36>
 801d666:	1aa3      	subs	r3, r4, r2
 801d668:	3b11      	subs	r3, #17
 801d66a:	f023 0303 	bic.w	r3, r3, #3
 801d66e:	3211      	adds	r2, #17
 801d670:	42a2      	cmp	r2, r4
 801d672:	bf88      	it	hi
 801d674:	2300      	movhi	r3, #0
 801d676:	4418      	add	r0, r3
 801d678:	2300      	movs	r3, #0
 801d67a:	4288      	cmp	r0, r1
 801d67c:	d305      	bcc.n	801d68a <__copybits+0x40>
 801d67e:	bd70      	pop	{r4, r5, r6, pc}
 801d680:	f853 6b04 	ldr.w	r6, [r3], #4
 801d684:	f845 6f04 	str.w	r6, [r5, #4]!
 801d688:	e7eb      	b.n	801d662 <__copybits+0x18>
 801d68a:	f840 3b04 	str.w	r3, [r0], #4
 801d68e:	e7f4      	b.n	801d67a <__copybits+0x30>

0801d690 <__any_on>:
 801d690:	f100 0214 	add.w	r2, r0, #20
 801d694:	6900      	ldr	r0, [r0, #16]
 801d696:	114b      	asrs	r3, r1, #5
 801d698:	4298      	cmp	r0, r3
 801d69a:	b510      	push	{r4, lr}
 801d69c:	db11      	blt.n	801d6c2 <__any_on+0x32>
 801d69e:	dd0a      	ble.n	801d6b6 <__any_on+0x26>
 801d6a0:	f011 011f 	ands.w	r1, r1, #31
 801d6a4:	d007      	beq.n	801d6b6 <__any_on+0x26>
 801d6a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d6aa:	fa24 f001 	lsr.w	r0, r4, r1
 801d6ae:	fa00 f101 	lsl.w	r1, r0, r1
 801d6b2:	428c      	cmp	r4, r1
 801d6b4:	d10b      	bne.n	801d6ce <__any_on+0x3e>
 801d6b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d6ba:	4293      	cmp	r3, r2
 801d6bc:	d803      	bhi.n	801d6c6 <__any_on+0x36>
 801d6be:	2000      	movs	r0, #0
 801d6c0:	bd10      	pop	{r4, pc}
 801d6c2:	4603      	mov	r3, r0
 801d6c4:	e7f7      	b.n	801d6b6 <__any_on+0x26>
 801d6c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d6ca:	2900      	cmp	r1, #0
 801d6cc:	d0f5      	beq.n	801d6ba <__any_on+0x2a>
 801d6ce:	2001      	movs	r0, #1
 801d6d0:	e7f6      	b.n	801d6c0 <__any_on+0x30>

0801d6d2 <_malloc_usable_size_r>:
 801d6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d6d6:	1f18      	subs	r0, r3, #4
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	bfbc      	itt	lt
 801d6dc:	580b      	ldrlt	r3, [r1, r0]
 801d6de:	18c0      	addlt	r0, r0, r3
 801d6e0:	4770      	bx	lr
	...

0801d6e4 <_strtol_l.constprop.0>:
 801d6e4:	2b01      	cmp	r3, #1
 801d6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6ea:	d001      	beq.n	801d6f0 <_strtol_l.constprop.0+0xc>
 801d6ec:	2b24      	cmp	r3, #36	; 0x24
 801d6ee:	d906      	bls.n	801d6fe <_strtol_l.constprop.0+0x1a>
 801d6f0:	f7fe f8a0 	bl	801b834 <__errno>
 801d6f4:	2316      	movs	r3, #22
 801d6f6:	6003      	str	r3, [r0, #0]
 801d6f8:	2000      	movs	r0, #0
 801d6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d7e4 <_strtol_l.constprop.0+0x100>
 801d702:	460d      	mov	r5, r1
 801d704:	462e      	mov	r6, r5
 801d706:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d70a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801d70e:	f017 0708 	ands.w	r7, r7, #8
 801d712:	d1f7      	bne.n	801d704 <_strtol_l.constprop.0+0x20>
 801d714:	2c2d      	cmp	r4, #45	; 0x2d
 801d716:	d132      	bne.n	801d77e <_strtol_l.constprop.0+0x9a>
 801d718:	782c      	ldrb	r4, [r5, #0]
 801d71a:	2701      	movs	r7, #1
 801d71c:	1cb5      	adds	r5, r6, #2
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d05b      	beq.n	801d7da <_strtol_l.constprop.0+0xf6>
 801d722:	2b10      	cmp	r3, #16
 801d724:	d109      	bne.n	801d73a <_strtol_l.constprop.0+0x56>
 801d726:	2c30      	cmp	r4, #48	; 0x30
 801d728:	d107      	bne.n	801d73a <_strtol_l.constprop.0+0x56>
 801d72a:	782c      	ldrb	r4, [r5, #0]
 801d72c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d730:	2c58      	cmp	r4, #88	; 0x58
 801d732:	d14d      	bne.n	801d7d0 <_strtol_l.constprop.0+0xec>
 801d734:	786c      	ldrb	r4, [r5, #1]
 801d736:	2310      	movs	r3, #16
 801d738:	3502      	adds	r5, #2
 801d73a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d73e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801d742:	f04f 0e00 	mov.w	lr, #0
 801d746:	fbb8 f9f3 	udiv	r9, r8, r3
 801d74a:	4676      	mov	r6, lr
 801d74c:	fb03 8a19 	mls	sl, r3, r9, r8
 801d750:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d754:	f1bc 0f09 	cmp.w	ip, #9
 801d758:	d816      	bhi.n	801d788 <_strtol_l.constprop.0+0xa4>
 801d75a:	4664      	mov	r4, ip
 801d75c:	42a3      	cmp	r3, r4
 801d75e:	dd24      	ble.n	801d7aa <_strtol_l.constprop.0+0xc6>
 801d760:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801d764:	d008      	beq.n	801d778 <_strtol_l.constprop.0+0x94>
 801d766:	45b1      	cmp	r9, r6
 801d768:	d31c      	bcc.n	801d7a4 <_strtol_l.constprop.0+0xc0>
 801d76a:	d101      	bne.n	801d770 <_strtol_l.constprop.0+0x8c>
 801d76c:	45a2      	cmp	sl, r4
 801d76e:	db19      	blt.n	801d7a4 <_strtol_l.constprop.0+0xc0>
 801d770:	fb06 4603 	mla	r6, r6, r3, r4
 801d774:	f04f 0e01 	mov.w	lr, #1
 801d778:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d77c:	e7e8      	b.n	801d750 <_strtol_l.constprop.0+0x6c>
 801d77e:	2c2b      	cmp	r4, #43	; 0x2b
 801d780:	bf04      	itt	eq
 801d782:	782c      	ldrbeq	r4, [r5, #0]
 801d784:	1cb5      	addeq	r5, r6, #2
 801d786:	e7ca      	b.n	801d71e <_strtol_l.constprop.0+0x3a>
 801d788:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d78c:	f1bc 0f19 	cmp.w	ip, #25
 801d790:	d801      	bhi.n	801d796 <_strtol_l.constprop.0+0xb2>
 801d792:	3c37      	subs	r4, #55	; 0x37
 801d794:	e7e2      	b.n	801d75c <_strtol_l.constprop.0+0x78>
 801d796:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d79a:	f1bc 0f19 	cmp.w	ip, #25
 801d79e:	d804      	bhi.n	801d7aa <_strtol_l.constprop.0+0xc6>
 801d7a0:	3c57      	subs	r4, #87	; 0x57
 801d7a2:	e7db      	b.n	801d75c <_strtol_l.constprop.0+0x78>
 801d7a4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801d7a8:	e7e6      	b.n	801d778 <_strtol_l.constprop.0+0x94>
 801d7aa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801d7ae:	d105      	bne.n	801d7bc <_strtol_l.constprop.0+0xd8>
 801d7b0:	2322      	movs	r3, #34	; 0x22
 801d7b2:	6003      	str	r3, [r0, #0]
 801d7b4:	4646      	mov	r6, r8
 801d7b6:	b942      	cbnz	r2, 801d7ca <_strtol_l.constprop.0+0xe6>
 801d7b8:	4630      	mov	r0, r6
 801d7ba:	e79e      	b.n	801d6fa <_strtol_l.constprop.0+0x16>
 801d7bc:	b107      	cbz	r7, 801d7c0 <_strtol_l.constprop.0+0xdc>
 801d7be:	4276      	negs	r6, r6
 801d7c0:	2a00      	cmp	r2, #0
 801d7c2:	d0f9      	beq.n	801d7b8 <_strtol_l.constprop.0+0xd4>
 801d7c4:	f1be 0f00 	cmp.w	lr, #0
 801d7c8:	d000      	beq.n	801d7cc <_strtol_l.constprop.0+0xe8>
 801d7ca:	1e69      	subs	r1, r5, #1
 801d7cc:	6011      	str	r1, [r2, #0]
 801d7ce:	e7f3      	b.n	801d7b8 <_strtol_l.constprop.0+0xd4>
 801d7d0:	2430      	movs	r4, #48	; 0x30
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d1b1      	bne.n	801d73a <_strtol_l.constprop.0+0x56>
 801d7d6:	2308      	movs	r3, #8
 801d7d8:	e7af      	b.n	801d73a <_strtol_l.constprop.0+0x56>
 801d7da:	2c30      	cmp	r4, #48	; 0x30
 801d7dc:	d0a5      	beq.n	801d72a <_strtol_l.constprop.0+0x46>
 801d7de:	230a      	movs	r3, #10
 801d7e0:	e7ab      	b.n	801d73a <_strtol_l.constprop.0+0x56>
 801d7e2:	bf00      	nop
 801d7e4:	08022cf1 	.word	0x08022cf1

0801d7e8 <_strtol_r>:
 801d7e8:	f7ff bf7c 	b.w	801d6e4 <_strtol_l.constprop.0>

0801d7ec <__ascii_wctomb>:
 801d7ec:	b149      	cbz	r1, 801d802 <__ascii_wctomb+0x16>
 801d7ee:	2aff      	cmp	r2, #255	; 0xff
 801d7f0:	bf85      	ittet	hi
 801d7f2:	238a      	movhi	r3, #138	; 0x8a
 801d7f4:	6003      	strhi	r3, [r0, #0]
 801d7f6:	700a      	strbls	r2, [r1, #0]
 801d7f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d7fc:	bf98      	it	ls
 801d7fe:	2001      	movls	r0, #1
 801d800:	4770      	bx	lr
 801d802:	4608      	mov	r0, r1
 801d804:	4770      	bx	lr

0801d806 <__ssputs_r>:
 801d806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d80a:	688e      	ldr	r6, [r1, #8]
 801d80c:	461f      	mov	r7, r3
 801d80e:	42be      	cmp	r6, r7
 801d810:	680b      	ldr	r3, [r1, #0]
 801d812:	4682      	mov	sl, r0
 801d814:	460c      	mov	r4, r1
 801d816:	4690      	mov	r8, r2
 801d818:	d82c      	bhi.n	801d874 <__ssputs_r+0x6e>
 801d81a:	898a      	ldrh	r2, [r1, #12]
 801d81c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d820:	d026      	beq.n	801d870 <__ssputs_r+0x6a>
 801d822:	6965      	ldr	r5, [r4, #20]
 801d824:	6909      	ldr	r1, [r1, #16]
 801d826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d82a:	eba3 0901 	sub.w	r9, r3, r1
 801d82e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d832:	1c7b      	adds	r3, r7, #1
 801d834:	444b      	add	r3, r9
 801d836:	106d      	asrs	r5, r5, #1
 801d838:	429d      	cmp	r5, r3
 801d83a:	bf38      	it	cc
 801d83c:	461d      	movcc	r5, r3
 801d83e:	0553      	lsls	r3, r2, #21
 801d840:	d527      	bpl.n	801d892 <__ssputs_r+0x8c>
 801d842:	4629      	mov	r1, r5
 801d844:	f7fb ff4a 	bl	80196dc <_malloc_r>
 801d848:	4606      	mov	r6, r0
 801d84a:	b360      	cbz	r0, 801d8a6 <__ssputs_r+0xa0>
 801d84c:	6921      	ldr	r1, [r4, #16]
 801d84e:	464a      	mov	r2, r9
 801d850:	f7fe f825 	bl	801b89e <memcpy>
 801d854:	89a3      	ldrh	r3, [r4, #12]
 801d856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d85a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d85e:	81a3      	strh	r3, [r4, #12]
 801d860:	6126      	str	r6, [r4, #16]
 801d862:	6165      	str	r5, [r4, #20]
 801d864:	444e      	add	r6, r9
 801d866:	eba5 0509 	sub.w	r5, r5, r9
 801d86a:	6026      	str	r6, [r4, #0]
 801d86c:	60a5      	str	r5, [r4, #8]
 801d86e:	463e      	mov	r6, r7
 801d870:	42be      	cmp	r6, r7
 801d872:	d900      	bls.n	801d876 <__ssputs_r+0x70>
 801d874:	463e      	mov	r6, r7
 801d876:	6820      	ldr	r0, [r4, #0]
 801d878:	4632      	mov	r2, r6
 801d87a:	4641      	mov	r1, r8
 801d87c:	f7fd ff3e 	bl	801b6fc <memmove>
 801d880:	68a3      	ldr	r3, [r4, #8]
 801d882:	1b9b      	subs	r3, r3, r6
 801d884:	60a3      	str	r3, [r4, #8]
 801d886:	6823      	ldr	r3, [r4, #0]
 801d888:	4433      	add	r3, r6
 801d88a:	6023      	str	r3, [r4, #0]
 801d88c:	2000      	movs	r0, #0
 801d88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d892:	462a      	mov	r2, r5
 801d894:	f7fb ffec 	bl	8019870 <_realloc_r>
 801d898:	4606      	mov	r6, r0
 801d89a:	2800      	cmp	r0, #0
 801d89c:	d1e0      	bne.n	801d860 <__ssputs_r+0x5a>
 801d89e:	6921      	ldr	r1, [r4, #16]
 801d8a0:	4650      	mov	r0, sl
 801d8a2:	f7fe feb3 	bl	801c60c <_free_r>
 801d8a6:	230c      	movs	r3, #12
 801d8a8:	f8ca 3000 	str.w	r3, [sl]
 801d8ac:	89a3      	ldrh	r3, [r4, #12]
 801d8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8b2:	81a3      	strh	r3, [r4, #12]
 801d8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8b8:	e7e9      	b.n	801d88e <__ssputs_r+0x88>
	...

0801d8bc <_svfiprintf_r>:
 801d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c0:	4698      	mov	r8, r3
 801d8c2:	898b      	ldrh	r3, [r1, #12]
 801d8c4:	061b      	lsls	r3, r3, #24
 801d8c6:	b09d      	sub	sp, #116	; 0x74
 801d8c8:	4607      	mov	r7, r0
 801d8ca:	460d      	mov	r5, r1
 801d8cc:	4614      	mov	r4, r2
 801d8ce:	d50e      	bpl.n	801d8ee <_svfiprintf_r+0x32>
 801d8d0:	690b      	ldr	r3, [r1, #16]
 801d8d2:	b963      	cbnz	r3, 801d8ee <_svfiprintf_r+0x32>
 801d8d4:	2140      	movs	r1, #64	; 0x40
 801d8d6:	f7fb ff01 	bl	80196dc <_malloc_r>
 801d8da:	6028      	str	r0, [r5, #0]
 801d8dc:	6128      	str	r0, [r5, #16]
 801d8de:	b920      	cbnz	r0, 801d8ea <_svfiprintf_r+0x2e>
 801d8e0:	230c      	movs	r3, #12
 801d8e2:	603b      	str	r3, [r7, #0]
 801d8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8e8:	e0d0      	b.n	801da8c <_svfiprintf_r+0x1d0>
 801d8ea:	2340      	movs	r3, #64	; 0x40
 801d8ec:	616b      	str	r3, [r5, #20]
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	9309      	str	r3, [sp, #36]	; 0x24
 801d8f2:	2320      	movs	r3, #32
 801d8f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d8f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8fc:	2330      	movs	r3, #48	; 0x30
 801d8fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801daa4 <_svfiprintf_r+0x1e8>
 801d902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d906:	f04f 0901 	mov.w	r9, #1
 801d90a:	4623      	mov	r3, r4
 801d90c:	469a      	mov	sl, r3
 801d90e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d912:	b10a      	cbz	r2, 801d918 <_svfiprintf_r+0x5c>
 801d914:	2a25      	cmp	r2, #37	; 0x25
 801d916:	d1f9      	bne.n	801d90c <_svfiprintf_r+0x50>
 801d918:	ebba 0b04 	subs.w	fp, sl, r4
 801d91c:	d00b      	beq.n	801d936 <_svfiprintf_r+0x7a>
 801d91e:	465b      	mov	r3, fp
 801d920:	4622      	mov	r2, r4
 801d922:	4629      	mov	r1, r5
 801d924:	4638      	mov	r0, r7
 801d926:	f7ff ff6e 	bl	801d806 <__ssputs_r>
 801d92a:	3001      	adds	r0, #1
 801d92c:	f000 80a9 	beq.w	801da82 <_svfiprintf_r+0x1c6>
 801d930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d932:	445a      	add	r2, fp
 801d934:	9209      	str	r2, [sp, #36]	; 0x24
 801d936:	f89a 3000 	ldrb.w	r3, [sl]
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	f000 80a1 	beq.w	801da82 <_svfiprintf_r+0x1c6>
 801d940:	2300      	movs	r3, #0
 801d942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d94a:	f10a 0a01 	add.w	sl, sl, #1
 801d94e:	9304      	str	r3, [sp, #16]
 801d950:	9307      	str	r3, [sp, #28]
 801d952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d956:	931a      	str	r3, [sp, #104]	; 0x68
 801d958:	4654      	mov	r4, sl
 801d95a:	2205      	movs	r2, #5
 801d95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d960:	4850      	ldr	r0, [pc, #320]	; (801daa4 <_svfiprintf_r+0x1e8>)
 801d962:	f7e2 fc5d 	bl	8000220 <memchr>
 801d966:	9a04      	ldr	r2, [sp, #16]
 801d968:	b9d8      	cbnz	r0, 801d9a2 <_svfiprintf_r+0xe6>
 801d96a:	06d0      	lsls	r0, r2, #27
 801d96c:	bf44      	itt	mi
 801d96e:	2320      	movmi	r3, #32
 801d970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d974:	0711      	lsls	r1, r2, #28
 801d976:	bf44      	itt	mi
 801d978:	232b      	movmi	r3, #43	; 0x2b
 801d97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d97e:	f89a 3000 	ldrb.w	r3, [sl]
 801d982:	2b2a      	cmp	r3, #42	; 0x2a
 801d984:	d015      	beq.n	801d9b2 <_svfiprintf_r+0xf6>
 801d986:	9a07      	ldr	r2, [sp, #28]
 801d988:	4654      	mov	r4, sl
 801d98a:	2000      	movs	r0, #0
 801d98c:	f04f 0c0a 	mov.w	ip, #10
 801d990:	4621      	mov	r1, r4
 801d992:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d996:	3b30      	subs	r3, #48	; 0x30
 801d998:	2b09      	cmp	r3, #9
 801d99a:	d94d      	bls.n	801da38 <_svfiprintf_r+0x17c>
 801d99c:	b1b0      	cbz	r0, 801d9cc <_svfiprintf_r+0x110>
 801d99e:	9207      	str	r2, [sp, #28]
 801d9a0:	e014      	b.n	801d9cc <_svfiprintf_r+0x110>
 801d9a2:	eba0 0308 	sub.w	r3, r0, r8
 801d9a6:	fa09 f303 	lsl.w	r3, r9, r3
 801d9aa:	4313      	orrs	r3, r2
 801d9ac:	9304      	str	r3, [sp, #16]
 801d9ae:	46a2      	mov	sl, r4
 801d9b0:	e7d2      	b.n	801d958 <_svfiprintf_r+0x9c>
 801d9b2:	9b03      	ldr	r3, [sp, #12]
 801d9b4:	1d19      	adds	r1, r3, #4
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	9103      	str	r1, [sp, #12]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	bfbb      	ittet	lt
 801d9be:	425b      	neglt	r3, r3
 801d9c0:	f042 0202 	orrlt.w	r2, r2, #2
 801d9c4:	9307      	strge	r3, [sp, #28]
 801d9c6:	9307      	strlt	r3, [sp, #28]
 801d9c8:	bfb8      	it	lt
 801d9ca:	9204      	strlt	r2, [sp, #16]
 801d9cc:	7823      	ldrb	r3, [r4, #0]
 801d9ce:	2b2e      	cmp	r3, #46	; 0x2e
 801d9d0:	d10c      	bne.n	801d9ec <_svfiprintf_r+0x130>
 801d9d2:	7863      	ldrb	r3, [r4, #1]
 801d9d4:	2b2a      	cmp	r3, #42	; 0x2a
 801d9d6:	d134      	bne.n	801da42 <_svfiprintf_r+0x186>
 801d9d8:	9b03      	ldr	r3, [sp, #12]
 801d9da:	1d1a      	adds	r2, r3, #4
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	9203      	str	r2, [sp, #12]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	bfb8      	it	lt
 801d9e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d9e8:	3402      	adds	r4, #2
 801d9ea:	9305      	str	r3, [sp, #20]
 801d9ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801dab4 <_svfiprintf_r+0x1f8>
 801d9f0:	7821      	ldrb	r1, [r4, #0]
 801d9f2:	2203      	movs	r2, #3
 801d9f4:	4650      	mov	r0, sl
 801d9f6:	f7e2 fc13 	bl	8000220 <memchr>
 801d9fa:	b138      	cbz	r0, 801da0c <_svfiprintf_r+0x150>
 801d9fc:	9b04      	ldr	r3, [sp, #16]
 801d9fe:	eba0 000a 	sub.w	r0, r0, sl
 801da02:	2240      	movs	r2, #64	; 0x40
 801da04:	4082      	lsls	r2, r0
 801da06:	4313      	orrs	r3, r2
 801da08:	3401      	adds	r4, #1
 801da0a:	9304      	str	r3, [sp, #16]
 801da0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da10:	4825      	ldr	r0, [pc, #148]	; (801daa8 <_svfiprintf_r+0x1ec>)
 801da12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da16:	2206      	movs	r2, #6
 801da18:	f7e2 fc02 	bl	8000220 <memchr>
 801da1c:	2800      	cmp	r0, #0
 801da1e:	d038      	beq.n	801da92 <_svfiprintf_r+0x1d6>
 801da20:	4b22      	ldr	r3, [pc, #136]	; (801daac <_svfiprintf_r+0x1f0>)
 801da22:	bb1b      	cbnz	r3, 801da6c <_svfiprintf_r+0x1b0>
 801da24:	9b03      	ldr	r3, [sp, #12]
 801da26:	3307      	adds	r3, #7
 801da28:	f023 0307 	bic.w	r3, r3, #7
 801da2c:	3308      	adds	r3, #8
 801da2e:	9303      	str	r3, [sp, #12]
 801da30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da32:	4433      	add	r3, r6
 801da34:	9309      	str	r3, [sp, #36]	; 0x24
 801da36:	e768      	b.n	801d90a <_svfiprintf_r+0x4e>
 801da38:	fb0c 3202 	mla	r2, ip, r2, r3
 801da3c:	460c      	mov	r4, r1
 801da3e:	2001      	movs	r0, #1
 801da40:	e7a6      	b.n	801d990 <_svfiprintf_r+0xd4>
 801da42:	2300      	movs	r3, #0
 801da44:	3401      	adds	r4, #1
 801da46:	9305      	str	r3, [sp, #20]
 801da48:	4619      	mov	r1, r3
 801da4a:	f04f 0c0a 	mov.w	ip, #10
 801da4e:	4620      	mov	r0, r4
 801da50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da54:	3a30      	subs	r2, #48	; 0x30
 801da56:	2a09      	cmp	r2, #9
 801da58:	d903      	bls.n	801da62 <_svfiprintf_r+0x1a6>
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d0c6      	beq.n	801d9ec <_svfiprintf_r+0x130>
 801da5e:	9105      	str	r1, [sp, #20]
 801da60:	e7c4      	b.n	801d9ec <_svfiprintf_r+0x130>
 801da62:	fb0c 2101 	mla	r1, ip, r1, r2
 801da66:	4604      	mov	r4, r0
 801da68:	2301      	movs	r3, #1
 801da6a:	e7f0      	b.n	801da4e <_svfiprintf_r+0x192>
 801da6c:	ab03      	add	r3, sp, #12
 801da6e:	9300      	str	r3, [sp, #0]
 801da70:	462a      	mov	r2, r5
 801da72:	4b0f      	ldr	r3, [pc, #60]	; (801dab0 <_svfiprintf_r+0x1f4>)
 801da74:	a904      	add	r1, sp, #16
 801da76:	4638      	mov	r0, r7
 801da78:	f7fc fde8 	bl	801a64c <_printf_float>
 801da7c:	1c42      	adds	r2, r0, #1
 801da7e:	4606      	mov	r6, r0
 801da80:	d1d6      	bne.n	801da30 <_svfiprintf_r+0x174>
 801da82:	89ab      	ldrh	r3, [r5, #12]
 801da84:	065b      	lsls	r3, r3, #25
 801da86:	f53f af2d 	bmi.w	801d8e4 <_svfiprintf_r+0x28>
 801da8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da8c:	b01d      	add	sp, #116	; 0x74
 801da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da92:	ab03      	add	r3, sp, #12
 801da94:	9300      	str	r3, [sp, #0]
 801da96:	462a      	mov	r2, r5
 801da98:	4b05      	ldr	r3, [pc, #20]	; (801dab0 <_svfiprintf_r+0x1f4>)
 801da9a:	a904      	add	r1, sp, #16
 801da9c:	4638      	mov	r0, r7
 801da9e:	f7fd f879 	bl	801ab94 <_printf_i>
 801daa2:	e7eb      	b.n	801da7c <_svfiprintf_r+0x1c0>
 801daa4:	0802309c 	.word	0x0802309c
 801daa8:	080230a6 	.word	0x080230a6
 801daac:	0801a64d 	.word	0x0801a64d
 801dab0:	0801d807 	.word	0x0801d807
 801dab4:	080230a2 	.word	0x080230a2

0801dab8 <__sfputc_r>:
 801dab8:	6893      	ldr	r3, [r2, #8]
 801daba:	3b01      	subs	r3, #1
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	b410      	push	{r4}
 801dac0:	6093      	str	r3, [r2, #8]
 801dac2:	da08      	bge.n	801dad6 <__sfputc_r+0x1e>
 801dac4:	6994      	ldr	r4, [r2, #24]
 801dac6:	42a3      	cmp	r3, r4
 801dac8:	db01      	blt.n	801dace <__sfputc_r+0x16>
 801daca:	290a      	cmp	r1, #10
 801dacc:	d103      	bne.n	801dad6 <__sfputc_r+0x1e>
 801dace:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dad2:	f7fd bd7e 	b.w	801b5d2 <__swbuf_r>
 801dad6:	6813      	ldr	r3, [r2, #0]
 801dad8:	1c58      	adds	r0, r3, #1
 801dada:	6010      	str	r0, [r2, #0]
 801dadc:	7019      	strb	r1, [r3, #0]
 801dade:	4608      	mov	r0, r1
 801dae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dae4:	4770      	bx	lr

0801dae6 <__sfputs_r>:
 801dae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dae8:	4606      	mov	r6, r0
 801daea:	460f      	mov	r7, r1
 801daec:	4614      	mov	r4, r2
 801daee:	18d5      	adds	r5, r2, r3
 801daf0:	42ac      	cmp	r4, r5
 801daf2:	d101      	bne.n	801daf8 <__sfputs_r+0x12>
 801daf4:	2000      	movs	r0, #0
 801daf6:	e007      	b.n	801db08 <__sfputs_r+0x22>
 801daf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dafc:	463a      	mov	r2, r7
 801dafe:	4630      	mov	r0, r6
 801db00:	f7ff ffda 	bl	801dab8 <__sfputc_r>
 801db04:	1c43      	adds	r3, r0, #1
 801db06:	d1f3      	bne.n	801daf0 <__sfputs_r+0xa>
 801db08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db0c <_vfiprintf_r>:
 801db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db10:	460d      	mov	r5, r1
 801db12:	b09d      	sub	sp, #116	; 0x74
 801db14:	4614      	mov	r4, r2
 801db16:	4698      	mov	r8, r3
 801db18:	4606      	mov	r6, r0
 801db1a:	b118      	cbz	r0, 801db24 <_vfiprintf_r+0x18>
 801db1c:	6a03      	ldr	r3, [r0, #32]
 801db1e:	b90b      	cbnz	r3, 801db24 <_vfiprintf_r+0x18>
 801db20:	f7fd fca4 	bl	801b46c <__sinit>
 801db24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db26:	07d9      	lsls	r1, r3, #31
 801db28:	d405      	bmi.n	801db36 <_vfiprintf_r+0x2a>
 801db2a:	89ab      	ldrh	r3, [r5, #12]
 801db2c:	059a      	lsls	r2, r3, #22
 801db2e:	d402      	bmi.n	801db36 <_vfiprintf_r+0x2a>
 801db30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db32:	f7fd feaa 	bl	801b88a <__retarget_lock_acquire_recursive>
 801db36:	89ab      	ldrh	r3, [r5, #12]
 801db38:	071b      	lsls	r3, r3, #28
 801db3a:	d501      	bpl.n	801db40 <_vfiprintf_r+0x34>
 801db3c:	692b      	ldr	r3, [r5, #16]
 801db3e:	b99b      	cbnz	r3, 801db68 <_vfiprintf_r+0x5c>
 801db40:	4629      	mov	r1, r5
 801db42:	4630      	mov	r0, r6
 801db44:	f7fd fd82 	bl	801b64c <__swsetup_r>
 801db48:	b170      	cbz	r0, 801db68 <_vfiprintf_r+0x5c>
 801db4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db4c:	07dc      	lsls	r4, r3, #31
 801db4e:	d504      	bpl.n	801db5a <_vfiprintf_r+0x4e>
 801db50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db54:	b01d      	add	sp, #116	; 0x74
 801db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db5a:	89ab      	ldrh	r3, [r5, #12]
 801db5c:	0598      	lsls	r0, r3, #22
 801db5e:	d4f7      	bmi.n	801db50 <_vfiprintf_r+0x44>
 801db60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db62:	f7fd fe93 	bl	801b88c <__retarget_lock_release_recursive>
 801db66:	e7f3      	b.n	801db50 <_vfiprintf_r+0x44>
 801db68:	2300      	movs	r3, #0
 801db6a:	9309      	str	r3, [sp, #36]	; 0x24
 801db6c:	2320      	movs	r3, #32
 801db6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db72:	f8cd 800c 	str.w	r8, [sp, #12]
 801db76:	2330      	movs	r3, #48	; 0x30
 801db78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801dd2c <_vfiprintf_r+0x220>
 801db7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db80:	f04f 0901 	mov.w	r9, #1
 801db84:	4623      	mov	r3, r4
 801db86:	469a      	mov	sl, r3
 801db88:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db8c:	b10a      	cbz	r2, 801db92 <_vfiprintf_r+0x86>
 801db8e:	2a25      	cmp	r2, #37	; 0x25
 801db90:	d1f9      	bne.n	801db86 <_vfiprintf_r+0x7a>
 801db92:	ebba 0b04 	subs.w	fp, sl, r4
 801db96:	d00b      	beq.n	801dbb0 <_vfiprintf_r+0xa4>
 801db98:	465b      	mov	r3, fp
 801db9a:	4622      	mov	r2, r4
 801db9c:	4629      	mov	r1, r5
 801db9e:	4630      	mov	r0, r6
 801dba0:	f7ff ffa1 	bl	801dae6 <__sfputs_r>
 801dba4:	3001      	adds	r0, #1
 801dba6:	f000 80a9 	beq.w	801dcfc <_vfiprintf_r+0x1f0>
 801dbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dbac:	445a      	add	r2, fp
 801dbae:	9209      	str	r2, [sp, #36]	; 0x24
 801dbb0:	f89a 3000 	ldrb.w	r3, [sl]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	f000 80a1 	beq.w	801dcfc <_vfiprintf_r+0x1f0>
 801dbba:	2300      	movs	r3, #0
 801dbbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbc4:	f10a 0a01 	add.w	sl, sl, #1
 801dbc8:	9304      	str	r3, [sp, #16]
 801dbca:	9307      	str	r3, [sp, #28]
 801dbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbd0:	931a      	str	r3, [sp, #104]	; 0x68
 801dbd2:	4654      	mov	r4, sl
 801dbd4:	2205      	movs	r2, #5
 801dbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbda:	4854      	ldr	r0, [pc, #336]	; (801dd2c <_vfiprintf_r+0x220>)
 801dbdc:	f7e2 fb20 	bl	8000220 <memchr>
 801dbe0:	9a04      	ldr	r2, [sp, #16]
 801dbe2:	b9d8      	cbnz	r0, 801dc1c <_vfiprintf_r+0x110>
 801dbe4:	06d1      	lsls	r1, r2, #27
 801dbe6:	bf44      	itt	mi
 801dbe8:	2320      	movmi	r3, #32
 801dbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbee:	0713      	lsls	r3, r2, #28
 801dbf0:	bf44      	itt	mi
 801dbf2:	232b      	movmi	r3, #43	; 0x2b
 801dbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbf8:	f89a 3000 	ldrb.w	r3, [sl]
 801dbfc:	2b2a      	cmp	r3, #42	; 0x2a
 801dbfe:	d015      	beq.n	801dc2c <_vfiprintf_r+0x120>
 801dc00:	9a07      	ldr	r2, [sp, #28]
 801dc02:	4654      	mov	r4, sl
 801dc04:	2000      	movs	r0, #0
 801dc06:	f04f 0c0a 	mov.w	ip, #10
 801dc0a:	4621      	mov	r1, r4
 801dc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc10:	3b30      	subs	r3, #48	; 0x30
 801dc12:	2b09      	cmp	r3, #9
 801dc14:	d94d      	bls.n	801dcb2 <_vfiprintf_r+0x1a6>
 801dc16:	b1b0      	cbz	r0, 801dc46 <_vfiprintf_r+0x13a>
 801dc18:	9207      	str	r2, [sp, #28]
 801dc1a:	e014      	b.n	801dc46 <_vfiprintf_r+0x13a>
 801dc1c:	eba0 0308 	sub.w	r3, r0, r8
 801dc20:	fa09 f303 	lsl.w	r3, r9, r3
 801dc24:	4313      	orrs	r3, r2
 801dc26:	9304      	str	r3, [sp, #16]
 801dc28:	46a2      	mov	sl, r4
 801dc2a:	e7d2      	b.n	801dbd2 <_vfiprintf_r+0xc6>
 801dc2c:	9b03      	ldr	r3, [sp, #12]
 801dc2e:	1d19      	adds	r1, r3, #4
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	9103      	str	r1, [sp, #12]
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	bfbb      	ittet	lt
 801dc38:	425b      	neglt	r3, r3
 801dc3a:	f042 0202 	orrlt.w	r2, r2, #2
 801dc3e:	9307      	strge	r3, [sp, #28]
 801dc40:	9307      	strlt	r3, [sp, #28]
 801dc42:	bfb8      	it	lt
 801dc44:	9204      	strlt	r2, [sp, #16]
 801dc46:	7823      	ldrb	r3, [r4, #0]
 801dc48:	2b2e      	cmp	r3, #46	; 0x2e
 801dc4a:	d10c      	bne.n	801dc66 <_vfiprintf_r+0x15a>
 801dc4c:	7863      	ldrb	r3, [r4, #1]
 801dc4e:	2b2a      	cmp	r3, #42	; 0x2a
 801dc50:	d134      	bne.n	801dcbc <_vfiprintf_r+0x1b0>
 801dc52:	9b03      	ldr	r3, [sp, #12]
 801dc54:	1d1a      	adds	r2, r3, #4
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	9203      	str	r2, [sp, #12]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	bfb8      	it	lt
 801dc5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801dc62:	3402      	adds	r4, #2
 801dc64:	9305      	str	r3, [sp, #20]
 801dc66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801dd3c <_vfiprintf_r+0x230>
 801dc6a:	7821      	ldrb	r1, [r4, #0]
 801dc6c:	2203      	movs	r2, #3
 801dc6e:	4650      	mov	r0, sl
 801dc70:	f7e2 fad6 	bl	8000220 <memchr>
 801dc74:	b138      	cbz	r0, 801dc86 <_vfiprintf_r+0x17a>
 801dc76:	9b04      	ldr	r3, [sp, #16]
 801dc78:	eba0 000a 	sub.w	r0, r0, sl
 801dc7c:	2240      	movs	r2, #64	; 0x40
 801dc7e:	4082      	lsls	r2, r0
 801dc80:	4313      	orrs	r3, r2
 801dc82:	3401      	adds	r4, #1
 801dc84:	9304      	str	r3, [sp, #16]
 801dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc8a:	4829      	ldr	r0, [pc, #164]	; (801dd30 <_vfiprintf_r+0x224>)
 801dc8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc90:	2206      	movs	r2, #6
 801dc92:	f7e2 fac5 	bl	8000220 <memchr>
 801dc96:	2800      	cmp	r0, #0
 801dc98:	d03f      	beq.n	801dd1a <_vfiprintf_r+0x20e>
 801dc9a:	4b26      	ldr	r3, [pc, #152]	; (801dd34 <_vfiprintf_r+0x228>)
 801dc9c:	bb1b      	cbnz	r3, 801dce6 <_vfiprintf_r+0x1da>
 801dc9e:	9b03      	ldr	r3, [sp, #12]
 801dca0:	3307      	adds	r3, #7
 801dca2:	f023 0307 	bic.w	r3, r3, #7
 801dca6:	3308      	adds	r3, #8
 801dca8:	9303      	str	r3, [sp, #12]
 801dcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcac:	443b      	add	r3, r7
 801dcae:	9309      	str	r3, [sp, #36]	; 0x24
 801dcb0:	e768      	b.n	801db84 <_vfiprintf_r+0x78>
 801dcb2:	fb0c 3202 	mla	r2, ip, r2, r3
 801dcb6:	460c      	mov	r4, r1
 801dcb8:	2001      	movs	r0, #1
 801dcba:	e7a6      	b.n	801dc0a <_vfiprintf_r+0xfe>
 801dcbc:	2300      	movs	r3, #0
 801dcbe:	3401      	adds	r4, #1
 801dcc0:	9305      	str	r3, [sp, #20]
 801dcc2:	4619      	mov	r1, r3
 801dcc4:	f04f 0c0a 	mov.w	ip, #10
 801dcc8:	4620      	mov	r0, r4
 801dcca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcce:	3a30      	subs	r2, #48	; 0x30
 801dcd0:	2a09      	cmp	r2, #9
 801dcd2:	d903      	bls.n	801dcdc <_vfiprintf_r+0x1d0>
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d0c6      	beq.n	801dc66 <_vfiprintf_r+0x15a>
 801dcd8:	9105      	str	r1, [sp, #20]
 801dcda:	e7c4      	b.n	801dc66 <_vfiprintf_r+0x15a>
 801dcdc:	fb0c 2101 	mla	r1, ip, r1, r2
 801dce0:	4604      	mov	r4, r0
 801dce2:	2301      	movs	r3, #1
 801dce4:	e7f0      	b.n	801dcc8 <_vfiprintf_r+0x1bc>
 801dce6:	ab03      	add	r3, sp, #12
 801dce8:	9300      	str	r3, [sp, #0]
 801dcea:	462a      	mov	r2, r5
 801dcec:	4b12      	ldr	r3, [pc, #72]	; (801dd38 <_vfiprintf_r+0x22c>)
 801dcee:	a904      	add	r1, sp, #16
 801dcf0:	4630      	mov	r0, r6
 801dcf2:	f7fc fcab 	bl	801a64c <_printf_float>
 801dcf6:	4607      	mov	r7, r0
 801dcf8:	1c78      	adds	r0, r7, #1
 801dcfa:	d1d6      	bne.n	801dcaa <_vfiprintf_r+0x19e>
 801dcfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dcfe:	07d9      	lsls	r1, r3, #31
 801dd00:	d405      	bmi.n	801dd0e <_vfiprintf_r+0x202>
 801dd02:	89ab      	ldrh	r3, [r5, #12]
 801dd04:	059a      	lsls	r2, r3, #22
 801dd06:	d402      	bmi.n	801dd0e <_vfiprintf_r+0x202>
 801dd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd0a:	f7fd fdbf 	bl	801b88c <__retarget_lock_release_recursive>
 801dd0e:	89ab      	ldrh	r3, [r5, #12]
 801dd10:	065b      	lsls	r3, r3, #25
 801dd12:	f53f af1d 	bmi.w	801db50 <_vfiprintf_r+0x44>
 801dd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd18:	e71c      	b.n	801db54 <_vfiprintf_r+0x48>
 801dd1a:	ab03      	add	r3, sp, #12
 801dd1c:	9300      	str	r3, [sp, #0]
 801dd1e:	462a      	mov	r2, r5
 801dd20:	4b05      	ldr	r3, [pc, #20]	; (801dd38 <_vfiprintf_r+0x22c>)
 801dd22:	a904      	add	r1, sp, #16
 801dd24:	4630      	mov	r0, r6
 801dd26:	f7fc ff35 	bl	801ab94 <_printf_i>
 801dd2a:	e7e4      	b.n	801dcf6 <_vfiprintf_r+0x1ea>
 801dd2c:	0802309c 	.word	0x0802309c
 801dd30:	080230a6 	.word	0x080230a6
 801dd34:	0801a64d 	.word	0x0801a64d
 801dd38:	0801dae7 	.word	0x0801dae7
 801dd3c:	080230a2 	.word	0x080230a2

0801dd40 <fiprintf>:
 801dd40:	b40e      	push	{r1, r2, r3}
 801dd42:	b503      	push	{r0, r1, lr}
 801dd44:	4601      	mov	r1, r0
 801dd46:	ab03      	add	r3, sp, #12
 801dd48:	4805      	ldr	r0, [pc, #20]	; (801dd60 <fiprintf+0x20>)
 801dd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd4e:	6800      	ldr	r0, [r0, #0]
 801dd50:	9301      	str	r3, [sp, #4]
 801dd52:	f7ff fedb 	bl	801db0c <_vfiprintf_r>
 801dd56:	b002      	add	sp, #8
 801dd58:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd5c:	b003      	add	sp, #12
 801dd5e:	4770      	bx	lr
 801dd60:	20000e40 	.word	0x20000e40

0801dd64 <__swhatbuf_r>:
 801dd64:	b570      	push	{r4, r5, r6, lr}
 801dd66:	460c      	mov	r4, r1
 801dd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd6c:	2900      	cmp	r1, #0
 801dd6e:	b096      	sub	sp, #88	; 0x58
 801dd70:	4615      	mov	r5, r2
 801dd72:	461e      	mov	r6, r3
 801dd74:	da0d      	bge.n	801dd92 <__swhatbuf_r+0x2e>
 801dd76:	89a3      	ldrh	r3, [r4, #12]
 801dd78:	f013 0f80 	tst.w	r3, #128	; 0x80
 801dd7c:	f04f 0100 	mov.w	r1, #0
 801dd80:	bf0c      	ite	eq
 801dd82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801dd86:	2340      	movne	r3, #64	; 0x40
 801dd88:	2000      	movs	r0, #0
 801dd8a:	6031      	str	r1, [r6, #0]
 801dd8c:	602b      	str	r3, [r5, #0]
 801dd8e:	b016      	add	sp, #88	; 0x58
 801dd90:	bd70      	pop	{r4, r5, r6, pc}
 801dd92:	466a      	mov	r2, sp
 801dd94:	f000 f87c 	bl	801de90 <_fstat_r>
 801dd98:	2800      	cmp	r0, #0
 801dd9a:	dbec      	blt.n	801dd76 <__swhatbuf_r+0x12>
 801dd9c:	9901      	ldr	r1, [sp, #4]
 801dd9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801dda2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801dda6:	4259      	negs	r1, r3
 801dda8:	4159      	adcs	r1, r3
 801ddaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ddae:	e7eb      	b.n	801dd88 <__swhatbuf_r+0x24>

0801ddb0 <__smakebuf_r>:
 801ddb0:	898b      	ldrh	r3, [r1, #12]
 801ddb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ddb4:	079d      	lsls	r5, r3, #30
 801ddb6:	4606      	mov	r6, r0
 801ddb8:	460c      	mov	r4, r1
 801ddba:	d507      	bpl.n	801ddcc <__smakebuf_r+0x1c>
 801ddbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ddc0:	6023      	str	r3, [r4, #0]
 801ddc2:	6123      	str	r3, [r4, #16]
 801ddc4:	2301      	movs	r3, #1
 801ddc6:	6163      	str	r3, [r4, #20]
 801ddc8:	b002      	add	sp, #8
 801ddca:	bd70      	pop	{r4, r5, r6, pc}
 801ddcc:	ab01      	add	r3, sp, #4
 801ddce:	466a      	mov	r2, sp
 801ddd0:	f7ff ffc8 	bl	801dd64 <__swhatbuf_r>
 801ddd4:	9900      	ldr	r1, [sp, #0]
 801ddd6:	4605      	mov	r5, r0
 801ddd8:	4630      	mov	r0, r6
 801ddda:	f7fb fc7f 	bl	80196dc <_malloc_r>
 801ddde:	b948      	cbnz	r0, 801ddf4 <__smakebuf_r+0x44>
 801dde0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dde4:	059a      	lsls	r2, r3, #22
 801dde6:	d4ef      	bmi.n	801ddc8 <__smakebuf_r+0x18>
 801dde8:	f023 0303 	bic.w	r3, r3, #3
 801ddec:	f043 0302 	orr.w	r3, r3, #2
 801ddf0:	81a3      	strh	r3, [r4, #12]
 801ddf2:	e7e3      	b.n	801ddbc <__smakebuf_r+0xc>
 801ddf4:	89a3      	ldrh	r3, [r4, #12]
 801ddf6:	6020      	str	r0, [r4, #0]
 801ddf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddfc:	81a3      	strh	r3, [r4, #12]
 801ddfe:	9b00      	ldr	r3, [sp, #0]
 801de00:	6163      	str	r3, [r4, #20]
 801de02:	9b01      	ldr	r3, [sp, #4]
 801de04:	6120      	str	r0, [r4, #16]
 801de06:	b15b      	cbz	r3, 801de20 <__smakebuf_r+0x70>
 801de08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de0c:	4630      	mov	r0, r6
 801de0e:	f000 f851 	bl	801deb4 <_isatty_r>
 801de12:	b128      	cbz	r0, 801de20 <__smakebuf_r+0x70>
 801de14:	89a3      	ldrh	r3, [r4, #12]
 801de16:	f023 0303 	bic.w	r3, r3, #3
 801de1a:	f043 0301 	orr.w	r3, r3, #1
 801de1e:	81a3      	strh	r3, [r4, #12]
 801de20:	89a3      	ldrh	r3, [r4, #12]
 801de22:	431d      	orrs	r5, r3
 801de24:	81a5      	strh	r5, [r4, #12]
 801de26:	e7cf      	b.n	801ddc8 <__smakebuf_r+0x18>

0801de28 <_putc_r>:
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	460d      	mov	r5, r1
 801de2c:	4614      	mov	r4, r2
 801de2e:	4606      	mov	r6, r0
 801de30:	b118      	cbz	r0, 801de3a <_putc_r+0x12>
 801de32:	6a03      	ldr	r3, [r0, #32]
 801de34:	b90b      	cbnz	r3, 801de3a <_putc_r+0x12>
 801de36:	f7fd fb19 	bl	801b46c <__sinit>
 801de3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801de3c:	07d8      	lsls	r0, r3, #31
 801de3e:	d405      	bmi.n	801de4c <_putc_r+0x24>
 801de40:	89a3      	ldrh	r3, [r4, #12]
 801de42:	0599      	lsls	r1, r3, #22
 801de44:	d402      	bmi.n	801de4c <_putc_r+0x24>
 801de46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801de48:	f7fd fd1f 	bl	801b88a <__retarget_lock_acquire_recursive>
 801de4c:	68a3      	ldr	r3, [r4, #8]
 801de4e:	3b01      	subs	r3, #1
 801de50:	2b00      	cmp	r3, #0
 801de52:	60a3      	str	r3, [r4, #8]
 801de54:	da05      	bge.n	801de62 <_putc_r+0x3a>
 801de56:	69a2      	ldr	r2, [r4, #24]
 801de58:	4293      	cmp	r3, r2
 801de5a:	db12      	blt.n	801de82 <_putc_r+0x5a>
 801de5c:	b2eb      	uxtb	r3, r5
 801de5e:	2b0a      	cmp	r3, #10
 801de60:	d00f      	beq.n	801de82 <_putc_r+0x5a>
 801de62:	6823      	ldr	r3, [r4, #0]
 801de64:	1c5a      	adds	r2, r3, #1
 801de66:	6022      	str	r2, [r4, #0]
 801de68:	701d      	strb	r5, [r3, #0]
 801de6a:	b2ed      	uxtb	r5, r5
 801de6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801de6e:	07da      	lsls	r2, r3, #31
 801de70:	d405      	bmi.n	801de7e <_putc_r+0x56>
 801de72:	89a3      	ldrh	r3, [r4, #12]
 801de74:	059b      	lsls	r3, r3, #22
 801de76:	d402      	bmi.n	801de7e <_putc_r+0x56>
 801de78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801de7a:	f7fd fd07 	bl	801b88c <__retarget_lock_release_recursive>
 801de7e:	4628      	mov	r0, r5
 801de80:	bd70      	pop	{r4, r5, r6, pc}
 801de82:	4629      	mov	r1, r5
 801de84:	4622      	mov	r2, r4
 801de86:	4630      	mov	r0, r6
 801de88:	f7fd fba3 	bl	801b5d2 <__swbuf_r>
 801de8c:	4605      	mov	r5, r0
 801de8e:	e7ed      	b.n	801de6c <_putc_r+0x44>

0801de90 <_fstat_r>:
 801de90:	b538      	push	{r3, r4, r5, lr}
 801de92:	4d07      	ldr	r5, [pc, #28]	; (801deb0 <_fstat_r+0x20>)
 801de94:	2300      	movs	r3, #0
 801de96:	4604      	mov	r4, r0
 801de98:	4608      	mov	r0, r1
 801de9a:	4611      	mov	r1, r2
 801de9c:	602b      	str	r3, [r5, #0]
 801de9e:	f7e3 f96b 	bl	8001178 <_fstat>
 801dea2:	1c43      	adds	r3, r0, #1
 801dea4:	d102      	bne.n	801deac <_fstat_r+0x1c>
 801dea6:	682b      	ldr	r3, [r5, #0]
 801dea8:	b103      	cbz	r3, 801deac <_fstat_r+0x1c>
 801deaa:	6023      	str	r3, [r4, #0]
 801deac:	bd38      	pop	{r3, r4, r5, pc}
 801deae:	bf00      	nop
 801deb0:	20002e4c 	.word	0x20002e4c

0801deb4 <_isatty_r>:
 801deb4:	b538      	push	{r3, r4, r5, lr}
 801deb6:	4d06      	ldr	r5, [pc, #24]	; (801ded0 <_isatty_r+0x1c>)
 801deb8:	2300      	movs	r3, #0
 801deba:	4604      	mov	r4, r0
 801debc:	4608      	mov	r0, r1
 801debe:	602b      	str	r3, [r5, #0]
 801dec0:	f7e3 f960 	bl	8001184 <_isatty>
 801dec4:	1c43      	adds	r3, r0, #1
 801dec6:	d102      	bne.n	801dece <_isatty_r+0x1a>
 801dec8:	682b      	ldr	r3, [r5, #0]
 801deca:	b103      	cbz	r3, 801dece <_isatty_r+0x1a>
 801decc:	6023      	str	r3, [r4, #0]
 801dece:	bd38      	pop	{r3, r4, r5, pc}
 801ded0:	20002e4c 	.word	0x20002e4c

0801ded4 <abort>:
 801ded4:	b508      	push	{r3, lr}
 801ded6:	2006      	movs	r0, #6
 801ded8:	f000 f82c 	bl	801df34 <raise>
 801dedc:	2001      	movs	r0, #1
 801dede:	f7e3 f917 	bl	8001110 <_exit>

0801dee2 <_raise_r>:
 801dee2:	291f      	cmp	r1, #31
 801dee4:	b538      	push	{r3, r4, r5, lr}
 801dee6:	4604      	mov	r4, r0
 801dee8:	460d      	mov	r5, r1
 801deea:	d904      	bls.n	801def6 <_raise_r+0x14>
 801deec:	2316      	movs	r3, #22
 801deee:	6003      	str	r3, [r0, #0]
 801def0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801def4:	bd38      	pop	{r3, r4, r5, pc}
 801def6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801def8:	b112      	cbz	r2, 801df00 <_raise_r+0x1e>
 801defa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801defe:	b94b      	cbnz	r3, 801df14 <_raise_r+0x32>
 801df00:	4620      	mov	r0, r4
 801df02:	f000 f831 	bl	801df68 <_getpid_r>
 801df06:	462a      	mov	r2, r5
 801df08:	4601      	mov	r1, r0
 801df0a:	4620      	mov	r0, r4
 801df0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df10:	f000 b818 	b.w	801df44 <_kill_r>
 801df14:	2b01      	cmp	r3, #1
 801df16:	d00a      	beq.n	801df2e <_raise_r+0x4c>
 801df18:	1c59      	adds	r1, r3, #1
 801df1a:	d103      	bne.n	801df24 <_raise_r+0x42>
 801df1c:	2316      	movs	r3, #22
 801df1e:	6003      	str	r3, [r0, #0]
 801df20:	2001      	movs	r0, #1
 801df22:	e7e7      	b.n	801def4 <_raise_r+0x12>
 801df24:	2400      	movs	r4, #0
 801df26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801df2a:	4628      	mov	r0, r5
 801df2c:	4798      	blx	r3
 801df2e:	2000      	movs	r0, #0
 801df30:	e7e0      	b.n	801def4 <_raise_r+0x12>
	...

0801df34 <raise>:
 801df34:	4b02      	ldr	r3, [pc, #8]	; (801df40 <raise+0xc>)
 801df36:	4601      	mov	r1, r0
 801df38:	6818      	ldr	r0, [r3, #0]
 801df3a:	f7ff bfd2 	b.w	801dee2 <_raise_r>
 801df3e:	bf00      	nop
 801df40:	20000e40 	.word	0x20000e40

0801df44 <_kill_r>:
 801df44:	b538      	push	{r3, r4, r5, lr}
 801df46:	4d07      	ldr	r5, [pc, #28]	; (801df64 <_kill_r+0x20>)
 801df48:	2300      	movs	r3, #0
 801df4a:	4604      	mov	r4, r0
 801df4c:	4608      	mov	r0, r1
 801df4e:	4611      	mov	r1, r2
 801df50:	602b      	str	r3, [r5, #0]
 801df52:	f7e3 f8d5 	bl	8001100 <_kill>
 801df56:	1c43      	adds	r3, r0, #1
 801df58:	d102      	bne.n	801df60 <_kill_r+0x1c>
 801df5a:	682b      	ldr	r3, [r5, #0]
 801df5c:	b103      	cbz	r3, 801df60 <_kill_r+0x1c>
 801df5e:	6023      	str	r3, [r4, #0]
 801df60:	bd38      	pop	{r3, r4, r5, pc}
 801df62:	bf00      	nop
 801df64:	20002e4c 	.word	0x20002e4c

0801df68 <_getpid_r>:
 801df68:	f7e3 b8c8 	b.w	80010fc <_getpid>

0801df6c <powf>:
 801df6c:	b508      	push	{r3, lr}
 801df6e:	ed2d 8b04 	vpush	{d8-d9}
 801df72:	eeb0 8a60 	vmov.f32	s16, s1
 801df76:	eeb0 9a40 	vmov.f32	s18, s0
 801df7a:	f000 f8a9 	bl	801e0d0 <__ieee754_powf>
 801df7e:	eeb4 8a48 	vcmp.f32	s16, s16
 801df82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df86:	eef0 8a40 	vmov.f32	s17, s0
 801df8a:	d63e      	bvs.n	801e00a <powf+0x9e>
 801df8c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801df90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df94:	d112      	bne.n	801dfbc <powf+0x50>
 801df96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801df9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df9e:	d039      	beq.n	801e014 <powf+0xa8>
 801dfa0:	eeb0 0a48 	vmov.f32	s0, s16
 801dfa4:	f000 f840 	bl	801e028 <finitef>
 801dfa8:	b378      	cbz	r0, 801e00a <powf+0x9e>
 801dfaa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfb2:	d52a      	bpl.n	801e00a <powf+0x9e>
 801dfb4:	f7fd fc3e 	bl	801b834 <__errno>
 801dfb8:	2322      	movs	r3, #34	; 0x22
 801dfba:	e014      	b.n	801dfe6 <powf+0x7a>
 801dfbc:	f000 f834 	bl	801e028 <finitef>
 801dfc0:	b998      	cbnz	r0, 801dfea <powf+0x7e>
 801dfc2:	eeb0 0a49 	vmov.f32	s0, s18
 801dfc6:	f000 f82f 	bl	801e028 <finitef>
 801dfca:	b170      	cbz	r0, 801dfea <powf+0x7e>
 801dfcc:	eeb0 0a48 	vmov.f32	s0, s16
 801dfd0:	f000 f82a 	bl	801e028 <finitef>
 801dfd4:	b148      	cbz	r0, 801dfea <powf+0x7e>
 801dfd6:	eef4 8a68 	vcmp.f32	s17, s17
 801dfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfde:	d7e9      	bvc.n	801dfb4 <powf+0x48>
 801dfe0:	f7fd fc28 	bl	801b834 <__errno>
 801dfe4:	2321      	movs	r3, #33	; 0x21
 801dfe6:	6003      	str	r3, [r0, #0]
 801dfe8:	e00f      	b.n	801e00a <powf+0x9e>
 801dfea:	eef5 8a40 	vcmp.f32	s17, #0.0
 801dfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dff2:	d10a      	bne.n	801e00a <powf+0x9e>
 801dff4:	eeb0 0a49 	vmov.f32	s0, s18
 801dff8:	f000 f816 	bl	801e028 <finitef>
 801dffc:	b128      	cbz	r0, 801e00a <powf+0x9e>
 801dffe:	eeb0 0a48 	vmov.f32	s0, s16
 801e002:	f000 f811 	bl	801e028 <finitef>
 801e006:	2800      	cmp	r0, #0
 801e008:	d1d4      	bne.n	801dfb4 <powf+0x48>
 801e00a:	eeb0 0a68 	vmov.f32	s0, s17
 801e00e:	ecbd 8b04 	vpop	{d8-d9}
 801e012:	bd08      	pop	{r3, pc}
 801e014:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801e018:	e7f7      	b.n	801e00a <powf+0x9e>

0801e01a <fabsf>:
 801e01a:	ee10 3a10 	vmov	r3, s0
 801e01e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e022:	ee00 3a10 	vmov	s0, r3
 801e026:	4770      	bx	lr

0801e028 <finitef>:
 801e028:	b082      	sub	sp, #8
 801e02a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e02e:	9801      	ldr	r0, [sp, #4]
 801e030:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e034:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801e038:	bfac      	ite	ge
 801e03a:	2000      	movge	r0, #0
 801e03c:	2001      	movlt	r0, #1
 801e03e:	b002      	add	sp, #8
 801e040:	4770      	bx	lr

0801e042 <with_errnof>:
 801e042:	b513      	push	{r0, r1, r4, lr}
 801e044:	4604      	mov	r4, r0
 801e046:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e04a:	f7fd fbf3 	bl	801b834 <__errno>
 801e04e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801e052:	6004      	str	r4, [r0, #0]
 801e054:	b002      	add	sp, #8
 801e056:	bd10      	pop	{r4, pc}

0801e058 <xflowf>:
 801e058:	b130      	cbz	r0, 801e068 <xflowf+0x10>
 801e05a:	eef1 7a40 	vneg.f32	s15, s0
 801e05e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e062:	2022      	movs	r0, #34	; 0x22
 801e064:	f7ff bfed 	b.w	801e042 <with_errnof>
 801e068:	eef0 7a40 	vmov.f32	s15, s0
 801e06c:	e7f7      	b.n	801e05e <xflowf+0x6>
	...

0801e070 <__math_uflowf>:
 801e070:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e078 <__math_uflowf+0x8>
 801e074:	f7ff bff0 	b.w	801e058 <xflowf>
 801e078:	10000000 	.word	0x10000000

0801e07c <__math_oflowf>:
 801e07c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e084 <__math_oflowf+0x8>
 801e080:	f7ff bfea 	b.w	801e058 <xflowf>
 801e084:	70000000 	.word	0x70000000

0801e088 <roundf>:
 801e088:	ee10 0a10 	vmov	r0, s0
 801e08c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801e090:	3a7f      	subs	r2, #127	; 0x7f
 801e092:	2a16      	cmp	r2, #22
 801e094:	dc15      	bgt.n	801e0c2 <roundf+0x3a>
 801e096:	2a00      	cmp	r2, #0
 801e098:	da08      	bge.n	801e0ac <roundf+0x24>
 801e09a:	3201      	adds	r2, #1
 801e09c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801e0a0:	d101      	bne.n	801e0a6 <roundf+0x1e>
 801e0a2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801e0a6:	ee00 3a10 	vmov	s0, r3
 801e0aa:	4770      	bx	lr
 801e0ac:	4907      	ldr	r1, [pc, #28]	; (801e0cc <roundf+0x44>)
 801e0ae:	4111      	asrs	r1, r2
 801e0b0:	4208      	tst	r0, r1
 801e0b2:	d0fa      	beq.n	801e0aa <roundf+0x22>
 801e0b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801e0b8:	4113      	asrs	r3, r2
 801e0ba:	4403      	add	r3, r0
 801e0bc:	ea23 0301 	bic.w	r3, r3, r1
 801e0c0:	e7f1      	b.n	801e0a6 <roundf+0x1e>
 801e0c2:	2a80      	cmp	r2, #128	; 0x80
 801e0c4:	d1f1      	bne.n	801e0aa <roundf+0x22>
 801e0c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e0ca:	4770      	bx	lr
 801e0cc:	007fffff 	.word	0x007fffff

0801e0d0 <__ieee754_powf>:
 801e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0d4:	ee10 4a90 	vmov	r4, s1
 801e0d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801e0dc:	ed2d 8b02 	vpush	{d8}
 801e0e0:	ee10 7a10 	vmov	r7, s0
 801e0e4:	eeb0 8a40 	vmov.f32	s16, s0
 801e0e8:	eef0 8a60 	vmov.f32	s17, s1
 801e0ec:	d10c      	bne.n	801e108 <__ieee754_powf+0x38>
 801e0ee:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801e0f2:	007f      	lsls	r7, r7, #1
 801e0f4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801e0f8:	f240 8292 	bls.w	801e620 <__ieee754_powf+0x550>
 801e0fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 801e100:	ecbd 8b02 	vpop	{d8}
 801e104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e108:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801e10c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801e110:	dcf4      	bgt.n	801e0fc <__ieee754_powf+0x2c>
 801e112:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801e116:	dd08      	ble.n	801e12a <__ieee754_powf+0x5a>
 801e118:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801e11c:	d1ee      	bne.n	801e0fc <__ieee754_powf+0x2c>
 801e11e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801e122:	0064      	lsls	r4, r4, #1
 801e124:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801e128:	e7e6      	b.n	801e0f8 <__ieee754_powf+0x28>
 801e12a:	2f00      	cmp	r7, #0
 801e12c:	da20      	bge.n	801e170 <__ieee754_powf+0xa0>
 801e12e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801e132:	da2d      	bge.n	801e190 <__ieee754_powf+0xc0>
 801e134:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801e138:	f2c0 827b 	blt.w	801e632 <__ieee754_powf+0x562>
 801e13c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801e140:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801e144:	fa48 f603 	asr.w	r6, r8, r3
 801e148:	fa06 f303 	lsl.w	r3, r6, r3
 801e14c:	4543      	cmp	r3, r8
 801e14e:	f040 8270 	bne.w	801e632 <__ieee754_powf+0x562>
 801e152:	f006 0601 	and.w	r6, r6, #1
 801e156:	f1c6 0602 	rsb	r6, r6, #2
 801e15a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801e15e:	d11f      	bne.n	801e1a0 <__ieee754_powf+0xd0>
 801e160:	2c00      	cmp	r4, #0
 801e162:	f280 8263 	bge.w	801e62c <__ieee754_powf+0x55c>
 801e166:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e16a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801e16e:	e7c7      	b.n	801e100 <__ieee754_powf+0x30>
 801e170:	2600      	movs	r6, #0
 801e172:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801e176:	d1f0      	bne.n	801e15a <__ieee754_powf+0x8a>
 801e178:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801e17c:	f000 8250 	beq.w	801e620 <__ieee754_powf+0x550>
 801e180:	dd08      	ble.n	801e194 <__ieee754_powf+0xc4>
 801e182:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801e488 <__ieee754_powf+0x3b8>
 801e186:	2c00      	cmp	r4, #0
 801e188:	bfa8      	it	ge
 801e18a:	eeb0 0a68 	vmovge.f32	s0, s17
 801e18e:	e7b7      	b.n	801e100 <__ieee754_powf+0x30>
 801e190:	2602      	movs	r6, #2
 801e192:	e7ee      	b.n	801e172 <__ieee754_powf+0xa2>
 801e194:	2c00      	cmp	r4, #0
 801e196:	f280 8246 	bge.w	801e626 <__ieee754_powf+0x556>
 801e19a:	eeb1 0a68 	vneg.f32	s0, s17
 801e19e:	e7af      	b.n	801e100 <__ieee754_powf+0x30>
 801e1a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801e1a4:	d102      	bne.n	801e1ac <__ieee754_powf+0xdc>
 801e1a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 801e1aa:	e7a9      	b.n	801e100 <__ieee754_powf+0x30>
 801e1ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801e1b0:	eeb0 0a48 	vmov.f32	s0, s16
 801e1b4:	d107      	bne.n	801e1c6 <__ieee754_powf+0xf6>
 801e1b6:	2f00      	cmp	r7, #0
 801e1b8:	db05      	blt.n	801e1c6 <__ieee754_powf+0xf6>
 801e1ba:	ecbd 8b02 	vpop	{d8}
 801e1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1c2:	f000 bab5 	b.w	801e730 <__ieee754_sqrtf>
 801e1c6:	f7ff ff28 	bl	801e01a <fabsf>
 801e1ca:	b125      	cbz	r5, 801e1d6 <__ieee754_powf+0x106>
 801e1cc:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801e1d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801e1d4:	d115      	bne.n	801e202 <__ieee754_powf+0x132>
 801e1d6:	2c00      	cmp	r4, #0
 801e1d8:	bfbc      	itt	lt
 801e1da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801e1de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801e1e2:	2f00      	cmp	r7, #0
 801e1e4:	da8c      	bge.n	801e100 <__ieee754_powf+0x30>
 801e1e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801e1ea:	4335      	orrs	r5, r6
 801e1ec:	d104      	bne.n	801e1f8 <__ieee754_powf+0x128>
 801e1ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e1f2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801e1f6:	e783      	b.n	801e100 <__ieee754_powf+0x30>
 801e1f8:	2e01      	cmp	r6, #1
 801e1fa:	d181      	bne.n	801e100 <__ieee754_powf+0x30>
 801e1fc:	eeb1 0a40 	vneg.f32	s0, s0
 801e200:	e77e      	b.n	801e100 <__ieee754_powf+0x30>
 801e202:	0ff8      	lsrs	r0, r7, #31
 801e204:	3801      	subs	r0, #1
 801e206:	ea56 0300 	orrs.w	r3, r6, r0
 801e20a:	d104      	bne.n	801e216 <__ieee754_powf+0x146>
 801e20c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801e210:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801e214:	e774      	b.n	801e100 <__ieee754_powf+0x30>
 801e216:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801e21a:	dd73      	ble.n	801e304 <__ieee754_powf+0x234>
 801e21c:	4b9b      	ldr	r3, [pc, #620]	; (801e48c <__ieee754_powf+0x3bc>)
 801e21e:	429d      	cmp	r5, r3
 801e220:	dc08      	bgt.n	801e234 <__ieee754_powf+0x164>
 801e222:	2c00      	cmp	r4, #0
 801e224:	da0b      	bge.n	801e23e <__ieee754_powf+0x16e>
 801e226:	2000      	movs	r0, #0
 801e228:	ecbd 8b02 	vpop	{d8}
 801e22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e230:	f7ff bf24 	b.w	801e07c <__math_oflowf>
 801e234:	4b96      	ldr	r3, [pc, #600]	; (801e490 <__ieee754_powf+0x3c0>)
 801e236:	429d      	cmp	r5, r3
 801e238:	dd08      	ble.n	801e24c <__ieee754_powf+0x17c>
 801e23a:	2c00      	cmp	r4, #0
 801e23c:	dcf3      	bgt.n	801e226 <__ieee754_powf+0x156>
 801e23e:	2000      	movs	r0, #0
 801e240:	ecbd 8b02 	vpop	{d8}
 801e244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e248:	f7ff bf12 	b.w	801e070 <__math_uflowf>
 801e24c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e250:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e254:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801e494 <__ieee754_powf+0x3c4>
 801e258:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801e25c:	eee0 6a67 	vfms.f32	s13, s0, s15
 801e260:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e264:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801e268:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e26c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e270:	eddf 7a89 	vldr	s15, [pc, #548]	; 801e498 <__ieee754_powf+0x3c8>
 801e274:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801e278:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801e49c <__ieee754_powf+0x3cc>
 801e27c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e280:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801e4a0 <__ieee754_powf+0x3d0>
 801e284:	eef0 6a67 	vmov.f32	s13, s15
 801e288:	eee0 6a07 	vfma.f32	s13, s0, s14
 801e28c:	ee16 3a90 	vmov	r3, s13
 801e290:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e294:	f023 030f 	bic.w	r3, r3, #15
 801e298:	ee06 3a90 	vmov	s13, r3
 801e29c:	eee0 6a47 	vfms.f32	s13, s0, s14
 801e2a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e2a4:	3e01      	subs	r6, #1
 801e2a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801e2aa:	4306      	orrs	r6, r0
 801e2ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e2b0:	f024 040f 	bic.w	r4, r4, #15
 801e2b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e2b8:	bf08      	it	eq
 801e2ba:	eeb0 8a47 	vmoveq.f32	s16, s14
 801e2be:	ee07 4a10 	vmov	s14, r4
 801e2c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801e2c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801e2ca:	ee07 3a90 	vmov	s15, r3
 801e2ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 801e2d2:	ee07 4a10 	vmov	s14, r4
 801e2d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e2da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801e2de:	ee17 1a10 	vmov	r1, s14
 801e2e2:	2900      	cmp	r1, #0
 801e2e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e2e8:	f340 817c 	ble.w	801e5e4 <__ieee754_powf+0x514>
 801e2ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801e2f0:	f340 80f8 	ble.w	801e4e4 <__ieee754_powf+0x414>
 801e2f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2fc:	bf4c      	ite	mi
 801e2fe:	2001      	movmi	r0, #1
 801e300:	2000      	movpl	r0, #0
 801e302:	e791      	b.n	801e228 <__ieee754_powf+0x158>
 801e304:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801e308:	bf01      	itttt	eq
 801e30a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801e4a4 <__ieee754_powf+0x3d4>
 801e30e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801e312:	f06f 0317 	mvneq.w	r3, #23
 801e316:	ee17 5a90 	vmoveq	r5, s15
 801e31a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801e31e:	bf18      	it	ne
 801e320:	2300      	movne	r3, #0
 801e322:	3a7f      	subs	r2, #127	; 0x7f
 801e324:	441a      	add	r2, r3
 801e326:	4b60      	ldr	r3, [pc, #384]	; (801e4a8 <__ieee754_powf+0x3d8>)
 801e328:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801e32c:	429d      	cmp	r5, r3
 801e32e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801e332:	dd06      	ble.n	801e342 <__ieee754_powf+0x272>
 801e334:	4b5d      	ldr	r3, [pc, #372]	; (801e4ac <__ieee754_powf+0x3dc>)
 801e336:	429d      	cmp	r5, r3
 801e338:	f340 80a4 	ble.w	801e484 <__ieee754_powf+0x3b4>
 801e33c:	3201      	adds	r2, #1
 801e33e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801e342:	2500      	movs	r5, #0
 801e344:	4b5a      	ldr	r3, [pc, #360]	; (801e4b0 <__ieee754_powf+0x3e0>)
 801e346:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801e34a:	ee07 1a10 	vmov	s14, r1
 801e34e:	edd3 5a00 	vldr	s11, [r3]
 801e352:	4b58      	ldr	r3, [pc, #352]	; (801e4b4 <__ieee754_powf+0x3e4>)
 801e354:	ee75 7a87 	vadd.f32	s15, s11, s14
 801e358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e35c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801e360:	1049      	asrs	r1, r1, #1
 801e362:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801e366:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801e36a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801e36e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801e372:	ee07 1a90 	vmov	s15, r1
 801e376:	ee26 5a24 	vmul.f32	s10, s12, s9
 801e37a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801e37e:	ee15 7a10 	vmov	r7, s10
 801e382:	401f      	ands	r7, r3
 801e384:	ee06 7a90 	vmov	s13, r7
 801e388:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801e38c:	ee37 7a65 	vsub.f32	s14, s14, s11
 801e390:	ee65 7a05 	vmul.f32	s15, s10, s10
 801e394:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801e398:	eddf 5a47 	vldr	s11, [pc, #284]	; 801e4b8 <__ieee754_powf+0x3e8>
 801e39c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801e4bc <__ieee754_powf+0x3ec>
 801e3a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801e3a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801e4c0 <__ieee754_powf+0x3f0>
 801e3a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e3ac:	eddf 5a39 	vldr	s11, [pc, #228]	; 801e494 <__ieee754_powf+0x3c4>
 801e3b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801e3b4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801e4c4 <__ieee754_powf+0x3f4>
 801e3b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e3bc:	eddf 5a42 	vldr	s11, [pc, #264]	; 801e4c8 <__ieee754_powf+0x3f8>
 801e3c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801e3c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801e3c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801e3cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801e3d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801e3d4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801e3d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801e3dc:	eef0 5a67 	vmov.f32	s11, s15
 801e3e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801e3e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 801e3e8:	ee15 1a90 	vmov	r1, s11
 801e3ec:	4019      	ands	r1, r3
 801e3ee:	ee05 1a90 	vmov	s11, r1
 801e3f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801e3f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801e3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e3fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 801e402:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e406:	eeb0 6a67 	vmov.f32	s12, s15
 801e40a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e40e:	ee16 1a10 	vmov	r1, s12
 801e412:	4019      	ands	r1, r3
 801e414:	ee07 1a10 	vmov	s14, r1
 801e418:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801e41c:	ee06 1a10 	vmov	s12, r1
 801e420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e424:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801e4cc <__ieee754_powf+0x3fc>
 801e428:	4929      	ldr	r1, [pc, #164]	; (801e4d0 <__ieee754_powf+0x400>)
 801e42a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801e4d4 <__ieee754_powf+0x404>
 801e42e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e432:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801e4d8 <__ieee754_powf+0x408>
 801e436:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e43a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801e43e:	ed91 7a00 	vldr	s14, [r1]
 801e442:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e446:	ee07 2a10 	vmov	s14, r2
 801e44a:	eef0 6a67 	vmov.f32	s13, s15
 801e44e:	4a23      	ldr	r2, [pc, #140]	; (801e4dc <__ieee754_powf+0x40c>)
 801e450:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e454:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801e458:	ed92 5a00 	vldr	s10, [r2]
 801e45c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e460:	ee76 6a85 	vadd.f32	s13, s13, s10
 801e464:	ee76 6a87 	vadd.f32	s13, s13, s14
 801e468:	ee16 2a90 	vmov	r2, s13
 801e46c:	4013      	ands	r3, r2
 801e46e:	ee06 3a90 	vmov	s13, r3
 801e472:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e476:	ee37 7a45 	vsub.f32	s14, s14, s10
 801e47a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801e47e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e482:	e70f      	b.n	801e2a4 <__ieee754_powf+0x1d4>
 801e484:	2501      	movs	r5, #1
 801e486:	e75d      	b.n	801e344 <__ieee754_powf+0x274>
 801e488:	00000000 	.word	0x00000000
 801e48c:	3f7ffff3 	.word	0x3f7ffff3
 801e490:	3f800007 	.word	0x3f800007
 801e494:	3eaaaaab 	.word	0x3eaaaaab
 801e498:	3fb8aa3b 	.word	0x3fb8aa3b
 801e49c:	36eca570 	.word	0x36eca570
 801e4a0:	3fb8aa00 	.word	0x3fb8aa00
 801e4a4:	4b800000 	.word	0x4b800000
 801e4a8:	001cc471 	.word	0x001cc471
 801e4ac:	005db3d6 	.word	0x005db3d6
 801e4b0:	080230b0 	.word	0x080230b0
 801e4b4:	fffff000 	.word	0xfffff000
 801e4b8:	3e6c3255 	.word	0x3e6c3255
 801e4bc:	3e53f142 	.word	0x3e53f142
 801e4c0:	3e8ba305 	.word	0x3e8ba305
 801e4c4:	3edb6db7 	.word	0x3edb6db7
 801e4c8:	3f19999a 	.word	0x3f19999a
 801e4cc:	3f76384f 	.word	0x3f76384f
 801e4d0:	080230c0 	.word	0x080230c0
 801e4d4:	3f763800 	.word	0x3f763800
 801e4d8:	369dc3a0 	.word	0x369dc3a0
 801e4dc:	080230b8 	.word	0x080230b8
 801e4e0:	3338aa3c 	.word	0x3338aa3c
 801e4e4:	f040 8093 	bne.w	801e60e <__ieee754_powf+0x53e>
 801e4e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801e4e0 <__ieee754_powf+0x410>
 801e4ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e4f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801e4f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4fc:	f73f aefa 	bgt.w	801e2f4 <__ieee754_powf+0x224>
 801e500:	15db      	asrs	r3, r3, #23
 801e502:	3b7e      	subs	r3, #126	; 0x7e
 801e504:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801e508:	4118      	asrs	r0, r3
 801e50a:	4408      	add	r0, r1
 801e50c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801e510:	4a49      	ldr	r2, [pc, #292]	; (801e638 <__ieee754_powf+0x568>)
 801e512:	3b7f      	subs	r3, #127	; 0x7f
 801e514:	411a      	asrs	r2, r3
 801e516:	4002      	ands	r2, r0
 801e518:	ee07 2a10 	vmov	s14, r2
 801e51c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801e520:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801e524:	f1c3 0317 	rsb	r3, r3, #23
 801e528:	4118      	asrs	r0, r3
 801e52a:	2900      	cmp	r1, #0
 801e52c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e530:	bfb8      	it	lt
 801e532:	4240      	neglt	r0, r0
 801e534:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e538:	eddf 6a40 	vldr	s13, [pc, #256]	; 801e63c <__ieee754_powf+0x56c>
 801e53c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801e640 <__ieee754_powf+0x570>
 801e540:	ee17 3a10 	vmov	r3, s14
 801e544:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e548:	f023 030f 	bic.w	r3, r3, #15
 801e54c:	ee07 3a10 	vmov	s14, r3
 801e550:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e554:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e558:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e55c:	eddf 7a39 	vldr	s15, [pc, #228]	; 801e644 <__ieee754_powf+0x574>
 801e560:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e564:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801e568:	eef0 6a67 	vmov.f32	s13, s15
 801e56c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801e570:	eef0 5a66 	vmov.f32	s11, s13
 801e574:	eee7 5a46 	vfms.f32	s11, s14, s12
 801e578:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e57c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e580:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801e648 <__ieee754_powf+0x578>
 801e584:	eddf 5a31 	vldr	s11, [pc, #196]	; 801e64c <__ieee754_powf+0x57c>
 801e588:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e58c:	eddf 5a30 	vldr	s11, [pc, #192]	; 801e650 <__ieee754_powf+0x580>
 801e590:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e594:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801e654 <__ieee754_powf+0x584>
 801e598:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e59c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801e658 <__ieee754_powf+0x588>
 801e5a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e5a4:	eeb0 6a66 	vmov.f32	s12, s13
 801e5a8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801e5ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801e5b0:	ee66 5a86 	vmul.f32	s11, s13, s12
 801e5b4:	ee36 6a47 	vsub.f32	s12, s12, s14
 801e5b8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801e5bc:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801e5c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e5c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e5c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e5cc:	ee10 3a10 	vmov	r3, s0
 801e5d0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801e5d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e5d8:	da1f      	bge.n	801e61a <__ieee754_powf+0x54a>
 801e5da:	f000 f843 	bl	801e664 <scalbnf>
 801e5de:	ee20 0a08 	vmul.f32	s0, s0, s16
 801e5e2:	e58d      	b.n	801e100 <__ieee754_powf+0x30>
 801e5e4:	4a1d      	ldr	r2, [pc, #116]	; (801e65c <__ieee754_powf+0x58c>)
 801e5e6:	4293      	cmp	r3, r2
 801e5e8:	dd07      	ble.n	801e5fa <__ieee754_powf+0x52a>
 801e5ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5f2:	bf4c      	ite	mi
 801e5f4:	2001      	movmi	r0, #1
 801e5f6:	2000      	movpl	r0, #0
 801e5f8:	e622      	b.n	801e240 <__ieee754_powf+0x170>
 801e5fa:	d108      	bne.n	801e60e <__ieee754_powf+0x53e>
 801e5fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e600:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801e604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e608:	f6ff af7a 	blt.w	801e500 <__ieee754_powf+0x430>
 801e60c:	e7ed      	b.n	801e5ea <__ieee754_powf+0x51a>
 801e60e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801e612:	f73f af75 	bgt.w	801e500 <__ieee754_powf+0x430>
 801e616:	2000      	movs	r0, #0
 801e618:	e78c      	b.n	801e534 <__ieee754_powf+0x464>
 801e61a:	ee00 3a10 	vmov	s0, r3
 801e61e:	e7de      	b.n	801e5de <__ieee754_powf+0x50e>
 801e620:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e624:	e56c      	b.n	801e100 <__ieee754_powf+0x30>
 801e626:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801e660 <__ieee754_powf+0x590>
 801e62a:	e569      	b.n	801e100 <__ieee754_powf+0x30>
 801e62c:	eeb0 0a48 	vmov.f32	s0, s16
 801e630:	e566      	b.n	801e100 <__ieee754_powf+0x30>
 801e632:	2600      	movs	r6, #0
 801e634:	e591      	b.n	801e15a <__ieee754_powf+0x8a>
 801e636:	bf00      	nop
 801e638:	ff800000 	.word	0xff800000
 801e63c:	3f317218 	.word	0x3f317218
 801e640:	3f317200 	.word	0x3f317200
 801e644:	35bfbe8c 	.word	0x35bfbe8c
 801e648:	b5ddea0e 	.word	0xb5ddea0e
 801e64c:	3331bb4c 	.word	0x3331bb4c
 801e650:	388ab355 	.word	0x388ab355
 801e654:	bb360b61 	.word	0xbb360b61
 801e658:	3e2aaaab 	.word	0x3e2aaaab
 801e65c:	43160000 	.word	0x43160000
 801e660:	00000000 	.word	0x00000000

0801e664 <scalbnf>:
 801e664:	ee10 3a10 	vmov	r3, s0
 801e668:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801e66c:	d02b      	beq.n	801e6c6 <scalbnf+0x62>
 801e66e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e672:	d302      	bcc.n	801e67a <scalbnf+0x16>
 801e674:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e678:	4770      	bx	lr
 801e67a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801e67e:	d123      	bne.n	801e6c8 <scalbnf+0x64>
 801e680:	4b24      	ldr	r3, [pc, #144]	; (801e714 <scalbnf+0xb0>)
 801e682:	eddf 7a25 	vldr	s15, [pc, #148]	; 801e718 <scalbnf+0xb4>
 801e686:	4298      	cmp	r0, r3
 801e688:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e68c:	db17      	blt.n	801e6be <scalbnf+0x5a>
 801e68e:	ee10 3a10 	vmov	r3, s0
 801e692:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e696:	3a19      	subs	r2, #25
 801e698:	f24c 3150 	movw	r1, #50000	; 0xc350
 801e69c:	4288      	cmp	r0, r1
 801e69e:	dd15      	ble.n	801e6cc <scalbnf+0x68>
 801e6a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e71c <scalbnf+0xb8>
 801e6a4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801e720 <scalbnf+0xbc>
 801e6a8:	ee10 3a10 	vmov	r3, s0
 801e6ac:	eeb0 7a67 	vmov.f32	s14, s15
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	bfb8      	it	lt
 801e6b4:	eef0 7a66 	vmovlt.f32	s15, s13
 801e6b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801e6bc:	4770      	bx	lr
 801e6be:	eddf 7a19 	vldr	s15, [pc, #100]	; 801e724 <scalbnf+0xc0>
 801e6c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e6c6:	4770      	bx	lr
 801e6c8:	0dd2      	lsrs	r2, r2, #23
 801e6ca:	e7e5      	b.n	801e698 <scalbnf+0x34>
 801e6cc:	4410      	add	r0, r2
 801e6ce:	28fe      	cmp	r0, #254	; 0xfe
 801e6d0:	dce6      	bgt.n	801e6a0 <scalbnf+0x3c>
 801e6d2:	2800      	cmp	r0, #0
 801e6d4:	dd06      	ble.n	801e6e4 <scalbnf+0x80>
 801e6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e6da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e6de:	ee00 3a10 	vmov	s0, r3
 801e6e2:	4770      	bx	lr
 801e6e4:	f110 0f16 	cmn.w	r0, #22
 801e6e8:	da09      	bge.n	801e6fe <scalbnf+0x9a>
 801e6ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e724 <scalbnf+0xc0>
 801e6ee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801e728 <scalbnf+0xc4>
 801e6f2:	ee10 3a10 	vmov	r3, s0
 801e6f6:	eeb0 7a67 	vmov.f32	s14, s15
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	e7d9      	b.n	801e6b2 <scalbnf+0x4e>
 801e6fe:	3019      	adds	r0, #25
 801e700:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e704:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e708:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801e72c <scalbnf+0xc8>
 801e70c:	ee07 3a90 	vmov	s15, r3
 801e710:	e7d7      	b.n	801e6c2 <scalbnf+0x5e>
 801e712:	bf00      	nop
 801e714:	ffff3cb0 	.word	0xffff3cb0
 801e718:	4c000000 	.word	0x4c000000
 801e71c:	7149f2ca 	.word	0x7149f2ca
 801e720:	f149f2ca 	.word	0xf149f2ca
 801e724:	0da24260 	.word	0x0da24260
 801e728:	8da24260 	.word	0x8da24260
 801e72c:	33000000 	.word	0x33000000

0801e730 <__ieee754_sqrtf>:
 801e730:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e734:	4770      	bx	lr
	...

0801e738 <_init>:
 801e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e73a:	bf00      	nop
 801e73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e73e:	bc08      	pop	{r3}
 801e740:	469e      	mov	lr, r3
 801e742:	4770      	bx	lr

0801e744 <_fini>:
 801e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e746:	bf00      	nop
 801e748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e74a:	bc08      	pop	{r3}
 801e74c:	469e      	mov	lr, r3
 801e74e:	4770      	bx	lr
