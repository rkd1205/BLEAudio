
SensorTileBox-DataLogExtended.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019cb0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08019e70  08019e70  00029e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a078  0801a078  00030658  2**0
                  CONTENTS
  4 .ARM          00000008  0801a078  0801a078  0002a078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a080  0801a080  00030658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a080  0801a080  0002a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801a088  0801a088  0002a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000658  20000000  0801a090  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b0  20000658  0801a6e8  00030658  2**3
                  ALLOC
 10 ._user_heap_stack 00009000  20002808  0801a6e8  00032808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030658  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030688  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004d386  00000000  00000000  000306cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b87  00000000  00000000  0007da51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004300  00000000  00000000  000855d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003362  00000000  00000000  000898d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d786  00000000  00000000  0008cc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001962a  00000000  00000000  000ba3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00012e88  00000000  00000000  000d39ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000122  00000000  00000000  000e6874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000658 	.word	0x20000658
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019e58 	.word	0x08019e58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000065c 	.word	0x2000065c
 80001fc:	08019e58 	.word	0x08019e58

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d103      	bne.n	8000eec <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e034      	b.n	8000f56 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	7b1a      	ldrb	r2, [r3, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	699a      	ldr	r2, [r3, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HTS221_RegisterBusIO+0x8c>)
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HTS221_RegisterBusIO+0x90>)
 8000f2e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4798      	blx	r3
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	e002      	b.n	8000f56 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f54:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	08001657 	.word	0x08001657
 8000f64:	080016b9 	.word	0x080016b9

08000f68 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d108      	bne.n	8000f8c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fb06 	bl	800158c <HTS221_Initialize>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8a:	e004      	b.n	8000f96 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d111      	bne.n	8000fd4 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f878 	bl	80010a6 <HTS221_HUM_Disable>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc0:	e00d      	b.n	8000fde <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f975 	bl	80012b2 <HTS221_TEMP_Disable>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd2:	e004      	b.n	8000fde <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3320      	adds	r3, #32
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fcbc 	bl	8001974 <hts221_device_id_get>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	e000      	b.n	800100a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HTS221_GetCapabilities+0x44>)
 800103a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HTS221_GetCapabilities+0x44>)
 8001040:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	41480000 	.word	0x41480000

0800105c <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e015      	b.n	800109e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3320      	adds	r3, #32
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fc87 	bl	8001996 <hts221_power_on_set>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001092:	e004      	b.n	800109e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e015      	b.n	80010e8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10b      	bne.n	80010de <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3320      	adds	r3, #32
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fc62 	bl	8001996 <hts221_power_on_set>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	e004      	b.n	80010e8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f9d1 	bl	80014a4 <HTS221_GetOutputDataRate>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001118:	ed97 0a00 	vldr	s0, [r7]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fa05 	bl	800152c <HTS221_SetOutputDataRate>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3320      	adds	r3, #32
 800113a:	f107 020c 	add.w	r2, r7, #12
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fcec 	bl	8001b1e <hts221_hum_adc_point_0_get>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	e06b      	b.n	800122a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f103 0220 	add.w	r2, r3, #32
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	3304      	adds	r3, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f000 fc3e 	bl	80019e2 <hts221_hum_rh_point_0_get>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001170:	e05b      	b.n	800122a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f103 0220 	add.w	r2, r3, #32
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	3308      	adds	r3, #8
 800117e:	4619      	mov	r1, r3
 8001180:	4610      	mov	r0, r2
 8001182:	f000 fcf0 	bl	8001b66 <hts221_hum_adc_point_1_get>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001190:	e04b      	b.n	800122a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f103 0220 	add.w	r2, r3, #32
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	330c      	adds	r3, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f000 fc3c 	bl	8001a1e <hts221_hum_rh_point_1_get>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b0:	e03b      	b.n	800122a <HTS221_HUM_GetHumidity+0xfe>
 80011b2:	2300      	movs	r3, #0
 80011b4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3320      	adds	r3, #32
 80011ba:	f107 021c 	add.w	r2, r7, #28
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fb91 	bl	80018e8 <hts221_humidity_raw_get>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d0:	e02b      	b.n	800122a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80011d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f9fc 	bl	80015e4 <Linear_Interpolation>
 80011ec:	eef0 7a40 	vmov.f32	s15, s0
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	d503      	bpl.n	800120e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001234 <HTS221_HUM_GetHumidity+0x108>
 8001218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	dd02      	ble.n	8001228 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HTS221_HUM_GetHumidity+0x10c>)
 8001226:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	42c80000 	.word	0x42c80000
 8001238:	42c80000 	.word	0x42c80000

0800123c <HTS221_HUM_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Get_DRDY_Status(HTS221_Object_t *pObj, uint8_t *Status)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  if (hts221_hum_data_ready_get(&(pObj->Ctx), Status) != HTS221_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3320      	adds	r3, #32
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fb32 	bl	80018b6 <hts221_hum_data_ready_get>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HTS221_HUM_Get_DRDY_Status+0x22>
  {
    return HTS221_ERROR;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125c:	e000      	b.n	8001260 <HTS221_HUM_Get_DRDY_Status+0x24>
  }

  return HTS221_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e015      	b.n	80012aa <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3320      	adds	r3, #32
 800128c:	2101      	movs	r1, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fb81 	bl	8001996 <hts221_power_on_set>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129e:	e004      	b.n	80012aa <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e015      	b.n	80012f4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10b      	bne.n	80012ea <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3320      	adds	r3, #32
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fb5c 	bl	8001996 <hts221_power_on_set>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	e004      	b.n	80012f4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8cb 	bl	80014a4 <HTS221_GetOutputDataRate>
 800130e:	4603      	mov	r3, r0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001324:	ed97 0a00 	vldr	s0, [r7]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f8ff 	bl	800152c <HTS221_SetOutputDataRate>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3320      	adds	r3, #32
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fc2e 	bl	8001bae <hts221_temp_adc_point_0_get>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135c:	e052      	b.n	8001404 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f103 0220 	add.w	r2, r3, #32
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	3304      	adds	r3, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f000 fb74 	bl	8001a5a <hts221_temp_deg_point_0_get>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137c:	e042      	b.n	8001404 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f103 0220 	add.w	r2, r3, #32
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	3308      	adds	r3, #8
 800138a:	4619      	mov	r1, r3
 800138c:	4610      	mov	r0, r2
 800138e:	f000 fc32 	bl	8001bf6 <hts221_temp_adc_point_1_get>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139c:	e032      	b.n	8001404 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f103 0220 	add.w	r2, r3, #32
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	330c      	adds	r3, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4610      	mov	r0, r2
 80013ae:	f000 fb85 	bl	8001abc <hts221_temp_deg_point_1_get>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013bc:	e022      	b.n	8001404 <HTS221_TEMP_GetTemperature+0xcc>
 80013be:	2300      	movs	r3, #0
 80013c0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3320      	adds	r3, #32
 80013c6:	f107 021c 	add.w	r2, r7, #28
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 faae 	bl	800192e <hts221_temperature_raw_get>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013dc:	e012      	b.n	8001404 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80013de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f8f6 	bl	80015e4 <Linear_Interpolation>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HTS221_TEMP_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Get_DRDY_Status(HTS221_Object_t *pObj, uint8_t *Status)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  if (hts221_temp_data_ready_get(&(pObj->Ctx), Status) != HTS221_OK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3320      	adds	r3, #32
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa31 	bl	8001884 <hts221_temp_data_ready_get>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <HTS221_TEMP_Get_DRDY_Status+0x22>
  {
    return HTS221_ERROR;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142c:	e000      	b.n	8001430 <HTS221_TEMP_Get_DRDY_Status+0x24>
  }

  return HTS221_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HTS221_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Read_Reg(HTS221_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	460b      	mov	r3, r1
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	72fb      	strb	r3, [r7, #11]
  if (hts221_read_reg(&(pObj->Ctx), Reg, Data, 1) != HTS221_OK)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f103 0020 	add.w	r0, r3, #32
 800144c:	7af9      	ldrb	r1, [r7, #11]
 800144e:	2301      	movs	r3, #1
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	f000 f962 	bl	800171a <hts221_read_reg>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HTS221_Read_Reg+0x2a>
  {
    return HTS221_ERROR;
 800145c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001460:	e000      	b.n	8001464 <HTS221_Read_Reg+0x2c>
  }

  return HTS221_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HTS221_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Write_Reg(HTS221_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
 8001478:	4613      	mov	r3, r2
 800147a:	70bb      	strb	r3, [r7, #2]
  if (hts221_write_reg(&(pObj->Ctx), Reg, &Data, 1) != HTS221_OK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0020 	add.w	r0, r3, #32
 8001482:	1cba      	adds	r2, r7, #2
 8001484:	78f9      	ldrb	r1, [r7, #3]
 8001486:	2301      	movs	r3, #1
 8001488:	f000 f95f 	bl	800174a <hts221_write_reg>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <HTS221_Write_Reg+0x2c>
  {
    return HTS221_ERROR;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001496:	e000      	b.n	800149a <HTS221_Write_Reg+0x2e>
  }

  return HTS221_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3320      	adds	r3, #32
 80014b6:	f107 020b 	add.w	r2, r7, #11
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f983 	bl	80017c8 <hts221_data_rate_get>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	e025      	b.n	800151a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d81d      	bhi.n	8001510 <HTS221_GetOutputDataRate+0x6c>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <HTS221_GetOutputDataRate+0x38>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	080014f7 	.word	0x080014f7
 80014e4:	08001501 	.word	0x08001501
 80014e8:	08001509 	.word	0x08001509
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
      break;
 80014f4:	e010      	b.n	8001518 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014fc:	601a      	str	r2, [r3, #0]
      break;
 80014fe:	e00b      	b.n	8001518 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HTS221_GetOutputDataRate+0x80>)
 8001504:	601a      	str	r2, [r3, #0]
      break;
 8001506:	e007      	b.n	8001518 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HTS221_GetOutputDataRate+0x84>)
 800150c:	601a      	str	r2, [r3, #0]
      break;
 800150e:	e003      	b.n	8001518 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001514:	60fb      	str	r3, [r7, #12]
      break;
 8001516:	bf00      	nop
  }

  return ret;
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40e00000 	.word	0x40e00000
 8001528:	41480000 	.word	0x41480000

0800152c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001538:	edd7 7a00 	vldr	s15, [r7]
 800153c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d801      	bhi.n	800154e <HTS221_SetOutputDataRate+0x22>
 800154a:	2301      	movs	r3, #1
 800154c:	e00b      	b.n	8001566 <HTS221_SetOutputDataRate+0x3a>
 800154e:	edd7 7a00 	vldr	s15, [r7]
 8001552:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	d801      	bhi.n	8001564 <HTS221_SetOutputDataRate+0x38>
 8001560:	2302      	movs	r3, #2
 8001562:	e000      	b.n	8001566 <HTS221_SetOutputDataRate+0x3a>
 8001564:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001566:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3320      	adds	r3, #32
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f902 	bl	800177a <hts221_data_rate_set>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001580:	e000      	b.n	8001584 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3320      	adds	r3, #32
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f9fb 	bl	8001996 <hts221_power_on_set>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015aa:	e017      	b.n	80015dc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3320      	adds	r3, #32
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f940 	bl	8001838 <hts221_block_data_update_set>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c2:	e00b      	b.n	80015dc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80015c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffaf 	bl	800152c <HTS221_SetOutputDataRate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d8:	e000      	b.n	80015dc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001600:	edd7 7a00 	vldr	s15, [r7]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	edd3 6a02 	vldr	s13, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	edd3 7a01 	vldr	s15, [r3, #4]
 8001614:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	ed93 6a00 	vldr	s12, [r3]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	edd3 7a03 	vldr	s15, [r3, #12]
 8001624:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001628:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800162c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edd3 6a02 	vldr	s13, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001644:	eef0 7a66 	vmov.f32	s15, s13
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001656:	b590      	push	{r4, r7, lr}
 8001658:	b087      	sub	sp, #28
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	461a      	mov	r2, r3
 8001662:	460b      	mov	r3, r1
 8001664:	72fb      	strb	r3, [r7, #11]
 8001666:	4613      	mov	r3, r2
 8001668:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	695c      	ldr	r4, [r3, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	b298      	uxth	r0, r3
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001686:	b2db      	uxtb	r3, r3
 8001688:	b299      	uxth	r1, r3
 800168a:	893b      	ldrh	r3, [r7, #8]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	47a0      	blx	r4
 8001690:	4603      	mov	r3, r0
 8001692:	e00d      	b.n	80016b0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	695c      	ldr	r4, [r3, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	b298      	uxth	r0, r3
 800169e:	7afb      	ldrb	r3, [r7, #11]
 80016a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b299      	uxth	r1, r3
 80016a8:	893b      	ldrh	r3, [r7, #8]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	47a0      	blx	r4
 80016ae:	4603      	mov	r3, r0
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}

080016b8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	72fb      	strb	r3, [r7, #11]
 80016c8:	4613      	mov	r3, r2
 80016ca:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10e      	bne.n	80016f6 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	691c      	ldr	r4, [r3, #16]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	7b1b      	ldrb	r3, [r3, #12]
 80016e0:	b298      	uxth	r0, r3
 80016e2:	7afb      	ldrb	r3, [r7, #11]
 80016e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b299      	uxth	r1, r3
 80016ec:	893b      	ldrh	r3, [r7, #8]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	47a0      	blx	r4
 80016f2:	4603      	mov	r3, r0
 80016f4:	e00d      	b.n	8001712 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	691c      	ldr	r4, [r3, #16]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	7b1b      	ldrb	r3, [r3, #12]
 80016fe:	b298      	uxth	r0, r3
 8001700:	7afb      	ldrb	r3, [r7, #11]
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b299      	uxth	r1, r3
 800170a:	893b      	ldrh	r3, [r7, #8]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	47a0      	blx	r4
 8001710:	4603      	mov	r3, r0
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}

0800171a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800171a:	b590      	push	{r4, r7, lr}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	461a      	mov	r2, r3
 8001726:	460b      	mov	r3, r1
 8001728:	72fb      	strb	r3, [r7, #11]
 800172a:	4613      	mov	r3, r2
 800172c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	685c      	ldr	r4, [r3, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	68d8      	ldr	r0, [r3, #12]
 8001736:	893b      	ldrh	r3, [r7, #8]
 8001738:	7af9      	ldrb	r1, [r7, #11]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	47a0      	blx	r4
 800173e:	6178      	str	r0, [r7, #20]

  return ret;
 8001740:	697b      	ldr	r3, [r7, #20]
}
 8001742:	4618      	mov	r0, r3
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}

0800174a <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800174a:	b590      	push	{r4, r7, lr}
 800174c:	b087      	sub	sp, #28
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	461a      	mov	r2, r3
 8001756:	460b      	mov	r3, r1
 8001758:	72fb      	strb	r3, [r7, #11]
 800175a:	4613      	mov	r3, r2
 800175c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681c      	ldr	r4, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68d8      	ldr	r0, [r3, #12]
 8001766:	893b      	ldrh	r3, [r7, #8]
 8001768:	7af9      	ldrb	r1, [r7, #11]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	47a0      	blx	r4
 800176e:	6178      	str	r0, [r7, #20]

  return ret;
 8001770:	697b      	ldr	r3, [r7, #20]
}
 8001772:	4618      	mov	r0, r3
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}

0800177a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001786:	f107 0208 	add.w	r2, r7, #8
 800178a:	2301      	movs	r3, #1
 800178c:	2120      	movs	r1, #32
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffc3 	bl	800171a <hts221_read_reg>
 8001794:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10f      	bne.n	80017bc <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7a3b      	ldrb	r3, [r7, #8]
 80017a6:	f362 0301 	bfi	r3, r2, #0, #2
 80017aa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017ac:	f107 0208 	add.w	r2, r7, #8
 80017b0:	2301      	movs	r3, #1
 80017b2:	2120      	movs	r1, #32
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffc8 	bl	800174a <hts221_write_reg>
 80017ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017bc:	68fb      	ldr	r3, [r7, #12]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017d2:	f107 0208 	add.w	r2, r7, #8
 80017d6:	2301      	movs	r3, #1
 80017d8:	2120      	movs	r1, #32
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff9d 	bl	800171a <hts221_read_reg>
 80017e0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80017e2:	7a3b      	ldrb	r3, [r7, #8]
 80017e4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d81a      	bhi.n	8001824 <hts221_data_rate_get+0x5c>
 80017ee:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <hts221_data_rate_get+0x2c>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	08001805 	.word	0x08001805
 80017f8:	0800180d 	.word	0x0800180d
 80017fc:	08001815 	.word	0x08001815
 8001800:	0800181d 	.word	0x0800181d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
      break;
 800180a:	e00f      	b.n	800182c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
      break;
 8001812:	e00b      	b.n	800182c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
      break;
 800181a:	e007      	b.n	800182c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2203      	movs	r2, #3
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	e003      	b.n	800182c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2204      	movs	r2, #4
 8001828:	701a      	strb	r2, [r3, #0]
      break;
 800182a:	bf00      	nop
  }

  return ret;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop

08001838 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	2301      	movs	r3, #1
 800184a:	2120      	movs	r1, #32
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff64 	bl	800171a <hts221_read_reg>
 8001852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	7a3b      	ldrb	r3, [r7, #8]
 8001864:	f362 0382 	bfi	r3, r2, #2, #1
 8001868:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800186a:	f107 0208 	add.w	r2, r7, #8
 800186e:	2301      	movs	r3, #1
 8001870:	2120      	movs	r1, #32
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff69 	bl	800174a <hts221_write_reg>
 8001878:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <hts221_temp_data_ready_get>:
  * @param  val     change the values of t_da in reg STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  hts221_status_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) &reg, 1);
 800188e:	f107 0208 	add.w	r2, r7, #8
 8001892:	2301      	movs	r3, #1
 8001894:	2127      	movs	r1, #39	; 0x27
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff3f 	bl	800171a <hts221_read_reg>
 800189c:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 800189e:	7a3b      	ldrb	r3, [r7, #8]
 80018a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	701a      	strb	r2, [r3, #0]

  return ret;
 80018ac:	68fb      	ldr	r3, [r7, #12]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <hts221_hum_data_ready_get>:
  * @param  val     change the values of h_da in reg STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  hts221_status_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) &reg, 1);
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	2301      	movs	r3, #1
 80018c6:	2127      	movs	r1, #39	; 0x27
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff26 	bl	800171a <hts221_read_reg>
 80018ce:	60f8      	str	r0, [r7, #12]
  *val = reg.h_da;
 80018d0:	7a3b      	ldrb	r3, [r7, #8]
 80018d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80018f2:	f107 0208 	add.w	r2, r7, #8
 80018f6:	2302      	movs	r3, #2
 80018f8:	2128      	movs	r1, #40	; 0x28
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff0d 	bl	800171a <hts221_read_reg>
 8001900:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001902:	7a7b      	ldrb	r3, [r7, #9]
 8001904:	b21a      	sxth	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	b29b      	uxth	r3, r3
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b29a      	uxth	r2, r3
 8001916:	7a3b      	ldrb	r3, [r7, #8]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	b21a      	sxth	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	801a      	strh	r2, [r3, #0]

  return ret;
 8001924:	68fb      	ldr	r3, [r7, #12]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001938:	f107 0208 	add.w	r2, r7, #8
 800193c:	2302      	movs	r3, #2
 800193e:	212a      	movs	r1, #42	; 0x2a
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff feea 	bl	800171a <hts221_read_reg>
 8001946:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001948:	7a7b      	ldrb	r3, [r7, #9]
 800194a:	b21a      	sxth	r2, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	b29b      	uxth	r3, r3
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b29a      	uxth	r2, r3
 800195c:	7a3b      	ldrb	r3, [r7, #8]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	b21a      	sxth	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	801a      	strh	r2, [r3, #0]

  return ret;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800197e:	2301      	movs	r3, #1
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	210f      	movs	r1, #15
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fec8 	bl	800171a <hts221_read_reg>
 800198a:	60f8      	str	r0, [r7, #12]

  return ret;
 800198c:	68fb      	ldr	r3, [r7, #12]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	2301      	movs	r3, #1
 80019a8:	2120      	movs	r1, #32
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff feb5 	bl	800171a <hts221_read_reg>
 80019b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	7a3b      	ldrb	r3, [r7, #8]
 80019c2:	f362 13c7 	bfi	r3, r2, #7, #1
 80019c6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80019c8:	f107 0208 	add.w	r2, r7, #8
 80019cc:	2301      	movs	r3, #1
 80019ce:	2120      	movs	r1, #32
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff feba 	bl	800174a <hts221_write_reg>
 80019d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019d8:	68fb      	ldr	r3, [r7, #12]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80019ec:	f107 020b 	add.w	r2, r7, #11
 80019f0:	2301      	movs	r3, #1
 80019f2:	2130      	movs	r1, #48	; 0x30
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fe90 	bl	800171a <hts221_read_reg>
 80019fa:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001a14:	68fb      	ldr	r3, [r7, #12]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001a28:	f107 020b 	add.w	r2, r7, #11
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	2131      	movs	r1, #49	; 0x31
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fe72 	bl	800171a <hts221_read_reg>
 8001a36:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001a64:	f107 020f 	add.w	r2, r7, #15
 8001a68:	2301      	movs	r3, #1
 8001a6a:	2132      	movs	r1, #50	; 0x32
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fe54 	bl	800171a <hts221_read_reg>
 8001a72:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11b      	bne.n	8001ab2 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001a7a:	f107 0210 	add.w	r2, r7, #16
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2135      	movs	r1, #53	; 0x35
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fe49 	bl	800171a <hts221_read_reg>
 8001a88:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001a8a:	7c3b      	ldrb	r3, [r7, #16]
 8001a8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001ab2:	697b      	ldr	r3, [r7, #20]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001ac6:	f107 020f 	add.w	r2, r7, #15
 8001aca:	2301      	movs	r3, #1
 8001acc:	2133      	movs	r1, #51	; 0x33
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fe23 	bl	800171a <hts221_read_reg>
 8001ad4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11b      	bne.n	8001b14 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001adc:	f107 0210 	add.w	r2, r7, #16
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2135      	movs	r1, #53	; 0x35
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fe18 	bl	800171a <hts221_read_reg>
 8001aea:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001aec:	7c3b      	ldrb	r3, [r7, #16]
 8001aee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001af6:	7cfb      	ldrb	r3, [r7, #19]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	4413      	add	r3, r2
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001b14:	697b      	ldr	r3, [r7, #20]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001b28:	f107 0208 	add.w	r2, r7, #8
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	2136      	movs	r1, #54	; 0x36
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fdf2 	bl	800171a <hts221_read_reg>
 8001b36:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	7a3b      	ldrb	r3, [r7, #8]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001b4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001b70:	f107 0208 	add.w	r2, r7, #8
 8001b74:	2302      	movs	r3, #2
 8001b76:	213a      	movs	r1, #58	; 0x3a
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fdce 	bl	800171a <hts221_read_reg>
 8001b7e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7a3b      	ldrb	r3, [r7, #8]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001b92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001bb8:	f107 0208 	add.w	r2, r7, #8
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	213c      	movs	r1, #60	; 0x3c
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fdaa 	bl	800171a <hts221_read_reg>
 8001bc6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	7a3b      	ldrb	r3, [r7, #8]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001bda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001bec:	68fb      	ldr	r3, [r7, #12]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001c00:	f107 0208 	add.w	r2, r7, #8
 8001c04:	2302      	movs	r3, #2
 8001c06:	213e      	movs	r1, #62	; 0x3e
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fd86 	bl	800171a <hts221_read_reg>
 8001c0e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	7a3b      	ldrb	r3, [r7, #8]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001c22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001c34:	68fb      	ldr	r3, [r7, #12]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d103      	bne.n	8001c5c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e051      	b.n	8001d00 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	7b1a      	ldrb	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <LIS2DW12_RegisterBusIO+0xcc>)
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <LIS2DW12_RegisterBusIO+0xd0>)
 8001c9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e020      	b.n	8001d00 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4798      	blx	r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	e016      	b.n	8001d00 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d112      	bne.n	8001d00 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001ce4:	2305      	movs	r3, #5
 8001ce6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	461a      	mov	r2, r3
 8001cec:	2121      	movs	r1, #33	; 0x21
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fcdb 	bl	80026aa <LIS2DW12_Write_Reg>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08002a69 	.word	0x08002a69
 8001d10:	08002a9f 	.word	0x08002a9f

08001d14 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3320      	adds	r3, #32
 8001d20:	2101      	movs	r1, #1
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fa17 	bl	8003156 <lis2dw12_auto_increment_set>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d32:	e04b      	b.n	8001dcc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3320      	adds	r3, #32
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 f912 	bl	8002f64 <lis2dw12_block_data_update_set>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4a:	e03f      	b.n	8001dcc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3320      	adds	r3, #32
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fa25 	bl	80031a2 <lis2dw12_fifo_mode_set>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d62:	e033      	b.n	8001dcc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3320      	adds	r3, #32
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fee2 	bl	8002b34 <lis2dw12_power_mode_set>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7a:	e027      	b.n	8001dcc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <LIS2DW12_Init+0xc0>)
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3320      	adds	r3, #32
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 ffd3 	bl	8002d44 <lis2dw12_data_rate_set>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	e010      	b.n	8001dcc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3320      	adds	r3, #32
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 f8fd 	bl	8002fb0 <lis2dw12_full_scale_set>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc0:	e004      	b.n	8001dcc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	42c80000 	.word	0x42c80000

08001dd8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f888 	bl	8001ef6 <LIS2DW12_ACC_Disable>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df0:	e010      	b.n	8001e14 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3320      	adds	r3, #32
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 f981 	bl	8003134 <lis2dw12_device_id_get>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3c:	e000      	b.n	8001e40 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2210      	movs	r2, #16
 8001e74:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <LIS2DW12_GetCapabilities+0x58>)
 8001e88:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	44c80000 	.word	0x44c80000

08001ea4 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e019      	b.n	8001eee <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ecc:	461a      	mov	r2, r3
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fc1a 	bl	800270c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee2:	e004      	b.n	8001eee <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e010      	b.n	8001f2e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 ff16 	bl	8002d44 <lis2dw12_data_rate_set>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	e004      	b.n	8001f2e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3320      	adds	r3, #32
 8001f4a:	f107 020b 	add.w	r2, r7, #11
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f853 	bl	8002ffc <lis2dw12_full_scale_get>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f60:	e080      	b.n	8002064 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3320      	adds	r3, #32
 8001f66:	f107 020a 	add.w	r2, r7, #10
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fe2f 	bl	8002bd0 <lis2dw12_power_mode_get>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7c:	e072      	b.n	8002064 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8001f7e:	7abb      	ldrb	r3, [r7, #10]
 8001f80:	2b1b      	cmp	r3, #27
 8001f82:	bf8c      	ite	hi
 8001f84:	2201      	movhi	r2, #1
 8001f86:	2200      	movls	r2, #0
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d162      	bne.n	8002054 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8001f8e:	2201      	movs	r2, #1
 8001f90:	409a      	lsls	r2, r3
 8001f92:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8001f96:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12f      	bne.n	8002008 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8001fa8:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d04c      	beq.n	8002054 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d81b      	bhi.n	8001ff8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8001fc0:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001fe1 	.word	0x08001fe1
 8001fd0:	08001fe9 	.word	0x08001fe9
 8001fd4:	08001ff1 	.word	0x08001ff1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4a24      	ldr	r2, [pc, #144]	; (800206c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8001fdc:	601a      	str	r2, [r3, #0]
          break;
 8001fde:	e012      	b.n	8002006 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4a23      	ldr	r2, [pc, #140]	; (8002070 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001fe4:	601a      	str	r2, [r3, #0]
          break;
 8001fe6:	e00e      	b.n	8002006 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4a22      	ldr	r2, [pc, #136]	; (8002074 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8001fec:	601a      	str	r2, [r3, #0]
          break;
 8001fee:	e00a      	b.n	8002006 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8001ff4:	601a      	str	r2, [r3, #0]
          break;
 8001ff6:	e006      	b.n	8002006 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4a20      	ldr	r2, [pc, #128]	; (800207c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001ffc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002002:	60fb      	str	r3, [r7, #12]
          break;
 8002004:	bf00      	nop
      }
      break;
 8002006:	e02c      	b.n	8002062 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002008:	7afb      	ldrb	r3, [r7, #11]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d81a      	bhi.n	8002044 <LIS2DW12_ACC_GetSensitivity+0x10c>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	0800202d 	.word	0x0800202d
 800201c:	08002035 	.word	0x08002035
 8002020:	0800203d 	.word	0x0800203d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8002028:	601a      	str	r2, [r3, #0]
          break;
 800202a:	e012      	b.n	8002052 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8002030:	601a      	str	r2, [r3, #0]
          break;
 8002032:	e00e      	b.n	8002052 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4a0d      	ldr	r2, [pc, #52]	; (800206c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002038:	601a      	str	r2, [r3, #0]
          break;
 800203a:	e00a      	b.n	8002052 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002040:	601a      	str	r2, [r3, #0]
          break;
 8002042:	e006      	b.n	8002052 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4a0d      	ldr	r2, [pc, #52]	; (800207c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002048:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204e:	60fb      	str	r3, [r7, #12]
          break;
 8002050:	bf00      	nop
      }
      break;
 8002052:	e006      	b.n	8002062 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002058:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205e:	60fb      	str	r3, [r7, #12]
      break;
 8002060:	bf00      	nop
  }

  return ret;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	3f79db23 	.word	0x3f79db23
 8002070:	3ff9db23 	.word	0x3ff9db23
 8002074:	4079db23 	.word	0x4079db23
 8002078:	40f9db23 	.word	0x40f9db23
 800207c:	bf800000 	.word	0xbf800000
 8002080:	3e79db23 	.word	0x3e79db23
 8002084:	3ef9db23 	.word	0x3ef9db23

08002088 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3320      	adds	r3, #32
 800209a:	f107 020b 	add.w	r2, r7, #11
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fe95 	bl	8002dd0 <lis2dw12_data_rate_get>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b0:	e14f      	b.n	8002352 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3320      	adds	r3, #32
 80020b6:	f107 020a 	add.w	r2, r7, #10
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd87 	bl	8002bd0 <lis2dw12_power_mode_get>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020cc:	e141      	b.n	8002352 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	2b32      	cmp	r3, #50	; 0x32
 80020d2:	f200 8136 	bhi.w	8002342 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080021a9 	.word	0x080021a9
 80020e0:	080021b3 	.word	0x080021b3
 80020e4:	0800220d 	.word	0x0800220d
 80020e8:	08002215 	.word	0x08002215
 80020ec:	0800221d 	.word	0x0800221d
 80020f0:	08002225 	.word	0x08002225
 80020f4:	0800222d 	.word	0x0800222d
 80020f8:	08002235 	.word	0x08002235
 80020fc:	0800228f 	.word	0x0800228f
 8002100:	080022e9 	.word	0x080022e9
 8002104:	08002343 	.word	0x08002343
 8002108:	08002343 	.word	0x08002343
 800210c:	08002343 	.word	0x08002343
 8002110:	08002343 	.word	0x08002343
 8002114:	08002343 	.word	0x08002343
 8002118:	08002343 	.word	0x08002343
 800211c:	08002343 	.word	0x08002343
 8002120:	08002343 	.word	0x08002343
 8002124:	080021a9 	.word	0x080021a9
 8002128:	08002343 	.word	0x08002343
 800212c:	08002343 	.word	0x08002343
 8002130:	08002343 	.word	0x08002343
 8002134:	08002343 	.word	0x08002343
 8002138:	08002343 	.word	0x08002343
 800213c:	08002343 	.word	0x08002343
 8002140:	08002343 	.word	0x08002343
 8002144:	08002343 	.word	0x08002343
 8002148:	08002343 	.word	0x08002343
 800214c:	08002343 	.word	0x08002343
 8002150:	08002343 	.word	0x08002343
 8002154:	08002343 	.word	0x08002343
 8002158:	08002343 	.word	0x08002343
 800215c:	08002343 	.word	0x08002343
 8002160:	08002343 	.word	0x08002343
 8002164:	08002343 	.word	0x08002343
 8002168:	08002343 	.word	0x08002343
 800216c:	08002343 	.word	0x08002343
 8002170:	08002343 	.word	0x08002343
 8002174:	08002343 	.word	0x08002343
 8002178:	08002343 	.word	0x08002343
 800217c:	08002343 	.word	0x08002343
 8002180:	08002343 	.word	0x08002343
 8002184:	08002343 	.word	0x08002343
 8002188:	08002343 	.word	0x08002343
 800218c:	08002343 	.word	0x08002343
 8002190:	08002343 	.word	0x08002343
 8002194:	08002343 	.word	0x08002343
 8002198:	08002343 	.word	0x08002343
 800219c:	08002343 	.word	0x08002343
 80021a0:	08002343 	.word	0x08002343
 80021a4:	080021a9 	.word	0x080021a9
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
      break;
 80021b0:	e0ce      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80021b2:	7abb      	ldrb	r3, [r7, #10]
 80021b4:	2b1b      	cmp	r3, #27
 80021b6:	bf8c      	ite	hi
 80021b8:	2201      	movhi	r2, #1
 80021ba:	2200      	movls	r2, #0
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d11c      	bne.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x174>
 80021c2:	2201      	movs	r2, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2201      	movne	r2, #1
 80021d2:	2200      	moveq	r2, #0
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	2a00      	cmp	r2, #0
 80021d8:	d10c      	bne.n	80021f4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 80021da:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4a5b      	ldr	r2, [pc, #364]	; (800235c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80021f0:	601a      	str	r2, [r3, #0]
          break;
 80021f2:	e00a      	b.n	800220a <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80021f8:	601a      	str	r2, [r3, #0]
          break;
 80021fa:	e006      	b.n	800220a <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4a59      	ldr	r2, [pc, #356]	; (8002364 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002200:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002206:	60fb      	str	r3, [r7, #12]
          break;
 8002208:	bf00      	nop
      }
      break;
 800220a:	e0a1      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8002210:	601a      	str	r2, [r3, #0]
      break;
 8002212:	e09d      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4a54      	ldr	r2, [pc, #336]	; (8002368 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8002218:	601a      	str	r2, [r3, #0]
      break;
 800221a:	e099      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4a53      	ldr	r2, [pc, #332]	; (800236c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8002220:	601a      	str	r2, [r3, #0]
      break;
 8002222:	e095      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4a52      	ldr	r2, [pc, #328]	; (8002370 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8002228:	601a      	str	r2, [r3, #0]
      break;
 800222a:	e091      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4a51      	ldr	r2, [pc, #324]	; (8002374 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8002230:	601a      	str	r2, [r3, #0]
      break;
 8002232:	e08d      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002234:	7abb      	ldrb	r3, [r7, #10]
 8002236:	2b1b      	cmp	r3, #27
 8002238:	bf8c      	ite	hi
 800223a:	2201      	movhi	r2, #1
 800223c:	2200      	movls	r2, #0
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	2a00      	cmp	r2, #0
 8002242:	d11c      	bne.n	800227e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8002244:	2201      	movs	r2, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800224e:	2a00      	cmp	r2, #0
 8002250:	bf14      	ite	ne
 8002252:	2201      	movne	r2, #1
 8002254:	2200      	moveq	r2, #0
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	2a00      	cmp	r2, #0
 800225a:	d10c      	bne.n	8002276 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 800225c:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4a41      	ldr	r2, [pc, #260]	; (8002378 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8002272:	601a      	str	r2, [r3, #0]
          break;
 8002274:	e00a      	b.n	800228c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800227a:	601a      	str	r2, [r3, #0]
          break;
 800227c:	e006      	b.n	800228c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	4a38      	ldr	r2, [pc, #224]	; (8002364 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002282:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002288:	60fb      	str	r3, [r7, #12]
          break;
 800228a:	bf00      	nop
      }
      break;
 800228c:	e060      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800228e:	7abb      	ldrb	r3, [r7, #10]
 8002290:	2b1b      	cmp	r3, #27
 8002292:	bf8c      	ite	hi
 8002294:	2201      	movhi	r2, #1
 8002296:	2200      	movls	r2, #0
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	2a00      	cmp	r2, #0
 800229c:	d11c      	bne.n	80022d8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2201      	movne	r2, #1
 80022ae:	2200      	moveq	r2, #0
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	2a00      	cmp	r2, #0
 80022b4:	d10c      	bne.n	80022d0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 80022b6:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80022cc:	601a      	str	r2, [r3, #0]
          break;
 80022ce:	e00a      	b.n	80022e6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4a28      	ldr	r2, [pc, #160]	; (8002374 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80022d4:	601a      	str	r2, [r3, #0]
          break;
 80022d6:	e006      	b.n	80022e6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80022dc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022e2:	60fb      	str	r3, [r7, #12]
          break;
 80022e4:	bf00      	nop
      }
      break;
 80022e6:	e033      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80022e8:	7abb      	ldrb	r3, [r7, #10]
 80022ea:	2b1b      	cmp	r3, #27
 80022ec:	bf8c      	ite	hi
 80022ee:	2201      	movhi	r2, #1
 80022f0:	2200      	movls	r2, #0
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d11c      	bne.n	8002332 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80022f8:	2201      	movs	r2, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002302:	2a00      	cmp	r2, #0
 8002304:	bf14      	ite	ne
 8002306:	2201      	movne	r2, #1
 8002308:	2200      	moveq	r2, #0
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	2a00      	cmp	r2, #0
 800230e:	d10c      	bne.n	800232a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8002310:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	4a16      	ldr	r2, [pc, #88]	; (8002380 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8002326:	601a      	str	r2, [r3, #0]
          break;
 8002328:	e00a      	b.n	8002340 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800232e:	601a      	str	r2, [r3, #0]
          break;
 8002330:	e006      	b.n	8002340 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002336:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233c:	60fb      	str	r3, [r7, #12]
          break;
 800233e:	bf00      	nop
      }
      break;
 8002340:	e006      	b.n	8002350 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8002346:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800234c:	60fb      	str	r3, [r7, #12]
      break;
 800234e:	bf00      	nop
  }

  return ret;
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	41480000 	.word	0x41480000
 8002360:	3fcccccd 	.word	0x3fcccccd
 8002364:	bf800000 	.word	0xbf800000
 8002368:	41c80000 	.word	0x41c80000
 800236c:	42480000 	.word	0x42480000
 8002370:	42c80000 	.word	0x42c80000
 8002374:	43480000 	.word	0x43480000
 8002378:	43c80000 	.word	0x43c80000
 800237c:	44480000 	.word	0x44480000
 8002380:	44c80000 	.word	0x44c80000

08002384 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	ed97 0a00 	vldr	s0, [r7]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f805 	bl	80023a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80023b4:	460b      	mov	r3, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d109      	bne.n	80023da <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80023c6:	79ba      	ldrb	r2, [r7, #6]
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	4619      	mov	r1, r3
 80023cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f99b 	bl	800270c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	e008      	b.n	80023ec <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80023da:	79ba      	ldrb	r2, [r7, #6]
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4619      	mov	r1, r3
 80023e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 faad 	bl	8002944 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80023ea:	4603      	mov	r3, r0
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3320      	adds	r3, #32
 8002406:	f107 020b 	add.w	r2, r7, #11
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fdf5 	bl	8002ffc <lis2dw12_full_scale_get>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241c:	e027      	b.n	800246e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d81b      	bhi.n	800245c <LIS2DW12_ACC_GetFullScale+0x68>
 8002424:	a201      	add	r2, pc, #4	; (adr r2, 800242c <LIS2DW12_ACC_GetFullScale+0x38>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	0800243d 	.word	0x0800243d
 8002430:	08002445 	.word	0x08002445
 8002434:	0800244d 	.word	0x0800244d
 8002438:	08002455 	.word	0x08002455
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
      break;
 8002442:	e013      	b.n	800246c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	601a      	str	r2, [r3, #0]
      break;
 800244a:	e00f      	b.n	800246c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2208      	movs	r2, #8
 8002450:	601a      	str	r2, [r3, #0]
      break;
 8002452:	e00b      	b.n	800246c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2210      	movs	r2, #16
 8002458:	601a      	str	r2, [r3, #0]
      break;
 800245a:	e007      	b.n	800246c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002462:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002468:	60fb      	str	r3, [r7, #12]
      break;
 800246a:	bf00      	nop
  }

  return ret;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	dd0b      	ble.n	80024a0 <LIS2DW12_ACC_SetFullScale+0x28>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b04      	cmp	r3, #4
 800248c:	dd06      	ble.n	800249c <LIS2DW12_ACC_SetFullScale+0x24>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b08      	cmp	r3, #8
 8002492:	dc01      	bgt.n	8002498 <LIS2DW12_ACC_SetFullScale+0x20>
 8002494:	2302      	movs	r3, #2
 8002496:	e004      	b.n	80024a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002498:	2303      	movs	r3, #3
 800249a:	e002      	b.n	80024a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80024a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80024a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3320      	adds	r3, #32
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fd7f 	bl	8002fb0 <lis2dw12_full_scale_set>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024bc:	e000      	b.n	80024c0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3320      	adds	r3, #32
 80024da:	f107 020b 	add.w	r2, r7, #11
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fb75 	bl	8002bd0 <lis2dw12_power_mode_get>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f0:	e068      	b.n	80025c4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3320      	adds	r3, #32
 80024f6:	f107 020c 	add.w	r2, r7, #12
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fdce 	bl	800309e <lis2dw12_acceleration_raw_get>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250c:	e05a      	b.n	80025c4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	2b1b      	cmp	r3, #27
 8002512:	bf8c      	ite	hi
 8002514:	2201      	movhi	r2, #1
 8002516:	2200      	movls	r2, #0
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	2a00      	cmp	r2, #0
 800251c:	d14d      	bne.n	80025ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800251e:	2201      	movs	r2, #1
 8002520:	409a      	lsls	r2, r3
 8002522:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002526:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d124      	bne.n	8002582 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8002538:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d037      	beq.n	80025ba <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800254a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	da00      	bge.n	8002554 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8002552:	330f      	adds	r3, #15
 8002554:	111b      	asrs	r3, r3, #4
 8002556:	b21a      	sxth	r2, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800255c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002560:	2b00      	cmp	r3, #0
 8002562:	da00      	bge.n	8002566 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8002564:	330f      	adds	r3, #15
 8002566:	111b      	asrs	r3, r3, #4
 8002568:	b21a      	sxth	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800256e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	da00      	bge.n	8002578 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8002576:	330f      	adds	r3, #15
 8002578:	111b      	asrs	r3, r3, #4
 800257a:	b21a      	sxth	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	809a      	strh	r2, [r3, #4]
      break;
 8002580:	e01f      	b.n	80025c2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002582:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da00      	bge.n	800258c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800258a:	3303      	adds	r3, #3
 800258c:	109b      	asrs	r3, r3, #2
 800258e:	b21a      	sxth	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002598:	2b00      	cmp	r3, #0
 800259a:	da00      	bge.n	800259e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800259c:	3303      	adds	r3, #3
 800259e:	109b      	asrs	r3, r3, #2
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80025a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da00      	bge.n	80025b0 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80025ae:	3303      	adds	r3, #3
 80025b0:	109b      	asrs	r3, r3, #2
 80025b2:	b21a      	sxth	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	809a      	strh	r2, [r3, #4]
      break;
 80025b8:	e003      	b.n	80025c2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025be:	617b      	str	r3, [r7, #20]
      break;
 80025c0:	bf00      	nop
  }

  return ret;
 80025c2:	697b      	ldr	r3, [r7, #20]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff70 	bl	80024c8 <LIS2DW12_ACC_GetAxesRaw>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f2:	e03c      	b.n	800266e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fc9c 	bl	8001f38 <LIS2DW12_ACC_GetSensitivity>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260a:	e030      	b.n	800266e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800260c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002624:	ee17 2a90 	vmov	r2, s15
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800262c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002638:	edd7 7a03 	vldr	s15, [r7, #12]
 800263c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002644:	ee17 2a90 	vmov	r2, s15
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800264c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002658:	edd7 7a03 	vldr	s15, [r7, #12]
 800265c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002664:	ee17 2a90 	vmov	r2, s15
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <LIS2DW12_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Read_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	460b      	mov	r3, r1
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	72fb      	strb	r3, [r7, #11]
  if (lis2dw12_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS2DW12_OK)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f103 0020 	add.w	r0, r3, #32
 800268a:	7af9      	ldrb	r1, [r7, #11]
 800268c:	2301      	movs	r3, #1
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	f000 fa20 	bl	8002ad4 <lis2dw12_read_reg>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <LIS2DW12_Read_Reg+0x2a>
  {
    return LIS2DW12_ERROR;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269e:	e000      	b.n	80026a2 <LIS2DW12_Read_Reg+0x2c>
  }

  return LIS2DW12_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	4613      	mov	r3, r2
 80026b8:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f103 0020 	add.w	r0, r3, #32
 80026c0:	1cba      	adds	r2, r7, #2
 80026c2:	78f9      	ldrb	r1, [r7, #3]
 80026c4:	2301      	movs	r3, #1
 80026c6:	f000 fa1d 	bl	8002b04 <lis2dw12_write_reg>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d4:	e000      	b.n	80026d8 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <LIS2DW12_ACC_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Get_DRDY_Status(LIS2DW12_Object_t *pObj, uint8_t *Status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  if (lis2dw12_flag_data_ready_get(&(pObj->Ctx), Status) != LIS2DW12_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3320      	adds	r3, #32
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fcbb 	bl	800306c <lis2dw12_flag_data_ready_get>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <LIS2DW12_ACC_Get_DRDY_Status+0x22>
  {
    return LIS2DW12_ERROR;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002700:	e000      	b.n	8002704 <LIS2DW12_ACC_Get_DRDY_Status+0x24>
  }

  return LIS2DW12_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	ed87 0a02 	vstr	s0, [r7, #8]
 8002718:	460b      	mov	r3, r1
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	4613      	mov	r3, r2
 800271e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	3b01      	subs	r3, #1
 8002724:	2b03      	cmp	r3, #3
 8002726:	d80b      	bhi.n	8002740 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	0800276d 	.word	0x0800276d
 8002734:	08002799 	.word	0x08002799
 8002738:	080027c5 	.word	0x080027c5
 800273c:	080027f1 	.word	0x080027f1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002740:	79bb      	ldrb	r3, [r7, #6]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d002      	beq.n	800274c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002746:	2304      	movs	r3, #4
 8002748:	75fb      	strb	r3, [r7, #23]
          break;
 800274a:	e002      	b.n	8002752 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800274c:	2314      	movs	r3, #20
 800274e:	75fb      	strb	r3, [r7, #23]
          break;
 8002750:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002752:	edd7 7a02 	vldr	s15, [r7, #8]
 8002756:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d400      	bmi.n	8002766 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002764:	e05a      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002768:	60bb      	str	r3, [r7, #8]
      break;
 800276a:	e057      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800276c:	79bb      	ldrb	r3, [r7, #6]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d002      	beq.n	8002778 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002772:	2303      	movs	r3, #3
 8002774:	75fb      	strb	r3, [r7, #23]
          break;
 8002776:	e002      	b.n	800277e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002778:	2313      	movs	r3, #19
 800277a:	75fb      	strb	r3, [r7, #23]
          break;
 800277c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800277e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002782:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	dc00      	bgt.n	8002792 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002790:	e044      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002792:	4b66      	ldr	r3, [pc, #408]	; (800292c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002794:	60bb      	str	r3, [r7, #8]
      break;
 8002796:	e041      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d002      	beq.n	80027a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800279e:	2302      	movs	r3, #2
 80027a0:	75fb      	strb	r3, [r7, #23]
          break;
 80027a2:	e002      	b.n	80027aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80027a4:	2312      	movs	r3, #18
 80027a6:	75fb      	strb	r3, [r7, #23]
          break;
 80027a8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80027aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ae:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	dc00      	bgt.n	80027be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80027bc:	e02e      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80027c0:	60bb      	str	r3, [r7, #8]
      break;
 80027c2:	e02b      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d002      	beq.n	80027d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
          break;
 80027ce:	e002      	b.n	80027d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80027d0:	2311      	movs	r3, #17
 80027d2:	75fb      	strb	r3, [r7, #23]
          break;
 80027d4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80027d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027da:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80027de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	dc00      	bgt.n	80027ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80027e8:	e018      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80027ea:	4b50      	ldr	r3, [pc, #320]	; (800292c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80027ec:	60bb      	str	r3, [r7, #8]
      break;
 80027ee:	e015      	b.n	800281c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80027f0:	79bb      	ldrb	r3, [r7, #6]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d002      	beq.n	80027fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
          break;
 80027fa:	e002      	b.n	8002802 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80027fc:	2310      	movs	r3, #16
 80027fe:	75fb      	strb	r3, [r7, #23]
          break;
 8002800:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002802:	edd7 7a02 	vldr	s15, [r7, #8]
 8002806:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	dc00      	bgt.n	8002816 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002814:	e001      	b.n	800281a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002816:	4b45      	ldr	r3, [pc, #276]	; (800292c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002818:	60bb      	str	r3, [r7, #8]
      break;
 800281a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800281c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002820:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002930 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	d801      	bhi.n	8002832 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800282e:	2301      	movs	r3, #1
 8002830:	e04d      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002832:	edd7 7a02 	vldr	s15, [r7, #8]
 8002836:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d801      	bhi.n	8002848 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002844:	2302      	movs	r3, #2
 8002846:	e042      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	d801      	bhi.n	800285e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800285a:	2303      	movs	r3, #3
 800285c:	e037      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800285e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002862:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002934 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d801      	bhi.n	8002874 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002870:	2304      	movs	r3, #4
 8002872:	e02c      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002874:	edd7 7a02 	vldr	s15, [r7, #8]
 8002878:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002938 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800287c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002884:	d801      	bhi.n	800288a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002886:	2305      	movs	r3, #5
 8002888:	e021      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800288a:	edd7 7a02 	vldr	s15, [r7, #8]
 800288e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002928 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	d801      	bhi.n	80028a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800289c:	2306      	movs	r3, #6
 800289e:	e016      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800293c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80028a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	d801      	bhi.n	80028b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00b      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002940 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 80028be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d801      	bhi.n	80028cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80028c8:	2308      	movs	r3, #8
 80028ca:	e000      	b.n	80028ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80028cc:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80028ce:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3320      	adds	r3, #32
 80028d4:	7dba      	ldrb	r2, [r7, #22]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fa33 	bl	8002d44 <lis2dw12_data_rate_set>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e8:	e018      	b.n	800291c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3320      	adds	r3, #32
 80028ee:	7dfa      	ldrb	r2, [r7, #23]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f91e 	bl	8002b34 <lis2dw12_power_mode_set>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002902:	e00b      	b.n	800291c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	79ba      	ldrb	r2, [r7, #6]
 8002916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	41480000 	.word	0x41480000
 8002928:	43480000 	.word	0x43480000
 800292c:	43480000 	.word	0x43480000
 8002930:	3fcccccd 	.word	0x3fcccccd
 8002934:	42480000 	.word	0x42480000
 8002938:	42c80000 	.word	0x42c80000
 800293c:	43c80000 	.word	0x43c80000
 8002940:	44480000 	.word	0x44480000

08002944 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002950:	460b      	mov	r3, r1
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	4613      	mov	r3, r2
 8002956:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	79fa      	ldrb	r2, [r7, #7]
 800295c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	79ba      	ldrb	r2, [r7, #6]
 8002964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002968:	edd7 7a02 	vldr	s15, [r7, #8]
 800296c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d801      	bhi.n	800297e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 800297c:	e04d      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 800297e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002982:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	d801      	bhi.n	8002994 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002992:	e042      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002994:	edd7 7a02 	vldr	s15, [r7, #8]
 8002998:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	d801      	bhi.n	80029aa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80029a8:	e037      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80029aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d801      	bhi.n	80029c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80029be:	e02c      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 80029c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002a44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d801      	bhi.n	80029d6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80029d4:	e021      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 80029d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80029de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d801      	bhi.n	80029ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80029ea:	e016      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 80029ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002a54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d801      	bhi.n	8002a02 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002a00:	e00b      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002a5c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d801      	bhi.n	8002a18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002a16:	e000      	b.n	8002a1a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	3fcccccd 	.word	0x3fcccccd
 8002a30:	3fcccccd 	.word	0x3fcccccd
 8002a34:	41480000 	.word	0x41480000
 8002a38:	41c80000 	.word	0x41c80000
 8002a3c:	42480000 	.word	0x42480000
 8002a40:	42480000 	.word	0x42480000
 8002a44:	42c80000 	.word	0x42c80000
 8002a48:	42c80000 	.word	0x42c80000
 8002a4c:	43480000 	.word	0x43480000
 8002a50:	43480000 	.word	0x43480000
 8002a54:	43c80000 	.word	0x43c80000
 8002a58:	43c80000 	.word	0x43c80000
 8002a5c:	44480000 	.word	0x44480000
 8002a60:	44480000 	.word	0x44480000
 8002a64:	44c80000 	.word	0x44c80000

08002a68 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	695c      	ldr	r4, [r3, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	7b1b      	ldrb	r3, [r3, #12]
 8002a88:	b298      	uxth	r0, r3
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	893b      	ldrh	r3, [r7, #8]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	47a0      	blx	r4
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}

08002a9e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a9e:	b590      	push	{r4, r7, lr}
 8002aa0:	b087      	sub	sp, #28
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	460b      	mov	r3, r1
 8002aac:	72fb      	strb	r3, [r7, #11]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	691c      	ldr	r4, [r3, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	7b1b      	ldrb	r3, [r3, #12]
 8002abe:	b298      	uxth	r0, r3
 8002ac0:	7afb      	ldrb	r3, [r7, #11]
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	47a0      	blx	r4
 8002aca:	4603      	mov	r3, r0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}

08002ad4 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	72fb      	strb	r3, [r7, #11]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685c      	ldr	r4, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68d8      	ldr	r0, [r3, #12]
 8002af0:	893b      	ldrh	r3, [r7, #8]
 8002af2:	7af9      	ldrb	r1, [r7, #11]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	47a0      	blx	r4
 8002af8:	6178      	str	r0, [r7, #20]

  return ret;
 8002afa:	697b      	ldr	r3, [r7, #20]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}

08002b04 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	460b      	mov	r3, r1
 8002b12:	72fb      	strb	r3, [r7, #11]
 8002b14:	4613      	mov	r3, r2
 8002b16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681c      	ldr	r4, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68d8      	ldr	r0, [r3, #12]
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	7af9      	ldrb	r1, [r7, #11]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	47a0      	blx	r4
 8002b28:	6178      	str	r0, [r7, #20]

  return ret;
 8002b2a:	697b      	ldr	r3, [r7, #20]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002b40:	f107 0210 	add.w	r2, r7, #16
 8002b44:	2301      	movs	r3, #1
 8002b46:	2120      	movs	r1, #32
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ffc3 	bl	8002ad4 <lis2dw12_read_reg>
 8002b4e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d118      	bne.n	8002b88 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	7c3b      	ldrb	r3, [r7, #16]
 8002b62:	f362 0383 	bfi	r3, r2, #2, #2
 8002b66:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	7c3b      	ldrb	r3, [r7, #16]
 8002b72:	f362 0301 	bfi	r3, r2, #0, #2
 8002b76:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002b78:	f107 0210 	add.w	r2, r7, #16
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	2120      	movs	r1, #32
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffbf 	bl	8002b04 <lis2dw12_write_reg>
 8002b86:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d107      	bne.n	8002b9e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002b8e:	f107 020c 	add.w	r2, r7, #12
 8002b92:	2301      	movs	r3, #1
 8002b94:	2125      	movs	r1, #37	; 0x25
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff9c 	bl	8002ad4 <lis2dw12_read_reg>
 8002b9c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d110      	bne.n	8002bc6 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	7b3b      	ldrb	r3, [r7, #12]
 8002bb0:	f362 0382 	bfi	r3, r2, #2, #1
 8002bb4:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002bb6:	f107 020c 	add.w	r2, r7, #12
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2125      	movs	r1, #37	; 0x25
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffa0 	bl	8002b04 <lis2dw12_write_reg>
 8002bc4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002bc6:	697b      	ldr	r3, [r7, #20]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002bda:	f107 0210 	add.w	r2, r7, #16
 8002bde:	2301      	movs	r3, #1
 8002be0:	2120      	movs	r1, #32
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ff76 	bl	8002ad4 <lis2dw12_read_reg>
 8002be8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 80a3 	bne.w	8002d38 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002bf2:	f107 020c 	add.w	r2, r7, #12
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	2125      	movs	r1, #37	; 0x25
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff6a 	bl	8002ad4 <lis2dw12_read_reg>
 8002c00:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002c02:	7b3b      	ldrb	r3, [r7, #12]
 8002c04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	011a      	lsls	r2, r3, #4
 8002c0c:	7c3b      	ldrb	r3, [r7, #16]
 8002c0e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002c18:	7c3a      	ldrb	r2, [r7, #16]
 8002c1a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002c1e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002c20:	4413      	add	r3, r2
 8002c22:	2b1b      	cmp	r3, #27
 8002c24:	f200 8084 	bhi.w	8002d30 <lis2dw12_power_mode_get+0x160>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <lis2dw12_power_mode_get+0x60>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002cc1 	.word	0x08002cc1
 8002c34:	08002cb9 	.word	0x08002cb9
 8002c38:	08002cb1 	.word	0x08002cb1
 8002c3c:	08002ca9 	.word	0x08002ca9
 8002c40:	08002ca1 	.word	0x08002ca1
 8002c44:	08002d31 	.word	0x08002d31
 8002c48:	08002d31 	.word	0x08002d31
 8002c4c:	08002d31 	.word	0x08002d31
 8002c50:	08002ce1 	.word	0x08002ce1
 8002c54:	08002cd9 	.word	0x08002cd9
 8002c58:	08002cd1 	.word	0x08002cd1
 8002c5c:	08002cc9 	.word	0x08002cc9
 8002c60:	08002d31 	.word	0x08002d31
 8002c64:	08002d31 	.word	0x08002d31
 8002c68:	08002d31 	.word	0x08002d31
 8002c6c:	08002d31 	.word	0x08002d31
 8002c70:	08002d09 	.word	0x08002d09
 8002c74:	08002d01 	.word	0x08002d01
 8002c78:	08002cf9 	.word	0x08002cf9
 8002c7c:	08002cf1 	.word	0x08002cf1
 8002c80:	08002ce9 	.word	0x08002ce9
 8002c84:	08002d31 	.word	0x08002d31
 8002c88:	08002d31 	.word	0x08002d31
 8002c8c:	08002d31 	.word	0x08002d31
 8002c90:	08002d29 	.word	0x08002d29
 8002c94:	08002d21 	.word	0x08002d21
 8002c98:	08002d19 	.word	0x08002d19
 8002c9c:	08002d11 	.word	0x08002d11
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	701a      	strb	r2, [r3, #0]
        break;
 8002ca6:	e047      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2203      	movs	r2, #3
 8002cac:	701a      	strb	r2, [r3, #0]
        break;
 8002cae:	e043      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	701a      	strb	r2, [r3, #0]
        break;
 8002cb6:	e03f      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
        break;
 8002cbe:	e03b      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
        break;
 8002cc6:	e037      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	220b      	movs	r2, #11
 8002ccc:	701a      	strb	r2, [r3, #0]
        break;
 8002cce:	e033      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	220a      	movs	r2, #10
 8002cd4:	701a      	strb	r2, [r3, #0]
        break;
 8002cd6:	e02f      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2209      	movs	r2, #9
 8002cdc:	701a      	strb	r2, [r3, #0]
        break;
 8002cde:	e02b      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	701a      	strb	r2, [r3, #0]
        break;
 8002ce6:	e027      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2214      	movs	r2, #20
 8002cec:	701a      	strb	r2, [r3, #0]
        break;
 8002cee:	e023      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2213      	movs	r2, #19
 8002cf4:	701a      	strb	r2, [r3, #0]
        break;
 8002cf6:	e01f      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2212      	movs	r2, #18
 8002cfc:	701a      	strb	r2, [r3, #0]
        break;
 8002cfe:	e01b      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2211      	movs	r2, #17
 8002d04:	701a      	strb	r2, [r3, #0]
        break;
 8002d06:	e017      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	701a      	strb	r2, [r3, #0]
        break;
 8002d0e:	e013      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	221b      	movs	r2, #27
 8002d14:	701a      	strb	r2, [r3, #0]
        break;
 8002d16:	e00f      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	221a      	movs	r2, #26
 8002d1c:	701a      	strb	r2, [r3, #0]
        break;
 8002d1e:	e00b      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2219      	movs	r2, #25
 8002d24:	701a      	strb	r2, [r3, #0]
        break;
 8002d26:	e007      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2218      	movs	r2, #24
 8002d2c:	701a      	strb	r2, [r3, #0]
        break;
 8002d2e:	e003      	b.n	8002d38 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	701a      	strb	r2, [r3, #0]
        break;
 8002d36:	bf00      	nop
    }
  }

  return ret;
 8002d38:	697b      	ldr	r3, [r7, #20]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002d50:	f107 0210 	add.w	r2, r7, #16
 8002d54:	2301      	movs	r3, #1
 8002d56:	2120      	movs	r1, #32
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff febb 	bl	8002ad4 <lis2dw12_read_reg>
 8002d5e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	7c3b      	ldrb	r3, [r7, #16]
 8002d70:	f362 1307 	bfi	r3, r2, #4, #4
 8002d74:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002d76:	f107 0210 	add.w	r2, r7, #16
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	2120      	movs	r1, #32
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fec0 	bl	8002b04 <lis2dw12_write_reg>
 8002d84:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002d8c:	f107 020c 	add.w	r2, r7, #12
 8002d90:	2301      	movs	r3, #1
 8002d92:	2122      	movs	r1, #34	; 0x22
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fe9d 	bl	8002ad4 <lis2dw12_read_reg>
 8002d9a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d110      	bne.n	8002dc4 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	7b3b      	ldrb	r3, [r7, #12]
 8002dae:	f362 0301 	bfi	r3, r2, #0, #2
 8002db2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002db4:	f107 020c 	add.w	r2, r7, #12
 8002db8:	2301      	movs	r3, #1
 8002dba:	2122      	movs	r1, #34	; 0x22
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fea1 	bl	8002b04 <lis2dw12_write_reg>
 8002dc2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002dda:	f107 0210 	add.w	r2, r7, #16
 8002dde:	2301      	movs	r3, #1
 8002de0:	2120      	movs	r1, #32
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fe76 	bl	8002ad4 <lis2dw12_read_reg>
 8002de8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 80b3 	bne.w	8002f58 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002df2:	f107 020c 	add.w	r2, r7, #12
 8002df6:	2301      	movs	r3, #1
 8002df8:	2122      	movs	r1, #34	; 0x22
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fe6a 	bl	8002ad4 <lis2dw12_read_reg>
 8002e00:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002e02:	7b3b      	ldrb	r3, [r7, #12]
 8002e04:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	7c3a      	ldrb	r2, [r7, #16]
 8002e0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	4413      	add	r3, r2
 8002e16:	2b32      	cmp	r3, #50	; 0x32
 8002e18:	f200 809a 	bhi.w	8002f50 <lis2dw12_data_rate_get+0x180>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <lis2dw12_data_rate_get+0x54>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002ef1 	.word	0x08002ef1
 8002e28:	08002ef9 	.word	0x08002ef9
 8002e2c:	08002f01 	.word	0x08002f01
 8002e30:	08002f09 	.word	0x08002f09
 8002e34:	08002f11 	.word	0x08002f11
 8002e38:	08002f19 	.word	0x08002f19
 8002e3c:	08002f21 	.word	0x08002f21
 8002e40:	08002f29 	.word	0x08002f29
 8002e44:	08002f31 	.word	0x08002f31
 8002e48:	08002f39 	.word	0x08002f39
 8002e4c:	08002f51 	.word	0x08002f51
 8002e50:	08002f51 	.word	0x08002f51
 8002e54:	08002f51 	.word	0x08002f51
 8002e58:	08002f51 	.word	0x08002f51
 8002e5c:	08002f51 	.word	0x08002f51
 8002e60:	08002f51 	.word	0x08002f51
 8002e64:	08002f51 	.word	0x08002f51
 8002e68:	08002f51 	.word	0x08002f51
 8002e6c:	08002f49 	.word	0x08002f49
 8002e70:	08002f51 	.word	0x08002f51
 8002e74:	08002f51 	.word	0x08002f51
 8002e78:	08002f51 	.word	0x08002f51
 8002e7c:	08002f51 	.word	0x08002f51
 8002e80:	08002f51 	.word	0x08002f51
 8002e84:	08002f51 	.word	0x08002f51
 8002e88:	08002f51 	.word	0x08002f51
 8002e8c:	08002f51 	.word	0x08002f51
 8002e90:	08002f51 	.word	0x08002f51
 8002e94:	08002f51 	.word	0x08002f51
 8002e98:	08002f51 	.word	0x08002f51
 8002e9c:	08002f51 	.word	0x08002f51
 8002ea0:	08002f51 	.word	0x08002f51
 8002ea4:	08002f51 	.word	0x08002f51
 8002ea8:	08002f51 	.word	0x08002f51
 8002eac:	08002f51 	.word	0x08002f51
 8002eb0:	08002f51 	.word	0x08002f51
 8002eb4:	08002f51 	.word	0x08002f51
 8002eb8:	08002f51 	.word	0x08002f51
 8002ebc:	08002f51 	.word	0x08002f51
 8002ec0:	08002f51 	.word	0x08002f51
 8002ec4:	08002f51 	.word	0x08002f51
 8002ec8:	08002f51 	.word	0x08002f51
 8002ecc:	08002f51 	.word	0x08002f51
 8002ed0:	08002f51 	.word	0x08002f51
 8002ed4:	08002f51 	.word	0x08002f51
 8002ed8:	08002f51 	.word	0x08002f51
 8002edc:	08002f51 	.word	0x08002f51
 8002ee0:	08002f51 	.word	0x08002f51
 8002ee4:	08002f51 	.word	0x08002f51
 8002ee8:	08002f51 	.word	0x08002f51
 8002eec:	08002f41 	.word	0x08002f41
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
        break;
 8002ef6:	e02f      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
        break;
 8002efe:	e02b      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2202      	movs	r2, #2
 8002f04:	701a      	strb	r2, [r3, #0]
        break;
 8002f06:	e027      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	701a      	strb	r2, [r3, #0]
        break;
 8002f0e:	e023      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]
        break;
 8002f16:	e01f      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	701a      	strb	r2, [r3, #0]
        break;
 8002f1e:	e01b      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2206      	movs	r2, #6
 8002f24:	701a      	strb	r2, [r3, #0]
        break;
 8002f26:	e017      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	701a      	strb	r2, [r3, #0]
        break;
 8002f2e:	e013      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2208      	movs	r2, #8
 8002f34:	701a      	strb	r2, [r3, #0]
        break;
 8002f36:	e00f      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2209      	movs	r2, #9
 8002f3c:	701a      	strb	r2, [r3, #0]
        break;
 8002f3e:	e00b      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2232      	movs	r2, #50	; 0x32
 8002f44:	701a      	strb	r2, [r3, #0]
        break;
 8002f46:	e007      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2212      	movs	r2, #18
 8002f4c:	701a      	strb	r2, [r3, #0]
        break;
 8002f4e:	e003      	b.n	8002f58 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
        break;
 8002f56:	bf00      	nop
    }
  }

  return ret;
 8002f58:	697b      	ldr	r3, [r7, #20]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop

08002f64 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002f70:	f107 0208 	add.w	r2, r7, #8
 8002f74:	2301      	movs	r3, #1
 8002f76:	2121      	movs	r1, #33	; 0x21
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fdab 	bl	8002ad4 <lis2dw12_read_reg>
 8002f7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	7a3b      	ldrb	r3, [r7, #8]
 8002f90:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f94:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002f96:	f107 0208 	add.w	r2, r7, #8
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	2121      	movs	r1, #33	; 0x21
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fdb0 	bl	8002b04 <lis2dw12_write_reg>
 8002fa4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002fbc:	f107 0208 	add.w	r2, r7, #8
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	2125      	movs	r1, #37	; 0x25
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fd85 	bl	8002ad4 <lis2dw12_read_reg>
 8002fca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	7a3b      	ldrb	r3, [r7, #8]
 8002fdc:	f362 1305 	bfi	r3, r2, #4, #2
 8002fe0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002fe2:	f107 0208 	add.w	r2, r7, #8
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	2125      	movs	r1, #37	; 0x25
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fd8a 	bl	8002b04 <lis2dw12_write_reg>
 8002ff0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003006:	f107 0208 	add.w	r2, r7, #8
 800300a:	2301      	movs	r3, #1
 800300c:	2125      	movs	r1, #37	; 0x25
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fd60 	bl	8002ad4 <lis2dw12_read_reg>
 8003014:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003016:	7a3b      	ldrb	r3, [r7, #8]
 8003018:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d81a      	bhi.n	8003058 <lis2dw12_full_scale_get+0x5c>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <lis2dw12_full_scale_get+0x2c>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003039 	.word	0x08003039
 800302c:	08003041 	.word	0x08003041
 8003030:	08003049 	.word	0x08003049
 8003034:	08003051 	.word	0x08003051
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
      break;
 800303e:	e00f      	b.n	8003060 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
      break;
 8003046:	e00b      	b.n	8003060 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
      break;
 800304e:	e007      	b.n	8003060 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2203      	movs	r2, #3
 8003054:	701a      	strb	r2, [r3, #0]
      break;
 8003056:	e003      	b.n	8003060 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
      break;
 800305e:	bf00      	nop
  }

  return ret;
 8003060:	68fb      	ldr	r3, [r7, #12]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 8003076:	f107 0208 	add.w	r2, r7, #8
 800307a:	2301      	movs	r3, #1
 800307c:	2127      	movs	r1, #39	; 0x27
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fd28 	bl	8002ad4 <lis2dw12_read_reg>
 8003084:	60f8      	str	r0, [r7, #12]
  *val = reg.drdy;
 8003086:	7a3b      	ldrb	r3, [r7, #8]
 8003088:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	701a      	strb	r2, [r3, #0]

  return ret;
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80030a8:	f107 020c 	add.w	r2, r7, #12
 80030ac:	2306      	movs	r3, #6
 80030ae:	2128      	movs	r1, #40	; 0x28
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fd0f 	bl	8002ad4 <lis2dw12_read_reg>
 80030b6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80030b8:	7b7b      	ldrb	r3, [r7, #13]
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	7b3b      	ldrb	r3, [r7, #12]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	b21a      	sxth	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	3302      	adds	r3, #2
 80030e0:	b212      	sxth	r2, r2
 80030e2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	3302      	adds	r3, #2
 80030e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	7bbb      	ldrb	r3, [r7, #14]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	3302      	adds	r3, #2
 80030fe:	b212      	sxth	r2, r2
 8003100:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003102:	7c7a      	ldrb	r2, [r7, #17]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	3304      	adds	r3, #4
 8003108:	b212      	sxth	r2, r2
 800310a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3304      	adds	r3, #4
 8003110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003114:	b29b      	uxth	r3, r3
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	b29a      	uxth	r2, r3
 800311a:	7c3b      	ldrb	r3, [r7, #16]
 800311c:	b29b      	uxth	r3, r3
 800311e:	4413      	add	r3, r2
 8003120:	b29a      	uxth	r2, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	3304      	adds	r3, #4
 8003126:	b212      	sxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]

  return ret;
 800312a:	697b      	ldr	r3, [r7, #20]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800313e:	2301      	movs	r3, #1
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	210f      	movs	r1, #15
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fcc5 	bl	8002ad4 <lis2dw12_read_reg>
 800314a:	60f8      	str	r0, [r7, #12]

  return ret;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003162:	f107 0208 	add.w	r2, r7, #8
 8003166:	2301      	movs	r3, #1
 8003168:	2121      	movs	r1, #33	; 0x21
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fcb2 	bl	8002ad4 <lis2dw12_read_reg>
 8003170:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	7a3b      	ldrb	r3, [r7, #8]
 8003182:	f362 0382 	bfi	r3, r2, #2, #1
 8003186:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003188:	f107 0208 	add.w	r2, r7, #8
 800318c:	2301      	movs	r3, #1
 800318e:	2121      	movs	r1, #33	; 0x21
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fcb7 	bl	8002b04 <lis2dw12_write_reg>
 8003196:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003198:	68fb      	ldr	r3, [r7, #12]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80031ae:	f107 0208 	add.w	r2, r7, #8
 80031b2:	2301      	movs	r3, #1
 80031b4:	212e      	movs	r1, #46	; 0x2e
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fc8c 	bl	8002ad4 <lis2dw12_read_reg>
 80031bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	7a3b      	ldrb	r3, [r7, #8]
 80031ce:	f362 1347 	bfi	r3, r2, #5, #3
 80031d2:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80031d4:	f107 0208 	add.w	r2, r7, #8
 80031d8:	2301      	movs	r3, #1
 80031da:	212e      	movs	r1, #46	; 0x2e
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fc91 	bl	8002b04 <lis2dw12_write_reg>
 80031e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031e4:	68fb      	ldr	r3, [r7, #12]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e067      	b.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	7b1a      	ldrb	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <LIS2MDL_RegisterBusIO+0xf8>)
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <LIS2MDL_RegisterBusIO+0xfc>)
 800324e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e036      	b.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4798      	blx	r3
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e02c      	b.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d028      	beq.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003290:	2b00      	cmp	r3, #0
 8003292:	d123      	bne.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10d      	bne.n	80032b8 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800329c:	2334      	movs	r3, #52	; 0x34
 800329e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	461a      	mov	r2, r3
 80032a4:	2162      	movs	r1, #98	; 0x62
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fb45 	bl	8003936 <LIS2MDL_Write_Reg>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d014      	beq.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b6:	e012      	b.n	80032de <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d101      	bne.n	80032c4 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	e00c      	b.n	80032de <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3320      	adds	r3, #32
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 ffe1 	bl	8004292 <lis2mdl_i2c_interface_set>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032da:	e000      	b.n	80032de <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80032dc:	68fb      	ldr	r3, [r7, #12]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	080039eb 	.word	0x080039eb
 80032ec:	08003a6d 	.word	0x08003a6d

080032f0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d144      	bne.n	800338a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003300:	f107 0208 	add.w	r2, r7, #8
 8003304:	2301      	movs	r3, #1
 8003306:	2162      	movs	r1, #98	; 0x62
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fbf0 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003318:	e06c      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800331a:	f107 020c 	add.w	r2, r7, #12
 800331e:	2301      	movs	r3, #1
 8003320:	2160      	movs	r1, #96	; 0x60
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fbe3 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003332:	e05f      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003334:	7a3b      	ldrb	r3, [r7, #8]
 8003336:	f043 0310 	orr.w	r3, r3, #16
 800333a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 800333c:	7a3b      	ldrb	r3, [r7, #8]
 800333e:	f36f 0341 	bfc	r3, #1, #1
 8003342:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	2202      	movs	r2, #2
 8003348:	f362 0301 	bfi	r3, r2, #0, #2
 800334c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800334e:	7b3b      	ldrb	r3, [r7, #12]
 8003350:	f043 030c 	orr.w	r3, r3, #12
 8003354:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003356:	f107 0208 	add.w	r2, r7, #8
 800335a:	2301      	movs	r3, #1
 800335c:	2162      	movs	r1, #98	; 0x62
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd04 	bl	8003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800336e:	e041      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003370:	f107 020c 	add.w	r2, r7, #12
 8003374:	2301      	movs	r3, #1
 8003376:	2160      	movs	r1, #96	; 0x60
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fcf7 	bl	8003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003388:	e034      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3320      	adds	r3, #32
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 febd 	bl	8004110 <lis2mdl_block_data_update_set>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a0:	e028      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3320      	adds	r3, #32
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fe2d 	bl	8004008 <lis2mdl_operating_mode_set>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b8:	e01c      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3320      	adds	r3, #32
 80033be:	2103      	movs	r1, #3
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fe47 	bl	8004054 <lis2mdl_data_rate_set>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d0:	e010      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3320      	adds	r3, #32
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 ff34 	bl	8004246 <lis2mdl_self_test_set>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e8:	e004      	b.n	80033f4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8a5 	bl	8003554 <LIS2MDL_MAG_Disable>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003414:	e004      	b.n	8003420 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d10b      	bne.n	8003452 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800343a:	2301      	movs	r3, #1
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	214f      	movs	r1, #79	; 0x4f
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fb54 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003450:	e00c      	b.n	800346c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3320      	adds	r3, #32
 8003456:	6839      	ldr	r1, [r7, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fee3 	bl	8004224 <lis2mdl_device_id_get>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003468:	e000      	b.n	800346c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2232      	movs	r2, #50	; 0x32
 80034a6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4a04      	ldr	r2, [pc, #16]	; (80034cc <LIS2MDL_GetCapabilities+0x58>)
 80034bc:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	42c80000 	.word	0x42c80000

080034d0 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e032      	b.n	800354c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d11d      	bne.n	800352a <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80034ee:	f107 020c 	add.w	r2, r7, #12
 80034f2:	2301      	movs	r3, #1
 80034f4:	2160      	movs	r1, #96	; 0x60
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 faf9 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003506:	e021      	b.n	800354c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003508:	7b3b      	ldrb	r3, [r7, #12]
 800350a:	f36f 0301 	bfc	r3, #0, #2
 800350e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003510:	f107 020c 	add.w	r2, r7, #12
 8003514:	2301      	movs	r3, #1
 8003516:	2160      	movs	r1, #96	; 0x60
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fc27 	bl	8003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00e      	beq.n	8003542 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003528:	e010      	b.n	800354c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3320      	adds	r3, #32
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fd69 	bl	8004008 <lis2mdl_operating_mode_set>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003540:	e004      	b.n	800354c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e033      	b.n	80035d2 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d11e      	bne.n	80035b0 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003572:	f107 020c 	add.w	r2, r7, #12
 8003576:	2301      	movs	r3, #1
 8003578:	2160      	movs	r1, #96	; 0x60
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fab7 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800358a:	e022      	b.n	80035d2 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800358c:	7b3b      	ldrb	r3, [r7, #12]
 800358e:	2202      	movs	r2, #2
 8003590:	f362 0301 	bfi	r3, r2, #0, #2
 8003594:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003596:	f107 020c 	add.w	r2, r7, #12
 800359a:	2301      	movs	r3, #1
 800359c:	2160      	movs	r1, #96	; 0x60
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fbe4 	bl	8003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ae:	e010      	b.n	80035d2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3320      	adds	r3, #32
 80035b4:	2102      	movs	r1, #2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fd26 	bl	8004008 <lis2mdl_operating_mode_set>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c6:	e004      	b.n	80035d2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80035ea:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3320      	adds	r3, #32
 800360e:	f107 020b 	add.w	r2, r7, #11
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fd43 	bl	80040a0 <lis2mdl_data_rate_get>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003624:	e023      	b.n	800366e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d81b      	bhi.n	8003664 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364d 	.word	0x0800364d
 800363c:	08003655 	.word	0x08003655
 8003640:	0800365d 	.word	0x0800365d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003648:	601a      	str	r2, [r3, #0]
      break;
 800364a:	e00f      	b.n	800366c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003650:	601a      	str	r2, [r3, #0]
      break;
 8003652:	e00b      	b.n	800366c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003658:	601a      	str	r2, [r3, #0]
      break;
 800365a:	e007      	b.n	800366c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003660:	601a      	str	r2, [r3, #0]
      break;
 8003662:	e003      	b.n	800366c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003668:	60fb      	str	r3, [r7, #12]
      break;
 800366a:	bf00      	nop
  }

  return ret;
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	41200000 	.word	0x41200000
 800367c:	41a00000 	.word	0x41a00000
 8003680:	42480000 	.word	0x42480000
 8003684:	42c80000 	.word	0x42c80000

08003688 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003694:	edd7 7a00 	vldr	s15, [r7]
 8003698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800369c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	d801      	bhi.n	80036aa <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80036a6:	2300      	movs	r3, #0
 80036a8:	e016      	b.n	80036d8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80036aa:	edd7 7a00 	vldr	s15, [r7]
 80036ae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80036b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	d801      	bhi.n	80036c0 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80036bc:	2301      	movs	r3, #1
 80036be:	e00b      	b.n	80036d8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80036c0:	edd7 7a00 	vldr	s15, [r7]
 80036c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800374c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80036c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	d801      	bhi.n	80036d6 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e000      	b.n	80036d8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80036d6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80036d8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d121      	bne.n	8003726 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036e2:	f107 020c 	add.w	r2, r7, #12
 80036e6:	2301      	movs	r3, #1
 80036e8:	2160      	movs	r1, #96	; 0x60
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9ff 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036fa:	e022      	b.n	8003742 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	7b3b      	ldrb	r3, [r7, #12]
 8003706:	f362 0383 	bfi	r3, r2, #2, #2
 800370a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800370c:	f107 020c 	add.w	r2, r7, #12
 8003710:	2301      	movs	r3, #1
 8003712:	2160      	movs	r1, #96	; 0x60
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fb29 	bl	8003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00f      	beq.n	8003740 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003724:	e00d      	b.n	8003742 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3320      	adds	r3, #32
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fc90 	bl	8004054 <lis2mdl_data_rate_set>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800373e:	e000      	b.n	8003742 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	42480000 	.word	0x42480000

08003750 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2232      	movs	r2, #50	; 0x32
 800375e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3320      	adds	r3, #32
 8003794:	f107 0208 	add.w	r2, r7, #8
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fcf7 	bl	800418e <lis2mdl_magnetic_raw_get>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037aa:	e00c      	b.n	80037c6 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80037ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80037b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80037bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b088      	sub	sp, #32
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d137      	bne.n	8003850 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80037e0:	f107 0218 	add.w	r2, r7, #24
 80037e4:	2306      	movs	r3, #6
 80037e6:	2168      	movs	r1, #104	; 0x68
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f980 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f8:	e06f      	b.n	80038da <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 80037fa:	7e7b      	ldrb	r3, [r7, #25]
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003800:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003804:	b29b      	uxth	r3, r3
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	b29a      	uxth	r2, r3
 800380a:	7e3b      	ldrb	r3, [r7, #24]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4413      	add	r3, r2
 8003810:	b29b      	uxth	r3, r3
 8003812:	b21b      	sxth	r3, r3
 8003814:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003816:	7efb      	ldrb	r3, [r7, #27]
 8003818:	b21b      	sxth	r3, r3
 800381a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 800381c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003820:	b29b      	uxth	r3, r3
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	b29a      	uxth	r2, r3
 8003826:	7ebb      	ldrb	r3, [r7, #26]
 8003828:	b29b      	uxth	r3, r3
 800382a:	4413      	add	r3, r2
 800382c:	b29b      	uxth	r3, r3
 800382e:	b21b      	sxth	r3, r3
 8003830:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003832:	7f7b      	ldrb	r3, [r7, #29]
 8003834:	b21b      	sxth	r3, r3
 8003836:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003838:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800383c:	b29b      	uxth	r3, r3
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	b29a      	uxth	r2, r3
 8003842:	7f3b      	ldrb	r3, [r7, #28]
 8003844:	b29b      	uxth	r3, r3
 8003846:	4413      	add	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	b21b      	sxth	r3, r3
 800384c:	82bb      	strh	r3, [r7, #20]
 800384e:	e00d      	b.n	800386c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3320      	adds	r3, #32
 8003854:	f107 0210 	add.w	r2, r7, #16
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fc97 	bl	800418e <lis2mdl_magnetic_raw_get>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800386a:	e036      	b.n	80038da <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff feb1 	bl	80035da <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003878:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003884:	edd7 7a03 	vldr	s15, [r7, #12]
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003890:	ee17 2a90 	vmov	r2, s15
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038b0:	ee17 2a90 	vmov	r2, s15
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80038b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038d0:	ee17 2a90 	vmov	r2, s15
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <LIS2MDL_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Read_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	460b      	mov	r3, r1
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	72fb      	strb	r3, [r7, #11]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d10b      	bne.n	8003910 <LIS2MDL_Read_Reg+0x2e>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, Reg, Data, 1) != LIS2MDL_OK)
 80038f8:	7af9      	ldrb	r1, [r7, #11]
 80038fa:	2301      	movs	r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f8f5 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390e:	e00e      	b.n	800392e <LIS2MDL_Read_Reg+0x4c>
    }
  }
  else
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS2MDL_OK)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f103 0020 	add.w	r0, r3, #32
 8003916:	7af9      	ldrb	r1, [r7, #11]
 8003918:	2301      	movs	r3, #1
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	f000 fb44 	bl	8003fa8 <lis2mdl_read_reg>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800392a:	e000      	b.n	800392e <LIS2MDL_Read_Reg+0x4c>
    }
  }

  return LIS2MDL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	70fb      	strb	r3, [r7, #3]
 8003942:	4613      	mov	r3, r2
 8003944:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d10b      	bne.n	8003966 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800394e:	1cba      	adds	r2, r7, #2
 8003950:	78f9      	ldrb	r1, [r7, #3]
 8003952:	2301      	movs	r3, #1
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fa09 	bl	8003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003964:	e00e      	b.n	8003984 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f103 0020 	add.w	r0, r3, #32
 800396c:	1cba      	adds	r2, r7, #2
 800396e:	78f9      	ldrb	r1, [r7, #3]
 8003970:	2301      	movs	r3, #1
 8003972:	f000 fb31 	bl	8003fd8 <lis2mdl_write_reg>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003980:	e000      	b.n	8003984 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <LIS2MDL_MAG_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Get_DRDY_Status(LIS2MDL_Object_t *pObj, uint8_t *Status)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  lis2mdl_status_reg_t reg;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d114      	bne.n	80039c8 <LIS2MDL_MAG_Get_DRDY_Status+0x3c>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_STATUS_REG, (uint8_t *)&reg, 1) != LIS2MDL_OK)
 800399e:	f107 020c 	add.w	r2, r7, #12
 80039a2:	2301      	movs	r3, #1
 80039a4:	2167      	movs	r1, #103	; 0x67
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8a1 	bl	8003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <LIS2MDL_MAG_Get_DRDY_Status+0x2c>
    {
      return LIS2MDL_ERROR;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b6:	e014      	b.n	80039e2 <LIS2MDL_MAG_Get_DRDY_Status+0x56>
    }
    *Status = reg.zyxda;
 80039b8:	7b3b      	ldrb	r3, [r7, #12]
 80039ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e00b      	b.n	80039e0 <LIS2MDL_MAG_Get_DRDY_Status+0x54>
  }
  else
  {
    if (lis2mdl_mag_data_ready_get(&(pObj->Ctx), Status) != LIS2MDL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3320      	adds	r3, #32
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fbc4 	bl	800415c <lis2mdl_mag_data_ready_get>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <LIS2MDL_MAG_Get_DRDY_Status+0x54>
    {
      return LIS2MDL_ERROR;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039de:	e000      	b.n	80039e2 <LIS2MDL_MAG_Get_DRDY_Status+0x56>
    }
  }

  return LIS2MDL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b087      	sub	sp, #28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	461a      	mov	r2, r3
 80039f6:	460b      	mov	r3, r1
 80039f8:	72fb      	strb	r3, [r7, #11]
 80039fa:	4613      	mov	r3, r2
 80039fc:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10e      	bne.n	8003a28 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	695c      	ldr	r4, [r3, #20]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	7b1b      	ldrb	r3, [r3, #12]
 8003a12:	b298      	uxth	r0, r3
 8003a14:	7afb      	ldrb	r3, [r7, #11]
 8003a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	47a0      	blx	r4
 8003a24:	4603      	mov	r3, r0
 8003a26:	e01d      	b.n	8003a64 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d10b      	bne.n	8003a48 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	695c      	ldr	r4, [r3, #20]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	7b1b      	ldrb	r3, [r3, #12]
 8003a38:	b298      	uxth	r0, r3
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	b299      	uxth	r1, r3
 8003a3e:	893b      	ldrh	r3, [r7, #8]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	47a0      	blx	r4
 8003a44:	4603      	mov	r3, r0
 8003a46:	e00d      	b.n	8003a64 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	695c      	ldr	r4, [r3, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	7b1b      	ldrb	r3, [r3, #12]
 8003a50:	b298      	uxth	r0, r3
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	b299      	uxth	r1, r3
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	47a0      	blx	r4
 8003a62:	4603      	mov	r3, r0
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd90      	pop	{r4, r7, pc}

08003a6c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	461a      	mov	r2, r3
 8003a78:	460b      	mov	r3, r1
 8003a7a:	72fb      	strb	r3, [r7, #11]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10e      	bne.n	8003aaa <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	691c      	ldr	r4, [r3, #16]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	7b1b      	ldrb	r3, [r3, #12]
 8003a94:	b298      	uxth	r0, r3
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	b299      	uxth	r1, r3
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	47a0      	blx	r4
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	e01d      	b.n	8003ae6 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d10b      	bne.n	8003aca <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	691c      	ldr	r4, [r3, #16]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	7b1b      	ldrb	r3, [r3, #12]
 8003aba:	b298      	uxth	r0, r3
 8003abc:	7afb      	ldrb	r3, [r7, #11]
 8003abe:	b299      	uxth	r1, r3
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	47a0      	blx	r4
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	e00d      	b.n	8003ae6 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	691c      	ldr	r4, [r3, #16]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	7b1b      	ldrb	r3, [r3, #12]
 8003ad2:	b298      	uxth	r0, r3
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	b299      	uxth	r1, r3
 8003ade:	893b      	ldrh	r3, [r7, #8]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	47a0      	blx	r4
 8003ae4:	4603      	mov	r3, r0
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}

08003aee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08c      	sub	sp, #48	; 0x30
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	461a      	mov	r2, r3
 8003afa:	460b      	mov	r3, r1
 8003afc:	72fb      	strb	r3, [r7, #11]
 8003afe:	4613      	mov	r3, r2
 8003b00:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003b08:	2340      	movs	r3, #64	; 0x40
 8003b0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003b14:	233d      	movs	r3, #61	; 0x3d
 8003b16:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003b18:	2315      	movs	r3, #21
 8003b1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003b1e:	2316      	movs	r3, #22
 8003b20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003b24:	2317      	movs	r3, #23
 8003b26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003b2a:	2314      	movs	r3, #20
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003b30:	2344      	movs	r3, #68	; 0x44
 8003b32:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003b34:	2302      	movs	r3, #2
 8003b36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003b3a:	2339      	movs	r3, #57	; 0x39
 8003b3c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003b46:	2329      	movs	r3, #41	; 0x29
 8003b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003b4c:	231e      	movs	r3, #30
 8003b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003b5e:	2310      	movs	r3, #16
 8003b60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f103 0020 	add.w	r0, r3, #32
 8003b76:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003b7a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f000 fa2a 	bl	8003fd8 <lis2mdl_write_reg>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8e:	e0e9      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f103 0020 	add.w	r0, r3, #32
 8003b96:	f107 021f 	add.w	r2, r7, #31
 8003b9a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f000 fa1a 	bl	8003fd8 <lis2mdl_write_reg>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bae:	e0d9      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f103 0020 	add.w	r0, r3, #32
 8003bb6:	f107 020b 	add.w	r2, r7, #11
 8003bba:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f000 fa0a 	bl	8003fd8 <lis2mdl_write_reg>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bce:	e0c9      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f103 0020 	add.w	r0, r3, #32
 8003bd6:	f107 021d 	add.w	r2, r7, #29
 8003bda:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003bde:	2301      	movs	r3, #1
 8003be0:	f000 f9fa 	bl	8003fd8 <lis2mdl_write_reg>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bee:	e0b9      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f103 0020 	add.w	r0, r3, #32
 8003bf6:	f107 021e 	add.w	r2, r7, #30
 8003bfa:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f000 f9ea 	bl	8003fd8 <lis2mdl_write_reg>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0e:	e0a9      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f103 0020 	add.w	r0, r3, #32
 8003c16:	f107 0220 	add.w	r2, r7, #32
 8003c1a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f000 f9da 	bl	8003fd8 <lis2mdl_write_reg>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c2e:	e099      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f103 0020 	add.w	r0, r3, #32
 8003c36:	f107 021c 	add.w	r2, r7, #28
 8003c3a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 f9b2 	bl	8003fa8 <lis2mdl_read_reg>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c4e:	e089      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003c50:	7f3b      	ldrb	r3, [r7, #28]
 8003c52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d102      	bne.n	8003c60 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003c5a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003c5e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f103 0020 	add.w	r0, r3, #32
 8003c66:	f107 021c 	add.w	r2, r7, #28
 8003c6a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f000 f9b2 	bl	8003fd8 <lis2mdl_write_reg>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c7e:	e071      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f103 0020 	add.w	r0, r3, #32
 8003c86:	f107 0214 	add.w	r2, r7, #20
 8003c8a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003c8e:	2306      	movs	r3, #6
 8003c90:	f000 f98a 	bl	8003fa8 <lis2mdl_read_reg>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c9e:	e061      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f103 0020 	add.w	r0, r3, #32
 8003ca6:	f107 021b 	add.w	r2, r7, #27
 8003caa:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f000 f97a 	bl	8003fa8 <lis2mdl_read_reg>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cbe:	e051      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003cc0:	7efa      	ldrb	r2, [r7, #27]
 8003cc2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d1e6      	bne.n	8003ca0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f103 0020 	add.w	r0, r3, #32
 8003cd8:	f107 021b 	add.w	r2, r7, #27
 8003cdc:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f000 f961 	bl	8003fa8 <lis2mdl_read_reg>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf0:	e038      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003cf2:	7efa      	ldrb	r2, [r7, #27]
 8003cf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1e6      	bne.n	8003cd2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f103 0020 	add.w	r0, r3, #32
 8003d0a:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003d0e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003d12:	2301      	movs	r3, #1
 8003d14:	f000 f960 	bl	8003fd8 <lis2mdl_write_reg>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d22:	e01f      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f103 0020 	add.w	r0, r3, #32
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	f000 f939 	bl	8003fa8 <lis2mdl_read_reg>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d40:	e010      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f103 0020 	add.w	r0, r3, #32
 8003d48:	f107 0220 	add.w	r2, r7, #32
 8003d4c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003d50:	2301      	movs	r3, #1
 8003d52:	f000 f941 	bl	8003fd8 <lis2mdl_write_reg>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d60:	e000      	b.n	8003d64 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3730      	adds	r7, #48	; 0x30
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	461a      	mov	r2, r3
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003d86:	2340      	movs	r3, #64	; 0x40
 8003d88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003d92:	233c      	movs	r3, #60	; 0x3c
 8003d94:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003d96:	2315      	movs	r3, #21
 8003d98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003d9c:	2316      	movs	r3, #22
 8003d9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003da2:	2317      	movs	r3, #23
 8003da4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003dac:	2314      	movs	r3, #20
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003db2:	2344      	movs	r3, #68	; 0x44
 8003db4:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003db6:	2339      	movs	r3, #57	; 0x39
 8003db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003dc2:	2329      	movs	r3, #41	; 0x29
 8003dc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003dc8:	231e      	movs	r3, #30
 8003dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003de0:	2340      	movs	r3, #64	; 0x40
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003de6:	230e      	movs	r3, #14
 8003de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f103 0020 	add.w	r0, r3, #32
 8003df2:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003df6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f000 f8ec 	bl	8003fd8 <lis2mdl_write_reg>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e0a:	e0c9      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f103 0020 	add.w	r0, r3, #32
 8003e12:	f107 021f 	add.w	r2, r7, #31
 8003e16:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f000 f8dc 	bl	8003fd8 <lis2mdl_write_reg>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e2a:	e0b9      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f103 0020 	add.w	r0, r3, #32
 8003e32:	f107 020b 	add.w	r2, r7, #11
 8003e36:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f000 f8cc 	bl	8003fd8 <lis2mdl_write_reg>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e4a:	e0a9      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f103 0020 	add.w	r0, r3, #32
 8003e52:	f107 021e 	add.w	r2, r7, #30
 8003e56:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f000 f8bc 	bl	8003fd8 <lis2mdl_write_reg>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e6a:	e099      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f103 0020 	add.w	r0, r3, #32
 8003e72:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003e76:	2301      	movs	r3, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	f000 f8ad 	bl	8003fd8 <lis2mdl_write_reg>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e88:	e08a      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f103 0020 	add.w	r0, r3, #32
 8003e90:	f107 021d 	add.w	r2, r7, #29
 8003e94:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f000 f89d 	bl	8003fd8 <lis2mdl_write_reg>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea8:	e07a      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f103 0020 	add.w	r0, r3, #32
 8003eb0:	f107 0220 	add.w	r2, r7, #32
 8003eb4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f000 f88d 	bl	8003fd8 <lis2mdl_write_reg>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ec8:	e06a      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f103 0020 	add.w	r0, r3, #32
 8003ed0:	f107 021c 	add.w	r2, r7, #28
 8003ed4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f000 f865 	bl	8003fa8 <lis2mdl_read_reg>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ee8:	e05a      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003eea:	7f3b      	ldrb	r3, [r7, #28]
 8003eec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d102      	bne.n	8003efa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f103 0020 	add.w	r0, r3, #32
 8003f00:	f107 021c 	add.w	r2, r7, #28
 8003f04:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f000 f865 	bl	8003fd8 <lis2mdl_write_reg>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f18:	e042      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f103 0020 	add.w	r0, r3, #32
 8003f20:	f107 0214 	add.w	r2, r7, #20
 8003f24:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003f28:	2306      	movs	r3, #6
 8003f2a:	f000 f83d 	bl	8003fa8 <lis2mdl_read_reg>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f38:	e032      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f103 0020 	add.w	r0, r3, #32
 8003f40:	f107 021b 	add.w	r2, r7, #27
 8003f44:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f000 f82d 	bl	8003fa8 <lis2mdl_read_reg>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f58:	e022      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003f5a:	7efa      	ldrb	r2, [r7, #27]
 8003f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f60:	4013      	ands	r3, r2
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1e6      	bne.n	8003f3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f103 0020 	add.w	r0, r3, #32
 8003f72:	f107 021b 	add.w	r2, r7, #27
 8003f76:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f000 f814 	bl	8003fa8 <lis2mdl_read_reg>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f8a:	e009      	b.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003f8c:	7efa      	ldrb	r2, [r7, #27]
 8003f8e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003f92:	4013      	ands	r3, r2
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d1e6      	bne.n	8003f6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3730      	adds	r7, #48	; 0x30
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	72fb      	strb	r3, [r7, #11]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685c      	ldr	r4, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68d8      	ldr	r0, [r3, #12]
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	7af9      	ldrb	r1, [r7, #11]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	47a0      	blx	r4
 8003fcc:	6178      	str	r0, [r7, #20]

  return ret;
 8003fce:	697b      	ldr	r3, [r7, #20]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	72fb      	strb	r3, [r7, #11]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681c      	ldr	r4, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68d8      	ldr	r0, [r3, #12]
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	7af9      	ldrb	r1, [r7, #11]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	47a0      	blx	r4
 8003ffc:	6178      	str	r0, [r7, #20]

  return ret;
 8003ffe:	697b      	ldr	r3, [r7, #20]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd90      	pop	{r4, r7, pc}

08004008 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004014:	f107 0208 	add.w	r2, r7, #8
 8004018:	2301      	movs	r3, #1
 800401a:	2160      	movs	r1, #96	; 0x60
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ffc3 	bl	8003fa8 <lis2mdl_read_reg>
 8004022:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	b2da      	uxtb	r2, r3
 8004032:	7a3b      	ldrb	r3, [r7, #8]
 8004034:	f362 0301 	bfi	r3, r2, #0, #2
 8004038:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800403a:	f107 0208 	add.w	r2, r7, #8
 800403e:	2301      	movs	r3, #1
 8004040:	2160      	movs	r1, #96	; 0x60
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ffc8 	bl	8003fd8 <lis2mdl_write_reg>
 8004048:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004060:	f107 0208 	add.w	r2, r7, #8
 8004064:	2301      	movs	r3, #1
 8004066:	2160      	movs	r1, #96	; 0x60
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff9d 	bl	8003fa8 <lis2mdl_read_reg>
 800406e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10f      	bne.n	8004096 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	b2da      	uxtb	r2, r3
 800407e:	7a3b      	ldrb	r3, [r7, #8]
 8004080:	f362 0383 	bfi	r3, r2, #2, #2
 8004084:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004086:	f107 0208 	add.w	r2, r7, #8
 800408a:	2301      	movs	r3, #1
 800408c:	2160      	movs	r1, #96	; 0x60
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffa2 	bl	8003fd8 <lis2mdl_write_reg>
 8004094:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004096:	68fb      	ldr	r3, [r7, #12]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040aa:	f107 0208 	add.w	r2, r7, #8
 80040ae:	2301      	movs	r3, #1
 80040b0:	2160      	movs	r1, #96	; 0x60
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff78 	bl	8003fa8 <lis2mdl_read_reg>
 80040b8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80040ba:	7a3b      	ldrb	r3, [r7, #8]
 80040bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d81a      	bhi.n	80040fc <lis2mdl_data_rate_get+0x5c>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <lis2mdl_data_rate_get+0x2c>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040e5 	.word	0x080040e5
 80040d4:	080040ed 	.word	0x080040ed
 80040d8:	080040f5 	.word	0x080040f5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
      break;
 80040e2:	e00f      	b.n	8004104 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e00b      	b.n	8004104 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2202      	movs	r2, #2
 80040f0:	701a      	strb	r2, [r3, #0]
      break;
 80040f2:	e007      	b.n	8004104 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2203      	movs	r2, #3
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e003      	b.n	8004104 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	bf00      	nop
  }

  return ret;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop

08004110 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800411c:	f107 0208 	add.w	r2, r7, #8
 8004120:	2301      	movs	r3, #1
 8004122:	2162      	movs	r1, #98	; 0x62
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff3f 	bl	8003fa8 <lis2mdl_read_reg>
 800412a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	b2da      	uxtb	r2, r3
 800413a:	7a3b      	ldrb	r3, [r7, #8]
 800413c:	f362 1304 	bfi	r3, r2, #4, #1
 8004140:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004142:	f107 0208 	add.w	r2, r7, #8
 8004146:	2301      	movs	r3, #1
 8004148:	2162      	movs	r1, #98	; 0x62
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff44 	bl	8003fd8 <lis2mdl_write_reg>
 8004150:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <lis2mdl_mag_data_ready_get>:
  * @param  val   change the values of zyxda in reg STATUS_REG.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_mag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  lis2mdl_status_reg_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_STATUS_REG, (uint8_t *)&reg, 1);
 8004166:	f107 0208 	add.w	r2, r7, #8
 800416a:	2301      	movs	r3, #1
 800416c:	2167      	movs	r1, #103	; 0x67
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ff1a 	bl	8003fa8 <lis2mdl_read_reg>
 8004174:	60f8      	str	r0, [r7, #12]
  *val = reg.zyxda;
 8004176:	7a3b      	ldrb	r3, [r7, #8]
 8004178:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	701a      	strb	r2, [r3, #0]

  return ret;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004198:	f107 020c 	add.w	r2, r7, #12
 800419c:	2306      	movs	r3, #6
 800419e:	2168      	movs	r1, #104	; 0x68
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff01 	bl	8003fa8 <lis2mdl_read_reg>
 80041a6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80041a8:	7b7b      	ldrb	r3, [r7, #13]
 80041aa:	b21a      	sxth	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	7b3b      	ldrb	r3, [r7, #12]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	b21a      	sxth	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3302      	adds	r3, #2
 80041d0:	b212      	sxth	r2, r2
 80041d2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	3302      	adds	r3, #2
 80041d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	7bbb      	ldrb	r3, [r7, #14]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	3302      	adds	r3, #2
 80041ee:	b212      	sxth	r2, r2
 80041f0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80041f2:	7c7a      	ldrb	r2, [r7, #17]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	3304      	adds	r3, #4
 80041f8:	b212      	sxth	r2, r2
 80041fa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	3304      	adds	r3, #4
 8004200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004204:	b29b      	uxth	r3, r3
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	b29a      	uxth	r2, r3
 800420a:	7c3b      	ldrb	r3, [r7, #16]
 800420c:	b29b      	uxth	r3, r3
 800420e:	4413      	add	r3, r2
 8004210:	b29a      	uxth	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	b212      	sxth	r2, r2
 8004218:	801a      	strh	r2, [r3, #0]

  return ret;
 800421a:	697b      	ldr	r3, [r7, #20]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800422e:	2301      	movs	r3, #1
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	214f      	movs	r1, #79	; 0x4f
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff feb7 	bl	8003fa8 <lis2mdl_read_reg>
 800423a:	60f8      	str	r0, [r7, #12]

  return ret;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004252:	f107 0208 	add.w	r2, r7, #8
 8004256:	2301      	movs	r3, #1
 8004258:	2162      	movs	r1, #98	; 0x62
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fea4 	bl	8003fa8 <lis2mdl_read_reg>
 8004260:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10f      	bne.n	8004288 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	7a3b      	ldrb	r3, [r7, #8]
 8004272:	f362 0341 	bfi	r3, r2, #1, #1
 8004276:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004278:	f107 0208 	add.w	r2, r7, #8
 800427c:	2301      	movs	r3, #1
 800427e:	2162      	movs	r1, #98	; 0x62
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fea9 	bl	8003fd8 <lis2mdl_write_reg>
 8004286:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800429e:	f107 0208 	add.w	r2, r7, #8
 80042a2:	2301      	movs	r3, #1
 80042a4:	2162      	movs	r1, #98	; 0x62
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fe7e 	bl	8003fa8 <lis2mdl_read_reg>
 80042ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10f      	bne.n	80042d4 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	7a3b      	ldrb	r3, [r7, #8]
 80042be:	f362 1345 	bfi	r3, r2, #5, #1
 80042c2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042c4:	f107 0208 	add.w	r2, r7, #8
 80042c8:	2301      	movs	r3, #1
 80042ca:	2162      	movs	r1, #98	; 0x62
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fe83 	bl	8003fd8 <lis2mdl_write_reg>
 80042d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042d4:	68fb      	ldr	r3, [r7, #12]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <LIS3DHH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_RegisterBusIO(LIS3DHH_Object_t *pObj, LIS3DHH_IO_t *pIO)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3DHH_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <LIS3DHH_RegisterBusIO+0x1c>
  {
    ret = LIS3DHH_ERROR;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e035      	b.n	8004368 <LIS3DHH_RegisterBusIO+0x88>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	7b1a      	ldrb	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <LIS3DHH_RegisterBusIO+0x94>)
 8004338:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <LIS3DHH_RegisterBusIO+0x98>)
 800433e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <LIS3DHH_RegisterBusIO+0x76>
    {
      ret = LIS3DHH_ERROR;
 800434e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e008      	b.n	8004368 <LIS3DHH_RegisterBusIO+0x88>
    }
    else if (pObj->IO.Init() != LIS3DHH_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4798      	blx	r3
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <LIS3DHH_RegisterBusIO+0x88>
    {
      ret = LIS3DHH_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004366:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08004895 	.word	0x08004895
 8004378:	080048cb 	.word	0x080048cb

0800437c <LIS3DHH_Init>:
 * @brief  Initialize the LIS3DHH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_Init(LIS3DHH_Object_t *pObj)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis3dhh_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3DHH_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	331c      	adds	r3, #28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fc0e 	bl	8004bac <lis3dhh_auto_add_inc_set>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <LIS3DHH_Init+0x20>
  {
    return LIS3DHH_ERROR;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800439a:	e02b      	b.n	80043f4 <LIS3DHH_Init+0x78>
  }

  /* Enable BDU */
  if (lis3dhh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3DHH_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	331c      	adds	r3, #28
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 faf4 	bl	8004990 <lis3dhh_block_data_update_set>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <LIS3DHH_Init+0x38>
  {
    return LIS3DHH_ERROR;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b2:	e01f      	b.n	80043f4 <LIS3DHH_Init+0x78>
  }

  /* FIFO mode selection */
  if (lis3dhh_fifo_mode_set(&(pObj->Ctx), LIS3DHH_BYPASS_MODE) != LIS3DHH_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	331c      	adds	r3, #28
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fbd0 	bl	8004b60 <lis3dhh_fifo_mode_set>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <LIS3DHH_Init+0x50>
  {
    return LIS3DHH_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	e013      	b.n	80043f4 <LIS3DHH_Init+0x78>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 1100.0f;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <LIS3DHH_Init+0x80>)
 80043d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Power mode selection - power down */
  if(lis3dhh_data_rate_set(&(pObj->Ctx), LIS3DHH_POWER_DOWN) != LIS3DHH_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	331c      	adds	r3, #28
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 faff 	bl	80049dc <lis3dhh_data_rate_set>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <LIS3DHH_Init+0x6e>
  {
    return LIS3DHH_ERROR;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e8:	e004      	b.n	80043f4 <LIS3DHH_Init+0x78>
  }
    
  pObj->is_initialized = 1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3DHH_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	44898000 	.word	0x44898000

08004400 <LIS3DHH_DeInit>:
 * @brief  Deinitialize the LIS3DHH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_DeInit(LIS3DHH_Object_t *pObj)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS3DHH_ACC_Disable(pObj) != LIS3DHH_OK)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f879 	bl	8004500 <LIS3DHH_ACC_Disable>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <LIS3DHH_DeInit+0x1a>
  {
    return LIS3DHH_ERROR;
 8004414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004418:	e008      	b.n	800442c <LIS3DHH_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3DHH_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <LIS3DHH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ReadID(LIS3DHH_Object_t *pObj, uint8_t *Id)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  if (lis3dhh_device_id_get(&(pObj->Ctx), Id) != LIS3DHH_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	331c      	adds	r3, #28
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fb7a 	bl	8004b3e <lis3dhh_device_id_get>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <LIS3DHH_ReadID+0x22>
  {
    return LIS3DHH_ERROR;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004454:	e000      	b.n	8004458 <LIS3DHH_ReadID+0x24>
  }

  return LIS3DHH_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <LIS3DHH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS3DHH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_GetCapabilities(LIS3DHH_Object_t *pObj, LIS3DHH_Capabilities_t *Capabilities)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2200      	movs	r2, #0
 8004474:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 2;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2202      	movs	r2, #2
 800448c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1100.0f;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4a06      	ldr	r2, [pc, #24]	; (80044b8 <LIS3DHH_GetCapabilities+0x58>)
 80044a0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	619a      	str	r2, [r3, #24]
  return LIS3DHH_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	44898000 	.word	0x44898000

080044bc <LIS3DHH_ACC_Enable>:
 * @brief  Enable the LIS3DHH accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_Enable(LIS3DHH_Object_t *pObj)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <LIS3DHH_ACC_Enable+0x16>
  {
    return LIS3DHH_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e012      	b.n	80044f8 <LIS3DHH_ACC_Enable+0x3c>
  }
  
  /* Output data rate selection. */
  if (LIS3DHH_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr) != LIS3DHH_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044d8:	eeb0 0a67 	vmov.f32	s0, s15
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f989 	bl	80047f4 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <LIS3DHH_ACC_Enable+0x32>
  {
    return LIS3DHH_ERROR;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ec:	e004      	b.n	80044f8 <LIS3DHH_ACC_Enable+0x3c>
  }

  pObj->acc_is_enabled = 1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3DHH_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <LIS3DHH_ACC_Disable>:
 * @brief  Disable the LIS3DHH accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_Disable(LIS3DHH_Object_t *pObj)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <LIS3DHH_ACC_Disable+0x16>
  {
    return LIS3DHH_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e01c      	b.n	8004550 <LIS3DHH_ACC_Disable+0x50>
  }

  /* Get current output data rate. */
  if (LIS3DHH_ACC_GetOutputDataRate(pObj, &pObj->acc_odr) != LIS3DHH_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	332c      	adds	r3, #44	; 0x2c
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f82f 	bl	8004580 <LIS3DHH_ACC_GetOutputDataRate>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <LIS3DHH_ACC_Disable+0x2e>
  {
    return LIS3DHH_ERROR;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452c:	e010      	b.n	8004550 <LIS3DHH_ACC_Disable+0x50>
  }

  /* Output data rate selection - power down. */
  if(lis3dhh_data_rate_set(&(pObj->Ctx), LIS3DHH_POWER_DOWN) != LIS3DHH_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	331c      	adds	r3, #28
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fa51 	bl	80049dc <lis3dhh_data_rate_set>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <LIS3DHH_ACC_Disable+0x46>
  {
    return LIS3DHH_ERROR;
 8004540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004544:	e004      	b.n	8004550 <LIS3DHH_ACC_Disable+0x50>
  }

  pObj->acc_is_enabled = 0;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3DHH_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <LIS3DHH_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_GetSensitivity(LIS3DHH_Object_t *pObj, float *Sensitivity)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3DHH_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
  
  /* There is only one value of sensitivity */
  *Sensitivity = LIS3DHH_ACC_SENSITIVITY;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <LIS3DHH_ACC_GetSensitivity+0x24>)
 800456a:	601a      	str	r2, [r3, #0]
  
  return ret;
 800456c:	68fb      	ldr	r3, [r7, #12]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	3d9ba5e3 	.word	0x3d9ba5e3

08004580 <LIS3DHH_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_GetOutputDataRate(LIS3DHH_Object_t *pObj, float *Odr)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3DHH_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
  lis3dhh_norm_mod_en_t mode;

  /* Read actual power mode selection from sensor. */
  if (lis3dhh_data_rate_get(&(pObj->Ctx), &mode) != LIS3DHH_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	331c      	adds	r3, #28
 8004592:	f107 020b 	add.w	r2, r7, #11
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fa45 	bl	8004a28 <lis3dhh_data_rate_get>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <LIS3DHH_ACC_GetOutputDataRate+0x2a>
  {
    return LIS3DHH_ERROR;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a8:	e017      	b.n	80045da <LIS3DHH_ACC_GetOutputDataRate+0x5a>
  }

  switch(mode)
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <LIS3DHH_ACC_GetOutputDataRate+0x36>
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d004      	beq.n	80045be <LIS3DHH_ACC_GetOutputDataRate+0x3e>
 80045b4:	e009      	b.n	80045ca <LIS3DHH_ACC_GetOutputDataRate+0x4a>
  {
    case LIS3DHH_POWER_DOWN:
      ret = LIS3DHH_ERROR;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ba:	60fb      	str	r3, [r7, #12]
      break;
 80045bc:	e00c      	b.n	80045d8 <LIS3DHH_ACC_GetOutputDataRate+0x58>
      
    case LIS3DHH_1kHz1:
      *Odr = 1100.0f;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <LIS3DHH_ACC_GetOutputDataRate+0x64>)
 80045c2:	601a      	str	r2, [r3, #0]
      ret = LIS3DHH_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
      break;
 80045c8:	e006      	b.n	80045d8 <LIS3DHH_ACC_GetOutputDataRate+0x58>
     
    default:
      *Odr = -1.0f;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	4a06      	ldr	r2, [pc, #24]	; (80045e8 <LIS3DHH_ACC_GetOutputDataRate+0x68>)
 80045ce:	601a      	str	r2, [r3, #0]
      ret = LIS3DHH_ERROR;
 80045d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d4:	60fb      	str	r3, [r7, #12]
      break;
 80045d6:	bf00      	nop
  }

  return ret;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	44898000 	.word	0x44898000
 80045e8:	bf800000 	.word	0xbf800000

080045ec <LIS3DHH_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_SetOutputDataRate(LIS3DHH_Object_t *pObj, float Odr)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d106      	bne.n	8004610 <LIS3DHH_ACC_SetOutputDataRate+0x24>
  {
    return LIS3DHH_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004602:	ed97 0a00 	vldr	s0, [r7]
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8f4 	bl	80047f4 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled>
 800460c:	4603      	mov	r3, r0
 800460e:	e005      	b.n	800461c <LIS3DHH_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LIS3DHH_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004610:	ed97 0a00 	vldr	s0, [r7]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f91d 	bl	8004854 <LIS3DHH_ACC_SetOutputDataRate_When_Disabled>
 800461a:	4603      	mov	r3, r0
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <LIS3DHH_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_GetFullScale(LIS3DHH_Object_t *pObj, int32_t *FullScale)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3DHH_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
  
  *FullScale =  2;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2202      	movs	r2, #2
 8004636:	601a      	str	r2, [r3, #0]
  
  return ret;
 8004638:	68fb      	ldr	r3, [r7, #12]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LIS3DHH_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_SetFullScale(LIS3DHH_Object_t *pObj, int32_t FullScale)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  return LIS3DHH_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <LIS3DHH_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_GetAxesRaw(LIS3DHH_Object_t *pObj, LIS3DHH_AxesRaw_t *Value)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  lis3dhh_axis3bit16_t data_raw;
  lis3dhh_norm_mod_en_t mode;
  int32_t ret = LIS3DHH_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis3dhh_data_rate_get(&(pObj->Ctx), &mode) != LIS3DHH_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	331c      	adds	r3, #28
 8004670:	f107 020b 	add.w	r2, r7, #11
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f9d6 	bl	8004a28 <lis3dhh_data_rate_get>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <LIS3DHH_ACC_GetAxesRaw+0x2a>
  {
    return LIS3DHH_ERROR;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004686:	e029      	b.n	80046dc <LIS3DHH_ACC_GetAxesRaw+0x7e>
  }

  /* Read raw data values. */
  if (lis3dhh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3DHH_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	331c      	adds	r3, #28
 800468c:	f107 020c 	add.w	r2, r7, #12
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f9ef 	bl	8004a76 <lis3dhh_acceleration_raw_get>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <LIS3DHH_ACC_GetAxesRaw+0x46>
  {
    return LIS3DHH_ERROR;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a2:	e01b      	b.n	80046dc <LIS3DHH_ACC_GetAxesRaw+0x7e>
  }

  switch(mode)
 80046a4:	7afb      	ldrb	r3, [r7, #11]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <LIS3DHH_ACC_GetAxesRaw+0x52>
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d004      	beq.n	80046b8 <LIS3DHH_ACC_GetAxesRaw+0x5a>
 80046ae:	e010      	b.n	80046d2 <LIS3DHH_ACC_GetAxesRaw+0x74>
  {
  case LIS3DHH_POWER_DOWN:
    ret = LIS3DHH_ERROR;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046b4:	617b      	str	r3, [r7, #20]
    break;
 80046b6:	e010      	b.n	80046da <LIS3DHH_ACC_GetAxesRaw+0x7c>
    
  case LIS3DHH_1kHz1:
    Value->x = (data_raw.i16bit[0]);
 80046b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	801a      	strh	r2, [r3, #0]
    Value->y = (data_raw.i16bit[1]);
 80046c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	805a      	strh	r2, [r3, #2]
    Value->z = (data_raw.i16bit[2]);
 80046c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	809a      	strh	r2, [r3, #4]
    break;
 80046d0:	e003      	b.n	80046da <LIS3DHH_ACC_GetAxesRaw+0x7c>

    default:
      ret = LIS3DHH_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046d6:	617b      	str	r3, [r7, #20]
      break;
 80046d8:	bf00      	nop
  }

  return ret;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <LIS3DHH_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_GetAxes(LIS3DHH_Object_t *pObj, LIS3DHH_Axes_t *Acceleration)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  LIS3DHH_AxesRaw_t data_raw;
  
  /* Read raw data values. */
  if (LIS3DHH_ACC_GetAxesRaw(pObj, &data_raw) != LIS3DHH_OK)
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ffb2 	bl	800465e <LIS3DHH_ACC_GetAxesRaw>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <LIS3DHH_ACC_GetAxes+0x22>
  {
    return LIS3DHH_ERROR;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004704:	e027      	b.n	8004756 <LIS3DHH_ACC_GetAxes+0x72>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)lis3dhh_from_lsb_to_mg(data_raw.x);
 8004706:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f928 	bl	8004960 <lis3dhh_from_lsb_to_mg>
 8004710:	eef0 7a40 	vmov.f32	s15, s0
 8004714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004718:	ee17 2a90 	vmov	r2, s15
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)lis3dhh_from_lsb_to_mg(data_raw.y);
 8004720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f91b 	bl	8004960 <lis3dhh_from_lsb_to_mg>
 800472a:	eef0 7a40 	vmov.f32	s15, s0
 800472e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004732:	ee17 2a90 	vmov	r2, s15
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)lis3dhh_from_lsb_to_mg(data_raw.z);
 800473a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f90e 	bl	8004960 <lis3dhh_from_lsb_to_mg>
 8004744:	eef0 7a40 	vmov.f32	s15, s0
 8004748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800474c:	ee17 2a90 	vmov	r2, s15
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	609a      	str	r2, [r3, #8]

  return LIS3DHH_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <LIS3DHH_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_Read_Reg(LIS3DHH_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	460b      	mov	r3, r1
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	72fb      	strb	r3, [r7, #11]
  if (lis3dhh_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS3DHH_OK)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f103 001c 	add.w	r0, r3, #28
 8004772:	7af9      	ldrb	r1, [r7, #11]
 8004774:	2301      	movs	r3, #1
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f000 f8c2 	bl	8004900 <lis3dhh_read_reg>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <LIS3DHH_Read_Reg+0x2a>
  {
    return LIS3DHH_ERROR;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004786:	e000      	b.n	800478a <LIS3DHH_Read_Reg+0x2c>
  }

  return LIS3DHH_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <LIS3DHH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_Write_Reg(LIS3DHH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
 800479e:	4613      	mov	r3, r2
 80047a0:	70bb      	strb	r3, [r7, #2]
  if (lis3dhh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3DHH_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f103 001c 	add.w	r0, r3, #28
 80047a8:	1cba      	adds	r2, r7, #2
 80047aa:	78f9      	ldrb	r1, [r7, #3]
 80047ac:	2301      	movs	r3, #1
 80047ae:	f000 f8bf 	bl	8004930 <lis3dhh_write_reg>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <LIS3DHH_Write_Reg+0x2c>
  {
    return LIS3DHH_ERROR;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047bc:	e000      	b.n	80047c0 <LIS3DHH_Write_Reg+0x2e>
  }

  return LIS3DHH_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <LIS3DHH_ACC_Get_DRDY_Status>:
 * @param  pObj the device pObj
 * @param  Status the status of data ready bit
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3DHH_ACC_Get_DRDY_Status(LIS3DHH_Object_t *pObj, uint8_t *Status)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  if (lis3dhh_xl_data_ready_get(&(pObj->Ctx), Status) != LIS3DHH_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	331c      	adds	r3, #28
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f997 	bl	8004b0c <lis3dhh_xl_data_ready_get>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <LIS3DHH_ACC_Get_DRDY_Status+0x22>
  {
    return LIS3DHH_ERROR;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	e000      	b.n	80047ec <LIS3DHH_ACC_Get_DRDY_Status+0x24>
  }

  return LIS3DHH_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS3DHH_ACC_SetOutputDataRate_When_Enabled(LIS3DHH_Object_t *pObj, float Odr)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	ed87 0a00 	vstr	s0, [r7]
  
  lis3dhh_norm_mod_en_t new_odr;

  if(Odr <= 1100)
 8004800:	edd7 7a00 	vldr	s15, [r7]
 8004804:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004850 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled+0x5c>
 8004808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004810:	d80e      	bhi.n	8004830 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled+0x3c>
  {
    new_odr = LIS3DHH_1kHz1;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
    /* Output data rate selection. */
    if (lis3dhh_data_rate_set(&(pObj->Ctx), new_odr) != LIS3DHH_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	331c      	adds	r3, #28
 800481a:	7bfa      	ldrb	r2, [r7, #15]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f8dc 	bl	80049dc <lis3dhh_data_rate_set>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled+0x42>
    {
      return LIS3DHH_ERROR;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800482e:	e00b      	b.n	8004848 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled+0x54>
    }
  }
  else
  {
    return LIS3DHH_ERROR;
 8004830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004834:	e008      	b.n	8004848 <LIS3DHH_ACC_SetOutputDataRate_When_Enabled+0x54>
  }
  
  pObj->acc_odr = new_odr;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  
  return LIS3DHH_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	44898000 	.word	0x44898000

08004854 <LIS3DHH_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS3DHH_ACC_SetOutputDataRate_When_Disabled(LIS3DHH_Object_t *pObj, float Odr)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	ed87 0a00 	vstr	s0, [r7]

  if(Odr <= 1100.0f)
 8004860:	edd7 7a00 	vldr	s15, [r7]
 8004864:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800488c <LIS3DHH_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	d804      	bhi.n	800487c <LIS3DHH_ACC_SetOutputDataRate_When_Disabled+0x28>
  {
    pObj->acc_odr = 1100.0f;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a06      	ldr	r2, [pc, #24]	; (8004890 <LIS3DHH_ACC_SetOutputDataRate_When_Disabled+0x3c>)
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    return LIS3DHH_ERROR;
  }

  return LIS3DHH_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e001      	b.n	8004880 <LIS3DHH_ACC_SetOutputDataRate_When_Disabled+0x2c>
    return LIS3DHH_ERROR;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	44898000 	.word	0x44898000
 8004890:	44898000 	.word	0x44898000

08004894 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	460b      	mov	r3, r1
 80048a2:	72fb      	strb	r3, [r7, #11]
 80048a4:	4613      	mov	r3, r2
 80048a6:	813b      	strh	r3, [r7, #8]
  LIS3DHH_Object_t *pObj = (LIS3DHH_Object_t *)Handle;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	695c      	ldr	r4, [r3, #20]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	7b1b      	ldrb	r3, [r3, #12]
 80048b4:	b298      	uxth	r0, r3
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	b299      	uxth	r1, r3
 80048ba:	893b      	ldrh	r3, [r7, #8]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	47a0      	blx	r4
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}

080048ca <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	461a      	mov	r2, r3
 80048d6:	460b      	mov	r3, r1
 80048d8:	72fb      	strb	r3, [r7, #11]
 80048da:	4613      	mov	r3, r2
 80048dc:	813b      	strh	r3, [r7, #8]
  LIS3DHH_Object_t *pObj = (LIS3DHH_Object_t *)Handle;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	691c      	ldr	r4, [r3, #16]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	7b1b      	ldrb	r3, [r3, #12]
 80048ea:	b298      	uxth	r0, r3
 80048ec:	7afb      	ldrb	r3, [r7, #11]
 80048ee:	b299      	uxth	r1, r3
 80048f0:	893b      	ldrh	r3, [r7, #8]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	47a0      	blx	r4
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd90      	pop	{r4, r7, pc}

08004900 <lis3dhh_read_reg>:
  *
  */
int32_t lis3dhh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	461a      	mov	r2, r3
 800490c:	460b      	mov	r3, r1
 800490e:	72fb      	strb	r3, [r7, #11]
 8004910:	4613      	mov	r3, r2
 8004912:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685c      	ldr	r4, [r3, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6898      	ldr	r0, [r3, #8]
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	7af9      	ldrb	r1, [r7, #11]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	47a0      	blx	r4
 8004924:	6178      	str	r0, [r7, #20]

  return ret;
 8004926:	697b      	ldr	r3, [r7, #20]
}
 8004928:	4618      	mov	r0, r3
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd90      	pop	{r4, r7, pc}

08004930 <lis3dhh_write_reg>:
  *
  */
int32_t lis3dhh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	460b      	mov	r3, r1
 800493e:	72fb      	strb	r3, [r7, #11]
 8004940:	4613      	mov	r3, r2
 8004942:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681c      	ldr	r4, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6898      	ldr	r0, [r3, #8]
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	7af9      	ldrb	r1, [r7, #11]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	47a0      	blx	r4
 8004954:	6178      	str	r0, [r7, #20]

  return ret;
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <lis3dhh_from_lsb_to_mg>:
  * @{
  *
  */

float_t lis3dhh_from_lsb_to_mg(int16_t lsb)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.076f);
 800496a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800498c <lis3dhh_from_lsb_to_mg+0x2c>
 800497a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800497e:	eeb0 0a67 	vmov.f32	s0, s15
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	3d9ba5e3 	.word	0x3d9ba5e3

08004990 <lis3dhh_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  lis3dhh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800499c:	f107 0208 	add.w	r2, r7, #8
 80049a0:	2301      	movs	r3, #1
 80049a2:	2120      	movs	r1, #32
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ffab 	bl	8004900 <lis3dhh_read_reg>
 80049aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <lis3dhh_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	7a3b      	ldrb	r3, [r7, #8]
 80049bc:	f362 0300 	bfi	r3, r2, #0, #1
 80049c0:	723b      	strb	r3, [r7, #8]
    ret = lis3dhh_write_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80049c2:	f107 0208 	add.w	r2, r7, #8
 80049c6:	2301      	movs	r3, #1
 80049c8:	2120      	movs	r1, #32
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ffb0 	bl	8004930 <lis3dhh_write_reg>
 80049d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049d2:	68fb      	ldr	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <lis3dhh_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_data_rate_set(stmdev_ctx_t *ctx,
                              lis3dhh_norm_mod_en_t val)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  lis3dhh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80049e8:	f107 0208 	add.w	r2, r7, #8
 80049ec:	2301      	movs	r3, #1
 80049ee:	2120      	movs	r1, #32
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff85 	bl	8004900 <lis3dhh_read_reg>
 80049f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10f      	bne.n	8004a1e <lis3dhh_data_rate_set+0x42>
  {
    ctrl_reg1.norm_mod_en = (uint8_t)val;
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	7a3b      	ldrb	r3, [r7, #8]
 8004a08:	f362 13c7 	bfi	r3, r2, #7, #1
 8004a0c:	723b      	strb	r3, [r7, #8]
    ret = lis3dhh_write_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004a0e:	f107 0208 	add.w	r2, r7, #8
 8004a12:	2301      	movs	r3, #1
 8004a14:	2120      	movs	r1, #32
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff8a 	bl	8004930 <lis3dhh_write_reg>
 8004a1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <lis3dhh_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_data_rate_get(stmdev_ctx_t *ctx,
                              lis3dhh_norm_mod_en_t *val)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  lis3dhh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004a32:	f107 0208 	add.w	r2, r7, #8
 8004a36:	2301      	movs	r3, #1
 8004a38:	2120      	movs	r1, #32
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ff60 	bl	8004900 <lis3dhh_read_reg>
 8004a40:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.norm_mod_en)
 8004a42:	7a3b      	ldrb	r3, [r7, #8]
 8004a44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <lis3dhh_data_rate_get+0x2c>
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d004      	beq.n	8004a5c <lis3dhh_data_rate_get+0x34>
 8004a52:	e007      	b.n	8004a64 <lis3dhh_data_rate_get+0x3c>
  {
    case LIS3DHH_POWER_DOWN:
      *val = LIS3DHH_POWER_DOWN;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
      break;
 8004a5a:	e007      	b.n	8004a6c <lis3dhh_data_rate_get+0x44>

    case LIS3DHH_1kHz1:
      *val = LIS3DHH_1kHz1;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
      break;
 8004a62:	e003      	b.n	8004a6c <lis3dhh_data_rate_get+0x44>

    default:
      *val = LIS3DHH_POWER_DOWN;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	bf00      	nop
  }

  return ret;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <lis3dhh_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_OUT_X_L_XL, buff, 6);
 8004a80:	f107 020c 	add.w	r2, r7, #12
 8004a84:	2306      	movs	r3, #6
 8004a86:	2128      	movs	r1, #40	; 0x28
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ff39 	bl	8004900 <lis3dhh_read_reg>
 8004a8e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004a90:	7b7b      	ldrb	r3, [r7, #13]
 8004a92:	b21a      	sxth	r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	7b3b      	ldrb	r3, [r7, #12]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	b21a      	sxth	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	b212      	sxth	r2, r2
 8004aba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3302      	adds	r3, #2
 8004ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	b212      	sxth	r2, r2
 8004ad8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004ada:	7c7a      	ldrb	r2, [r7, #17]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	b212      	sxth	r2, r2
 8004ae2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	7c3b      	ldrb	r3, [r7, #16]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	3304      	adds	r3, #4
 8004afe:	b212      	sxth	r2, r2
 8004b00:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <lis3dhh_xl_data_ready_get>:
  * @param  val    Get the values of zyxda in reg STATUS.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_xl_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  lis3dhh_status_t status;
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_STATUS, (uint8_t *)&status, 1);
 8004b16:	f107 0208 	add.w	r2, r7, #8
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	2127      	movs	r1, #39	; 0x27
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff feee 	bl	8004900 <lis3dhh_read_reg>
 8004b24:	60f8      	str	r0, [r7, #12]
  *val = status.zyxda;
 8004b26:	7a3b      	ldrb	r3, [r7, #8]
 8004b28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <lis3dhh_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_WHO_AM_I, buff, 1);
 8004b48:	2301      	movs	r3, #1
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	210f      	movs	r1, #15
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff fed6 	bl	8004900 <lis3dhh_read_reg>
 8004b54:	60f8      	str	r0, [r7, #12]

  return ret;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <lis3dhh_fifo_mode_set>:
  * @param  val    Change the values of fmode in reg FIFO_CTRL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_fifo_mode_set(stmdev_ctx_t *ctx, lis3dhh_fmode_t val)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  lis3dhh_fifo_ctrl_t fifo_ctrl;
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004b6c:	f107 0208 	add.w	r2, r7, #8
 8004b70:	2301      	movs	r3, #1
 8004b72:	212e      	movs	r1, #46	; 0x2e
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fec3 	bl	8004900 <lis3dhh_read_reg>
 8004b7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <lis3dhh_fifo_mode_set+0x42>
  {
    fifo_ctrl.fmode = (uint8_t)val;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	7a3b      	ldrb	r3, [r7, #8]
 8004b8c:	f362 1347 	bfi	r3, r2, #5, #3
 8004b90:	723b      	strb	r3, [r7, #8]
    ret = lis3dhh_write_reg(ctx, LIS3DHH_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004b92:	f107 0208 	add.w	r2, r7, #8
 8004b96:	2301      	movs	r3, #1
 8004b98:	212e      	movs	r1, #46	; 0x2e
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fec8 	bl	8004930 <lis3dhh_write_reg>
 8004ba0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <lis3dhh_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lis3dhh_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
  lis3dhh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dhh_read_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004bb8:	f107 0208 	add.w	r2, r7, #8
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fe9d 	bl	8004900 <lis3dhh_read_reg>
 8004bc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10f      	bne.n	8004bee <lis3dhh_auto_add_inc_set+0x42>
  {
    ctrl_reg1.if_add_inc = val;
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	7a3b      	ldrb	r3, [r7, #8]
 8004bd8:	f362 1386 	bfi	r3, r2, #6, #1
 8004bdc:	723b      	strb	r3, [r7, #8]
    ret = lis3dhh_write_reg(ctx, LIS3DHH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004bde:	f107 0208 	add.w	r2, r7, #8
 8004be2:	2301      	movs	r3, #1
 8004be4:	2120      	movs	r1, #32
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fea2 	bl	8004930 <lis3dhh_write_reg>
 8004bec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e051      	b.n	8004cb8 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	7b1a      	ldrb	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <LPS22HH_RegisterBusIO+0xcc>)
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <LPS22HH_RegisterBusIO+0xd0>)
 8004c56:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e020      	b.n	8004cb8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4798      	blx	r3
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e016      	b.n	8004cb8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d112      	bne.n	8004cb8 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2110      	movs	r1, #16
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa25 	bl	80050f6 <LPS22HH_Write_Reg>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	0800541f 	.word	0x0800541f
 8004cc8:	08005455 	.word	0x08005455

08004ccc <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fb54 	bl	800538c <LPS22HH_Initialize>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cee:	e004      	b.n	8004cfa <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d111      	bne.n	8004d38 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f877 	bl	8004e08 <LPS22HH_PRESS_Disable>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d24:	e00d      	b.n	8004d42 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f92e 	bl	8004f88 <LPS22HH_TEMP_Disable>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d36:	e004      	b.n	8004d42 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3320      	adds	r3, #32
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fd92 	bl	8005884 <lps22hh_device_id_get>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d6a:	e000      	b.n	8004d6e <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <LPS22HH_GetCapabilities+0x44>)
 8004da6:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <LPS22HH_GetCapabilities+0x44>)
 8004dac:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	43480000 	.word	0x43480000

08004dc0 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e014      	b.n	8004e00 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f103 0220 	add.w	r2, r3, #32
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 fbd9 	bl	800559c <lps22hh_data_rate_set>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004df4:	e004      	b.n	8004e00 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e024      	b.n	8004e68 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11a      	bne.n	8004e5e <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f103 0220 	add.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3333      	adds	r3, #51	; 0x33
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f000 fbff 	bl	8005638 <lps22hh_data_rate_get>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e44:	e010      	b.n	8004e68 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3320      	adds	r3, #32
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fba5 	bl	800559c <lps22hh_data_rate_set>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5c:	e004      	b.n	8004e68 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f955 	bl	800512c <LPS22HH_GetOutputDataRate>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d106      	bne.n	8004eb0 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004ea2:	ed97 0a00 	vldr	s0, [r7]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9a4 	bl	80051f4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004eac:	4603      	mov	r3, r0
 8004eae:	e005      	b.n	8004ebc <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004eb0:	ed97 0a00 	vldr	s0, [r7]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa0f 	bl	80052d8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004eba:	4603      	mov	r3, r0
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f013 f8db 	bl	8018092 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3320      	adds	r3, #32
 8004ee0:	f107 020c 	add.w	r2, r7, #12
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fc80 	bl	80057ec <lps22hh_pressure_raw_get>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef6:	e009      	b.n	8004f0c <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 faf6 	bl	80054ec <lps22hh_from_lsb_to_hpa>
 8004f00:	eef0 7a40 	vmov.f32	s15, s0
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <LPS22HH_PRESS_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Get_DRDY_Status(LPS22HH_Object_t *pObj, uint8_t *Status)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  if (lps22hh_press_flag_data_ready_get(&(pObj->Ctx), Status) != LPS22HH_OK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3320      	adds	r3, #32
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fc2f 	bl	8005788 <lps22hh_press_flag_data_ready_get>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <LPS22HH_PRESS_Get_DRDY_Status+0x22>
  {
    return LPS22HH_ERROR;
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f34:	e000      	b.n	8004f38 <LPS22HH_PRESS_Get_DRDY_Status+0x24>
  }

  return LPS22HH_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e014      	b.n	8004f80 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f103 0220 	add.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f000 fb19 	bl	800559c <lps22hh_data_rate_set>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f74:	e004      	b.n	8004f80 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e024      	b.n	8004fe8 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11a      	bne.n	8004fde <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f103 0220 	add.w	r2, r3, #32
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3333      	adds	r3, #51	; 0x33
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fb3f 	bl	8005638 <lps22hh_data_rate_get>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc4:	e010      	b.n	8004fe8 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3320      	adds	r3, #32
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fae5 	bl	800559c <lps22hh_data_rate_set>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fdc:	e004      	b.n	8004fe8 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f895 	bl	800512c <LPS22HH_GetOutputDataRate>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005022:	ed97 0a00 	vldr	s0, [r7]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8e4 	bl	80051f4 <LPS22HH_SetOutputDataRate_When_Enabled>
 800502c:	4603      	mov	r3, r0
 800502e:	e005      	b.n	800503c <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005030:	ed97 0a00 	vldr	s0, [r7]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f94f 	bl	80052d8 <LPS22HH_SetOutputDataRate_When_Disabled>
 800503a:	4603      	mov	r3, r0
  }
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800504e:	f107 030c 	add.w	r3, r7, #12
 8005052:	2202      	movs	r2, #2
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f013 f81b 	bl	8018092 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3320      	adds	r3, #32
 8005060:	f107 020c 	add.w	r2, r7, #12
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fbe9 	bl	800583e <lps22hh_temperature_raw_get>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005076:	e00a      	b.n	800508e <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005078:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fa4d 	bl	800551c <lps22hh_from_lsb_to_celsius>
 8005082:	eef0 7a40 	vmov.f32	s15, s0
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <LPS22HH_TEMP_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Get_DRDY_Status(LPS22HH_Object_t *pObj, uint8_t *Status)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  if (lps22hh_temp_flag_data_ready_get(&(pObj->Ctx), Status) != LPS22HH_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3320      	adds	r3, #32
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fb87 	bl	80057ba <lps22hh_temp_flag_data_ready_get>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <LPS22HH_TEMP_Get_DRDY_Status+0x22>
  {
    return LPS22HH_ERROR;
 80050b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b6:	e000      	b.n	80050ba <LPS22HH_TEMP_Get_DRDY_Status+0x24>
  }

  return LPS22HH_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <LPS22HH_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data value to be read
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Read_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	460b      	mov	r3, r1
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	72fb      	strb	r3, [r7, #11]
  if (lps22hh_read_reg(&(pObj->Ctx), Reg, Data, 1) != LPS22HH_OK)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f103 0020 	add.w	r0, r3, #32
 80050d6:	7af9      	ldrb	r1, [r7, #11]
 80050d8:	2301      	movs	r3, #1
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	f000 f9d5 	bl	800548a <lps22hh_read_reg>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <LPS22HH_Read_Reg+0x2a>
  {
    return LPS22HH_ERROR;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ea:	e000      	b.n	80050ee <LPS22HH_Read_Reg+0x2c>
  }

  return LPS22HH_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
 8005102:	4613      	mov	r3, r2
 8005104:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f103 0020 	add.w	r0, r3, #32
 800510c:	1cba      	adds	r2, r7, #2
 800510e:	78f9      	ldrb	r1, [r7, #3]
 8005110:	2301      	movs	r3, #1
 8005112:	f000 f9d2 	bl	80054ba <lps22hh_write_reg>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005120:	e000      	b.n	8005124 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3320      	adds	r3, #32
 800513e:	f107 020b 	add.w	r2, r7, #11
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fa77 	bl	8005638 <lps22hh_data_rate_get>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005154:	e03d      	b.n	80051d2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b07      	cmp	r3, #7
 800515a:	d835      	bhi.n	80051c8 <LPS22HH_GetOutputDataRate+0x9c>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <LPS22HH_GetOutputDataRate+0x38>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005185 	.word	0x08005185
 8005168:	0800518f 	.word	0x0800518f
 800516c:	08005199 	.word	0x08005199
 8005170:	080051a1 	.word	0x080051a1
 8005174:	080051a9 	.word	0x080051a9
 8005178:	080051b1 	.word	0x080051b1
 800517c:	080051b9 	.word	0x080051b9
 8005180:	080051c1 	.word	0x080051c1
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
      break;
 800518c:	e020      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005194:	601a      	str	r2, [r3, #0]
      break;
 8005196:	e01b      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <LPS22HH_GetOutputDataRate+0xb0>)
 800519c:	601a      	str	r2, [r3, #0]
      break;
 800519e:	e017      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <LPS22HH_GetOutputDataRate+0xb4>)
 80051a4:	601a      	str	r2, [r3, #0]
      break;
 80051a6:	e013      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <LPS22HH_GetOutputDataRate+0xb8>)
 80051ac:	601a      	str	r2, [r3, #0]
      break;
 80051ae:	e00f      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4a0d      	ldr	r2, [pc, #52]	; (80051e8 <LPS22HH_GetOutputDataRate+0xbc>)
 80051b4:	601a      	str	r2, [r3, #0]
      break;
 80051b6:	e00b      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <LPS22HH_GetOutputDataRate+0xc0>)
 80051bc:	601a      	str	r2, [r3, #0]
      break;
 80051be:	e007      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4a0b      	ldr	r2, [pc, #44]	; (80051f0 <LPS22HH_GetOutputDataRate+0xc4>)
 80051c4:	601a      	str	r2, [r3, #0]
      break;
 80051c6:	e003      	b.n	80051d0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051cc:	60fb      	str	r3, [r7, #12]
      break;
 80051ce:	bf00      	nop
  }

  return ret;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	41200000 	.word	0x41200000
 80051e0:	41c80000 	.word	0x41c80000
 80051e4:	42480000 	.word	0x42480000
 80051e8:	42960000 	.word	0x42960000
 80051ec:	42c80000 	.word	0x42c80000
 80051f0:	43480000 	.word	0x43480000

080051f4 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005200:	edd7 7a00 	vldr	s15, [r7]
 8005204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	d801      	bhi.n	8005216 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005212:	2301      	movs	r3, #1
 8005214:	e037      	b.n	8005286 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005216:	edd7 7a00 	vldr	s15, [r7]
 800521a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800521e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	d801      	bhi.n	800522c <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005228:	2302      	movs	r3, #2
 800522a:	e02c      	b.n	8005286 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800522c:	edd7 7a00 	vldr	s15, [r7]
 8005230:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	d801      	bhi.n	8005242 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800523e:	2303      	movs	r3, #3
 8005240:	e021      	b.n	8005286 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005242:	edd7 7a00 	vldr	s15, [r7]
 8005246:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80052cc <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 800524a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	d801      	bhi.n	8005258 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005254:	2304      	movs	r3, #4
 8005256:	e016      	b.n	8005286 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005258:	edd7 7a00 	vldr	s15, [r7]
 800525c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80052d0 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8005260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005268:	d801      	bhi.n	800526e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800526a:	2305      	movs	r3, #5
 800526c:	e00b      	b.n	8005286 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800526e:	edd7 7a00 	vldr	s15, [r7]
 8005272:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80052d4 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d801      	bhi.n	8005284 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8005280:	2306      	movs	r3, #6
 8005282:	e000      	b.n	8005286 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005284:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005286:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3320      	adds	r3, #32
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f983 	bl	800559c <lps22hh_data_rate_set>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 800529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a0:	e00f      	b.n	80052c2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f103 0220 	add.w	r2, r3, #32
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3333      	adds	r3, #51	; 0x33
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 f9c2 	bl	8005638 <lps22hh_data_rate_get>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052be:	e000      	b.n	80052c2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	42480000 	.word	0x42480000
 80052d0:	42960000 	.word	0x42960000
 80052d4:	42c80000 	.word	0x42c80000

080052d8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80052e4:	edd7 7a00 	vldr	s15, [r7]
 80052e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f4:	d801      	bhi.n	80052fa <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e037      	b.n	800536a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80052fa:	edd7 7a00 	vldr	s15, [r7]
 80052fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530a:	d801      	bhi.n	8005310 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 800530c:	2302      	movs	r3, #2
 800530e:	e02c      	b.n	800536a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005310:	edd7 7a00 	vldr	s15, [r7]
 8005314:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	d801      	bhi.n	8005326 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8005322:	2303      	movs	r3, #3
 8005324:	e021      	b.n	800536a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005326:	edd7 7a00 	vldr	s15, [r7]
 800532a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005380 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800532e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	d801      	bhi.n	800533c <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8005338:	2304      	movs	r3, #4
 800533a:	e016      	b.n	800536a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800533c:	edd7 7a00 	vldr	s15, [r7]
 8005340:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005384 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	d801      	bhi.n	8005352 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800534e:	2305      	movs	r3, #5
 8005350:	e00b      	b.n	800536a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005352:	edd7 7a00 	vldr	s15, [r7]
 8005356:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005388 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 800535a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	d801      	bhi.n	8005368 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005364:	2306      	movs	r3, #6
 8005366:	e000      	b.n	800536a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005368:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	42480000 	.word	0x42480000
 8005384:	42960000 	.word	0x42960000
 8005388:	42c80000 	.word	0x42c80000

0800538c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3320      	adds	r3, #32
 8005398:	2111      	movs	r1, #17
 800539a:	4618      	mov	r0, r3
 800539c:	f000 facf 	bl	800593e <lps22hh_i3c_interface_set>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053aa:	e034      	b.n	8005416 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3320      	adds	r3, #32
 80053b0:	2110      	movs	r1, #16
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f8f2 	bl	800559c <lps22hh_data_rate_set>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c2:	e028      	b.n	8005416 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3320      	adds	r3, #32
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fa91 	bl	80058f2 <lps22hh_lp_bandwidth_set>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053da:	e01c      	b.n	8005416 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3320      	adds	r3, #32
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f8b4 	bl	8005550 <lps22hh_block_data_update_set>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f2:	e010      	b.n	8005416 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3320      	adds	r3, #32
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa53 	bl	80058a6 <lps22hh_auto_increment_set>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800540a:	e004      	b.n	8005416 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2203      	movs	r2, #3
 8005410:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800541e:	b590      	push	{r4, r7, lr}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	461a      	mov	r2, r3
 800542a:	460b      	mov	r3, r1
 800542c:	72fb      	strb	r3, [r7, #11]
 800542e:	4613      	mov	r3, r2
 8005430:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	695c      	ldr	r4, [r3, #20]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	7b1b      	ldrb	r3, [r3, #12]
 800543e:	b298      	uxth	r0, r3
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	b299      	uxth	r1, r3
 8005444:	893b      	ldrh	r3, [r7, #8]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	47a0      	blx	r4
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}

08005454 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	461a      	mov	r2, r3
 8005460:	460b      	mov	r3, r1
 8005462:	72fb      	strb	r3, [r7, #11]
 8005464:	4613      	mov	r3, r2
 8005466:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	691c      	ldr	r4, [r3, #16]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	7b1b      	ldrb	r3, [r3, #12]
 8005474:	b298      	uxth	r0, r3
 8005476:	7afb      	ldrb	r3, [r7, #11]
 8005478:	b299      	uxth	r1, r3
 800547a:	893b      	ldrh	r3, [r7, #8]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	47a0      	blx	r4
 8005480:	4603      	mov	r3, r0
}
 8005482:	4618      	mov	r0, r3
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}

0800548a <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800548a:	b590      	push	{r4, r7, lr}
 800548c:	b087      	sub	sp, #28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	461a      	mov	r2, r3
 8005496:	460b      	mov	r3, r1
 8005498:	72fb      	strb	r3, [r7, #11]
 800549a:	4613      	mov	r3, r2
 800549c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685c      	ldr	r4, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68d8      	ldr	r0, [r3, #12]
 80054a6:	893b      	ldrh	r3, [r7, #8]
 80054a8:	7af9      	ldrb	r1, [r7, #11]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	47a0      	blx	r4
 80054ae:	6178      	str	r0, [r7, #20]

  return ret;
 80054b0:	697b      	ldr	r3, [r7, #20]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd90      	pop	{r4, r7, pc}

080054ba <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80054ba:	b590      	push	{r4, r7, lr}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	461a      	mov	r2, r3
 80054c6:	460b      	mov	r3, r1
 80054c8:	72fb      	strb	r3, [r7, #11]
 80054ca:	4613      	mov	r3, r2
 80054cc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681c      	ldr	r4, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68d8      	ldr	r0, [r3, #12]
 80054d6:	893b      	ldrh	r3, [r7, #8]
 80054d8:	7af9      	ldrb	r1, [r7, #11]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	47a0      	blx	r4
 80054de:	6178      	str	r0, [r7, #20]

  return ret;
 80054e0:	697b      	ldr	r3, [r7, #20]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}
	...

080054ec <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005518 <lps22hh_from_lsb_to_hpa+0x2c>
 8005502:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005506:	eef0 7a66 	vmov.f32	s15, s13
}
 800550a:	eeb0 0a67 	vmov.f32	s0, s15
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	49800000 	.word	0x49800000

0800551c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005532:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800554c <lps22hh_from_lsb_to_celsius+0x30>
 8005536:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800553a:	eef0 7a66 	vmov.f32	s15, s13
}
 800553e:	eeb0 0a67 	vmov.f32	s0, s15
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	42c80000 	.word	0x42c80000

08005550 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800555c:	f107 0208 	add.w	r2, r7, #8
 8005560:	2301      	movs	r3, #1
 8005562:	2110      	movs	r1, #16
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff90 	bl	800548a <lps22hh_read_reg>
 800556a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	b2da      	uxtb	r2, r3
 800557a:	7a3b      	ldrb	r3, [r7, #8]
 800557c:	f362 0341 	bfi	r3, r2, #1, #1
 8005580:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005582:	f107 0208 	add.w	r2, r7, #8
 8005586:	2301      	movs	r3, #1
 8005588:	2110      	movs	r1, #16
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff95 	bl	80054ba <lps22hh_write_reg>
 8005590:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80055a8:	f107 0210 	add.w	r2, r7, #16
 80055ac:	2301      	movs	r3, #1
 80055ae:	2110      	movs	r1, #16
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ff6a 	bl	800548a <lps22hh_read_reg>
 80055b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d107      	bne.n	80055ce <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80055be:	f107 020c 	add.w	r2, r7, #12
 80055c2:	2301      	movs	r3, #1
 80055c4:	2111      	movs	r1, #17
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff ff5f 	bl	800548a <lps22hh_read_reg>
 80055cc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10f      	bne.n	80055f4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	7c3b      	ldrb	r3, [r7, #16]
 80055de:	f362 1306 	bfi	r3, r2, #4, #3
 80055e2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80055e4:	f107 0210 	add.w	r2, r7, #16
 80055e8:	2301      	movs	r3, #1
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff64 	bl	80054ba <lps22hh_write_reg>
 80055f2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d119      	bne.n	800562e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	7b3b      	ldrb	r3, [r7, #12]
 8005606:	f362 0341 	bfi	r3, r2, #1, #1
 800560a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	08db      	lsrs	r3, r3, #3
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	7b3b      	ldrb	r3, [r7, #12]
 8005618:	f362 0300 	bfi	r3, r2, #0, #1
 800561c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800561e:	f107 020c 	add.w	r2, r7, #12
 8005622:	2301      	movs	r3, #1
 8005624:	2111      	movs	r1, #17
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff47 	bl	80054ba <lps22hh_write_reg>
 800562c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800562e:	697b      	ldr	r3, [r7, #20]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005642:	f107 0210 	add.w	r2, r7, #16
 8005646:	2301      	movs	r3, #1
 8005648:	2110      	movs	r1, #16
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff ff1d 	bl	800548a <lps22hh_read_reg>
 8005650:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005658:	f107 020c 	add.w	r2, r7, #12
 800565c:	2301      	movs	r3, #1
 800565e:	2111      	movs	r1, #17
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ff12 	bl	800548a <lps22hh_read_reg>
 8005666:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f040 8086 	bne.w	800577c <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005670:	f107 020c 	add.w	r2, r7, #12
 8005674:	2301      	movs	r3, #1
 8005676:	2111      	movs	r1, #17
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ff06 	bl	800548a <lps22hh_read_reg>
 800567e:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005680:	7b3b      	ldrb	r3, [r7, #12]
 8005682:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	011a      	lsls	r2, r3, #4
 800568a:	7b3b      	ldrb	r3, [r7, #12]
 800568c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8005696:	7c3a      	ldrb	r2, [r7, #16]
 8005698:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800569c:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800569e:	4413      	add	r3, r2
 80056a0:	2b15      	cmp	r3, #21
 80056a2:	d867      	bhi.n	8005774 <lps22hh_data_rate_get+0x13c>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <lps22hh_data_rate_get+0x74>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	08005705 	.word	0x08005705
 80056b0:	08005715 	.word	0x08005715
 80056b4:	0800571d 	.word	0x0800571d
 80056b8:	08005725 	.word	0x08005725
 80056bc:	0800572d 	.word	0x0800572d
 80056c0:	08005735 	.word	0x08005735
 80056c4:	08005765 	.word	0x08005765
 80056c8:	0800576d 	.word	0x0800576d
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	08005775 	.word	0x08005775
 80056d4:	08005775 	.word	0x08005775
 80056d8:	08005775 	.word	0x08005775
 80056dc:	08005775 	.word	0x08005775
 80056e0:	08005775 	.word	0x08005775
 80056e4:	08005775 	.word	0x08005775
 80056e8:	08005775 	.word	0x08005775
 80056ec:	08005775 	.word	0x08005775
 80056f0:	0800573d 	.word	0x0800573d
 80056f4:	08005745 	.word	0x08005745
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	08005755 	.word	0x08005755
 8005700:	0800575d 	.word	0x0800575d
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
        break;
 800570a:	e037      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2208      	movs	r2, #8
 8005710:	701a      	strb	r2, [r3, #0]
        break;
 8005712:	e033      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
        break;
 800571a:	e02f      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2202      	movs	r2, #2
 8005720:	701a      	strb	r2, [r3, #0]
        break;
 8005722:	e02b      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2203      	movs	r2, #3
 8005728:	701a      	strb	r2, [r3, #0]
        break;
 800572a:	e027      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2204      	movs	r2, #4
 8005730:	701a      	strb	r2, [r3, #0]
        break;
 8005732:	e023      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2205      	movs	r2, #5
 8005738:	701a      	strb	r2, [r3, #0]
        break;
 800573a:	e01f      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2211      	movs	r2, #17
 8005740:	701a      	strb	r2, [r3, #0]
        break;
 8005742:	e01b      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2212      	movs	r2, #18
 8005748:	701a      	strb	r2, [r3, #0]
        break;
 800574a:	e017      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2213      	movs	r2, #19
 8005750:	701a      	strb	r2, [r3, #0]
        break;
 8005752:	e013      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2214      	movs	r2, #20
 8005758:	701a      	strb	r2, [r3, #0]
        break;
 800575a:	e00f      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2215      	movs	r2, #21
 8005760:	701a      	strb	r2, [r3, #0]
        break;
 8005762:	e00b      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2206      	movs	r2, #6
 8005768:	701a      	strb	r2, [r3, #0]
        break;
 800576a:	e007      	b.n	800577c <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2207      	movs	r2, #7
 8005770:	701a      	strb	r2, [r3, #0]
        break;
 8005772:	e003      	b.n	800577c <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
        break;
 800577a:	bf00      	nop
    }
  }

  return ret;
 800577c:	697b      	ldr	r3, [r7, #20]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop

08005788 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005792:	f107 0208 	add.w	r2, r7, #8
 8005796:	2301      	movs	r3, #1
 8005798:	2127      	movs	r1, #39	; 0x27
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fe75 	bl	800548a <lps22hh_read_reg>
 80057a0:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 80057a2:	7a3b      	ldrb	r3, [r7, #8]
 80057a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	701a      	strb	r2, [r3, #0]

  return ret;
 80057b0:	68fb      	ldr	r3, [r7, #12]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80057c4:	f107 0208 	add.w	r2, r7, #8
 80057c8:	2301      	movs	r3, #1
 80057ca:	2127      	movs	r1, #39	; 0x27
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe5c 	bl	800548a <lps22hh_read_reg>
 80057d2:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80057d4:	7a3b      	ldrb	r3, [r7, #8]
 80057d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	701a      	strb	r2, [r3, #0]

  return ret;
 80057e2:	68fb      	ldr	r3, [r7, #12]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80057f6:	f107 0208 	add.w	r2, r7, #8
 80057fa:	2303      	movs	r3, #3
 80057fc:	2128      	movs	r1, #40	; 0x28
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fe43 	bl	800548a <lps22hh_read_reg>
 8005804:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005806:	7abb      	ldrb	r3, [r7, #10]
 8005808:	461a      	mov	r2, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	7a7a      	ldrb	r2, [r7, #9]
 8005816:	441a      	add	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	7a3a      	ldrb	r2, [r7, #8]
 8005824:	441a      	add	r2, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]

  return ret;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005848:	f107 0208 	add.w	r2, r7, #8
 800584c:	2302      	movs	r3, #2
 800584e:	212b      	movs	r1, #43	; 0x2b
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fe1a 	bl	800548a <lps22hh_read_reg>
 8005856:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005858:	7a7b      	ldrb	r3, [r7, #9]
 800585a:	b21a      	sxth	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005866:	b29b      	uxth	r3, r3
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	b29a      	uxth	r2, r3
 800586c:	7a3b      	ldrb	r3, [r7, #8]
 800586e:	b29b      	uxth	r3, r3
 8005870:	4413      	add	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	b21a      	sxth	r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	801a      	strh	r2, [r3, #0]

  return ret;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800588e:	2301      	movs	r3, #1
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	210f      	movs	r1, #15
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fdf8 	bl	800548a <lps22hh_read_reg>
 800589a:	60f8      	str	r0, [r7, #12]

  return ret;
 800589c:	68fb      	ldr	r3, [r7, #12]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80058b2:	f107 0208 	add.w	r2, r7, #8
 80058b6:	2301      	movs	r3, #1
 80058b8:	2111      	movs	r1, #17
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fde5 	bl	800548a <lps22hh_read_reg>
 80058c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	7a3b      	ldrb	r3, [r7, #8]
 80058d2:	f362 1304 	bfi	r3, r2, #4, #1
 80058d6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80058d8:	f107 0208 	add.w	r2, r7, #8
 80058dc:	2301      	movs	r3, #1
 80058de:	2111      	movs	r1, #17
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fdea 	bl	80054ba <lps22hh_write_reg>
 80058e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80058fe:	f107 0208 	add.w	r2, r7, #8
 8005902:	2301      	movs	r3, #1
 8005904:	2110      	movs	r1, #16
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fdbf 	bl	800548a <lps22hh_read_reg>
 800590c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10f      	bne.n	8005934 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	b2da      	uxtb	r2, r3
 800591c:	7a3b      	ldrb	r3, [r7, #8]
 800591e:	f362 0383 	bfi	r3, r2, #2, #2
 8005922:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005924:	f107 0208 	add.w	r2, r7, #8
 8005928:	2301      	movs	r3, #1
 800592a:	2110      	movs	r1, #16
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fdc4 	bl	80054ba <lps22hh_write_reg>
 8005932:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005934:	68fb      	ldr	r3, [r7, #12]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800594a:	f107 0208 	add.w	r2, r7, #8
 800594e:	2301      	movs	r3, #1
 8005950:	210e      	movs	r1, #14
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fd99 	bl	800548a <lps22hh_read_reg>
 8005958:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d118      	bne.n	8005992 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	7a3b      	ldrb	r3, [r7, #8]
 800596a:	f362 0341 	bfi	r3, r2, #1, #1
 800596e:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	091b      	lsrs	r3, r3, #4
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	7a3b      	ldrb	r3, [r7, #8]
 800597c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005980:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005982:	f107 0208 	add.w	r2, r7, #8
 8005986:	2301      	movs	r3, #1
 8005988:	210e      	movs	r1, #14
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fd95 	bl	80054ba <lps22hh_write_reg>
 8005990:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005992:	68fb      	ldr	r3, [r7, #12]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <LSM6DSOX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_RegisterBusIO(LSM6DSOX_Object_t *pObj, LSM6DSOX_IO_t *pIO)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <LSM6DSOX_RegisterBusIO+0x1c>
  {
    ret = LSM6DSOX_ERROR;
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e051      	b.n	8005a5c <LSM6DSOX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	7b1a      	ldrb	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <LSM6DSOX_RegisterBusIO+0xcc>)
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <LSM6DSOX_RegisterBusIO+0xd0>)
 80059fa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <LSM6DSOX_RegisterBusIO+0x7e>
    {
      ret = LSM6DSOX_ERROR;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e020      	b.n	8005a5c <LSM6DSOX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSOX_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4798      	blx	r3
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <LSM6DSOX_RegisterBusIO+0x92>
    {
      ret = LSM6DSOX_ERROR;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e016      	b.n	8005a5c <LSM6DSOX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSOX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d112      	bne.n	8005a5c <LSM6DSOX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10d      	bne.n	8005a5c <LSM6DSOX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005a40:	230c      	movs	r3, #12
 8005a42:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSOX_Write_Reg(pObj, LSM6DSOX_CTRL3_C, data) != LSM6DSOX_OK)
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	461a      	mov	r2, r3
 8005a48:	2112      	movs	r1, #18
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 ff65 	bl	800691a <LSM6DSOX_Write_Reg>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <LSM6DSOX_RegisterBusIO+0xc0>
          {
            ret = LSM6DSOX_ERROR;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a5a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	08006e15 	.word	0x08006e15
 8005a6c:	08006e4b 	.word	0x08006e4b

08005a70 <LSM6DSOX_Init>:
  * @brief  Initialize the LSM6DSOX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Init(LSM6DSOX_Object_t *pObj)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3320      	adds	r3, #32
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 ffeb 	bl	8007a5a <lsm6dsox_i3c_disable_set>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <LSM6DSOX_Init+0x20>
  {
    return LSM6DSOX_ERROR;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a8e:	e060      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3320      	adds	r3, #32
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 ffb9 	bl	8007a0e <lsm6dsox_auto_increment_set>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <LSM6DSOX_Init+0x38>
  {
    return LSM6DSOX_ERROR;
 8005aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aa6:	e054      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3320      	adds	r3, #32
 8005aac:	2101      	movs	r1, #1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 fe88 	bl	80077c4 <lsm6dsox_block_data_update_set>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <LSM6DSOX_Init+0x50>
  {
    return LSM6DSOX_ERROR;
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005abe:	e048      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3320      	adds	r3, #32
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f002 f80d 	bl	8007ae6 <lsm6dsox_fifo_mode_set>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <LSM6DSOX_Init+0x68>
  {
    return LSM6DSOX_ERROR;
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ad6:	e03c      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_104Hz;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2204      	movs	r2, #4
 8005adc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3320      	adds	r3, #32
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 fa58 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <LSM6DSOX_Init+0x88>
  {
    return LSM6DSOX_ERROR;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af6:	e02c      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), LSM6DSOX_2g) != LSM6DSOX_OK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3320      	adds	r3, #32
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f9ee 	bl	8006ee0 <lsm6dsox_xl_full_scale_set>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <LSM6DSOX_Init+0xa0>
  {
    return LSM6DSOX_ERROR;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0e:	e020      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSOX_GY_ODR_104Hz;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2204      	movs	r2, #4
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3320      	adds	r3, #32
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 fc7c 	bl	800741c <lsm6dsox_gy_data_rate_set>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <LSM6DSOX_Init+0xc0>
  {
    return LSM6DSOX_ERROR;
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b2e:	e010      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), LSM6DSOX_2000dps) != LSM6DSOX_OK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3320      	adds	r3, #32
 8005b34:	2106      	movs	r1, #6
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 fc08 	bl	800734c <lsm6dsox_gy_full_scale_set>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <LSM6DSOX_Init+0xd8>
  {
    return LSM6DSOX_ERROR;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b46:	e004      	b.n	8005b52 <LSM6DSOX_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSOX_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <LSM6DSOX_DeInit>:
  * @brief  Deinitialize the LSM6DSOX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_DeInit(LSM6DSOX_Object_t *pObj)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSOX_ACC_Disable(pObj) != LSM6DSOX_OK)
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f888 	bl	8005c78 <LSM6DSOX_ACC_Disable>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <LSM6DSOX_DeInit+0x1a>
  {
    return LSM6DSOX_ERROR;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b72:	e015      	b.n	8005ba0 <LSM6DSOX_DeInit+0x46>
  }

  if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fc28 	bl	80063ca <LSM6DSOX_GYRO_Disable>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <LSM6DSOX_DeInit+0x2c>
  {
    return LSM6DSOX_ERROR;
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b84:	e00c      	b.n	8005ba0 <LSM6DSOX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_OFF;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSOX_GY_ODR_OFF;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSOX_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <LSM6DSOX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ReadID(LSM6DSOX_Object_t *pObj, uint8_t *Id)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_device_id_get(&(pObj->Ctx), Id) != LSM6DSOX_OK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3320      	adds	r3, #32
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 ff17 	bl	80079ec <lsm6dsox_device_id_get>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <LSM6DSOX_ReadID+0x22>
  {
    return LSM6DSOX_ERROR;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc8:	e000      	b.n	8005bcc <LSM6DSOX_ReadID+0x24>
  }

  return LSM6DSOX_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <LSM6DSOX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSOX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GetCapabilities(LSM6DSOX_Object_t *pObj, LSM6DSOX_Capabilities_t *Capabilities)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2201      	movs	r2, #1
 8005be8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2200      	movs	r2, #0
 8005bee:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005bfc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2210      	movs	r2, #16
 8005c02:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	4a07      	ldr	r2, [pc, #28]	; (8005c2c <LSM6DSOX_GetCapabilities+0x58>)
 8005c0e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <LSM6DSOX_GetCapabilities+0x58>)
 8005c14:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	619a      	str	r2, [r3, #24]
  return LSM6DSOX_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	45d02000 	.word	0x45d02000

08005c30 <LSM6DSOX_ACC_Enable>:
  * @brief  Enable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable(LSM6DSOX_Object_t *pObj)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <LSM6DSOX_ACC_Enable+0x16>
  {
    return LSM6DSOX_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e014      	b.n	8005c70 <LSM6DSOX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSOX_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f103 0220 	add.w	r2, r3, #32
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f001 f9a1 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <LSM6DSOX_ACC_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c64:	e004      	b.n	8005c70 <LSM6DSOX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSOX_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <LSM6DSOX_ACC_Disable>:
  * @brief  Disable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Disable(LSM6DSOX_Object_t *pObj)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <LSM6DSOX_ACC_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e01f      	b.n	8005cce <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f103 0220 	add.w	r2, r3, #32
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3333      	adds	r3, #51	; 0x33
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f001 faee 	bl	800727c <lsm6dsox_xl_data_rate_get>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <LSM6DSOX_ACC_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005caa:	e010      	b.n	8005cce <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3320      	adds	r3, #32
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f972 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <LSM6DSOX_ACC_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cc2:	e004      	b.n	8005cce <LSM6DSOX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSOX_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <LSM6DSOX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3320      	adds	r3, #32
 8005cea:	f107 020b 	add.w	r2, r7, #11
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 f91b 	bl	8006f2c <lsm6dsox_xl_full_scale_get>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <LSM6DSOX_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 8005cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d00:	e023      	b.n	8005d4a <LSM6DSOX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005d02:	7afb      	ldrb	r3, [r7, #11]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d81b      	bhi.n	8005d40 <LSM6DSOX_ACC_GetSensitivity+0x68>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <LSM6DSOX_ACC_GetSensitivity+0x38>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d31 	.word	0x08005d31
  {
    case LSM6DSOX_2g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_2G;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <LSM6DSOX_ACC_GetSensitivity+0x7c>)
 8005d24:	601a      	str	r2, [r3, #0]
      break;
 8005d26:	e00f      	b.n	8005d48 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_4g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_4G;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <LSM6DSOX_ACC_GetSensitivity+0x80>)
 8005d2c:	601a      	str	r2, [r3, #0]
      break;
 8005d2e:	e00b      	b.n	8005d48 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_8g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_8G;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <LSM6DSOX_ACC_GetSensitivity+0x84>)
 8005d34:	601a      	str	r2, [r3, #0]
      break;
 8005d36:	e007      	b.n	8005d48 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_16g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_16G;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <LSM6DSOX_ACC_GetSensitivity+0x88>)
 8005d3c:	601a      	str	r2, [r3, #0]
      break;
 8005d3e:	e003      	b.n	8005d48 <LSM6DSOX_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d44:	60fb      	str	r3, [r7, #12]
      break;
 8005d46:	bf00      	nop
  }

  return ret;
 8005d48:	68fb      	ldr	r3, [r7, #12]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	3d79db23 	.word	0x3d79db23
 8005d58:	3df9db23 	.word	0x3df9db23
 8005d5c:	3e79db23 	.word	0x3e79db23
 8005d60:	3ef9db23 	.word	0x3ef9db23

08005d64 <LSM6DSOX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3320      	adds	r3, #32
 8005d76:	f107 020b 	add.w	r2, r7, #11
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fa7d 	bl	800727c <lsm6dsox_xl_data_rate_get>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <LSM6DSOX_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d8c:	e054      	b.n	8005e38 <LSM6DSOX_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	2b0b      	cmp	r3, #11
 8005d92:	d84c      	bhi.n	8005e2e <LSM6DSOX_ACC_GetOutputDataRate+0xca>
 8005d94:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <LSM6DSOX_ACC_GetOutputDataRate+0x38>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005ddf 	.word	0x08005ddf
 8005da4:	08005de7 	.word	0x08005de7
 8005da8:	08005def 	.word	0x08005def
 8005dac:	08005df7 	.word	0x08005df7
 8005db0:	08005dff 	.word	0x08005dff
 8005db4:	08005e07 	.word	0x08005e07
 8005db8:	08005e0f 	.word	0x08005e0f
 8005dbc:	08005e17 	.word	0x08005e17
 8005dc0:	08005e1f 	.word	0x08005e1f
 8005dc4:	08005e27 	.word	0x08005e27
 8005dc8:	08005dd7 	.word	0x08005dd7
  {
    case LSM6DSOX_XL_ODR_OFF:
      *Odr = 0.0f;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
      break;
 8005dd4:	e02f      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <LSM6DSOX_ACC_GetOutputDataRate+0xdc>)
 8005dda:	601a      	str	r2, [r3, #0]
      break;
 8005ddc:	e02b      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <LSM6DSOX_ACC_GetOutputDataRate+0xe0>)
 8005de2:	601a      	str	r2, [r3, #0]
      break;
 8005de4:	e027      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <LSM6DSOX_ACC_GetOutputDataRate+0xe4>)
 8005dea:	601a      	str	r2, [r3, #0]
      break;
 8005dec:	e023      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <LSM6DSOX_ACC_GetOutputDataRate+0xe8>)
 8005df2:	601a      	str	r2, [r3, #0]
      break;
 8005df4:	e01f      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <LSM6DSOX_ACC_GetOutputDataRate+0xec>)
 8005dfa:	601a      	str	r2, [r3, #0]
      break;
 8005dfc:	e01b      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	4a14      	ldr	r2, [pc, #80]	; (8005e54 <LSM6DSOX_ACC_GetOutputDataRate+0xf0>)
 8005e02:	601a      	str	r2, [r3, #0]
      break;
 8005e04:	e017      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <LSM6DSOX_ACC_GetOutputDataRate+0xf4>)
 8005e0a:	601a      	str	r2, [r3, #0]
      break;
 8005e0c:	e013      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	4a12      	ldr	r2, [pc, #72]	; (8005e5c <LSM6DSOX_ACC_GetOutputDataRate+0xf8>)
 8005e12:	601a      	str	r2, [r3, #0]
      break;
 8005e14:	e00f      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	4a11      	ldr	r2, [pc, #68]	; (8005e60 <LSM6DSOX_ACC_GetOutputDataRate+0xfc>)
 8005e1a:	601a      	str	r2, [r3, #0]
      break;
 8005e1c:	e00b      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <LSM6DSOX_ACC_GetOutputDataRate+0x100>)
 8005e22:	601a      	str	r2, [r3, #0]
      break;
 8005e24:	e007      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	4a0f      	ldr	r2, [pc, #60]	; (8005e68 <LSM6DSOX_ACC_GetOutputDataRate+0x104>)
 8005e2a:	601a      	str	r2, [r3, #0]
      break;
 8005e2c:	e003      	b.n	8005e36 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSOX_ERROR;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e32:	60fb      	str	r3, [r7, #12]
      break;
 8005e34:	bf00      	nop
  }

  return ret;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	3fcccccd 	.word	0x3fcccccd
 8005e44:	41480000 	.word	0x41480000
 8005e48:	41d00000 	.word	0x41d00000
 8005e4c:	42500000 	.word	0x42500000
 8005e50:	42d00000 	.word	0x42d00000
 8005e54:	43500000 	.word	0x43500000
 8005e58:	43d08000 	.word	0x43d08000
 8005e5c:	44504000 	.word	0x44504000
 8005e60:	44d06000 	.word	0x44d06000
 8005e64:	45505000 	.word	0x45505000
 8005e68:	45d05800 	.word	0x45d05800

08005e6c <LSM6DSOX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSOX_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_ACC_HIGH_PERFORMANCE_MODE);
 8005e78:	2100      	movs	r1, #0
 8005e7a:	ed97 0a00 	vldr	s0, [r7]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f806 	bl	8005e90 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>
 8005e84:	4603      	mov	r3, r0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr, LSM6DSOX_ACC_Operating_Mode_t Mode)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	; 0x30
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

  switch (Mode)
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	f000 80ed 	beq.w	8006086 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1f6>
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	f300 8166 	bgt.w	800617e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ee>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2c>
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d074      	beq.n	8005fa4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x114>
 8005eba:	e160      	b.n	800617e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ee>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f103 0020 	add.w	r0, r3, #32
 8005ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	2114      	movs	r1, #20
 8005eca:	f000 ffd9 	bl	8006e80 <lsm6dsox_read_reg>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x4a>
      {
        return LSM6DSOX_ERROR;
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed8:	e168      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val1.xl_ulp_en)
 8005eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ede:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d025      	beq.n	8005f34 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa4>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10b      	bne.n	8005f0a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x7a>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3320      	adds	r3, #32
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f84f 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x7a>
          {
            return LSM6DSOX_ERROR;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f08:	e150      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 0;
 8005f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f0e:	f36f 13c7 	bfc	r3, #7, #1
 8005f12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f103 0020 	add.w	r0, r3, #32
 8005f1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f20:	2301      	movs	r3, #1
 8005f22:	2114      	movs	r1, #20
 8005f24:	f000 ffc4 	bl	8006eb0 <lsm6dsox_write_reg>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa4>
        {
          return LSM6DSOX_ERROR;
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f32:	e13b      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f103 0020 	add.w	r0, r3, #32
 8005f3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005f3e:	2301      	movs	r3, #1
 8005f40:	2115      	movs	r1, #21
 8005f42:	f000 ff9d 	bl	8006e80 <lsm6dsox_read_reg>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xc2>
      {
        return LSM6DSOX_ERROR;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f50:	e12c      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val2.xl_hm_mode)
 8005f52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d014      	beq.n	8005f8a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
      {
        val2.xl_hm_mode = 0;
 8005f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f64:	f36f 1304 	bfc	r3, #4, #1
 8005f68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f103 0020 	add.w	r0, r3, #32
 8005f72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005f76:	2301      	movs	r3, #1
 8005f78:	2115      	movs	r1, #21
 8005f7a:	f000 ff99 	bl	8006eb0 <lsm6dsox_write_reg>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
        {
          return LSM6DSOX_ERROR;
 8005f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f88:	e110      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (Odr < 12.5f)
 8005f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f8e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9a:	d400      	bmi.n	8005f9e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x10e>
      {
        Odr = 12.5f;
      }
      break;
 8005f9c:	e0f3      	b.n	8006186 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 12.5f;
 8005f9e:	4b85      	ldr	r3, [pc, #532]	; (80061b4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x324>)
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	e0f0      	b.n	8006186 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f103 0020 	add.w	r0, r3, #32
 8005faa:	f107 0220 	add.w	r2, r7, #32
 8005fae:	2301      	movs	r3, #1
 8005fb0:	2114      	movs	r1, #20
 8005fb2:	f000 ff65 	bl	8006e80 <lsm6dsox_read_reg>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x132>
      {
        return LSM6DSOX_ERROR;
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fc0:	e0f4      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val1.xl_ulp_en)
 8005fc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d025      	beq.n	800601c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x18c>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d10b      	bne.n	8005ff2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x162>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3320      	adds	r3, #32
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ffdb 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x162>
          {
            return LSM6DSOX_ERROR;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff0:	e0dc      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 0;
 8005ff2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ff6:	f36f 13c7 	bfc	r3, #7, #1
 8005ffa:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f103 0020 	add.w	r0, r3, #32
 8006004:	f107 0220 	add.w	r2, r7, #32
 8006008:	2301      	movs	r3, #1
 800600a:	2114      	movs	r1, #20
 800600c:	f000 ff50 	bl	8006eb0 <lsm6dsox_write_reg>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x18c>
        {
          return LSM6DSOX_ERROR;
 8006016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800601a:	e0c7      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f103 0020 	add.w	r0, r3, #32
 8006022:	f107 021c 	add.w	r2, r7, #28
 8006026:	2301      	movs	r3, #1
 8006028:	2115      	movs	r1, #21
 800602a:	f000 ff29 	bl	8006e80 <lsm6dsox_read_reg>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1aa>
      {
        return LSM6DSOX_ERROR;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006038:	e0b8      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (!val2.xl_hm_mode)
 800603a:	7f3b      	ldrb	r3, [r7, #28]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d112      	bne.n	800606c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1dc>
      {
        val2.xl_hm_mode = 1U;
 8006046:	7f3b      	ldrb	r3, [r7, #28]
 8006048:	f043 0310 	orr.w	r3, r3, #16
 800604c:	773b      	strb	r3, [r7, #28]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f103 0020 	add.w	r0, r3, #32
 8006054:	f107 021c 	add.w	r2, r7, #28
 8006058:	2301      	movs	r3, #1
 800605a:	2115      	movs	r1, #21
 800605c:	f000 ff28 	bl	8006eb0 <lsm6dsox_write_reg>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1dc>
        {
          return LSM6DSOX_ERROR;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800606a:	e09f      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 800606c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006070:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80061b8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x328>
 8006074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	dc00      	bgt.n	8006080 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1f0>
      {
        Odr = 208.0f;
      }
      break;
 800607e:	e082      	b.n	8006186 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 208.0f;
 8006080:	4b4e      	ldr	r3, [pc, #312]	; (80061bc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x32c>)
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	e07f      	b.n	8006186 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f103 0020 	add.w	r0, r3, #32
 800608c:	f107 0214 	add.w	r2, r7, #20
 8006090:	2301      	movs	r3, #1
 8006092:	2115      	movs	r1, #21
 8006094:	f000 fef4 	bl	8006e80 <lsm6dsox_read_reg>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x214>
      {
        return LSM6DSOX_ERROR;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a2:	e083      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val2.xl_hm_mode)
 80060a4:	7d3b      	ldrb	r3, [r7, #20]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x246>
      {
        val2.xl_hm_mode = 0;
 80060b0:	7d3b      	ldrb	r3, [r7, #20]
 80060b2:	f36f 1304 	bfc	r3, #4, #1
 80060b6:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f103 0020 	add.w	r0, r3, #32
 80060be:	f107 0214 	add.w	r2, r7, #20
 80060c2:	2301      	movs	r3, #1
 80060c4:	2115      	movs	r1, #21
 80060c6:	f000 fef3 	bl	8006eb0 <lsm6dsox_write_reg>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x246>
        {
          return LSM6DSOX_ERROR;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060d4:	e06a      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d108      	bne.n	80060f2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
      {
        if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f972 	bl	80063ca <LSM6DSOX_GYRO_Disable>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
        {
          return LSM6DSOX_ERROR;
 80060ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f0:	e05c      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f103 0020 	add.w	r0, r3, #32
 80060f8:	f107 0218 	add.w	r2, r7, #24
 80060fc:	2301      	movs	r3, #1
 80060fe:	2114      	movs	r1, #20
 8006100:	f000 febe 	bl	8006e80 <lsm6dsox_read_reg>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x280>
      {
        return LSM6DSOX_ERROR;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610e:	e04d      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (!val1.xl_ulp_en)
 8006110:	7e3b      	ldrb	r3, [r7, #24]
 8006112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d123      	bne.n	8006164 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2d4>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10b      	bne.n	800613e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ae>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3320      	adds	r3, #32
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 ff35 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ae>
          {
            return LSM6DSOX_ERROR;
 8006138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800613c:	e036      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 1U;
 800613e:	7e3b      	ldrb	r3, [r7, #24]
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f103 0020 	add.w	r0, r3, #32
 800614c:	f107 0218 	add.w	r2, r7, #24
 8006150:	2301      	movs	r3, #1
 8006152:	2114      	movs	r1, #20
 8006154:	f000 feac 	bl	8006eb0 <lsm6dsox_write_reg>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2d4>
        {
          return LSM6DSOX_ERROR;
 800615e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006162:	e023      	b.n	80061ac <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8006164:	edd7 7a02 	vldr	s15, [r7, #8]
 8006168:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80061b8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x328>
 800616c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	dc00      	bgt.n	8006178 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      {
        Odr = 208.0f;
      }
      break;
 8006176:	e006      	b.n	8006186 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 208.0f;
 8006178:	4b10      	ldr	r3, [pc, #64]	; (80061bc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x32c>)
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	e003      	b.n	8006186 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
    }
    default:
      ret = LSM6DSOX_ERROR;
 800617e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006184:	bf00      	nop
  }

  if (pObj->acc_is_enabled == 1U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800618c:	2b01      	cmp	r3, #1
 800618e:	d106      	bne.n	800619e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30e>
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006190:	ed97 0a02 	vldr	s0, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fc07 	bl	80069a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>
 800619a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800619c:	e005      	b.n	80061aa <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31a>
  }
  else
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800619e:	ed97 0a02 	vldr	s0, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fc98 	bl	8006ad8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>
 80061a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3730      	adds	r7, #48	; 0x30
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	41480000 	.word	0x41480000
 80061b8:	43500000 	.word	0x43500000
 80061bc:	43500000 	.word	0x43500000

080061c0 <LSM6DSOX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t *FullScale)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3320      	adds	r3, #32
 80061d2:	f107 020b 	add.w	r2, r7, #11
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fea7 	bl	8006f2c <lsm6dsox_xl_full_scale_get>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <LSM6DSOX_ACC_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 80061e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e8:	e023      	b.n	8006232 <LSM6DSOX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d81b      	bhi.n	8006228 <LSM6DSOX_ACC_GetFullScale+0x68>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <LSM6DSOX_ACC_GetFullScale+0x38>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006209 	.word	0x08006209
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006211 	.word	0x08006211
 8006204:	08006219 	.word	0x08006219
  {
    case LSM6DSOX_2g:
      *FullScale =  2;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2202      	movs	r2, #2
 800620c:	601a      	str	r2, [r3, #0]
      break;
 800620e:	e00f      	b.n	8006230 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_4g:
      *FullScale =  4;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2204      	movs	r2, #4
 8006214:	601a      	str	r2, [r3, #0]
      break;
 8006216:	e00b      	b.n	8006230 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_8g:
      *FullScale =  8;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	601a      	str	r2, [r3, #0]
      break;
 800621e:	e007      	b.n	8006230 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_16g:
      *FullScale = 16;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2210      	movs	r2, #16
 8006224:	601a      	str	r2, [r3, #0]
      break;
 8006226:	e003      	b.n	8006230 <LSM6DSOX_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8006228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800622c:	60fb      	str	r3, [r7, #12]
      break;
 800622e:	bf00      	nop
  }

  return ret;
 8006230:	68fb      	ldr	r3, [r7, #12]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop

0800623c <LSM6DSOX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
           : (FullScale <= 4) ? LSM6DSOX_4g
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b02      	cmp	r3, #2
 800624a:	dd0b      	ble.n	8006264 <LSM6DSOX_ACC_SetFullScale+0x28>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b04      	cmp	r3, #4
 8006250:	dd06      	ble.n	8006260 <LSM6DSOX_ACC_SetFullScale+0x24>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b08      	cmp	r3, #8
 8006256:	dc01      	bgt.n	800625c <LSM6DSOX_ACC_SetFullScale+0x20>
 8006258:	2303      	movs	r3, #3
 800625a:	e004      	b.n	8006266 <LSM6DSOX_ACC_SetFullScale+0x2a>
 800625c:	2301      	movs	r3, #1
 800625e:	e002      	b.n	8006266 <LSM6DSOX_ACC_SetFullScale+0x2a>
 8006260:	2302      	movs	r3, #2
 8006262:	e000      	b.n	8006266 <LSM6DSOX_ACC_SetFullScale+0x2a>
 8006264:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
 8006266:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSOX_8g
           :                    LSM6DSOX_16g;

  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3320      	adds	r3, #32
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fe35 	bl	8006ee0 <lsm6dsox_xl_full_scale_set>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <LSM6DSOX_ACC_SetFullScale+0x46>
  {
    return LSM6DSOX_ERROR;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006280:	e000      	b.n	8006284 <LSM6DSOX_ACC_SetFullScale+0x48>
  }

  return LSM6DSOX_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <LSM6DSOX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3320      	adds	r3, #32
 800629a:	f107 0208 	add.w	r2, r7, #8
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fb32 	bl	800790a <lsm6dsox_acceleration_raw_get>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <LSM6DSOX_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b0:	e00c      	b.n	80062cc <LSM6DSOX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80062b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80062ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80062c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <LSM6DSOX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *Acceleration)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3320      	adds	r3, #32
 80062e8:	f107 0210 	add.w	r2, r7, #16
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fb0b 	bl	800790a <lsm6dsox_acceleration_raw_get>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <LSM6DSOX_ACC_GetAxes+0x2c>
  {
    return LSM6DSOX_ERROR;
 80062fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062fe:	e03c      	b.n	800637a <LSM6DSOX_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8006300:	f107 030c 	add.w	r3, r7, #12
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fce6 	bl	8005cd8 <LSM6DSOX_ACC_GetSensitivity>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <LSM6DSOX_ACC_GetAxes+0x44>
  {
    return LSM6DSOX_ERROR;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006316:	e030      	b.n	800637a <LSM6DSOX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006324:	edd7 7a03 	vldr	s15, [r7, #12]
 8006328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006330:	ee17 2a90 	vmov	r2, s15
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006344:	edd7 7a03 	vldr	s15, [r7, #12]
 8006348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006350:	ee17 2a90 	vmov	r2, s15
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006358:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006364:	edd7 7a03 	vldr	s15, [r7, #12]
 8006368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006370:	ee17 2a90 	vmov	r2, s15
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <LSM6DSOX_GYRO_Enable>:
  * @brief  Enable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Enable(LSM6DSOX_Object_t *pObj)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <LSM6DSOX_GYRO_Enable+0x16>
  {
    return LSM6DSOX_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e014      	b.n	80063c2 <LSM6DSOX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSOX_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f103 0220 	add.w	r2, r3, #32
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f001 f838 	bl	800741c <lsm6dsox_gy_data_rate_set>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <LSM6DSOX_GYRO_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063b6:	e004      	b.n	80063c2 <LSM6DSOX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSOX_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <LSM6DSOX_GYRO_Disable>:
  * @brief  Disable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Disable(LSM6DSOX_Object_t *pObj)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <LSM6DSOX_GYRO_Disable+0x16>
  {
    return LSM6DSOX_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	e01f      	b.n	8006420 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f103 0220 	add.w	r2, r3, #32
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3334      	adds	r3, #52	; 0x34
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f001 f987 	bl	8007700 <lsm6dsox_gy_data_rate_get>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <LSM6DSOX_GYRO_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 80063f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063fc:	e010      	b.n	8006420 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3320      	adds	r3, #32
 8006402:	2100      	movs	r1, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f001 f809 	bl	800741c <lsm6dsox_gy_data_rate_set>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <LSM6DSOX_GYRO_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8006410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006414:	e004      	b.n	8006420 <LSM6DSOX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSOX_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <LSM6DSOX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3320      	adds	r3, #32
 800643a:	f107 020b 	add.w	r2, r7, #11
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f000 ffa9 	bl	8007398 <lsm6dsox_gy_full_scale_get>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <LSM6DSOX_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006450:	e02d      	b.n	80064ae <LSM6DSOX_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b06      	cmp	r3, #6
 8006456:	d825      	bhi.n	80064a4 <LSM6DSOX_GYRO_GetSensitivity+0x7c>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <LSM6DSOX_GYRO_GetSensitivity+0x38>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006485 	.word	0x08006485
 8006464:	0800647d 	.word	0x0800647d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	080064a5 	.word	0x080064a5
 8006470:	08006495 	.word	0x08006495
 8006474:	080064a5 	.word	0x080064a5
 8006478:	0800649d 	.word	0x0800649d
  {
    case LSM6DSOX_125dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_125DPS;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	4a0e      	ldr	r2, [pc, #56]	; (80064b8 <LSM6DSOX_GYRO_GetSensitivity+0x90>)
 8006480:	601a      	str	r2, [r3, #0]
      break;
 8006482:	e013      	b.n	80064ac <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_250dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_250DPS;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <LSM6DSOX_GYRO_GetSensitivity+0x94>)
 8006488:	601a      	str	r2, [r3, #0]
      break;
 800648a:	e00f      	b.n	80064ac <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_500dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_500DPS;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	4a0c      	ldr	r2, [pc, #48]	; (80064c0 <LSM6DSOX_GYRO_GetSensitivity+0x98>)
 8006490:	601a      	str	r2, [r3, #0]
      break;
 8006492:	e00b      	b.n	80064ac <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_1000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_1000DPS;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	4a0b      	ldr	r2, [pc, #44]	; (80064c4 <LSM6DSOX_GYRO_GetSensitivity+0x9c>)
 8006498:	601a      	str	r2, [r3, #0]
      break;
 800649a:	e007      	b.n	80064ac <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_2000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_2000DPS;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <LSM6DSOX_GYRO_GetSensitivity+0xa0>)
 80064a0:	601a      	str	r2, [r3, #0]
      break;
 80064a2:	e003      	b.n	80064ac <LSM6DSOX_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSOX_ERROR;
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a8:	60fb      	str	r3, [r7, #12]
      break;
 80064aa:	bf00      	nop
  }

  return ret;
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	408c0000 	.word	0x408c0000
 80064bc:	410c0000 	.word	0x410c0000
 80064c0:	418c0000 	.word	0x418c0000
 80064c4:	420c0000 	.word	0x420c0000
 80064c8:	428c0000 	.word	0x428c0000

080064cc <LSM6DSOX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3320      	adds	r3, #32
 80064de:	f107 020b 	add.w	r2, r7, #11
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f90b 	bl	8007700 <lsm6dsox_gy_data_rate_get>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <LSM6DSOX_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064f4:	e04e      	b.n	8006594 <LSM6DSOX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	2b0a      	cmp	r3, #10
 80064fa:	d846      	bhi.n	800658a <LSM6DSOX_GYRO_GetOutputDataRate+0xbe>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <LSM6DSOX_GYRO_GetOutputDataRate+0x38>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006531 	.word	0x08006531
 8006508:	0800653b 	.word	0x0800653b
 800650c:	08006543 	.word	0x08006543
 8006510:	0800654b 	.word	0x0800654b
 8006514:	08006553 	.word	0x08006553
 8006518:	0800655b 	.word	0x0800655b
 800651c:	08006563 	.word	0x08006563
 8006520:	0800656b 	.word	0x0800656b
 8006524:	08006573 	.word	0x08006573
 8006528:	0800657b 	.word	0x0800657b
 800652c:	08006583 	.word	0x08006583
  {
    case LSM6DSOX_GY_ODR_OFF:
      *Odr = 0.0f;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
      break;
 8006538:	e02b      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	4a17      	ldr	r2, [pc, #92]	; (800659c <LSM6DSOX_GYRO_GetOutputDataRate+0xd0>)
 800653e:	601a      	str	r2, [r3, #0]
      break;
 8006540:	e027      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	4a16      	ldr	r2, [pc, #88]	; (80065a0 <LSM6DSOX_GYRO_GetOutputDataRate+0xd4>)
 8006546:	601a      	str	r2, [r3, #0]
      break;
 8006548:	e023      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <LSM6DSOX_GYRO_GetOutputDataRate+0xd8>)
 800654e:	601a      	str	r2, [r3, #0]
      break;
 8006550:	e01f      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <LSM6DSOX_GYRO_GetOutputDataRate+0xdc>)
 8006556:	601a      	str	r2, [r3, #0]
      break;
 8006558:	e01b      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <LSM6DSOX_GYRO_GetOutputDataRate+0xe0>)
 800655e:	601a      	str	r2, [r3, #0]
      break;
 8006560:	e017      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <LSM6DSOX_GYRO_GetOutputDataRate+0xe4>)
 8006566:	601a      	str	r2, [r3, #0]
      break;
 8006568:	e013      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <LSM6DSOX_GYRO_GetOutputDataRate+0xe8>)
 800656e:	601a      	str	r2, [r3, #0]
      break;
 8006570:	e00f      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <LSM6DSOX_GYRO_GetOutputDataRate+0xec>)
 8006576:	601a      	str	r2, [r3, #0]
      break;
 8006578:	e00b      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	4a0f      	ldr	r2, [pc, #60]	; (80065bc <LSM6DSOX_GYRO_GetOutputDataRate+0xf0>)
 800657e:	601a      	str	r2, [r3, #0]
      break;
 8006580:	e007      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <LSM6DSOX_GYRO_GetOutputDataRate+0xf4>)
 8006586:	601a      	str	r2, [r3, #0]
      break;
 8006588:	e003      	b.n	8006592 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSOX_ERROR;
 800658a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800658e:	60fb      	str	r3, [r7, #12]
      break;
 8006590:	bf00      	nop
  }

  return ret;
 8006592:	68fb      	ldr	r3, [r7, #12]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	41480000 	.word	0x41480000
 80065a0:	41d00000 	.word	0x41d00000
 80065a4:	42500000 	.word	0x42500000
 80065a8:	42d00000 	.word	0x42d00000
 80065ac:	43500000 	.word	0x43500000
 80065b0:	43d08000 	.word	0x43d08000
 80065b4:	44504000 	.word	0x44504000
 80065b8:	44d06000 	.word	0x44d06000
 80065bc:	45505000 	.word	0x45505000
 80065c0:	45d05800 	.word	0x45d05800

080065c4 <LSM6DSOX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE);
 80065d0:	2100      	movs	r1, #0
 80065d2:	ed97 0a00 	vldr	s0, [r7]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f806 	bl	80065e8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>
 80065dc:	4603      	mov	r3, r0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr,
                                                  LSM6DSOX_GYRO_Operating_Mode_t Mode)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80065f4:	460b      	mov	r3, r1
 80065f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61fb      	str	r3, [r7, #28]

  switch (Mode)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x20>
 8006602:	2b01      	cmp	r3, #1
 8006604:	d028      	beq.n	8006658 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x70>
 8006606:	e05c      	b.n	80066c2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xda>
    case LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f103 0020 	add.w	r0, r3, #32
 800660e:	f107 0218 	add.w	r2, r7, #24
 8006612:	2301      	movs	r3, #1
 8006614:	2116      	movs	r1, #22
 8006616:	f000 fc33 	bl	8006e80 <lsm6dsox_read_reg>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x3e>
      {
        return LSM6DSOX_ERROR;
 8006620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006624:	e065      	b.n	80066f2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
      }

      if (val1.g_hm_mode)
 8006626:	7e3b      	ldrb	r3, [r7, #24]
 8006628:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04b      	beq.n	80066ca <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe2>
      {
        val1.g_hm_mode = 0;
 8006632:	7e3b      	ldrb	r3, [r7, #24]
 8006634:	f36f 13c7 	bfc	r3, #7, #1
 8006638:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f103 0020 	add.w	r0, r3, #32
 8006640:	f107 0218 	add.w	r2, r7, #24
 8006644:	2301      	movs	r3, #1
 8006646:	2116      	movs	r1, #22
 8006648:	f000 fc32 	bl	8006eb0 <lsm6dsox_write_reg>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d03b      	beq.n	80066ca <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe2>
        {
          return LSM6DSOX_ERROR;
 8006652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006656:	e04c      	b.n	80066f2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
    case LSM6DSOX_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f103 0020 	add.w	r0, r3, #32
 800665e:	f107 0214 	add.w	r2, r7, #20
 8006662:	2301      	movs	r3, #1
 8006664:	2116      	movs	r1, #22
 8006666:	f000 fc0b 	bl	8006e80 <lsm6dsox_read_reg>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x8e>
      {
        return LSM6DSOX_ERROR;
 8006670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006674:	e03d      	b.n	80066f2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
      }

      if (!val1.g_hm_mode)
 8006676:	7d3b      	ldrb	r3, [r7, #20]
 8006678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d112      	bne.n	80066a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xc0>
      {
        val1.g_hm_mode = 1U;
 8006682:	7d3b      	ldrb	r3, [r7, #20]
 8006684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006688:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f103 0020 	add.w	r0, r3, #32
 8006690:	f107 0214 	add.w	r2, r7, #20
 8006694:	2301      	movs	r3, #1
 8006696:	2116      	movs	r1, #22
 8006698:	f000 fc0a 	bl	8006eb0 <lsm6dsox_write_reg>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xc0>
        {
          return LSM6DSOX_ERROR;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a6:	e024      	b.n	80066f2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 80066a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80066ac:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80066fc <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x114>
 80066b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	dc00      	bgt.n	80066bc <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xd4>
      {
        Odr = 208.0f;
      }
      break;
 80066ba:	e007      	b.n	80066cc <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe4>
        Odr = 208.0f;
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x118>)
 80066be:	60bb      	str	r3, [r7, #8]
 80066c0:	e004      	b.n	80066cc <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe4>
    }
    default:
      ret = LSM6DSOX_ERROR;
 80066c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066c6:	61fb      	str	r3, [r7, #28]
      break;
 80066c8:	e000      	b.n	80066cc <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe4>
      break;
 80066ca:	bf00      	nop
  }

  if (pObj->gyro_is_enabled == 1U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d106      	bne.n	80066e4 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xfc>
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80066d6:	ed97 0a02 	vldr	s0, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa8c 	bl	8006bf8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>
 80066e0:	61f8      	str	r0, [r7, #28]
 80066e2:	e005      	b.n	80066f0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x108>
  }
  else
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80066e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fb11 	bl	8006d10 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>
 80066ee:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80066f0:	69fb      	ldr	r3, [r7, #28]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	43500000 	.word	0x43500000
 8006700:	43500000 	.word	0x43500000

08006704 <LSM6DSOX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t  *FullScale)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3320      	adds	r3, #32
 8006716:	f107 020b 	add.w	r2, r7, #11
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fe3b 	bl	8007398 <lsm6dsox_gy_full_scale_get>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <LSM6DSOX_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 8006728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800672c:	e030      	b.n	8006790 <LSM6DSOX_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d828      	bhi.n	8006786 <LSM6DSOX_GYRO_GetFullScale+0x82>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <LSM6DSOX_GYRO_GetFullScale+0x38>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006761 	.word	0x08006761
 8006740:	08006759 	.word	0x08006759
 8006744:	08006769 	.word	0x08006769
 8006748:	08006787 	.word	0x08006787
 800674c:	08006773 	.word	0x08006773
 8006750:	08006787 	.word	0x08006787
 8006754:	0800677d 	.word	0x0800677d
  {
    case LSM6DSOX_125dps:
      *FullScale =  125;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	227d      	movs	r2, #125	; 0x7d
 800675c:	601a      	str	r2, [r3, #0]
      break;
 800675e:	e016      	b.n	800678e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_250dps:
      *FullScale =  250;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	22fa      	movs	r2, #250	; 0xfa
 8006764:	601a      	str	r2, [r3, #0]
      break;
 8006766:	e012      	b.n	800678e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_500dps:
      *FullScale =  500;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800676e:	601a      	str	r2, [r3, #0]
      break;
 8006770:	e00d      	b.n	800678e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_1000dps:
      *FullScale = 1000;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006778:	601a      	str	r2, [r3, #0]
      break;
 800677a:	e008      	b.n	800678e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_2000dps:
      *FullScale = 2000;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006782:	601a      	str	r2, [r3, #0]
      break;
 8006784:	e003      	b.n	800678e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSOX_ERROR;
 8006786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800678a:	60fb      	str	r3, [r7, #12]
      break;
 800678c:	bf00      	nop
  }

  return ret;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <LSM6DSOX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b7d      	cmp	r3, #125	; 0x7d
 80067a6:	dd12      	ble.n	80067ce <LSM6DSOX_GYRO_SetFullScale+0x36>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2bfa      	cmp	r3, #250	; 0xfa
 80067ac:	dd0d      	ble.n	80067ca <LSM6DSOX_GYRO_SetFullScale+0x32>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067b4:	dd07      	ble.n	80067c6 <LSM6DSOX_GYRO_SetFullScale+0x2e>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067bc:	dc01      	bgt.n	80067c2 <LSM6DSOX_GYRO_SetFullScale+0x2a>
 80067be:	2304      	movs	r3, #4
 80067c0:	e006      	b.n	80067d0 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80067c2:	2306      	movs	r3, #6
 80067c4:	e004      	b.n	80067d0 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e002      	b.n	80067d0 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80067ce:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
 80067d0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSOX_500dps
           : (FullScale <= 1000) ? LSM6DSOX_1000dps
           :                       LSM6DSOX_2000dps;

  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3320      	adds	r3, #32
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fdb6 	bl	800734c <lsm6dsox_gy_full_scale_set>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <LSM6DSOX_GYRO_SetFullScale+0x54>
  {
    return LSM6DSOX_ERROR;
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ea:	e000      	b.n	80067ee <LSM6DSOX_GYRO_SetFullScale+0x56>
  }

  return LSM6DSOX_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <LSM6DSOX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3320      	adds	r3, #32
 8006804:	f107 0208 	add.w	r2, r7, #8
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f001 f832 	bl	8007874 <lsm6dsox_angular_rate_raw_get>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <LSM6DSOX_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 8006816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800681a:	e00c      	b.n	8006836 <LSM6DSOX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800681c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006824:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800682c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <LSM6DSOX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *AngularRate)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b086      	sub	sp, #24
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3320      	adds	r3, #32
 800684c:	f107 0210 	add.w	r2, r7, #16
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f80e 	bl	8007874 <lsm6dsox_angular_rate_raw_get>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <LSM6DSOX_GYRO_GetAxes+0x26>
  {
    return LSM6DSOX_ERROR;
 800685e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006862:	e03c      	b.n	80068de <LSM6DSOX_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fddc 	bl	8006428 <LSM6DSOX_GYRO_GetSensitivity>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <LSM6DSOX_GYRO_GetAxes+0x3e>
  {
    return LSM6DSOX_ERROR;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800687a:	e030      	b.n	80068de <LSM6DSOX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800687c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006888:	edd7 7a03 	vldr	s15, [r7, #12]
 800688c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006894:	ee17 2a90 	vmov	r2, s15
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800689c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80068ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b4:	ee17 2a90 	vmov	r2, s15
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80068bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80068cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068d4:	ee17 2a90 	vmov	r2, s15
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <LSM6DSOX_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Read_Reg(LSM6DSOX_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	460b      	mov	r3, r1
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	72fb      	strb	r3, [r7, #11]
  if (lsm6dsox_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSOX_OK)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f103 0020 	add.w	r0, r3, #32
 80068fa:	7af9      	ldrb	r1, [r7, #11]
 80068fc:	2301      	movs	r3, #1
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	f000 fabe 	bl	8006e80 <lsm6dsox_read_reg>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <LSM6DSOX_Read_Reg+0x2a>
  {
    return LSM6DSOX_ERROR;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800690e:	e000      	b.n	8006912 <LSM6DSOX_Read_Reg+0x2c>
  }

  return LSM6DSOX_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <LSM6DSOX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Write_Reg(LSM6DSOX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
 8006926:	4613      	mov	r3, r2
 8006928:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f103 0020 	add.w	r0, r3, #32
 8006930:	1cba      	adds	r2, r7, #2
 8006932:	78f9      	ldrb	r1, [r7, #3]
 8006934:	2301      	movs	r3, #1
 8006936:	f000 fabb 	bl	8006eb0 <lsm6dsox_write_reg>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <LSM6DSOX_Write_Reg+0x2c>
  {
    return LSM6DSOX_ERROR;
 8006940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006944:	e000      	b.n	8006948 <LSM6DSOX_Write_Reg+0x2e>
  }

  return LSM6DSOX_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <LSM6DSOX_ACC_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Get_DRDY_Status(LSM6DSOX_Object_t *pObj, uint8_t *Status)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_xl_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSOX_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3320      	adds	r3, #32
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 ff55 	bl	8007810 <lsm6dsox_xl_flag_data_ready_get>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <LSM6DSOX_ACC_Get_DRDY_Status+0x22>
  {
    return LSM6DSOX_ERROR;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006970:	e000      	b.n	8006974 <LSM6DSOX_ACC_Get_DRDY_Status+0x24>
  }

  return LSM6DSOX_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <LSM6DSOX_GYRO_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Get_DRDY_Status(LSM6DSOX_Object_t *pObj, uint8_t *Status)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_gy_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSOX_OK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3320      	adds	r3, #32
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 ff58 	bl	8007842 <lsm6dsox_gy_flag_data_ready_get>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <LSM6DSOX_GYRO_Get_DRDY_Status+0x22>
  {
    return LSM6DSOX_ERROR;
 8006998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800699c:	e000      	b.n	80069a0 <LSM6DSOX_GYRO_Get_DRDY_Status+0x24>
  }

  return LSM6DSOX_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsox_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80069b4:	edd7 7a00 	vldr	s15, [r7]
 80069b8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006ab8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80069bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c4:	d801      	bhi.n	80069ca <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80069c6:	230b      	movs	r3, #11
 80069c8:	e063      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 80069ca:	edd7 7a00 	vldr	s15, [r7]
 80069ce:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80069d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	d801      	bhi.n	80069e0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80069dc:	2301      	movs	r3, #1
 80069de:	e058      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 80069e0:	edd7 7a00 	vldr	s15, [r7]
 80069e4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80069e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f0:	d801      	bhi.n	80069f6 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e04d      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 80069f6:	edd7 7a00 	vldr	s15, [r7]
 80069fa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006abc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80069fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a06:	d801      	bhi.n	8006a0c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e042      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a0c:	edd7 7a00 	vldr	s15, [r7]
 8006a10:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006ac0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a1c:	d801      	bhi.n	8006a22 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006a1e:	2304      	movs	r3, #4
 8006a20:	e037      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a22:	edd7 7a00 	vldr	s15, [r7]
 8006a26:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006ac4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a32:	d801      	bhi.n	8006a38 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006a34:	2305      	movs	r3, #5
 8006a36:	e02c      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a38:	edd7 7a00 	vldr	s15, [r7]
 8006a3c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006ac8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	d801      	bhi.n	8006a4e <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006a4a:	2306      	movs	r3, #6
 8006a4c:	e021      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a4e:	edd7 7a00 	vldr	s15, [r7]
 8006a52:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006acc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a5e:	d801      	bhi.n	8006a64 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006a60:	2307      	movs	r3, #7
 8006a62:	e016      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a64:	edd7 7a00 	vldr	s15, [r7]
 8006a68:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006ad0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a74:	d801      	bhi.n	8006a7a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006a76:	2308      	movs	r3, #8
 8006a78:	e00b      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a7a:	edd7 7a00 	vldr	s15, [r7]
 8006a7e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006ad4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8a:	d801      	bhi.n	8006a90 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006a8c:	2309      	movs	r3, #9
 8006a8e:	e000      	b.n	8006a92 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006a90:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8006a92:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
            :                    LSM6DSOX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3320      	adds	r3, #32
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fa7d 	bl	8006f9c <lsm6dsox_xl_data_rate_set>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSOX_ERROR;
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aac:	e000      	b.n	8006ab0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSOX_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	3fcccccd 	.word	0x3fcccccd
 8006abc:	42500000 	.word	0x42500000
 8006ac0:	42d00000 	.word	0x42d00000
 8006ac4:	43500000 	.word	0x43500000
 8006ac8:	43d08000 	.word	0x43d08000
 8006acc:	44504000 	.word	0x44504000
 8006ad0:	44d06000 	.word	0x44d06000
 8006ad4:	45505000 	.word	0x45505000

08006ad8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8006ae4:	edd7 7a00 	vldr	s15, [r7]
 8006ae8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006bd8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af4:	d801      	bhi.n	8006afa <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006af6:	230b      	movs	r3, #11
 8006af8:	e063      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006afa:	edd7 7a00 	vldr	s15, [r7]
 8006afe:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0a:	d801      	bhi.n	8006b10 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e058      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b10:	edd7 7a00 	vldr	s15, [r7]
 8006b14:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b20:	d801      	bhi.n	8006b26 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e04d      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b26:	edd7 7a00 	vldr	s15, [r7]
 8006b2a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006bdc <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b36:	d801      	bhi.n	8006b3c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e042      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b3c:	edd7 7a00 	vldr	s15, [r7]
 8006b40:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006be0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	d801      	bhi.n	8006b52 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006b4e:	2304      	movs	r3, #4
 8006b50:	e037      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b52:	edd7 7a00 	vldr	s15, [r7]
 8006b56:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006be4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b62:	d801      	bhi.n	8006b68 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006b64:	2305      	movs	r3, #5
 8006b66:	e02c      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b68:	edd7 7a00 	vldr	s15, [r7]
 8006b6c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006be8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b78:	d801      	bhi.n	8006b7e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006b7a:	2306      	movs	r3, #6
 8006b7c:	e021      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b7e:	edd7 7a00 	vldr	s15, [r7]
 8006b82:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006bec <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	d801      	bhi.n	8006b94 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006b90:	2307      	movs	r3, #7
 8006b92:	e016      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006b94:	edd7 7a00 	vldr	s15, [r7]
 8006b98:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006bf0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba4:	d801      	bhi.n	8006baa <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	e00b      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006baa:	edd7 7a00 	vldr	s15, [r7]
 8006bae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006bf4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bba:	d801      	bhi.n	8006bc0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006bbc:	2309      	movs	r3, #9
 8006bbe:	e000      	b.n	8006bc2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006bc0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSOX_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
                  :                    LSM6DSOX_XL_ODR_6667Hz;

  return LSM6DSOX_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	3fcccccd 	.word	0x3fcccccd
 8006bdc:	42500000 	.word	0x42500000
 8006be0:	42d00000 	.word	0x42d00000
 8006be4:	43500000 	.word	0x43500000
 8006be8:	43d08000 	.word	0x43d08000
 8006bec:	44504000 	.word	0x44504000
 8006bf0:	44d06000 	.word	0x44d06000
 8006bf4:	45505000 	.word	0x45505000

08006bf8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsox_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8006c04:	edd7 7a00 	vldr	s15, [r7]
 8006c08:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c14:	d801      	bhi.n	8006c1a <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e058      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c1a:	edd7 7a00 	vldr	s15, [r7]
 8006c1e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2a:	d801      	bhi.n	8006c30 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e04d      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c30:	edd7 7a00 	vldr	s15, [r7]
 8006c34:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006cf4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	d801      	bhi.n	8006c46 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006c42:	2303      	movs	r3, #3
 8006c44:	e042      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c46:	edd7 7a00 	vldr	s15, [r7]
 8006c4a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006cf8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	d801      	bhi.n	8006c5c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	e037      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c5c:	edd7 7a00 	vldr	s15, [r7]
 8006c60:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006cfc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6c:	d801      	bhi.n	8006c72 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006c6e:	2305      	movs	r3, #5
 8006c70:	e02c      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c72:	edd7 7a00 	vldr	s15, [r7]
 8006c76:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006d00 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c82:	d801      	bhi.n	8006c88 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006c84:	2306      	movs	r3, #6
 8006c86:	e021      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c88:	edd7 7a00 	vldr	s15, [r7]
 8006c8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006d04 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c98:	d801      	bhi.n	8006c9e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006c9a:	2307      	movs	r3, #7
 8006c9c:	e016      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006c9e:	edd7 7a00 	vldr	s15, [r7]
 8006ca2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006d08 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cae:	d801      	bhi.n	8006cb4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	e00b      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006cb4:	edd7 7a00 	vldr	s15, [r7]
 8006cb8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006d0c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	d801      	bhi.n	8006cca <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006cc6:	2309      	movs	r3, #9
 8006cc8:	e000      	b.n	8006ccc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006cca:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8006ccc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
            :                    LSM6DSOX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3320      	adds	r3, #32
 8006cd2:	7bfa      	ldrb	r2, [r7, #15]
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fba0 	bl	800741c <lsm6dsox_gy_data_rate_set>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSOX_ERROR;
 8006ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce6:	e000      	b.n	8006cea <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSOX_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	42500000 	.word	0x42500000
 8006cf8:	42d00000 	.word	0x42d00000
 8006cfc:	43500000 	.word	0x43500000
 8006d00:	43d08000 	.word	0x43d08000
 8006d04:	44504000 	.word	0x44504000
 8006d08:	44d06000 	.word	0x44d06000
 8006d0c:	45505000 	.word	0x45505000

08006d10 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8006d1c:	edd7 7a00 	vldr	s15, [r7]
 8006d20:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2c:	d801      	bhi.n	8006d32 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e058      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006d32:	edd7 7a00 	vldr	s15, [r7]
 8006d36:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	d801      	bhi.n	8006d48 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e04d      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006d48:	edd7 7a00 	vldr	s15, [r7]
 8006d4c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006df8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d58:	d801      	bhi.n	8006d5e <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e042      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006d5e:	edd7 7a00 	vldr	s15, [r7]
 8006d62:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006dfc <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6e:	d801      	bhi.n	8006d74 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006d70:	2304      	movs	r3, #4
 8006d72:	e037      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006d74:	edd7 7a00 	vldr	s15, [r7]
 8006d78:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006e00 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d84:	d801      	bhi.n	8006d8a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006d86:	2305      	movs	r3, #5
 8006d88:	e02c      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006d8a:	edd7 7a00 	vldr	s15, [r7]
 8006d8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006e04 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9a:	d801      	bhi.n	8006da0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	e021      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006da0:	edd7 7a00 	vldr	s15, [r7]
 8006da4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006e08 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db0:	d801      	bhi.n	8006db6 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006db2:	2307      	movs	r3, #7
 8006db4:	e016      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006db6:	edd7 7a00 	vldr	s15, [r7]
 8006dba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006e0c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	d801      	bhi.n	8006dcc <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	e00b      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006dcc:	edd7 7a00 	vldr	s15, [r7]
 8006dd0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006e10 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ddc:	d801      	bhi.n	8006de2 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006dde:	2309      	movs	r3, #9
 8006de0:	e000      	b.n	8006de4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006de2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSOX_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
                   :                    LSM6DSOX_GY_ODR_6667Hz;

  return LSM6DSOX_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	42500000 	.word	0x42500000
 8006dfc:	42d00000 	.word	0x42d00000
 8006e00:	43500000 	.word	0x43500000
 8006e04:	43d08000 	.word	0x43d08000
 8006e08:	44504000 	.word	0x44504000
 8006e0c:	44d06000 	.word	0x44d06000
 8006e10:	45505000 	.word	0x45505000

08006e14 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	460b      	mov	r3, r1
 8006e22:	72fb      	strb	r3, [r7, #11]
 8006e24:	4613      	mov	r3, r2
 8006e26:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	695c      	ldr	r4, [r3, #20]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	7b1b      	ldrb	r3, [r3, #12]
 8006e34:	b298      	uxth	r0, r3
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	47a0      	blx	r4
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd90      	pop	{r4, r7, pc}

08006e4a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006e4a:	b590      	push	{r4, r7, lr}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	461a      	mov	r2, r3
 8006e56:	460b      	mov	r3, r1
 8006e58:	72fb      	strb	r3, [r7, #11]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	691c      	ldr	r4, [r3, #16]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	7b1b      	ldrb	r3, [r3, #12]
 8006e6a:	b298      	uxth	r0, r3
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	b299      	uxth	r1, r3
 8006e70:	893b      	ldrh	r3, [r7, #8]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	47a0      	blx	r4
 8006e76:	4603      	mov	r3, r0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd90      	pop	{r4, r7, pc}

08006e80 <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	72fb      	strb	r3, [r7, #11]
 8006e90:	4613      	mov	r3, r2
 8006e92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685c      	ldr	r4, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68d8      	ldr	r0, [r3, #12]
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	7af9      	ldrb	r1, [r7, #11]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	47a0      	blx	r4
 8006ea4:	6178      	str	r0, [r7, #20]

  return ret;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd90      	pop	{r4, r7, pc}

08006eb0 <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8006eb0:	b590      	push	{r4, r7, lr}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	607a      	str	r2, [r7, #4]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	72fb      	strb	r3, [r7, #11]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681c      	ldr	r4, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68d8      	ldr	r0, [r3, #12]
 8006ecc:	893b      	ldrh	r3, [r7, #8]
 8006ece:	7af9      	ldrb	r1, [r7, #11]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	47a0      	blx	r4
 8006ed4:	6178      	str	r0, [r7, #20]

  return ret;
 8006ed6:	697b      	ldr	r3, [r7, #20]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd90      	pop	{r4, r7, pc}

08006ee0 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8006eec:	f107 0208 	add.w	r2, r7, #8
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff ffc3 	bl	8006e80 <lsm6dsox_read_reg>
 8006efa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10f      	bne.n	8006f22 <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	7a3b      	ldrb	r3, [r7, #8]
 8006f0c:	f362 0383 	bfi	r3, r2, #2, #2
 8006f10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8006f12:	f107 0208 	add.w	r2, r7, #8
 8006f16:	2301      	movs	r3, #1
 8006f18:	2110      	movs	r1, #16
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff ffc8 	bl	8006eb0 <lsm6dsox_write_reg>
 8006f20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f22:	68fb      	ldr	r3, [r7, #12]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <lsm6dsox_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t *val)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8006f36:	f107 0208 	add.w	r2, r7, #8
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	2110      	movs	r1, #16
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff ff9e 	bl	8006e80 <lsm6dsox_read_reg>
 8006f44:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8006f46:	7a3b      	ldrb	r3, [r7, #8]
 8006f48:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d81a      	bhi.n	8006f88 <lsm6dsox_xl_full_scale_get+0x5c>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <lsm6dsox_xl_full_scale_get+0x2c>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f71 	.word	0x08006f71
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f81 	.word	0x08006f81
  {
    case LSM6DSOX_2g:
      *val = LSM6DSOX_2g;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
      break;
 8006f6e:	e00f      	b.n	8006f90 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_16g:
      *val = LSM6DSOX_16g;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
      break;
 8006f76:	e00b      	b.n	8006f90 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_4g:
      *val = LSM6DSOX_4g;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e007      	b.n	8006f90 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_8g:
      *val = LSM6DSOX_8g;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2203      	movs	r2, #3
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e003      	b.n	8006f90 <lsm6dsox_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSOX_2g;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
      break;
 8006f8e:	bf00      	nop
  }

  return ret;
 8006f90:	68fb      	ldr	r3, [r7, #12]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8006fac:	f107 0314 	add.w	r3, r7, #20
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fdbd 	bl	8007b32 <lsm6dsox_fsm_enable_get>
 8006fb8:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f040 80c4 	bne.w	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006fc2:	7d3b      	ldrb	r3, [r7, #20]
 8006fc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006fc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006fca:	7d3b      	ldrb	r3, [r7, #20]
 8006fcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006fd0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006fd6:	7d3b      	ldrb	r3, [r7, #20]
 8006fd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006fdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006fe2:	7d3b      	ldrb	r3, [r7, #20]
 8006fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006fe8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006fea:	4313      	orrs	r3, r2
 8006fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006fee:	7d3b      	ldrb	r3, [r7, #20]
 8006ff0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006ff4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006ffa:	7d3b      	ldrb	r3, [r7, #20]
 8006ffc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007002:	4313      	orrs	r3, r2
 8007004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007006:	7d3b      	ldrb	r3, [r7, #20]
 8007008:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800700c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800700e:	4313      	orrs	r3, r2
 8007010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007012:	7d3b      	ldrb	r3, [r7, #20]
 8007014:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800701a:	4313      	orrs	r3, r2
 800701c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800701e:	7d7b      	ldrb	r3, [r7, #21]
 8007020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007026:	4313      	orrs	r3, r2
 8007028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800702a:	7d7b      	ldrb	r3, [r7, #21]
 800702c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007032:	4313      	orrs	r3, r2
 8007034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007036:	7d7b      	ldrb	r3, [r7, #21]
 8007038:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800703c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800703e:	4313      	orrs	r3, r2
 8007040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007042:	7d7b      	ldrb	r3, [r7, #21]
 8007044:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800704a:	4313      	orrs	r3, r2
 800704c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800704e:	7d7b      	ldrb	r3, [r7, #21]
 8007050:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007056:	4313      	orrs	r3, r2
 8007058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800705a:	7d7b      	ldrb	r3, [r7, #21]
 800705c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007062:	4313      	orrs	r3, r2
 8007064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007066:	7d7b      	ldrb	r3, [r7, #21]
 8007068:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800706c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800706e:	4313      	orrs	r3, r2
 8007070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007072:	7d7b      	ldrb	r3, [r7, #21]
 8007074:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800707a:	4313      	orrs	r3, r2
 800707c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800707e:	2b01      	cmp	r3, #1
 8007080:	d163      	bne.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8007082:	f107 0313 	add.w	r3, r7, #19
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fd73 	bl	8007b74 <lsm6dsox_fsm_data_rate_get>
 800708e:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d159      	bne.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007096:	7cfb      	ldrb	r3, [r7, #19]
 8007098:	2b03      	cmp	r3, #3
 800709a:	d853      	bhi.n	8007144 <lsm6dsox_xl_data_rate_set+0x1a8>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <lsm6dsox_xl_data_rate_set+0x108>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070c7 	.word	0x080070c7
 80070ac:	080070e5 	.word	0x080070e5
 80070b0:	0800710f 	.word	0x0800710f
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d102      	bne.n	80070c0 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80070ba:	2301      	movs	r3, #1
 80070bc:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80070be:	e044      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	77fb      	strb	r3, [r7, #31]
            break;
 80070c4:	e041      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80070cc:	2302      	movs	r3, #2
 80070ce:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80070d0:	e03b      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d102      	bne.n	80070de <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80070d8:	2302      	movs	r3, #2
 80070da:	77fb      	strb	r3, [r7, #31]
            break;
 80070dc:	e035      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	77fb      	strb	r3, [r7, #31]
            break;
 80070e2:	e032      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80070ea:	2303      	movs	r3, #3
 80070ec:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80070ee:	e02c      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d102      	bne.n	80070fc <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80070f6:	2303      	movs	r3, #3
 80070f8:	77fb      	strb	r3, [r7, #31]
            break;
 80070fa:	e026      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d102      	bne.n	8007108 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8007102:	2303      	movs	r3, #3
 8007104:	77fb      	strb	r3, [r7, #31]
            break;
 8007106:	e020      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	77fb      	strb	r3, [r7, #31]
            break;
 800710c:	e01d      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8007114:	2304      	movs	r3, #4
 8007116:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8007118:	e017      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d102      	bne.n	8007126 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8007120:	2304      	movs	r3, #4
 8007122:	77fb      	strb	r3, [r7, #31]
            break;
 8007124:	e011      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d102      	bne.n	8007132 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800712c:	2304      	movs	r3, #4
 800712e:	77fb      	strb	r3, [r7, #31]
            break;
 8007130:	e00b      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	2b03      	cmp	r3, #3
 8007136:	d102      	bne.n	800713e <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8007138:	2304      	movs	r3, #4
 800713a:	77fb      	strb	r3, [r7, #31]
            break;
 800713c:	e005      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	77fb      	strb	r3, [r7, #31]
            break;
 8007142:	e002      	b.n	800714a <lsm6dsox_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	77fb      	strb	r3, [r7, #31]
            break;
 8007148:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 800714a:	7c3b      	ldrb	r3, [r7, #16]
 800714c:	f36f 03c3 	bfc	r3, #3, #1
 8007150:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d16e      	bne.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8007158:	f107 0310 	add.w	r3, r7, #16
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fd98 	bl	8007c94 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8007164:	7c3b      	ldrb	r3, [r7, #16]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d062      	beq.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8007170:	f107 030f 	add.w	r3, r7, #15
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fd44 	bl	8007c04 <lsm6dsox_mlc_data_rate_get>
 800717c:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d158      	bne.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
      {
        switch (mlc_odr)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b03      	cmp	r3, #3
 8007188:	d852      	bhi.n	8007230 <lsm6dsox_xl_data_rate_set+0x294>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <lsm6dsox_xl_data_rate_set+0x1f4>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071a1 	.word	0x080071a1
 8007194:	080071b3 	.word	0x080071b3
 8007198:	080071d1 	.word	0x080071d1
 800719c:	080071fb 	.word	0x080071fb
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d102      	bne.n	80071ac <lsm6dsox_xl_data_rate_set+0x210>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80071aa:	e044      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	77fb      	strb	r3, [r7, #31]
            break;
 80071b0:	e041      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <lsm6dsox_xl_data_rate_set+0x222>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80071b8:	2302      	movs	r3, #2
 80071ba:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80071bc:	e03b      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d102      	bne.n	80071ca <lsm6dsox_xl_data_rate_set+0x22e>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80071c4:	2302      	movs	r3, #2
 80071c6:	77fb      	strb	r3, [r7, #31]
            break;
 80071c8:	e035      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	77fb      	strb	r3, [r7, #31]
            break;
 80071ce:	e032      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <lsm6dsox_xl_data_rate_set+0x240>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80071d6:	2303      	movs	r3, #3
 80071d8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80071da:	e02c      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d102      	bne.n	80071e8 <lsm6dsox_xl_data_rate_set+0x24c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80071e2:	2303      	movs	r3, #3
 80071e4:	77fb      	strb	r3, [r7, #31]
            break;
 80071e6:	e026      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d102      	bne.n	80071f4 <lsm6dsox_xl_data_rate_set+0x258>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80071ee:	2303      	movs	r3, #3
 80071f0:	77fb      	strb	r3, [r7, #31]
            break;
 80071f2:	e020      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	77fb      	strb	r3, [r7, #31]
            break;
 80071f8:	e01d      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <lsm6dsox_xl_data_rate_set+0x26a>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8007200:	2304      	movs	r3, #4
 8007202:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8007204:	e017      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d102      	bne.n	8007212 <lsm6dsox_xl_data_rate_set+0x276>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800720c:	2304      	movs	r3, #4
 800720e:	77fb      	strb	r3, [r7, #31]
            break;
 8007210:	e011      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d102      	bne.n	800721e <lsm6dsox_xl_data_rate_set+0x282>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8007218:	2304      	movs	r3, #4
 800721a:	77fb      	strb	r3, [r7, #31]
            break;
 800721c:	e00b      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	2b03      	cmp	r3, #3
 8007222:	d102      	bne.n	800722a <lsm6dsox_xl_data_rate_set+0x28e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8007224:	2304      	movs	r3, #4
 8007226:	77fb      	strb	r3, [r7, #31]
            break;
 8007228:	e005      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	77fb      	strb	r3, [r7, #31]
            break;
 800722e:	e002      	b.n	8007236 <lsm6dsox_xl_data_rate_set+0x29a>

          default:
            odr_xl = val;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	77fb      	strb	r3, [r7, #31]
            break;
 8007234:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d107      	bne.n	800724c <lsm6dsox_xl_data_rate_set+0x2b0>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800723c:	f107 020c 	add.w	r2, r7, #12
 8007240:	2301      	movs	r3, #1
 8007242:	2110      	movs	r1, #16
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff fe1b 	bl	8006e80 <lsm6dsox_read_reg>
 800724a:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <lsm6dsox_xl_data_rate_set+0x2d6>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007252:	7ffb      	ldrb	r3, [r7, #31]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	b2da      	uxtb	r2, r3
 800725a:	7b3b      	ldrb	r3, [r7, #12]
 800725c:	f362 1307 	bfi	r3, r2, #4, #4
 8007260:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8007262:	f107 020c 	add.w	r2, r7, #12
 8007266:	2301      	movs	r3, #1
 8007268:	2110      	movs	r1, #16
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fe20 	bl	8006eb0 <lsm6dsox_write_reg>
 8007270:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8007272:	69bb      	ldr	r3, [r7, #24]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <lsm6dsox_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t *val)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8007286:	f107 0208 	add.w	r2, r7, #8
 800728a:	2301      	movs	r3, #1
 800728c:	2110      	movs	r1, #16
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fdf6 	bl	8006e80 <lsm6dsox_read_reg>
 8007294:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007296:	7a3b      	ldrb	r3, [r7, #8]
 8007298:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b0b      	cmp	r3, #11
 80072a0:	d84a      	bhi.n	8007338 <lsm6dsox_xl_data_rate_get+0xbc>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <lsm6dsox_xl_data_rate_get+0x2c>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072d9 	.word	0x080072d9
 80072ac:	080072e1 	.word	0x080072e1
 80072b0:	080072e9 	.word	0x080072e9
 80072b4:	080072f1 	.word	0x080072f1
 80072b8:	080072f9 	.word	0x080072f9
 80072bc:	08007301 	.word	0x08007301
 80072c0:	08007309 	.word	0x08007309
 80072c4:	08007311 	.word	0x08007311
 80072c8:	08007319 	.word	0x08007319
 80072cc:	08007321 	.word	0x08007321
 80072d0:	08007329 	.word	0x08007329
 80072d4:	08007331 	.word	0x08007331
  {
    case LSM6DSOX_XL_ODR_OFF:
      *val = LSM6DSOX_XL_ODR_OFF;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
      break;
 80072de:	e02f      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_12Hz5:
      *val = LSM6DSOX_XL_ODR_12Hz5;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	e02b      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_26Hz:
      *val = LSM6DSOX_XL_ODR_26Hz;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2202      	movs	r2, #2
 80072ec:	701a      	strb	r2, [r3, #0]
      break;
 80072ee:	e027      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_52Hz:
      *val = LSM6DSOX_XL_ODR_52Hz;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2203      	movs	r2, #3
 80072f4:	701a      	strb	r2, [r3, #0]
      break;
 80072f6:	e023      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_104Hz:
      *val = LSM6DSOX_XL_ODR_104Hz;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2204      	movs	r2, #4
 80072fc:	701a      	strb	r2, [r3, #0]
      break;
 80072fe:	e01f      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_208Hz:
      *val = LSM6DSOX_XL_ODR_208Hz;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2205      	movs	r2, #5
 8007304:	701a      	strb	r2, [r3, #0]
      break;
 8007306:	e01b      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_417Hz:
      *val = LSM6DSOX_XL_ODR_417Hz;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2206      	movs	r2, #6
 800730c:	701a      	strb	r2, [r3, #0]
      break;
 800730e:	e017      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_833Hz:
      *val = LSM6DSOX_XL_ODR_833Hz;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2207      	movs	r2, #7
 8007314:	701a      	strb	r2, [r3, #0]
      break;
 8007316:	e013      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1667Hz:
      *val = LSM6DSOX_XL_ODR_1667Hz;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2208      	movs	r2, #8
 800731c:	701a      	strb	r2, [r3, #0]
      break;
 800731e:	e00f      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_3333Hz:
      *val = LSM6DSOX_XL_ODR_3333Hz;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2209      	movs	r2, #9
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e00b      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_6667Hz:
      *val = LSM6DSOX_XL_ODR_6667Hz;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	220a      	movs	r2, #10
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e007      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1Hz6:
      *val = LSM6DSOX_XL_ODR_1Hz6;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	220b      	movs	r2, #11
 8007334:	701a      	strb	r2, [r3, #0]
      break;
 8007336:	e003      	b.n	8007340 <lsm6dsox_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSOX_XL_ODR_OFF;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
      break;
 800733e:	bf00      	nop
  }

  return ret;
 8007340:	68fb      	ldr	r3, [r7, #12]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop

0800734c <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8007358:	f107 0208 	add.w	r2, r7, #8
 800735c:	2301      	movs	r3, #1
 800735e:	2111      	movs	r1, #17
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fd8d 	bl	8006e80 <lsm6dsox_read_reg>
 8007366:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10f      	bne.n	800738e <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	b2da      	uxtb	r2, r3
 8007376:	7a3b      	ldrb	r3, [r7, #8]
 8007378:	f362 0343 	bfi	r3, r2, #1, #3
 800737c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800737e:	f107 0208 	add.w	r2, r7, #8
 8007382:	2301      	movs	r3, #1
 8007384:	2111      	movs	r1, #17
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fd92 	bl	8006eb0 <lsm6dsox_write_reg>
 800738c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <lsm6dsox_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t *val)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80073a2:	f107 0208 	add.w	r2, r7, #8
 80073a6:	2301      	movs	r3, #1
 80073a8:	2111      	movs	r1, #17
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fd68 	bl	8006e80 <lsm6dsox_read_reg>
 80073b0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80073b2:	7a3b      	ldrb	r3, [r7, #8]
 80073b4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d824      	bhi.n	8007408 <lsm6dsox_gy_full_scale_get+0x70>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <lsm6dsox_gy_full_scale_get+0x2c>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073e1 	.word	0x080073e1
 80073c8:	080073e9 	.word	0x080073e9
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	08007409 	.word	0x08007409
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	08007409 	.word	0x08007409
 80073dc:	08007401 	.word	0x08007401
  {
    case LSM6DSOX_250dps:
      *val = LSM6DSOX_250dps;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
      break;
 80073e6:	e013      	b.n	8007410 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_125dps:
      *val = LSM6DSOX_125dps;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2201      	movs	r2, #1
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e00f      	b.n	8007410 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_500dps:
      *val = LSM6DSOX_500dps;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2202      	movs	r2, #2
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e00b      	b.n	8007410 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_1000dps:
      *val = LSM6DSOX_1000dps;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2204      	movs	r2, #4
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e007      	b.n	8007410 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_2000dps:
      *val = LSM6DSOX_2000dps;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2206      	movs	r2, #6
 8007404:	701a      	strb	r2, [r3, #0]
      break;
 8007406:	e003      	b.n	8007410 <lsm6dsox_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSOX_250dps;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]
      break;
 800740e:	bf00      	nop
  }

  return ret;
 8007410:	68fb      	ldr	r3, [r7, #12]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop

0800741c <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 800742c:	f107 0314 	add.w	r3, r7, #20
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fb7d 	bl	8007b32 <lsm6dsox_fsm_enable_get>
 8007438:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 80c4 	bne.w	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007442:	7d3b      	ldrb	r3, [r7, #20]
 8007444:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007448:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800744a:	7d3b      	ldrb	r3, [r7, #20]
 800744c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007450:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007452:	4313      	orrs	r3, r2
 8007454:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007456:	7d3b      	ldrb	r3, [r7, #20]
 8007458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800745c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800745e:	4313      	orrs	r3, r2
 8007460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007462:	7d3b      	ldrb	r3, [r7, #20]
 8007464:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007468:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800746a:	4313      	orrs	r3, r2
 800746c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800746e:	7d3b      	ldrb	r3, [r7, #20]
 8007470:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007474:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007476:	4313      	orrs	r3, r2
 8007478:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800747a:	7d3b      	ldrb	r3, [r7, #20]
 800747c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007480:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007482:	4313      	orrs	r3, r2
 8007484:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007486:	7d3b      	ldrb	r3, [r7, #20]
 8007488:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800748c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800748e:	4313      	orrs	r3, r2
 8007490:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007492:	7d3b      	ldrb	r3, [r7, #20]
 8007494:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007498:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800749a:	4313      	orrs	r3, r2
 800749c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800749e:	7d7b      	ldrb	r3, [r7, #21]
 80074a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80074aa:	7d7b      	ldrb	r3, [r7, #21]
 80074ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80074b6:	7d7b      	ldrb	r3, [r7, #21]
 80074b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80074be:	4313      	orrs	r3, r2
 80074c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80074c2:	7d7b      	ldrb	r3, [r7, #21]
 80074c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80074ce:	7d7b      	ldrb	r3, [r7, #21]
 80074d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80074da:	7d7b      	ldrb	r3, [r7, #21]
 80074dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80074e2:	4313      	orrs	r3, r2
 80074e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80074e6:	7d7b      	ldrb	r3, [r7, #21]
 80074e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80074f2:	7d7b      	ldrb	r3, [r7, #21]
 80074f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d163      	bne.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8007502:	f107 0313 	add.w	r3, r7, #19
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb33 	bl	8007b74 <lsm6dsox_fsm_data_rate_get>
 800750e:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d159      	bne.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007516:	7cfb      	ldrb	r3, [r7, #19]
 8007518:	2b03      	cmp	r3, #3
 800751a:	d853      	bhi.n	80075c4 <lsm6dsox_gy_data_rate_set+0x1a8>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <lsm6dsox_gy_data_rate_set+0x108>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007535 	.word	0x08007535
 8007528:	08007547 	.word	0x08007547
 800752c:	08007565 	.word	0x08007565
 8007530:	0800758f 	.word	0x0800758f
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800753a:	2301      	movs	r3, #1
 800753c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800753e:	e044      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	77fb      	strb	r3, [r7, #31]
            break;
 8007544:	e041      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800754c:	2302      	movs	r3, #2
 800754e:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8007550:	e03b      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d102      	bne.n	800755e <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8007558:	2302      	movs	r3, #2
 800755a:	77fb      	strb	r3, [r7, #31]
            break;
 800755c:	e035      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	77fb      	strb	r3, [r7, #31]
            break;
 8007562:	e032      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800756a:	2303      	movs	r3, #3
 800756c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800756e:	e02c      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d102      	bne.n	800757c <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8007576:	2303      	movs	r3, #3
 8007578:	77fb      	strb	r3, [r7, #31]
            break;
 800757a:	e026      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d102      	bne.n	8007588 <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8007582:	2303      	movs	r3, #3
 8007584:	77fb      	strb	r3, [r7, #31]
            break;
 8007586:	e020      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	77fb      	strb	r3, [r7, #31]
            break;
 800758c:	e01d      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8007594:	2304      	movs	r3, #4
 8007596:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8007598:	e017      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d102      	bne.n	80075a6 <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80075a0:	2304      	movs	r3, #4
 80075a2:	77fb      	strb	r3, [r7, #31]
            break;
 80075a4:	e011      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d102      	bne.n	80075b2 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80075ac:	2304      	movs	r3, #4
 80075ae:	77fb      	strb	r3, [r7, #31]
            break;
 80075b0:	e00b      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d102      	bne.n	80075be <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80075b8:	2304      	movs	r3, #4
 80075ba:	77fb      	strb	r3, [r7, #31]
            break;
 80075bc:	e005      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	77fb      	strb	r3, [r7, #31]
            break;
 80075c2:	e002      	b.n	80075ca <lsm6dsox_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	77fb      	strb	r3, [r7, #31]
            break;
 80075c8:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 80075ca:	7c3b      	ldrb	r3, [r7, #16]
 80075cc:	f36f 03c3 	bfc	r3, #3, #1
 80075d0:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d170      	bne.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80075d8:	f107 0310 	add.w	r3, r7, #16
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fb58 	bl	8007c94 <lsm6dsox_embedded_sens_get>
 80075e4:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 80075e6:	7c3b      	ldrb	r3, [r7, #16]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d063      	beq.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 80075f2:	f107 030f 	add.w	r3, r7, #15
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fb03 	bl	8007c04 <lsm6dsox_mlc_data_rate_get>
 80075fe:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d159      	bne.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d853      	bhi.n	80076b4 <lsm6dsox_gy_data_rate_set+0x298>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <lsm6dsox_gy_data_rate_set+0x1f8>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007625 	.word	0x08007625
 8007618:	08007637 	.word	0x08007637
 800761c:	08007655 	.word	0x08007655
 8007620:	0800767f 	.word	0x0800767f
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d102      	bne.n	8007630 <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800762a:	2301      	movs	r3, #1
 800762c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800762e:	e044      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	77fb      	strb	r3, [r7, #31]
            break;
 8007634:	e041      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800763c:	2302      	movs	r3, #2
 800763e:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8007640:	e03b      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d102      	bne.n	800764e <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8007648:	2302      	movs	r3, #2
 800764a:	77fb      	strb	r3, [r7, #31]
            break;
 800764c:	e035      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	77fb      	strb	r3, [r7, #31]
            break;
 8007652:	e032      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800765a:	2303      	movs	r3, #3
 800765c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800765e:	e02c      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d102      	bne.n	800766c <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8007666:	2303      	movs	r3, #3
 8007668:	77fb      	strb	r3, [r7, #31]
            break;
 800766a:	e026      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d102      	bne.n	8007678 <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8007672:	2303      	movs	r3, #3
 8007674:	77fb      	strb	r3, [r7, #31]
            break;
 8007676:	e020      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	77fb      	strb	r3, [r7, #31]
            break;
 800767c:	e01d      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8007684:	2304      	movs	r3, #4
 8007686:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8007688:	e017      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d102      	bne.n	8007696 <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8007690:	2304      	movs	r3, #4
 8007692:	77fb      	strb	r3, [r7, #31]
            break;
 8007694:	e011      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d102      	bne.n	80076a2 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800769c:	2304      	movs	r3, #4
 800769e:	77fb      	strb	r3, [r7, #31]
            break;
 80076a0:	e00b      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d102      	bne.n	80076ae <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80076a8:	2304      	movs	r3, #4
 80076aa:	77fb      	strb	r3, [r7, #31]
            break;
 80076ac:	e005      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	77fb      	strb	r3, [r7, #31]
            break;
 80076b2:	e002      	b.n	80076ba <lsm6dsox_gy_data_rate_set+0x29e>

          default:
            odr_gy = val;
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	77fb      	strb	r3, [r7, #31]
            break;
 80076b8:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <lsm6dsox_gy_data_rate_set+0x2b4>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80076c0:	f107 020c 	add.w	r2, r7, #12
 80076c4:	2301      	movs	r3, #1
 80076c6:	2111      	movs	r1, #17
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fbd9 	bl	8006e80 <lsm6dsox_read_reg>
 80076ce:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10f      	bne.n	80076f6 <lsm6dsox_gy_data_rate_set+0x2da>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80076d6:	7ffb      	ldrb	r3, [r7, #31]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	7b3b      	ldrb	r3, [r7, #12]
 80076e0:	f362 1307 	bfi	r3, r2, #4, #4
 80076e4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80076e6:	f107 020c 	add.w	r2, r7, #12
 80076ea:	2301      	movs	r3, #1
 80076ec:	2111      	movs	r1, #17
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fbde 	bl	8006eb0 <lsm6dsox_write_reg>
 80076f4:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 80076f6:	69bb      	ldr	r3, [r7, #24]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <lsm6dsox_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t *val)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800770a:	f107 0208 	add.w	r2, r7, #8
 800770e:	2301      	movs	r3, #1
 8007710:	2111      	movs	r1, #17
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fbb4 	bl	8006e80 <lsm6dsox_read_reg>
 8007718:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800771a:	7a3b      	ldrb	r3, [r7, #8]
 800771c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b0a      	cmp	r3, #10
 8007724:	d844      	bhi.n	80077b0 <lsm6dsox_gy_data_rate_get+0xb0>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <lsm6dsox_gy_data_rate_get+0x2c>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007759 	.word	0x08007759
 8007730:	08007761 	.word	0x08007761
 8007734:	08007769 	.word	0x08007769
 8007738:	08007771 	.word	0x08007771
 800773c:	08007779 	.word	0x08007779
 8007740:	08007781 	.word	0x08007781
 8007744:	08007789 	.word	0x08007789
 8007748:	08007791 	.word	0x08007791
 800774c:	08007799 	.word	0x08007799
 8007750:	080077a1 	.word	0x080077a1
 8007754:	080077a9 	.word	0x080077a9
  {
    case LSM6DSOX_GY_ODR_OFF:
      *val = LSM6DSOX_GY_ODR_OFF;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
      break;
 800775e:	e02b      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_12Hz5:
      *val = LSM6DSOX_GY_ODR_12Hz5;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
      break;
 8007766:	e027      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_26Hz:
      *val = LSM6DSOX_GY_ODR_26Hz;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2202      	movs	r2, #2
 800776c:	701a      	strb	r2, [r3, #0]
      break;
 800776e:	e023      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_52Hz:
      *val = LSM6DSOX_GY_ODR_52Hz;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2203      	movs	r2, #3
 8007774:	701a      	strb	r2, [r3, #0]
      break;
 8007776:	e01f      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_104Hz:
      *val = LSM6DSOX_GY_ODR_104Hz;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2204      	movs	r2, #4
 800777c:	701a      	strb	r2, [r3, #0]
      break;
 800777e:	e01b      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_208Hz:
      *val = LSM6DSOX_GY_ODR_208Hz;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2205      	movs	r2, #5
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	e017      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_417Hz:
      *val = LSM6DSOX_GY_ODR_417Hz;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2206      	movs	r2, #6
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e013      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_833Hz:
      *val = LSM6DSOX_GY_ODR_833Hz;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2207      	movs	r2, #7
 8007794:	701a      	strb	r2, [r3, #0]
      break;
 8007796:	e00f      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_1667Hz:
      *val = LSM6DSOX_GY_ODR_1667Hz;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2208      	movs	r2, #8
 800779c:	701a      	strb	r2, [r3, #0]
      break;
 800779e:	e00b      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_3333Hz:
      *val = LSM6DSOX_GY_ODR_3333Hz;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2209      	movs	r2, #9
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e007      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_6667Hz:
      *val = LSM6DSOX_GY_ODR_6667Hz;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	220a      	movs	r2, #10
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e003      	b.n	80077b8 <lsm6dsox_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSOX_GY_ODR_OFF;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	bf00      	nop
  }

  return ret;
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80077d0:	f107 0208 	add.w	r2, r7, #8
 80077d4:	2301      	movs	r3, #1
 80077d6:	2112      	movs	r1, #18
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fb51 	bl	8006e80 <lsm6dsox_read_reg>
 80077de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10f      	bne.n	8007806 <lsm6dsox_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	7a3b      	ldrb	r3, [r7, #8]
 80077f0:	f362 1386 	bfi	r3, r2, #6, #1
 80077f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80077f6:	f107 0208 	add.w	r2, r7, #8
 80077fa:	2301      	movs	r3, #1
 80077fc:	2112      	movs	r1, #18
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fb56 	bl	8006eb0 <lsm6dsox_write_reg>
 8007804:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007806:	68fb      	ldr	r3, [r7, #12]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <lsm6dsox_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	2301      	movs	r3, #1
 8007820:	211e      	movs	r1, #30
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff fb2c 	bl	8006e80 <lsm6dsox_read_reg>
 8007828:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 800782a:	7a3b      	ldrb	r3, [r7, #8]
 800782c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007830:	b2db      	uxtb	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	701a      	strb	r2, [r3, #0]

  return ret;
 8007838:	68fb      	ldr	r3, [r7, #12]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <lsm6dsox_gy_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 800784c:	f107 0208 	add.w	r2, r7, #8
 8007850:	2301      	movs	r3, #1
 8007852:	211e      	movs	r1, #30
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff fb13 	bl	8006e80 <lsm6dsox_read_reg>
 800785a:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 800785c:	7a3b      	ldrb	r3, [r7, #8]
 800785e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007862:	b2db      	uxtb	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	701a      	strb	r2, [r3, #0]

  return ret;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 800787e:	f107 020c 	add.w	r2, r7, #12
 8007882:	2306      	movs	r3, #6
 8007884:	2122      	movs	r1, #34	; 0x22
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff fafa 	bl	8006e80 <lsm6dsox_read_reg>
 800788c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800788e:	7b7b      	ldrb	r3, [r7, #13]
 8007890:	b21a      	sxth	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800789c:	b29b      	uxth	r3, r3
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	7b3b      	ldrb	r3, [r7, #12]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	b21a      	sxth	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80078b0:	7bfa      	ldrb	r2, [r7, #15]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	3302      	adds	r3, #2
 80078b6:	b212      	sxth	r2, r2
 80078b8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	3302      	adds	r3, #2
 80078be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	4413      	add	r3, r2
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	3302      	adds	r3, #2
 80078d4:	b212      	sxth	r2, r2
 80078d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80078d8:	7c7a      	ldrb	r2, [r7, #17]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	b212      	sxth	r2, r2
 80078e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3304      	adds	r3, #4
 80078e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	7c3b      	ldrb	r3, [r7, #16]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4413      	add	r3, r2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	3304      	adds	r3, #4
 80078fc:	b212      	sxth	r2, r2
 80078fe:	801a      	strh	r2, [r3, #0]

  return ret;
 8007900:	697b      	ldr	r3, [r7, #20]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8007914:	f107 020c 	add.w	r2, r7, #12
 8007918:	2306      	movs	r3, #6
 800791a:	2128      	movs	r1, #40	; 0x28
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff faaf 	bl	8006e80 <lsm6dsox_read_reg>
 8007922:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007924:	7b7b      	ldrb	r3, [r7, #13]
 8007926:	b21a      	sxth	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007932:	b29b      	uxth	r3, r3
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	b29a      	uxth	r2, r3
 8007938:	7b3b      	ldrb	r3, [r7, #12]
 800793a:	b29b      	uxth	r3, r3
 800793c:	4413      	add	r3, r2
 800793e:	b29b      	uxth	r3, r3
 8007940:	b21a      	sxth	r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007946:	7bfa      	ldrb	r2, [r7, #15]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3302      	adds	r3, #2
 800794c:	b212      	sxth	r2, r2
 800794e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	3302      	adds	r3, #2
 8007954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007958:	b29b      	uxth	r3, r3
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	b29a      	uxth	r2, r3
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	b29b      	uxth	r3, r3
 8007962:	4413      	add	r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	3302      	adds	r3, #2
 800796a:	b212      	sxth	r2, r2
 800796c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800796e:	7c7a      	ldrb	r2, [r7, #17]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	3304      	adds	r3, #4
 8007974:	b212      	sxth	r2, r2
 8007976:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	3304      	adds	r3, #4
 800797c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007980:	b29b      	uxth	r3, r3
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	b29a      	uxth	r2, r3
 8007986:	7c3b      	ldrb	r3, [r7, #16]
 8007988:	b29b      	uxth	r3, r3
 800798a:	4413      	add	r3, r2
 800798c:	b29a      	uxth	r2, r3
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	3304      	adds	r3, #4
 8007992:	b212      	sxth	r2, r2
 8007994:	801a      	strh	r2, [r3, #0]

  return ret;
 8007996:	697b      	ldr	r3, [r7, #20]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 80079ac:	f107 0208 	add.w	r2, r7, #8
 80079b0:	2301      	movs	r3, #1
 80079b2:	2101      	movs	r1, #1
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fa63 	bl	8006e80 <lsm6dsox_read_reg>
 80079ba:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10f      	bne.n	80079e2 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	7a3b      	ldrb	r3, [r7, #8]
 80079cc:	f362 1387 	bfi	r3, r2, #6, #2
 80079d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 80079d2:	f107 0208 	add.w	r2, r7, #8
 80079d6:	2301      	movs	r3, #1
 80079d8:	2101      	movs	r1, #1
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff fa68 	bl	8006eb0 <lsm6dsox_write_reg>
 80079e0:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 80079e2:	68fb      	ldr	r3, [r7, #12]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 80079f6:	2301      	movs	r3, #1
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	210f      	movs	r1, #15
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fa3f 	bl	8006e80 <lsm6dsox_read_reg>
 8007a02:	60f8      	str	r0, [r7, #12]

  return ret;
 8007a04:	68fb      	ldr	r3, [r7, #12]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <lsm6dsox_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8007a1a:	f107 0208 	add.w	r2, r7, #8
 8007a1e:	2301      	movs	r3, #1
 8007a20:	2112      	movs	r1, #18
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff fa2c 	bl	8006e80 <lsm6dsox_read_reg>
 8007a28:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10f      	bne.n	8007a50 <lsm6dsox_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	7a3b      	ldrb	r3, [r7, #8]
 8007a3a:	f362 0382 	bfi	r3, r2, #2, #1
 8007a3e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8007a40:	f107 0208 	add.w	r2, r7, #8
 8007a44:	2301      	movs	r3, #1
 8007a46:	2112      	movs	r1, #18
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff fa31 	bl	8006eb0 <lsm6dsox_write_reg>
 8007a4e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a50:	68fb      	ldr	r3, [r7, #12]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a66:	f107 020c 	add.w	r2, r7, #12
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	2118      	movs	r1, #24
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff fa06 	bl	8006e80 <lsm6dsox_read_reg>
 8007a74:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d111      	bne.n	8007aa0 <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	09db      	lsrs	r3, r3, #7
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	7b3b      	ldrb	r3, [r7, #12]
 8007a8a:	f362 0341 	bfi	r3, r2, #1, #1
 8007a8e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a90:	f107 020c 	add.w	r2, r7, #12
 8007a94:	2301      	movs	r3, #1
 8007a96:	2118      	movs	r1, #24
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fa09 	bl	8006eb0 <lsm6dsox_write_reg>
 8007a9e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d107      	bne.n	8007ab6 <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8007aa6:	f107 0210 	add.w	r2, r7, #16
 8007aaa:	2301      	movs	r3, #1
 8007aac:	2162      	movs	r1, #98	; 0x62
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff f9e6 	bl	8006e80 <lsm6dsox_read_reg>
 8007ab4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10f      	bne.n	8007adc <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	7c3b      	ldrb	r3, [r7, #16]
 8007ac6:	f362 03c4 	bfi	r3, r2, #3, #2
 8007aca:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8007acc:	f107 0210 	add.w	r2, r7, #16
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	2162      	movs	r1, #98	; 0x62
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff f9eb 	bl	8006eb0 <lsm6dsox_write_reg>
 8007ada:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007adc:	697b      	ldr	r3, [r7, #20]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <lsm6dsox_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fifo_mode_set(stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	2301      	movs	r3, #1
 8007af8:	210a      	movs	r1, #10
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff f9c0 	bl	8006e80 <lsm6dsox_read_reg>
 8007b00:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <lsm6dsox_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	7a3b      	ldrb	r3, [r7, #8]
 8007b12:	f362 0302 	bfi	r3, r2, #0, #3
 8007b16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007b18:	f107 0208 	add.w	r2, r7, #8
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	210a      	movs	r1, #10
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff f9c5 	bl	8006eb0 <lsm6dsox_write_reg>
 8007b26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff ff2e 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007b44:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	2146      	movs	r1, #70	; 0x46
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f994 	bl	8006e80 <lsm6dsox_read_reg>
 8007b58:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8007b60:	2100      	movs	r1, #0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff ff1c 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007b68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8007b7e:	2102      	movs	r1, #2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff ff0d 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007b86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d107      	bne.n	8007b9e <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8007b8e:	f107 0208 	add.w	r2, r7, #8
 8007b92:	2301      	movs	r3, #1
 8007b94:	215f      	movs	r1, #95	; 0x5f
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff f972 	bl	8006e80 <lsm6dsox_read_reg>
 8007b9c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d12a      	bne.n	8007bfa <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8007ba4:	7a3b      	ldrb	r3, [r7, #8]
 8007ba6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d81b      	bhi.n	8007be8 <lsm6dsox_fsm_data_rate_get+0x74>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <lsm6dsox_fsm_data_rate_get+0x44>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bd1 	.word	0x08007bd1
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007be1 	.word	0x08007be1
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
        break;
 8007bce:	e00f      	b.n	8007bf0 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
        break;
 8007bd6:	e00b      	b.n	8007bf0 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]
        break;
 8007bde:	e007      	b.n	8007bf0 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2203      	movs	r2, #3
 8007be4:	701a      	strb	r2, [r3, #0]
        break;
 8007be6:	e003      	b.n	8007bf0 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
        break;
 8007bee:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fed4 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007bf8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8007c0e:	2102      	movs	r1, #2
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff fec5 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007c16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d107      	bne.n	8007c2e <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8007c1e:	f107 0208 	add.w	r2, r7, #8
 8007c22:	2301      	movs	r3, #1
 8007c24:	2160      	movs	r1, #96	; 0x60
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff f92a 	bl	8006e80 <lsm6dsox_read_reg>
 8007c2c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d12a      	bne.n	8007c8a <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8007c34:	7a3b      	ldrb	r3, [r7, #8]
 8007c36:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d81b      	bhi.n	8007c78 <lsm6dsox_mlc_data_rate_get+0x74>
 8007c40:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <lsm6dsox_mlc_data_rate_get+0x44>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c61 	.word	0x08007c61
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
        break;
 8007c5e:	e00f      	b.n	8007c80 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
        break;
 8007c66:	e00b      	b.n	8007c80 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	701a      	strb	r2, [r3, #0]
        break;
 8007c6e:	e007      	b.n	8007c80 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2203      	movs	r2, #3
 8007c74:	701a      	strb	r2, [r3, #0]
        break;
 8007c76:	e003      	b.n	8007c80 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
        break;
 8007c7e:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff fe8c 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007c88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fe7d 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007ca6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d107      	bne.n	8007cbe <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8007cae:	f107 0210 	add.w	r2, r7, #16
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	2104      	movs	r1, #4
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff f8e2 	bl	8006e80 <lsm6dsox_read_reg>
 8007cbc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d13d      	bne.n	8007d40 <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8007cc4:	f107 020c 	add.w	r2, r7, #12
 8007cc8:	2301      	movs	r3, #1
 8007cca:	2105      	movs	r1, #5
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff f8d7 	bl	8006e80 <lsm6dsox_read_reg>
 8007cd2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8007cd4:	7b3b      	ldrb	r3, [r7, #12]
 8007cd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007cda:	b2d9      	uxtb	r1, r3
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	7813      	ldrb	r3, [r2, #0]
 8007ce0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ce4:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8007ce6:	7b3b      	ldrb	r3, [r7, #12]
 8007ce8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007cec:	b2d9      	uxtb	r1, r3
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	7813      	ldrb	r3, [r2, #0]
 8007cf2:	f361 1304 	bfi	r3, r1, #4, #1
 8007cf6:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8007cf8:	7c3b      	ldrb	r3, [r7, #16]
 8007cfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007cfe:	b2d9      	uxtb	r1, r3
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	7813      	ldrb	r3, [r2, #0]
 8007d04:	f361 0341 	bfi	r3, r1, #1, #1
 8007d08:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8007d0a:	7c3b      	ldrb	r3, [r7, #16]
 8007d0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d10:	b2d9      	uxtb	r1, r3
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	7813      	ldrb	r3, [r2, #0]
 8007d16:	f361 0382 	bfi	r3, r1, #2, #1
 8007d1a:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8007d1c:	7c3b      	ldrb	r3, [r7, #16]
 8007d1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007d22:	b2d9      	uxtb	r1, r3
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	7813      	ldrb	r3, [r2, #0]
 8007d28:	f361 0300 	bfi	r3, r1, #0, #1
 8007d2c:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8007d2e:	7b3b      	ldrb	r3, [r7, #12]
 8007d30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d34:	b2d9      	uxtb	r1, r3
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	7813      	ldrb	r3, [r2, #0]
 8007d3a:	f361 1345 	bfi	r3, r1, #5, #1
 8007d3e:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8007d46:	2100      	movs	r1, #0
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff fe29 	bl	80079a0 <lsm6dsox_mem_bank_set>
 8007d4e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8007d50:	697b      	ldr	r3, [r7, #20]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d103      	bne.n	8007d74 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e034      	b.n	8007dde <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	7b1a      	ldrb	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	695a      	ldr	r2, [r3, #20]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a0e      	ldr	r2, [pc, #56]	; (8007de8 <STTS751_RegisterBusIO+0x8c>)
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <STTS751_RegisterBusIO+0x90>)
 8007db6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	e002      	b.n	8007dde <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ddc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007dde:	68fb      	ldr	r3, [r7, #12]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	0800831f 	.word	0x0800831f
 8007dec:	0800838d 	.word	0x0800838d

08007df0 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d127      	bne.n	8007e52 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3320      	adds	r3, #32
 8007e06:	2101      	movs	r1, #1
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fcbd 	bl	8008788 <stts751_pin_event_route_set>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e18:	e020      	b.n	8007e5c <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3320      	adds	r3, #32
 8007e26:	2103      	movs	r1, #3
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fc07 	bl	800863c <stts751_resolution_set>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e38:	e010      	b.n	8007e5c <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3320      	adds	r3, #32
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fb25 	bl	8008490 <stts751_temp_data_rate_set>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e50:	e004      	b.n	8007e5c <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d108      	bne.n	8007e88 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f870 	bl	8007f5c <STTS751_TEMP_Disable>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e86:	e004      	b.n	8007e92 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3320      	adds	r3, #32
 8007ea8:	f107 020c 	add.w	r2, r7, #12
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fc90 	bl	80087d4 <stts751_device_id_get>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ebe:	e003      	b.n	8007ec8 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007ec0:	7b7a      	ldrb	r2, [r7, #13]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2200      	movs	r2, #0
 8007ede:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007f00:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e012      	b.n	8007f54 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f34:	eeb0 0a67 	vmov.f32	s0, s15
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8b5 	bl	80080a8 <STTS751_TEMP_SetOutputDataRate>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8007f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f48:	e004      	b.n	8007f54 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e01c      	b.n	8007fac <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3334      	adds	r3, #52	; 0x34
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f81b 	bl	8007fb4 <STTS751_TEMP_GetOutputDataRate>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f88:	e010      	b.n	8007fac <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3320      	adds	r3, #32
 8007f8e:	2180      	movs	r1, #128	; 0x80
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fa7d 	bl	8008490 <stts751_temp_data_rate_set>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa0:	e004      	b.n	8007fac <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3320      	adds	r3, #32
 8007fc6:	f107 020b 	add.w	r2, r7, #11
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fab5 	bl	800853c <stts751_temp_data_rate_get>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fdc:	e060      	b.n	80080a0 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8007fde:	7afb      	ldrb	r3, [r7, #11]
 8007fe0:	2b90      	cmp	r3, #144	; 0x90
 8007fe2:	d021      	beq.n	8008028 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007fe4:	2b90      	cmp	r3, #144	; 0x90
 8007fe6:	dc56      	bgt.n	8008096 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007fe8:	2b09      	cmp	r3, #9
 8007fea:	dc1b      	bgt.n	8008024 <STTS751_TEMP_GetOutputDataRate+0x70>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	db52      	blt.n	8008096 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007ff0:	2b09      	cmp	r3, #9
 8007ff2:	d850      	bhi.n	8008096 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008033 	.word	0x08008033
 8008000:	0800803d 	.word	0x0800803d
 8008004:	08008047 	.word	0x08008047
 8008008:	08008051 	.word	0x08008051
 800800c:	0800805b 	.word	0x0800805b
 8008010:	08008065 	.word	0x08008065
 8008014:	0800806f 	.word	0x0800806f
 8008018:	08008079 	.word	0x08008079
 800801c:	08008083 	.word	0x08008083
 8008020:	0800808d 	.word	0x0800808d
 8008024:	2b80      	cmp	r3, #128	; 0x80
 8008026:	d136      	bne.n	8008096 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
      break;
 8008030:	e035      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008038:	601a      	str	r2, [r3, #0]
      break;
 800803a:	e030      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8008042:	601a      	str	r2, [r3, #0]
      break;
 8008044:	e02b      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800804c:	601a      	str	r2, [r3, #0]
      break;
 800804e:	e026      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008056:	601a      	str	r2, [r3, #0]
      break;
 8008058:	e021      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008060:	601a      	str	r2, [r3, #0]
      break;
 8008062:	e01c      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800806a:	601a      	str	r2, [r3, #0]
      break;
 800806c:	e017      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008074:	601a      	str	r2, [r3, #0]
      break;
 8008076:	e012      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800807e:	601a      	str	r2, [r3, #0]
      break;
 8008080:	e00d      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8008088:	601a      	str	r2, [r3, #0]
      break;
 800808a:	e008      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008092:	601a      	str	r2, [r3, #0]
      break;
 8008094:	e003      	b.n	800809e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8008096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800809a:	60fb      	str	r3, [r7, #12]
      break;
 800809c:	bf00      	nop
  }

  return ret;
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3320      	adds	r3, #32
 80080b8:	f107 020e 	add.w	r2, r7, #14
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fae2 	bl	8008688 <stts751_resolution_get>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ce:	e0a5      	b.n	800821c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80080d0:	edd7 7a00 	vldr	s15, [r7]
 80080d4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80080d8:	eef4 7a47 	vcmp.f32	s15, s14
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	d10e      	bne.n	8008100 <STTS751_TEMP_SetOutputDataRate+0x58>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d10b      	bne.n	8008100 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3320      	adds	r3, #32
 80080ec:	2101      	movs	r1, #1
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 faa4 	bl	800863c <stts751_resolution_set>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080fe:	e08d      	b.n	800821c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008100:	edd7 7a00 	vldr	s15, [r7]
 8008104:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008224 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8008108:	eef4 7a47 	vcmp.f32	s15, s14
 800810c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008110:	d111      	bne.n	8008136 <STTS751_TEMP_SetOutputDataRate+0x8e>
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2b03      	cmp	r3, #3
 8008116:	d002      	beq.n	800811e <STTS751_TEMP_SetOutputDataRate+0x76>
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d10b      	bne.n	8008136 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3320      	adds	r3, #32
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fa89 	bl	800863c <stts751_resolution_set>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8008130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008134:	e072      	b.n	800821c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008136:	edd7 7a00 	vldr	s15, [r7]
 800813a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008228 <STTS751_TEMP_SetOutputDataRate+0x180>
 800813e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008146:	d801      	bhi.n	800814c <STTS751_TEMP_SetOutputDataRate+0xa4>
 8008148:	2300      	movs	r3, #0
 800814a:	e058      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 800814c:	edd7 7a00 	vldr	s15, [r7]
 8008150:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8008154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815c:	d801      	bhi.n	8008162 <STTS751_TEMP_SetOutputDataRate+0xba>
 800815e:	2301      	movs	r3, #1
 8008160:	e04d      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 8008162:	edd7 7a00 	vldr	s15, [r7]
 8008166:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800816a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800816e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008172:	d801      	bhi.n	8008178 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8008174:	2302      	movs	r3, #2
 8008176:	e042      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 8008178:	edd7 7a00 	vldr	s15, [r7]
 800817c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008188:	d801      	bhi.n	800818e <STTS751_TEMP_SetOutputDataRate+0xe6>
 800818a:	2303      	movs	r3, #3
 800818c:	e037      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 800818e:	edd7 7a00 	vldr	s15, [r7]
 8008192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800819a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819e:	d801      	bhi.n	80081a4 <STTS751_TEMP_SetOutputDataRate+0xfc>
 80081a0:	2304      	movs	r3, #4
 80081a2:	e02c      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 80081a4:	edd7 7a00 	vldr	s15, [r7]
 80081a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80081ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b4:	d801      	bhi.n	80081ba <STTS751_TEMP_SetOutputDataRate+0x112>
 80081b6:	2305      	movs	r3, #5
 80081b8:	e021      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 80081ba:	edd7 7a00 	vldr	s15, [r7]
 80081be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80081c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ca:	d801      	bhi.n	80081d0 <STTS751_TEMP_SetOutputDataRate+0x128>
 80081cc:	2306      	movs	r3, #6
 80081ce:	e016      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 80081d0:	edd7 7a00 	vldr	s15, [r7]
 80081d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80081d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e0:	d801      	bhi.n	80081e6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80081e2:	2307      	movs	r3, #7
 80081e4:	e00b      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 80081e6:	edd7 7a00 	vldr	s15, [r7]
 80081ea:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80081ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f6:	d801      	bhi.n	80081fc <STTS751_TEMP_SetOutputDataRate+0x154>
 80081f8:	2308      	movs	r3, #8
 80081fa:	e000      	b.n	80081fe <STTS751_TEMP_SetOutputDataRate+0x156>
 80081fc:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80081fe:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3320      	adds	r3, #32
 8008204:	7bfa      	ldrb	r2, [r7, #15]
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f941 	bl	8008490 <stts751_temp_data_rate_set>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8008214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008218:	e000      	b.n	800821c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	42000000 	.word	0x42000000
 8008228:	3d800000 	.word	0x3d800000

0800822c <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3320      	adds	r3, #32
 800823a:	f107 020e 	add.w	r2, r7, #14
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fa72 	bl	800872a <stts751_temperature_raw_get>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800824c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008250:	e00a      	b.n	8008268 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f900 	bl	800845c <stts751_from_lsb_to_celsius>
 800825c:	eef0 7a40 	vmov.f32	s15, s0
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <STTS751_TEMP_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Get_DRDY_Status(STTS751_Object_t *pObj, uint8_t *Status)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (stts751_flag_busy_get(&(pObj->Ctx), &val) != STTS751_OK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3320      	adds	r3, #32
 800827e:	f107 020f 	add.w	r2, r7, #15
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fa37 	bl	80086f8 <stts751_flag_busy_get>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <STTS751_TEMP_Get_DRDY_Status+0x26>
  {
    return STTS751_ERROR;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008294:	e00a      	b.n	80082ac <STTS751_TEMP_Get_DRDY_Status+0x3c>
  }

  if (val)
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <STTS751_TEMP_Get_DRDY_Status+0x34>
  {
    *Status = 0;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	e002      	b.n	80082aa <STTS751_TEMP_Get_DRDY_Status+0x3a>
  }
  else
  {
    *Status = 1;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2201      	movs	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]
  }

  return STTS751_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <STTS751_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Read_Reg(STTS751_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	460b      	mov	r3, r1
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	72fb      	strb	r3, [r7, #11]
  if (stts751_read_reg(&(pObj->Ctx), Reg, Data, 1) != STTS751_OK)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f103 0020 	add.w	r0, r3, #32
 80082c8:	7af9      	ldrb	r1, [r7, #11]
 80082ca:	2301      	movs	r3, #1
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f000 f894 	bl	80083fa <stts751_read_reg>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <STTS751_Read_Reg+0x2a>
  {
    return STTS751_ERROR;
 80082d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082dc:	e000      	b.n	80082e0 <STTS751_Read_Reg+0x2c>
  }

  return STTS751_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <STTS751_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Write_Reg(STTS751_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]
  if (stts751_write_reg(&(pObj->Ctx), Reg, &Data, 1) != STTS751_OK)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f103 0020 	add.w	r0, r3, #32
 80082fe:	1cba      	adds	r2, r7, #2
 8008300:	78f9      	ldrb	r1, [r7, #3]
 8008302:	2301      	movs	r3, #1
 8008304:	f000 f891 	bl	800842a <stts751_write_reg>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <STTS751_Write_Reg+0x2c>
  {
    return STTS751_ERROR;
 800830e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008312:	e000      	b.n	8008316 <STTS751_Write_Reg+0x2e>
  }

  return STTS751_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800831e:	b590      	push	{r4, r7, lr}
 8008320:	b089      	sub	sp, #36	; 0x24
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	461a      	mov	r2, r3
 800832a:	460b      	mov	r3, r1
 800832c:	72fb      	strb	r3, [r7, #11]
 800832e:	4613      	mov	r3, r2
 8008330:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d11f      	bne.n	8008382 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008342:	2300      	movs	r3, #0
 8008344:	83fb      	strh	r3, [r7, #30]
 8008346:	e018      	b.n	800837a <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	695c      	ldr	r4, [r3, #20]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	7b1b      	ldrb	r3, [r3, #12]
 8008350:	b298      	uxth	r0, r3
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	b29a      	uxth	r2, r3
 8008356:	8bfb      	ldrh	r3, [r7, #30]
 8008358:	4413      	add	r3, r2
 800835a:	b299      	uxth	r1, r3
 800835c:	8bfb      	ldrh	r3, [r7, #30]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	441a      	add	r2, r3
 8008362:	2301      	movs	r3, #1
 8008364:	47a0      	blx	r4
 8008366:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008372:	e007      	b.n	8008384 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008374:	8bfb      	ldrh	r3, [r7, #30]
 8008376:	3301      	adds	r3, #1
 8008378:	83fb      	strh	r3, [r7, #30]
 800837a:	8bfa      	ldrh	r2, [r7, #30]
 800837c:	893b      	ldrh	r3, [r7, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	d3e2      	bcc.n	8008348 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008382:	69bb      	ldr	r3, [r7, #24]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3724      	adds	r7, #36	; 0x24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd90      	pop	{r4, r7, pc}

0800838c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b089      	sub	sp, #36	; 0x24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	461a      	mov	r2, r3
 8008398:	460b      	mov	r3, r1
 800839a:	72fb      	strb	r3, [r7, #11]
 800839c:	4613      	mov	r3, r2
 800839e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11f      	bne.n	80083f0 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	83fb      	strh	r3, [r7, #30]
 80083b4:	e018      	b.n	80083e8 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	691c      	ldr	r4, [r3, #16]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	7b1b      	ldrb	r3, [r3, #12]
 80083be:	b298      	uxth	r0, r3
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	8bfb      	ldrh	r3, [r7, #30]
 80083c6:	4413      	add	r3, r2
 80083c8:	b299      	uxth	r1, r3
 80083ca:	8bfb      	ldrh	r3, [r7, #30]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	441a      	add	r2, r3
 80083d0:	2301      	movs	r3, #1
 80083d2:	47a0      	blx	r4
 80083d4:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e0:	e007      	b.n	80083f2 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80083e2:	8bfb      	ldrh	r3, [r7, #30]
 80083e4:	3301      	adds	r3, #1
 80083e6:	83fb      	strh	r3, [r7, #30]
 80083e8:	8bfa      	ldrh	r2, [r7, #30]
 80083ea:	893b      	ldrh	r3, [r7, #8]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d3e2      	bcc.n	80083b6 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80083f0:	69bb      	ldr	r3, [r7, #24]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3724      	adds	r7, #36	; 0x24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd90      	pop	{r4, r7, pc}

080083fa <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80083fa:	b590      	push	{r4, r7, lr}
 80083fc:	b087      	sub	sp, #28
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	72fb      	strb	r3, [r7, #11]
 800840a:	4613      	mov	r3, r2
 800840c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685c      	ldr	r4, [r3, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68d8      	ldr	r0, [r3, #12]
 8008416:	893b      	ldrh	r3, [r7, #8]
 8008418:	7af9      	ldrb	r1, [r7, #11]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	47a0      	blx	r4
 800841e:	6178      	str	r0, [r7, #20]

  return ret;
 8008420:	697b      	ldr	r3, [r7, #20]
}
 8008422:	4618      	mov	r0, r3
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	bd90      	pop	{r4, r7, pc}

0800842a <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800842a:	b590      	push	{r4, r7, lr}
 800842c:	b087      	sub	sp, #28
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	461a      	mov	r2, r3
 8008436:	460b      	mov	r3, r1
 8008438:	72fb      	strb	r3, [r7, #11]
 800843a:	4613      	mov	r3, r2
 800843c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681c      	ldr	r4, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68d8      	ldr	r0, [r3, #12]
 8008446:	893b      	ldrh	r3, [r7, #8]
 8008448:	7af9      	ldrb	r1, [r7, #11]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	47a0      	blx	r4
 800844e:	6178      	str	r0, [r7, #20]

  return ret;
 8008450:	697b      	ldr	r3, [r7, #20]
}
 8008452:	4618      	mov	r0, r3
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd90      	pop	{r4, r7, pc}
	...

0800845c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008472:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800848c <stts751_from_lsb_to_celsius+0x30>
 8008476:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800847a:	eef0 7a66 	vmov.f32	s15, s13
}
 800847e:	eeb0 0a67 	vmov.f32	s0, s15
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	43800000 	.word	0x43800000

08008490 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800849c:	23aa      	movs	r3, #170	; 0xaa
 800849e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80084a0:	f107 020c 	add.w	r2, r7, #12
 80084a4:	2301      	movs	r3, #1
 80084a6:	2104      	movs	r1, #4
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff ffa6 	bl	80083fa <stts751_read_reg>
 80084ae:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10f      	bne.n	80084d6 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	7b3b      	ldrb	r3, [r7, #12]
 80084c0:	f362 0303 	bfi	r3, r2, #0, #4
 80084c4:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80084c6:	f107 020c 	add.w	r2, r7, #12
 80084ca:	2301      	movs	r3, #1
 80084cc:	2104      	movs	r1, #4
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff ffab 	bl	800842a <stts751_write_reg>
 80084d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d107      	bne.n	80084ec <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80084dc:	f107 0210 	add.w	r2, r7, #16
 80084e0:	2301      	movs	r3, #1
 80084e2:	2103      	movs	r1, #3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff ff88 	bl	80083fa <stts751_read_reg>
 80084ea:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d111      	bne.n	8008516 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	09db      	lsrs	r3, r3, #7
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	7c3b      	ldrb	r3, [r7, #16]
 8008500:	f362 1386 	bfi	r3, r2, #6, #1
 8008504:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008506:	f107 0210 	add.w	r2, r7, #16
 800850a:	2301      	movs	r3, #1
 800850c:	2103      	movs	r1, #3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff ff8b 	bl	800842a <stts751_write_reg>
 8008514:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <stts751_temp_data_rate_set+0xa2>
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	2b90      	cmp	r3, #144	; 0x90
 8008520:	d107      	bne.n	8008532 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8008522:	f107 020b 	add.w	r2, r7, #11
 8008526:	2301      	movs	r3, #1
 8008528:	210f      	movs	r1, #15
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff ff7d 	bl	800842a <stts751_write_reg>
 8008530:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008532:	697b      	ldr	r3, [r7, #20]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008546:	f107 0210 	add.w	r2, r7, #16
 800854a:	2301      	movs	r3, #1
 800854c:	2104      	movs	r1, #4
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ff53 	bl	80083fa <stts751_read_reg>
 8008554:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d107      	bne.n	800856c <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800855c:	f107 020c 	add.w	r2, r7, #12
 8008560:	2301      	movs	r3, #1
 8008562:	2103      	movs	r1, #3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff ff48 	bl	80083fa <stts751_read_reg>
 800856a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800856c:	7b3b      	ldrb	r3, [r7, #12]
 800856e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008572:	b2db      	uxtb	r3, r3
 8008574:	01db      	lsls	r3, r3, #7
 8008576:	7c3a      	ldrb	r2, [r7, #16]
 8008578:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	4413      	add	r3, r2
 8008580:	2b90      	cmp	r3, #144	; 0x90
 8008582:	d025      	beq.n	80085d0 <stts751_temp_data_rate_get+0x94>
 8008584:	2b90      	cmp	r3, #144	; 0x90
 8008586:	dc4f      	bgt.n	8008628 <stts751_temp_data_rate_get+0xec>
 8008588:	2b09      	cmp	r3, #9
 800858a:	dc1b      	bgt.n	80085c4 <stts751_temp_data_rate_get+0x88>
 800858c:	2b00      	cmp	r3, #0
 800858e:	db4b      	blt.n	8008628 <stts751_temp_data_rate_get+0xec>
 8008590:	2b09      	cmp	r3, #9
 8008592:	d849      	bhi.n	8008628 <stts751_temp_data_rate_get+0xec>
 8008594:	a201      	add	r2, pc, #4	; (adr r2, 800859c <stts751_temp_data_rate_get+0x60>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085d9 	.word	0x080085d9
 80085a0:	080085e1 	.word	0x080085e1
 80085a4:	080085e9 	.word	0x080085e9
 80085a8:	080085f1 	.word	0x080085f1
 80085ac:	080085f9 	.word	0x080085f9
 80085b0:	08008601 	.word	0x08008601
 80085b4:	08008609 	.word	0x08008609
 80085b8:	08008611 	.word	0x08008611
 80085bc:	08008619 	.word	0x08008619
 80085c0:	08008621 	.word	0x08008621
 80085c4:	2b80      	cmp	r3, #128	; 0x80
 80085c6:	d12f      	bne.n	8008628 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	701a      	strb	r2, [r3, #0]
      break;
 80085ce:	e02f      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2290      	movs	r2, #144	; 0x90
 80085d4:	701a      	strb	r2, [r3, #0]
      break;
 80085d6:	e02b      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
      break;
 80085de:	e027      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	701a      	strb	r2, [r3, #0]
      break;
 80085e6:	e023      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2202      	movs	r2, #2
 80085ec:	701a      	strb	r2, [r3, #0]
      break;
 80085ee:	e01f      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2203      	movs	r2, #3
 80085f4:	701a      	strb	r2, [r3, #0]
      break;
 80085f6:	e01b      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2204      	movs	r2, #4
 80085fc:	701a      	strb	r2, [r3, #0]
      break;
 80085fe:	e017      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2205      	movs	r2, #5
 8008604:	701a      	strb	r2, [r3, #0]
      break;
 8008606:	e013      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2206      	movs	r2, #6
 800860c:	701a      	strb	r2, [r3, #0]
      break;
 800860e:	e00f      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2207      	movs	r2, #7
 8008614:	701a      	strb	r2, [r3, #0]
      break;
 8008616:	e00b      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2208      	movs	r2, #8
 800861c:	701a      	strb	r2, [r3, #0]
      break;
 800861e:	e007      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2209      	movs	r2, #9
 8008624:	701a      	strb	r2, [r3, #0]
      break;
 8008626:	e003      	b.n	8008630 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2280      	movs	r2, #128	; 0x80
 800862c:	701a      	strb	r2, [r3, #0]
      break;
 800862e:	bf00      	nop
  }

  return ret;
 8008630:	697b      	ldr	r3, [r7, #20]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop

0800863c <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008648:	f107 0208 	add.w	r2, r7, #8
 800864c:	2301      	movs	r3, #1
 800864e:	2103      	movs	r1, #3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff fed2 	bl	80083fa <stts751_read_reg>
 8008656:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	b2da      	uxtb	r2, r3
 8008666:	7a3b      	ldrb	r3, [r7, #8]
 8008668:	f362 0383 	bfi	r3, r2, #2, #2
 800866c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800866e:	f107 0208 	add.w	r2, r7, #8
 8008672:	2301      	movs	r3, #1
 8008674:	2103      	movs	r1, #3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff fed7 	bl	800842a <stts751_write_reg>
 800867c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008692:	f107 0208 	add.w	r2, r7, #8
 8008696:	2301      	movs	r3, #1
 8008698:	2103      	movs	r1, #3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fead 	bl	80083fa <stts751_read_reg>
 80086a0:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 80086a2:	7a3b      	ldrb	r3, [r7, #8]
 80086a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d81a      	bhi.n	80086e4 <stts751_resolution_get+0x5c>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <stts751_resolution_get+0x2c>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086c5 	.word	0x080086c5
 80086c0:	080086dd 	.word	0x080086dd
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2202      	movs	r2, #2
 80086c8:	701a      	strb	r2, [r3, #0]
      break;
 80086ca:	e00f      	b.n	80086ec <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
      break;
 80086d2:	e00b      	b.n	80086ec <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
      break;
 80086da:	e007      	b.n	80086ec <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2203      	movs	r2, #3
 80086e0:	701a      	strb	r2, [r3, #0]
      break;
 80086e2:	e003      	b.n	80086ec <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2202      	movs	r2, #2
 80086e8:	701a      	strb	r2, [r3, #0]
      break;
 80086ea:	bf00      	nop
  }

  return ret;
 80086ec:	68fb      	ldr	r3, [r7, #12]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <stts751_flag_busy_get>:
  * @param  val      get the values of busy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_flag_busy_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  stts751_status_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_STATUS, (uint8_t *)&reg, 1);
 8008702:	f107 0208 	add.w	r2, r7, #8
 8008706:	2301      	movs	r3, #1
 8008708:	2101      	movs	r1, #1
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fe75 	bl	80083fa <stts751_read_reg>
 8008710:	60f8      	str	r0, [r7, #12]
  *val = reg.busy;
 8008712:	7a3b      	ldrb	r3, [r7, #8]
 8008714:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	701a      	strb	r2, [r3, #0]

  return ret;
 8008720:	68fb      	ldr	r3, [r7, #12]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008734:	f107 0308 	add.w	r3, r7, #8
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	2301      	movs	r3, #1
 800873c:	2100      	movs	r1, #0
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fe5b 	bl	80083fa <stts751_read_reg>
 8008744:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d118      	bne.n	800877e <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800874c:	f107 0208 	add.w	r2, r7, #8
 8008750:	2301      	movs	r3, #1
 8008752:	2102      	movs	r1, #2
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff fe50 	bl	80083fa <stts751_read_reg>
 800875a:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800875c:	7a7b      	ldrb	r3, [r7, #9]
 800875e:	b21a      	sxth	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800876a:	b29b      	uxth	r3, r3
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	b29a      	uxth	r2, r3
 8008770:	7a3b      	ldrb	r3, [r7, #8]
 8008772:	b29b      	uxth	r3, r3
 8008774:	4413      	add	r3, r2
 8008776:	b29b      	uxth	r3, r3
 8008778:	b21a      	sxth	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800877e:	68fb      	ldr	r3, [r7, #12]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008794:	f107 0208 	add.w	r2, r7, #8
 8008798:	2301      	movs	r3, #1
 800879a:	2103      	movs	r1, #3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff fe2c 	bl	80083fa <stts751_read_reg>
 80087a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10f      	bne.n	80087ca <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	7a3b      	ldrb	r3, [r7, #8]
 80087b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80087b8:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80087ba:	f107 0208 	add.w	r2, r7, #8
 80087be:	2301      	movs	r3, #1
 80087c0:	2103      	movs	r1, #3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fe31 	bl	800842a <stts751_write_reg>
 80087c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80087ca:	68fb      	ldr	r3, [r7, #12]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	2301      	movs	r3, #1
 80087e2:	21fd      	movs	r1, #253	; 0xfd
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff fe08 	bl	80083fa <stts751_read_reg>
 80087ea:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d107      	bne.n	8008802 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	2301      	movs	r3, #1
 80087f8:	21fe      	movs	r1, #254	; 0xfe
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fdfd 	bl	80083fa <stts751_read_reg>
 8008800:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d107      	bne.n	8008818 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	1c9a      	adds	r2, r3, #2
 800880c:	2301      	movs	r3, #1
 800880e:	21ff      	movs	r1, #255	; 0xff
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff fdf2 	bl	80083fa <stts751_read_reg>
 8008816:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <BSP_LED_Init>:
*            @arg  LED2
*            @arg  LED3
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08c      	sub	sp, #48	; 0x30
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10b      	bne.n	800884c <BSP_LED_Init+0x28>
 8008834:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008838:	4a2a      	ldr	r2, [pc, #168]	; (80088e4 <BSP_LED_Init+0xc0>)
 800883a:	f043 0302 	orr.w	r3, r3, #2
 800883e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008840:	4b28      	ldr	r3, [pc, #160]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10b      	bne.n	800886a <BSP_LED_Init+0x46>
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	4a23      	ldr	r2, [pc, #140]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008858:	f043 0320 	orr.w	r3, r3, #32
 800885c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800885e:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d119      	bne.n	80088a4 <BSP_LED_Init+0x80>
 8008870:	4b1c      	ldr	r3, [pc, #112]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008874:	4a1b      	ldr	r2, [pc, #108]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887a:	6593      	str	r3, [r2, #88]	; 0x58
 800887c:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <BSP_LED_Init+0xc0>)
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f005 f992 	bl	800dbb0 <HAL_PWREx_EnableVddIO2>
 800888c:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <BSP_LED_Init+0xc0>)
 800888e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008890:	4a14      	ldr	r2, [pc, #80]	; (80088e4 <BSP_LED_Init+0xc0>)
 8008892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008898:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <BSP_LED_Init+0xc0>)
 800889a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	4a10      	ldr	r2, [pc, #64]	; (80088e8 <BSP_LED_Init+0xc4>)
 80088a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088ae:	2301      	movs	r3, #1
 80088b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088b6:	2300      	movs	r3, #0
 80088b8:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	4a0b      	ldr	r2, [pc, #44]	; (80088ec <BSP_LED_Init+0xc8>)
 80088be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c2:	f107 021c 	add.w	r2, r7, #28
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 ff4f 	bl	800b76c <HAL_GPIO_Init>

  /* If Red Led... switch off it */
  if(Led == LED3) {
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d103      	bne.n	80088dc <BSP_LED_Init+0xb8>
    BSP_LED_Off(Led);
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f836 	bl	8008948 <BSP_LED_Off>
  }
}
 80088dc:	bf00      	nop
 80088de:	3730      	adds	r7, #48	; 0x30
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	40021000 	.word	0x40021000
 80088e8:	08019e70 	.word	0x08019e70
 80088ec:	20000188 	.word	0x20000188

080088f0 <BSP_LED_On>:
*            @arg  LED2
*            @arg  LED3
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	71fb      	strb	r3, [r7, #7]
  if(Led == LED3) {
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d10d      	bne.n	800891c <BSP_LED_On+0x2c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	4a0f      	ldr	r2, [pc, #60]	; (8008940 <BSP_LED_On+0x50>)
 8008904:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	4a0e      	ldr	r2, [pc, #56]	; (8008944 <BSP_LED_On+0x54>)
 800890c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008910:	b29b      	uxth	r3, r3
 8008912:	2200      	movs	r2, #0
 8008914:	4619      	mov	r1, r3
 8008916:	f003 f9c5 	bl	800bca4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 800891a:	e00c      	b.n	8008936 <BSP_LED_On+0x46>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	4a08      	ldr	r2, [pc, #32]	; (8008940 <BSP_LED_On+0x50>)
 8008920:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	4a07      	ldr	r2, [pc, #28]	; (8008944 <BSP_LED_On+0x54>)
 8008928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800892c:	b29b      	uxth	r3, r3
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	f003 f9b7 	bl	800bca4 <HAL_GPIO_WritePin>
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000188 	.word	0x20000188
 8008944:	08019e70 	.word	0x08019e70

08008948 <BSP_LED_Off>:
*            @arg  LED2
*            @arg  LED3
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	71fb      	strb	r3, [r7, #7]
  if(Led == LED3) {
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d10d      	bne.n	8008974 <BSP_LED_Off+0x2c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	4a0f      	ldr	r2, [pc, #60]	; (8008998 <BSP_LED_Off+0x50>)
 800895c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	4a0e      	ldr	r2, [pc, #56]	; (800899c <BSP_LED_Off+0x54>)
 8008964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008968:	b29b      	uxth	r3, r3
 800896a:	2201      	movs	r2, #1
 800896c:	4619      	mov	r1, r3
 800896e:	f003 f999 	bl	800bca4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 8008972:	e00c      	b.n	800898e <BSP_LED_Off+0x46>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	4a08      	ldr	r2, [pc, #32]	; (8008998 <BSP_LED_Off+0x50>)
 8008978:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	4a07      	ldr	r2, [pc, #28]	; (800899c <BSP_LED_Off+0x54>)
 8008980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008984:	b29b      	uxth	r3, r3
 8008986:	2200      	movs	r2, #0
 8008988:	4619      	mov	r1, r3
 800898a:	f003 f98b 	bl	800bca4 <HAL_GPIO_WritePin>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000188 	.word	0x20000188
 800899c:	08019e70 	.word	0x08019e70

080089a0 <BSP_LED_Toggle>:
*            @arg  LED2
*            @arg  LED3
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	4a07      	ldr	r2, [pc, #28]	; (80089cc <BSP_LED_Toggle+0x2c>)
 80089ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	4906      	ldr	r1, [pc, #24]	; (80089d0 <BSP_LED_Toggle+0x30>)
 80089b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f003 f988 	bl	800bcd4 <HAL_GPIO_TogglePin>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20000188 	.word	0x20000188
 80089d0:	08019e70 	.word	0x08019e70

080089d4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	; 0x28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	460a      	mov	r2, r1
 80089de:	71fb      	strb	r3, [r7, #7]
 80089e0:	4613      	mov	r3, r2
 80089e2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	605a      	str	r2, [r3, #4]
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	60da      	str	r2, [r3, #12]
 80089f2:	611a      	str	r2, [r3, #16]

  /* Enable VddIO2 */
  __HAL_RCC_PWR_CLK_ENABLE();
 80089f4:	4b2c      	ldr	r3, [pc, #176]	; (8008aa8 <BSP_PB_Init+0xd4>)
 80089f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f8:	4a2b      	ldr	r2, [pc, #172]	; (8008aa8 <BSP_PB_Init+0xd4>)
 80089fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fe:	6593      	str	r3, [r2, #88]	; 0x58
 8008a00:	4b29      	ldr	r3, [pc, #164]	; (8008aa8 <BSP_PB_Init+0xd4>)
 8008a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8008a0c:	f005 f8d0 	bl	800dbb0 <HAL_PWREx_EnableVddIO2>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10b      	bne.n	8008a2e <BSP_PB_Init+0x5a>
 8008a16:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <BSP_PB_Init+0xd4>)
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	4a23      	ldr	r2, [pc, #140]	; (8008aa8 <BSP_PB_Init+0xd4>)
 8008a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a22:	4b21      	ldr	r3, [pc, #132]	; (8008aa8 <BSP_PB_Init+0xd4>)
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8008a2e:	79bb      	ldrb	r3, [r7, #6]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d112      	bne.n	8008a5a <BSP_PB_Init+0x86>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 8008a34:	2302      	movs	r3, #2
 8008a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode   = GPIO_MODE_INPUT;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8008a40:	2302      	movs	r3, #2
 8008a42:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	4a19      	ldr	r2, [pc, #100]	; (8008aac <BSP_PB_Init+0xd8>)
 8008a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a4c:	f107 0214 	add.w	r2, r7, #20
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f002 fe8a 	bl	800b76c <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8008a58:	e021      	b.n	8008a9e <BSP_PB_Init+0xca>
  else if (ButtonMode == BUTTON_MODE_EXTI)
 8008a5a:	79bb      	ldrb	r3, [r7, #6]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11e      	bne.n	8008a9e <BSP_PB_Init+0xca>
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 8008a60:	2302      	movs	r3, #2
 8008a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode   = GPIO_MODE_IT_FALLING;
 8008a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <BSP_PB_Init+0xd8>)
 8008a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7a:	f107 0214 	add.w	r2, r7, #20
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f002 fe73 	bl	800b76c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8008a86:	2307      	movs	r3, #7
 8008a88:	b25b      	sxtb	r3, r3
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	210f      	movs	r1, #15
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f002 fe35 	bl	800b6fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008a94:	2307      	movs	r3, #7
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f002 fe4c 	bl	800b736 <HAL_NVIC_EnableIRQ>
}
 8008a9e:	bf00      	nop
 8008aa0:	3728      	adds	r7, #40	; 0x28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40021000 	.word	0x40021000
 8008aac:	20000194 	.word	0x20000194

08008ab0 <BSP_I2C1_Init>:
  * @brief  Initialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	607b      	str	r3, [r7, #4]
  
  hbusi2c1.Instance  = I2C1;
 8008aba:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <BSP_I2C1_Init+0x5c>)
 8008abc:	4a14      	ldr	r2, [pc, #80]	; (8008b10 <BSP_I2C1_Init+0x60>)
 8008abe:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&hbusi2c1) == HAL_I2C_STATE_RESET)
 8008ac0:	4812      	ldr	r0, [pc, #72]	; (8008b0c <BSP_I2C1_Init+0x5c>)
 8008ac2:	f003 fc39 	bl	800c338 <HAL_I2C_GetState>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d119      	bne.n	8008b00 <BSP_I2C1_Init+0x50>
  {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hbusi2c1);
 8008acc:	480f      	ldr	r0, [pc, #60]	; (8008b0c <BSP_I2C1_Init+0x5c>)
 8008ace:	f000 fb6d 	bl	80091ac <I2C1_MspInit>
        }
      }
    #endif

    /* Init the I2C */
    if(MX_I2C1_Init(&hbusi2c1) != HAL_OK)
 8008ad2:	480e      	ldr	r0, [pc, #56]	; (8008b0c <BSP_I2C1_Init+0x5c>)
 8008ad4:	f000 fb26 	bl	8009124 <MX_I2C1_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <BSP_I2C1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008ade:	f06f 0307 	mvn.w	r3, #7
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	e00c      	b.n	8008b00 <BSP_I2C1_Init+0x50>
    }
    else if(HAL_I2CEx_ConfigAnalogFilter(&hbusi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4808      	ldr	r0, [pc, #32]	; (8008b0c <BSP_I2C1_Init+0x5c>)
 8008aea:	f003 fed9 	bl	800c8a0 <HAL_I2CEx_ConfigAnalogFilter>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <BSP_I2C1_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008af4:	f06f 0307 	mvn.w	r3, #7
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	e001      	b.n	8008b00 <BSP_I2C1_Init+0x50>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	607b      	str	r3, [r7, #4]
    }	
  }

  return ret;
 8008b00:	687b      	ldr	r3, [r7, #4]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000674 	.word	0x20000674
 8008b10:	40005400 	.word	0x40005400

08008b14 <BSP_I2C1_DeInit>:
  * @brief  DeInitialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008b1a:	f06f 0307 	mvn.w	r3, #7
 8008b1e:	607b      	str	r3, [r7, #4]
  
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    /* DeInit the I2C */ 
    I2C1_MspDeInit(&hbusi2c1);
 8008b20:	4807      	ldr	r0, [pc, #28]	; (8008b40 <BSP_I2C1_DeInit+0x2c>)
 8008b22:	f000 fb77 	bl	8009214 <I2C1_MspDeInit>
  #endif  
  
  if (HAL_I2C_DeInit(&hbusi2c1) == HAL_OK) {
 8008b26:	4806      	ldr	r0, [pc, #24]	; (8008b40 <BSP_I2C1_DeInit+0x2c>)
 8008b28:	f003 f995 	bl	800be56 <HAL_I2C_DeInit>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <BSP_I2C1_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8008b36:	687b      	ldr	r3, [r7, #4]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000674 	.word	0x20000674

08008b44 <BSP_I2C1_WriteReg>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	60ba      	str	r2, [r7, #8]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	81fb      	strh	r3, [r7, #14]
 8008b52:	460b      	mov	r3, r1
 8008b54:	81bb      	strh	r3, [r7, #12]
 8008b56:	4613      	mov	r3, r2
 8008b58:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008b5a:	f06f 0307 	mvn.w	r3, #7
 8008b5e:	617b      	str	r3, [r7, #20]

  if(HAL_I2C_Mem_Write(&hbusi2c1, (uint8_t)DevAddr,
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	b299      	uxth	r1, r3
 8008b66:	89ba      	ldrh	r2, [r7, #12]
 8008b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	2301      	movs	r3, #1
 8008b78:	4806      	ldr	r0, [pc, #24]	; (8008b94 <BSP_I2C1_WriteReg+0x50>)
 8008b7a:	f003 f9af 	bl	800bedc <HAL_I2C_Mem_Write>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <BSP_I2C1_WriteReg+0x44>
                       (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                       (uint8_t *)pData, len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008b88:	697b      	ldr	r3, [r7, #20]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000674 	.word	0x20000674

08008b98 <BSP_I2C1_ReadReg>:
  * @param  DevAddr: Device address on BUS
  * @param  Reg: The target register address to read
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	; 0x28
 8008b9c:	af04      	add	r7, sp, #16
 8008b9e:	60ba      	str	r2, [r7, #8]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	81fb      	strh	r3, [r7, #14]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	81bb      	strh	r3, [r7, #12]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008bae:	f06f 0307 	mvn.w	r3, #7
 8008bb2:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hbusi2c1, DevAddr, (uint16_t)Reg,
 8008bb4:	89ba      	ldrh	r2, [r7, #12]
 8008bb6:	89f9      	ldrh	r1, [r7, #14]
 8008bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bbc:	9302      	str	r3, [sp, #8]
 8008bbe:	88fb      	ldrh	r3, [r7, #6]
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4806      	ldr	r0, [pc, #24]	; (8008be4 <BSP_I2C1_ReadReg+0x4c>)
 8008bca:	f003 fa9b 	bl	800c104 <HAL_I2C_Mem_Read>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <BSP_I2C1_ReadReg+0x40>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008bd8:	697b      	ldr	r3, [r7, #20]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000674 	.word	0x20000674

08008be8 <BSP_I2C3_Init>:
  * @brief  Initialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	607b      	str	r3, [r7, #4]
  
  hbusi2c3.Instance  = I2C3;
 8008bf2:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <BSP_I2C3_Init+0x5c>)
 8008bf4:	4a14      	ldr	r2, [pc, #80]	; (8008c48 <BSP_I2C3_Init+0x60>)
 8008bf6:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 8008bf8:	4812      	ldr	r0, [pc, #72]	; (8008c44 <BSP_I2C3_Init+0x5c>)
 8008bfa:	f003 fb9d 	bl	800c338 <HAL_I2C_GetState>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d119      	bne.n	8008c38 <BSP_I2C3_Init+0x50>
  {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C3_MspInit(&hbusi2c3);
 8008c04:	480f      	ldr	r0, [pc, #60]	; (8008c44 <BSP_I2C3_Init+0x5c>)
 8008c06:	f000 fb5f 	bl	80092c8 <I2C3_MspInit>
        }
      }
    #endif

    /* Init the I2C */
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 8008c0a:	480e      	ldr	r0, [pc, #56]	; (8008c44 <BSP_I2C3_Init+0x5c>)
 8008c0c:	f000 fb18 	bl	8009240 <MX_I2C3_Init>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <BSP_I2C3_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008c16:	f06f 0307 	mvn.w	r3, #7
 8008c1a:	607b      	str	r3, [r7, #4]
 8008c1c:	e00c      	b.n	8008c38 <BSP_I2C3_Init+0x50>
    }
    else if(HAL_I2CEx_ConfigAnalogFilter(&hbusi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8008c1e:	2100      	movs	r1, #0
 8008c20:	4808      	ldr	r0, [pc, #32]	; (8008c44 <BSP_I2C3_Init+0x5c>)
 8008c22:	f003 fe3d 	bl	800c8a0 <HAL_I2CEx_ConfigAnalogFilter>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <BSP_I2C3_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008c2c:	f06f 0307 	mvn.w	r3, #7
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e001      	b.n	8008c38 <BSP_I2C3_Init+0x50>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	607b      	str	r3, [r7, #4]
    }	
  }

  return ret;
 8008c38:	687b      	ldr	r3, [r7, #4]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	200006c0 	.word	0x200006c0
 8008c48:	40005c00 	.word	0x40005c00

08008c4c <BSP_I2C3_DeInit>:
  * @brief  DeInitialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_DeInit(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008c52:	f06f 0307 	mvn.w	r3, #7
 8008c56:	607b      	str	r3, [r7, #4]
  
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    /* DeInit the I2C */ 
    I2C3_MspDeInit(&hbusi2c3);
 8008c58:	4807      	ldr	r0, [pc, #28]	; (8008c78 <BSP_I2C3_DeInit+0x2c>)
 8008c5a:	f000 fb79 	bl	8009350 <I2C3_MspDeInit>
  #endif  
  
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 8008c5e:	4806      	ldr	r0, [pc, #24]	; (8008c78 <BSP_I2C3_DeInit+0x2c>)
 8008c60:	f003 f8f9 	bl	800be56 <HAL_I2C_DeInit>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <BSP_I2C3_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8008c6e:	687b      	ldr	r3, [r7, #4]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	200006c0 	.word	0x200006c0

08008c7c <BSP_I2C3_WriteReg>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	; 0x28
 8008c80:	af04      	add	r7, sp, #16
 8008c82:	60ba      	str	r2, [r7, #8]
 8008c84:	461a      	mov	r2, r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	81fb      	strh	r3, [r7, #14]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	81bb      	strh	r3, [r7, #12]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008c92:	f06f 0307 	mvn.w	r3, #7
 8008c96:	617b      	str	r3, [r7, #20]

  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 8008c98:	89fb      	ldrh	r3, [r7, #14]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	b299      	uxth	r1, r3
 8008c9e:	89ba      	ldrh	r2, [r7, #12]
 8008ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ca4:	9302      	str	r3, [sp, #8]
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4806      	ldr	r0, [pc, #24]	; (8008ccc <BSP_I2C3_WriteReg+0x50>)
 8008cb2:	f003 f913 	bl	800bedc <HAL_I2C_Mem_Write>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <BSP_I2C3_WriteReg+0x44>
                       (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                       (uint8_t *)pData, len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008cc0:	697b      	ldr	r3, [r7, #20]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	200006c0 	.word	0x200006c0

08008cd0 <BSP_I2C3_ReadReg>:
  * @param  DevAddr: Device address on BUS
  * @param  Reg: The target register address to read
  * @retval BSP status
  */
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	; 0x28
 8008cd4:	af04      	add	r7, sp, #16
 8008cd6:	60ba      	str	r2, [r7, #8]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	81fb      	strh	r3, [r7, #14]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	81bb      	strh	r3, [r7, #12]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008ce6:	f06f 0307 	mvn.w	r3, #7
 8008cea:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 8008cec:	89ba      	ldrh	r2, [r7, #12]
 8008cee:	89f9      	ldrh	r1, [r7, #14]
 8008cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cf4:	9302      	str	r3, [sp, #8]
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4806      	ldr	r0, [pc, #24]	; (8008d1c <BSP_I2C3_ReadReg+0x4c>)
 8008d02:	f003 f9ff 	bl	800c104 <HAL_I2C_Mem_Read>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <BSP_I2C3_ReadReg+0x40>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008d10:	697b      	ldr	r3, [r7, #20]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200006c0 	.word	0x200006c0

08008d20 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	607b      	str	r3, [r7, #4]
  
  hbusspi1.Instance  = SPI1;
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <BSP_SPI1_Init+0x40>)
 8008d2c:	4a0d      	ldr	r2, [pc, #52]	; (8008d64 <BSP_SPI1_Init+0x44>)
 8008d2e:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8008d30:	480b      	ldr	r0, [pc, #44]	; (8008d60 <BSP_SPI1_Init+0x40>)
 8008d32:	f007 fd50 	bl	80107d6 <HAL_SPI_GetState>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10b      	bne.n	8008d54 <BSP_SPI1_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbusspi1);
 8008d3c:	4808      	ldr	r0, [pc, #32]	; (8008d60 <BSP_SPI1_Init+0x40>)
 8008d3e:	f000 f905 	bl	8008f4c <SPI1_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8008d42:	4807      	ldr	r0, [pc, #28]	; (8008d60 <BSP_SPI1_Init+0x40>)
 8008d44:	f000 f8c0 	bl	8008ec8 <MX_SPI1_Init>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <BSP_SPI1_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008d4e:	f06f 0307 	mvn.w	r3, #7
 8008d52:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8008d54:	687b      	ldr	r3, [r7, #4]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	2000070c 	.word	0x2000070c
 8008d64:	40013000 	.word	0x40013000

08008d68 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008d6e:	f06f 0307 	mvn.w	r3, #7
 8008d72:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI1_MspDeInit(&hbusspi1);
 8008d74:	4807      	ldr	r0, [pc, #28]	; (8008d94 <BSP_SPI1_DeInit+0x2c>)
 8008d76:	f000 f91f 	bl	8008fb8 <SPI1_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi1) == HAL_OK) {
 8008d7a:	4806      	ldr	r0, [pc, #24]	; (8008d94 <BSP_SPI1_DeInit+0x2c>)
 8008d7c:	f006 fe92 	bl	800faa4 <HAL_SPI_DeInit>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <BSP_SPI1_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8008d8a:	687b      	ldr	r3, [r7, #4]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	2000070c 	.word	0x2000070c

08008d98 <BSP_SPI1_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t len)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008da4:	f06f 0305 	mvn.w	r3, #5
 8008da8:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi1, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8008daa:	887a      	ldrh	r2, [r7, #2]
 8008dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4806      	ldr	r0, [pc, #24]	; (8008dcc <BSP_SPI1_Send+0x34>)
 8008db4:	f006 feb2 	bl	800fb1c <HAL_SPI_Transmit>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <BSP_SPI1_Send+0x2a>
  {
      ret = len;
 8008dbe:	887b      	ldrh	r3, [r7, #2]
 8008dc0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	2000070c 	.word	0x2000070c

08008dd0 <BSP_SPI1_Recv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t len)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008ddc:	f06f 0305 	mvn.w	r3, #5
 8008de0:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Receive(&hbusspi1, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8008de2:	887a      	ldrh	r2, [r7, #2]
 8008de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4806      	ldr	r0, [pc, #24]	; (8008e04 <BSP_SPI1_Recv+0x34>)
 8008dec:	f007 f826 	bl	800fe3c <HAL_SPI_Receive>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <BSP_SPI1_Recv+0x2a>
  {
      ret = len;
 8008df6:	887b      	ldrh	r3, [r7, #2]
 8008df8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	2000070c 	.word	0x2000070c

08008e08 <BSP_SPI3_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
  
  hbusspi3.Instance  = SPI3;
 8008e12:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <BSP_SPI3_Init+0x40>)
 8008e14:	4a0d      	ldr	r2, [pc, #52]	; (8008e4c <BSP_SPI3_Init+0x44>)
 8008e16:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8008e18:	480b      	ldr	r0, [pc, #44]	; (8008e48 <BSP_SPI3_Init+0x40>)
 8008e1a:	f007 fcdc 	bl	80107d6 <HAL_SPI_GetState>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10b      	bne.n	8008e3c <BSP_SPI3_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI3_MspInit(&hbusspi3);
 8008e24:	4808      	ldr	r0, [pc, #32]	; (8008e48 <BSP_SPI3_Init+0x40>)
 8008e26:	f000 f933 	bl	8009090 <SPI3_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI3_Init(&hbusspi3) != HAL_OK)
 8008e2a:	4807      	ldr	r0, [pc, #28]	; (8008e48 <BSP_SPI3_Init+0x40>)
 8008e2c:	f000 f8dc 	bl	8008fe8 <MX_SPI3_Init>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <BSP_SPI3_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008e36:	f06f 0307 	mvn.w	r3, #7
 8008e3a:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8008e3c:	687b      	ldr	r3, [r7, #4]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200007d4 	.word	0x200007d4
 8008e4c:	40003c00 	.word	0x40003c00

08008e50 <BSP_SPI3_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI3_DeInit(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8008e56:	f06f 0307 	mvn.w	r3, #7
 8008e5a:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI3_MspDeInit(&hbusspi3);
 8008e5c:	4807      	ldr	r0, [pc, #28]	; (8008e7c <BSP_SPI3_DeInit+0x2c>)
 8008e5e:	f000 f94b 	bl	80090f8 <SPI3_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi3) == HAL_OK) {
 8008e62:	4806      	ldr	r0, [pc, #24]	; (8008e7c <BSP_SPI3_DeInit+0x2c>)
 8008e64:	f006 fe1e 	bl	800faa4 <HAL_SPI_DeInit>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <BSP_SPI3_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8008e72:	687b      	ldr	r3, [r7, #4]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	200007d4 	.word	0x200007d4

08008e80 <BSP_SPI3_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_Send(uint8_t *pData, uint16_t len)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008e8c:	f06f 0305 	mvn.w	r3, #5
 8008e90:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8008e92:	887a      	ldrh	r2, [r7, #2]
 8008e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	4806      	ldr	r0, [pc, #24]	; (8008eb4 <BSP_SPI3_Send+0x34>)
 8008e9c:	f006 fe3e 	bl	800fb1c <HAL_SPI_Transmit>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <BSP_SPI3_Send+0x2a>
  {
      ret = len;
 8008ea6:	887b      	ldrh	r3, [r7, #2]
 8008ea8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	200007d4 	.word	0x200007d4

08008eb8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008ebc:	f002 fb14 	bl	800b4e8 <HAL_GetTick>
 8008ec0:	4603      	mov	r3, r0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <MX_SPI1_Init>:

/* SPI1 init function */ 
__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1c      	ldr	r2, [pc, #112]	; (8008f48 <MX_SPI1_Init+0x80>)
 8008ed8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ee0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008eee:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f02:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2218      	movs	r2, #24
 8008f08:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2207      	movs	r2, #7
 8008f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f006 fcec 	bl	800f90c <HAL_SPI_Init>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40013000 	.word	0x40013000

08008f4c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8008f54:	4b16      	ldr	r3, [pc, #88]	; (8008fb0 <SPI1_MspInit+0x64>)
 8008f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f58:	4a15      	ldr	r2, [pc, #84]	; (8008fb0 <SPI1_MspInit+0x64>)
 8008f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f5e:	6613      	str	r3, [r2, #96]	; 0x60
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <SPI1_MspInit+0x64>)
 8008f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	693b      	ldr	r3, [r7, #16]
  /**SPI1 GPIO Configuration    
  PE13     ------> SPI1_SCK
  PE15     ------> SPI1_MOSI
  PE14     ------> SPI1_MISO 
  */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <SPI1_MspInit+0x64>)
 8008f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f70:	4a0f      	ldr	r2, [pc, #60]	; (8008fb0 <SPI1_MspInit+0x64>)
 8008f72:	f043 0310 	orr.w	r3, r3, #16
 8008f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <SPI1_MspInit+0x64>)
 8008f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 8008f84:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8008f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f92:	2303      	movs	r3, #3
 8008f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008f96:	2305      	movs	r3, #5
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008f9a:	f107 0314 	add.w	r3, r7, #20
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4804      	ldr	r0, [pc, #16]	; (8008fb4 <SPI1_MspInit+0x68>)
 8008fa2:	f002 fbe3 	bl	800b76c <HAL_GPIO_Init>
}
 8008fa6:	bf00      	nop
 8008fa8:	3728      	adds	r7, #40	; 0x28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40021000 	.word	0x40021000
 8008fb4:	48001000 	.word	0x48001000

08008fb8 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Peripheral clock disable */
  __HAL_RCC_SPI1_CLK_DISABLE();
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <SPI1_MspDeInit+0x28>)
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc4:	4a06      	ldr	r2, [pc, #24]	; (8008fe0 <SPI1_MspDeInit+0x28>)
 8008fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fca:	6613      	str	r3, [r2, #96]	; 0x60
  /**SPI1 GPIO Configuration    
  PE13     ------> SPI1_SCK
  PE15     ------> SPI1_MOSI
  PE14     ------> SPI1_MISO 
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14);
 8008fcc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8008fd0:	4804      	ldr	r0, [pc, #16]	; (8008fe4 <SPI1_MspDeInit+0x2c>)
 8008fd2:	f002 fd5d 	bl	800ba90 <HAL_GPIO_DeInit>
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	48001000 	.word	0x48001000

08008fe8 <MX_SPI3_Init>:

}

/* SPI3 init function */
__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI3;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a25      	ldr	r2, [pc, #148]	; (800908c <MX_SPI3_Init+0xa4>)
 8008ff8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009000:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009008:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009010:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009024:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2238      	movs	r2, #56	; 0x38
 800902a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2207      	movs	r2, #7
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f006 fc5b 	bl	800f90c <HAL_SPI_Init>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_SPI3_Init+0x78>
  {
    ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
  }

  SPI_1LINE_TX(hspi);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800906e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(hspi);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800907e:	601a      	str	r2, [r3, #0]

  return ret;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40003c00 	.word	0x40003c00

08009090 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	; 0x28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Enable Peripheral clock */
  __HAL_RCC_SPI3_CLK_ENABLE();
 8009098:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <SPI3_MspInit+0x60>)
 800909a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909c:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <SPI3_MspInit+0x60>)
 800909e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090a2:	6593      	str	r3, [r2, #88]	; 0x58
 80090a4:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <SPI3_MspInit+0x60>)
 80090a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	693b      	ldr	r3, [r7, #16]
  
  /**SPI3 GPIO Configuration    
  PB3     ------> SPI3_SCK
  PB5     ------> SPI3_MOSI
  */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80090b0:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <SPI3_MspInit+0x60>)
 80090b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090b4:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <SPI3_MspInit+0x60>)
 80090b6:	f043 0302 	orr.w	r3, r3, #2
 80090ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <SPI3_MspInit+0x60>)
 80090be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80090c8:	2328      	movs	r3, #40	; 0x28
 80090ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090cc:	2302      	movs	r3, #2
 80090ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090d4:	2303      	movs	r3, #3
 80090d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80090d8:	2306      	movs	r3, #6
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090dc:	f107 0314 	add.w	r3, r7, #20
 80090e0:	4619      	mov	r1, r3
 80090e2:	4804      	ldr	r0, [pc, #16]	; (80090f4 <SPI3_MspInit+0x64>)
 80090e4:	f002 fb42 	bl	800b76c <HAL_GPIO_Init>
}
 80090e8:	bf00      	nop
 80090ea:	3728      	adds	r7, #40	; 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	40021000 	.word	0x40021000
 80090f4:	48000400 	.word	0x48000400

080090f8 <SPI3_MspDeInit>:

static void SPI3_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __HAL_RCC_SPI3_CLK_DISABLE();
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <SPI3_MspDeInit+0x24>)
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	4a05      	ldr	r2, [pc, #20]	; (800911c <SPI3_MspDeInit+0x24>)
 8009106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800910a:	6593      	str	r3, [r2, #88]	; 0x58
  
  /**SPI3 GPIO Configuration    
  PB3     ------> SPI3_SCK
  PB5     ------> SPI3_MOSI
  */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 800910c:	2128      	movs	r1, #40	; 0x28
 800910e:	4804      	ldr	r0, [pc, #16]	; (8009120 <SPI3_MspDeInit+0x28>)
 8009110:	f002 fcbe 	bl	800ba90 <HAL_GPIO_DeInit>
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	40021000 	.word	0x40021000
 8009120:	48000400 	.word	0x48000400

08009124 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a1c      	ldr	r2, [pc, #112]	; (80091a4 <MX_I2C1_Init+0x80>)
 8009134:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00C0EAFF;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a1b      	ldr	r2, [pc, #108]	; (80091a8 <MX_I2C1_Init+0x84>)
 800913a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f002 fde6 	bl	800bd38 <HAL_I2C_Init>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009176:	2100      	movs	r1, #0
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f003 fb91 	bl	800c8a0 <HAL_I2CEx_ConfigAnalogFilter>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8009188:	2100      	movs	r1, #0
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f003 fbd3 	bl	800c936 <HAL_I2CEx_ConfigDigitalFilter>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	40005400 	.word	0x40005400
 80091a8:	00c0eaff 	.word	0x00c0eaff

080091ac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  
  /**I2C1 GPIO Configuration    
  PB7     ------> I2C1_SDA
  PB6     ------> I2C1_SCL 
  */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091b4:	4b15      	ldr	r3, [pc, #84]	; (800920c <I2C1_MspInit+0x60>)
 80091b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b8:	4a14      	ldr	r2, [pc, #80]	; (800920c <I2C1_MspInit+0x60>)
 80091ba:	f043 0302 	orr.w	r3, r3, #2
 80091be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091c0:	4b12      	ldr	r3, [pc, #72]	; (800920c <I2C1_MspInit+0x60>)
 80091c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80091cc:	23c0      	movs	r3, #192	; 0xc0
 80091ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80091d0:	2312      	movs	r3, #18
 80091d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091d4:	2301      	movs	r3, #1
 80091d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d8:	2303      	movs	r3, #3
 80091da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80091dc:	2304      	movs	r3, #4
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091e0:	f107 0314 	add.w	r3, r7, #20
 80091e4:	4619      	mov	r1, r3
 80091e6:	480a      	ldr	r0, [pc, #40]	; (8009210 <I2C1_MspInit+0x64>)
 80091e8:	f002 fac0 	bl	800b76c <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80091ec:	4b07      	ldr	r3, [pc, #28]	; (800920c <I2C1_MspInit+0x60>)
 80091ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f0:	4a06      	ldr	r2, [pc, #24]	; (800920c <I2C1_MspInit+0x60>)
 80091f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091f6:	6593      	str	r3, [r2, #88]	; 0x58
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <I2C1_MspInit+0x60>)
 80091fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	68fb      	ldr	r3, [r7, #12]
}
 8009204:	bf00      	nop
 8009206:	3728      	adds	r7, #40	; 0x28
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40021000 	.word	0x40021000
 8009210:	48000400 	.word	0x48000400

08009214 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Peripheral clock disable */
  __HAL_RCC_I2C1_CLK_DISABLE();
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <I2C1_MspDeInit+0x24>)
 800921e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009220:	4a05      	ldr	r2, [pc, #20]	; (8009238 <I2C1_MspDeInit+0x24>)
 8009222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009226:	6593      	str	r3, [r2, #88]	; 0x58

  /**I2C1 GPIO Configuration    
  PB7     ------> I2C1_SDA
  PB6     ------> I2C1_SCL 
  */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8009228:	21c0      	movs	r1, #192	; 0xc0
 800922a:	4804      	ldr	r0, [pc, #16]	; (800923c <I2C1_MspDeInit+0x28>)
 800922c:	f002 fc30 	bl	800ba90 <HAL_GPIO_DeInit>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	40021000 	.word	0x40021000
 800923c:	48000400 	.word	0x48000400

08009240 <MX_I2C3_Init>:


/* I2C3 init function */ 

__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef* hi2c)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C3;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a1c      	ldr	r2, [pc, #112]	; (80092c0 <MX_I2C3_Init+0x80>)
 8009250:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00C0EAFF;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1b      	ldr	r2, [pc, #108]	; (80092c4 <MX_I2C3_Init+0x84>)
 8009256:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f002 fd58 	bl	800bd38 <HAL_I2C_Init>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <MX_I2C3_Init+0x52>
  {
    ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009292:	2100      	movs	r1, #0
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f003 fb03 	bl	800c8a0 <HAL_I2CEx_ConfigAnalogFilter>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <MX_I2C3_Init+0x64>
  {
    ret = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f003 fb45 	bl	800c936 <HAL_I2CEx_ConfigDigitalFilter>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <MX_I2C3_Init+0x76>
  {
    ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	40005c00 	.word	0x40005c00
 80092c4:	00c0eaff 	.word	0x00c0eaff

080092c8 <I2C3_MspInit>:

static void I2C3_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL 
    */
  
   /* Enable VddIO2 */
    __HAL_RCC_PWR_CLK_ENABLE();
 80092d0:	4b1d      	ldr	r3, [pc, #116]	; (8009348 <I2C3_MspInit+0x80>)
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	4a1c      	ldr	r2, [pc, #112]	; (8009348 <I2C3_MspInit+0x80>)
 80092d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092da:	6593      	str	r3, [r2, #88]	; 0x58
 80092dc:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <I2C3_MspInit+0x80>)
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80092e8:	f004 fc62 	bl	800dbb0 <HAL_PWREx_EnableVddIO2>
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092ec:	4b16      	ldr	r3, [pc, #88]	; (8009348 <I2C3_MspInit+0x80>)
 80092ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f0:	4a15      	ldr	r2, [pc, #84]	; (8009348 <I2C3_MspInit+0x80>)
 80092f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092f8:	4b13      	ldr	r3, [pc, #76]	; (8009348 <I2C3_MspInit+0x80>)
 80092fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009300:	60fb      	str	r3, [r7, #12]
 8009302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009304:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800930a:	2312      	movs	r3, #18
 800930c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800930e:	2301      	movs	r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009312:	2303      	movs	r3, #3
 8009314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009316:	2304      	movs	r3, #4
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800931a:	f107 0314 	add.w	r3, r7, #20
 800931e:	4619      	mov	r1, r3
 8009320:	480a      	ldr	r0, [pc, #40]	; (800934c <I2C3_MspInit+0x84>)
 8009322:	f002 fa23 	bl	800b76c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009326:	4b08      	ldr	r3, [pc, #32]	; (8009348 <I2C3_MspInit+0x80>)
 8009328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932a:	4a07      	ldr	r2, [pc, #28]	; (8009348 <I2C3_MspInit+0x80>)
 800932c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009330:	6593      	str	r3, [r2, #88]	; 0x58
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <I2C3_MspInit+0x80>)
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933a:	60bb      	str	r3, [r7, #8]
 800933c:	68bb      	ldr	r3, [r7, #8]
}
 800933e:	bf00      	nop
 8009340:	3728      	adds	r7, #40	; 0x28
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	40021000 	.word	0x40021000
 800934c:	48001800 	.word	0x48001800

08009350 <I2C3_MspDeInit>:

static void I2C3_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Peripheral clock disable */
  __HAL_RCC_I2C3_CLK_DISABLE();
 8009358:	4b07      	ldr	r3, [pc, #28]	; (8009378 <I2C3_MspDeInit+0x28>)
 800935a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935c:	4a06      	ldr	r2, [pc, #24]	; (8009378 <I2C3_MspDeInit+0x28>)
 800935e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009362:	6593      	str	r3, [r2, #88]	; 0x58

  /**I2C3 GPIO Configuration    
  PG8     ------> I2C3_SDA
  PG7     ------> I2C3_SCL 
  */
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7|GPIO_PIN_8);
 8009364:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009368:	4804      	ldr	r0, [pc, #16]	; (800937c <I2C3_MspDeInit+0x2c>)
 800936a:	f002 fb91 	bl	800ba90 <HAL_GPIO_DeInit>
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	40021000 	.word	0x40021000
 800937c:	48001800 	.word	0x48001800

08009380 <BSP_ENV_SENSOR_Init>:
  * @brief  Initializes the env sensors
  * @param  Instance Environmental sensor instance
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800938a:	2300      	movs	r3, #0
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800938e:	2301      	movs	r3, #1
 8009390:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d06e      	beq.n	800947a <BSP_ENV_SENSOR_Init+0xfa>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	f200 809d 	bhi.w	80094de <BSP_ENV_SENSOR_Init+0x15e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <BSP_ENV_SENSOR_Init+0x32>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d032      	beq.n	8009416 <BSP_ENV_SENSOR_Init+0x96>
 80093b0:	e095      	b.n	80094de <BSP_ENV_SENSOR_Init+0x15e>
  {
#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80093b2:	6838      	ldr	r0, [r7, #0]
 80093b4:	f000 fa32 	bl	800981c <HTS221_0_Probe>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <BSP_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093c2:	e0cc      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80093c4:	4a68      	ldr	r2, [pc, #416]	; (8009568 <BSP_ENV_SENSOR_Init+0x1e8>)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	4967      	ldr	r1, [pc, #412]	; (800956c <BSP_ENV_SENSOR_Init+0x1ec>)
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80093d6:	f107 0108 	add.w	r1, r7, #8
 80093da:	4610      	mov	r0, r2
 80093dc:	4798      	blx	r3
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <BSP_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80093e4:	f06f 0306 	mvn.w	r3, #6
 80093e8:	e0b9      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 80093ea:	7a3b      	ldrb	r3, [r7, #8]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d103      	bne.n	80093f8 <BSP_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	f043 0301 	orr.w	r3, r3, #1
 80093f6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80093f8:	7abb      	ldrb	r3, [r7, #10]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d103      	bne.n	8009406 <BSP_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	f043 0304 	orr.w	r3, r3, #4
 8009404:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009406:	7a7b      	ldrb	r3, [r7, #9]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d16c      	bne.n	80094e6 <BSP_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	f043 0302 	orr.w	r3, r3, #2
 8009412:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009414:	e067      	b.n	80094e6 <BSP_ENV_SENSOR_Init+0x166>
#endif
   
#if (USE_ENV_SENSOR_LPS22HH_0 == 1)
    case LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009416:	6838      	ldr	r0, [r7, #0]
 8009418:	f000 faaa 	bl	8009970 <LPS22HH_0_Probe>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <BSP_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009426:	e09a      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009428:	4a4f      	ldr	r2, [pc, #316]	; (8009568 <BSP_ENV_SENSOR_Init+0x1e8>)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	494e      	ldr	r1, [pc, #312]	; (800956c <BSP_ENV_SENSOR_Init+0x1ec>)
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800943a:	f107 0108 	add.w	r1, r7, #8
 800943e:	4610      	mov	r0, r2
 8009440:	4798      	blx	r3
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <BSP_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009448:	f06f 0306 	mvn.w	r3, #6
 800944c:	e087      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 800944e:	7a3b      	ldrb	r3, [r7, #8]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d103      	bne.n	800945c <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800945c:	7abb      	ldrb	r3, [r7, #10]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d103      	bne.n	800946a <BSP_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	f043 0304 	orr.w	r3, r3, #4
 8009468:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800946a:	7a7b      	ldrb	r3, [r7, #9]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d13c      	bne.n	80094ea <BSP_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f043 0302 	orr.w	r3, r3, #2
 8009476:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009478:	e037      	b.n	80094ea <BSP_ENV_SENSOR_Init+0x16a>
#endif
      
#if (USE_ENV_SENSOR_STTS751_0 == 1)
    case STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800947a:	6838      	ldr	r0, [r7, #0]
 800947c:	f000 fb24 	bl	8009ac8 <STTS751_0_Probe>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <BSP_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800948a:	e068      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800948c:	4a36      	ldr	r2, [pc, #216]	; (8009568 <BSP_ENV_SENSOR_Init+0x1e8>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	4935      	ldr	r1, [pc, #212]	; (800956c <BSP_ENV_SENSOR_Init+0x1ec>)
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800949e:	f107 0108 	add.w	r1, r7, #8
 80094a2:	4610      	mov	r0, r2
 80094a4:	4798      	blx	r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <BSP_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80094ac:	f06f 0306 	mvn.w	r3, #6
 80094b0:	e055      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 80094b2:	7a3b      	ldrb	r3, [r7, #8]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d103      	bne.n	80094c0 <BSP_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80094c0:	7abb      	ldrb	r3, [r7, #10]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d103      	bne.n	80094ce <BSP_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f043 0304 	orr.w	r3, r3, #4
 80094cc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80094ce:	7a7b      	ldrb	r3, [r7, #9]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d10c      	bne.n	80094ee <BSP_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f043 0302 	orr.w	r3, r3, #2
 80094da:	61bb      	str	r3, [r7, #24]
      }
      break;
 80094dc:	e007      	b.n	80094ee <BSP_ENV_SENSOR_Init+0x16e>
#endif      
      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80094de:	f06f 0301 	mvn.w	r3, #1
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80094e4:	e004      	b.n	80094f0 <BSP_ENV_SENSOR_Init+0x170>
      break;
 80094e6:	bf00      	nop
 80094e8:	e002      	b.n	80094f0 <BSP_ENV_SENSOR_Init+0x170>
      break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <BSP_ENV_SENSOR_Init+0x170>
      break;
 80094ee:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <BSP_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	e031      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	e02a      	b.n	8009556 <BSP_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	4013      	ands	r3, r2
 8009506:	6a3a      	ldr	r2, [r7, #32]
 8009508:	429a      	cmp	r2, r3
 800950a:	d11e      	bne.n	800954a <BSP_ENV_SENSOR_Init+0x1ca>
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	4013      	ands	r3, r2
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	429a      	cmp	r2, r3
 8009516:	d118      	bne.n	800954a <BSP_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009518:	4a15      	ldr	r2, [pc, #84]	; (8009570 <BSP_ENV_SENSOR_Init+0x1f0>)
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009520:	4814      	ldr	r0, [pc, #80]	; (8009574 <BSP_ENV_SENSOR_Init+0x1f4>)
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	4613      	mov	r3, r2
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	4413      	add	r3, r2
 800952a:	440b      	add	r3, r1
 800952c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	490e      	ldr	r1, [pc, #56]	; (800956c <BSP_ENV_SENSOR_Init+0x1ec>)
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800953a:	4610      	mov	r0, r2
 800953c:	4798      	blx	r3
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <BSP_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009544:	f06f 0304 	mvn.w	r3, #4
 8009548:	e009      	b.n	800955e <BSP_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	61fb      	str	r3, [r7, #28]
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d9d1      	bls.n	8009500 <BSP_ENV_SENSOR_Init+0x180>
  }

  return ret;
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800955e:	4618      	mov	r0, r3
 8009560:	3728      	adds	r7, #40	; 0x28
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20000868 	.word	0x20000868
 800956c:	20000838 	.word	0x20000838
 8009570:	20000198 	.word	0x20000198
 8009574:	20000844 	.word	0x20000844

08009578 <BSP_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d903      	bls.n	8009590 <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009588:	f06f 0301 	mvn.w	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e028      	b.n	80095e2 <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009590:	4a16      	ldr	r2, [pc, #88]	; (80095ec <BSP_ENV_SENSOR_Enable+0x74>)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	4013      	ands	r3, r2
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d11c      	bne.n	80095dc <BSP_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80095a2:	4a13      	ldr	r2, [pc, #76]	; (80095f0 <BSP_ENV_SENSOR_Enable+0x78>)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80095aa:	4812      	ldr	r0, [pc, #72]	; (80095f4 <BSP_ENV_SENSOR_Enable+0x7c>)
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	4613      	mov	r3, r2
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	4413      	add	r3, r2
 80095b4:	440b      	add	r3, r1
 80095b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	490e      	ldr	r1, [pc, #56]	; (80095f8 <BSP_ENV_SENSOR_Enable+0x80>)
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80095c4:	4610      	mov	r0, r2
 80095c6:	4798      	blx	r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80095ce:	f06f 0304 	mvn.w	r3, #4
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e005      	b.n	80095e2 <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e002      	b.n	80095e2 <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80095dc:	f06f 0301 	mvn.w	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80095e2:	68fb      	ldr	r3, [r7, #12]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20000874 	.word	0x20000874
 80095f0:	20000198 	.word	0x20000198
 80095f4:	20000844 	.word	0x20000844
 80095f8:	20000838 	.word	0x20000838

080095fc <BSP_ENV_SENSOR_Disable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d903      	bls.n	8009614 <BSP_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800960c:	f06f 0301 	mvn.w	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e028      	b.n	8009666 <BSP_ENV_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009614:	4a16      	ldr	r2, [pc, #88]	; (8009670 <BSP_ENV_SENSOR_Disable+0x74>)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	4013      	ands	r3, r2
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d11c      	bne.n	8009660 <BSP_ENV_SENSOR_Disable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009626:	4a13      	ldr	r2, [pc, #76]	; (8009674 <BSP_ENV_SENSOR_Disable+0x78>)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800962e:	4812      	ldr	r0, [pc, #72]	; (8009678 <BSP_ENV_SENSOR_Disable+0x7c>)
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	4613      	mov	r3, r2
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	4413      	add	r3, r2
 8009638:	440b      	add	r3, r1
 800963a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	490e      	ldr	r1, [pc, #56]	; (800967c <BSP_ENV_SENSOR_Disable+0x80>)
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009648:	4610      	mov	r0, r2
 800964a:	4798      	blx	r3
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <BSP_ENV_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009652:	f06f 0304 	mvn.w	r3, #4
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e005      	b.n	8009666 <BSP_ENV_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	e002      	b.n	8009666 <BSP_ENV_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009660:	f06f 0301 	mvn.w	r3, #1
 8009664:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009666:	68fb      	ldr	r3, [r7, #12]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000874 	.word	0x20000874
 8009674:	20000198 	.word	0x20000198
 8009678:	20000844 	.word	0x20000844
 800967c:	20000838 	.word	0x20000838

08009680 <BSP_ENV_SENSOR_GetOutputDataRate>:
 *         - ENV_HUMIDITY
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d903      	bls.n	800969a <BSP_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009692:	f06f 0301 	mvn.w	r3, #1
 8009696:	617b      	str	r3, [r7, #20]
 8009698:	e029      	b.n	80096ee <BSP_ENV_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <BSP_ENV_SENSOR_GetOutputDataRate+0x78>)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4013      	ands	r3, r2
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d11d      	bne.n	80096e8 <BSP_ENV_SENSOR_GetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80096ac:	4a13      	ldr	r2, [pc, #76]	; (80096fc <BSP_ENV_SENSOR_GetOutputDataRate+0x7c>)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096b4:	4812      	ldr	r0, [pc, #72]	; (8009700 <BSP_ENV_SENSOR_GetOutputDataRate+0x80>)
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4613      	mov	r3, r2
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	4413      	add	r3, r2
 80096be:	440b      	add	r3, r1
 80096c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	490f      	ldr	r1, [pc, #60]	; (8009704 <BSP_ENV_SENSOR_GetOutputDataRate+0x84>)
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <BSP_ENV_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80096da:	f06f 0304 	mvn.w	r3, #4
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	e005      	b.n	80096ee <BSP_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	e002      	b.n	80096ee <BSP_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80096e8:	f06f 0301 	mvn.w	r3, #1
 80096ec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80096ee:	697b      	ldr	r3, [r7, #20]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000874 	.word	0x20000874
 80096fc:	20000198 	.word	0x20000198
 8009700:	20000844 	.word	0x20000844
 8009704:	20000838 	.word	0x20000838

08009708 <BSP_ENV_SENSOR_SetOutputDataRate>:
 *         - ENV_HUMIDITY
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d903      	bls.n	8009724 <BSP_ENV_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800971c:	f06f 0301 	mvn.w	r3, #1
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	e02a      	b.n	800977a <BSP_ENV_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009724:	4a17      	ldr	r2, [pc, #92]	; (8009784 <BSP_ENV_SENSOR_SetOutputDataRate+0x7c>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4013      	ands	r3, r2
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	d11e      	bne.n	8009774 <BSP_ENV_SENSOR_SetOutputDataRate+0x6c>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009736:	4a14      	ldr	r2, [pc, #80]	; (8009788 <BSP_ENV_SENSOR_SetOutputDataRate+0x80>)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800973e:	4813      	ldr	r0, [pc, #76]	; (800978c <BSP_ENV_SENSOR_SetOutputDataRate+0x84>)
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4613      	mov	r3, r2
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	4413      	add	r3, r2
 8009748:	440b      	add	r3, r1
 800974a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	490f      	ldr	r1, [pc, #60]	; (8009790 <BSP_ENV_SENSOR_SetOutputDataRate+0x88>)
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009758:	ed97 0a01 	vldr	s0, [r7, #4]
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <BSP_ENV_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009766:	f06f 0304 	mvn.w	r3, #4
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	e005      	b.n	800977a <BSP_ENV_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	e002      	b.n	800977a <BSP_ENV_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009774:	f06f 0301 	mvn.w	r3, #1
 8009778:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800977a:	697b      	ldr	r3, [r7, #20]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20000874 	.word	0x20000874
 8009788:	20000198 	.word	0x20000198
 800978c:	20000844 	.word	0x20000844
 8009790:	20000838 	.word	0x20000838

08009794 <BSP_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d903      	bls.n	80097ae <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80097a6:	f06f 0301 	mvn.w	r3, #1
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e029      	b.n	8009802 <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80097ae:	4a17      	ldr	r2, [pc, #92]	; (800980c <BSP_ENV_SENSOR_GetValue+0x78>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4013      	ands	r3, r2
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d11d      	bne.n	80097fc <BSP_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80097c0:	4a13      	ldr	r2, [pc, #76]	; (8009810 <BSP_ENV_SENSOR_GetValue+0x7c>)
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097c8:	4812      	ldr	r0, [pc, #72]	; (8009814 <BSP_ENV_SENSOR_GetValue+0x80>)
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4613      	mov	r3, r2
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	4413      	add	r3, r2
 80097d2:	440b      	add	r3, r1
 80097d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	490f      	ldr	r1, [pc, #60]	; (8009818 <BSP_ENV_SENSOR_GetValue+0x84>)
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80097ee:	f06f 0304 	mvn.w	r3, #4
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	e005      	b.n	8009802 <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	e002      	b.n	8009802 <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80097fc:	f06f 0301 	mvn.w	r3, #1
 8009800:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009802:	697b      	ldr	r3, [r7, #20]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20000874 	.word	0x20000874
 8009810:	20000198 	.word	0x20000198
 8009814:	20000844 	.word	0x20000844
 8009818:	20000838 	.word	0x20000838

0800981c <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b090      	sub	sp, #64	; 0x40
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8009828:	2300      	movs	r3, #0
 800982a:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800982c:	23bf      	movs	r3, #191	; 0xbf
 800982e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_I2C1_Init;
 8009832:	4b41      	ldr	r3, [pc, #260]	; (8009938 <HTS221_0_Probe+0x11c>)
 8009834:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_I2C1_DeInit;
 8009836:	4b41      	ldr	r3, [pc, #260]	; (800993c <HTS221_0_Probe+0x120>)
 8009838:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_I2C1_ReadReg;
 800983a:	4b41      	ldr	r3, [pc, #260]	; (8009940 <HTS221_0_Probe+0x124>)
 800983c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_I2C1_WriteReg;
 800983e:	4b41      	ldr	r3, [pc, #260]	; (8009944 <HTS221_0_Probe+0x128>)
 8009840:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 8009842:	4b41      	ldr	r3, [pc, #260]	; (8009948 <HTS221_0_Probe+0x12c>)
 8009844:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8009846:	f107 031c 	add.w	r3, r7, #28
 800984a:	4619      	mov	r1, r3
 800984c:	483f      	ldr	r0, [pc, #252]	; (800994c <HTS221_0_Probe+0x130>)
 800984e:	f7f7 fb41 	bl	8000ed4 <HTS221_RegisterBusIO>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009858:	f06f 0306 	mvn.w	r3, #6
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800985e:	e065      	b.n	800992c <HTS221_0_Probe+0x110>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8009860:	f107 031b 	add.w	r3, r7, #27
 8009864:	4619      	mov	r1, r3
 8009866:	4839      	ldr	r0, [pc, #228]	; (800994c <HTS221_0_Probe+0x130>)
 8009868:	f7f7 fbbd 	bl	8000fe6 <HTS221_ReadID>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009872:	f06f 0306 	mvn.w	r3, #6
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009878:	e058      	b.n	800992c <HTS221_0_Probe+0x110>
  }
  else if (id != HTS221_ID)
 800987a:	7efb      	ldrb	r3, [r7, #27]
 800987c:	2bbc      	cmp	r3, #188	; 0xbc
 800987e:	d003      	beq.n	8009888 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009880:	f06f 0306 	mvn.w	r3, #6
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009886:	e051      	b.n	800992c <HTS221_0_Probe+0x110>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8009888:	f107 0308 	add.w	r3, r7, #8
 800988c:	4619      	mov	r1, r3
 800988e:	482f      	ldr	r0, [pc, #188]	; (800994c <HTS221_0_Probe+0x130>)
 8009890:	f7f7 fbc0 	bl	8001014 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009894:	7a3b      	ldrb	r3, [r7, #8]
 8009896:	461a      	mov	r2, r3
 8009898:	7a7b      	ldrb	r3, [r7, #9]
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 800989e:	7abb      	ldrb	r3, [r7, #10]
 80098a0:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80098a2:	4313      	orrs	r3, r2
 80098a4:	4a2a      	ldr	r2, [pc, #168]	; (8009950 <HTS221_0_Probe+0x134>)
 80098a6:	6013      	str	r3, [r2, #0]

    EnvCompObj[HTS221_0] = &hts221_obj_0;
 80098a8:	4b2a      	ldr	r3, [pc, #168]	; (8009954 <HTS221_0_Probe+0x138>)
 80098aa:	4a28      	ldr	r2, [pc, #160]	; (800994c <HTS221_0_Probe+0x130>)
 80098ac:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80098ae:	4b2a      	ldr	r3, [pc, #168]	; (8009958 <HTS221_0_Probe+0x13c>)
 80098b0:	4a2a      	ldr	r2, [pc, #168]	; (800995c <HTS221_0_Probe+0x140>)
 80098b2:	601a      	str	r2, [r3, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d018      	beq.n	80098f0 <HTS221_0_Probe+0xd4>
 80098be:	7a3b      	ldrb	r3, [r7, #8]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d115      	bne.n	80098f0 <HTS221_0_Probe+0xd4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80098c4:	4b26      	ldr	r3, [pc, #152]	; (8009960 <HTS221_0_Probe+0x144>)
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4a26      	ldr	r2, [pc, #152]	; (8009964 <HTS221_0_Probe+0x148>)
 80098ca:	4927      	ldr	r1, [pc, #156]	; (8009968 <HTS221_0_Probe+0x14c>)
 80098cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80098d0:	4b21      	ldr	r3, [pc, #132]	; (8009958 <HTS221_0_Probe+0x13c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1f      	ldr	r2, [pc, #124]	; (8009954 <HTS221_0_Probe+0x138>)
 80098d8:	6812      	ldr	r2, [r2, #0]
 80098da:	4610      	mov	r0, r2
 80098dc:	4798      	blx	r3
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <HTS221_0_Probe+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098e4:	f06f 0304 	mvn.w	r3, #4
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ea:	e001      	b.n	80098f0 <HTS221_0_Probe+0xd4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80098ec:	2300      	movs	r3, #0
 80098ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d018      	beq.n	800992c <HTS221_0_Probe+0x110>
 80098fa:	7abb      	ldrb	r3, [r7, #10]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d115      	bne.n	800992c <HTS221_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009900:	4b17      	ldr	r3, [pc, #92]	; (8009960 <HTS221_0_Probe+0x144>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	4a17      	ldr	r2, [pc, #92]	; (8009964 <HTS221_0_Probe+0x148>)
 8009906:	4919      	ldr	r1, [pc, #100]	; (800996c <HTS221_0_Probe+0x150>)
 8009908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 800990c:	4b12      	ldr	r3, [pc, #72]	; (8009958 <HTS221_0_Probe+0x13c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a10      	ldr	r2, [pc, #64]	; (8009954 <HTS221_0_Probe+0x138>)
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	4610      	mov	r0, r2
 8009918:	4798      	blx	r3
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <HTS221_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009920:	f06f 0304 	mvn.w	r3, #4
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009926:	e001      	b.n	800992c <HTS221_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009928:	2300      	movs	r3, #0
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 800992c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800992e:	4618      	mov	r0, r3
 8009930:	3740      	adds	r7, #64	; 0x40
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	08008ab1 	.word	0x08008ab1
 800993c:	08008b15 	.word	0x08008b15
 8009940:	08008b99 	.word	0x08008b99
 8009944:	08008b45 	.word	0x08008b45
 8009948:	08008eb9 	.word	0x08008eb9
 800994c:	20000880 	.word	0x20000880
 8009950:	20000874 	.word	0x20000874
 8009954:	20000838 	.word	0x20000838
 8009958:	20000868 	.word	0x20000868
 800995c:	20000000 	.word	0x20000000
 8009960:	20000198 	.word	0x20000198
 8009964:	20000844 	.word	0x20000844
 8009968:	20000024 	.word	0x20000024
 800996c:	20000010 	.word	0x20000010

08009970 <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b090      	sub	sp, #64	; 0x40
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009978:	2300      	movs	r3, #0
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800997c:	2300      	movs	r3, #0
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8009980:	23bb      	movs	r3, #187	; 0xbb
 8009982:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_I2C1_Init;
 8009986:	4b42      	ldr	r3, [pc, #264]	; (8009a90 <LPS22HH_0_Probe+0x120>)
 8009988:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_I2C1_DeInit;
 800998a:	4b42      	ldr	r3, [pc, #264]	; (8009a94 <LPS22HH_0_Probe+0x124>)
 800998c:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_I2C1_ReadReg;
 800998e:	4b42      	ldr	r3, [pc, #264]	; (8009a98 <LPS22HH_0_Probe+0x128>)
 8009990:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_I2C1_WriteReg;
 8009992:	4b42      	ldr	r3, [pc, #264]	; (8009a9c <LPS22HH_0_Probe+0x12c>)
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 8009996:	4b42      	ldr	r3, [pc, #264]	; (8009aa0 <LPS22HH_0_Probe+0x130>)
 8009998:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != HTS221_OK)
 800999a:	f107 031c 	add.w	r3, r7, #28
 800999e:	4619      	mov	r1, r3
 80099a0:	4840      	ldr	r0, [pc, #256]	; (8009aa4 <LPS22HH_0_Probe+0x134>)
 80099a2:	f7fb f929 	bl	8004bf8 <LPS22HH_RegisterBusIO>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099ac:	f06f 0306 	mvn.w	r3, #6
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b2:	e067      	b.n	8009a84 <LPS22HH_0_Probe+0x114>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != HTS221_OK)
 80099b4:	f107 031b 	add.w	r3, r7, #27
 80099b8:	4619      	mov	r1, r3
 80099ba:	483a      	ldr	r0, [pc, #232]	; (8009aa4 <LPS22HH_0_Probe+0x134>)
 80099bc:	f7fb f9c5 	bl	8004d4a <LPS22HH_ReadID>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099c6:	f06f 0306 	mvn.w	r3, #6
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099cc:	e05a      	b.n	8009a84 <LPS22HH_0_Probe+0x114>
  }
  else if (id != LPS22HH_ID)
 80099ce:	7efb      	ldrb	r3, [r7, #27]
 80099d0:	2bb3      	cmp	r3, #179	; 0xb3
 80099d2:	d003      	beq.n	80099dc <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099d4:	f06f 0306 	mvn.w	r3, #6
 80099d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099da:	e053      	b.n	8009a84 <LPS22HH_0_Probe+0x114>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	4619      	mov	r1, r3
 80099e2:	4830      	ldr	r0, [pc, #192]	; (8009aa4 <LPS22HH_0_Probe+0x134>)
 80099e4:	f7fb f9c8 	bl	8004d78 <LPS22HH_GetCapabilities>
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80099e8:	7a3b      	ldrb	r3, [r7, #8]
 80099ea:	461a      	mov	r2, r3
 80099ec:	7a7b      	ldrb	r3, [r7, #9]
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 80099f2:	7abb      	ldrb	r3, [r7, #10]
 80099f4:	009b      	lsls	r3, r3, #2
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80099f6:	4313      	orrs	r3, r2
 80099f8:	4a2b      	ldr	r2, [pc, #172]	; (8009aa8 <LPS22HH_0_Probe+0x138>)
 80099fa:	6053      	str	r3, [r2, #4]

    EnvCompObj[LPS22HH_0] = &lps22hh_obj_0;
 80099fc:	4b2b      	ldr	r3, [pc, #172]	; (8009aac <LPS22HH_0_Probe+0x13c>)
 80099fe:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <LPS22HH_0_Probe+0x134>)
 8009a00:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8009a02:	4b2b      	ldr	r3, [pc, #172]	; (8009ab0 <LPS22HH_0_Probe+0x140>)
 8009a04:	4a2b      	ldr	r2, [pc, #172]	; (8009ab4 <LPS22HH_0_Probe+0x144>)
 8009a06:	605a      	str	r2, [r3, #4]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d019      	beq.n	8009a46 <LPS22HH_0_Probe+0xd6>
 8009a12:	7a3b      	ldrb	r3, [r7, #8]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d116      	bne.n	8009a46 <LPS22HH_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8009a18:	4b27      	ldr	r3, [pc, #156]	; (8009ab8 <LPS22HH_0_Probe+0x148>)
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	4a27      	ldr	r2, [pc, #156]	; (8009abc <LPS22HH_0_Probe+0x14c>)
 8009a1e:	3303      	adds	r3, #3
 8009a20:	4927      	ldr	r1, [pc, #156]	; (8009ac0 <LPS22HH_0_Probe+0x150>)
 8009a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != HTS221_OK)
 8009a26:	4b22      	ldr	r3, [pc, #136]	; (8009ab0 <LPS22HH_0_Probe+0x140>)
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a1f      	ldr	r2, [pc, #124]	; (8009aac <LPS22HH_0_Probe+0x13c>)
 8009a2e:	6852      	ldr	r2, [r2, #4]
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <LPS22HH_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a3a:	f06f 0304 	mvn.w	r3, #4
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a40:	e001      	b.n	8009a46 <LPS22HH_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d019      	beq.n	8009a84 <LPS22HH_0_Probe+0x114>
 8009a50:	7a7b      	ldrb	r3, [r7, #9]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d116      	bne.n	8009a84 <LPS22HH_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8009a56:	4b18      	ldr	r3, [pc, #96]	; (8009ab8 <LPS22HH_0_Probe+0x148>)
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	4a18      	ldr	r2, [pc, #96]	; (8009abc <LPS22HH_0_Probe+0x14c>)
 8009a5c:	3303      	adds	r3, #3
 8009a5e:	4919      	ldr	r1, [pc, #100]	; (8009ac4 <LPS22HH_0_Probe+0x154>)
 8009a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != HTS221_OK)
 8009a64:	4b12      	ldr	r3, [pc, #72]	; (8009ab0 <LPS22HH_0_Probe+0x140>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a10      	ldr	r2, [pc, #64]	; (8009aac <LPS22HH_0_Probe+0x13c>)
 8009a6c:	6852      	ldr	r2, [r2, #4]
 8009a6e:	4610      	mov	r0, r2
 8009a70:	4798      	blx	r3
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <LPS22HH_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a78:	f06f 0304 	mvn.w	r3, #4
 8009a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a7e:	e001      	b.n	8009a84 <LPS22HH_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 8009a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3740      	adds	r7, #64	; 0x40
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	08008ab1 	.word	0x08008ab1
 8009a94:	08008b15 	.word	0x08008b15
 8009a98:	08008b99 	.word	0x08008b99
 8009a9c:	08008b45 	.word	0x08008b45
 8009aa0:	08008eb9 	.word	0x08008eb9
 8009aa4:	200008b4 	.word	0x200008b4
 8009aa8:	20000874 	.word	0x20000874
 8009aac:	20000838 	.word	0x20000838
 8009ab0:	20000868 	.word	0x20000868
 8009ab4:	200000d4 	.word	0x200000d4
 8009ab8:	20000198 	.word	0x20000198
 8009abc:	20000844 	.word	0x20000844
 8009ac0:	200000f8 	.word	0x200000f8
 8009ac4:	200000e4 	.word	0x200000e4

08009ac8 <STTS751_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b090      	sub	sp, #64	; 0x40
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = STTS751_0xxxx_ADD_20K;
 8009ad8:	2371      	movs	r3, #113	; 0x71
 8009ada:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_I2C3_Init;
 8009ade:	4b32      	ldr	r3, [pc, #200]	; (8009ba8 <STTS751_0_Probe+0xe0>)
 8009ae0:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 8009ae2:	4b32      	ldr	r3, [pc, #200]	; (8009bac <STTS751_0_Probe+0xe4>)
 8009ae4:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 8009ae6:	4b32      	ldr	r3, [pc, #200]	; (8009bb0 <STTS751_0_Probe+0xe8>)
 8009ae8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 8009aea:	4b32      	ldr	r3, [pc, #200]	; (8009bb4 <STTS751_0_Probe+0xec>)
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;  
 8009aee:	4b32      	ldr	r3, [pc, #200]	; (8009bb8 <STTS751_0_Probe+0xf0>)
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8009af2:	f107 031c 	add.w	r3, r7, #28
 8009af6:	4619      	mov	r1, r3
 8009af8:	4830      	ldr	r0, [pc, #192]	; (8009bbc <STTS751_0_Probe+0xf4>)
 8009afa:	f7fe f92f 	bl	8007d5c <STTS751_RegisterBusIO>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d003      	beq.n	8009b0c <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b04:	f06f 0306 	mvn.w	r3, #6
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b0a:	e048      	b.n	8009b9e <STTS751_0_Probe+0xd6>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8009b0c:	f107 031b 	add.w	r3, r7, #27
 8009b10:	4619      	mov	r1, r3
 8009b12:	482a      	ldr	r0, [pc, #168]	; (8009bbc <STTS751_0_Probe+0xf4>)
 8009b14:	f7fe f9c1 	bl	8007e9a <STTS751_ReadID>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b1e:	f06f 0306 	mvn.w	r3, #6
 8009b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b24:	e03b      	b.n	8009b9e <STTS751_0_Probe+0xd6>
  }
  else if (id != STTS751_ID_MAN)
 8009b26:	7efb      	ldrb	r3, [r7, #27]
 8009b28:	2b53      	cmp	r3, #83	; 0x53
 8009b2a:	d003      	beq.n	8009b34 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b2c:	f06f 0306 	mvn.w	r3, #6
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b32:	e034      	b.n	8009b9e <STTS751_0_Probe+0xd6>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8009b34:	f107 0308 	add.w	r3, r7, #8
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4820      	ldr	r0, [pc, #128]	; (8009bbc <STTS751_0_Probe+0xf4>)
 8009b3c:	f7fe f9c8 	bl	8007ed0 <STTS751_GetCapabilities>
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009b40:	7a3b      	ldrb	r3, [r7, #8]
 8009b42:	461a      	mov	r2, r3
 8009b44:	7a7b      	ldrb	r3, [r7, #9]
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 8009b4a:	7abb      	ldrb	r3, [r7, #10]
 8009b4c:	009b      	lsls	r3, r3, #2
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	4a1b      	ldr	r2, [pc, #108]	; (8009bc0 <STTS751_0_Probe+0xf8>)
 8009b52:	6093      	str	r3, [r2, #8]

    EnvCompObj[STTS751_0] = &stts751_obj_0;
 8009b54:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <STTS751_0_Probe+0xfc>)
 8009b56:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <STTS751_0_Probe+0xf4>)
 8009b58:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <STTS751_0_Probe+0x100>)
 8009b5c:	4a1b      	ldr	r2, [pc, #108]	; (8009bcc <STTS751_0_Probe+0x104>)
 8009b5e:	609a      	str	r2, [r3, #8]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d019      	beq.n	8009b9e <STTS751_0_Probe+0xd6>
 8009b6a:	7a3b      	ldrb	r3, [r7, #8]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d116      	bne.n	8009b9e <STTS751_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8009b70:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <STTS751_0_Probe+0x108>)
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	4a17      	ldr	r2, [pc, #92]	; (8009bd4 <STTS751_0_Probe+0x10c>)
 8009b76:	3306      	adds	r3, #6
 8009b78:	4917      	ldr	r1, [pc, #92]	; (8009bd8 <STTS751_0_Probe+0x110>)
 8009b7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 8009b7e:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <STTS751_0_Probe+0x100>)
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a0f      	ldr	r2, [pc, #60]	; (8009bc4 <STTS751_0_Probe+0xfc>)
 8009b86:	6892      	ldr	r2, [r2, #8]
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <STTS751_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b92:	f06f 0304 	mvn.w	r3, #4
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b98:	e001      	b.n	8009b9e <STTS751_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3740      	adds	r7, #64	; 0x40
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	08008be9 	.word	0x08008be9
 8009bac:	08008c4d 	.word	0x08008c4d
 8009bb0:	08008cd1 	.word	0x08008cd1
 8009bb4:	08008c7d 	.word	0x08008c7d
 8009bb8:	08008eb9 	.word	0x08008eb9
 8009bbc:	200008e8 	.word	0x200008e8
 8009bc0:	20000874 	.word	0x20000874
 8009bc4:	20000838 	.word	0x20000838
 8009bc8:	20000868 	.word	0x20000868
 8009bcc:	20000164 	.word	0x20000164
 8009bd0:	20000198 	.word	0x20000198
 8009bd4:	20000844 	.word	0x20000844
 8009bd8:	20000174 	.word	0x20000174

08009bdc <BSP_ENV_SENSOR_Get_DRDY_Status>:
 * @param  Function Environmental sensor function
 * @param  Status the pointer to the status
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Get_DRDY_Status(uint32_t Instance, uint32_t Function, uint8_t *Status)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d06d      	beq.n	8009cca <BSP_ENV_SENSOR_Get_DRDY_Status+0xee>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	f200 8085 	bhi.w	8009d00 <BSP_ENV_SENSOR_Get_DRDY_Status+0x124>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d034      	beq.n	8009c66 <BSP_ENV_SENSOR_Get_DRDY_Status+0x8a>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d17e      	bne.n	8009d00 <BSP_ENV_SENSOR_Get_DRDY_Status+0x124>
  {
#if (USE_ENV_SENSOR_LPS22HH_0 == 1)
    case LPS22HH_0:
      if ((Function & ENV_PRESSURE) == ENV_PRESSURE)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d011      	beq.n	8009c30 <BSP_ENV_SENSOR_Get_DRDY_Status+0x54>
      {
        if (LPS22HH_PRESS_Get_DRDY_Status(EnvCompObj[Instance], Status) != BSP_ERROR_NONE)
 8009c0c:	4a41      	ldr	r2, [pc, #260]	; (8009d14 <BSP_ENV_SENSOR_Get_DRDY_Status+0x138>)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fb f97c 	bl	8004f14 <LPS22HH_PRESS_Get_DRDY_Status>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <BSP_ENV_SENSOR_Get_DRDY_Status+0x4e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c22:	f06f 0304 	mvn.w	r3, #4
 8009c26:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 8009c28:	e06e      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
          ret = BSP_ERROR_NONE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	617b      	str	r3, [r7, #20]
      break;
 8009c2e:	e06b      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
      else if ((Function & ENV_TEMPERATURE) == ENV_TEMPERATURE)
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d011      	beq.n	8009c5e <BSP_ENV_SENSOR_Get_DRDY_Status+0x82>
        if (LPS22HH_TEMP_Get_DRDY_Status(EnvCompObj[Instance], Status) != BSP_ERROR_NONE)
 8009c3a:	4a36      	ldr	r2, [pc, #216]	; (8009d14 <BSP_ENV_SENSOR_Get_DRDY_Status+0x138>)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fb fa26 	bl	8005096 <LPS22HH_TEMP_Get_DRDY_Status>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <BSP_ENV_SENSOR_Get_DRDY_Status+0x7c>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c50:	f06f 0304 	mvn.w	r3, #4
 8009c54:	617b      	str	r3, [r7, #20]
      break;
 8009c56:	e057      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
          ret = BSP_ERROR_NONE;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
      break;
 8009c5c:	e054      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c5e:	f06f 0304 	mvn.w	r3, #4
 8009c62:	617b      	str	r3, [r7, #20]
      break;
 8009c64:	e050      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
#endif

#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if ((Function & ENV_HUMIDITY) == ENV_HUMIDITY)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d011      	beq.n	8009c94 <BSP_ENV_SENSOR_Get_DRDY_Status+0xb8>
      {
        if (HTS221_HUM_Get_DRDY_Status(EnvCompObj[Instance], Status) != BSP_ERROR_NONE)
 8009c70:	4a28      	ldr	r2, [pc, #160]	; (8009d14 <BSP_ENV_SENSOR_Get_DRDY_Status+0x138>)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f7 fade 	bl	800123c <HTS221_HUM_Get_DRDY_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <BSP_ENV_SENSOR_Get_DRDY_Status+0xb2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c86:	f06f 0304 	mvn.w	r3, #4
 8009c8a:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 8009c8c:	e03c      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
          ret = BSP_ERROR_NONE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
      break;
 8009c92:	e039      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
      else if ((Function & ENV_TEMPERATURE) == ENV_TEMPERATURE)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d011      	beq.n	8009cc2 <BSP_ENV_SENSOR_Get_DRDY_Status+0xe6>
        if (HTS221_TEMP_Get_DRDY_Status(EnvCompObj[Instance], Status) != BSP_ERROR_NONE)
 8009c9e:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <BSP_ENV_SENSOR_Get_DRDY_Status+0x138>)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7f7 fbaf 	bl	800140c <HTS221_TEMP_Get_DRDY_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <BSP_ENV_SENSOR_Get_DRDY_Status+0xe0>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cb4:	f06f 0304 	mvn.w	r3, #4
 8009cb8:	617b      	str	r3, [r7, #20]
      break;
 8009cba:	e025      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
          ret = BSP_ERROR_NONE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	617b      	str	r3, [r7, #20]
      break;
 8009cc0:	e022      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cc2:	f06f 0304 	mvn.w	r3, #4
 8009cc6:	617b      	str	r3, [r7, #20]
      break;
 8009cc8:	e01e      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
#endif
      
#if (USE_ENV_SENSOR_STTS751_0 == 1)
    case STTS751_0:
      if ((Function & ENV_TEMPERATURE) == ENV_TEMPERATURE)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d011      	beq.n	8009cf8 <BSP_ENV_SENSOR_Get_DRDY_Status+0x11c>
      {
        if (STTS751_TEMP_Get_DRDY_Status(EnvCompObj[Instance], Status) != BSP_ERROR_NONE)
 8009cd4:	4a0f      	ldr	r2, [pc, #60]	; (8009d14 <BSP_ENV_SENSOR_Get_DRDY_Status+0x138>)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fac6 	bl	8008270 <STTS751_TEMP_Get_DRDY_Status>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <BSP_ENV_SENSOR_Get_DRDY_Status+0x116>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cea:	f06f 0304 	mvn.w	r3, #4
 8009cee:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 8009cf0:	e00a      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
          ret = BSP_ERROR_NONE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
      break;
 8009cf6:	e007      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cf8:	f06f 0304 	mvn.w	r3, #4
 8009cfc:	617b      	str	r3, [r7, #20]
      break;
 8009cfe:	e003      	b.n	8009d08 <BSP_ENV_SENSOR_Get_DRDY_Status+0x12c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009d00:	f06f 0301 	mvn.w	r3, #1
 8009d04:	617b      	str	r3, [r7, #20]
      break;
 8009d06:	bf00      	nop
  }

  return ret;
 8009d08:	697b      	ldr	r3, [r7, #20]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000838 	.word	0x20000838

08009d18 <BSP_ENV_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	460b      	mov	r3, r1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d02e      	beq.n	8009d8a <BSP_ENV_SENSOR_Read_Register+0x72>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d83e      	bhi.n	8009db0 <BSP_ENV_SENSOR_Read_Register+0x98>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d015      	beq.n	8009d64 <BSP_ENV_SENSOR_Read_Register+0x4c>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d138      	bne.n	8009db0 <BSP_ENV_SENSOR_Read_Register+0x98>
  {
#if (USE_ENV_SENSOR_LPS22HH_0 == 1)
    case LPS22HH_0:
      if (LPS22HH_Read_Reg(EnvCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8009d3e:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <BSP_ENV_SENSOR_Read_Register+0xac>)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d46:	7af9      	ldrb	r1, [r7, #11]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fb f9b9 	bl	80050c2 <LPS22HH_Read_Reg>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <BSP_ENV_SENSOR_Read_Register+0x46>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d56:	f06f 0304 	mvn.w	r3, #4
 8009d5a:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8009d5c:	e02c      	b.n	8009db8 <BSP_ENV_SENSOR_Read_Register+0xa0>
        ret = BSP_ERROR_NONE;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]
      break;
 8009d62:	e029      	b.n	8009db8 <BSP_ENV_SENSOR_Read_Register+0xa0>
#endif

#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_Read_Reg(EnvCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8009d64:	4a17      	ldr	r2, [pc, #92]	; (8009dc4 <BSP_ENV_SENSOR_Read_Register+0xac>)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d6c:	7af9      	ldrb	r1, [r7, #11]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7f7 fb61 	bl	8001438 <HTS221_Read_Reg>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <BSP_ENV_SENSOR_Read_Register+0x6c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d7c:	f06f 0304 	mvn.w	r3, #4
 8009d80:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8009d82:	e019      	b.n	8009db8 <BSP_ENV_SENSOR_Read_Register+0xa0>
        ret = BSP_ERROR_NONE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
      break;
 8009d88:	e016      	b.n	8009db8 <BSP_ENV_SENSOR_Read_Register+0xa0>
#endif

#if (USE_ENV_SENSOR_STTS751_0 == 1)
    case STTS751_0:
      if (STTS751_Read_Reg(EnvCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8009d8a:	4a0e      	ldr	r2, [pc, #56]	; (8009dc4 <BSP_ENV_SENSOR_Read_Register+0xac>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d92:	7af9      	ldrb	r1, [r7, #11]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fa8c 	bl	80082b4 <STTS751_Read_Reg>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <BSP_ENV_SENSOR_Read_Register+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009da2:	f06f 0304 	mvn.w	r3, #4
 8009da6:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8009da8:	e006      	b.n	8009db8 <BSP_ENV_SENSOR_Read_Register+0xa0>
        ret = BSP_ERROR_NONE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	617b      	str	r3, [r7, #20]
      break;
 8009dae:	e003      	b.n	8009db8 <BSP_ENV_SENSOR_Read_Register+0xa0>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009db0:	f06f 0301 	mvn.w	r3, #1
 8009db4:	617b      	str	r3, [r7, #20]
      break;
 8009db6:	bf00      	nop
  }

  return ret;
 8009db8:	697b      	ldr	r3, [r7, #20]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000838 	.word	0x20000838

08009dc8 <BSP_ENV_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d02e      	beq.n	8009e3c <BSP_ENV_SENSOR_Write_Register+0x74>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d83e      	bhi.n	8009e62 <BSP_ENV_SENSOR_Write_Register+0x9a>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d015      	beq.n	8009e16 <BSP_ENV_SENSOR_Write_Register+0x4e>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d138      	bne.n	8009e62 <BSP_ENV_SENSOR_Write_Register+0x9a>
  {
#if (USE_ENV_SENSOR_LPS22HH_0 == 1)
    case LPS22HH_0:
      if (LPS22HH_Write_Reg(EnvCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8009df0:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <BSP_ENV_SENSOR_Write_Register+0xac>)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df8:	78ba      	ldrb	r2, [r7, #2]
 8009dfa:	78f9      	ldrb	r1, [r7, #3]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fb f97a 	bl	80050f6 <LPS22HH_Write_Reg>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <BSP_ENV_SENSOR_Write_Register+0x48>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e08:	f06f 0304 	mvn.w	r3, #4
 8009e0c:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8009e0e:	e02c      	b.n	8009e6a <BSP_ENV_SENSOR_Write_Register+0xa2>
        ret = BSP_ERROR_NONE;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
      break;
 8009e14:	e029      	b.n	8009e6a <BSP_ENV_SENSOR_Write_Register+0xa2>
#endif

#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_Write_Reg(EnvCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8009e16:	4a17      	ldr	r2, [pc, #92]	; (8009e74 <BSP_ENV_SENSOR_Write_Register+0xac>)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e1e:	78ba      	ldrb	r2, [r7, #2]
 8009e20:	78f9      	ldrb	r1, [r7, #3]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f7 fb22 	bl	800146c <HTS221_Write_Reg>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <BSP_ENV_SENSOR_Write_Register+0x6e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e2e:	f06f 0304 	mvn.w	r3, #4
 8009e32:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8009e34:	e019      	b.n	8009e6a <BSP_ENV_SENSOR_Write_Register+0xa2>
        ret = BSP_ERROR_NONE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
      break;
 8009e3a:	e016      	b.n	8009e6a <BSP_ENV_SENSOR_Write_Register+0xa2>
#endif

#if (USE_ENV_SENSOR_STTS751_0 == 1)
    case STTS751_0:
      if (STTS751_Write_Reg(EnvCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8009e3c:	4a0d      	ldr	r2, [pc, #52]	; (8009e74 <BSP_ENV_SENSOR_Write_Register+0xac>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e44:	78ba      	ldrb	r2, [r7, #2]
 8009e46:	78f9      	ldrb	r1, [r7, #3]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fa4d 	bl	80082e8 <STTS751_Write_Reg>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <BSP_ENV_SENSOR_Write_Register+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e54:	f06f 0304 	mvn.w	r3, #4
 8009e58:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8009e5a:	e006      	b.n	8009e6a <BSP_ENV_SENSOR_Write_Register+0xa2>
        ret = BSP_ERROR_NONE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60fb      	str	r3, [r7, #12]
      break;
 8009e60:	e003      	b.n	8009e6a <BSP_ENV_SENSOR_Write_Register+0xa2>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009e62:	f06f 0301 	mvn.w	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]
      break;
 8009e68:	bf00      	nop
  }

  return ret;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000838 	.word	0x20000838

08009e78 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t  BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08e      	sub	sp, #56	; 0x38
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009e82:	2300      	movs	r3, #0
 8009e84:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8009e86:	2301      	movs	r3, #1
 8009e88:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	f200 80d4 	bhi.w	800a03e <BSP_MOTION_SENSOR_Init+0x1c6>
 8009e96:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <BSP_MOTION_SENSOR_Init+0x24>)
 8009e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9c:	08009ead 	.word	0x08009ead
 8009ea0:	08009f13 	.word	0x08009f13
 8009ea4:	08009f77 	.word	0x08009f77
 8009ea8:	08009fdb 	.word	0x08009fdb
  {
#if (USE_MOTION_SENSOR_LIS2DW12_0 == 1)
    case LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009eac:	6838      	ldr	r0, [r7, #0]
 8009eae:	f000 faef 	bl	800a490 <LIS2DW12_0_Probe>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <BSP_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 8009eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ebc:	e101      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009ebe:	4a83      	ldr	r2, [pc, #524]	; (800a0cc <BSP_MOTION_SENSOR_Init+0x254>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	4981      	ldr	r1, [pc, #516]	; (800a0d0 <BSP_MOTION_SENSOR_Init+0x258>)
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009ed0:	f107 010c 	add.w	r1, r7, #12
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <BSP_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009ede:	f06f 0306 	mvn.w	r3, #6
 8009ee2:	e0ee      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 8009ee4:	7b3b      	ldrb	r3, [r7, #12]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d103      	bne.n	8009ef2 <BSP_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	f043 0302 	orr.w	r3, r3, #2
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009ef2:	7b7b      	ldrb	r3, [r7, #13]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d103      	bne.n	8009f00 <BSP_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	f040 809f 	bne.w	800a046 <BSP_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	f043 0304 	orr.w	r3, r3, #4
 8009f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009f10:	e099      	b.n	800a046 <BSP_MOTION_SENSOR_Init+0x1ce>
#endif

#if (USE_MOTION_SENSOR_LIS2MDL_0 == 1)
    case LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8009f12:	6838      	ldr	r0, [r7, #0]
 8009f14:	f000 fc0c 	bl	800a730 <LIS2MDL_0_Probe>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <BSP_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 8009f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f22:	e0ce      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009f24:	4a69      	ldr	r2, [pc, #420]	; (800a0cc <BSP_MOTION_SENSOR_Init+0x254>)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	4968      	ldr	r1, [pc, #416]	; (800a0d0 <BSP_MOTION_SENSOR_Init+0x258>)
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f36:	f107 010c 	add.w	r1, r7, #12
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <BSP_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009f44:	f06f 0306 	mvn.w	r3, #6
 8009f48:	e0bb      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 8009f4a:	7b3b      	ldrb	r3, [r7, #12]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d103      	bne.n	8009f58 <BSP_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	f043 0302 	orr.w	r3, r3, #2
 8009f56:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009f58:	7b7b      	ldrb	r3, [r7, #13]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d103      	bne.n	8009f66 <BSP_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f043 0301 	orr.w	r3, r3, #1
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d16e      	bne.n	800a04a <BSP_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	f043 0304 	orr.w	r3, r3, #4
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009f74:	e069      	b.n	800a04a <BSP_MOTION_SENSOR_Init+0x1d2>
#endif
      
#if (USE_MOTION_SENSOR_LIS3DHH_0 == 1)
    case LIS3DHH_0:
      if (LIS3DHH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009f76:	6838      	ldr	r0, [r7, #0]
 8009f78:	f000 fe02 	bl	800ab80 <LIS3DHH_0_Probe>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <BSP_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 8009f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f86:	e09c      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009f88:	4a50      	ldr	r2, [pc, #320]	; (800a0cc <BSP_MOTION_SENSOR_Init+0x254>)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	494f      	ldr	r1, [pc, #316]	; (800a0d0 <BSP_MOTION_SENSOR_Init+0x258>)
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f9a:	f107 010c 	add.w	r1, r7, #12
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4798      	blx	r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <BSP_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009fa8:	f06f 0306 	mvn.w	r3, #6
 8009fac:	e089      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 8009fae:	7b3b      	ldrb	r3, [r7, #12]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d103      	bne.n	8009fbc <BSP_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	f043 0302 	orr.w	r3, r3, #2
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009fbc:	7b7b      	ldrb	r3, [r7, #13]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d103      	bne.n	8009fca <BSP_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	f043 0301 	orr.w	r3, r3, #1
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d13e      	bne.n	800a04e <BSP_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	f043 0304 	orr.w	r3, r3, #4
 8009fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009fd8:	e039      	b.n	800a04e <BSP_MOTION_SENSOR_Init+0x1d6>
#endif
      
#if (USE_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case LSM6DSOX_0:
      if (LSM6DSOX_0_Probe(Functions) != BSP_ERROR_NONE)
 8009fda:	6838      	ldr	r0, [r7, #0]
 8009fdc:	f000 ff22 	bl	800ae24 <LSM6DSOX_0_Probe>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <BSP_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fea:	e06a      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009fec:	4a37      	ldr	r2, [pc, #220]	; (800a0cc <BSP_MOTION_SENSOR_Init+0x254>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	4936      	ldr	r1, [pc, #216]	; (800a0d0 <BSP_MOTION_SENSOR_Init+0x258>)
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009ffe:	f107 010c 	add.w	r1, r7, #12
 800a002:	4610      	mov	r0, r2
 800a004:	4798      	blx	r3
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <BSP_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a00c:	f06f 0306 	mvn.w	r3, #6
 800a010:	e057      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a012:	7b3b      	ldrb	r3, [r7, #12]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d103      	bne.n	800a020 <BSP_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	f043 0302 	orr.w	r3, r3, #2
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a020:	7b7b      	ldrb	r3, [r7, #13]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d103      	bne.n	800a02e <BSP_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d10e      	bne.n	800a052 <BSP_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	f043 0304 	orr.w	r3, r3, #4
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a03c:	e009      	b.n	800a052 <BSP_MOTION_SENSOR_Init+0x1da>
#endif
      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a03e:	f06f 0301 	mvn.w	r3, #1
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800a044:	e006      	b.n	800a054 <BSP_MOTION_SENSOR_Init+0x1dc>
      break;
 800a046:	bf00      	nop
 800a048:	e004      	b.n	800a054 <BSP_MOTION_SENSOR_Init+0x1dc>
      break;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <BSP_MOTION_SENSOR_Init+0x1dc>
      break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <BSP_MOTION_SENSOR_Init+0x1dc>
      break;
 800a052:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <BSP_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800a05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05c:	e031      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800a05e:	2300      	movs	r3, #0
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a062:	e02a      	b.n	800a0ba <BSP_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	4013      	ands	r3, r2
 800a06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d11e      	bne.n	800a0ae <BSP_MOTION_SENSOR_Init+0x236>
 800a070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	4013      	ands	r3, r2
 800a076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a078:	429a      	cmp	r2, r3
 800a07a:	d118      	bne.n	800a0ae <BSP_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a07c:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <BSP_MOTION_SENSOR_Init+0x25c>)
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a084:	4814      	ldr	r0, [pc, #80]	; (800a0d8 <BSP_MOTION_SENSOR_Init+0x260>)
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	4413      	add	r3, r2
 800a08e:	440b      	add	r3, r1
 800a090:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	490e      	ldr	r1, [pc, #56]	; (800a0d0 <BSP_MOTION_SENSOR_Init+0x258>)
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4798      	blx	r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <BSP_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a0a8:	f06f 0304 	mvn.w	r3, #4
 800a0ac:	e009      	b.n	800a0c2 <BSP_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d9d1      	bls.n	800a064 <BSP_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800a0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3738      	adds	r7, #56	; 0x38
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000960 	.word	0x20000960
 800a0d0:	20000920 	.word	0x20000920
 800a0d4:	200001ac 	.word	0x200001ac
 800a0d8:	20000930 	.word	0x20000930

0800a0dc <BSP_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d903      	bls.n	800a0f4 <BSP_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a0ec:	f06f 0301 	mvn.w	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	e028      	b.n	800a146 <BSP_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a0f4:	4a16      	ldr	r2, [pc, #88]	; (800a150 <BSP_MOTION_SENSOR_Enable+0x74>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	4013      	ands	r3, r2
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d11c      	bne.n	800a140 <BSP_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a106:	4a13      	ldr	r2, [pc, #76]	; (800a154 <BSP_MOTION_SENSOR_Enable+0x78>)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a10e:	4812      	ldr	r0, [pc, #72]	; (800a158 <BSP_MOTION_SENSOR_Enable+0x7c>)
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	4413      	add	r3, r2
 800a118:	440b      	add	r3, r1
 800a11a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	490e      	ldr	r1, [pc, #56]	; (800a15c <BSP_MOTION_SENSOR_Enable+0x80>)
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <BSP_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a132:	f06f 0304 	mvn.w	r3, #4
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	e005      	b.n	800a146 <BSP_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e002      	b.n	800a146 <BSP_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a140:	f06f 0301 	mvn.w	r3, #1
 800a144:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a146:	68fb      	ldr	r3, [r7, #12]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20000970 	.word	0x20000970
 800a154:	200001ac 	.word	0x200001ac
 800a158:	20000930 	.word	0x20000930
 800a15c:	20000920 	.word	0x20000920

0800a160 <BSP_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d903      	bls.n	800a178 <BSP_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a170:	f06f 0301 	mvn.w	r3, #1
 800a174:	60fb      	str	r3, [r7, #12]
 800a176:	e028      	b.n	800a1ca <BSP_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a178:	4a16      	ldr	r2, [pc, #88]	; (800a1d4 <BSP_MOTION_SENSOR_Disable+0x74>)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	4013      	ands	r3, r2
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d11c      	bne.n	800a1c4 <BSP_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a18a:	4a13      	ldr	r2, [pc, #76]	; (800a1d8 <BSP_MOTION_SENSOR_Disable+0x78>)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a192:	4812      	ldr	r0, [pc, #72]	; (800a1dc <BSP_MOTION_SENSOR_Disable+0x7c>)
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	4413      	add	r3, r2
 800a19c:	440b      	add	r3, r1
 800a19e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	490e      	ldr	r1, [pc, #56]	; (800a1e0 <BSP_MOTION_SENSOR_Disable+0x80>)
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <BSP_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1b6:	f06f 0304 	mvn.w	r3, #4
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e005      	b.n	800a1ca <BSP_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e002      	b.n	800a1ca <BSP_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a1c4:	f06f 0301 	mvn.w	r3, #1
 800a1c8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20000970 	.word	0x20000970
 800a1d8:	200001ac 	.word	0x200001ac
 800a1dc:	20000930 	.word	0x20000930
 800a1e0:	20000920 	.word	0x20000920

0800a1e4 <BSP_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d903      	bls.n	800a1fe <BSP_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a1f6:	f06f 0301 	mvn.w	r3, #1
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	e029      	b.n	800a252 <BSP_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a1fe:	4a17      	ldr	r2, [pc, #92]	; (800a25c <BSP_MOTION_SENSOR_GetAxes+0x78>)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4013      	ands	r3, r2
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d11d      	bne.n	800a24c <BSP_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800a210:	4a13      	ldr	r2, [pc, #76]	; (800a260 <BSP_MOTION_SENSOR_GetAxes+0x7c>)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a218:	4812      	ldr	r0, [pc, #72]	; (800a264 <BSP_MOTION_SENSOR_GetAxes+0x80>)
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4613      	mov	r3, r2
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	4413      	add	r3, r2
 800a222:	440b      	add	r3, r1
 800a224:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	490f      	ldr	r1, [pc, #60]	; (800a268 <BSP_MOTION_SENSOR_GetAxes+0x84>)
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <BSP_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a23e:	f06f 0304 	mvn.w	r3, #4
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	e005      	b.n	800a252 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a246:	2300      	movs	r3, #0
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e002      	b.n	800a252 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a24c:	f06f 0301 	mvn.w	r3, #1
 800a250:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a252:	697b      	ldr	r3, [r7, #20]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20000970 	.word	0x20000970
 800a260:	200001ac 	.word	0x200001ac
 800a264:	20000930 	.word	0x20000930
 800a268:	20000920 	.word	0x20000920

0800a26c <BSP_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d903      	bls.n	800a286 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a27e:	f06f 0301 	mvn.w	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e029      	b.n	800a2da <BSP_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a286:	4a17      	ldr	r2, [pc, #92]	; (800a2e4 <BSP_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	4013      	ands	r3, r2
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d11d      	bne.n	800a2d4 <BSP_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a298:	4a13      	ldr	r2, [pc, #76]	; (800a2e8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a2a0:	4812      	ldr	r0, [pc, #72]	; (800a2ec <BSP_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	4413      	add	r3, r2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	490f      	ldr	r1, [pc, #60]	; (800a2f0 <BSP_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4798      	blx	r3
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <BSP_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2c6:	f06f 0304 	mvn.w	r3, #4
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e005      	b.n	800a2da <BSP_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	617b      	str	r3, [r7, #20]
 800a2d2:	e002      	b.n	800a2da <BSP_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a2d4:	f06f 0301 	mvn.w	r3, #1
 800a2d8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a2da:	697b      	ldr	r3, [r7, #20]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20000970 	.word	0x20000970
 800a2e8:	200001ac 	.word	0x200001ac
 800a2ec:	20000930 	.word	0x20000930
 800a2f0:	20000920 	.word	0x20000920

0800a2f4 <BSP_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b03      	cmp	r3, #3
 800a304:	d903      	bls.n	800a30e <BSP_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a306:	f06f 0301 	mvn.w	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e029      	b.n	800a362 <BSP_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a30e:	4a17      	ldr	r2, [pc, #92]	; (800a36c <BSP_MOTION_SENSOR_GetFullScale+0x78>)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4013      	ands	r3, r2
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d11d      	bne.n	800a35c <BSP_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800a320:	4a13      	ldr	r2, [pc, #76]	; (800a370 <BSP_MOTION_SENSOR_GetFullScale+0x7c>)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a328:	4812      	ldr	r0, [pc, #72]	; (800a374 <BSP_MOTION_SENSOR_GetFullScale+0x80>)
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4613      	mov	r3, r2
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	4413      	add	r3, r2
 800a332:	440b      	add	r3, r1
 800a334:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	490f      	ldr	r1, [pc, #60]	; (800a378 <BSP_MOTION_SENSOR_GetFullScale+0x84>)
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4610      	mov	r0, r2
 800a346:	4798      	blx	r3
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <BSP_MOTION_SENSOR_GetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a34e:	f06f 0304 	mvn.w	r3, #4
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	e005      	b.n	800a362 <BSP_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]
 800a35a:	e002      	b.n	800a362 <BSP_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a35c:	f06f 0301 	mvn.w	r3, #1
 800a360:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a362:	697b      	ldr	r3, [r7, #20]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000970 	.word	0x20000970
 800a370:	200001ac 	.word	0x200001ac
 800a374:	20000930 	.word	0x20000930
 800a378:	20000920 	.word	0x20000920

0800a37c <BSP_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d903      	bls.n	800a398 <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a390:	f06f 0301 	mvn.w	r3, #1
 800a394:	617b      	str	r3, [r7, #20]
 800a396:	e02a      	b.n	800a3ee <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a398:	4a17      	ldr	r2, [pc, #92]	; (800a3f8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d11e      	bne.n	800a3e8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a3aa:	4a14      	ldr	r2, [pc, #80]	; (800a3fc <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a3b2:	4813      	ldr	r0, [pc, #76]	; (800a400 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	4413      	add	r3, r2
 800a3bc:	440b      	add	r3, r1
 800a3be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	490f      	ldr	r1, [pc, #60]	; (800a404 <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a3cc:	ed97 0a01 	vldr	s0, [r7, #4]
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4798      	blx	r3
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3da:	f06f 0304 	mvn.w	r3, #4
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	e005      	b.n	800a3ee <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	617b      	str	r3, [r7, #20]
 800a3e6:	e002      	b.n	800a3ee <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a3e8:	f06f 0301 	mvn.w	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a3ee:	697b      	ldr	r3, [r7, #20]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	20000970 	.word	0x20000970
 800a3fc:	200001ac 	.word	0x200001ac
 800a400:	20000930 	.word	0x20000930
 800a404:	20000920 	.word	0x20000920

0800a408 <BSP_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b03      	cmp	r3, #3
 800a418:	d903      	bls.n	800a422 <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a41a:	f06f 0301 	mvn.w	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	e029      	b.n	800a476 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a422:	4a17      	ldr	r2, [pc, #92]	; (800a480 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4013      	ands	r3, r2
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	d11d      	bne.n	800a470 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800a434:	4a13      	ldr	r2, [pc, #76]	; (800a484 <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a43c:	4812      	ldr	r0, [pc, #72]	; (800a488 <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4613      	mov	r3, r2
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	440b      	add	r3, r1
 800a448:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	490f      	ldr	r1, [pc, #60]	; (800a48c <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <BSP_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a462:	f06f 0304 	mvn.w	r3, #4
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e005      	b.n	800a476 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	e002      	b.n	800a476 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a470:	f06f 0301 	mvn.w	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a476:	697b      	ldr	r3, [r7, #20]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20000970 	.word	0x20000970
 800a484:	200001ac 	.word	0x200001ac
 800a488:	20000930 	.word	0x20000930
 800a48c:	20000920 	.word	0x20000920

0800a490 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b094      	sub	sp, #80	; 0x50
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800a498:	2300      	movs	r3, #0
 800a49a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800a49c:	2301      	movs	r3, #1
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = 0x0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = BSP_LIS2DW12_Init;
 800a4a6:	4b32      	ldr	r3, [pc, #200]	; (800a570 <LIS2DW12_0_Probe+0xe0>)
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = BSP_LIS2DW12_DeInit;
 800a4aa:	4b32      	ldr	r3, [pc, #200]	; (800a574 <LIS2DW12_0_Probe+0xe4>)
 800a4ac:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = BSP_LIS2DW12_ReadReg;
 800a4ae:	4b32      	ldr	r3, [pc, #200]	; (800a578 <LIS2DW12_0_Probe+0xe8>)
 800a4b0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = BSP_LIS2DW12_WriteReg;
 800a4b2:	4b32      	ldr	r3, [pc, #200]	; (800a57c <LIS2DW12_0_Probe+0xec>)
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800a4b6:	4b32      	ldr	r3, [pc, #200]	; (800a580 <LIS2DW12_0_Probe+0xf0>)
 800a4b8:	647b      	str	r3, [r7, #68]	; 0x44

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a4ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4830      	ldr	r0, [pc, #192]	; (800a584 <LIS2DW12_0_Probe+0xf4>)
 800a4c2:	f7f7 fbbd 	bl	8001c40 <LIS2DW12_RegisterBusIO>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a4cc:	f06f 0306 	mvn.w	r3, #6
 800a4d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4d2:	e048      	b.n	800a566 <LIS2DW12_0_Probe+0xd6>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800a4d4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a4d8:	4619      	mov	r1, r3
 800a4da:	482a      	ldr	r0, [pc, #168]	; (800a584 <LIS2DW12_0_Probe+0xf4>)
 800a4dc:	f7f7 fc9e 	bl	8001e1c <LIS2DW12_ReadID>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a4e6:	f06f 0306 	mvn.w	r3, #6
 800a4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ec:	e03b      	b.n	800a566 <LIS2DW12_0_Probe+0xd6>
  }
  else if (id != LIS2DW12_ID)
 800a4ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4f2:	2b44      	cmp	r3, #68	; 0x44
 800a4f4:	d003      	beq.n	800a4fe <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a4f6:	f06f 0306 	mvn.w	r3, #6
 800a4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4fc:	e033      	b.n	800a566 <LIS2DW12_0_Probe+0xd6>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800a4fe:	f107 030c 	add.w	r3, r7, #12
 800a502:	4619      	mov	r1, r3
 800a504:	481f      	ldr	r0, [pc, #124]	; (800a584 <LIS2DW12_0_Probe+0xf4>)
 800a506:	f7f7 fc9f 	bl	8001e48 <LIS2DW12_GetCapabilities>
    MotionCtx[LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a50a:	7b7b      	ldrb	r3, [r7, #13]
 800a50c:	461a      	mov	r2, r3
 800a50e:	7b3b      	ldrb	r3, [r7, #12]
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	431a      	orrs	r2, r3
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4313      	orrs	r3, r2
 800a51a:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <LIS2DW12_0_Probe+0xf8>)
 800a51c:	6013      	str	r3, [r2, #0]

    MotionCompObj[LIS2DW12_0] = &lis2dw12_obj_0;
 800a51e:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <LIS2DW12_0_Probe+0xfc>)
 800a520:	4a18      	ldr	r2, [pc, #96]	; (800a584 <LIS2DW12_0_Probe+0xf4>)
 800a522:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800a524:	4b1a      	ldr	r3, [pc, #104]	; (800a590 <LIS2DW12_0_Probe+0x100>)
 800a526:	4a1b      	ldr	r2, [pc, #108]	; (800a594 <LIS2DW12_0_Probe+0x104>)
 800a528:	601a      	str	r2, [r3, #0]

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d018      	beq.n	800a566 <LIS2DW12_0_Probe+0xd6>
 800a534:	7b3b      	ldrb	r3, [r7, #12]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d115      	bne.n	800a566 <LIS2DW12_0_Probe+0xd6>
    {
      
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 800a53a:	4b17      	ldr	r3, [pc, #92]	; (800a598 <LIS2DW12_0_Probe+0x108>)
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	4a17      	ldr	r2, [pc, #92]	; (800a59c <LIS2DW12_0_Probe+0x10c>)
 800a540:	4917      	ldr	r1, [pc, #92]	; (800a5a0 <LIS2DW12_0_Probe+0x110>)
 800a542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LIS2DW12_0]->Init(MotionCompObj[LIS2DW12_0]) != LIS2DW12_OK)
 800a546:	4b12      	ldr	r3, [pc, #72]	; (800a590 <LIS2DW12_0_Probe+0x100>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a0f      	ldr	r2, [pc, #60]	; (800a58c <LIS2DW12_0_Probe+0xfc>)
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <LIS2DW12_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a55a:	f06f 0304 	mvn.w	r3, #4
 800a55e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a560:	e001      	b.n	800a566 <LIS2DW12_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a562:	2300      	movs	r3, #0
 800a564:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
  }

  return ret;
 800a566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3750      	adds	r7, #80	; 0x50
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	0800a5a5 	.word	0x0800a5a5
 800a574:	0800a615 	.word	0x0800a615
 800a578:	0800a6b1 	.word	0x0800a6b1
 800a57c:	0800a639 	.word	0x0800a639
 800a580:	08008eb9 	.word	0x08008eb9
 800a584:	20000980 	.word	0x20000980
 800a588:	20000970 	.word	0x20000970
 800a58c:	20000920 	.word	0x20000920
 800a590:	20000960 	.word	0x20000960
 800a594:	20000038 	.word	0x20000038
 800a598:	200001ac 	.word	0x200001ac
 800a59c:	20000930 	.word	0x20000930
 800a5a0:	20000048 	.word	0x20000048

0800a5a4 <BSP_LIS2DW12_Init>:

static int32_t BSP_LIS2DW12_Init(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a5aa:	f06f 0305 	mvn.w	r3, #5
 800a5ae:	61fb      	str	r3, [r7, #28]
  
  BSP_LIS2DW12_CS_GPIO_CLK_ENABLE();
 800a5b0:	4b16      	ldr	r3, [pc, #88]	; (800a60c <BSP_LIS2DW12_Init+0x68>)
 800a5b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b4:	4a15      	ldr	r2, [pc, #84]	; (800a60c <BSP_LIS2DW12_Init+0x68>)
 800a5b6:	f043 0310 	orr.w	r3, r3, #16
 800a5ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5bc:	4b13      	ldr	r3, [pc, #76]	; (800a60c <BSP_LIS2DW12_Init+0x68>)
 800a5be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	607b      	str	r3, [r7, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
  
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = BSP_LIS2DW12_CS_PIN;
 800a5d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5d8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LIS2DW12_CS_PORT, &GPIO_InitStruct);
 800a5da:	f107 0308 	add.w	r3, r7, #8
 800a5de:	4619      	mov	r1, r3
 800a5e0:	480b      	ldr	r0, [pc, #44]	; (800a610 <BSP_LIS2DW12_Init+0x6c>)
 800a5e2:	f001 f8c3 	bl	800b76c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LIS2DW12_CS_PORT, BSP_LIS2DW12_CS_PIN, GPIO_PIN_SET);
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5ec:	4808      	ldr	r0, [pc, #32]	; (800a610 <BSP_LIS2DW12_Init+0x6c>)
 800a5ee:	f001 fb59 	bl	800bca4 <HAL_GPIO_WritePin>

  if(BSP_SPI1_Init() == BSP_ERROR_NONE)
 800a5f2:	f7fe fb95 	bl	8008d20 <BSP_SPI1_Init>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <BSP_LIS2DW12_Init+0x5c>
  {
    ret = BSP_ERROR_NONE;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800a600:	69fb      	ldr	r3, [r7, #28]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	40021000 	.word	0x40021000
 800a610:	48001000 	.word	0x48001000

0800a614 <BSP_LIS2DW12_DeInit>:

static int32_t BSP_LIS2DW12_DeInit(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a61a:	f06f 0305 	mvn.w	r3, #5
 800a61e:	607b      	str	r3, [r7, #4]

  if(BSP_SPI1_DeInit() == BSP_ERROR_NONE)
 800a620:	f7fe fba2 	bl	8008d68 <BSP_SPI1_DeInit>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <BSP_LIS2DW12_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800a62e:	687b      	ldr	r3, [r7, #4]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <BSP_LIS2DW12_WriteReg>:

static int32_t BSP_LIS2DW12_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60ba      	str	r2, [r7, #8]
 800a640:	461a      	mov	r2, r3
 800a642:	4603      	mov	r3, r0
 800a644:	81fb      	strh	r3, [r7, #14]
 800a646:	460b      	mov	r3, r1
 800a648:	81bb      	strh	r3, [r7, #12]
 800a64a:	4613      	mov	r3, r2
 800a64c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800a64e:	2300      	movs	r3, #0
 800a650:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800a652:	89bb      	ldrh	r3, [r7, #12]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LIS2DW12_CS_PORT, BSP_LIS2DW12_CS_PIN, GPIO_PIN_RESET);
 800a658:	2200      	movs	r2, #0
 800a65a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a65e:	4813      	ldr	r0, [pc, #76]	; (800a6ac <BSP_LIS2DW12_WriteReg+0x74>)
 800a660:	f001 fb20 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800a664:	f107 0313 	add.w	r3, r7, #19
 800a668:	2101      	movs	r1, #1
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fb94 	bl	8008d98 <BSP_SPI1_Send>
 800a670:	4603      	mov	r3, r0
 800a672:	2b01      	cmp	r3, #1
 800a674:	d002      	beq.n	800a67c <BSP_LIS2DW12_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a676:	f06f 0305 	mvn.w	r3, #5
 800a67a:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI1_Send(pdata, len) != len)
 800a67c:	88fb      	ldrh	r3, [r7, #6]
 800a67e:	4619      	mov	r1, r3
 800a680:	68b8      	ldr	r0, [r7, #8]
 800a682:	f7fe fb89 	bl	8008d98 <BSP_SPI1_Send>
 800a686:	4602      	mov	r2, r0
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d002      	beq.n	800a694 <BSP_LIS2DW12_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a68e:	f06f 0305 	mvn.w	r3, #5
 800a692:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LIS2DW12_CS_PORT, BSP_LIS2DW12_CS_PIN, GPIO_PIN_SET);
 800a694:	2201      	movs	r2, #1
 800a696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a69a:	4804      	ldr	r0, [pc, #16]	; (800a6ac <BSP_LIS2DW12_WriteReg+0x74>)
 800a69c:	f001 fb02 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800a6a0:	697b      	ldr	r3, [r7, #20]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	48001000 	.word	0x48001000

0800a6b0 <BSP_LIS2DW12_ReadReg>:

static int32_t BSP_LIS2DW12_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60ba      	str	r2, [r7, #8]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	81fb      	strh	r3, [r7, #14]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	81bb      	strh	r3, [r7, #12]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800a6ca:	89bb      	ldrh	r3, [r7, #12]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800a6d0:	7cfb      	ldrb	r3, [r7, #19]
 800a6d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LIS2DW12_CS_PORT, BSP_LIS2DW12_CS_PIN, GPIO_PIN_RESET);
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a6e0:	4812      	ldr	r0, [pc, #72]	; (800a72c <BSP_LIS2DW12_ReadReg+0x7c>)
 800a6e2:	f001 fadf 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800a6e6:	f107 0313 	add.w	r3, r7, #19
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe fb53 	bl	8008d98 <BSP_SPI1_Send>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d002      	beq.n	800a6fe <BSP_LIS2DW12_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a6f8:	f06f 0305 	mvn.w	r3, #5
 800a6fc:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI1_Recv(pdata, len) != len)
 800a6fe:	88fb      	ldrh	r3, [r7, #6]
 800a700:	4619      	mov	r1, r3
 800a702:	68b8      	ldr	r0, [r7, #8]
 800a704:	f7fe fb64 	bl	8008dd0 <BSP_SPI1_Recv>
 800a708:	4602      	mov	r2, r0
 800a70a:	88fb      	ldrh	r3, [r7, #6]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d002      	beq.n	800a716 <BSP_LIS2DW12_ReadReg+0x66>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a710:	f06f 0305 	mvn.w	r3, #5
 800a714:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LIS2DW12_CS_PORT, BSP_LIS2DW12_CS_PIN, GPIO_PIN_SET);
 800a716:	2201      	movs	r2, #1
 800a718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a71c:	4803      	ldr	r0, [pc, #12]	; (800a72c <BSP_LIS2DW12_ReadReg+0x7c>)
 800a71e:	f001 fac1 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800a722:	697b      	ldr	r3, [r7, #20]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	48001000 	.word	0x48001000

0800a730 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b094      	sub	sp, #80	; 0x50
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t                io_ctx;
  uint8_t                     id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800a738:	2300      	movs	r3, #0
 800a73a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_SPI_3WIRES_BUS; /* SPI 4-Wires */
 800a73c:	2302      	movs	r3, #2
 800a73e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = 0x0;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = BSP_LIS2MDL_Init;
 800a746:	4b33      	ldr	r3, [pc, #204]	; (800a814 <LIS2MDL_0_Probe+0xe4>)
 800a748:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = BSP_LIS2MDL_DeInit;
 800a74a:	4b33      	ldr	r3, [pc, #204]	; (800a818 <LIS2MDL_0_Probe+0xe8>)
 800a74c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = BSP_LIS2MDL_ReadReg;
 800a74e:	4b33      	ldr	r3, [pc, #204]	; (800a81c <LIS2MDL_0_Probe+0xec>)
 800a750:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = BSP_LIS2MDL_WriteReg;
 800a752:	4b33      	ldr	r3, [pc, #204]	; (800a820 <LIS2MDL_0_Probe+0xf0>)
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800a756:	4b33      	ldr	r3, [pc, #204]	; (800a824 <LIS2MDL_0_Probe+0xf4>)
 800a758:	647b      	str	r3, [r7, #68]	; 0x44

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a75a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a75e:	4619      	mov	r1, r3
 800a760:	4831      	ldr	r0, [pc, #196]	; (800a828 <LIS2MDL_0_Probe+0xf8>)
 800a762:	f7f8 fd45 	bl	80031f0 <LIS2MDL_RegisterBusIO>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a76c:	f06f 0306 	mvn.w	r3, #6
 800a770:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a772:	e049      	b.n	800a808 <LIS2MDL_0_Probe+0xd8>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800a774:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a778:	4619      	mov	r1, r3
 800a77a:	482b      	ldr	r0, [pc, #172]	; (800a828 <LIS2MDL_0_Probe+0xf8>)
 800a77c:	f7f8 fe54 	bl	8003428 <LIS2MDL_ReadID>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a786:	f06f 0306 	mvn.w	r3, #6
 800a78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a78c:	e03c      	b.n	800a808 <LIS2MDL_0_Probe+0xd8>
  }
  else if (id != LIS2MDL_ID)
 800a78e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d003      	beq.n	800a79e <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a796:	f06f 0306 	mvn.w	r3, #6
 800a79a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a79c:	e034      	b.n	800a808 <LIS2MDL_0_Probe+0xd8>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800a79e:	f107 030c 	add.w	r3, r7, #12
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4820      	ldr	r0, [pc, #128]	; (800a828 <LIS2MDL_0_Probe+0xf8>)
 800a7a6:	f7f8 fe65 	bl	8003474 <LIS2MDL_GetCapabilities>
    MotionCtx[LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a7aa:	7b7b      	ldrb	r3, [r7, #13]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	7b3b      	ldrb	r3, [r7, #12]
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	4a1c      	ldr	r2, [pc, #112]	; (800a82c <LIS2MDL_0_Probe+0xfc>)
 800a7bc:	6053      	str	r3, [r2, #4]

    MotionCompObj[LIS2MDL_0] = &lis2mdl_obj_0;
 800a7be:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <LIS2MDL_0_Probe+0x100>)
 800a7c0:	4a19      	ldr	r2, [pc, #100]	; (800a828 <LIS2MDL_0_Probe+0xf8>)
 800a7c2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	; (800a834 <LIS2MDL_0_Probe+0x104>)
 800a7c6:	4a1c      	ldr	r2, [pc, #112]	; (800a838 <LIS2MDL_0_Probe+0x108>)
 800a7c8:	605a      	str	r2, [r3, #4]

    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d019      	beq.n	800a808 <LIS2MDL_0_Probe+0xd8>
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d116      	bne.n	800a808 <LIS2MDL_0_Probe+0xd8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 800a7da:	4b18      	ldr	r3, [pc, #96]	; (800a83c <LIS2MDL_0_Probe+0x10c>)
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	4a18      	ldr	r2, [pc, #96]	; (800a840 <LIS2MDL_0_Probe+0x110>)
 800a7e0:	3303      	adds	r3, #3
 800a7e2:	4918      	ldr	r1, [pc, #96]	; (800a844 <LIS2MDL_0_Probe+0x114>)
 800a7e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LIS2MDL_0]->Init(MotionCompObj[LIS2MDL_0]) != LIS2MDL_OK)
 800a7e8:	4b12      	ldr	r3, [pc, #72]	; (800a834 <LIS2MDL_0_Probe+0x104>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <LIS2MDL_0_Probe+0x100>)
 800a7f0:	6852      	ldr	r2, [r2, #4]
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	4798      	blx	r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <LIS2MDL_0_Probe+0xd4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7fc:	f06f 0304 	mvn.w	r3, #4
 800a800:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a802:	e001      	b.n	800a808 <LIS2MDL_0_Probe+0xd8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a804:	2300      	movs	r3, #0
 800a806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
  }

  return ret;
 800a808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3750      	adds	r7, #80	; 0x50
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	0800a849 	.word	0x0800a849
 800a818:	0800a8b9 	.word	0x0800a8b9
 800a81c:	0800a955 	.word	0x0800a955
 800a820:	0800a8dd 	.word	0x0800a8dd
 800a824:	08008eb9 	.word	0x08008eb9
 800a828:	200009bc 	.word	0x200009bc
 800a82c:	20000970 	.word	0x20000970
 800a830:	20000920 	.word	0x20000920
 800a834:	20000960 	.word	0x20000960
 800a838:	2000006c 	.word	0x2000006c
 800a83c:	200001ac 	.word	0x200001ac
 800a840:	20000930 	.word	0x20000930
 800a844:	2000007c 	.word	0x2000007c

0800a848 <BSP_LIS2MDL_Init>:
/**
 * @brief  Initialize SPI bus for LIS2MDL
 * @retval BSP status
 */
static int32_t BSP_LIS2MDL_Init(void)
{  
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a84e:	f06f 0305 	mvn.w	r3, #5
 800a852:	61fb      	str	r3, [r7, #28]
  
  BSP_LIS2MD_CS_GPIO_CLK_ENABLE();
 800a854:	4b17      	ldr	r3, [pc, #92]	; (800a8b4 <BSP_LIS2MDL_Init+0x6c>)
 800a856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a858:	4a16      	ldr	r2, [pc, #88]	; (800a8b4 <BSP_LIS2MDL_Init+0x6c>)
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a860:	4b14      	ldr	r3, [pc, #80]	; (800a8b4 <BSP_LIS2MDL_Init+0x6c>)
 800a862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	607b      	str	r3, [r7, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
  
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	2300      	movs	r3, #0
 800a872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  
 800a874:	2301      	movs	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = BSP_LIS2MDL_CS_PIN;
 800a878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a87c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LIS2MDL_CS_PORT, &GPIO_InitStruct);
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4619      	mov	r1, r3
 800a884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a888:	f000 ff70 	bl	800b76c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LIS2MDL_CS_PORT, BSP_LIS2MDL_CS_PIN, GPIO_PIN_SET);
 800a88c:	2201      	movs	r2, #1
 800a88e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a896:	f001 fa05 	bl	800bca4 <HAL_GPIO_WritePin>

  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 800a89a:	f7fe fab5 	bl	8008e08 <BSP_SPI3_Init>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <BSP_LIS2MDL_Init+0x60>
  {
    ret = BSP_ERROR_NONE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	40021000 	.word	0x40021000

0800a8b8 <BSP_LIS2MDL_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LIS2MDL
 * @retval BSP status
 */
static int32_t BSP_LIS2MDL_DeInit(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a8be:	f06f 0305 	mvn.w	r3, #5
 800a8c2:	607b      	str	r3, [r7, #4]

  if(BSP_SPI3_DeInit() == BSP_ERROR_NONE)
 800a8c4:	f7fe fac4 	bl	8008e50 <BSP_SPI3_DeInit>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <BSP_LIS2MDL_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800a8d2:	687b      	ldr	r3, [r7, #4]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <BSP_LIS2MDL_WriteReg>:

static int32_t BSP_LIS2MDL_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60ba      	str	r2, [r7, #8]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	81fb      	strh	r3, [r7, #14]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	81bb      	strh	r3, [r7, #12]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800a8f6:	89bb      	ldrh	r3, [r7, #12]
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LIS2MDL_CS_PORT, BSP_LIS2MDL_CS_PIN, GPIO_PIN_RESET);
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a906:	f001 f9cd 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 800a90a:	f107 0313 	add.w	r3, r7, #19
 800a90e:	2101      	movs	r1, #1
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe fab5 	bl	8008e80 <BSP_SPI3_Send>
 800a916:	4603      	mov	r3, r0
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d002      	beq.n	800a922 <BSP_LIS2MDL_WriteReg+0x46>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a91c:	f06f 0305 	mvn.w	r3, #5
 800a920:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI3_Send(pdata, len) != len)
 800a922:	88fb      	ldrh	r3, [r7, #6]
 800a924:	4619      	mov	r1, r3
 800a926:	68b8      	ldr	r0, [r7, #8]
 800a928:	f7fe faaa 	bl	8008e80 <BSP_SPI3_Send>
 800a92c:	4602      	mov	r2, r0
 800a92e:	88fb      	ldrh	r3, [r7, #6]
 800a930:	429a      	cmp	r2, r3
 800a932:	d002      	beq.n	800a93a <BSP_LIS2MDL_WriteReg+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800a934:	f06f 0305 	mvn.w	r3, #5
 800a938:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LIS2MDL_CS_PORT, BSP_LIS2MDL_CS_PIN, GPIO_PIN_SET);
 800a93a:	2201      	movs	r2, #1
 800a93c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a944:	f001 f9ae 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800a948:	697b      	ldr	r3, [r7, #20]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <BSP_LIS2MDL_ReadReg>:

static int32_t BSP_LIS2MDL_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60ba      	str	r2, [r7, #8]
 800a95c:	461a      	mov	r2, r3
 800a95e:	4603      	mov	r3, r0
 800a960:	81fb      	strh	r3, [r7, #14]
 800a962:	460b      	mov	r3, r1
 800a964:	81bb      	strh	r3, [r7, #12]
 800a966:	4613      	mov	r3, r2
 800a968:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800a96e:	89bb      	ldrh	r3, [r7, #12]
 800a970:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LIS2MDL_CS_PORT, BSP_LIS2MDL_CS_PIN, GPIO_PIN_RESET);   
 800a972:	2200      	movs	r2, #0
 800a974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a97c:	f001 f992 	bl	800bca4 <HAL_GPIO_WritePin>
  LIS2MDL_SPI_Write(&hbusspi3, (dataReg) | 0x80);
 800a980:	7cfb      	ldrb	r3, [r7, #19]
 800a982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	481e      	ldr	r0, [pc, #120]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a98c:	f000 f8ce 	bl	800ab2c <LIS2MDL_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi3);
 800a990:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	4b1b      	ldr	r3, [pc, #108]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a99e:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi3);
 800a9a0:	4b18      	ldr	r3, [pc, #96]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	4b17      	ldr	r3, [pc, #92]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a9ae:	601a      	str	r2, [r3, #0]

  if (len > 1) {
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d906      	bls.n	800a9c4 <BSP_LIS2MDL_ReadReg+0x70>
    LIS2MDL_SPI_Read_nBytes(&hbusspi3, (pdata), len);
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	4811      	ldr	r0, [pc, #68]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9be:	f000 f823 	bl	800aa08 <LIS2MDL_SPI_Read_nBytes>
 800a9c2:	e003      	b.n	800a9cc <BSP_LIS2MDL_ReadReg+0x78>
  } else {
    LIS2MDL_SPI_Read(&hbusspi3, (pdata));
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	480f      	ldr	r0, [pc, #60]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9c8:	f000 f875 	bl	800aab6 <LIS2MDL_SPI_Read>
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LIS2MDL_CS_PORT, BSP_LIS2MDL_CS_PIN, GPIO_PIN_SET);
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9d6:	f001 f965 	bl	800bca4 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi3);
 800a9da:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9e8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi3);
 800a9ea:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <BSP_LIS2MDL_ReadReg+0xb0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9f8:	601a      	str	r2, [r3, #0]
  
  return ret;
 800a9fa:	697b      	ldr	r3, [r7, #20]
  
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200007d4 	.word	0x200007d4

0800aa08 <LIS2MDL_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LIS2MDL_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	4613      	mov	r3, r2
 800aa14:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aa16:	b672      	cpsid	i
}
 800aa18:	bf00      	nop
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa28:	601a      	str	r2, [r3, #0]

  /* Transfer loop */
  while (nBytesToRead > 1U)
 800aa2a:	e013      	b.n	800aa54 <LIS2MDL_SPI_Read_nBytes+0x4c>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00c      	beq.n	800aa54 <LIS2MDL_SPI_Read_nBytes+0x4c>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	330c      	adds	r3, #12
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 800aa54:	88fb      	ldrh	r3, [r7, #6]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d8e8      	bhi.n	800aa2c <LIS2MDL_SPI_Read_nBytes+0x24>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800aa5a:	f3bf 8f4f 	dsb	sy
}
 800aa5e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aa60:	f3bf 8f4f 	dsb	sy
}
 800aa64:	bf00      	nop
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */

  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aa76:	b662      	cpsie	i
}
 800aa78:	bf00      	nop

  __enable_irq();

  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800aa7a:	bf00      	nop
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d1f8      	bne.n	800aa7c <LIS2MDL_SPI_Read_nBytes+0x74>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	330c      	adds	r3, #12
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800aa98:	bf00      	nop
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa4:	2b80      	cmp	r3, #128	; 0x80
 800aaa6:	d0f8      	beq.n	800aa9a <LIS2MDL_SPI_Read_nBytes+0x92>
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <LIS2MDL_SPI_Read>:
 * @param  command: command id.
 * @param  uint8_t val: value.
 * @retval None
 */
void LIS2MDL_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aac0:	b672      	cpsid	i
}
 800aac2:	bf00      	nop
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
 
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aad2:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 800aad4:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 800aad8:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aaec:	b662      	cpsie	i
}
 800aaee:	bf00      	nop
  __enable_irq();
 
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800aaf0:	bf00      	nop
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d1f8      	bne.n	800aaf2 <LIS2MDL_SPI_Read+0x3c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	330c      	adds	r3, #12
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800ab0e:	bf00      	nop
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1a:	2b80      	cmp	r3, #128	; 0x80
 800ab1c:	d0f8      	beq.n	800ab10 <LIS2MDL_SPI_Read+0x5a>
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <LIS2MDL_SPI_Write>:
 * @param  command : command id.
 * @param  val : value.
 * @retval None
 */
void LIS2MDL_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800ab38:	bf00      	nop
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d1f8      	bne.n	800ab3a <LIS2MDL_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	330c      	adds	r3, #12
 800ab4e:	78fa      	ldrb	r2, [r7, #3]
 800ab50:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 800ab52:	bf00      	nop
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1f8      	bne.n	800ab54 <LIS2MDL_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800ab62:	bf00      	nop
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6e:	2b80      	cmp	r3, #128	; 0x80
 800ab70:	d0f8      	beq.n	800ab64 <LIS2MDL_SPI_Write+0x38>
}
 800ab72:	bf00      	nop
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <LIS3DHH_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS3DHH_0_Probe(uint32_t Functions)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b092      	sub	sp, #72	; 0x48
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  LIS3DHH_IO_t             io_ctx;
  uint8_t                  id;
  static LIS3DHH_Object_t  iis3dhh_obj_0;
  LIS3DHH_Capabilities_t   cap;
  int32_t ret = BSP_ERROR_NONE;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS3DHH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = 0x0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = BSP_LIS3DHH_Init;
 800ab96:	4b33      	ldr	r3, [pc, #204]	; (800ac64 <LIS3DHH_0_Probe+0xe4>)
 800ab98:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = BSP_LIS3DHH_DeInit;
 800ab9a:	4b33      	ldr	r3, [pc, #204]	; (800ac68 <LIS3DHH_0_Probe+0xe8>)
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = BSP_LIS3DHH_ReadReg;
 800ab9e:	4b33      	ldr	r3, [pc, #204]	; (800ac6c <LIS3DHH_0_Probe+0xec>)
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = BSP_LIS3DHH_WriteReg;
 800aba2:	4b33      	ldr	r3, [pc, #204]	; (800ac70 <LIS3DHH_0_Probe+0xf0>)
 800aba4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800aba6:	4b33      	ldr	r3, [pc, #204]	; (800ac74 <LIS3DHH_0_Probe+0xf4>)
 800aba8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS3DHH_RegisterBusIO(&iis3dhh_obj_0, &io_ctx) != LIS3DHH_OK)
 800abaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abae:	4619      	mov	r1, r3
 800abb0:	4831      	ldr	r0, [pc, #196]	; (800ac78 <LIS3DHH_0_Probe+0xf8>)
 800abb2:	f7f9 fb95 	bl	80042e0 <LIS3DHH_RegisterBusIO>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <LIS3DHH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abbc:	f06f 0306 	mvn.w	r3, #6
 800abc0:	647b      	str	r3, [r7, #68]	; 0x44
 800abc2:	e049      	b.n	800ac58 <LIS3DHH_0_Probe+0xd8>
  }
  else if (LIS3DHH_ReadID(&iis3dhh_obj_0, &id) != LIS3DHH_OK)
 800abc4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800abc8:	4619      	mov	r1, r3
 800abca:	482b      	ldr	r0, [pc, #172]	; (800ac78 <LIS3DHH_0_Probe+0xf8>)
 800abcc:	f7f9 fc32 	bl	8004434 <LIS3DHH_ReadID>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <LIS3DHH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abd6:	f06f 0306 	mvn.w	r3, #6
 800abda:	647b      	str	r3, [r7, #68]	; 0x44
 800abdc:	e03c      	b.n	800ac58 <LIS3DHH_0_Probe+0xd8>
  }
  else if (id != LIS3DHH_ID)
 800abde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe2:	2b11      	cmp	r3, #17
 800abe4:	d003      	beq.n	800abee <LIS3DHH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abe6:	f06f 0306 	mvn.w	r3, #6
 800abea:	647b      	str	r3, [r7, #68]	; 0x44
 800abec:	e034      	b.n	800ac58 <LIS3DHH_0_Probe+0xd8>
  }
  else
  {
    (void)LIS3DHH_GetCapabilities(&iis3dhh_obj_0, &cap);
 800abee:	f107 0308 	add.w	r3, r7, #8
 800abf2:	4619      	mov	r1, r3
 800abf4:	4820      	ldr	r0, [pc, #128]	; (800ac78 <LIS3DHH_0_Probe+0xf8>)
 800abf6:	f7f9 fc33 	bl	8004460 <LIS3DHH_GetCapabilities>
    MotionCtx[LIS3DHH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800abfa:	7a7b      	ldrb	r3, [r7, #9]
 800abfc:	461a      	mov	r2, r3
 800abfe:	7a3b      	ldrb	r3, [r7, #8]
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	431a      	orrs	r2, r3
 800ac04:	7abb      	ldrb	r3, [r7, #10]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	4a1c      	ldr	r2, [pc, #112]	; (800ac7c <LIS3DHH_0_Probe+0xfc>)
 800ac0c:	6093      	str	r3, [r2, #8]

    MotionCompObj[LIS3DHH_0] = &iis3dhh_obj_0;
 800ac0e:	4b1c      	ldr	r3, [pc, #112]	; (800ac80 <LIS3DHH_0_Probe+0x100>)
 800ac10:	4a19      	ldr	r2, [pc, #100]	; (800ac78 <LIS3DHH_0_Probe+0xf8>)
 800ac12:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS3DHH_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS3DHH_COMMON_Driver;
 800ac14:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <LIS3DHH_0_Probe+0x104>)
 800ac16:	4a1c      	ldr	r2, [pc, #112]	; (800ac88 <LIS3DHH_0_Probe+0x108>)
 800ac18:	609a      	str	r2, [r3, #8]

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d019      	beq.n	800ac58 <LIS3DHH_0_Probe+0xd8>
 800ac24:	7a3b      	ldrb	r3, [r7, #8]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d116      	bne.n	800ac58 <LIS3DHH_0_Probe+0xd8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS3DHH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS3DHH_ACC_Driver;
 800ac2a:	4b18      	ldr	r3, [pc, #96]	; (800ac8c <LIS3DHH_0_Probe+0x10c>)
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	4a18      	ldr	r2, [pc, #96]	; (800ac90 <LIS3DHH_0_Probe+0x110>)
 800ac30:	3306      	adds	r3, #6
 800ac32:	4918      	ldr	r1, [pc, #96]	; (800ac94 <LIS3DHH_0_Probe+0x114>)
 800ac34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LIS3DHH_0]->Init(MotionCompObj[LIS3DHH_0]) != LIS3DHH_OK)
 800ac38:	4b12      	ldr	r3, [pc, #72]	; (800ac84 <LIS3DHH_0_Probe+0x104>)
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <LIS3DHH_0_Probe+0x100>)
 800ac40:	6892      	ldr	r2, [r2, #8]
 800ac42:	4610      	mov	r0, r2
 800ac44:	4798      	blx	r3
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <LIS3DHH_0_Probe+0xd4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac4c:	f06f 0304 	mvn.w	r3, #4
 800ac50:	647b      	str	r3, [r7, #68]	; 0x44
 800ac52:	e001      	b.n	800ac58 <LIS3DHH_0_Probe+0xd8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ac54:	2300      	movs	r3, #0
 800ac56:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }

  return ret;
 800ac58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3748      	adds	r7, #72	; 0x48
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	0800ac99 	.word	0x0800ac99
 800ac68:	0800ad09 	.word	0x0800ad09
 800ac6c:	0800ada5 	.word	0x0800ada5
 800ac70:	0800ad2d 	.word	0x0800ad2d
 800ac74:	08008eb9 	.word	0x08008eb9
 800ac78:	200009f0 	.word	0x200009f0
 800ac7c:	20000970 	.word	0x20000970
 800ac80:	20000920 	.word	0x20000920
 800ac84:	20000960 	.word	0x20000960
 800ac88:	200000a0 	.word	0x200000a0
 800ac8c:	200001ac 	.word	0x200001ac
 800ac90:	20000930 	.word	0x20000930
 800ac94:	200000b0 	.word	0x200000b0

0800ac98 <BSP_LIS3DHH_Init>:

static int32_t BSP_LIS3DHH_Init(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ac9e:	f06f 0305 	mvn.w	r3, #5
 800aca2:	61fb      	str	r3, [r7, #28]
  
    
  BSP_LIS3DHH_CS_GPIO_CLK_ENABLE();
 800aca4:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <BSP_LIS3DHH_Init+0x68>)
 800aca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca8:	4a15      	ldr	r2, [pc, #84]	; (800ad00 <BSP_LIS3DHH_Init+0x68>)
 800acaa:	f043 0310 	orr.w	r3, r3, #16
 800acae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acb0:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <BSP_LIS3DHH_Init+0x68>)
 800acb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb4:	f003 0310 	and.w	r3, r3, #16
 800acb8:	607b      	str	r3, [r7, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
  
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acbc:	2300      	movs	r3, #0
 800acbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  
 800acc4:	2301      	movs	r3, #1
 800acc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = BSP_LIS3DHH_CS_PIN;
 800acc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800accc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LIS3DHH_CS_PORT, &GPIO_InitStruct);
 800acce:	f107 0308 	add.w	r3, r7, #8
 800acd2:	4619      	mov	r1, r3
 800acd4:	480b      	ldr	r0, [pc, #44]	; (800ad04 <BSP_LIS3DHH_Init+0x6c>)
 800acd6:	f000 fd49 	bl	800b76c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LIS3DHH_CS_PORT, BSP_LIS3DHH_CS_PIN, GPIO_PIN_SET);
 800acda:	2201      	movs	r2, #1
 800acdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ace0:	4808      	ldr	r0, [pc, #32]	; (800ad04 <BSP_LIS3DHH_Init+0x6c>)
 800ace2:	f000 ffdf 	bl	800bca4 <HAL_GPIO_WritePin>

  if(BSP_SPI1_Init() == BSP_ERROR_NONE)
 800ace6:	f7fe f81b 	bl	8008d20 <BSP_SPI1_Init>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <BSP_LIS3DHH_Init+0x5c>
  {
    ret = BSP_ERROR_NONE;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800acf4:	69fb      	ldr	r3, [r7, #28]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40021000 	.word	0x40021000
 800ad04:	48001000 	.word	0x48001000

0800ad08 <BSP_LIS3DHH_DeInit>:

static int32_t BSP_LIS3DHH_DeInit(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ad0e:	f06f 0305 	mvn.w	r3, #5
 800ad12:	607b      	str	r3, [r7, #4]

  if(BSP_SPI1_DeInit() == BSP_ERROR_NONE)
 800ad14:	f7fe f828 	bl	8008d68 <BSP_SPI1_DeInit>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <BSP_LIS3DHH_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800ad22:	687b      	ldr	r3, [r7, #4]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <BSP_LIS3DHH_WriteReg>:

static int32_t BSP_LIS3DHH_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60ba      	str	r2, [r7, #8]
 800ad34:	461a      	mov	r2, r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	81fb      	strh	r3, [r7, #14]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	81bb      	strh	r3, [r7, #12]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800ad46:	89bb      	ldrh	r3, [r7, #12]
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LIS3DHH_CS_PORT, BSP_LIS3DHH_CS_PIN, GPIO_PIN_RESET);
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad52:	4813      	ldr	r0, [pc, #76]	; (800ada0 <BSP_LIS3DHH_WriteReg+0x74>)
 800ad54:	f000 ffa6 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800ad58:	f107 0313 	add.w	r3, r7, #19
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe f81a 	bl	8008d98 <BSP_SPI1_Send>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d002      	beq.n	800ad70 <BSP_LIS3DHH_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ad6a:	f06f 0305 	mvn.w	r3, #5
 800ad6e:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI1_Send(pdata, len) != len)
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	4619      	mov	r1, r3
 800ad74:	68b8      	ldr	r0, [r7, #8]
 800ad76:	f7fe f80f 	bl	8008d98 <BSP_SPI1_Send>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	88fb      	ldrh	r3, [r7, #6]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d002      	beq.n	800ad88 <BSP_LIS3DHH_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ad82:	f06f 0305 	mvn.w	r3, #5
 800ad86:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LIS3DHH_CS_PORT, BSP_LIS3DHH_CS_PIN, GPIO_PIN_SET);
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad8e:	4804      	ldr	r0, [pc, #16]	; (800ada0 <BSP_LIS3DHH_WriteReg+0x74>)
 800ad90:	f000 ff88 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800ad94:	697b      	ldr	r3, [r7, #20]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	48001000 	.word	0x48001000

0800ada4 <BSP_LIS3DHH_ReadReg>:

static int32_t BSP_LIS3DHH_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60ba      	str	r2, [r7, #8]
 800adac:	461a      	mov	r2, r3
 800adae:	4603      	mov	r3, r0
 800adb0:	81fb      	strh	r3, [r7, #14]
 800adb2:	460b      	mov	r3, r1
 800adb4:	81bb      	strh	r3, [r7, #12]
 800adb6:	4613      	mov	r3, r2
 800adb8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800adbe:	89bb      	ldrh	r3, [r7, #12]
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800adc4:	7cfb      	ldrb	r3, [r7, #19]
 800adc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LIS3DHH_CS_PORT, BSP_LIS3DHH_CS_PIN, GPIO_PIN_RESET);
 800adce:	2200      	movs	r2, #0
 800add0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800add4:	4812      	ldr	r0, [pc, #72]	; (800ae20 <BSP_LIS3DHH_ReadReg+0x7c>)
 800add6:	f000 ff65 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800adda:	f107 0313 	add.w	r3, r7, #19
 800adde:	2101      	movs	r1, #1
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fd ffd9 	bl	8008d98 <BSP_SPI1_Send>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d002      	beq.n	800adf2 <BSP_LIS3DHH_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800adec:	f06f 0305 	mvn.w	r3, #5
 800adf0:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI1_Recv(pdata, len) != len)
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	4619      	mov	r1, r3
 800adf6:	68b8      	ldr	r0, [r7, #8]
 800adf8:	f7fd ffea 	bl	8008dd0 <BSP_SPI1_Recv>
 800adfc:	4602      	mov	r2, r0
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d002      	beq.n	800ae0a <BSP_LIS3DHH_ReadReg+0x66>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ae04:	f06f 0305 	mvn.w	r3, #5
 800ae08:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LIS3DHH_CS_PORT, BSP_LIS3DHH_CS_PIN, GPIO_PIN_SET);
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae10:	4803      	ldr	r0, [pc, #12]	; (800ae20 <BSP_LIS3DHH_ReadReg+0x7c>)
 800ae12:	f000 ff47 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800ae16:	697b      	ldr	r3, [r7, #20]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	48001000 	.word	0x48001000

0800ae24 <LSM6DSOX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSOX_0_Probe(uint32_t Functions)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b094      	sub	sp, #80	; 0x50
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  LSM6DSOX_IO_t             io_ctx;
  uint8_t                  id;
  static LSM6DSOX_Object_t  lsm6dsox_obj_0;
  LSM6DSOX_Capabilities_t   cap;
  int32_t ret = BSP_ERROR_NONE;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSOX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800ae30:	2301      	movs	r3, #1
 800ae32:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = 0x0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = BSP_LSM6DSOX_Init;
 800ae3a:	4b42      	ldr	r3, [pc, #264]	; (800af44 <LSM6DSOX_0_Probe+0x120>)
 800ae3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = BSP_LSM6DSOX_DeInit;
 800ae3e:	4b42      	ldr	r3, [pc, #264]	; (800af48 <LSM6DSOX_0_Probe+0x124>)
 800ae40:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = BSP_LSM6DSOX_ReadReg;
 800ae42:	4b42      	ldr	r3, [pc, #264]	; (800af4c <LSM6DSOX_0_Probe+0x128>)
 800ae44:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = BSP_LSM6DSOX_WriteReg;
 800ae46:	4b42      	ldr	r3, [pc, #264]	; (800af50 <LSM6DSOX_0_Probe+0x12c>)
 800ae48:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800ae4a:	4b42      	ldr	r3, [pc, #264]	; (800af54 <LSM6DSOX_0_Probe+0x130>)
 800ae4c:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800ae4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae52:	4619      	mov	r1, r3
 800ae54:	4840      	ldr	r0, [pc, #256]	; (800af58 <LSM6DSOX_0_Probe+0x134>)
 800ae56:	f7fa fda1 	bl	800599c <LSM6DSOX_RegisterBusIO>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <LSM6DSOX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae60:	f06f 0306 	mvn.w	r3, #6
 800ae64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae66:	e068      	b.n	800af3a <LSM6DSOX_0_Probe+0x116>
  }
  else if (LSM6DSOX_ReadID(&lsm6dsox_obj_0, &id) != LSM6DSOX_OK)
 800ae68:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	483a      	ldr	r0, [pc, #232]	; (800af58 <LSM6DSOX_0_Probe+0x134>)
 800ae70:	f7fa fe9a 	bl	8005ba8 <LSM6DSOX_ReadID>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <LSM6DSOX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae7a:	f06f 0306 	mvn.w	r3, #6
 800ae7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae80:	e05b      	b.n	800af3a <LSM6DSOX_0_Probe+0x116>
  }
  else if (id != LSM6DSOX_ID)
 800ae82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae86:	2b6c      	cmp	r3, #108	; 0x6c
 800ae88:	d003      	beq.n	800ae92 <LSM6DSOX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae8a:	f06f 0306 	mvn.w	r3, #6
 800ae8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae90:	e053      	b.n	800af3a <LSM6DSOX_0_Probe+0x116>
  }
  else
  {
    (void)LSM6DSOX_GetCapabilities(&lsm6dsox_obj_0, &cap);
 800ae92:	f107 030c 	add.w	r3, r7, #12
 800ae96:	4619      	mov	r1, r3
 800ae98:	482f      	ldr	r0, [pc, #188]	; (800af58 <LSM6DSOX_0_Probe+0x134>)
 800ae9a:	f7fa fe9b 	bl	8005bd4 <LSM6DSOX_GetCapabilities>
    MotionCtx[LSM6DSOX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ae9e:	7b7b      	ldrb	r3, [r7, #13]
 800aea0:	461a      	mov	r2, r3
 800aea2:	7b3b      	ldrb	r3, [r7, #12]
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	431a      	orrs	r2, r3
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4313      	orrs	r3, r2
 800aeae:	4a2b      	ldr	r2, [pc, #172]	; (800af5c <LSM6DSOX_0_Probe+0x138>)
 800aeb0:	60d3      	str	r3, [r2, #12]

    MotionCompObj[LSM6DSOX_0] = &lsm6dsox_obj_0;
 800aeb2:	4b2b      	ldr	r3, [pc, #172]	; (800af60 <LSM6DSOX_0_Probe+0x13c>)
 800aeb4:	4a28      	ldr	r2, [pc, #160]	; (800af58 <LSM6DSOX_0_Probe+0x134>)
 800aeb6:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM6DSOX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSOX_COMMON_Driver;
 800aeb8:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <LSM6DSOX_0_Probe+0x140>)
 800aeba:	4a2b      	ldr	r2, [pc, #172]	; (800af68 <LSM6DSOX_0_Probe+0x144>)
 800aebc:	60da      	str	r2, [r3, #12]

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d019      	beq.n	800aefc <LSM6DSOX_0_Probe+0xd8>
 800aec8:	7b3b      	ldrb	r3, [r7, #12]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d116      	bne.n	800aefc <LSM6DSOX_0_Probe+0xd8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSOX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_ACC_Driver;
 800aece:	4b27      	ldr	r3, [pc, #156]	; (800af6c <LSM6DSOX_0_Probe+0x148>)
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	4a27      	ldr	r2, [pc, #156]	; (800af70 <LSM6DSOX_0_Probe+0x14c>)
 800aed4:	3309      	adds	r3, #9
 800aed6:	4927      	ldr	r1, [pc, #156]	; (800af74 <LSM6DSOX_0_Probe+0x150>)
 800aed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800aedc:	4b21      	ldr	r3, [pc, #132]	; (800af64 <LSM6DSOX_0_Probe+0x140>)
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a1f      	ldr	r2, [pc, #124]	; (800af60 <LSM6DSOX_0_Probe+0x13c>)
 800aee4:	68d2      	ldr	r2, [r2, #12]
 800aee6:	4610      	mov	r0, r2
 800aee8:	4798      	blx	r3
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <LSM6DSOX_0_Probe+0xd4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aef0:	f06f 0304 	mvn.w	r3, #4
 800aef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aef6:	e001      	b.n	800aefc <LSM6DSOX_0_Probe+0xd8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aef8:	2300      	movs	r3, #0
 800aefa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	2b00      	cmp	r3, #0
 800af04:	d019      	beq.n	800af3a <LSM6DSOX_0_Probe+0x116>
 800af06:	7b7b      	ldrb	r3, [r7, #13]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d116      	bne.n	800af3a <LSM6DSOX_0_Probe+0x116>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSOX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_GYRO_Driver;
 800af0c:	4b17      	ldr	r3, [pc, #92]	; (800af6c <LSM6DSOX_0_Probe+0x148>)
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	4a17      	ldr	r2, [pc, #92]	; (800af70 <LSM6DSOX_0_Probe+0x14c>)
 800af12:	3309      	adds	r3, #9
 800af14:	4918      	ldr	r1, [pc, #96]	; (800af78 <LSM6DSOX_0_Probe+0x154>)
 800af16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LSM6DSOX_0]->Init(MotionCompObj[LSM6DSOX_0]) != LSM6DSOX_OK)
 800af1a:	4b12      	ldr	r3, [pc, #72]	; (800af64 <LSM6DSOX_0_Probe+0x140>)
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a0f      	ldr	r2, [pc, #60]	; (800af60 <LSM6DSOX_0_Probe+0x13c>)
 800af22:	68d2      	ldr	r2, [r2, #12]
 800af24:	4610      	mov	r0, r2
 800af26:	4798      	blx	r3
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <LSM6DSOX_0_Probe+0x112>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af2e:	f06f 0304 	mvn.w	r3, #4
 800af32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af34:	e001      	b.n	800af3a <LSM6DSOX_0_Probe+0x116>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
 800af38:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
  }

  return ret;
 800af3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3750      	adds	r7, #80	; 0x50
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	0800af7d 	.word	0x0800af7d
 800af48:	0800afed 	.word	0x0800afed
 800af4c:	0800b089 	.word	0x0800b089
 800af50:	0800b011 	.word	0x0800b011
 800af54:	08008eb9 	.word	0x08008eb9
 800af58:	20000a24 	.word	0x20000a24
 800af5c:	20000970 	.word	0x20000970
 800af60:	20000920 	.word	0x20000920
 800af64:	20000960 	.word	0x20000960
 800af68:	2000010c 	.word	0x2000010c
 800af6c:	200001ac 	.word	0x200001ac
 800af70:	20000930 	.word	0x20000930
 800af74:	2000011c 	.word	0x2000011c
 800af78:	20000140 	.word	0x20000140

0800af7c <BSP_LSM6DSOX_Init>:
/**
 * @brief  Initialize SPI bus for LSM6DSOX
 * @retval BSP status
 */
static int32_t BSP_LSM6DSOX_Init(void)
{  
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800af82:	f06f 0305 	mvn.w	r3, #5
 800af86:	61fb      	str	r3, [r7, #28]
  
  BSP_LSM6DSOX_CS_GPIO_CLK_ENABLE();
 800af88:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <BSP_LSM6DSOX_Init+0x68>)
 800af8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8c:	4a15      	ldr	r2, [pc, #84]	; (800afe4 <BSP_LSM6DSOX_Init+0x68>)
 800af8e:	f043 0310 	orr.w	r3, r3, #16
 800af92:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af94:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <BSP_LSM6DSOX_Init+0x68>)
 800af96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	607b      	str	r3, [r7, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
  
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afa0:	2300      	movs	r3, #0
 800afa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  
 800afa8:	2301      	movs	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = BSP_LSM6DSOX_CS_PIN;
 800afac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afb0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LSM6DSOX_CS_PORT, &GPIO_InitStruct);
 800afb2:	f107 0308 	add.w	r3, r7, #8
 800afb6:	4619      	mov	r1, r3
 800afb8:	480b      	ldr	r0, [pc, #44]	; (800afe8 <BSP_LSM6DSOX_Init+0x6c>)
 800afba:	f000 fbd7 	bl	800b76c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800afbe:	2201      	movs	r2, #1
 800afc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800afc4:	4808      	ldr	r0, [pc, #32]	; (800afe8 <BSP_LSM6DSOX_Init+0x6c>)
 800afc6:	f000 fe6d 	bl	800bca4 <HAL_GPIO_WritePin>

  if(BSP_SPI1_Init() == BSP_ERROR_NONE)
 800afca:	f7fd fea9 	bl	8008d20 <BSP_SPI1_Init>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <BSP_LSM6DSOX_Init+0x5c>
  {
    ret = BSP_ERROR_NONE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800afd8:	69fb      	ldr	r3, [r7, #28]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	40021000 	.word	0x40021000
 800afe8:	48001000 	.word	0x48001000

0800afec <BSP_LSM6DSOX_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LSM6DSOX
 * @retval BSP status
 */
static int32_t BSP_LSM6DSOX_DeInit(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800aff2:	f06f 0305 	mvn.w	r3, #5
 800aff6:	607b      	str	r3, [r7, #4]

  if(BSP_SPI1_DeInit() == BSP_ERROR_NONE)
 800aff8:	f7fd feb6 	bl	8008d68 <BSP_SPI1_DeInit>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <BSP_LSM6DSOX_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800b002:	2300      	movs	r3, #0
 800b004:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800b006:	687b      	ldr	r3, [r7, #4]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <BSP_LSM6DSOX_WriteReg>:

static int32_t BSP_LSM6DSOX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60ba      	str	r2, [r7, #8]
 800b018:	461a      	mov	r2, r3
 800b01a:	4603      	mov	r3, r0
 800b01c:	81fb      	strh	r3, [r7, #14]
 800b01e:	460b      	mov	r3, r1
 800b020:	81bb      	strh	r3, [r7, #12]
 800b022:	4613      	mov	r3, r2
 800b024:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800b026:	2300      	movs	r3, #0
 800b028:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800b02a:	89bb      	ldrh	r3, [r7, #12]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b030:	2200      	movs	r2, #0
 800b032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b036:	4813      	ldr	r0, [pc, #76]	; (800b084 <BSP_LSM6DSOX_WriteReg+0x74>)
 800b038:	f000 fe34 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800b03c:	f107 0313 	add.w	r3, r7, #19
 800b040:	2101      	movs	r1, #1
 800b042:	4618      	mov	r0, r3
 800b044:	f7fd fea8 	bl	8008d98 <BSP_SPI1_Send>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d002      	beq.n	800b054 <BSP_LSM6DSOX_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b04e:	f06f 0305 	mvn.w	r3, #5
 800b052:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI1_Send(pdata, len) != len)
 800b054:	88fb      	ldrh	r3, [r7, #6]
 800b056:	4619      	mov	r1, r3
 800b058:	68b8      	ldr	r0, [r7, #8]
 800b05a:	f7fd fe9d 	bl	8008d98 <BSP_SPI1_Send>
 800b05e:	4602      	mov	r2, r0
 800b060:	88fb      	ldrh	r3, [r7, #6]
 800b062:	429a      	cmp	r2, r3
 800b064:	d002      	beq.n	800b06c <BSP_LSM6DSOX_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b066:	f06f 0305 	mvn.w	r3, #5
 800b06a:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b06c:	2201      	movs	r2, #1
 800b06e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b072:	4804      	ldr	r0, [pc, #16]	; (800b084 <BSP_LSM6DSOX_WriteReg+0x74>)
 800b074:	f000 fe16 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800b078:	697b      	ldr	r3, [r7, #20]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	48001000 	.word	0x48001000

0800b088 <BSP_LSM6DSOX_ReadReg>:

static int32_t BSP_LSM6DSOX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60ba      	str	r2, [r7, #8]
 800b090:	461a      	mov	r2, r3
 800b092:	4603      	mov	r3, r0
 800b094:	81fb      	strh	r3, [r7, #14]
 800b096:	460b      	mov	r3, r1
 800b098:	81bb      	strh	r3, [r7, #12]
 800b09a:	4613      	mov	r3, r2
 800b09c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800b0a2:	89bb      	ldrh	r3, [r7, #12]
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800b0a8:	7cfb      	ldrb	r3, [r7, #19]
 800b0aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_RESET);
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b0b8:	4812      	ldr	r0, [pc, #72]	; (800b104 <BSP_LSM6DSOX_ReadReg+0x7c>)
 800b0ba:	f000 fdf3 	bl	800bca4 <HAL_GPIO_WritePin>

  if (BSP_SPI1_Send(&dataReg, 1) != 1)
 800b0be:	f107 0313 	add.w	r3, r7, #19
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fd fe67 	bl	8008d98 <BSP_SPI1_Send>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d002      	beq.n	800b0d6 <BSP_LSM6DSOX_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b0d0:	f06f 0305 	mvn.w	r3, #5
 800b0d4:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI1_Recv(pdata, len) != len)
 800b0d6:	88fb      	ldrh	r3, [r7, #6]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	68b8      	ldr	r0, [r7, #8]
 800b0dc:	f7fd fe78 	bl	8008dd0 <BSP_SPI1_Recv>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	88fb      	ldrh	r3, [r7, #6]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d002      	beq.n	800b0ee <BSP_LSM6DSOX_ReadReg+0x66>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b0e8:	f06f 0305 	mvn.w	r3, #5
 800b0ec:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LSM6DSOX_CS_PORT, BSP_LSM6DSOX_CS_PIN, GPIO_PIN_SET);
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b0f4:	4803      	ldr	r0, [pc, #12]	; (800b104 <BSP_LSM6DSOX_ReadReg+0x7c>)
 800b0f6:	f000 fdd5 	bl	800bca4 <HAL_GPIO_WritePin>

  return ret;
 800b0fa:	697b      	ldr	r3, [r7, #20]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	48001000 	.word	0x48001000

0800b108 <BSP_MOTION_SENSOR_Get_DRDY_Status>:
 *         - MOTION_ACCELERO for instance LIS2DW12_0
 * @param  Status the pointer to the status
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Get_DRDY_Status(uint32_t Instance, uint32_t Function, uint8_t *Status)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b03      	cmp	r3, #3
 800b118:	f200 808f 	bhi.w	800b23a <BSP_MOTION_SENSOR_Get_DRDY_Status+0x132>
 800b11c:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x1c>)
 800b11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b122:	bf00      	nop
 800b124:	0800b135 	.word	0x0800b135
 800b128:	0800b205 	.word	0x0800b205
 800b12c:	0800b16b 	.word	0x0800b16b
 800b130:	0800b1a1 	.word	0x0800b1a1
  {
#if (USE_MOTION_SENSOR_LIS2DW12_0 == 1)
    case LIS2DW12_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d011      	beq.n	800b162 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x5a>
      {
        if (LIS2DW12_ACC_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800b13e:	4a43      	ldr	r2, [pc, #268]	; (800b24c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x144>)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f7 fac9 	bl	80026e0 <LIS2DW12_ACC_Get_DRDY_Status>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x54>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b154:	f06f 0304 	mvn.w	r3, #4
 800b158:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 800b15a:	e072      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
          ret = BSP_ERROR_NONE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	617b      	str	r3, [r7, #20]
      break;
 800b160:	e06f      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b162:	f06f 0304 	mvn.w	r3, #4
 800b166:	617b      	str	r3, [r7, #20]
      break;
 800b168:	e06b      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
#endif
      
#if (USE_MOTION_SENSOR_LIS3DHH_0 == 1)
   case LIS3DHH_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f003 0302 	and.w	r3, r3, #2
 800b170:	2b00      	cmp	r3, #0
 800b172:	d011      	beq.n	800b198 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x90>
      {
        if (LIS3DHH_ACC_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800b174:	4a35      	ldr	r2, [pc, #212]	; (800b24c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x144>)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f9 fb22 	bl	80047c8 <LIS3DHH_ACC_Get_DRDY_Status>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x8a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b18a:	f06f 0304 	mvn.w	r3, #4
 800b18e:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 800b190:	e057      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
          ret = BSP_ERROR_NONE;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
      break;
 800b196:	e054      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b198:	f06f 0304 	mvn.w	r3, #4
 800b19c:	617b      	str	r3, [r7, #20]
      break;
 800b19e:	e050      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
#endif
    
#if (USE_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case LSM6DSOX_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d011      	beq.n	800b1ce <BSP_MOTION_SENSOR_Get_DRDY_Status+0xc6>
      {
        if (LSM6DSOX_ACC_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800b1aa:	4a28      	ldr	r2, [pc, #160]	; (800b24c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x144>)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fb fbcb 	bl	8006950 <LSM6DSOX_ACC_Get_DRDY_Status>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <BSP_MOTION_SENSOR_Get_DRDY_Status+0xc0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1c0:	f06f 0304 	mvn.w	r3, #4
 800b1c4:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 800b1c6:	e03c      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
          ret = BSP_ERROR_NONE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
      break;
 800b1cc:	e039      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d011      	beq.n	800b1fc <BSP_MOTION_SENSOR_Get_DRDY_Status+0xf4>
        if (LSM6DSOX_GYRO_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800b1d8:	4a1c      	ldr	r2, [pc, #112]	; (800b24c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x144>)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fb fbca 	bl	800697c <LSM6DSOX_GYRO_Get_DRDY_Status>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <BSP_MOTION_SENSOR_Get_DRDY_Status+0xee>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1ee:	f06f 0304 	mvn.w	r3, #4
 800b1f2:	617b      	str	r3, [r7, #20]
      break;
 800b1f4:	e025      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
          ret = BSP_ERROR_NONE;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
      break;
 800b1fa:	e022      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1fc:	f06f 0304 	mvn.w	r3, #4
 800b200:	617b      	str	r3, [r7, #20]
      break;
 800b202:	e01e      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
#endif

#if (USE_MOTION_SENSOR_LIS2MDL_0 == 1)
    case LIS2MDL_0:
      if ((Function & MOTION_MAGNETO) == MOTION_MAGNETO)
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f003 0304 	and.w	r3, r3, #4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d011      	beq.n	800b232 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x12a>
      {
        if (LIS2MDL_MAG_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800b20e:	4a0f      	ldr	r2, [pc, #60]	; (800b24c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x144>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f8 fbb7 	bl	800398c <LIS2MDL_MAG_Get_DRDY_Status>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <BSP_MOTION_SENSOR_Get_DRDY_Status+0x124>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b224:	f06f 0304 	mvn.w	r3, #4
 800b228:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 800b22a:	e00a      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
          ret = BSP_ERROR_NONE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	617b      	str	r3, [r7, #20]
      break;
 800b230:	e007      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b232:	f06f 0304 	mvn.w	r3, #4
 800b236:	617b      	str	r3, [r7, #20]
      break;
 800b238:	e003      	b.n	800b242 <BSP_MOTION_SENSOR_Get_DRDY_Status+0x13a>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b23a:	f06f 0301 	mvn.w	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
      break;
 800b240:	bf00      	nop
  }

  return ret;
 800b242:	697b      	ldr	r3, [r7, #20]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20000920 	.word	0x20000920

0800b250 <BSP_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	460b      	mov	r3, r1
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b03      	cmp	r3, #3
 800b262:	d857      	bhi.n	800b314 <BSP_MOTION_SENSOR_Read_Register+0xc4>
 800b264:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <BSP_MOTION_SENSOR_Read_Register+0x1c>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b2ef 	.word	0x0800b2ef
 800b274:	0800b2a3 	.word	0x0800b2a3
 800b278:	0800b2c9 	.word	0x0800b2c9
  {
#if (USE_MOTION_SENSOR_LIS2DW12_0 == 1)
    case LIS2DW12_0:
      if (LIS2DW12_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b27c:	4a2a      	ldr	r2, [pc, #168]	; (800b328 <BSP_MOTION_SENSOR_Read_Register+0xd8>)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b284:	7af9      	ldrb	r1, [r7, #11]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7f7 f9f4 	bl	8002676 <LIS2DW12_Read_Reg>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <BSP_MOTION_SENSOR_Read_Register+0x4c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b294:	f06f 0304 	mvn.w	r3, #4
 800b298:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b29a:	e03f      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
      break;
 800b2a0:	e03c      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
#endif
      
#if (USE_MOTION_SENSOR_LIS3DHH_0 == 1)
    case LIS3DHH_0:
      if (LIS3DHH_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b2a2:	4a21      	ldr	r2, [pc, #132]	; (800b328 <BSP_MOTION_SENSOR_Read_Register+0xd8>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2aa:	7af9      	ldrb	r1, [r7, #11]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f9 fa55 	bl	800475e <LIS3DHH_Read_Reg>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <BSP_MOTION_SENSOR_Read_Register+0x72>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2ba:	f06f 0304 	mvn.w	r3, #4
 800b2be:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b2c0:	e02c      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
      break;
 800b2c6:	e029      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
#endif      
      
#if (USE_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case LSM6DSOX_0:
      if (LSM6DSOX_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b2c8:	4a17      	ldr	r2, [pc, #92]	; (800b328 <BSP_MOTION_SENSOR_Read_Register+0xd8>)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2d0:	7af9      	ldrb	r1, [r7, #11]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fb fb06 	bl	80068e6 <LSM6DSOX_Read_Reg>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <BSP_MOTION_SENSOR_Read_Register+0x98>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2e0:	f06f 0304 	mvn.w	r3, #4
 800b2e4:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b2e6:	e019      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
      break;
 800b2ec:	e016      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
#endif
      
#if (USE_MOTION_SENSOR_LIS2MDL_0 == 1)
    case LIS2MDL_0:
      if (LIS2MDL_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b2ee:	4a0e      	ldr	r2, [pc, #56]	; (800b328 <BSP_MOTION_SENSOR_Read_Register+0xd8>)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2f6:	7af9      	ldrb	r1, [r7, #11]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7f8 faf1 	bl	80038e2 <LIS2MDL_Read_Reg>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <BSP_MOTION_SENSOR_Read_Register+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b306:	f06f 0304 	mvn.w	r3, #4
 800b30a:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b30c:	e006      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
      break;
 800b312:	e003      	b.n	800b31c <BSP_MOTION_SENSOR_Read_Register+0xcc>
#endif 

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b314:	f06f 0301 	mvn.w	r3, #1
 800b318:	617b      	str	r3, [r7, #20]
      break;
 800b31a:	bf00      	nop
  }

  return ret;
 800b31c:	697b      	ldr	r3, [r7, #20]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20000920 	.word	0x20000920

0800b32c <BSP_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
 800b338:	4613      	mov	r3, r2
 800b33a:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d856      	bhi.n	800b3f0 <BSP_MOTION_SENSOR_Write_Register+0xc4>
 800b342:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <BSP_MOTION_SENSOR_Write_Register+0x1c>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b3cb 	.word	0x0800b3cb
 800b350:	0800b37f 	.word	0x0800b37f
 800b354:	0800b3a5 	.word	0x0800b3a5
  {
#if (USE_MOTION_SENSOR_LIS2DW12_0 == 1)
    case LIS2DW12_0:
      if (LIS2DW12_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b358:	4a2a      	ldr	r2, [pc, #168]	; (800b404 <BSP_MOTION_SENSOR_Write_Register+0xd8>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b360:	78ba      	ldrb	r2, [r7, #2]
 800b362:	78f9      	ldrb	r1, [r7, #3]
 800b364:	4618      	mov	r0, r3
 800b366:	f7f7 f9a0 	bl	80026aa <LIS2DW12_Write_Reg>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <BSP_MOTION_SENSOR_Write_Register+0x4c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b370:	f06f 0304 	mvn.w	r3, #4
 800b374:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b376:	e03f      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b378:	2300      	movs	r3, #0
 800b37a:	60fb      	str	r3, [r7, #12]
      break;
 800b37c:	e03c      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
#endif
      
#if (USE_MOTION_SENSOR_LIS3DHH_0 == 1)
    case LIS3DHH_0:
      if (LIS3DHH_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b37e:	4a21      	ldr	r2, [pc, #132]	; (800b404 <BSP_MOTION_SENSOR_Write_Register+0xd8>)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b386:	78ba      	ldrb	r2, [r7, #2]
 800b388:	78f9      	ldrb	r1, [r7, #3]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f9 fa01 	bl	8004792 <LIS3DHH_Write_Reg>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <BSP_MOTION_SENSOR_Write_Register+0x72>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b396:	f06f 0304 	mvn.w	r3, #4
 800b39a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b39c:	e02c      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60fb      	str	r3, [r7, #12]
      break;
 800b3a2:	e029      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
#endif      
      
#if (USE_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case LSM6DSOX_0:
      if (LSM6DSOX_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b3a4:	4a17      	ldr	r2, [pc, #92]	; (800b404 <BSP_MOTION_SENSOR_Write_Register+0xd8>)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ac:	78ba      	ldrb	r2, [r7, #2]
 800b3ae:	78f9      	ldrb	r1, [r7, #3]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fb fab2 	bl	800691a <LSM6DSOX_Write_Reg>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <BSP_MOTION_SENSOR_Write_Register+0x98>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3bc:	f06f 0304 	mvn.w	r3, #4
 800b3c0:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b3c2:	e019      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60fb      	str	r3, [r7, #12]
      break;
 800b3c8:	e016      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
#endif

#if (USE_MOTION_SENSOR_LIS2MDL_0 == 1)
    case LIS2MDL_0:
      if (LIS2MDL_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800b3ca:	4a0e      	ldr	r2, [pc, #56]	; (800b404 <BSP_MOTION_SENSOR_Write_Register+0xd8>)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d2:	78ba      	ldrb	r2, [r7, #2]
 800b3d4:	78f9      	ldrb	r1, [r7, #3]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f8 faad 	bl	8003936 <LIS2MDL_Write_Reg>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <BSP_MOTION_SENSOR_Write_Register+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3e2:	f06f 0304 	mvn.w	r3, #4
 800b3e6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800b3e8:	e006      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
        ret = BSP_ERROR_NONE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
      break;
 800b3ee:	e003      	b.n	800b3f8 <BSP_MOTION_SENSOR_Write_Register+0xcc>
#endif      

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b3f0:	f06f 0301 	mvn.w	r3, #1
 800b3f4:	60fb      	str	r3, [r7, #12]
      break;
 800b3f6:	bf00      	nop
  }

  return ret;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000920 	.word	0x20000920

0800b408 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b412:	2003      	movs	r0, #3
 800b414:	f000 f968 	bl	800b6e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b418:	200f      	movs	r0, #15
 800b41a:	f000 f815 	bl	800b448 <HAL_InitTick>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	71fb      	strb	r3, [r7, #7]
 800b428:	e001      	b.n	800b42e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b42a:	f000 f805 	bl	800b438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b42e:	79fb      	ldrb	r3, [r7, #7]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800b438:	b480      	push	{r7}
 800b43a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
	...

0800b448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b454:	4b17      	ldr	r3, [pc, #92]	; (800b4b4 <HAL_InitTick+0x6c>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d023      	beq.n	800b4a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b45c:	4b16      	ldr	r3, [pc, #88]	; (800b4b8 <HAL_InitTick+0x70>)
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	4b14      	ldr	r3, [pc, #80]	; (800b4b4 <HAL_InitTick+0x6c>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	4619      	mov	r1, r3
 800b466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b46a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b472:	4618      	mov	r0, r3
 800b474:	f000 f96d 	bl	800b752 <HAL_SYSTICK_Config>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10f      	bne.n	800b49e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b0f      	cmp	r3, #15
 800b482:	d809      	bhi.n	800b498 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b484:	2200      	movs	r2, #0
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b48c:	f000 f937 	bl	800b6fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b490:	4a0a      	ldr	r2, [pc, #40]	; (800b4bc <HAL_InitTick+0x74>)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	e007      	b.n	800b4a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e004      	b.n	800b4a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	73fb      	strb	r3, [r7, #15]
 800b4a2:	e001      	b.n	800b4a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	200001c4 	.word	0x200001c4
 800b4b8:	20000468 	.word	0x20000468
 800b4bc:	200001c0 	.word	0x200001c0

0800b4c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <HAL_IncTick+0x20>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <HAL_IncTick+0x24>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	4a04      	ldr	r2, [pc, #16]	; (800b4e4 <HAL_IncTick+0x24>)
 800b4d2:	6013      	str	r3, [r2, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	200001c4 	.word	0x200001c4
 800b4e4:	20000a5c 	.word	0x20000a5c

0800b4e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  return uwTick;
 800b4ec:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <HAL_GetTick+0x14>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20000a5c 	.word	0x20000a5c

0800b500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b508:	f7ff ffee 	bl	800b4e8 <HAL_GetTick>
 800b50c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b518:	d005      	beq.n	800b526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <HAL_Delay+0x44>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4413      	add	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b526:	bf00      	nop
 800b528:	f7ff ffde 	bl	800b4e8 <HAL_GetTick>
 800b52c:	4602      	mov	r2, r0
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	429a      	cmp	r2, r3
 800b536:	d8f7      	bhi.n	800b528 <HAL_Delay+0x28>
  {
  }
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	200001c4 	.word	0x200001c4

0800b548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <__NVIC_SetPriorityGrouping+0x44>)
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b564:	4013      	ands	r3, r2
 800b566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b57a:	4a04      	ldr	r2, [pc, #16]	; (800b58c <__NVIC_SetPriorityGrouping+0x44>)
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	60d3      	str	r3, [r2, #12]
}
 800b580:	bf00      	nop
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	e000ed00 	.word	0xe000ed00

0800b590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b594:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <__NVIC_GetPriorityGrouping+0x18>)
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	0a1b      	lsrs	r3, r3, #8
 800b59a:	f003 0307 	and.w	r3, r3, #7
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	e000ed00 	.word	0xe000ed00

0800b5ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	db0b      	blt.n	800b5d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	f003 021f 	and.w	r2, r3, #31
 800b5c4:	4907      	ldr	r1, [pc, #28]	; (800b5e4 <__NVIC_EnableIRQ+0x38>)
 800b5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5ca:	095b      	lsrs	r3, r3, #5
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	fa00 f202 	lsl.w	r2, r0, r2
 800b5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	e000e100 	.word	0xe000e100

0800b5e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	db0a      	blt.n	800b612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	490c      	ldr	r1, [pc, #48]	; (800b634 <__NVIC_SetPriority+0x4c>)
 800b602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b606:	0112      	lsls	r2, r2, #4
 800b608:	b2d2      	uxtb	r2, r2
 800b60a:	440b      	add	r3, r1
 800b60c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b610:	e00a      	b.n	800b628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	b2da      	uxtb	r2, r3
 800b616:	4908      	ldr	r1, [pc, #32]	; (800b638 <__NVIC_SetPriority+0x50>)
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	3b04      	subs	r3, #4
 800b620:	0112      	lsls	r2, r2, #4
 800b622:	b2d2      	uxtb	r2, r2
 800b624:	440b      	add	r3, r1
 800b626:	761a      	strb	r2, [r3, #24]
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	e000e100 	.word	0xe000e100
 800b638:	e000ed00 	.word	0xe000ed00

0800b63c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b089      	sub	sp, #36	; 0x24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f1c3 0307 	rsb	r3, r3, #7
 800b656:	2b04      	cmp	r3, #4
 800b658:	bf28      	it	cs
 800b65a:	2304      	movcs	r3, #4
 800b65c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	3304      	adds	r3, #4
 800b662:	2b06      	cmp	r3, #6
 800b664:	d902      	bls.n	800b66c <NVIC_EncodePriority+0x30>
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	3b03      	subs	r3, #3
 800b66a:	e000      	b.n	800b66e <NVIC_EncodePriority+0x32>
 800b66c:	2300      	movs	r3, #0
 800b66e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	fa02 f303 	lsl.w	r3, r2, r3
 800b67a:	43da      	mvns	r2, r3
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	401a      	ands	r2, r3
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	fa01 f303 	lsl.w	r3, r1, r3
 800b68e:	43d9      	mvns	r1, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b694:	4313      	orrs	r3, r2
         );
}
 800b696:	4618      	mov	r0, r3
 800b698:	3724      	adds	r7, #36	; 0x24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
	...

0800b6a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6b4:	d301      	bcc.n	800b6ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e00f      	b.n	800b6da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b6ba:	4a0a      	ldr	r2, [pc, #40]	; (800b6e4 <SysTick_Config+0x40>)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b6c2:	210f      	movs	r1, #15
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c8:	f7ff ff8e 	bl	800b5e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b6cc:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <SysTick_Config+0x40>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b6d2:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <SysTick_Config+0x40>)
 800b6d4:	2207      	movs	r2, #7
 800b6d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	e000e010 	.word	0xe000e010

0800b6e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff ff29 	bl	800b548 <__NVIC_SetPriorityGrouping>
}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b086      	sub	sp, #24
 800b702:	af00      	add	r7, sp, #0
 800b704:	4603      	mov	r3, r0
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
 800b70a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b70c:	2300      	movs	r3, #0
 800b70e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b710:	f7ff ff3e 	bl	800b590 <__NVIC_GetPriorityGrouping>
 800b714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	6978      	ldr	r0, [r7, #20]
 800b71c:	f7ff ff8e 	bl	800b63c <NVIC_EncodePriority>
 800b720:	4602      	mov	r2, r0
 800b722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff ff5d 	bl	800b5e8 <__NVIC_SetPriority>
}
 800b72e:	bf00      	nop
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	4603      	mov	r3, r0
 800b73e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff ff31 	bl	800b5ac <__NVIC_EnableIRQ>
}
 800b74a:	bf00      	nop
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff ffa2 	bl	800b6a4 <SysTick_Config>
 800b760:	4603      	mov	r3, r0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
	...

0800b76c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b77a:	e166      	b.n	800ba4a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	2101      	movs	r1, #1
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	fa01 f303 	lsl.w	r3, r1, r3
 800b788:	4013      	ands	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 8158 	beq.w	800ba44 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	f003 0303 	and.w	r3, r3, #3
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d005      	beq.n	800b7ac <HAL_GPIO_Init+0x40>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f003 0303 	and.w	r3, r3, #3
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d130      	bne.n	800b80e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	2203      	movs	r2, #3
 800b7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7bc:	43db      	mvns	r3, r3
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	005b      	lsls	r3, r3, #1
 800b7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	43db      	mvns	r3, r3
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	091b      	lsrs	r3, r3, #4
 800b7f8:	f003 0201 	and.w	r2, r3, #1
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f003 0303 	and.w	r3, r3, #3
 800b816:	2b03      	cmp	r3, #3
 800b818:	d017      	beq.n	800b84a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	2203      	movs	r2, #3
 800b826:	fa02 f303 	lsl.w	r3, r2, r3
 800b82a:	43db      	mvns	r3, r3
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	4013      	ands	r3, r2
 800b830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	fa02 f303 	lsl.w	r3, r2, r3
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	4313      	orrs	r3, r2
 800b842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b02      	cmp	r3, #2
 800b854:	d123      	bne.n	800b89e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	08da      	lsrs	r2, r3, #3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3208      	adds	r2, #8
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	220f      	movs	r2, #15
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	43db      	mvns	r3, r3
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	4013      	ands	r3, r2
 800b878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	691a      	ldr	r2, [r3, #16]
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	08da      	lsrs	r2, r3, #3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3208      	adds	r2, #8
 800b898:	6939      	ldr	r1, [r7, #16]
 800b89a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	2203      	movs	r2, #3
 800b8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ae:	43db      	mvns	r3, r3
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f003 0203 	and.w	r2, r3, #3
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 80b2 	beq.w	800ba44 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8e0:	4b61      	ldr	r3, [pc, #388]	; (800ba68 <HAL_GPIO_Init+0x2fc>)
 800b8e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8e4:	4a60      	ldr	r2, [pc, #384]	; (800ba68 <HAL_GPIO_Init+0x2fc>)
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	6613      	str	r3, [r2, #96]	; 0x60
 800b8ec:	4b5e      	ldr	r3, [pc, #376]	; (800ba68 <HAL_GPIO_Init+0x2fc>)
 800b8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	60bb      	str	r3, [r7, #8]
 800b8f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b8f8:	4a5c      	ldr	r2, [pc, #368]	; (800ba6c <HAL_GPIO_Init+0x300>)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	089b      	lsrs	r3, r3, #2
 800b8fe:	3302      	adds	r3, #2
 800b900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b904:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f003 0303 	and.w	r3, r3, #3
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	220f      	movs	r2, #15
 800b910:	fa02 f303 	lsl.w	r3, r2, r3
 800b914:	43db      	mvns	r3, r3
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4013      	ands	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b922:	d02b      	beq.n	800b97c <HAL_GPIO_Init+0x210>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a52      	ldr	r2, [pc, #328]	; (800ba70 <HAL_GPIO_Init+0x304>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d025      	beq.n	800b978 <HAL_GPIO_Init+0x20c>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a51      	ldr	r2, [pc, #324]	; (800ba74 <HAL_GPIO_Init+0x308>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d01f      	beq.n	800b974 <HAL_GPIO_Init+0x208>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a50      	ldr	r2, [pc, #320]	; (800ba78 <HAL_GPIO_Init+0x30c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d019      	beq.n	800b970 <HAL_GPIO_Init+0x204>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a4f      	ldr	r2, [pc, #316]	; (800ba7c <HAL_GPIO_Init+0x310>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d013      	beq.n	800b96c <HAL_GPIO_Init+0x200>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a4e      	ldr	r2, [pc, #312]	; (800ba80 <HAL_GPIO_Init+0x314>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d00d      	beq.n	800b968 <HAL_GPIO_Init+0x1fc>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a4d      	ldr	r2, [pc, #308]	; (800ba84 <HAL_GPIO_Init+0x318>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d007      	beq.n	800b964 <HAL_GPIO_Init+0x1f8>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a4c      	ldr	r2, [pc, #304]	; (800ba88 <HAL_GPIO_Init+0x31c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d101      	bne.n	800b960 <HAL_GPIO_Init+0x1f4>
 800b95c:	2307      	movs	r3, #7
 800b95e:	e00e      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b960:	2308      	movs	r3, #8
 800b962:	e00c      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b964:	2306      	movs	r3, #6
 800b966:	e00a      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b968:	2305      	movs	r3, #5
 800b96a:	e008      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b96c:	2304      	movs	r3, #4
 800b96e:	e006      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b970:	2303      	movs	r3, #3
 800b972:	e004      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b974:	2302      	movs	r3, #2
 800b976:	e002      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <HAL_GPIO_Init+0x212>
 800b97c:	2300      	movs	r3, #0
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	f002 0203 	and.w	r2, r2, #3
 800b984:	0092      	lsls	r2, r2, #2
 800b986:	4093      	lsls	r3, r2
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b98e:	4937      	ldr	r1, [pc, #220]	; (800ba6c <HAL_GPIO_Init+0x300>)
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	089b      	lsrs	r3, r3, #2
 800b994:	3302      	adds	r3, #2
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b99c:	4b3b      	ldr	r3, [pc, #236]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	43db      	mvns	r3, r3
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b9c0:	4a32      	ldr	r2, [pc, #200]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b9c6:	4b31      	ldr	r3, [pc, #196]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	43db      	mvns	r3, r3
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b9ea:	4a28      	ldr	r2, [pc, #160]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b9f0:	4b26      	ldr	r3, [pc, #152]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	43db      	mvns	r3, r3
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ba14:	4a1d      	ldr	r2, [pc, #116]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800ba1a:	4b1c      	ldr	r3, [pc, #112]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	43db      	mvns	r3, r3
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	4013      	ands	r3, r2
 800ba28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ba3e:	4a13      	ldr	r2, [pc, #76]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	3301      	adds	r3, #1
 800ba48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	fa22 f303 	lsr.w	r3, r2, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f47f ae91 	bne.w	800b77c <HAL_GPIO_Init+0x10>
  }
}
 800ba5a:	bf00      	nop
 800ba5c:	bf00      	nop
 800ba5e:	371c      	adds	r7, #28
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	40021000 	.word	0x40021000
 800ba6c:	40010000 	.word	0x40010000
 800ba70:	48000400 	.word	0x48000400
 800ba74:	48000800 	.word	0x48000800
 800ba78:	48000c00 	.word	0x48000c00
 800ba7c:	48001000 	.word	0x48001000
 800ba80:	48001400 	.word	0x48001400
 800ba84:	48001800 	.word	0x48001800
 800ba88:	48001c00 	.word	0x48001c00
 800ba8c:	40010400 	.word	0x40010400

0800ba90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b087      	sub	sp, #28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ba9e:	e0c9      	b.n	800bc34 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800baa0:	2201      	movs	r2, #1
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	fa02 f303 	lsl.w	r3, r2, r3
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	4013      	ands	r3, r2
 800baac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80bc 	beq.w	800bc2e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800bab6:	4a66      	ldr	r2, [pc, #408]	; (800bc50 <HAL_GPIO_DeInit+0x1c0>)
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	089b      	lsrs	r3, r3, #2
 800babc:	3302      	adds	r3, #2
 800babe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f003 0303 	and.w	r3, r3, #3
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	220f      	movs	r2, #15
 800bace:	fa02 f303 	lsl.w	r3, r2, r3
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	4013      	ands	r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bade:	d02b      	beq.n	800bb38 <HAL_GPIO_DeInit+0xa8>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a5c      	ldr	r2, [pc, #368]	; (800bc54 <HAL_GPIO_DeInit+0x1c4>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d025      	beq.n	800bb34 <HAL_GPIO_DeInit+0xa4>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a5b      	ldr	r2, [pc, #364]	; (800bc58 <HAL_GPIO_DeInit+0x1c8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d01f      	beq.n	800bb30 <HAL_GPIO_DeInit+0xa0>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a5a      	ldr	r2, [pc, #360]	; (800bc5c <HAL_GPIO_DeInit+0x1cc>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d019      	beq.n	800bb2c <HAL_GPIO_DeInit+0x9c>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a59      	ldr	r2, [pc, #356]	; (800bc60 <HAL_GPIO_DeInit+0x1d0>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d013      	beq.n	800bb28 <HAL_GPIO_DeInit+0x98>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a58      	ldr	r2, [pc, #352]	; (800bc64 <HAL_GPIO_DeInit+0x1d4>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00d      	beq.n	800bb24 <HAL_GPIO_DeInit+0x94>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a57      	ldr	r2, [pc, #348]	; (800bc68 <HAL_GPIO_DeInit+0x1d8>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d007      	beq.n	800bb20 <HAL_GPIO_DeInit+0x90>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a56      	ldr	r2, [pc, #344]	; (800bc6c <HAL_GPIO_DeInit+0x1dc>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d101      	bne.n	800bb1c <HAL_GPIO_DeInit+0x8c>
 800bb18:	2307      	movs	r3, #7
 800bb1a:	e00e      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	e00c      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb20:	2306      	movs	r3, #6
 800bb22:	e00a      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb24:	2305      	movs	r3, #5
 800bb26:	e008      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb28:	2304      	movs	r3, #4
 800bb2a:	e006      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e004      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb30:	2302      	movs	r3, #2
 800bb32:	e002      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <HAL_GPIO_DeInit+0xaa>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	f002 0203 	and.w	r2, r2, #3
 800bb40:	0092      	lsls	r2, r2, #2
 800bb42:	4093      	lsls	r3, r2
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d132      	bne.n	800bbb0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bb4a:	4b49      	ldr	r3, [pc, #292]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	43db      	mvns	r3, r3
 800bb52:	4947      	ldr	r1, [pc, #284]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bb58:	4b45      	ldr	r3, [pc, #276]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	43db      	mvns	r3, r3
 800bb60:	4943      	ldr	r1, [pc, #268]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb62:	4013      	ands	r3, r2
 800bb64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800bb66:	4b42      	ldr	r3, [pc, #264]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb68:	68da      	ldr	r2, [r3, #12]
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	43db      	mvns	r3, r3
 800bb6e:	4940      	ldr	r1, [pc, #256]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb70:	4013      	ands	r3, r2
 800bb72:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800bb74:	4b3e      	ldr	r3, [pc, #248]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb76:	689a      	ldr	r2, [r3, #8]
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	43db      	mvns	r3, r3
 800bb7c:	493c      	ldr	r1, [pc, #240]	; (800bc70 <HAL_GPIO_DeInit+0x1e0>)
 800bb7e:	4013      	ands	r3, r2
 800bb80:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	220f      	movs	r2, #15
 800bb8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800bb92:	4a2f      	ldr	r2, [pc, #188]	; (800bc50 <HAL_GPIO_DeInit+0x1c0>)
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	089b      	lsrs	r3, r3, #2
 800bb98:	3302      	adds	r3, #2
 800bb9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	43da      	mvns	r2, r3
 800bba2:	482b      	ldr	r0, [pc, #172]	; (800bc50 <HAL_GPIO_DeInit+0x1c0>)
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	089b      	lsrs	r3, r3, #2
 800bba8:	400a      	ands	r2, r1
 800bbaa:	3302      	adds	r3, #2
 800bbac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	2103      	movs	r1, #3
 800bbba:	fa01 f303 	lsl.w	r3, r1, r3
 800bbbe:	431a      	orrs	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	08da      	lsrs	r2, r3, #3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3208      	adds	r2, #8
 800bbcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f003 0307 	and.w	r3, r3, #7
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	220f      	movs	r2, #15
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	43db      	mvns	r3, r3
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	08d2      	lsrs	r2, r2, #3
 800bbe4:	4019      	ands	r1, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3208      	adds	r2, #8
 800bbea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	689a      	ldr	r2, [r3, #8]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	2103      	movs	r1, #3
 800bbf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfc:	43db      	mvns	r3, r3
 800bbfe:	401a      	ands	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	2101      	movs	r1, #1
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc10:	43db      	mvns	r3, r3
 800bc12:	401a      	ands	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	2103      	movs	r1, #3
 800bc22:	fa01 f303 	lsl.w	r3, r1, r3
 800bc26:	43db      	mvns	r3, r3
 800bc28:	401a      	ands	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	3301      	adds	r3, #1
 800bc32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f47f af2f 	bne.w	800baa0 <HAL_GPIO_DeInit+0x10>
  }
}
 800bc42:	bf00      	nop
 800bc44:	bf00      	nop
 800bc46:	371c      	adds	r7, #28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	40010000 	.word	0x40010000
 800bc54:	48000400 	.word	0x48000400
 800bc58:	48000800 	.word	0x48000800
 800bc5c:	48000c00 	.word	0x48000c00
 800bc60:	48001000 	.word	0x48001000
 800bc64:	48001400 	.word	0x48001400
 800bc68:	48001800 	.word	0x48001800
 800bc6c:	48001c00 	.word	0x48001c00
 800bc70:	40010400 	.word	0x40010400

0800bc74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	887b      	ldrh	r3, [r7, #2]
 800bc86:	4013      	ands	r3, r2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	73fb      	strb	r3, [r7, #15]
 800bc90:	e001      	b.n	800bc96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	807b      	strh	r3, [r7, #2]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bcb4:	787b      	ldrb	r3, [r7, #1]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bcba:	887a      	ldrh	r2, [r7, #2]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bcc0:	e002      	b.n	800bcc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bcc2:	887a      	ldrh	r2, [r7, #2]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bce6:	887a      	ldrh	r2, [r7, #2]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4013      	ands	r3, r2
 800bcec:	041a      	lsls	r2, r3, #16
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	43d9      	mvns	r1, r3
 800bcf2:	887b      	ldrh	r3, [r7, #2]
 800bcf4:	400b      	ands	r3, r1
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	619a      	str	r2, [r3, #24]
}
 800bcfc:	bf00      	nop
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800bd12:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd14:	695a      	ldr	r2, [r3, #20]
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	4013      	ands	r3, r2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d006      	beq.n	800bd2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd1e:	4a05      	ldr	r2, [pc, #20]	; (800bd34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd20:	88fb      	ldrh	r3, [r7, #6]
 800bd22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f008 f8ca 	bl	8013ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	40010400 	.word	0x40010400

0800bd38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d101      	bne.n	800bd4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e081      	b.n	800be4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d106      	bne.n	800bd64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f8a8 	bl	800beb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2224      	movs	r2, #36	; 0x24
 800bd68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bd88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bd98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d107      	bne.n	800bdb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdae:	609a      	str	r2, [r3, #8]
 800bdb0:	e006      	b.n	800bdc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bdbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d104      	bne.n	800bdd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bde0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bde4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bdf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691a      	ldr	r2, [r3, #16]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	69d9      	ldr	r1, [r3, #28]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a1a      	ldr	r2, [r3, #32]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f042 0201 	orr.w	r2, r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2220      	movs	r2, #32
 800be3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b082      	sub	sp, #8
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e021      	b.n	800beac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2224      	movs	r2, #36	; 0x24
 800be6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f022 0201 	bic.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f821 	bl	800bec8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bed0:	bf00      	nop
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b088      	sub	sp, #32
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	4608      	mov	r0, r1
 800bee6:	4611      	mov	r1, r2
 800bee8:	461a      	mov	r2, r3
 800beea:	4603      	mov	r3, r0
 800beec:	817b      	strh	r3, [r7, #10]
 800beee:	460b      	mov	r3, r1
 800bef0:	813b      	strh	r3, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b20      	cmp	r3, #32
 800bf00:	f040 80f9 	bne.w	800c0f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <HAL_I2C_Mem_Write+0x34>
 800bf0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d105      	bne.n	800bf1c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e0ed      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d101      	bne.n	800bf2a <HAL_I2C_Mem_Write+0x4e>
 800bf26:	2302      	movs	r3, #2
 800bf28:	e0e6      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf32:	f7ff fad9 	bl	800b4e8 <HAL_GetTick>
 800bf36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	2319      	movs	r3, #25
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 fad1 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e0d1      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2221      	movs	r2, #33	; 0x21
 800bf58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2240      	movs	r2, #64	; 0x40
 800bf60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6a3a      	ldr	r2, [r7, #32]
 800bf6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bf7c:	88f8      	ldrh	r0, [r7, #6]
 800bf7e:	893a      	ldrh	r2, [r7, #8]
 800bf80:	8979      	ldrh	r1, [r7, #10]
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f9e1 	bl	800c354 <I2C_RequestMemoryWrite>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d005      	beq.n	800bfa4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e0a9      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	2bff      	cmp	r3, #255	; 0xff
 800bfac:	d90e      	bls.n	800bfcc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	22ff      	movs	r2, #255	; 0xff
 800bfb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	8979      	ldrh	r1, [r7, #10]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f000 fc39 	bl	800c83c <I2C_TransferConfig>
 800bfca:	e00f      	b.n	800bfec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	8979      	ldrh	r1, [r7, #10]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 fc28 	bl	800c83c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 fabb 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e07b      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	3b01      	subs	r3, #1
 800c01e:	b29a      	uxth	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c028:	3b01      	subs	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c034:	b29b      	uxth	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d034      	beq.n	800c0a4 <HAL_I2C_Mem_Write+0x1c8>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d130      	bne.n	800c0a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	2200      	movs	r2, #0
 800c04a:	2180      	movs	r1, #128	; 0x80
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 fa4d 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e04d      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c060:	b29b      	uxth	r3, r3
 800c062:	2bff      	cmp	r3, #255	; 0xff
 800c064:	d90e      	bls.n	800c084 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	22ff      	movs	r2, #255	; 0xff
 800c06a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c070:	b2da      	uxtb	r2, r3
 800c072:	8979      	ldrh	r1, [r7, #10]
 800c074:	2300      	movs	r3, #0
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 fbdd 	bl	800c83c <I2C_TransferConfig>
 800c082:	e00f      	b.n	800c0a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c088:	b29a      	uxth	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c092:	b2da      	uxtb	r2, r3
 800c094:	8979      	ldrh	r1, [r7, #10]
 800c096:	2300      	movs	r3, #0
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 fbcc 	bl	800c83c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d19e      	bne.n	800bfec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 fa9a 	bl	800c5ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e01a      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6859      	ldr	r1, [r3, #4]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <HAL_I2C_Mem_Write+0x224>)
 800c0d6:	400b      	ands	r3, r1
 800c0d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e000      	b.n	800c0f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c0f6:	2302      	movs	r3, #2
  }
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	fe00e800 	.word	0xfe00e800

0800c104 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af02      	add	r7, sp, #8
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	4608      	mov	r0, r1
 800c10e:	4611      	mov	r1, r2
 800c110:	461a      	mov	r2, r3
 800c112:	4603      	mov	r3, r0
 800c114:	817b      	strh	r3, [r7, #10]
 800c116:	460b      	mov	r3, r1
 800c118:	813b      	strh	r3, [r7, #8]
 800c11a:	4613      	mov	r3, r2
 800c11c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b20      	cmp	r3, #32
 800c128:	f040 80fd 	bne.w	800c326 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <HAL_I2C_Mem_Read+0x34>
 800c132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c134:	2b00      	cmp	r3, #0
 800c136:	d105      	bne.n	800c144 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c13e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e0f1      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d101      	bne.n	800c152 <HAL_I2C_Mem_Read+0x4e>
 800c14e:	2302      	movs	r3, #2
 800c150:	e0ea      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c15a:	f7ff f9c5 	bl	800b4e8 <HAL_GetTick>
 800c15e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	2319      	movs	r3, #25
 800c166:	2201      	movs	r2, #1
 800c168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 f9bd 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e0d5      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2222      	movs	r2, #34	; 0x22
 800c180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2240      	movs	r2, #64	; 0x40
 800c188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6a3a      	ldr	r2, [r7, #32]
 800c196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c19c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c1a4:	88f8      	ldrh	r0, [r7, #6]
 800c1a6:	893a      	ldrh	r2, [r7, #8]
 800c1a8:	8979      	ldrh	r1, [r7, #10]
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f921 	bl	800c3fc <I2C_RequestMemoryRead>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d005      	beq.n	800c1cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e0ad      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2bff      	cmp	r3, #255	; 0xff
 800c1d4:	d90e      	bls.n	800c1f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	22ff      	movs	r2, #255	; 0xff
 800c1da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	8979      	ldrh	r1, [r7, #10]
 800c1e4:	4b52      	ldr	r3, [pc, #328]	; (800c330 <HAL_I2C_Mem_Read+0x22c>)
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 fb25 	bl	800c83c <I2C_TransferConfig>
 800c1f2:	e00f      	b.n	800c214 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c202:	b2da      	uxtb	r2, r3
 800c204:	8979      	ldrh	r1, [r7, #10]
 800c206:	4b4a      	ldr	r3, [pc, #296]	; (800c330 <HAL_I2C_Mem_Read+0x22c>)
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 fb14 	bl	800c83c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	2200      	movs	r2, #0
 800c21c:	2104      	movs	r1, #4
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 f964 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d001      	beq.n	800c22e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e07c      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	b2d2      	uxtb	r2, r2
 800c23a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c24a:	3b01      	subs	r3, #1
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c256:	b29b      	uxth	r3, r3
 800c258:	3b01      	subs	r3, #1
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c264:	b29b      	uxth	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d034      	beq.n	800c2d4 <HAL_I2C_Mem_Read+0x1d0>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d130      	bne.n	800c2d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	2200      	movs	r2, #0
 800c27a:	2180      	movs	r1, #128	; 0x80
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f000 f935 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	e04d      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c290:	b29b      	uxth	r3, r3
 800c292:	2bff      	cmp	r3, #255	; 0xff
 800c294:	d90e      	bls.n	800c2b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	22ff      	movs	r2, #255	; 0xff
 800c29a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	8979      	ldrh	r1, [r7, #10]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 fac5 	bl	800c83c <I2C_TransferConfig>
 800c2b2:	e00f      	b.n	800c2d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	8979      	ldrh	r1, [r7, #10]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fab4 	bl	800c83c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d19a      	bne.n	800c214 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 f982 	bl	800c5ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d001      	beq.n	800c2f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e01a      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6859      	ldr	r1, [r3, #4]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <HAL_I2C_Mem_Read+0x230>)
 800c306:	400b      	ands	r3, r1
 800c308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	e000      	b.n	800c328 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c326:	2302      	movs	r3, #2
  }
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	80002400 	.word	0x80002400
 800c334:	fe00e800 	.word	0xfe00e800

0800c338 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c346:	b2db      	uxtb	r3, r3
}
 800c348:	4618      	mov	r0, r3
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af02      	add	r7, sp, #8
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	4608      	mov	r0, r1
 800c35e:	4611      	mov	r1, r2
 800c360:	461a      	mov	r2, r3
 800c362:	4603      	mov	r3, r0
 800c364:	817b      	strh	r3, [r7, #10]
 800c366:	460b      	mov	r3, r1
 800c368:	813b      	strh	r3, [r7, #8]
 800c36a:	4613      	mov	r3, r2
 800c36c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c36e:	88fb      	ldrh	r3, [r7, #6]
 800c370:	b2da      	uxtb	r2, r3
 800c372:	8979      	ldrh	r1, [r7, #10]
 800c374:	4b20      	ldr	r3, [pc, #128]	; (800c3f8 <I2C_RequestMemoryWrite+0xa4>)
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 fa5d 	bl	800c83c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c382:	69fa      	ldr	r2, [r7, #28]
 800c384:	69b9      	ldr	r1, [r7, #24]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 f8f0 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e02c      	b.n	800c3f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d105      	bne.n	800c3a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c39c:	893b      	ldrh	r3, [r7, #8]
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	629a      	str	r2, [r3, #40]	; 0x28
 800c3a6:	e015      	b.n	800c3d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c3a8:	893b      	ldrh	r3, [r7, #8]
 800c3aa:	0a1b      	lsrs	r3, r3, #8
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	69b9      	ldr	r1, [r7, #24]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 f8d6 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e012      	b.n	800c3f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c3ca:	893b      	ldrh	r3, [r7, #8]
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	2180      	movs	r1, #128	; 0x80
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f000 f884 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e000      	b.n	800c3f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	80002000 	.word	0x80002000

0800c3fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	4608      	mov	r0, r1
 800c406:	4611      	mov	r1, r2
 800c408:	461a      	mov	r2, r3
 800c40a:	4603      	mov	r3, r0
 800c40c:	817b      	strh	r3, [r7, #10]
 800c40e:	460b      	mov	r3, r1
 800c410:	813b      	strh	r3, [r7, #8]
 800c412:	4613      	mov	r3, r2
 800c414:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c416:	88fb      	ldrh	r3, [r7, #6]
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	8979      	ldrh	r1, [r7, #10]
 800c41c:	4b20      	ldr	r3, [pc, #128]	; (800c4a0 <I2C_RequestMemoryRead+0xa4>)
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	2300      	movs	r3, #0
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f000 fa0a 	bl	800c83c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	69b9      	ldr	r1, [r7, #24]
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f000 f89d 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e02c      	b.n	800c496 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c43c:	88fb      	ldrh	r3, [r7, #6]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d105      	bne.n	800c44e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c442:	893b      	ldrh	r3, [r7, #8]
 800c444:	b2da      	uxtb	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	629a      	str	r2, [r3, #40]	; 0x28
 800c44c:	e015      	b.n	800c47a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c44e:	893b      	ldrh	r3, [r7, #8]
 800c450:	0a1b      	lsrs	r3, r3, #8
 800c452:	b29b      	uxth	r3, r3
 800c454:	b2da      	uxtb	r2, r3
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	69b9      	ldr	r1, [r7, #24]
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 f883 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e012      	b.n	800c496 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c470:	893b      	ldrh	r3, [r7, #8]
 800c472:	b2da      	uxtb	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	2200      	movs	r2, #0
 800c482:	2140      	movs	r1, #64	; 0x40
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 f831 	bl	800c4ec <I2C_WaitOnFlagUntilTimeout>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e000      	b.n	800c496 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	80002000 	.word	0x80002000

0800c4a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	f003 0302 	and.w	r3, r3, #2
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d103      	bne.n	800c4c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d007      	beq.n	800c4e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	699a      	ldr	r2, [r3, #24]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f042 0201 	orr.w	r2, r2, #1
 800c4de:	619a      	str	r2, [r3, #24]
  }
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4fc:	e022      	b.n	800c544 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c504:	d01e      	beq.n	800c544 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c506:	f7fe ffef 	bl	800b4e8 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d302      	bcc.n	800c51c <I2C_WaitOnFlagUntilTimeout+0x30>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d113      	bne.n	800c544 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c520:	f043 0220 	orr.w	r2, r3, #32
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	e00f      	b.n	800c564 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	699a      	ldr	r2, [r3, #24]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	4013      	ands	r3, r2
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	429a      	cmp	r2, r3
 800c552:	bf0c      	ite	eq
 800c554:	2301      	moveq	r3, #1
 800c556:	2300      	movne	r3, #0
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	461a      	mov	r2, r3
 800c55c:	79fb      	ldrb	r3, [r7, #7]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d0cd      	beq.n	800c4fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c578:	e02c      	b.n	800c5d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 f870 	bl	800c664 <I2C_IsErrorOccurred>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d001      	beq.n	800c58e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e02a      	b.n	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c594:	d01e      	beq.n	800c5d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c596:	f7fe ffa7 	bl	800b4e8 <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d302      	bcc.n	800c5ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d113      	bne.n	800c5d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5b0:	f043 0220 	orr.w	r2, r3, #32
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e007      	b.n	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	f003 0302 	and.w	r3, r3, #2
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d1cb      	bne.n	800c57a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5f8:	e028      	b.n	800c64c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 f830 	bl	800c664 <I2C_IsErrorOccurred>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e026      	b.n	800c65c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c60e:	f7fe ff6b 	bl	800b4e8 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d302      	bcc.n	800c624 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d113      	bne.n	800c64c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c628:	f043 0220 	orr.w	r2, r3, #32
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2220      	movs	r2, #32
 800c634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e007      	b.n	800c65c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	f003 0320 	and.w	r3, r3, #32
 800c656:	2b20      	cmp	r3, #32
 800c658:	d1cf      	bne.n	800c5fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	; 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d075      	beq.n	800c77c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2210      	movs	r2, #16
 800c696:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c698:	e056      	b.n	800c748 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6a0:	d052      	beq.n	800c748 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c6a2:	f7fe ff21 	bl	800b4e8 <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d302      	bcc.n	800c6b8 <I2C_IsErrorOccurred+0x54>
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d147      	bne.n	800c748 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6da:	d12e      	bne.n	800c73a <I2C_IsErrorOccurred+0xd6>
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6e2:	d02a      	beq.n	800c73a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800c6e4:	7cfb      	ldrb	r3, [r7, #19]
 800c6e6:	2b20      	cmp	r3, #32
 800c6e8:	d027      	beq.n	800c73a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c6fa:	f7fe fef5 	bl	800b4e8 <HAL_GetTick>
 800c6fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c700:	e01b      	b.n	800c73a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c702:	f7fe fef1 	bl	800b4e8 <HAL_GetTick>
 800c706:	4602      	mov	r2, r0
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	2b19      	cmp	r3, #25
 800c70e:	d914      	bls.n	800c73a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c714:	f043 0220 	orr.w	r2, r3, #32
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2220      	movs	r2, #32
 800c720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	f003 0320 	and.w	r3, r3, #32
 800c744:	2b20      	cmp	r3, #32
 800c746:	d1dc      	bne.n	800c702 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	f003 0320 	and.w	r3, r3, #32
 800c752:	2b20      	cmp	r3, #32
 800c754:	d003      	beq.n	800c75e <I2C_IsErrorOccurred+0xfa>
 800c756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d09d      	beq.n	800c69a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c762:	2b00      	cmp	r3, #0
 800c764:	d103      	bne.n	800c76e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2220      	movs	r2, #32
 800c76c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	f043 0304 	orr.w	r3, r3, #4
 800c774:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	f043 0301 	orr.w	r3, r3, #1
 800c794:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c79e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00b      	beq.n	800c7c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	f043 0308 	orr.w	r3, r3, #8
 800c7b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c7c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00b      	beq.n	800c7ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	f043 0302 	orr.w	r3, r3, #2
 800c7d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d01c      	beq.n	800c82c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff fe56 	bl	800c4a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6859      	ldr	r1, [r3, #4]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <I2C_IsErrorOccurred+0x1d4>)
 800c804:	400b      	ands	r3, r1
 800c806:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	431a      	orrs	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2220      	movs	r2, #32
 800c818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c830:	4618      	mov	r0, r3
 800c832:	3728      	adds	r7, #40	; 0x28
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	fe00e800 	.word	0xfe00e800

0800c83c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	607b      	str	r3, [r7, #4]
 800c846:	460b      	mov	r3, r1
 800c848:	817b      	strh	r3, [r7, #10]
 800c84a:	4613      	mov	r3, r2
 800c84c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c84e:	897b      	ldrh	r3, [r7, #10]
 800c850:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c854:	7a7b      	ldrb	r3, [r7, #9]
 800c856:	041b      	lsls	r3, r3, #16
 800c858:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c85c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	4313      	orrs	r3, r2
 800c866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c86a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	6a3b      	ldr	r3, [r7, #32]
 800c874:	0d5b      	lsrs	r3, r3, #21
 800c876:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c87a:	4b08      	ldr	r3, [pc, #32]	; (800c89c <I2C_TransferConfig+0x60>)
 800c87c:	430b      	orrs	r3, r1
 800c87e:	43db      	mvns	r3, r3
 800c880:	ea02 0103 	and.w	r1, r2, r3
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	430a      	orrs	r2, r1
 800c88c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c88e:	bf00      	nop
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	03ff63ff 	.word	0x03ff63ff

0800c8a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b20      	cmp	r3, #32
 800c8b4:	d138      	bne.n	800c928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d101      	bne.n	800c8c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	e032      	b.n	800c92a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2224      	movs	r2, #36	; 0x24
 800c8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 0201 	bic.w	r2, r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c8f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6819      	ldr	r1, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f042 0201 	orr.w	r2, r2, #1
 800c912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2220      	movs	r2, #32
 800c918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	e000      	b.n	800c92a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c928:	2302      	movs	r3, #2
  }
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c936:	b480      	push	{r7}
 800c938:	b085      	sub	sp, #20
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b20      	cmp	r3, #32
 800c94a:	d139      	bne.n	800c9c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c952:	2b01      	cmp	r3, #1
 800c954:	d101      	bne.n	800c95a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c956:	2302      	movs	r3, #2
 800c958:	e033      	b.n	800c9c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2224      	movs	r2, #36	; 0x24
 800c966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f022 0201 	bic.w	r2, r2, #1
 800c978:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c988:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4313      	orrs	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f042 0201 	orr.w	r2, r2, #1
 800c9aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2220      	movs	r2, #32
 800c9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	e000      	b.n	800c9c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c9c0:	2302      	movs	r3, #2
  }
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9d0:	b08f      	sub	sp, #60	; 0x3c
 800c9d2:	af0a      	add	r7, sp, #40	; 0x28
 800c9d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e116      	b.n	800cc0e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d106      	bne.n	800ca00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f008 fdb4 	bl	8015568 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2203      	movs	r2, #3
 800ca04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f004 fc4f 	bl	80112c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	603b      	str	r3, [r7, #0]
 800ca2a:	687e      	ldr	r6, [r7, #4]
 800ca2c:	466d      	mov	r5, sp
 800ca2e:	f106 0410 	add.w	r4, r6, #16
 800ca32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ca3e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca42:	1d33      	adds	r3, r6, #4
 800ca44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca46:	6838      	ldr	r0, [r7, #0]
 800ca48:	f004 fb62 	bl	8011110 <USB_CoreInit>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d005      	beq.n	800ca5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e0d7      	b.n	800cc0e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2100      	movs	r1, #0
 800ca64:	4618      	mov	r0, r3
 800ca66:	f004 fc3d 	bl	80112e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	73fb      	strb	r3, [r7, #15]
 800ca6e:	e04a      	b.n	800cb06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ca70:	7bfa      	ldrb	r2, [r7, #15]
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	4613      	mov	r3, r2
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	1a9b      	subs	r3, r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	440b      	add	r3, r1
 800ca7e:	333d      	adds	r3, #61	; 0x3d
 800ca80:	2201      	movs	r2, #1
 800ca82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ca84:	7bfa      	ldrb	r2, [r7, #15]
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	1a9b      	subs	r3, r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	440b      	add	r3, r1
 800ca92:	333c      	adds	r3, #60	; 0x3c
 800ca94:	7bfa      	ldrb	r2, [r7, #15]
 800ca96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ca98:	7bfa      	ldrb	r2, [r7, #15]
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	b298      	uxth	r0, r3
 800ca9e:	6879      	ldr	r1, [r7, #4]
 800caa0:	4613      	mov	r3, r2
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	1a9b      	subs	r3, r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	440b      	add	r3, r1
 800caaa:	3342      	adds	r3, #66	; 0x42
 800caac:	4602      	mov	r2, r0
 800caae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cab0:	7bfa      	ldrb	r2, [r7, #15]
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	4613      	mov	r3, r2
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	1a9b      	subs	r3, r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	440b      	add	r3, r1
 800cabe:	333f      	adds	r3, #63	; 0x3f
 800cac0:	2200      	movs	r2, #0
 800cac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cac4:	7bfa      	ldrb	r2, [r7, #15]
 800cac6:	6879      	ldr	r1, [r7, #4]
 800cac8:	4613      	mov	r3, r2
 800caca:	00db      	lsls	r3, r3, #3
 800cacc:	1a9b      	subs	r3, r3, r2
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	440b      	add	r3, r1
 800cad2:	3344      	adds	r3, #68	; 0x44
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cad8:	7bfa      	ldrb	r2, [r7, #15]
 800cada:	6879      	ldr	r1, [r7, #4]
 800cadc:	4613      	mov	r3, r2
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	1a9b      	subs	r3, r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	440b      	add	r3, r1
 800cae6:	3348      	adds	r3, #72	; 0x48
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800caec:	7bfa      	ldrb	r2, [r7, #15]
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	4613      	mov	r3, r2
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	1a9b      	subs	r3, r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	440b      	add	r3, r1
 800cafa:	3350      	adds	r3, #80	; 0x50
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	3301      	adds	r3, #1
 800cb04:	73fb      	strb	r3, [r7, #15]
 800cb06:	7bfa      	ldrb	r2, [r7, #15]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d3af      	bcc.n	800ca70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb10:	2300      	movs	r3, #0
 800cb12:	73fb      	strb	r3, [r7, #15]
 800cb14:	e044      	b.n	800cba0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cb16:	7bfa      	ldrb	r2, [r7, #15]
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	1a9b      	subs	r3, r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	440b      	add	r3, r1
 800cb24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800cb28:	2200      	movs	r2, #0
 800cb2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cb2c:	7bfa      	ldrb	r2, [r7, #15]
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4613      	mov	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	1a9b      	subs	r3, r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	440b      	add	r3, r1
 800cb3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cb3e:	7bfa      	ldrb	r2, [r7, #15]
 800cb40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cb42:	7bfa      	ldrb	r2, [r7, #15]
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	4613      	mov	r3, r2
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	1a9b      	subs	r3, r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	440b      	add	r3, r1
 800cb50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb54:	2200      	movs	r2, #0
 800cb56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cb58:	7bfa      	ldrb	r2, [r7, #15]
 800cb5a:	6879      	ldr	r1, [r7, #4]
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cb6e:	7bfa      	ldrb	r2, [r7, #15]
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4613      	mov	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	1a9b      	subs	r3, r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cb84:	7bfa      	ldrb	r2, [r7, #15]
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	1a9b      	subs	r3, r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	440b      	add	r3, r1
 800cb92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cb96:	2200      	movs	r2, #0
 800cb98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	73fb      	strb	r3, [r7, #15]
 800cba0:	7bfa      	ldrb	r2, [r7, #15]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d3b5      	bcc.n	800cb16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	687e      	ldr	r6, [r7, #4]
 800cbb2:	466d      	mov	r5, sp
 800cbb4:	f106 0410 	add.w	r4, r6, #16
 800cbb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cbc4:	e885 0003 	stmia.w	r5, {r0, r1}
 800cbc8:	1d33      	adds	r3, r6, #4
 800cbca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbcc:	6838      	ldr	r0, [r7, #0]
 800cbce:	f004 fbd5 	bl	801137c <USB_DevInit>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d005      	beq.n	800cbe4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2202      	movs	r2, #2
 800cbdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e014      	b.n	800cc0e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d102      	bne.n	800cc02 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 ff57 	bl	800dab0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f005 fba7 	bl	801235a <USB_DevDisconnect>

  return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b084      	sub	sp, #16
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d101      	bne.n	800cc32 <HAL_PCD_Start+0x1c>
 800cc2e:	2302      	movs	r3, #2
 800cc30:	e01c      	b.n	800cc6c <HAL_PCD_Start+0x56>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d105      	bne.n	800cc4e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f004 fb24 	bl	80112a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f005 fb5b 	bl	8012318 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cc74:	b590      	push	{r4, r7, lr}
 800cc76:	b08d      	sub	sp, #52	; 0x34
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f005 fc19 	bl	80124c2 <USB_GetMode>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f040 8384 	bne.w	800d3a0 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f005 fb7d 	bl	801239c <USB_ReadInterrupts>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f000 837a 	beq.w	800d39e <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f005 fb74 	bl	801239c <USB_ReadInterrupts>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	f003 0302 	and.w	r3, r3, #2
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d107      	bne.n	800ccce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	695a      	ldr	r2, [r3, #20]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f002 0202 	and.w	r2, r2, #2
 800cccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f005 fb62 	bl	801239c <USB_ReadInterrupts>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f003 0310 	and.w	r3, r3, #16
 800ccde:	2b10      	cmp	r3, #16
 800cce0:	d161      	bne.n	800cda6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	699a      	ldr	r2, [r3, #24]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f022 0210 	bic.w	r2, r2, #16
 800ccf0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	f003 020f 	and.w	r2, r3, #15
 800ccfe:	4613      	mov	r3, r2
 800cd00:	00db      	lsls	r3, r3, #3
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	3304      	adds	r3, #4
 800cd10:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	0c5b      	lsrs	r3, r3, #17
 800cd16:	f003 030f 	and.w	r3, r3, #15
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d124      	bne.n	800cd68 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800cd1e:	69ba      	ldr	r2, [r7, #24]
 800cd20:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800cd24:	4013      	ands	r3, r2
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d035      	beq.n	800cd96 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	091b      	lsrs	r3, r3, #4
 800cd32:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cd34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	6a38      	ldr	r0, [r7, #32]
 800cd3e:	f005 f999 	bl	8012074 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	091b      	lsrs	r3, r3, #4
 800cd4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd4e:	441a      	add	r2, r3
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	699a      	ldr	r2, [r3, #24]
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	091b      	lsrs	r3, r3, #4
 800cd5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd60:	441a      	add	r2, r3
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	619a      	str	r2, [r3, #24]
 800cd66:	e016      	b.n	800cd96 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	0c5b      	lsrs	r3, r3, #17
 800cd6c:	f003 030f 	and.w	r3, r3, #15
 800cd70:	2b06      	cmp	r3, #6
 800cd72:	d110      	bne.n	800cd96 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd7a:	2208      	movs	r2, #8
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6a38      	ldr	r0, [r7, #32]
 800cd80:	f005 f978 	bl	8012074 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	699a      	ldr	r2, [r3, #24]
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	091b      	lsrs	r3, r3, #4
 800cd8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd90:	441a      	add	r2, r3
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f042 0210 	orr.w	r2, r2, #16
 800cda4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f005 faf6 	bl	801239c <USB_ReadInterrupts>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cdba:	d16e      	bne.n	800ce9a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f005 fafc 	bl	80123c2 <USB_ReadDevAllOutEpInterrupt>
 800cdca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800cdcc:	e062      	b.n	800ce94 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d057      	beq.n	800ce88 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdde:	b2d2      	uxtb	r2, r2
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f005 fb21 	bl	801242a <USB_ReadDevOutEPInterrupt>
 800cde8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00c      	beq.n	800ce0e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce00:	461a      	mov	r2, r3
 800ce02:	2301      	movs	r3, #1
 800ce04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ce06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fd77 	bl	800d8fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f003 0308 	and.w	r3, r3, #8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00c      	beq.n	800ce32 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce24:	461a      	mov	r2, r3
 800ce26:	2308      	movs	r3, #8
 800ce28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ce2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fdb3 	bl	800d998 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f003 0310 	and.w	r3, r3, #16
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d008      	beq.n	800ce4e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce48:	461a      	mov	r2, r3
 800ce4a:	2310      	movs	r3, #16
 800ce4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f003 0320 	and.w	r3, r3, #32
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d008      	beq.n	800ce6a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	015a      	lsls	r2, r3, #5
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	4413      	add	r3, r2
 800ce60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce64:	461a      	mov	r2, r3
 800ce66:	2320      	movs	r3, #32
 800ce68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d009      	beq.n	800ce88 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	015a      	lsls	r2, r3, #5
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce80:	461a      	mov	r2, r3
 800ce82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	085b      	lsrs	r3, r3, #1
 800ce92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d199      	bne.n	800cdce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f005 fa7c 	bl	801239c <USB_ReadInterrupts>
 800cea4:	4603      	mov	r3, r0
 800cea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ceaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ceae:	f040 808c 	bne.w	800cfca <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f005 fa9d 	bl	80123f6 <USB_ReadDevAllInEpInterrupt>
 800cebc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800cec2:	e07e      	b.n	800cfc2 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d073      	beq.n	800cfb6 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced4:	b2d2      	uxtb	r2, r2
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f005 fac4 	bl	8012466 <USB_ReadDevInEPInterrupt>
 800cede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d020      	beq.n	800cf2c <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	f003 030f 	and.w	r3, r3, #15
 800cef0:	2201      	movs	r2, #1
 800cef2:	fa02 f303 	lsl.w	r3, r2, r3
 800cef6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	43db      	mvns	r3, r3
 800cf04:	69f9      	ldr	r1, [r7, #28]
 800cf06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f008 fe15 	bl	8015b56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	f003 0308 	and.w	r3, r3, #8
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d008      	beq.n	800cf48 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	015a      	lsls	r2, r3, #5
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf42:	461a      	mov	r2, r3
 800cf44:	2308      	movs	r3, #8
 800cf46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f003 0310 	and.w	r3, r3, #16
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d008      	beq.n	800cf64 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5e:	461a      	mov	r2, r3
 800cf60:	2310      	movs	r3, #16
 800cf62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d008      	beq.n	800cf80 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	015a      	lsls	r2, r3, #5
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	4413      	add	r3, r2
 800cf76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	2340      	movs	r3, #64	; 0x40
 800cf7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00c      	beq.n	800cfa4 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800cf8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf8c:	6a38      	ldr	r0, [r7, #32]
 800cf8e:	f004 fb41 	bl	8011614 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf94:	015a      	lsls	r2, r3, #5
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	4413      	add	r3, r2
 800cf9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cfae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fc1a 	bl	800d7ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	3301      	adds	r3, #1
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	085b      	lsrs	r3, r3, #1
 800cfc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f47f af7d 	bne.w	800cec4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f005 f9e4 	bl	801239c <USB_ReadInterrupts>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfde:	d122      	bne.n	800d026 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	69fa      	ldr	r2, [r7, #28]
 800cfea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfee:	f023 0301 	bic.w	r3, r3, #1
 800cff2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d108      	bne.n	800d010 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d006:	2100      	movs	r1, #0
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fd75 	bl	800daf8 <HAL_PCDEx_LPM_Callback>
 800d00e:	e002      	b.n	800d016 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f008 fdeb 	bl	8015bec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	695a      	ldr	r2, [r3, #20]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f005 f9b6 	bl	801239c <USB_ReadInterrupts>
 800d030:	4603      	mov	r3, r0
 800d032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d03a:	d112      	bne.n	800d062 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d102      	bne.n	800d052 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f008 fdbf 	bl	8015bd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	695a      	ldr	r2, [r3, #20]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d060:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4618      	mov	r0, r3
 800d068:	f005 f998 	bl	801239c <USB_ReadInterrupts>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d076:	d121      	bne.n	800d0bc <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	695a      	ldr	r2, [r3, #20]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800d086:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d111      	bne.n	800d0b6 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a0:	089b      	lsrs	r3, r3, #2
 800d0a2:	f003 020f 	and.w	r2, r3, #15
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fd22 	bl	800daf8 <HAL_PCDEx_LPM_Callback>
 800d0b4:	e002      	b.n	800d0bc <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f008 fd8a 	bl	8015bd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f005 f96b 	bl	801239c <USB_ReadInterrupts>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0d0:	f040 80b5 	bne.w	800d23e <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	69fa      	ldr	r2, [r7, #28]
 800d0de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0e2:	f023 0301 	bic.w	r3, r3, #1
 800d0e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2110      	movs	r1, #16
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f004 fa90 	bl	8011614 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0f8:	e046      	b.n	800d188 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	015a      	lsls	r2, r3, #5
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	4413      	add	r3, r2
 800d102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d106:	461a      	mov	r2, r3
 800d108:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d10c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	015a      	lsls	r2, r3, #5
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	4413      	add	r3, r2
 800d116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d11e:	0151      	lsls	r1, r2, #5
 800d120:	69fa      	ldr	r2, [r7, #28]
 800d122:	440a      	add	r2, r1
 800d124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d12c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d130:	015a      	lsls	r2, r3, #5
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	4413      	add	r3, r2
 800d136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13a:	461a      	mov	r2, r3
 800d13c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d140:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	015a      	lsls	r2, r3, #5
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	4413      	add	r3, r2
 800d14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d152:	0151      	lsls	r1, r2, #5
 800d154:	69fa      	ldr	r2, [r7, #28]
 800d156:	440a      	add	r2, r1
 800d158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d15c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d160:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	015a      	lsls	r2, r3, #5
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	4413      	add	r3, r2
 800d16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d172:	0151      	lsls	r1, r2, #5
 800d174:	69fa      	ldr	r2, [r7, #28]
 800d176:	440a      	add	r2, r1
 800d178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d17c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d180:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	3301      	adds	r3, #1
 800d186:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d18e:	429a      	cmp	r2, r3
 800d190:	d3b3      	bcc.n	800d0fa <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	69fa      	ldr	r2, [r7, #28]
 800d19c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d1a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d016      	beq.n	800d1dc <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1b8:	69fa      	ldr	r2, [r7, #28]
 800d1ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1be:	f043 030b 	orr.w	r3, r3, #11
 800d1c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ce:	69fa      	ldr	r2, [r7, #28]
 800d1d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1d4:	f043 030b 	orr.w	r3, r3, #11
 800d1d8:	6453      	str	r3, [r2, #68]	; 0x44
 800d1da:	e015      	b.n	800d208 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e2:	695b      	ldr	r3, [r3, #20]
 800d1e4:	69fa      	ldr	r2, [r7, #28]
 800d1e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800d1f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	69fa      	ldr	r2, [r7, #28]
 800d1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d202:	f043 030b 	orr.w	r3, r3, #11
 800d206:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	69fa      	ldr	r2, [r7, #28]
 800d212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d216:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d21a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d226:	4619      	mov	r1, r3
 800d228:	4610      	mov	r0, r2
 800d22a:	f005 f97b 	bl	8012524 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	695a      	ldr	r2, [r3, #20]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d23c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4618      	mov	r0, r3
 800d244:	f005 f8aa 	bl	801239c <USB_ReadInterrupts>
 800d248:	4603      	mov	r3, r0
 800d24a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d24e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d252:	d124      	bne.n	800d29e <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f005 f940 	bl	80124de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4618      	mov	r0, r3
 800d264:	f004 fa4f 	bl	8011706 <USB_GetDevSpeed>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681c      	ldr	r4, [r3, #0]
 800d274:	f001 fa88 	bl	800e788 <HAL_RCC_GetHCLKFreq>
 800d278:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	461a      	mov	r2, r3
 800d282:	4620      	mov	r0, r4
 800d284:	f003 ff70 	bl	8011168 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f008 fc8c 	bl	8015ba6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	695a      	ldr	r2, [r3, #20]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d29c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f005 f87a 	bl	801239c <USB_ReadInterrupts>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f003 0308 	and.w	r3, r3, #8
 800d2ae:	2b08      	cmp	r3, #8
 800d2b0:	d10a      	bne.n	800d2c8 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f008 fc69 	bl	8015b8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	695a      	ldr	r2, [r3, #20]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f002 0208 	and.w	r2, r2, #8
 800d2c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f005 f865 	bl	801239c <USB_ReadInterrupts>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2dc:	d10f      	bne.n	800d2fe <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f008 fc9f 	bl	8015c2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	695a      	ldr	r2, [r3, #20]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d2fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4618      	mov	r0, r3
 800d304:	f005 f84a 	bl	801239c <USB_ReadInterrupts>
 800d308:	4603      	mov	r3, r0
 800d30a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d30e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d312:	d10f      	bne.n	800d334 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f008 fc72 	bl	8015c08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	695a      	ldr	r2, [r3, #20]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f005 f82f 	bl	801239c <USB_ReadInterrupts>
 800d33e:	4603      	mov	r3, r0
 800d340:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d348:	d10a      	bne.n	800d360 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f008 fc80 	bl	8015c50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	695a      	ldr	r2, [r3, #20]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d35e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4618      	mov	r0, r3
 800d366:	f005 f819 	bl	801239c <USB_ReadInterrupts>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f003 0304 	and.w	r3, r3, #4
 800d370:	2b04      	cmp	r3, #4
 800d372:	d115      	bne.n	800d3a0 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f008 fc70 	bl	8015c6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6859      	ldr	r1, [r3, #4]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	69ba      	ldr	r2, [r7, #24]
 800d398:	430a      	orrs	r2, r1
 800d39a:	605a      	str	r2, [r3, #4]
 800d39c:	e000      	b.n	800d3a0 <HAL_PCD_IRQHandler+0x72c>
      return;
 800d39e:	bf00      	nop
    }
  }
}
 800d3a0:	3734      	adds	r7, #52	; 0x34
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd90      	pop	{r4, r7, pc}

0800d3a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d101      	bne.n	800d3c0 <HAL_PCD_SetAddress+0x1a>
 800d3bc:	2302      	movs	r3, #2
 800d3be:	e013      	b.n	800d3e8 <HAL_PCD_SetAddress+0x42>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	78fa      	ldrb	r2, [r7, #3]
 800d3cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	78fa      	ldrb	r2, [r7, #3]
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f004 ff77 	bl	80122cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	4608      	mov	r0, r1
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4603      	mov	r3, r0
 800d400:	70fb      	strb	r3, [r7, #3]
 800d402:	460b      	mov	r3, r1
 800d404:	803b      	strh	r3, [r7, #0]
 800d406:	4613      	mov	r3, r2
 800d408:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d40e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d412:	2b00      	cmp	r3, #0
 800d414:	da0f      	bge.n	800d436 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	f003 020f 	and.w	r2, r3, #15
 800d41c:	4613      	mov	r3, r2
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	1a9b      	subs	r3, r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	3338      	adds	r3, #56	; 0x38
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	4413      	add	r3, r2
 800d42a:	3304      	adds	r3, #4
 800d42c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2201      	movs	r2, #1
 800d432:	705a      	strb	r2, [r3, #1]
 800d434:	e00f      	b.n	800d456 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	f003 020f 	and.w	r2, r3, #15
 800d43c:	4613      	mov	r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	1a9b      	subs	r3, r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	4413      	add	r3, r2
 800d44c:	3304      	adds	r3, #4
 800d44e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d456:	78fb      	ldrb	r3, [r7, #3]
 800d458:	f003 030f 	and.w	r3, r3, #15
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d462:	883a      	ldrh	r2, [r7, #0]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	78ba      	ldrb	r2, [r7, #2]
 800d46c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	785b      	ldrb	r3, [r3, #1]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d004      	beq.n	800d480 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d480:	78bb      	ldrb	r3, [r7, #2]
 800d482:	2b02      	cmp	r3, #2
 800d484:	d102      	bne.n	800d48c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d492:	2b01      	cmp	r3, #1
 800d494:	d101      	bne.n	800d49a <HAL_PCD_EP_Open+0xaa>
 800d496:	2302      	movs	r3, #2
 800d498:	e00e      	b.n	800d4b8 <HAL_PCD_EP_Open+0xc8>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f004 f94b 	bl	8011744 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d4b6:	7afb      	ldrb	r3, [r7, #11]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d4cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	da0f      	bge.n	800d4f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	f003 020f 	and.w	r2, r3, #15
 800d4da:	4613      	mov	r3, r2
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	1a9b      	subs	r3, r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	3338      	adds	r3, #56	; 0x38
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	705a      	strb	r2, [r3, #1]
 800d4f2:	e00f      	b.n	800d514 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d4f4:	78fb      	ldrb	r3, [r7, #3]
 800d4f6:	f003 020f 	and.w	r2, r3, #15
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	1a9b      	subs	r3, r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	3304      	adds	r3, #4
 800d50c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d514:	78fb      	ldrb	r3, [r7, #3]
 800d516:	f003 030f 	and.w	r3, r3, #15
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d526:	2b01      	cmp	r3, #1
 800d528:	d101      	bne.n	800d52e <HAL_PCD_EP_Close+0x6e>
 800d52a:	2302      	movs	r3, #2
 800d52c:	e00e      	b.n	800d54c <HAL_PCD_EP_Close+0x8c>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68f9      	ldr	r1, [r7, #12]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f004 f989 	bl	8011854 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	607a      	str	r2, [r7, #4]
 800d55e:	603b      	str	r3, [r7, #0]
 800d560:	460b      	mov	r3, r1
 800d562:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d564:	7afb      	ldrb	r3, [r7, #11]
 800d566:	f003 020f 	and.w	r2, r3, #15
 800d56a:	4613      	mov	r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	4413      	add	r3, r2
 800d57a:	3304      	adds	r3, #4
 800d57c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	2200      	movs	r2, #0
 800d58e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2200      	movs	r2, #0
 800d594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d596:	7afb      	ldrb	r3, [r7, #11]
 800d598:	f003 030f 	and.w	r3, r3, #15
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	f003 030f 	and.w	r3, r3, #15
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d106      	bne.n	800d5ba <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6979      	ldr	r1, [r7, #20]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f004 fc06 	bl	8011dc4 <USB_EP0StartXfer>
 800d5b8:	e005      	b.n	800d5c6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6979      	ldr	r1, [r7, #20]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f004 fa23 	bl	8011a0c <USB_EPStartXfer>
  }

  return HAL_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3718      	adds	r7, #24
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d5dc:	78fb      	ldrb	r3, [r7, #3]
 800d5de:	f003 020f 	and.w	r2, r3, #15
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	1a9b      	subs	r3, r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	440b      	add	r3, r1
 800d5ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d5f2:	681b      	ldr	r3, [r3, #0]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	607a      	str	r2, [r7, #4]
 800d60a:	603b      	str	r3, [r7, #0]
 800d60c:	460b      	mov	r3, r1
 800d60e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d610:	7afb      	ldrb	r3, [r7, #11]
 800d612:	f003 020f 	and.w	r2, r3, #15
 800d616:	4613      	mov	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	1a9b      	subs	r3, r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	3338      	adds	r3, #56	; 0x38
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	4413      	add	r3, r2
 800d624:	3304      	adds	r3, #4
 800d626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2200      	movs	r2, #0
 800d638:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2201      	movs	r2, #1
 800d63e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d640:	7afb      	ldrb	r3, [r7, #11]
 800d642:	f003 030f 	and.w	r3, r3, #15
 800d646:	b2da      	uxtb	r2, r3
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d64c:	7afb      	ldrb	r3, [r7, #11]
 800d64e:	f003 030f 	and.w	r3, r3, #15
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6979      	ldr	r1, [r7, #20]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f004 fbb1 	bl	8011dc4 <USB_EP0StartXfer>
 800d662:	e005      	b.n	800d670 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6979      	ldr	r1, [r7, #20]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f004 f9ce 	bl	8011a0c <USB_EPStartXfer>
  }

  return HAL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3718      	adds	r7, #24
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d686:	78fb      	ldrb	r3, [r7, #3]
 800d688:	f003 020f 	and.w	r2, r3, #15
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d901      	bls.n	800d698 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e04e      	b.n	800d736 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	da0f      	bge.n	800d6c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d6a0:	78fb      	ldrb	r3, [r7, #3]
 800d6a2:	f003 020f 	and.w	r2, r3, #15
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	1a9b      	subs	r3, r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	3338      	adds	r3, #56	; 0x38
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	705a      	strb	r2, [r3, #1]
 800d6be:	e00d      	b.n	800d6dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d6c0:	78fa      	ldrb	r2, [r7, #3]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	1a9b      	subs	r3, r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d6e2:	78fb      	ldrb	r3, [r7, #3]
 800d6e4:	f003 030f 	and.w	r3, r3, #15
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d101      	bne.n	800d6fc <HAL_PCD_EP_SetStall+0x82>
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	e01c      	b.n	800d736 <HAL_PCD_EP_SetStall+0xbc>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68f9      	ldr	r1, [r7, #12]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f004 fd0a 	bl	8012124 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	f003 030f 	and.w	r3, r3, #15
 800d716:	2b00      	cmp	r3, #0
 800d718:	d108      	bne.n	800d72c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d724:	4619      	mov	r1, r3
 800d726:	4610      	mov	r0, r2
 800d728:	f004 fefc 	bl	8012524 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
 800d746:	460b      	mov	r3, r1
 800d748:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d74a:	78fb      	ldrb	r3, [r7, #3]
 800d74c:	f003 020f 	and.w	r2, r3, #15
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	429a      	cmp	r2, r3
 800d756:	d901      	bls.n	800d75c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d758:	2301      	movs	r3, #1
 800d75a:	e042      	b.n	800d7e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d75c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d760:	2b00      	cmp	r3, #0
 800d762:	da0f      	bge.n	800d784 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d764:	78fb      	ldrb	r3, [r7, #3]
 800d766:	f003 020f 	and.w	r2, r3, #15
 800d76a:	4613      	mov	r3, r2
 800d76c:	00db      	lsls	r3, r3, #3
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	3338      	adds	r3, #56	; 0x38
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	4413      	add	r3, r2
 800d778:	3304      	adds	r3, #4
 800d77a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2201      	movs	r2, #1
 800d780:	705a      	strb	r2, [r3, #1]
 800d782:	e00f      	b.n	800d7a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d784:	78fb      	ldrb	r3, [r7, #3]
 800d786:	f003 020f 	and.w	r2, r3, #15
 800d78a:	4613      	mov	r3, r2
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	1a9b      	subs	r3, r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	4413      	add	r3, r2
 800d79a:	3304      	adds	r3, #4
 800d79c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d7aa:	78fb      	ldrb	r3, [r7, #3]
 800d7ac:	f003 030f 	and.w	r3, r3, #15
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d101      	bne.n	800d7c4 <HAL_PCD_EP_ClrStall+0x86>
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	e00e      	b.n	800d7e2 <HAL_PCD_EP_ClrStall+0xa4>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68f9      	ldr	r1, [r7, #12]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f004 fd14 	bl	8012200 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b088      	sub	sp, #32
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	4613      	mov	r3, r2
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	1a9b      	subs	r3, r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	3338      	adds	r3, #56	; 0x38
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	4413      	add	r3, r2
 800d80e:	3304      	adds	r3, #4
 800d810:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	699a      	ldr	r2, [r3, #24]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d901      	bls.n	800d822 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e067      	b.n	800d8f2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	695a      	ldr	r2, [r3, #20]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	429a      	cmp	r2, r3
 800d836:	d902      	bls.n	800d83e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	3303      	adds	r3, #3
 800d842:	089b      	lsrs	r3, r3, #2
 800d844:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d846:	e026      	b.n	800d896 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	695a      	ldr	r2, [r3, #20]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	1ad3      	subs	r3, r2, r3
 800d852:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	69fa      	ldr	r2, [r7, #28]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d902      	bls.n	800d864 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	3303      	adds	r3, #3
 800d868:	089b      	lsrs	r3, r3, #2
 800d86a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	68d9      	ldr	r1, [r3, #12]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	b2da      	uxtb	r2, r3
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	b29b      	uxth	r3, r3
 800d878:	6978      	ldr	r0, [r7, #20]
 800d87a:	f004 fbc1 	bl	8012000 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	441a      	add	r2, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	699a      	ldr	r2, [r3, #24]
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	441a      	add	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	015a      	lsls	r2, r3, #5
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	4413      	add	r3, r2
 800d89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d809      	bhi.n	800d8c0 <PCD_WriteEmptyTxFifo+0xd6>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	699a      	ldr	r2, [r3, #24]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d203      	bcs.n	800d8c0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1c3      	bne.n	800d848 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	695a      	ldr	r2, [r3, #20]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	699b      	ldr	r3, [r3, #24]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d811      	bhi.n	800d8f0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	f003 030f 	and.w	r3, r3, #15
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	6939      	ldr	r1, [r7, #16]
 800d8e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	333c      	adds	r3, #60	; 0x3c
 800d914:	3304      	adds	r3, #4
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	4413      	add	r3, r2
 800d922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	4a19      	ldr	r2, [pc, #100]	; (800d994 <PCD_EP_OutXfrComplete_int+0x98>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d124      	bne.n	800d97c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00a      	beq.n	800d952 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	015a      	lsls	r2, r3, #5
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	4413      	add	r3, r2
 800d944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d948:	461a      	mov	r2, r3
 800d94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d94e:	6093      	str	r3, [r2, #8]
 800d950:	e01a      	b.n	800d988 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	f003 0320 	and.w	r3, r3, #32
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d008      	beq.n	800d96e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d968:	461a      	mov	r2, r3
 800d96a:	2320      	movs	r3, #32
 800d96c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	4619      	mov	r1, r3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f008 f8d3 	bl	8015b20 <HAL_PCD_DataOutStageCallback>
 800d97a:	e005      	b.n	800d988 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f008 f8cc 	bl	8015b20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	4f54310a 	.word	0x4f54310a

0800d998 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	333c      	adds	r3, #60	; 0x3c
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	015a      	lsls	r2, r3, #5
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	4413      	add	r3, r2
 800d9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	4a0c      	ldr	r2, [pc, #48]	; (800d9fc <PCD_EP_OutSetupPacket_int+0x64>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d90e      	bls.n	800d9ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d009      	beq.n	800d9ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f008 f885 	bl	8015afc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	4f54300a 	.word	0x4f54300a

0800da00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	70fb      	strb	r3, [r7, #3]
 800da0c:	4613      	mov	r3, r2
 800da0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d107      	bne.n	800da2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800da1e:	883b      	ldrh	r3, [r7, #0]
 800da20:	0419      	lsls	r1, r3, #16
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	430a      	orrs	r2, r1
 800da2a:	629a      	str	r2, [r3, #40]	; 0x28
 800da2c:	e028      	b.n	800da80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da34:	0c1b      	lsrs	r3, r3, #16
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	4413      	add	r3, r2
 800da3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
 800da40:	e00d      	b.n	800da5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	7bfb      	ldrb	r3, [r7, #15]
 800da48:	3340      	adds	r3, #64	; 0x40
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	0c1b      	lsrs	r3, r3, #16
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	4413      	add	r3, r2
 800da56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	3301      	adds	r3, #1
 800da5c:	73fb      	strb	r3, [r7, #15]
 800da5e:	7bfa      	ldrb	r2, [r7, #15]
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	3b01      	subs	r3, #1
 800da64:	429a      	cmp	r2, r3
 800da66:	d3ec      	bcc.n	800da42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800da68:	883b      	ldrh	r3, [r7, #0]
 800da6a:	0418      	lsls	r0, r3, #16
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6819      	ldr	r1, [r3, #0]
 800da70:	78fb      	ldrb	r3, [r7, #3]
 800da72:	3b01      	subs	r3, #1
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	4302      	orrs	r2, r0
 800da78:	3340      	adds	r3, #64	; 0x40
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	440b      	add	r3, r1
 800da7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	460b      	mov	r3, r1
 800da98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	887a      	ldrh	r2, [r7, #2]
 800daa0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae2:	f043 0303 	orr.w	r3, r3, #3
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800db10:	b480      	push	{r7}
 800db12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db14:	4b05      	ldr	r3, [pc, #20]	; (800db2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a04      	ldr	r2, [pc, #16]	; (800db2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800db1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db1e:	6013      	str	r3, [r2, #0]
}
 800db20:	bf00      	nop
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	40007000 	.word	0x40007000

0800db30 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800db34:	4b05      	ldr	r3, [pc, #20]	; (800db4c <HAL_PWR_DisableBkUpAccess+0x1c>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a04      	ldr	r2, [pc, #16]	; (800db4c <HAL_PWR_DisableBkUpAccess+0x1c>)
 800db3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db3e:	6013      	str	r3, [r2, #0]
}
 800db40:	bf00      	nop
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	40007000 	.word	0x40007000

0800db50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800db50:	b480      	push	{r7}
 800db52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800db54:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <HAL_PWREx_GetVoltageRange+0x3c>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800db5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db60:	d102      	bne.n	800db68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800db62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db66:	e00b      	b.n	800db80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800db68:	4b08      	ldr	r3, [pc, #32]	; (800db8c <HAL_PWREx_GetVoltageRange+0x3c>)
 800db6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db76:	d102      	bne.n	800db7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800db78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db7c:	e000      	b.n	800db80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800db7e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800db80:	4618      	mov	r0, r3
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	40007000 	.word	0x40007000

0800db90 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800db90:	b480      	push	{r7}
 800db92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800db94:	4b05      	ldr	r3, [pc, #20]	; (800dbac <HAL_PWREx_EnableVddUSB+0x1c>)
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	4a04      	ldr	r2, [pc, #16]	; (800dbac <HAL_PWREx_EnableVddUSB+0x1c>)
 800db9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db9e:	6053      	str	r3, [r2, #4]
}
 800dba0:	bf00      	nop
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	40007000 	.word	0x40007000

0800dbb0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800dbb4:	4b05      	ldr	r3, [pc, #20]	; (800dbcc <HAL_PWREx_EnableVddIO2+0x1c>)
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	4a04      	ldr	r2, [pc, #16]	; (800dbcc <HAL_PWREx_EnableVddIO2+0x1c>)
 800dbba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbbe:	6053      	str	r3, [r2, #4]
}
 800dbc0:	bf00      	nop
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	40007000 	.word	0x40007000

0800dbd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d102      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	f000 bc16 	b.w	800e410 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbe4:	4b96      	ldr	r3, [pc, #600]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	f003 030c 	and.w	r3, r3, #12
 800dbec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dbee:	4b94      	ldr	r3, [pc, #592]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	f003 0303 	and.w	r3, r3, #3
 800dbf6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f003 0310 	and.w	r3, r3, #16
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 80e4 	beq.w	800ddce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d007      	beq.n	800dc1c <HAL_RCC_OscConfig+0x4c>
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	2b0c      	cmp	r3, #12
 800dc10:	f040 808b 	bne.w	800dd2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	f040 8087 	bne.w	800dd2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800dc1c:	4b88      	ldr	r3, [pc, #544]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 0302 	and.w	r3, r3, #2
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d005      	beq.n	800dc34 <HAL_RCC_OscConfig+0x64>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e3ed      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a1a      	ldr	r2, [r3, #32]
 800dc38:	4b81      	ldr	r3, [pc, #516]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f003 0308 	and.w	r3, r3, #8
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d004      	beq.n	800dc4e <HAL_RCC_OscConfig+0x7e>
 800dc44:	4b7e      	ldr	r3, [pc, #504]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc4c:	e005      	b.n	800dc5a <HAL_RCC_OscConfig+0x8a>
 800dc4e:	4b7c      	ldr	r3, [pc, #496]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc54:	091b      	lsrs	r3, r3, #4
 800dc56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d223      	bcs.n	800dca6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 fd9c 	bl	800e7a0 <RCC_SetFlashLatencyFromMSIRange>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e3ce      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dc72:	4b73      	ldr	r3, [pc, #460]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a72      	ldr	r2, [pc, #456]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc78:	f043 0308 	orr.w	r3, r3, #8
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	4b70      	ldr	r3, [pc, #448]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	496d      	ldr	r1, [pc, #436]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dc90:	4b6b      	ldr	r3, [pc, #428]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	69db      	ldr	r3, [r3, #28]
 800dc9c:	021b      	lsls	r3, r3, #8
 800dc9e:	4968      	ldr	r1, [pc, #416]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dca0:	4313      	orrs	r3, r2
 800dca2:	604b      	str	r3, [r1, #4]
 800dca4:	e025      	b.n	800dcf2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dca6:	4b66      	ldr	r3, [pc, #408]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a65      	ldr	r2, [pc, #404]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dcac:	f043 0308 	orr.w	r3, r3, #8
 800dcb0:	6013      	str	r3, [r2, #0]
 800dcb2:	4b63      	ldr	r3, [pc, #396]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	4960      	ldr	r1, [pc, #384]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dcc4:	4b5e      	ldr	r3, [pc, #376]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	021b      	lsls	r3, r3, #8
 800dcd2:	495b      	ldr	r1, [pc, #364]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d109      	bne.n	800dcf2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a1b      	ldr	r3, [r3, #32]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 fd5c 	bl	800e7a0 <RCC_SetFlashLatencyFromMSIRange>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e38e      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800dcf2:	f000 fcbf 	bl	800e674 <HAL_RCC_GetSysClockFreq>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b51      	ldr	r3, [pc, #324]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	091b      	lsrs	r3, r3, #4
 800dcfe:	f003 030f 	and.w	r3, r3, #15
 800dd02:	4950      	ldr	r1, [pc, #320]	; (800de44 <HAL_RCC_OscConfig+0x274>)
 800dd04:	5ccb      	ldrb	r3, [r1, r3]
 800dd06:	f003 031f 	and.w	r3, r3, #31
 800dd0a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd0e:	4a4e      	ldr	r2, [pc, #312]	; (800de48 <HAL_RCC_OscConfig+0x278>)
 800dd10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800dd12:	4b4e      	ldr	r3, [pc, #312]	; (800de4c <HAL_RCC_OscConfig+0x27c>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fd fb96 	bl	800b448 <HAL_InitTick>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d052      	beq.n	800ddcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
 800dd28:	e372      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d032      	beq.n	800dd98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800dd32:	4b43      	ldr	r3, [pc, #268]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a42      	ldr	r2, [pc, #264]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd38:	f043 0301 	orr.w	r3, r3, #1
 800dd3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800dd3e:	f7fd fbd3 	bl	800b4e8 <HAL_GetTick>
 800dd42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800dd44:	e008      	b.n	800dd58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800dd46:	f7fd fbcf 	bl	800b4e8 <HAL_GetTick>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d901      	bls.n	800dd58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800dd54:	2303      	movs	r3, #3
 800dd56:	e35b      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800dd58:	4b39      	ldr	r3, [pc, #228]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 0302 	and.w	r3, r3, #2
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d0f0      	beq.n	800dd46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dd64:	4b36      	ldr	r3, [pc, #216]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a35      	ldr	r2, [pc, #212]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd6a:	f043 0308 	orr.w	r3, r3, #8
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	4b33      	ldr	r3, [pc, #204]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	4930      	ldr	r1, [pc, #192]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dd82:	4b2f      	ldr	r3, [pc, #188]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	69db      	ldr	r3, [r3, #28]
 800dd8e:	021b      	lsls	r3, r3, #8
 800dd90:	492b      	ldr	r1, [pc, #172]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd92:	4313      	orrs	r3, r2
 800dd94:	604b      	str	r3, [r1, #4]
 800dd96:	e01a      	b.n	800ddce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800dd98:	4b29      	ldr	r3, [pc, #164]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a28      	ldr	r2, [pc, #160]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800dd9e:	f023 0301 	bic.w	r3, r3, #1
 800dda2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800dda4:	f7fd fba0 	bl	800b4e8 <HAL_GetTick>
 800dda8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ddaa:	e008      	b.n	800ddbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ddac:	f7fd fb9c 	bl	800b4e8 <HAL_GetTick>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d901      	bls.n	800ddbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ddba:	2303      	movs	r3, #3
 800ddbc:	e328      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ddbe:	4b20      	ldr	r3, [pc, #128]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0302 	and.w	r3, r3, #2
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1f0      	bne.n	800ddac <HAL_RCC_OscConfig+0x1dc>
 800ddca:	e000      	b.n	800ddce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ddcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d073      	beq.n	800dec2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	2b08      	cmp	r3, #8
 800ddde:	d005      	beq.n	800ddec <HAL_RCC_OscConfig+0x21c>
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	2b0c      	cmp	r3, #12
 800dde4:	d10e      	bne.n	800de04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b03      	cmp	r3, #3
 800ddea:	d10b      	bne.n	800de04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ddec:	4b14      	ldr	r3, [pc, #80]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d063      	beq.n	800dec0 <HAL_RCC_OscConfig+0x2f0>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d15f      	bne.n	800dec0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	e305      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de0c:	d106      	bne.n	800de1c <HAL_RCC_OscConfig+0x24c>
 800de0e:	4b0c      	ldr	r3, [pc, #48]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a0b      	ldr	r2, [pc, #44]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800de14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de18:	6013      	str	r3, [r2, #0]
 800de1a:	e025      	b.n	800de68 <HAL_RCC_OscConfig+0x298>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800de24:	d114      	bne.n	800de50 <HAL_RCC_OscConfig+0x280>
 800de26:	4b06      	ldr	r3, [pc, #24]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a05      	ldr	r2, [pc, #20]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800de2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800de30:	6013      	str	r3, [r2, #0]
 800de32:	4b03      	ldr	r3, [pc, #12]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a02      	ldr	r2, [pc, #8]	; (800de40 <HAL_RCC_OscConfig+0x270>)
 800de38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de3c:	6013      	str	r3, [r2, #0]
 800de3e:	e013      	b.n	800de68 <HAL_RCC_OscConfig+0x298>
 800de40:	40021000 	.word	0x40021000
 800de44:	08019f40 	.word	0x08019f40
 800de48:	20000468 	.word	0x20000468
 800de4c:	200001c0 	.word	0x200001c0
 800de50:	4ba0      	ldr	r3, [pc, #640]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a9f      	ldr	r2, [pc, #636]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800de56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	4b9d      	ldr	r3, [pc, #628]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a9c      	ldr	r2, [pc, #624]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800de62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d013      	beq.n	800de98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de70:	f7fd fb3a 	bl	800b4e8 <HAL_GetTick>
 800de74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800de76:	e008      	b.n	800de8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800de78:	f7fd fb36 	bl	800b4e8 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	2b64      	cmp	r3, #100	; 0x64
 800de84:	d901      	bls.n	800de8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	e2c2      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800de8a:	4b92      	ldr	r3, [pc, #584]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0f0      	beq.n	800de78 <HAL_RCC_OscConfig+0x2a8>
 800de96:	e014      	b.n	800dec2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de98:	f7fd fb26 	bl	800b4e8 <HAL_GetTick>
 800de9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800de9e:	e008      	b.n	800deb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dea0:	f7fd fb22 	bl	800b4e8 <HAL_GetTick>
 800dea4:	4602      	mov	r2, r0
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	2b64      	cmp	r3, #100	; 0x64
 800deac:	d901      	bls.n	800deb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800deae:	2303      	movs	r3, #3
 800deb0:	e2ae      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800deb2:	4b88      	ldr	r3, [pc, #544]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1f0      	bne.n	800dea0 <HAL_RCC_OscConfig+0x2d0>
 800debe:	e000      	b.n	800dec2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f003 0302 	and.w	r3, r3, #2
 800deca:	2b00      	cmp	r3, #0
 800decc:	d060      	beq.n	800df90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	2b04      	cmp	r3, #4
 800ded2:	d005      	beq.n	800dee0 <HAL_RCC_OscConfig+0x310>
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	2b0c      	cmp	r3, #12
 800ded8:	d119      	bne.n	800df0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d116      	bne.n	800df0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dee0:	4b7c      	ldr	r3, [pc, #496]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d005      	beq.n	800def8 <HAL_RCC_OscConfig+0x328>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800def4:	2301      	movs	r3, #1
 800def6:	e28b      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800def8:	4b76      	ldr	r3, [pc, #472]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	061b      	lsls	r3, r3, #24
 800df06:	4973      	ldr	r1, [pc, #460]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df08:	4313      	orrs	r3, r2
 800df0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800df0c:	e040      	b.n	800df90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d023      	beq.n	800df5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800df16:	4b6f      	ldr	r3, [pc, #444]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a6e      	ldr	r2, [pc, #440]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df22:	f7fd fae1 	bl	800b4e8 <HAL_GetTick>
 800df26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df28:	e008      	b.n	800df3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df2a:	f7fd fadd 	bl	800b4e8 <HAL_GetTick>
 800df2e:	4602      	mov	r2, r0
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	2b02      	cmp	r3, #2
 800df36:	d901      	bls.n	800df3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800df38:	2303      	movs	r3, #3
 800df3a:	e269      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df3c:	4b65      	ldr	r3, [pc, #404]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df44:	2b00      	cmp	r3, #0
 800df46:	d0f0      	beq.n	800df2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df48:	4b62      	ldr	r3, [pc, #392]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	061b      	lsls	r3, r3, #24
 800df56:	495f      	ldr	r1, [pc, #380]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df58:	4313      	orrs	r3, r2
 800df5a:	604b      	str	r3, [r1, #4]
 800df5c:	e018      	b.n	800df90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800df5e:	4b5d      	ldr	r3, [pc, #372]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a5c      	ldr	r2, [pc, #368]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df6a:	f7fd fabd 	bl	800b4e8 <HAL_GetTick>
 800df6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800df70:	e008      	b.n	800df84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df72:	f7fd fab9 	bl	800b4e8 <HAL_GetTick>
 800df76:	4602      	mov	r2, r0
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	1ad3      	subs	r3, r2, r3
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d901      	bls.n	800df84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e245      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800df84:	4b53      	ldr	r3, [pc, #332]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1f0      	bne.n	800df72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f003 0308 	and.w	r3, r3, #8
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d03c      	beq.n	800e016 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	695b      	ldr	r3, [r3, #20]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01c      	beq.n	800dfde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dfa4:	4b4b      	ldr	r3, [pc, #300]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800dfa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dfaa:	4a4a      	ldr	r2, [pc, #296]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800dfac:	f043 0301 	orr.w	r3, r3, #1
 800dfb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfb4:	f7fd fa98 	bl	800b4e8 <HAL_GetTick>
 800dfb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dfba:	e008      	b.n	800dfce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dfbc:	f7fd fa94 	bl	800b4e8 <HAL_GetTick>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d901      	bls.n	800dfce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	e220      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dfce:	4b41      	ldr	r3, [pc, #260]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800dfd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dfd4:	f003 0302 	and.w	r3, r3, #2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d0ef      	beq.n	800dfbc <HAL_RCC_OscConfig+0x3ec>
 800dfdc:	e01b      	b.n	800e016 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dfde:	4b3d      	ldr	r3, [pc, #244]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800dfe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dfe4:	4a3b      	ldr	r2, [pc, #236]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800dfe6:	f023 0301 	bic.w	r3, r3, #1
 800dfea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfee:	f7fd fa7b 	bl	800b4e8 <HAL_GetTick>
 800dff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dff4:	e008      	b.n	800e008 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dff6:	f7fd fa77 	bl	800b4e8 <HAL_GetTick>
 800dffa:	4602      	mov	r2, r0
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	2b02      	cmp	r3, #2
 800e002:	d901      	bls.n	800e008 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800e004:	2303      	movs	r3, #3
 800e006:	e203      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e008:	4b32      	ldr	r3, [pc, #200]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e00e:	f003 0302 	and.w	r3, r3, #2
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1ef      	bne.n	800dff6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0304 	and.w	r3, r3, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 80a6 	beq.w	800e170 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e024:	2300      	movs	r3, #0
 800e026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800e028:	4b2a      	ldr	r3, [pc, #168]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e02c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10d      	bne.n	800e050 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e034:	4b27      	ldr	r3, [pc, #156]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e038:	4a26      	ldr	r2, [pc, #152]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e03a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e03e:	6593      	str	r3, [r2, #88]	; 0x58
 800e040:	4b24      	ldr	r3, [pc, #144]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e04c:	2301      	movs	r3, #1
 800e04e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e050:	4b21      	ldr	r3, [pc, #132]	; (800e0d8 <HAL_RCC_OscConfig+0x508>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d118      	bne.n	800e08e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e05c:	4b1e      	ldr	r3, [pc, #120]	; (800e0d8 <HAL_RCC_OscConfig+0x508>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a1d      	ldr	r2, [pc, #116]	; (800e0d8 <HAL_RCC_OscConfig+0x508>)
 800e062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e066:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e068:	f7fd fa3e 	bl	800b4e8 <HAL_GetTick>
 800e06c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e06e:	e008      	b.n	800e082 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e070:	f7fd fa3a 	bl	800b4e8 <HAL_GetTick>
 800e074:	4602      	mov	r2, r0
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d901      	bls.n	800e082 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800e07e:	2303      	movs	r3, #3
 800e080:	e1c6      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e082:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <HAL_RCC_OscConfig+0x508>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0f0      	beq.n	800e070 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d108      	bne.n	800e0a8 <HAL_RCC_OscConfig+0x4d8>
 800e096:	4b0f      	ldr	r3, [pc, #60]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e09c:	4a0d      	ldr	r2, [pc, #52]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e09e:	f043 0301 	orr.w	r3, r3, #1
 800e0a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e0a6:	e029      	b.n	800e0fc <HAL_RCC_OscConfig+0x52c>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	2b05      	cmp	r3, #5
 800e0ae:	d115      	bne.n	800e0dc <HAL_RCC_OscConfig+0x50c>
 800e0b0:	4b08      	ldr	r3, [pc, #32]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0b6:	4a07      	ldr	r2, [pc, #28]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e0b8:	f043 0304 	orr.w	r3, r3, #4
 800e0bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e0c0:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0c6:	4a03      	ldr	r2, [pc, #12]	; (800e0d4 <HAL_RCC_OscConfig+0x504>)
 800e0c8:	f043 0301 	orr.w	r3, r3, #1
 800e0cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e0d0:	e014      	b.n	800e0fc <HAL_RCC_OscConfig+0x52c>
 800e0d2:	bf00      	nop
 800e0d4:	40021000 	.word	0x40021000
 800e0d8:	40007000 	.word	0x40007000
 800e0dc:	4b9d      	ldr	r3, [pc, #628]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0e2:	4a9c      	ldr	r2, [pc, #624]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e0e4:	f023 0301 	bic.w	r3, r3, #1
 800e0e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e0ec:	4b99      	ldr	r3, [pc, #612]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0f2:	4a98      	ldr	r2, [pc, #608]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e0f4:	f023 0304 	bic.w	r3, r3, #4
 800e0f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d016      	beq.n	800e132 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e104:	f7fd f9f0 	bl	800b4e8 <HAL_GetTick>
 800e108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e10a:	e00a      	b.n	800e122 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e10c:	f7fd f9ec 	bl	800b4e8 <HAL_GetTick>
 800e110:	4602      	mov	r2, r0
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	f241 3288 	movw	r2, #5000	; 0x1388
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d901      	bls.n	800e122 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800e11e:	2303      	movs	r3, #3
 800e120:	e176      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e122:	4b8c      	ldr	r3, [pc, #560]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e128:	f003 0302 	and.w	r3, r3, #2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d0ed      	beq.n	800e10c <HAL_RCC_OscConfig+0x53c>
 800e130:	e015      	b.n	800e15e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e132:	f7fd f9d9 	bl	800b4e8 <HAL_GetTick>
 800e136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e138:	e00a      	b.n	800e150 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e13a:	f7fd f9d5 	bl	800b4e8 <HAL_GetTick>
 800e13e:	4602      	mov	r2, r0
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	f241 3288 	movw	r2, #5000	; 0x1388
 800e148:	4293      	cmp	r3, r2
 800e14a:	d901      	bls.n	800e150 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e15f      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e150:	4b80      	ldr	r3, [pc, #512]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1ed      	bne.n	800e13a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e15e:	7ffb      	ldrb	r3, [r7, #31]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d105      	bne.n	800e170 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e164:	4b7b      	ldr	r3, [pc, #492]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e168:	4a7a      	ldr	r2, [pc, #488]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e16a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e16e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f003 0320 	and.w	r3, r3, #32
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d03c      	beq.n	800e1f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e180:	2b00      	cmp	r3, #0
 800e182:	d01c      	beq.n	800e1be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e184:	4b73      	ldr	r3, [pc, #460]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e18a:	4a72      	ldr	r2, [pc, #456]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e18c:	f043 0301 	orr.w	r3, r3, #1
 800e190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e194:	f7fd f9a8 	bl	800b4e8 <HAL_GetTick>
 800e198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e19a:	e008      	b.n	800e1ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e19c:	f7fd f9a4 	bl	800b4e8 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d901      	bls.n	800e1ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e130      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e1ae:	4b69      	ldr	r3, [pc, #420]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e1b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e1b4:	f003 0302 	and.w	r3, r3, #2
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0ef      	beq.n	800e19c <HAL_RCC_OscConfig+0x5cc>
 800e1bc:	e01b      	b.n	800e1f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e1be:	4b65      	ldr	r3, [pc, #404]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e1c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e1c4:	4a63      	ldr	r2, [pc, #396]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e1c6:	f023 0301 	bic.w	r3, r3, #1
 800e1ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1ce:	f7fd f98b 	bl	800b4e8 <HAL_GetTick>
 800e1d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e1d4:	e008      	b.n	800e1e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e1d6:	f7fd f987 	bl	800b4e8 <HAL_GetTick>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d901      	bls.n	800e1e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	e113      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e1e8:	4b5a      	ldr	r3, [pc, #360]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e1ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e1ee:	f003 0302 	and.w	r3, r3, #2
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1ef      	bne.n	800e1d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	f000 8107 	beq.w	800e40e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e204:	2b02      	cmp	r3, #2
 800e206:	f040 80cf 	bne.w	800e3a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800e20a:	4b52      	ldr	r3, [pc, #328]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	f003 0203 	and.w	r2, r3, #3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d12c      	bne.n	800e278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e228:	3b01      	subs	r3, #1
 800e22a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d123      	bne.n	800e278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d11b      	bne.n	800e278 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d113      	bne.n	800e278 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25a:	085b      	lsrs	r3, r3, #1
 800e25c:	3b01      	subs	r3, #1
 800e25e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e260:	429a      	cmp	r2, r3
 800e262:	d109      	bne.n	800e278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26e:	085b      	lsrs	r3, r3, #1
 800e270:	3b01      	subs	r3, #1
 800e272:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e274:	429a      	cmp	r2, r3
 800e276:	d071      	beq.n	800e35c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	2b0c      	cmp	r3, #12
 800e27c:	d068      	beq.n	800e350 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e27e:	4b35      	ldr	r3, [pc, #212]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e286:	2b00      	cmp	r3, #0
 800e288:	d105      	bne.n	800e296 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800e28a:	4b32      	ldr	r3, [pc, #200]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	e0ba      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e29a:	4b2e      	ldr	r3, [pc, #184]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a2d      	ldr	r2, [pc, #180]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e2a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e2a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e2a6:	f7fd f91f 	bl	800b4e8 <HAL_GetTick>
 800e2aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e2ac:	e008      	b.n	800e2c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2ae:	f7fd f91b 	bl	800b4e8 <HAL_GetTick>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d901      	bls.n	800e2c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800e2bc:	2303      	movs	r3, #3
 800e2be:	e0a7      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e2c0:	4b24      	ldr	r3, [pc, #144]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1f0      	bne.n	800e2ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e2cc:	4b21      	ldr	r3, [pc, #132]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e2ce:	68da      	ldr	r2, [r3, #12]
 800e2d0:	4b21      	ldr	r3, [pc, #132]	; (800e358 <HAL_RCC_OscConfig+0x788>)
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2dc:	3a01      	subs	r2, #1
 800e2de:	0112      	lsls	r2, r2, #4
 800e2e0:	4311      	orrs	r1, r2
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e2e6:	0212      	lsls	r2, r2, #8
 800e2e8:	4311      	orrs	r1, r2
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e2ee:	0852      	lsrs	r2, r2, #1
 800e2f0:	3a01      	subs	r2, #1
 800e2f2:	0552      	lsls	r2, r2, #21
 800e2f4:	4311      	orrs	r1, r2
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e2fa:	0852      	lsrs	r2, r2, #1
 800e2fc:	3a01      	subs	r2, #1
 800e2fe:	0652      	lsls	r2, r2, #25
 800e300:	4311      	orrs	r1, r2
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e306:	06d2      	lsls	r2, r2, #27
 800e308:	430a      	orrs	r2, r1
 800e30a:	4912      	ldr	r1, [pc, #72]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e30c:	4313      	orrs	r3, r2
 800e30e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e310:	4b10      	ldr	r3, [pc, #64]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a0f      	ldr	r2, [pc, #60]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e31a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e31c:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	4a0c      	ldr	r2, [pc, #48]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e326:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e328:	f7fd f8de 	bl	800b4e8 <HAL_GetTick>
 800e32c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e32e:	e008      	b.n	800e342 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e330:	f7fd f8da 	bl	800b4e8 <HAL_GetTick>
 800e334:	4602      	mov	r2, r0
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d901      	bls.n	800e342 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800e33e:	2303      	movs	r3, #3
 800e340:	e066      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e342:	4b04      	ldr	r3, [pc, #16]	; (800e354 <HAL_RCC_OscConfig+0x784>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0f0      	beq.n	800e330 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e34e:	e05e      	b.n	800e40e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	e05d      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
 800e354:	40021000 	.word	0x40021000
 800e358:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e35c:	4b2e      	ldr	r3, [pc, #184]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e364:	2b00      	cmp	r3, #0
 800e366:	d152      	bne.n	800e40e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e368:	4b2b      	ldr	r3, [pc, #172]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a2a      	ldr	r2, [pc, #168]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e36e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e372:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e374:	4b28      	ldr	r3, [pc, #160]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	4a27      	ldr	r2, [pc, #156]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e37a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e37e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e380:	f7fd f8b2 	bl	800b4e8 <HAL_GetTick>
 800e384:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e386:	e008      	b.n	800e39a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e388:	f7fd f8ae 	bl	800b4e8 <HAL_GetTick>
 800e38c:	4602      	mov	r2, r0
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	2b02      	cmp	r3, #2
 800e394:	d901      	bls.n	800e39a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800e396:	2303      	movs	r3, #3
 800e398:	e03a      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e39a:	4b1f      	ldr	r3, [pc, #124]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0f0      	beq.n	800e388 <HAL_RCC_OscConfig+0x7b8>
 800e3a6:	e032      	b.n	800e40e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	2b0c      	cmp	r3, #12
 800e3ac:	d02d      	beq.n	800e40a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e3ae:	4b1a      	ldr	r3, [pc, #104]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a19      	ldr	r2, [pc, #100]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e3b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800e3ba:	4b17      	ldr	r3, [pc, #92]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d105      	bne.n	800e3d2 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800e3c6:	4b14      	ldr	r3, [pc, #80]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	4a13      	ldr	r2, [pc, #76]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3cc:	f023 0303 	bic.w	r3, r3, #3
 800e3d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800e3d2:	4b11      	ldr	r3, [pc, #68]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	4a10      	ldr	r2, [pc, #64]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800e3dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3e2:	f7fd f881 	bl	800b4e8 <HAL_GetTick>
 800e3e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e3e8:	e008      	b.n	800e3fc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e3ea:	f7fd f87d 	bl	800b4e8 <HAL_GetTick>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d901      	bls.n	800e3fc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	e009      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e3fc:	4b06      	ldr	r3, [pc, #24]	; (800e418 <HAL_RCC_OscConfig+0x848>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1f0      	bne.n	800e3ea <HAL_RCC_OscConfig+0x81a>
 800e408:	e001      	b.n	800e40e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e40a:	2301      	movs	r3, #1
 800e40c:	e000      	b.n	800e410 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3720      	adds	r7, #32
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	40021000 	.word	0x40021000

0800e41c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800e426:	2300      	movs	r3, #0
 800e428:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d101      	bne.n	800e434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e10f      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e434:	4b89      	ldr	r3, [pc, #548]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f003 030f 	and.w	r3, r3, #15
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d910      	bls.n	800e464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e442:	4b86      	ldr	r3, [pc, #536]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f023 020f 	bic.w	r2, r3, #15
 800e44a:	4984      	ldr	r1, [pc, #528]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	4313      	orrs	r3, r2
 800e450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e452:	4b82      	ldr	r3, [pc, #520]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 030f 	and.w	r3, r3, #15
 800e45a:	683a      	ldr	r2, [r7, #0]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d001      	beq.n	800e464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	e0f7      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 8089 	beq.w	800e584 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	2b03      	cmp	r3, #3
 800e478:	d133      	bne.n	800e4e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e47a:	4b79      	ldr	r3, [pc, #484]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e0e4      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800e48a:	f000 f9e3 	bl	800e854 <RCC_GetSysClockFreqFromPLLSource>
 800e48e:	4603      	mov	r3, r0
 800e490:	4a74      	ldr	r2, [pc, #464]	; (800e664 <HAL_RCC_ClockConfig+0x248>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d955      	bls.n	800e542 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800e496:	4b72      	ldr	r3, [pc, #456]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10a      	bne.n	800e4b8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e4a2:	4b6f      	ldr	r3, [pc, #444]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e4aa:	4a6d      	ldr	r2, [pc, #436]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e4b2:	2380      	movs	r3, #128	; 0x80
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	e044      	b.n	800e542 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 0302 	and.w	r3, r3, #2
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d03e      	beq.n	800e542 <HAL_RCC_ClockConfig+0x126>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d13a      	bne.n	800e542 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e4cc:	4b64      	ldr	r3, [pc, #400]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e4d4:	4a62      	ldr	r2, [pc, #392]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e4dc:	2380      	movs	r3, #128	; 0x80
 800e4de:	617b      	str	r3, [r7, #20]
 800e4e0:	e02f      	b.n	800e542 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d107      	bne.n	800e4fa <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e4ea:	4b5d      	ldr	r3, [pc, #372]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d115      	bne.n	800e522 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e0ac      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d107      	bne.n	800e512 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e502:	4b57      	ldr	r3, [pc, #348]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f003 0302 	and.w	r3, r3, #2
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d109      	bne.n	800e522 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	e0a0      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e512:	4b53      	ldr	r3, [pc, #332]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	e098      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800e522:	f000 f8a7 	bl	800e674 <HAL_RCC_GetSysClockFreq>
 800e526:	4603      	mov	r3, r0
 800e528:	4a4e      	ldr	r2, [pc, #312]	; (800e664 <HAL_RCC_ClockConfig+0x248>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d909      	bls.n	800e542 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e52e:	4b4c      	ldr	r3, [pc, #304]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e536:	4a4a      	ldr	r2, [pc, #296]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e53c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800e53e:	2380      	movs	r3, #128	; 0x80
 800e540:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e542:	4b47      	ldr	r3, [pc, #284]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	f023 0203 	bic.w	r2, r3, #3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	4944      	ldr	r1, [pc, #272]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e550:	4313      	orrs	r3, r2
 800e552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e554:	f7fc ffc8 	bl	800b4e8 <HAL_GetTick>
 800e558:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e55a:	e00a      	b.n	800e572 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e55c:	f7fc ffc4 	bl	800b4e8 <HAL_GetTick>
 800e560:	4602      	mov	r2, r0
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	f241 3288 	movw	r2, #5000	; 0x1388
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d901      	bls.n	800e572 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800e56e:	2303      	movs	r3, #3
 800e570:	e070      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e572:	4b3b      	ldr	r3, [pc, #236]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f003 020c 	and.w	r2, r3, #12
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	429a      	cmp	r2, r3
 800e582:	d1eb      	bne.n	800e55c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f003 0302 	and.w	r3, r3, #2
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d009      	beq.n	800e5a4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e590:	4b33      	ldr	r3, [pc, #204]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	4930      	ldr	r1, [pc, #192]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	608b      	str	r3, [r1, #8]
 800e5a2:	e008      	b.n	800e5b6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	2b80      	cmp	r3, #128	; 0x80
 800e5a8:	d105      	bne.n	800e5b6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e5aa:	4b2d      	ldr	r3, [pc, #180]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	4a2c      	ldr	r2, [pc, #176]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e5b4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e5b6:	4b29      	ldr	r3, [pc, #164]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 030f 	and.w	r3, r3, #15
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d210      	bcs.n	800e5e6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5c4:	4b25      	ldr	r3, [pc, #148]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f023 020f 	bic.w	r2, r3, #15
 800e5cc:	4923      	ldr	r1, [pc, #140]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5d4:	4b21      	ldr	r3, [pc, #132]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f003 030f 	and.w	r3, r3, #15
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d001      	beq.n	800e5e6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e036      	b.n	800e654 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f003 0304 	and.w	r3, r3, #4
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d008      	beq.n	800e604 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e5f2:	4b1b      	ldr	r3, [pc, #108]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	4918      	ldr	r1, [pc, #96]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e600:	4313      	orrs	r3, r2
 800e602:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f003 0308 	and.w	r3, r3, #8
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d009      	beq.n	800e624 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e610:	4b13      	ldr	r3, [pc, #76]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	00db      	lsls	r3, r3, #3
 800e61e:	4910      	ldr	r1, [pc, #64]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e620:	4313      	orrs	r3, r2
 800e622:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e624:	f000 f826 	bl	800e674 <HAL_RCC_GetSysClockFreq>
 800e628:	4602      	mov	r2, r0
 800e62a:	4b0d      	ldr	r3, [pc, #52]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	091b      	lsrs	r3, r3, #4
 800e630:	f003 030f 	and.w	r3, r3, #15
 800e634:	490c      	ldr	r1, [pc, #48]	; (800e668 <HAL_RCC_ClockConfig+0x24c>)
 800e636:	5ccb      	ldrb	r3, [r1, r3]
 800e638:	f003 031f 	and.w	r3, r3, #31
 800e63c:	fa22 f303 	lsr.w	r3, r2, r3
 800e640:	4a0a      	ldr	r2, [pc, #40]	; (800e66c <HAL_RCC_ClockConfig+0x250>)
 800e642:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800e644:	4b0a      	ldr	r3, [pc, #40]	; (800e670 <HAL_RCC_ClockConfig+0x254>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fc fefd 	bl	800b448 <HAL_InitTick>
 800e64e:	4603      	mov	r3, r0
 800e650:	73fb      	strb	r3, [r7, #15]

  return status;
 800e652:	7bfb      	ldrb	r3, [r7, #15]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3718      	adds	r7, #24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	40022000 	.word	0x40022000
 800e660:	40021000 	.word	0x40021000
 800e664:	04c4b400 	.word	0x04c4b400
 800e668:	08019f40 	.word	0x08019f40
 800e66c:	20000468 	.word	0x20000468
 800e670:	200001c0 	.word	0x200001c0

0800e674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e674:	b480      	push	{r7}
 800e676:	b089      	sub	sp, #36	; 0x24
 800e678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800e67a:	2300      	movs	r3, #0
 800e67c:	61fb      	str	r3, [r7, #28]
 800e67e:	2300      	movs	r3, #0
 800e680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e682:	4b3e      	ldr	r3, [pc, #248]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	f003 030c 	and.w	r3, r3, #12
 800e68a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e68c:	4b3b      	ldr	r3, [pc, #236]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	f003 0303 	and.w	r3, r3, #3
 800e694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d005      	beq.n	800e6a8 <HAL_RCC_GetSysClockFreq+0x34>
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	2b0c      	cmp	r3, #12
 800e6a0:	d121      	bne.n	800e6e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d11e      	bne.n	800e6e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800e6a8:	4b34      	ldr	r3, [pc, #208]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f003 0308 	and.w	r3, r3, #8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d107      	bne.n	800e6c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800e6b4:	4b31      	ldr	r3, [pc, #196]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6ba:	0a1b      	lsrs	r3, r3, #8
 800e6bc:	f003 030f 	and.w	r3, r3, #15
 800e6c0:	61fb      	str	r3, [r7, #28]
 800e6c2:	e005      	b.n	800e6d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800e6c4:	4b2d      	ldr	r3, [pc, #180]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	091b      	lsrs	r3, r3, #4
 800e6ca:	f003 030f 	and.w	r3, r3, #15
 800e6ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800e6d0:	4a2b      	ldr	r2, [pc, #172]	; (800e780 <HAL_RCC_GetSysClockFreq+0x10c>)
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d10d      	bne.n	800e6fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e6e4:	e00a      	b.n	800e6fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	2b04      	cmp	r3, #4
 800e6ea:	d102      	bne.n	800e6f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e6ec:	4b25      	ldr	r3, [pc, #148]	; (800e784 <HAL_RCC_GetSysClockFreq+0x110>)
 800e6ee:	61bb      	str	r3, [r7, #24]
 800e6f0:	e004      	b.n	800e6fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	2b08      	cmp	r3, #8
 800e6f6:	d101      	bne.n	800e6fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e6f8:	4b22      	ldr	r3, [pc, #136]	; (800e784 <HAL_RCC_GetSysClockFreq+0x110>)
 800e6fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	2b0c      	cmp	r3, #12
 800e700:	d134      	bne.n	800e76c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e702:	4b1e      	ldr	r3, [pc, #120]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	f003 0303 	and.w	r3, r3, #3
 800e70a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d003      	beq.n	800e71a <HAL_RCC_GetSysClockFreq+0xa6>
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	2b03      	cmp	r3, #3
 800e716:	d003      	beq.n	800e720 <HAL_RCC_GetSysClockFreq+0xac>
 800e718:	e005      	b.n	800e726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800e71a:	4b1a      	ldr	r3, [pc, #104]	; (800e784 <HAL_RCC_GetSysClockFreq+0x110>)
 800e71c:	617b      	str	r3, [r7, #20]
      break;
 800e71e:	e005      	b.n	800e72c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800e720:	4b18      	ldr	r3, [pc, #96]	; (800e784 <HAL_RCC_GetSysClockFreq+0x110>)
 800e722:	617b      	str	r3, [r7, #20]
      break;
 800e724:	e002      	b.n	800e72c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	617b      	str	r3, [r7, #20]
      break;
 800e72a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e72c:	4b13      	ldr	r3, [pc, #76]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	091b      	lsrs	r3, r3, #4
 800e732:	f003 030f 	and.w	r3, r3, #15
 800e736:	3301      	adds	r3, #1
 800e738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800e73a:	4b10      	ldr	r3, [pc, #64]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	0a1b      	lsrs	r3, r3, #8
 800e740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e744:	697a      	ldr	r2, [r7, #20]
 800e746:	fb03 f202 	mul.w	r2, r3, r2
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e752:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <HAL_RCC_GetSysClockFreq+0x108>)
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	0e5b      	lsrs	r3, r3, #25
 800e758:	f003 0303 	and.w	r3, r3, #3
 800e75c:	3301      	adds	r3, #1
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800e762:	697a      	ldr	r2, [r7, #20]
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	fbb2 f3f3 	udiv	r3, r2, r3
 800e76a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800e76c:	69bb      	ldr	r3, [r7, #24]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3724      	adds	r7, #36	; 0x24
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	40021000 	.word	0x40021000
 800e780:	08019f58 	.word	0x08019f58
 800e784:	00f42400 	.word	0x00f42400

0800e788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e788:	b480      	push	{r7}
 800e78a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e78c:	4b03      	ldr	r3, [pc, #12]	; (800e79c <HAL_RCC_GetHCLKFreq+0x14>)
 800e78e:	681b      	ldr	r3, [r3, #0]
}
 800e790:	4618      	mov	r0, r3
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	20000468 	.word	0x20000468

0800e7a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e7ac:	4b27      	ldr	r3, [pc, #156]	; (800e84c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d003      	beq.n	800e7c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800e7b8:	f7ff f9ca 	bl	800db50 <HAL_PWREx_GetVoltageRange>
 800e7bc:	6178      	str	r0, [r7, #20]
 800e7be:	e014      	b.n	800e7ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800e7c0:	4b22      	ldr	r3, [pc, #136]	; (800e84c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7c4:	4a21      	ldr	r2, [pc, #132]	; (800e84c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e7c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7ca:	6593      	str	r3, [r2, #88]	; 0x58
 800e7cc:	4b1f      	ldr	r3, [pc, #124]	; (800e84c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7d4:	60fb      	str	r3, [r7, #12]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800e7d8:	f7ff f9ba 	bl	800db50 <HAL_PWREx_GetVoltageRange>
 800e7dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800e7de:	4b1b      	ldr	r3, [pc, #108]	; (800e84c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7e2:	4a1a      	ldr	r2, [pc, #104]	; (800e84c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e7e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7f0:	d10b      	bne.n	800e80a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b80      	cmp	r3, #128	; 0x80
 800e7f6:	d913      	bls.n	800e820 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2ba0      	cmp	r3, #160	; 0xa0
 800e7fc:	d902      	bls.n	800e804 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800e7fe:	2302      	movs	r3, #2
 800e800:	613b      	str	r3, [r7, #16]
 800e802:	e00d      	b.n	800e820 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e804:	2301      	movs	r3, #1
 800e806:	613b      	str	r3, [r7, #16]
 800e808:	e00a      	b.n	800e820 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b7f      	cmp	r3, #127	; 0x7f
 800e80e:	d902      	bls.n	800e816 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800e810:	2302      	movs	r3, #2
 800e812:	613b      	str	r3, [r7, #16]
 800e814:	e004      	b.n	800e820 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b70      	cmp	r3, #112	; 0x70
 800e81a:	d101      	bne.n	800e820 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e81c:	2301      	movs	r3, #1
 800e81e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e820:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f023 020f 	bic.w	r2, r3, #15
 800e828:	4909      	ldr	r1, [pc, #36]	; (800e850 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800e830:	4b07      	ldr	r3, [pc, #28]	; (800e850 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 030f 	and.w	r3, r3, #15
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d001      	beq.n	800e842 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	e000      	b.n	800e844 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	40021000 	.word	0x40021000
 800e850:	40022000 	.word	0x40022000

0800e854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e854:	b480      	push	{r7}
 800e856:	b087      	sub	sp, #28
 800e858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800e85e:	4b2d      	ldr	r3, [pc, #180]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	f003 0303 	and.w	r3, r3, #3
 800e866:	2b01      	cmp	r3, #1
 800e868:	d118      	bne.n	800e89c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800e86a:	4b2a      	ldr	r3, [pc, #168]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f003 0308 	and.w	r3, r3, #8
 800e872:	2b00      	cmp	r3, #0
 800e874:	d107      	bne.n	800e886 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800e876:	4b27      	ldr	r3, [pc, #156]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e87c:	0a1b      	lsrs	r3, r3, #8
 800e87e:	f003 030f 	and.w	r3, r3, #15
 800e882:	617b      	str	r3, [r7, #20]
 800e884:	e005      	b.n	800e892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800e886:	4b23      	ldr	r3, [pc, #140]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	091b      	lsrs	r3, r3, #4
 800e88c:	f003 030f 	and.w	r3, r3, #15
 800e890:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800e892:	4a21      	ldr	r2, [pc, #132]	; (800e918 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e89a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e89c:	4b1d      	ldr	r3, [pc, #116]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	f003 0303 	and.w	r3, r3, #3
 800e8a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d003      	beq.n	800e8b4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d003      	beq.n	800e8ba <RCC_GetSysClockFreqFromPLLSource+0x66>
 800e8b2:	e005      	b.n	800e8c0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800e8b4:	4b19      	ldr	r3, [pc, #100]	; (800e91c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800e8b6:	613b      	str	r3, [r7, #16]
    break;
 800e8b8:	e005      	b.n	800e8c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800e8ba:	4b18      	ldr	r3, [pc, #96]	; (800e91c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800e8bc:	613b      	str	r3, [r7, #16]
    break;
 800e8be:	e002      	b.n	800e8c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	613b      	str	r3, [r7, #16]
    break;
 800e8c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e8c6:	4b13      	ldr	r3, [pc, #76]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	091b      	lsrs	r3, r3, #4
 800e8cc:	f003 030f 	and.w	r3, r3, #15
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800e8d4:	4b0f      	ldr	r3, [pc, #60]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	0a1b      	lsrs	r3, r3, #8
 800e8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8de:	693a      	ldr	r2, [r7, #16]
 800e8e0:	fb03 f202 	mul.w	r2, r3, r2
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e8ec:	4b09      	ldr	r3, [pc, #36]	; (800e914 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	0e5b      	lsrs	r3, r3, #25
 800e8f2:	f003 0303 	and.w	r3, r3, #3
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	005b      	lsls	r3, r3, #1
 800e8fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	fbb2 f3f3 	udiv	r3, r2, r3
 800e904:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800e906:	683b      	ldr	r3, [r7, #0]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	371c      	adds	r7, #28
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	40021000 	.word	0x40021000
 800e918:	08019f58 	.word	0x08019f58
 800e91c:	00f42400 	.word	0x00f42400

0800e920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e928:	2300      	movs	r3, #0
 800e92a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e92c:	2300      	movs	r3, #0
 800e92e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d040      	beq.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e940:	2b80      	cmp	r3, #128	; 0x80
 800e942:	d02a      	beq.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e944:	2b80      	cmp	r3, #128	; 0x80
 800e946:	d825      	bhi.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e948:	2b60      	cmp	r3, #96	; 0x60
 800e94a:	d026      	beq.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e94c:	2b60      	cmp	r3, #96	; 0x60
 800e94e:	d821      	bhi.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e950:	2b40      	cmp	r3, #64	; 0x40
 800e952:	d006      	beq.n	800e962 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800e954:	2b40      	cmp	r3, #64	; 0x40
 800e956:	d81d      	bhi.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d009      	beq.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800e95c:	2b20      	cmp	r3, #32
 800e95e:	d010      	beq.n	800e982 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800e960:	e018      	b.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e962:	4b89      	ldr	r3, [pc, #548]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	4a88      	ldr	r2, [pc, #544]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e96c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e96e:	e015      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3304      	adds	r3, #4
 800e974:	2100      	movs	r1, #0
 800e976:	4618      	mov	r0, r3
 800e978:	f000 fb8a 	bl	800f090 <RCCEx_PLLSAI1_Config>
 800e97c:	4603      	mov	r3, r0
 800e97e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e980:	e00c      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	3320      	adds	r3, #32
 800e986:	2100      	movs	r1, #0
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 fc75 	bl	800f278 <RCCEx_PLLSAI2_Config>
 800e98e:	4603      	mov	r3, r0
 800e990:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e992:	e003      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	74fb      	strb	r3, [r7, #19]
      break;
 800e998:	e000      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800e99a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e99c:	7cfb      	ldrb	r3, [r7, #19]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10b      	bne.n	800e9ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e9a2:	4b79      	ldr	r3, [pc, #484]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e9a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e9a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b0:	4975      	ldr	r1, [pc, #468]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e9b8:	e001      	b.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9ba:	7cfb      	ldrb	r3, [r7, #19]
 800e9bc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d047      	beq.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d2:	d030      	beq.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d8:	d82a      	bhi.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e9da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9de:	d02a      	beq.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e9e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9e4:	d824      	bhi.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e9e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9ea:	d008      	beq.n	800e9fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 800e9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9f0:	d81e      	bhi.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00a      	beq.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800e9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9fa:	d010      	beq.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e9fc:	e018      	b.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e9fe:	4b62      	ldr	r3, [pc, #392]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	4a61      	ldr	r2, [pc, #388]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea08:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ea0a:	e015      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	2100      	movs	r1, #0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f000 fb3c 	bl	800f090 <RCCEx_PLLSAI1_Config>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ea1c:	e00c      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3320      	adds	r3, #32
 800ea22:	2100      	movs	r1, #0
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 fc27 	bl	800f278 <RCCEx_PLLSAI2_Config>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ea2e:	e003      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	74fb      	strb	r3, [r7, #19]
      break;
 800ea34:	e000      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800ea36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea38:	7cfb      	ldrb	r3, [r7, #19]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10b      	bne.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ea3e:	4b52      	ldr	r3, [pc, #328]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ea44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea4c:	494e      	ldr	r1, [pc, #312]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800ea54:	e001      	b.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea56:	7cfb      	ldrb	r3, [r7, #19]
 800ea58:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f000 809f 	beq.w	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ea6c:	4b46      	ldr	r3, [pc, #280]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d101      	bne.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e000      	b.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00d      	beq.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea82:	4b41      	ldr	r3, [pc, #260]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea86:	4a40      	ldr	r2, [pc, #256]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea8c:	6593      	str	r3, [r2, #88]	; 0x58
 800ea8e:	4b3e      	ldr	r3, [pc, #248]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ea90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea96:	60bb      	str	r3, [r7, #8]
 800ea98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ea9e:	4b3b      	ldr	r3, [pc, #236]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a3a      	ldr	r2, [pc, #232]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800eaa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800eaaa:	f7fc fd1d 	bl	800b4e8 <HAL_GetTick>
 800eaae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800eab0:	e009      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eab2:	f7fc fd19 	bl	800b4e8 <HAL_GetTick>
 800eab6:	4602      	mov	r2, r0
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d902      	bls.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800eac0:	2303      	movs	r3, #3
 800eac2:	74fb      	strb	r3, [r7, #19]
        break;
 800eac4:	e005      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800eac6:	4b31      	ldr	r3, [pc, #196]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0ef      	beq.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800ead2:	7cfb      	ldrb	r3, [r7, #19]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d15b      	bne.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ead8:	4b2b      	ldr	r3, [pc, #172]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eae2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d01f      	beq.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eaf0:	697a      	ldr	r2, [r7, #20]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d019      	beq.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800eaf6:	4b24      	ldr	r3, [pc, #144]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eaf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eafc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800eb02:	4b21      	ldr	r3, [pc, #132]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb08:	4a1f      	ldr	r2, [pc, #124]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eb12:	4b1d      	ldr	r3, [pc, #116]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb18:	4a1b      	ldr	r2, [pc, #108]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800eb22:	4a19      	ldr	r2, [pc, #100]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	f003 0301 	and.w	r3, r3, #1
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d016      	beq.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb34:	f7fc fcd8 	bl	800b4e8 <HAL_GetTick>
 800eb38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800eb3a:	e00b      	b.n	800eb54 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb3c:	f7fc fcd4 	bl	800b4e8 <HAL_GetTick>
 800eb40:	4602      	mov	r2, r0
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d902      	bls.n	800eb54 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800eb4e:	2303      	movs	r3, #3
 800eb50:	74fb      	strb	r3, [r7, #19]
            break;
 800eb52:	e006      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800eb54:	4b0c      	ldr	r3, [pc, #48]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d0ec      	beq.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800eb62:	7cfb      	ldrb	r3, [r7, #19]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10c      	bne.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb68:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb78:	4903      	ldr	r1, [pc, #12]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800eb80:	e008      	b.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800eb82:	7cfb      	ldrb	r3, [r7, #19]
 800eb84:	74bb      	strb	r3, [r7, #18]
 800eb86:	e005      	b.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800eb88:	40021000 	.word	0x40021000
 800eb8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb90:	7cfb      	ldrb	r3, [r7, #19]
 800eb92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800eb94:	7c7b      	ldrb	r3, [r7, #17]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d105      	bne.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb9a:	4ba0      	ldr	r3, [pc, #640]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800eb9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb9e:	4a9f      	ldr	r2, [pc, #636]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800eba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eba4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00a      	beq.n	800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ebb2:	4b9a      	ldr	r3, [pc, #616]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ebb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebb8:	f023 0203 	bic.w	r2, r3, #3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc0:	4996      	ldr	r1, [pc, #600]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f003 0302 	and.w	r3, r3, #2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00a      	beq.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ebd4:	4b91      	ldr	r3, [pc, #580]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ebd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebda:	f023 020c 	bic.w	r2, r3, #12
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe2:	498e      	ldr	r1, [pc, #568]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f003 0304 	and.w	r3, r3, #4
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ebf6:	4b89      	ldr	r3, [pc, #548]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ebf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec04:	4985      	ldr	r1, [pc, #532]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec06:	4313      	orrs	r3, r2
 800ec08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f003 0308 	and.w	r3, r3, #8
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00a      	beq.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ec18:	4b80      	ldr	r3, [pc, #512]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec26:	497d      	ldr	r1, [pc, #500]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0310 	and.w	r3, r3, #16
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00a      	beq.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ec3a:	4b78      	ldr	r3, [pc, #480]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec48:	4974      	ldr	r1, [pc, #464]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f003 0320 	and.w	r3, r3, #32
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00a      	beq.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ec5c:	4b6f      	ldr	r3, [pc, #444]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec6a:	496c      	ldr	r1, [pc, #432]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00a      	beq.n	800ec94 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ec7e:	4b67      	ldr	r3, [pc, #412]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec8c:	4963      	ldr	r1, [pc, #396]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00a      	beq.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800eca0:	4b5e      	ldr	r3, [pc, #376]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800eca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eca6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ecae:	495b      	ldr	r1, [pc, #364]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00a      	beq.n	800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ecc2:	4b56      	ldr	r3, [pc, #344]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ecc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecd0:	4952      	ldr	r1, [pc, #328]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00a      	beq.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ece4:	4b4d      	ldr	r3, [pc, #308]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ece6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecf2:	494a      	ldr	r1, [pc, #296]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00a      	beq.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ed06:	4b45      	ldr	r3, [pc, #276]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed14:	4941      	ldr	r1, [pc, #260]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed16:	4313      	orrs	r3, r2
 800ed18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00a      	beq.n	800ed3e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ed28:	4b3c      	ldr	r3, [pc, #240]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ed2e:	f023 0203 	bic.w	r2, r3, #3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed36:	4939      	ldr	r1, [pc, #228]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d028      	beq.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ed4a:	4b34      	ldr	r3, [pc, #208]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed58:	4930      	ldr	r1, [pc, #192]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed68:	d106      	bne.n	800ed78 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ed6a:	4b2c      	ldr	r3, [pc, #176]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	4a2b      	ldr	r2, [pc, #172]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ed70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed74:	60d3      	str	r3, [r2, #12]
 800ed76:	e011      	b.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ed80:	d10c      	bne.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3304      	adds	r3, #4
 800ed86:	2101      	movs	r1, #1
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 f981 	bl	800f090 <RCCEx_PLLSAI1_Config>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ed92:	7cfb      	ldrb	r3, [r7, #19]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800ed98:	7cfb      	ldrb	r3, [r7, #19]
 800ed9a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d04d      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edb0:	d108      	bne.n	800edc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800edb2:	4b1a      	ldr	r3, [pc, #104]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800edb8:	4a18      	ldr	r2, [pc, #96]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800edc2:	e012      	b.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800edc4:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800edca:	4a14      	ldr	r2, [pc, #80]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800edd4:	4b11      	ldr	r3, [pc, #68]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ede2:	490e      	ldr	r1, [pc, #56]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ede4:	4313      	orrs	r3, r2
 800ede6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800edf2:	d106      	bne.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800edf4:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	4a08      	ldr	r2, [pc, #32]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800edfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edfe:	60d3      	str	r3, [r2, #12]
 800ee00:	e020      	b.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee0a:	d109      	bne.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ee0c:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	4a02      	ldr	r2, [pc, #8]	; (800ee1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ee12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee16:	60d3      	str	r3, [r2, #12]
 800ee18:	e014      	b.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ee1a:	bf00      	nop
 800ee1c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee28:	d10c      	bne.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	2101      	movs	r1, #1
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 f92d 	bl	800f090 <RCCEx_PLLSAI1_Config>
 800ee36:	4603      	mov	r3, r0
 800ee38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ee3a:	7cfb      	ldrb	r3, [r7, #19]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800ee40:	7cfb      	ldrb	r3, [r7, #19]
 800ee42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d028      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ee50:	4b7a      	ldr	r3, [pc, #488]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ee52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee5e:	4977      	ldr	r1, [pc, #476]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ee60:	4313      	orrs	r3, r2
 800ee62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee6e:	d106      	bne.n	800ee7e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ee70:	4b72      	ldr	r3, [pc, #456]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	4a71      	ldr	r2, [pc, #452]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ee76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee7a:	60d3      	str	r3, [r2, #12]
 800ee7c:	e011      	b.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee86:	d10c      	bne.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3304      	adds	r3, #4
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 f8fe 	bl	800f090 <RCCEx_PLLSAI1_Config>
 800ee94:	4603      	mov	r3, r0
 800ee96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ee98:	7cfb      	ldrb	r3, [r7, #19]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800ee9e:	7cfb      	ldrb	r3, [r7, #19]
 800eea0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d01e      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eeae:	4b63      	ldr	r3, [pc, #396]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800eeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eebe:	495f      	ldr	r1, [pc, #380]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800eec0:	4313      	orrs	r3, r2
 800eec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eed0:	d10c      	bne.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3304      	adds	r3, #4
 800eed6:	2102      	movs	r1, #2
 800eed8:	4618      	mov	r0, r3
 800eeda:	f000 f8d9 	bl	800f090 <RCCEx_PLLSAI1_Config>
 800eede:	4603      	mov	r3, r0
 800eee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800eee2:	7cfb      	ldrb	r3, [r7, #19]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800eee8:	7cfb      	ldrb	r3, [r7, #19]
 800eeea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00b      	beq.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800eef8:	4b50      	ldr	r3, [pc, #320]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800eefa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eefe:	f023 0204 	bic.w	r2, r3, #4
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef08:	494c      	ldr	r1, [pc, #304]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00b      	beq.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ef1c:	4b47      	ldr	r3, [pc, #284]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ef22:	f023 0218 	bic.w	r2, r3, #24
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef2c:	4943      	ldr	r1, [pc, #268]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d035      	beq.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ef40:	4b3e      	ldr	r3, [pc, #248]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a3d      	ldr	r2, [pc, #244]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef4c:	f7fc facc 	bl	800b4e8 <HAL_GetTick>
 800ef50:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ef52:	e009      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ef54:	f7fc fac8 	bl	800b4e8 <HAL_GetTick>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d902      	bls.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800ef62:	2303      	movs	r3, #3
 800ef64:	74fb      	strb	r3, [r7, #19]
        break;
 800ef66:	e005      	b.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ef68:	4b34      	ldr	r3, [pc, #208]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1ef      	bne.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800ef74:	7cfb      	ldrb	r3, [r7, #19]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d113      	bne.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800ef7a:	4b30      	ldr	r3, [pc, #192]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ef80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef8a:	492c      	ldr	r1, [pc, #176]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	3320      	adds	r3, #32
 800ef96:	2102      	movs	r1, #2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f000 f96d 	bl	800f278 <RCCEx_PLLSAI2_Config>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800efa2:	7cfb      	ldrb	r3, [r7, #19]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d001      	beq.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800efa8:	7cfb      	ldrb	r3, [r7, #19]
 800efaa:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01e      	beq.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800efb8:	4b20      	ldr	r3, [pc, #128]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800efba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800efbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc8:	491c      	ldr	r1, [pc, #112]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800efca:	4313      	orrs	r3, r2
 800efcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efda:	d10c      	bne.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3320      	adds	r3, #32
 800efe0:	2101      	movs	r1, #1
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f948 	bl	800f278 <RCCEx_PLLSAI2_Config>
 800efe8:	4603      	mov	r3, r0
 800efea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800efec:	7cfb      	ldrb	r3, [r7, #19]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800eff2:	7cfb      	ldrb	r3, [r7, #19]
 800eff4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800effe:	2b00      	cmp	r3, #0
 800f000:	d017      	beq.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f002:	4b0e      	ldr	r3, [pc, #56]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800f004:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f012:	490a      	ldr	r1, [pc, #40]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800f014:	4313      	orrs	r3, r2
 800f016:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f024:	d105      	bne.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f026:	4b05      	ldr	r3, [pc, #20]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	4a04      	ldr	r2, [pc, #16]	; (800f03c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800f02c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f030:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800f032:	7cbb      	ldrb	r3, [r7, #18]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	40021000 	.word	0x40021000

0800f040 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800f040:	b480      	push	{r7}
 800f042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800f044:	4b09      	ldr	r3, [pc, #36]	; (800f06c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800f046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f04a:	4a08      	ldr	r2, [pc, #32]	; (800f06c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800f04c:	f023 0320 	bic.w	r3, r3, #32
 800f050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800f054:	4b05      	ldr	r3, [pc, #20]	; (800f06c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	4a04      	ldr	r2, [pc, #16]	; (800f06c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800f05a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f05e:	6193      	str	r3, [r2, #24]
}
 800f060:	bf00      	nop
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	40021000 	.word	0x40021000

0800f070 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800f070:	b480      	push	{r7}
 800f072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800f074:	4b05      	ldr	r3, [pc, #20]	; (800f08c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a04      	ldr	r2, [pc, #16]	; (800f08c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800f07a:	f043 0304 	orr.w	r3, r3, #4
 800f07e:	6013      	str	r3, [r2, #0]
}
 800f080:	bf00      	nop
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	40021000 	.word	0x40021000

0800f090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f09e:	4b72      	ldr	r3, [pc, #456]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	f003 0303 	and.w	r3, r3, #3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00e      	beq.n	800f0c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800f0aa:	4b6f      	ldr	r3, [pc, #444]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	f003 0203 	and.w	r2, r3, #3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d103      	bne.n	800f0c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
       ||
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d142      	bne.n	800f148 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	73fb      	strb	r3, [r7, #15]
 800f0c6:	e03f      	b.n	800f148 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2b03      	cmp	r3, #3
 800f0ce:	d018      	beq.n	800f102 <RCCEx_PLLSAI1_Config+0x72>
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	d825      	bhi.n	800f120 <RCCEx_PLLSAI1_Config+0x90>
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d002      	beq.n	800f0de <RCCEx_PLLSAI1_Config+0x4e>
 800f0d8:	2b02      	cmp	r3, #2
 800f0da:	d009      	beq.n	800f0f0 <RCCEx_PLLSAI1_Config+0x60>
 800f0dc:	e020      	b.n	800f120 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f0de:	4b62      	ldr	r3, [pc, #392]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f003 0302 	and.w	r3, r3, #2
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d11d      	bne.n	800f126 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f0ee:	e01a      	b.n	800f126 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f0f0:	4b5d      	ldr	r3, [pc, #372]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d116      	bne.n	800f12a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f100:	e013      	b.n	800f12a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f102:	4b59      	ldr	r3, [pc, #356]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10f      	bne.n	800f12e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f10e:	4b56      	ldr	r3, [pc, #344]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f116:	2b00      	cmp	r3, #0
 800f118:	d109      	bne.n	800f12e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f11e:	e006      	b.n	800f12e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	73fb      	strb	r3, [r7, #15]
      break;
 800f124:	e004      	b.n	800f130 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800f126:	bf00      	nop
 800f128:	e002      	b.n	800f130 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800f12a:	bf00      	nop
 800f12c:	e000      	b.n	800f130 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800f12e:	bf00      	nop
    }

    if(status == HAL_OK)
 800f130:	7bfb      	ldrb	r3, [r7, #15]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d108      	bne.n	800f148 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800f136:	4b4c      	ldr	r3, [pc, #304]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	f023 0203 	bic.w	r2, r3, #3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4949      	ldr	r1, [pc, #292]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f144:	4313      	orrs	r3, r2
 800f146:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f040 8086 	bne.w	800f25c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800f150:	4b45      	ldr	r3, [pc, #276]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a44      	ldr	r2, [pc, #272]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f15a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f15c:	f7fc f9c4 	bl	800b4e8 <HAL_GetTick>
 800f160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f162:	e009      	b.n	800f178 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f164:	f7fc f9c0 	bl	800b4e8 <HAL_GetTick>
 800f168:	4602      	mov	r2, r0
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	2b02      	cmp	r3, #2
 800f170:	d902      	bls.n	800f178 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800f172:	2303      	movs	r3, #3
 800f174:	73fb      	strb	r3, [r7, #15]
        break;
 800f176:	e005      	b.n	800f184 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f178:	4b3b      	ldr	r3, [pc, #236]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1ef      	bne.n	800f164 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800f184:	7bfb      	ldrb	r3, [r7, #15]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d168      	bne.n	800f25c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d113      	bne.n	800f1b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f190:	4b35      	ldr	r3, [pc, #212]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	4b35      	ldr	r3, [pc, #212]	; (800f26c <RCCEx_PLLSAI1_Config+0x1dc>)
 800f196:	4013      	ands	r3, r2
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	6892      	ldr	r2, [r2, #8]
 800f19c:	0211      	lsls	r1, r2, #8
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	68d2      	ldr	r2, [r2, #12]
 800f1a2:	06d2      	lsls	r2, r2, #27
 800f1a4:	4311      	orrs	r1, r2
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	6852      	ldr	r2, [r2, #4]
 800f1aa:	3a01      	subs	r2, #1
 800f1ac:	0112      	lsls	r2, r2, #4
 800f1ae:	430a      	orrs	r2, r1
 800f1b0:	492d      	ldr	r1, [pc, #180]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	610b      	str	r3, [r1, #16]
 800f1b6:	e02d      	b.n	800f214 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d115      	bne.n	800f1ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f1be:	4b2a      	ldr	r3, [pc, #168]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f1c0:	691a      	ldr	r2, [r3, #16]
 800f1c2:	4b2b      	ldr	r3, [pc, #172]	; (800f270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	6892      	ldr	r2, [r2, #8]
 800f1ca:	0211      	lsls	r1, r2, #8
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	6912      	ldr	r2, [r2, #16]
 800f1d0:	0852      	lsrs	r2, r2, #1
 800f1d2:	3a01      	subs	r2, #1
 800f1d4:	0552      	lsls	r2, r2, #21
 800f1d6:	4311      	orrs	r1, r2
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	6852      	ldr	r2, [r2, #4]
 800f1dc:	3a01      	subs	r2, #1
 800f1de:	0112      	lsls	r2, r2, #4
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	4921      	ldr	r1, [pc, #132]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	610b      	str	r3, [r1, #16]
 800f1e8:	e014      	b.n	800f214 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f1ea:	4b1f      	ldr	r3, [pc, #124]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f1ec:	691a      	ldr	r2, [r3, #16]
 800f1ee:	4b21      	ldr	r3, [pc, #132]	; (800f274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	6892      	ldr	r2, [r2, #8]
 800f1f6:	0211      	lsls	r1, r2, #8
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	6952      	ldr	r2, [r2, #20]
 800f1fc:	0852      	lsrs	r2, r2, #1
 800f1fe:	3a01      	subs	r2, #1
 800f200:	0652      	lsls	r2, r2, #25
 800f202:	4311      	orrs	r1, r2
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	6852      	ldr	r2, [r2, #4]
 800f208:	3a01      	subs	r2, #1
 800f20a:	0112      	lsls	r2, r2, #4
 800f20c:	430a      	orrs	r2, r1
 800f20e:	4916      	ldr	r1, [pc, #88]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f210:	4313      	orrs	r3, r2
 800f212:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800f214:	4b14      	ldr	r3, [pc, #80]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a13      	ldr	r2, [pc, #76]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f21a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f21e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f220:	f7fc f962 	bl	800b4e8 <HAL_GetTick>
 800f224:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f226:	e009      	b.n	800f23c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f228:	f7fc f95e 	bl	800b4e8 <HAL_GetTick>
 800f22c:	4602      	mov	r2, r0
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	1ad3      	subs	r3, r2, r3
 800f232:	2b02      	cmp	r3, #2
 800f234:	d902      	bls.n	800f23c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800f236:	2303      	movs	r3, #3
 800f238:	73fb      	strb	r3, [r7, #15]
          break;
 800f23a:	e005      	b.n	800f248 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f23c:	4b0a      	ldr	r3, [pc, #40]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d0ef      	beq.n	800f228 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800f248:	7bfb      	ldrb	r3, [r7, #15]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d106      	bne.n	800f25c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800f24e:	4b06      	ldr	r3, [pc, #24]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f250:	691a      	ldr	r2, [r3, #16]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	4904      	ldr	r1, [pc, #16]	; (800f268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f258:	4313      	orrs	r3, r2
 800f25a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	40021000 	.word	0x40021000
 800f26c:	07ff800f 	.word	0x07ff800f
 800f270:	ff9f800f 	.word	0xff9f800f
 800f274:	f9ff800f 	.word	0xf9ff800f

0800f278 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f286:	4b72      	ldr	r3, [pc, #456]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	f003 0303 	and.w	r3, r3, #3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00e      	beq.n	800f2b0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800f292:	4b6f      	ldr	r3, [pc, #444]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	f003 0203 	and.w	r2, r3, #3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d103      	bne.n	800f2aa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
       ||
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d142      	bne.n	800f330 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	73fb      	strb	r3, [r7, #15]
 800f2ae:	e03f      	b.n	800f330 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b03      	cmp	r3, #3
 800f2b6:	d018      	beq.n	800f2ea <RCCEx_PLLSAI2_Config+0x72>
 800f2b8:	2b03      	cmp	r3, #3
 800f2ba:	d825      	bhi.n	800f308 <RCCEx_PLLSAI2_Config+0x90>
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d002      	beq.n	800f2c6 <RCCEx_PLLSAI2_Config+0x4e>
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d009      	beq.n	800f2d8 <RCCEx_PLLSAI2_Config+0x60>
 800f2c4:	e020      	b.n	800f308 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f2c6:	4b62      	ldr	r3, [pc, #392]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f003 0302 	and.w	r3, r3, #2
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d11d      	bne.n	800f30e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f2d6:	e01a      	b.n	800f30e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f2d8:	4b5d      	ldr	r3, [pc, #372]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d116      	bne.n	800f312 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f2e8:	e013      	b.n	800f312 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f2ea:	4b59      	ldr	r3, [pc, #356]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10f      	bne.n	800f316 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f2f6:	4b56      	ldr	r3, [pc, #344]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d109      	bne.n	800f316 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800f302:	2301      	movs	r3, #1
 800f304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f306:	e006      	b.n	800f316 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	73fb      	strb	r3, [r7, #15]
      break;
 800f30c:	e004      	b.n	800f318 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800f30e:	bf00      	nop
 800f310:	e002      	b.n	800f318 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800f312:	bf00      	nop
 800f314:	e000      	b.n	800f318 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800f316:	bf00      	nop
    }

    if(status == HAL_OK)
 800f318:	7bfb      	ldrb	r3, [r7, #15]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d108      	bne.n	800f330 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800f31e:	4b4c      	ldr	r3, [pc, #304]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	f023 0203 	bic.w	r2, r3, #3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4949      	ldr	r1, [pc, #292]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f32c:	4313      	orrs	r3, r2
 800f32e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800f330:	7bfb      	ldrb	r3, [r7, #15]
 800f332:	2b00      	cmp	r3, #0
 800f334:	f040 8086 	bne.w	800f444 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800f338:	4b45      	ldr	r3, [pc, #276]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a44      	ldr	r2, [pc, #272]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f33e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f344:	f7fc f8d0 	bl	800b4e8 <HAL_GetTick>
 800f348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f34a:	e009      	b.n	800f360 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800f34c:	f7fc f8cc 	bl	800b4e8 <HAL_GetTick>
 800f350:	4602      	mov	r2, r0
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	2b02      	cmp	r3, #2
 800f358:	d902      	bls.n	800f360 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800f35a:	2303      	movs	r3, #3
 800f35c:	73fb      	strb	r3, [r7, #15]
        break;
 800f35e:	e005      	b.n	800f36c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f360:	4b3b      	ldr	r3, [pc, #236]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1ef      	bne.n	800f34c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d168      	bne.n	800f444 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d113      	bne.n	800f3a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f378:	4b35      	ldr	r3, [pc, #212]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f37a:	695a      	ldr	r2, [r3, #20]
 800f37c:	4b35      	ldr	r3, [pc, #212]	; (800f454 <RCCEx_PLLSAI2_Config+0x1dc>)
 800f37e:	4013      	ands	r3, r2
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	6892      	ldr	r2, [r2, #8]
 800f384:	0211      	lsls	r1, r2, #8
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	68d2      	ldr	r2, [r2, #12]
 800f38a:	06d2      	lsls	r2, r2, #27
 800f38c:	4311      	orrs	r1, r2
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	6852      	ldr	r2, [r2, #4]
 800f392:	3a01      	subs	r2, #1
 800f394:	0112      	lsls	r2, r2, #4
 800f396:	430a      	orrs	r2, r1
 800f398:	492d      	ldr	r1, [pc, #180]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f39a:	4313      	orrs	r3, r2
 800f39c:	614b      	str	r3, [r1, #20]
 800f39e:	e02d      	b.n	800f3fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d115      	bne.n	800f3d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f3a6:	4b2a      	ldr	r3, [pc, #168]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f3a8:	695a      	ldr	r2, [r3, #20]
 800f3aa:	4b2b      	ldr	r3, [pc, #172]	; (800f458 <RCCEx_PLLSAI2_Config+0x1e0>)
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	6892      	ldr	r2, [r2, #8]
 800f3b2:	0211      	lsls	r1, r2, #8
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	6912      	ldr	r2, [r2, #16]
 800f3b8:	0852      	lsrs	r2, r2, #1
 800f3ba:	3a01      	subs	r2, #1
 800f3bc:	0552      	lsls	r2, r2, #21
 800f3be:	4311      	orrs	r1, r2
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	6852      	ldr	r2, [r2, #4]
 800f3c4:	3a01      	subs	r2, #1
 800f3c6:	0112      	lsls	r2, r2, #4
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	4921      	ldr	r1, [pc, #132]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	614b      	str	r3, [r1, #20]
 800f3d0:	e014      	b.n	800f3fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f3d2:	4b1f      	ldr	r3, [pc, #124]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f3d4:	695a      	ldr	r2, [r3, #20]
 800f3d6:	4b21      	ldr	r3, [pc, #132]	; (800f45c <RCCEx_PLLSAI2_Config+0x1e4>)
 800f3d8:	4013      	ands	r3, r2
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	6892      	ldr	r2, [r2, #8]
 800f3de:	0211      	lsls	r1, r2, #8
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	6952      	ldr	r2, [r2, #20]
 800f3e4:	0852      	lsrs	r2, r2, #1
 800f3e6:	3a01      	subs	r2, #1
 800f3e8:	0652      	lsls	r2, r2, #25
 800f3ea:	4311      	orrs	r1, r2
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	6852      	ldr	r2, [r2, #4]
 800f3f0:	3a01      	subs	r2, #1
 800f3f2:	0112      	lsls	r2, r2, #4
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	4916      	ldr	r1, [pc, #88]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800f3fc:	4b14      	ldr	r3, [pc, #80]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4a13      	ldr	r2, [pc, #76]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f408:	f7fc f86e 	bl	800b4e8 <HAL_GetTick>
 800f40c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800f40e:	e009      	b.n	800f424 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800f410:	f7fc f86a 	bl	800b4e8 <HAL_GetTick>
 800f414:	4602      	mov	r2, r0
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	d902      	bls.n	800f424 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800f41e:	2303      	movs	r3, #3
 800f420:	73fb      	strb	r3, [r7, #15]
          break;
 800f422:	e005      	b.n	800f430 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800f424:	4b0a      	ldr	r3, [pc, #40]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d0ef      	beq.n	800f410 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800f430:	7bfb      	ldrb	r3, [r7, #15]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d106      	bne.n	800f444 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800f436:	4b06      	ldr	r3, [pc, #24]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f438:	695a      	ldr	r2, [r3, #20]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	699b      	ldr	r3, [r3, #24]
 800f43e:	4904      	ldr	r1, [pc, #16]	; (800f450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f440:	4313      	orrs	r3, r2
 800f442:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800f444:	7bfb      	ldrb	r3, [r7, #15]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	40021000 	.word	0x40021000
 800f454:	07ff800f 	.word	0x07ff800f
 800f458:	ff9f800f 	.word	0xff9f800f
 800f45c:	f9ff800f 	.word	0xf9ff800f

0800f460 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d06c      	beq.n	800f54c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d106      	bne.n	800f48c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f006 f8aa 	bl	80155e0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2202      	movs	r2, #2
 800f490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	22ca      	movs	r2, #202	; 0xca
 800f49a:	625a      	str	r2, [r3, #36]	; 0x24
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2253      	movs	r2, #83	; 0x53
 800f4a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f9a0 	bl	800f7ea <RTC_EnterInitMode>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d14b      	bne.n	800f54c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	6812      	ldr	r2, [r2, #0]
 800f4be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4c6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6899      	ldr	r1, [r3, #8]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685a      	ldr	r2, [r3, #4]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	431a      	orrs	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	430a      	orrs	r2, r1
 800f4e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	68d2      	ldr	r2, [r2, #12]
 800f4ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6919      	ldr	r1, [r3, #16]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	041a      	lsls	r2, r3, #16
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	430a      	orrs	r2, r1
 800f502:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 f9a3 	bl	800f850 <RTC_ExitInitMode>
 800f50a:	4603      	mov	r3, r0
 800f50c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d11b      	bne.n	800f54c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f022 0203 	bic.w	r2, r2, #3
 800f522:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	69da      	ldr	r2, [r3, #28]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	695b      	ldr	r3, [r3, #20]
 800f532:	431a      	orrs	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	430a      	orrs	r2, r1
 800f53a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	22ff      	movs	r2, #255	; 0xff
 800f542:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f556:	b590      	push	{r4, r7, lr}
 800f558:	b087      	sub	sp, #28
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	60f8      	str	r0, [r7, #12]
 800f55e:	60b9      	str	r1, [r7, #8]
 800f560:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_RTC_SetTime+0x1a>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e08b      	b.n	800f688 <HAL_RTC_SetTime+0x132>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2202      	movs	r2, #2
 800f57c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	22ca      	movs	r2, #202	; 0xca
 800f586:	625a      	str	r2, [r3, #36]	; 0x24
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2253      	movs	r2, #83	; 0x53
 800f58e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 f92a 	bl	800f7ea <RTC_EnterInitMode>
 800f596:	4603      	mov	r3, r0
 800f598:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f59a:	7cfb      	ldrb	r3, [r7, #19]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d163      	bne.n	800f668 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d126      	bne.n	800f5f4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d102      	bne.n	800f5ba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 f984 	bl	800f8cc <RTC_ByteToBcd2>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	785b      	ldrb	r3, [r3, #1]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 f97d 	bl	800f8cc <RTC_ByteToBcd2>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f5d6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	789b      	ldrb	r3, [r3, #2]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 f975 	bl	800f8cc <RTC_ByteToBcd2>
 800f5e2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f5e4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	78db      	ldrb	r3, [r3, #3]
 800f5ec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	617b      	str	r3, [r7, #20]
 800f5f2:	e018      	b.n	800f626 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d102      	bne.n	800f608 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	2200      	movs	r2, #0
 800f606:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	785b      	ldrb	r3, [r3, #1]
 800f612:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f614:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800f616:	68ba      	ldr	r2, [r7, #8]
 800f618:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f61a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	78db      	ldrb	r3, [r3, #3]
 800f620:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f622:	4313      	orrs	r3, r2
 800f624:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f630:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f634:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f644:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	6899      	ldr	r1, [r3, #8]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	68da      	ldr	r2, [r3, #12]
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	691b      	ldr	r3, [r3, #16]
 800f654:	431a      	orrs	r2, r3
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	430a      	orrs	r2, r1
 800f65c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f000 f8f6 	bl	800f850 <RTC_ExitInitMode>
 800f664:	4603      	mov	r3, r0
 800f666:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	22ff      	movs	r2, #255	; 0xff
 800f66e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f670:	7cfb      	ldrb	r3, [r7, #19]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d103      	bne.n	800f67e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800f686:	7cfb      	ldrb	r3, [r7, #19]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	371c      	adds	r7, #28
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd90      	pop	{r4, r7, pc}

0800f690 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f690:	b590      	push	{r4, r7, lr}
 800f692:	b087      	sub	sp, #28
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d101      	bne.n	800f6aa <HAL_RTC_SetDate+0x1a>
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	e075      	b.n	800f796 <HAL_RTC_SetDate+0x106>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2202      	movs	r2, #2
 800f6b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10e      	bne.n	800f6de <HAL_RTC_SetDate+0x4e>
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	785b      	ldrb	r3, [r3, #1]
 800f6c4:	f003 0310 	and.w	r3, r3, #16
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d008      	beq.n	800f6de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	785b      	ldrb	r3, [r3, #1]
 800f6d0:	f023 0310 	bic.w	r3, r3, #16
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	330a      	adds	r3, #10
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d11c      	bne.n	800f71e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	78db      	ldrb	r3, [r3, #3]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 f8ef 	bl	800f8cc <RTC_ByteToBcd2>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	785b      	ldrb	r3, [r3, #1]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f000 f8e8 	bl	800f8cc <RTC_ByteToBcd2>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f700:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	789b      	ldrb	r3, [r3, #2]
 800f706:	4618      	mov	r0, r3
 800f708:	f000 f8e0 	bl	800f8cc <RTC_ByteToBcd2>
 800f70c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f70e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f718:	4313      	orrs	r3, r2
 800f71a:	617b      	str	r3, [r7, #20]
 800f71c:	e00e      	b.n	800f73c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	78db      	ldrb	r3, [r3, #3]
 800f722:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	785b      	ldrb	r3, [r3, #1]
 800f728:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f72a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800f730:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f738:	4313      	orrs	r3, r2
 800f73a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	22ca      	movs	r2, #202	; 0xca
 800f742:	625a      	str	r2, [r3, #36]	; 0x24
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2253      	movs	r2, #83	; 0x53
 800f74a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 f84c 	bl	800f7ea <RTC_EnterInitMode>
 800f752:	4603      	mov	r3, r0
 800f754:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f756:	7cfb      	ldrb	r3, [r7, #19]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10c      	bne.n	800f776 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f766:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f76a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f000 f86f 	bl	800f850 <RTC_ExitInitMode>
 800f772:	4603      	mov	r3, r0
 800f774:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	22ff      	movs	r2, #255	; 0xff
 800f77c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f77e:	7cfb      	ldrb	r3, [r7, #19]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d103      	bne.n	800f78c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2201      	movs	r2, #1
 800f788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2200      	movs	r2, #0
 800f790:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800f794:	7cfb      	ldrb	r3, [r7, #19]
}
 800f796:	4618      	mov	r0, r3
 800f798:	371c      	adds	r7, #28
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd90      	pop	{r4, r7, pc}

0800f79e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b084      	sub	sp, #16
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68da      	ldr	r2, [r3, #12]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f7b4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800f7b6:	f7fb fe97 	bl	800b4e8 <HAL_GetTick>
 800f7ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f7bc:	e009      	b.n	800f7d2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f7be:	f7fb fe93 	bl	800b4e8 <HAL_GetTick>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f7cc:	d901      	bls.n	800f7d2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800f7ce:	2303      	movs	r3, #3
 800f7d0:	e007      	b.n	800f7e2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	f003 0320 	and.w	r3, r3, #32
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0ee      	beq.n	800f7be <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f800:	2b00      	cmp	r3, #0
 800f802:	d120      	bne.n	800f846 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f80c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f80e:	f7fb fe6b 	bl	800b4e8 <HAL_GetTick>
 800f812:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f814:	e00d      	b.n	800f832 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f816:	f7fb fe67 	bl	800b4e8 <HAL_GetTick>
 800f81a:	4602      	mov	r2, r0
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f824:	d905      	bls.n	800f832 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800f826:	2303      	movs	r3, #3
 800f828:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2203      	movs	r2, #3
 800f82e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d102      	bne.n	800f846 <RTC_EnterInitMode+0x5c>
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	2b03      	cmp	r3, #3
 800f844:	d1e7      	bne.n	800f816 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800f846:	7bfb      	ldrb	r3, [r7, #15]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f858:	2300      	movs	r3, #0
 800f85a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800f85c:	4b1a      	ldr	r3, [pc, #104]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	4a19      	ldr	r2, [pc, #100]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f866:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800f868:	4b17      	ldr	r3, [pc, #92]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	f003 0320 	and.w	r3, r3, #32
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10c      	bne.n	800f88e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff ff92 	bl	800f79e <HAL_RTC_WaitForSynchro>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d01e      	beq.n	800f8be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2203      	movs	r2, #3
 800f884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800f888:	2303      	movs	r3, #3
 800f88a:	73fb      	strb	r3, [r7, #15]
 800f88c:	e017      	b.n	800f8be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f88e:	4b0e      	ldr	r3, [pc, #56]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	4a0d      	ldr	r2, [pc, #52]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f894:	f023 0320 	bic.w	r3, r3, #32
 800f898:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f7ff ff7f 	bl	800f79e <HAL_RTC_WaitForSynchro>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d005      	beq.n	800f8b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2203      	movs	r2, #3
 800f8aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800f8ae:	2303      	movs	r3, #3
 800f8b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f8b2:	4b05      	ldr	r3, [pc, #20]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	4a04      	ldr	r2, [pc, #16]	; (800f8c8 <RTC_ExitInitMode+0x78>)
 800f8b8:	f043 0320 	orr.w	r3, r3, #32
 800f8bc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	40002800 	.word	0x40002800

0800f8cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800f8de:	e005      	b.n	800f8ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800f8e6:	7afb      	ldrb	r3, [r7, #11]
 800f8e8:	3b0a      	subs	r3, #10
 800f8ea:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800f8ec:	7afb      	ldrb	r3, [r7, #11]
 800f8ee:	2b09      	cmp	r3, #9
 800f8f0:	d8f6      	bhi.n	800f8e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	011b      	lsls	r3, r3, #4
 800f8f8:	b2da      	uxtb	r2, r3
 800f8fa:	7afb      	ldrb	r3, [r7, #11]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	b2db      	uxtb	r3, r3
}
 800f900:	4618      	mov	r0, r3
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e0be      	b.n	800fa9c <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f922:	2b00      	cmp	r3, #0
 800f924:	d108      	bne.n	800f938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f92e:	d009      	beq.n	800f944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	61da      	str	r2, [r3, #28]
 800f936:	e005      	b.n	800f944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d106      	bne.n	800f95e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f8cb 	bl	800faf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2202      	movs	r2, #2
 800f962:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f974:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f97e:	d902      	bls.n	800f986 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f980:	2300      	movs	r3, #0
 800f982:	60fb      	str	r3, [r7, #12]
 800f984:	e002      	b.n	800f98c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f98a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f994:	d007      	beq.n	800f9a6 <HAL_SPI_Init+0x9a>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f99e:	d002      	beq.n	800f9a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f9b6:	431a      	orrs	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	f003 0302 	and.w	r3, r3, #2
 800f9c0:	431a      	orrs	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	695b      	ldr	r3, [r3, #20]
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	431a      	orrs	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	699b      	ldr	r3, [r3, #24]
 800f9d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9d4:	431a      	orrs	r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	69db      	ldr	r3, [r3, #28]
 800f9da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9de:	431a      	orrs	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a1b      	ldr	r3, [r3, #32]
 800f9e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9e8:	ea42 0103 	orr.w	r1, r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	430a      	orrs	r2, r1
 800f9fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa04:	d11b      	bne.n	800fa3e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d10b      	bne.n	800fa26 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa16:	d903      	bls.n	800fa20 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2202      	movs	r2, #2
 800fa1c:	631a      	str	r2, [r3, #48]	; 0x30
 800fa1e:	e002      	b.n	800fa26 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2201      	movs	r2, #1
 800fa24:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d107      	bne.n	800fa3e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	0c1b      	lsrs	r3, r3, #16
 800fa44:	f003 0204 	and.w	r2, r3, #4
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4c:	f003 0310 	and.w	r3, r3, #16
 800fa50:	431a      	orrs	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa56:	f003 0308 	and.w	r3, r3, #8
 800fa5a:	431a      	orrs	r2, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fa64:	ea42 0103 	orr.w	r1, r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	430a      	orrs	r2, r1
 800fa74:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa7e:	d105      	bne.n	800fa8c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	b292      	uxth	r2, r2
 800fa8a:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800fa9a:	2300      	movs	r3, #0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d101      	bne.n	800fab6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800fab2:	2301      	movs	r3, #1
 800fab4:	e01a      	b.n	800faec <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2202      	movs	r2, #2
 800faba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800facc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f81a 	bl	800fb08 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800fb10:	bf00      	nop
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b088      	sub	sp, #32
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	603b      	str	r3, [r7, #0]
 800fb28:	4613      	mov	r3, r2
 800fb2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d101      	bne.n	800fb3e <HAL_SPI_Transmit+0x22>
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	e17a      	b.n	800fe34 <HAL_SPI_Transmit+0x318>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2201      	movs	r2, #1
 800fb42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb46:	f7fb fccf 	bl	800b4e8 <HAL_GetTick>
 800fb4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fb4c:	88fb      	ldrh	r3, [r7, #6]
 800fb4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d002      	beq.n	800fb62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fb5c:	2302      	movs	r3, #2
 800fb5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fb60:	e15f      	b.n	800fe22 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d002      	beq.n	800fb6e <HAL_SPI_Transmit+0x52>
 800fb68:	88fb      	ldrh	r3, [r7, #6]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d102      	bne.n	800fb74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fb72:	e156      	b.n	800fe22 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2203      	movs	r2, #3
 800fb78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	68ba      	ldr	r2, [r7, #8]
 800fb86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	88fa      	ldrh	r2, [r7, #6]
 800fb8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	88fa      	ldrh	r2, [r7, #6]
 800fb92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2200      	movs	r2, #0
 800fb98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	689b      	ldr	r3, [r3, #8]
 800fbba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbbe:	d10f      	bne.n	800fbe0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fbde:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbe8:	d10f      	bne.n	800fc0a <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fbf8:	601a      	str	r2, [r3, #0]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fc08:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc14:	2b40      	cmp	r3, #64	; 0x40
 800fc16:	d007      	beq.n	800fc28 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fc30:	d94b      	bls.n	800fcca <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <HAL_SPI_Transmit+0x124>
 800fc3a:	8afb      	ldrh	r3, [r7, #22]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d13e      	bne.n	800fcbe <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc44:	881a      	ldrh	r2, [r3, #0]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc50:	1c9a      	adds	r2, r3, #2
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fc64:	e02b      	b.n	800fcbe <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	f003 0302 	and.w	r3, r3, #2
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	d112      	bne.n	800fc9a <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc78:	881a      	ldrh	r2, [r3, #0]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc84:	1c9a      	adds	r2, r3, #2
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	3b01      	subs	r3, #1
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fc98:	e011      	b.n	800fcbe <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc9a:	f7fb fc25 	bl	800b4e8 <HAL_GetTick>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d803      	bhi.n	800fcb2 <HAL_SPI_Transmit+0x196>
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcb0:	d102      	bne.n	800fcb8 <HAL_SPI_Transmit+0x19c>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800fcb8:	2303      	movs	r3, #3
 800fcba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fcbc:	e0b1      	b.n	800fe22 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d1ce      	bne.n	800fc66 <HAL_SPI_Transmit+0x14a>
 800fcc8:	e07c      	b.n	800fdc4 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <HAL_SPI_Transmit+0x1bc>
 800fcd2:	8afb      	ldrh	r3, [r7, #22]
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d170      	bne.n	800fdba <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d912      	bls.n	800fd08 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce6:	881a      	ldrh	r2, [r3, #0]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf2:	1c9a      	adds	r2, r3, #2
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	3b02      	subs	r3, #2
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fd06:	e058      	b.n	800fdba <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	330c      	adds	r3, #12
 800fd12:	7812      	ldrb	r2, [r2, #0]
 800fd14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1a:	1c5a      	adds	r2, r3, #1
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	3b01      	subs	r3, #1
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800fd2e:	e044      	b.n	800fdba <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	f003 0302 	and.w	r3, r3, #2
 800fd3a:	2b02      	cmp	r3, #2
 800fd3c:	d12b      	bne.n	800fd96 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d912      	bls.n	800fd6e <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd4c:	881a      	ldrh	r2, [r3, #0]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd58:	1c9a      	adds	r2, r3, #2
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	3b02      	subs	r3, #2
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fd6c:	e025      	b.n	800fdba <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	330c      	adds	r3, #12
 800fd78:	7812      	ldrb	r2, [r2, #0]
 800fd7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd80:	1c5a      	adds	r2, r3, #1
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fd94:	e011      	b.n	800fdba <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd96:	f7fb fba7 	bl	800b4e8 <HAL_GetTick>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d803      	bhi.n	800fdae <HAL_SPI_Transmit+0x292>
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdac:	d102      	bne.n	800fdb4 <HAL_SPI_Transmit+0x298>
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d102      	bne.n	800fdba <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 800fdb4:	2303      	movs	r3, #3
 800fdb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fdb8:	e033      	b.n	800fe22 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1b5      	bne.n	800fd30 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdcc:	d107      	bne.n	800fdde <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fddc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fdde:	69ba      	ldr	r2, [r7, #24]
 800fde0:	6839      	ldr	r1, [r7, #0]
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f000 fe7c 	bl	8010ae0 <SPI_EndRxTxTransaction>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d002      	beq.n	800fdf4 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2220      	movs	r2, #32
 800fdf2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d10a      	bne.n	800fe12 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	613b      	str	r3, [r7, #16]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	613b      	str	r3, [r7, #16]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	613b      	str	r3, [r7, #16]
 800fe10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	77fb      	strb	r3, [r7, #31]
 800fe1e:	e000      	b.n	800fe22 <HAL_SPI_Transmit+0x306>
  }

error:
 800fe20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2201      	movs	r2, #1
 800fe26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fe32:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3720      	adds	r7, #32
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08c      	sub	sp, #48	; 0x30
 800fe40:	af02      	add	r7, sp, #8
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	603b      	str	r3, [r7, #0]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fe50:	2300      	movs	r3, #0
 800fe52:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fe54:	2300      	movs	r3, #0
 800fe56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fe62:	d112      	bne.n	800fe8a <HAL_SPI_Receive+0x4e>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10e      	bne.n	800fe8a <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2204      	movs	r2, #4
 800fe70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800fe74:	88fa      	ldrh	r2, [r7, #6]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	68b9      	ldr	r1, [r7, #8]
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f000 f9c4 	bl	801020e <HAL_SPI_TransmitReceive>
 800fe86:	4603      	mov	r3, r0
 800fe88:	e1bd      	b.n	8010206 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d101      	bne.n	800fe98 <HAL_SPI_Receive+0x5c>
 800fe94:	2302      	movs	r3, #2
 800fe96:	e1b6      	b.n	8010206 <HAL_SPI_Receive+0x3ca>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fea0:	f7fb fb22 	bl	800b4e8 <HAL_GetTick>
 800fea4:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800feac:	b2db      	uxtb	r3, r3
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d003      	beq.n	800feba <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800feb2:	2302      	movs	r3, #2
 800feb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800feb8:	e19b      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <HAL_SPI_Receive+0x8a>
 800fec0:	88fb      	ldrh	r3, [r7, #6]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d103      	bne.n	800fece <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800fecc:	e191      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2204      	movs	r2, #4
 800fed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	88fa      	ldrh	r2, [r7, #6]
 800fee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	88fa      	ldrh	r2, [r7, #6]
 800feee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2200      	movs	r2, #0
 800fef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2200      	movs	r2, #0
 800fefc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2200      	movs	r2, #0
 800ff02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2200      	movs	r2, #0
 800ff08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff18:	d118      	bne.n	800ff4c <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff38:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	3b01      	subs	r3, #1
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ff54:	d908      	bls.n	800ff68 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ff64:	605a      	str	r2, [r3, #4]
 800ff66:	e007      	b.n	800ff78 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	685a      	ldr	r2, [r3, #4]
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ff76:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff80:	d10f      	bne.n	800ffa2 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffa0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffac:	2b40      	cmp	r3, #64	; 0x40
 800ffae:	d007      	beq.n	800ffc0 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ffbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ffc8:	d869      	bhi.n	801009e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ffca:	e031      	b.n	8010030 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d117      	bne.n	801000a <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f103 020c 	add.w	r2, r3, #12
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe6:	7812      	ldrb	r2, [r2, #0]
 800ffe8:	b2d2      	uxtb	r2, r2
 800ffea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	3b01      	subs	r3, #1
 8010000:	b29a      	uxth	r2, r3
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010008:	e012      	b.n	8010030 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801000a:	f7fb fa6d 	bl	800b4e8 <HAL_GetTick>
 801000e:	4602      	mov	r2, r0
 8010010:	6a3b      	ldr	r3, [r7, #32]
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	d803      	bhi.n	8010022 <HAL_SPI_Receive+0x1e6>
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010020:	d102      	bne.n	8010028 <HAL_SPI_Receive+0x1ec>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d103      	bne.n	8010030 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8010028:	2303      	movs	r3, #3
 801002a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801002e:	e0e0      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010036:	b29b      	uxth	r3, r3
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1c7      	bne.n	800ffcc <HAL_SPI_Receive+0x190>
 801003c:	e035      	b.n	80100aa <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b01      	cmp	r3, #1
 801004a:	d115      	bne.n	8010078 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68da      	ldr	r2, [r3, #12]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010056:	b292      	uxth	r2, r2
 8010058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801005e:	1c9a      	adds	r2, r3, #2
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801006a:	b29b      	uxth	r3, r3
 801006c:	3b01      	subs	r3, #1
 801006e:	b29a      	uxth	r2, r3
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010076:	e012      	b.n	801009e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010078:	f7fb fa36 	bl	800b4e8 <HAL_GetTick>
 801007c:	4602      	mov	r2, r0
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	429a      	cmp	r2, r3
 8010086:	d803      	bhi.n	8010090 <HAL_SPI_Receive+0x254>
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801008e:	d102      	bne.n	8010096 <HAL_SPI_Receive+0x25a>
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d103      	bne.n	801009e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8010096:	2303      	movs	r3, #3
 8010098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801009c:	e0a9      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1c9      	bne.n	801003e <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100b2:	d178      	bne.n	80101a6 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80100c2:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80100c4:	6a3b      	ldr	r3, [r7, #32]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	2201      	movs	r2, #1
 80100cc:	2101      	movs	r1, #1
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f000 fb90 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d003      	beq.n	80100e2 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80100da:	2303      	movs	r3, #3
 80100dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80100e0:	e087      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80100ea:	d907      	bls.n	80100fc <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68da      	ldr	r2, [r3, #12]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100f6:	b292      	uxth	r2, r2
 80100f8:	801a      	strh	r2, [r3, #0]
 80100fa:	e008      	b.n	801010e <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f103 020c 	add.w	r2, r3, #12
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010108:	7812      	ldrb	r2, [r2, #0]
 801010a:	b2d2      	uxtb	r2, r2
 801010c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 801010e:	6a3b      	ldr	r3, [r7, #32]
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	2201      	movs	r2, #1
 8010116:	2101      	movs	r1, #1
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f000 fb6b 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d009      	beq.n	8010138 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010128:	f043 0202 	orr.w	r2, r3, #2
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8010130:	2303      	movs	r3, #3
 8010132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8010136:	e05c      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010140:	d105      	bne.n	801014e <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	e02b      	b.n	80101a6 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	330c      	adds	r3, #12
 8010154:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	b2db      	uxtb	r3, r3
 801015c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801015e:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010168:	d11d      	bne.n	80101a6 <HAL_SPI_Receive+0x36a>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801016e:	2b02      	cmp	r3, #2
 8010170:	d119      	bne.n	80101a6 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8010172:	6a3b      	ldr	r3, [r7, #32]
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	2201      	movs	r2, #1
 801017a:	2101      	movs	r1, #1
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f000 fb39 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d009      	beq.n	801019c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801018c:	f043 0202 	orr.w	r2, r3, #2
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8010194:	2303      	movs	r3, #3
 8010196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801019a:	e02a      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80101a4:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80101a6:	6a3a      	ldr	r2, [r7, #32]
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f000 fc40 	bl	8010a30 <SPI_EndRxTransaction>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d002      	beq.n	80101bc <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2220      	movs	r2, #32
 80101ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	f003 0310 	and.w	r3, r3, #16
 80101c6:	2b10      	cmp	r3, #16
 80101c8:	d10a      	bne.n	80101e0 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101ce:	f043 0202 	orr.w	r2, r3, #2
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80101de:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d003      	beq.n	80101f0 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 80101e8:	2301      	movs	r3, #1
 80101ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80101ee:	e000      	b.n	80101f2 <HAL_SPI_Receive+0x3b6>
  }

error :
 80101f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2201      	movs	r2, #1
 80101f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010206:	4618      	mov	r0, r3
 8010208:	3728      	adds	r7, #40	; 0x28
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b092      	sub	sp, #72	; 0x48
 8010212:	af02      	add	r7, sp, #8
 8010214:	60f8      	str	r0, [r7, #12]
 8010216:	60b9      	str	r1, [r7, #8]
 8010218:	607a      	str	r2, [r7, #4]
 801021a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 801021c:	2300      	movs	r3, #0
 801021e:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010220:	2300      	movs	r3, #0
 8010222:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010224:	2301      	movs	r3, #1
 8010226:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010228:	2300      	movs	r3, #0
 801022a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010234:	2b01      	cmp	r3, #1
 8010236:	d101      	bne.n	801023c <HAL_SPI_TransmitReceive+0x2e>
 8010238:	2302      	movs	r3, #2
 801023a:	e2c8      	b.n	80107ce <HAL_SPI_TransmitReceive+0x5c0>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2201      	movs	r2, #1
 8010240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010244:	f7fb f950 	bl	800b4e8 <HAL_GetTick>
 8010248:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 801025a:	887b      	ldrh	r3, [r7, #2]
 801025c:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 801025e:	887b      	ldrh	r3, [r7, #2]
 8010260:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010276:	2b01      	cmp	r3, #1
 8010278:	d00f      	beq.n	801029a <HAL_SPI_TransmitReceive+0x8c>
 801027a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010280:	d107      	bne.n	8010292 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d103      	bne.n	8010292 <HAL_SPI_TransmitReceive+0x84>
 801028a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801028e:	2b04      	cmp	r3, #4
 8010290:	d003      	beq.n	801029a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8010292:	2302      	movs	r3, #2
 8010294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8010298:	e28f      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d005      	beq.n	80102ac <HAL_SPI_TransmitReceive+0x9e>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d002      	beq.n	80102ac <HAL_SPI_TransmitReceive+0x9e>
 80102a6:	887b      	ldrh	r3, [r7, #2]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d103      	bne.n	80102b4 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80102ac:	2301      	movs	r3, #1
 80102ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80102b2:	e282      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	2b04      	cmp	r3, #4
 80102be:	d003      	beq.n	80102c8 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2205      	movs	r2, #5
 80102c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2200      	movs	r2, #0
 80102cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	887a      	ldrh	r2, [r7, #2]
 80102d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	887a      	ldrh	r2, [r7, #2]
 80102e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	887a      	ldrh	r2, [r7, #2]
 80102ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	887a      	ldrh	r2, [r7, #2]
 80102f4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2200      	movs	r2, #0
 80102fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801030a:	d10f      	bne.n	801032c <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801032a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010334:	d802      	bhi.n	801033c <HAL_SPI_TransmitReceive+0x12e>
 8010336:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010338:	2b01      	cmp	r3, #1
 801033a:	d908      	bls.n	801034e <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801034a:	605a      	str	r2, [r3, #4]
 801034c:	e007      	b.n	801035e <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	685a      	ldr	r2, [r3, #4]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801035c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010368:	2b40      	cmp	r3, #64	; 0x40
 801036a:	d007      	beq.n	801037c <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801037a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010384:	f240 80a4 	bls.w	80104d0 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d003      	beq.n	8010398 <HAL_SPI_TransmitReceive+0x18a>
 8010390:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010392:	2b01      	cmp	r3, #1
 8010394:	f040 808e 	bne.w	80104b4 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801039c:	881a      	ldrh	r2, [r3, #0]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a8:	1c9a      	adds	r2, r3, #2
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	3b01      	subs	r3, #1
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80103bc:	e07a      	b.n	80104b4 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	f003 0302 	and.w	r3, r3, #2
 80103c8:	2b02      	cmp	r3, #2
 80103ca:	d13f      	bne.n	801044c <HAL_SPI_TransmitReceive+0x23e>
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d03a      	beq.n	801044c <HAL_SPI_TransmitReceive+0x23e>
 80103d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d137      	bne.n	801044c <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e0:	881a      	ldrh	r2, [r3, #0]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ec:	1c9a      	adds	r2, r3, #2
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	3b01      	subs	r3, #1
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010400:	2300      	movs	r3, #0
 8010402:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010408:	b29b      	uxth	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d11e      	bne.n	801044c <HAL_SPI_TransmitReceive+0x23e>
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010416:	d119      	bne.n	801044c <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041a:	f003 0304 	and.w	r3, r3, #4
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10c      	bne.n	801043c <HAL_SPI_TransmitReceive+0x22e>
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	f003 0308 	and.w	r3, r3, #8
 8010428:	2b00      	cmp	r3, #0
 801042a:	d007      	beq.n	801043c <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801043a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801044a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	f003 0301 	and.w	r3, r3, #1
 8010456:	2b01      	cmp	r3, #1
 8010458:	d11c      	bne.n	8010494 <HAL_SPI_TransmitReceive+0x286>
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010460:	b29b      	uxth	r3, r3
 8010462:	2b00      	cmp	r3, #0
 8010464:	d016      	beq.n	8010494 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68da      	ldr	r2, [r3, #12]
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010470:	b292      	uxth	r2, r2
 8010472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010478:	1c9a      	adds	r2, r3, #2
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010484:	b29b      	uxth	r3, r3
 8010486:	3b01      	subs	r3, #1
 8010488:	b29a      	uxth	r2, r3
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010490:	2301      	movs	r3, #1
 8010492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010494:	f7fb f828 	bl	800b4e8 <HAL_GetTick>
 8010498:	4602      	mov	r2, r0
 801049a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801049c:	1ad3      	subs	r3, r2, r3
 801049e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d807      	bhi.n	80104b4 <HAL_SPI_TransmitReceive+0x2a6>
 80104a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104aa:	d003      	beq.n	80104b4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 80104ac:	2303      	movs	r3, #3
 80104ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80104b2:	e182      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f47f af7f 	bne.w	80103be <HAL_SPI_TransmitReceive+0x1b0>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f47f af78 	bne.w	80103be <HAL_SPI_TransmitReceive+0x1b0>
 80104ce:	e103      	b.n	80106d8 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d003      	beq.n	80104e0 <HAL_SPI_TransmitReceive+0x2d2>
 80104d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80104da:	2b01      	cmp	r3, #1
 80104dc:	f040 80ef 	bne.w	80106be <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d912      	bls.n	8010510 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ee:	881a      	ldrh	r2, [r3, #0]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fa:	1c9a      	adds	r2, r3, #2
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010504:	b29b      	uxth	r3, r3
 8010506:	3b02      	subs	r3, #2
 8010508:	b29a      	uxth	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801050e:	e0d6      	b.n	80106be <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	330c      	adds	r3, #12
 801051a:	7812      	ldrb	r2, [r2, #0]
 801051c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010522:	1c5a      	adds	r2, r3, #1
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801052c:	b29b      	uxth	r3, r3
 801052e:	3b01      	subs	r3, #1
 8010530:	b29a      	uxth	r2, r3
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010536:	e0c2      	b.n	80106be <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	f003 0302 	and.w	r3, r3, #2
 8010542:	2b02      	cmp	r3, #2
 8010544:	d158      	bne.n	80105f8 <HAL_SPI_TransmitReceive+0x3ea>
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801054a:	b29b      	uxth	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d053      	beq.n	80105f8 <HAL_SPI_TransmitReceive+0x3ea>
 8010550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010552:	2b01      	cmp	r3, #1
 8010554:	d150      	bne.n	80105f8 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801055a:	b29b      	uxth	r3, r3
 801055c:	2b01      	cmp	r3, #1
 801055e:	d912      	bls.n	8010586 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010564:	881a      	ldrh	r2, [r3, #0]
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010570:	1c9a      	adds	r2, r3, #2
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801057a:	b29b      	uxth	r3, r3
 801057c:	3b02      	subs	r3, #2
 801057e:	b29a      	uxth	r2, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010584:	e012      	b.n	80105ac <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	330c      	adds	r3, #12
 8010590:	7812      	ldrb	r2, [r2, #0]
 8010592:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010598:	1c5a      	adds	r2, r3, #1
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	3b01      	subs	r3, #1
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80105ac:	2300      	movs	r3, #0
 80105ae:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d11e      	bne.n	80105f8 <HAL_SPI_TransmitReceive+0x3ea>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105c2:	d119      	bne.n	80105f8 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	f003 0304 	and.w	r3, r3, #4
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10c      	bne.n	80105e8 <HAL_SPI_TransmitReceive+0x3da>
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	f003 0308 	and.w	r3, r3, #8
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d007      	beq.n	80105e8 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80105e6:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80105f6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	f003 0301 	and.w	r3, r3, #1
 8010602:	2b01      	cmp	r3, #1
 8010604:	d148      	bne.n	8010698 <HAL_SPI_TransmitReceive+0x48a>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801060c:	b29b      	uxth	r3, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d042      	beq.n	8010698 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010618:	b29b      	uxth	r3, r3
 801061a:	2b01      	cmp	r3, #1
 801061c:	d923      	bls.n	8010666 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	68da      	ldr	r2, [r3, #12]
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010628:	b292      	uxth	r2, r2
 801062a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010630:	1c9a      	adds	r2, r3, #2
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801063c:	b29b      	uxth	r3, r3
 801063e:	3b02      	subs	r3, #2
 8010640:	b29a      	uxth	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801064e:	b29b      	uxth	r3, r3
 8010650:	2b01      	cmp	r3, #1
 8010652:	d81f      	bhi.n	8010694 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	685a      	ldr	r2, [r3, #4]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010662:	605a      	str	r2, [r3, #4]
 8010664:	e016      	b.n	8010694 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f103 020c 	add.w	r2, r3, #12
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010672:	7812      	ldrb	r2, [r2, #0]
 8010674:	b2d2      	uxtb	r2, r2
 8010676:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010688:	b29b      	uxth	r3, r3
 801068a:	3b01      	subs	r3, #1
 801068c:	b29a      	uxth	r2, r3
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010694:	2301      	movs	r3, #1
 8010696:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010698:	f7fa ff26 	bl	800b4e8 <HAL_GetTick>
 801069c:	4602      	mov	r2, r0
 801069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d803      	bhi.n	80106b0 <HAL_SPI_TransmitReceive+0x4a2>
 80106a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106ae:	d102      	bne.n	80106b6 <HAL_SPI_TransmitReceive+0x4a8>
 80106b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d103      	bne.n	80106be <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 80106b6:	2303      	movs	r3, #3
 80106b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80106bc:	e07d      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f47f af37 	bne.w	8010538 <HAL_SPI_TransmitReceive+0x32a>
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f47f af30 	bne.w	8010538 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106e0:	d146      	bne.n	8010770 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80106e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106e8:	2201      	movs	r2, #1
 80106ea:	2101      	movs	r1, #1
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 f881 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d009      	beq.n	801070c <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106fc:	f043 0202 	orr.w	r2, r3, #2
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8010704:	2303      	movs	r3, #3
 8010706:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 801070a:	e056      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010714:	d105      	bne.n	8010722 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	e026      	b.n	8010770 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	330c      	adds	r3, #12
 8010728:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	b2db      	uxtb	r3, r3
 8010730:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010732:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010738:	2b02      	cmp	r3, #2
 801073a:	d119      	bne.n	8010770 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 801073c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010742:	2201      	movs	r2, #1
 8010744:	2101      	movs	r1, #1
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f000 f854 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d009      	beq.n	8010766 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010756:	f043 0202 	orr.w	r2, r3, #2
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8010764:	e029      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	b2db      	uxtb	r3, r3
 801076c:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 801076e:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	689b      	ldr	r3, [r3, #8]
 8010776:	f003 0310 	and.w	r3, r3, #16
 801077a:	2b10      	cmp	r3, #16
 801077c:	d10d      	bne.n	801079a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010782:	f043 0202 	orr.w	r2, r3, #2
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8010792:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8010794:	2301      	movs	r3, #1
 8010796:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801079a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801079c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f000 f99e 	bl	8010ae0 <SPI_EndRxTxTransaction>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d006      	beq.n	80107b8 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 80107aa:	2301      	movs	r3, #1
 80107ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2220      	movs	r2, #32
 80107b4:	661a      	str	r2, [r3, #96]	; 0x60
 80107b6:	e000      	b.n	80107ba <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 80107b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2201      	movs	r2, #1
 80107be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80107ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3740      	adds	r7, #64	; 0x40
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80107d6:	b480      	push	{r7}
 80107d8:	b083      	sub	sp, #12
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80107e4:	b2db      	uxtb	r3, r3
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
	...

080107f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b088      	sub	sp, #32
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	603b      	str	r3, [r7, #0]
 8010800:	4613      	mov	r3, r2
 8010802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010804:	f7fa fe70 	bl	800b4e8 <HAL_GetTick>
 8010808:	4602      	mov	r2, r0
 801080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080c:	1a9b      	subs	r3, r3, r2
 801080e:	683a      	ldr	r2, [r7, #0]
 8010810:	4413      	add	r3, r2
 8010812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010814:	f7fa fe68 	bl	800b4e8 <HAL_GetTick>
 8010818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801081a:	4b39      	ldr	r3, [pc, #228]	; (8010900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	015b      	lsls	r3, r3, #5
 8010820:	0d1b      	lsrs	r3, r3, #20
 8010822:	69fa      	ldr	r2, [r7, #28]
 8010824:	fb02 f303 	mul.w	r3, r2, r3
 8010828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801082a:	e054      	b.n	80108d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010832:	d050      	beq.n	80108d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010834:	f7fa fe58 	bl	800b4e8 <HAL_GetTick>
 8010838:	4602      	mov	r2, r0
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	69fa      	ldr	r2, [r7, #28]
 8010840:	429a      	cmp	r2, r3
 8010842:	d902      	bls.n	801084a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d13d      	bne.n	80108c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010862:	d111      	bne.n	8010888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801086c:	d004      	beq.n	8010878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010876:	d107      	bne.n	8010888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801088c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010890:	d10f      	bne.n	80108b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80108b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2201      	movs	r2, #1
 80108b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80108c2:	2303      	movs	r3, #3
 80108c4:	e017      	b.n	80108f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d101      	bne.n	80108d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80108cc:	2300      	movs	r3, #0
 80108ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	3b01      	subs	r3, #1
 80108d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	689a      	ldr	r2, [r3, #8]
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	4013      	ands	r3, r2
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	bf0c      	ite	eq
 80108e6:	2301      	moveq	r3, #1
 80108e8:	2300      	movne	r3, #0
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	461a      	mov	r2, r3
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d19b      	bne.n	801082c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3720      	adds	r7, #32
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	20000468 	.word	0x20000468

08010904 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08a      	sub	sp, #40	; 0x28
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010912:	2300      	movs	r3, #0
 8010914:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010916:	f7fa fde7 	bl	800b4e8 <HAL_GetTick>
 801091a:	4602      	mov	r2, r0
 801091c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091e:	1a9b      	subs	r3, r3, r2
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	4413      	add	r3, r2
 8010924:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8010926:	f7fa fddf 	bl	800b4e8 <HAL_GetTick>
 801092a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	330c      	adds	r3, #12
 8010932:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010934:	4b3d      	ldr	r3, [pc, #244]	; (8010a2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	4613      	mov	r3, r2
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	00da      	lsls	r2, r3, #3
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	0d1b      	lsrs	r3, r3, #20
 8010944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010946:	fb02 f303 	mul.w	r3, r2, r3
 801094a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801094c:	e060      	b.n	8010a10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010954:	d107      	bne.n	8010966 <SPI_WaitFifoStateUntilTimeout+0x62>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d104      	bne.n	8010966 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	b2db      	uxtb	r3, r3
 8010962:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010964:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801096c:	d050      	beq.n	8010a10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801096e:	f7fa fdbb 	bl	800b4e8 <HAL_GetTick>
 8010972:	4602      	mov	r2, r0
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801097a:	429a      	cmp	r2, r3
 801097c:	d902      	bls.n	8010984 <SPI_WaitFifoStateUntilTimeout+0x80>
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	2b00      	cmp	r3, #0
 8010982:	d13d      	bne.n	8010a00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685a      	ldr	r2, [r3, #4]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010992:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801099c:	d111      	bne.n	80109c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80109a6:	d004      	beq.n	80109b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109b0:	d107      	bne.n	80109c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109ca:	d10f      	bne.n	80109ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80109da:	601a      	str	r2, [r3, #0]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80109ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80109fc:	2303      	movs	r3, #3
 80109fe:	e010      	b.n	8010a22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010a06:	2300      	movs	r3, #0
 8010a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	3b01      	subs	r3, #1
 8010a0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	689a      	ldr	r2, [r3, #8]
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	4013      	ands	r3, r2
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d196      	bne.n	801094e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3728      	adds	r7, #40	; 0x28
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20000468 	.word	0x20000468

08010a30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a44:	d111      	bne.n	8010a6a <SPI_EndRxTransaction+0x3a>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a4e:	d004      	beq.n	8010a5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a58:	d107      	bne.n	8010a6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	9300      	str	r3, [sp, #0]
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	2200      	movs	r2, #0
 8010a72:	2180      	movs	r1, #128	; 0x80
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f7ff febd 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d007      	beq.n	8010a90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a84:	f043 0220 	orr.w	r2, r3, #32
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010a8c:	2303      	movs	r3, #3
 8010a8e:	e023      	b.n	8010ad8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a98:	d11d      	bne.n	8010ad6 <SPI_EndRxTransaction+0xa6>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010aa2:	d004      	beq.n	8010aae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	689b      	ldr	r3, [r3, #8]
 8010aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010aac:	d113      	bne.n	8010ad6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f7ff ff22 	bl	8010904 <SPI_WaitFifoStateUntilTimeout>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d007      	beq.n	8010ad6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aca:	f043 0220 	orr.w	r2, r3, #32
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8010ad2:	2303      	movs	r3, #3
 8010ad4:	e000      	b.n	8010ad8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8010ad6:	2300      	movs	r3, #0
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3710      	adds	r7, #16
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b086      	sub	sp, #24
 8010ae4:	af02      	add	r7, sp, #8
 8010ae6:	60f8      	str	r0, [r7, #12]
 8010ae8:	60b9      	str	r1, [r7, #8]
 8010aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	2200      	movs	r2, #0
 8010af4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	f7ff ff03 	bl	8010904 <SPI_WaitFifoStateUntilTimeout>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d007      	beq.n	8010b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b08:	f043 0220 	orr.w	r2, r3, #32
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b10:	2303      	movs	r3, #3
 8010b12:	e027      	b.n	8010b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	9300      	str	r3, [sp, #0]
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2180      	movs	r1, #128	; 0x80
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f7ff fe68 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d007      	beq.n	8010b3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b2e:	f043 0220 	orr.w	r2, r3, #32
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b36:	2303      	movs	r3, #3
 8010b38:	e014      	b.n	8010b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f7ff fedc 	bl	8010904 <SPI_WaitFifoStateUntilTimeout>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d007      	beq.n	8010b62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b56:	f043 0220 	orr.w	r2, r3, #32
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	e000      	b.n	8010b64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d101      	bne.n	8010b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e049      	b.n	8010c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 f841 	bl	8010c1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2202      	movs	r2, #2
 8010b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f000 f9f8 	bl	8010fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2201      	movs	r2, #1
 8010bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2201      	movs	r2, #1
 8010bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2201      	movs	r2, #1
 8010c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010c1a:	b480      	push	{r7}
 8010c1c:	b083      	sub	sp, #12
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010c22:	bf00      	nop
 8010c24:	370c      	adds	r7, #12
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr
	...

08010c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b085      	sub	sp, #20
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d001      	beq.n	8010c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010c44:	2301      	movs	r3, #1
 8010c46:	e04f      	b.n	8010ce8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2202      	movs	r2, #2
 8010c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f042 0201 	orr.w	r2, r2, #1
 8010c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a23      	ldr	r2, [pc, #140]	; (8010cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d01d      	beq.n	8010ca6 <HAL_TIM_Base_Start_IT+0x76>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c72:	d018      	beq.n	8010ca6 <HAL_TIM_Base_Start_IT+0x76>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4a1f      	ldr	r2, [pc, #124]	; (8010cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d013      	beq.n	8010ca6 <HAL_TIM_Base_Start_IT+0x76>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4a1e      	ldr	r2, [pc, #120]	; (8010cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d00e      	beq.n	8010ca6 <HAL_TIM_Base_Start_IT+0x76>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a1c      	ldr	r2, [pc, #112]	; (8010d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d009      	beq.n	8010ca6 <HAL_TIM_Base_Start_IT+0x76>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a1b      	ldr	r2, [pc, #108]	; (8010d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d004      	beq.n	8010ca6 <HAL_TIM_Base_Start_IT+0x76>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a19      	ldr	r2, [pc, #100]	; (8010d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d115      	bne.n	8010cd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	689a      	ldr	r2, [r3, #8]
 8010cac:	4b17      	ldr	r3, [pc, #92]	; (8010d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8010cae:	4013      	ands	r3, r2
 8010cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2b06      	cmp	r3, #6
 8010cb6:	d015      	beq.n	8010ce4 <HAL_TIM_Base_Start_IT+0xb4>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cbe:	d011      	beq.n	8010ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f042 0201 	orr.w	r2, r2, #1
 8010cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010cd0:	e008      	b.n	8010ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f042 0201 	orr.w	r2, r2, #1
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e000      	b.n	8010ce6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3714      	adds	r7, #20
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr
 8010cf4:	40012c00 	.word	0x40012c00
 8010cf8:	40000400 	.word	0x40000400
 8010cfc:	40000800 	.word	0x40000800
 8010d00:	40000c00 	.word	0x40000c00
 8010d04:	40013400 	.word	0x40013400
 8010d08:	40014000 	.word	0x40014000
 8010d0c:	00010007 	.word	0x00010007

08010d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	691b      	ldr	r3, [r3, #16]
 8010d1e:	f003 0302 	and.w	r3, r3, #2
 8010d22:	2b02      	cmp	r3, #2
 8010d24:	d122      	bne.n	8010d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	f003 0302 	and.w	r3, r3, #2
 8010d30:	2b02      	cmp	r3, #2
 8010d32:	d11b      	bne.n	8010d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f06f 0202 	mvn.w	r2, #2
 8010d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2201      	movs	r2, #1
 8010d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	699b      	ldr	r3, [r3, #24]
 8010d4a:	f003 0303 	and.w	r3, r3, #3
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d003      	beq.n	8010d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 f905 	bl	8010f62 <HAL_TIM_IC_CaptureCallback>
 8010d58:	e005      	b.n	8010d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 f8f7 	bl	8010f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 f908 	bl	8010f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	691b      	ldr	r3, [r3, #16]
 8010d72:	f003 0304 	and.w	r3, r3, #4
 8010d76:	2b04      	cmp	r3, #4
 8010d78:	d122      	bne.n	8010dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	f003 0304 	and.w	r3, r3, #4
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	d11b      	bne.n	8010dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f06f 0204 	mvn.w	r2, #4
 8010d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2202      	movs	r2, #2
 8010d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	699b      	ldr	r3, [r3, #24]
 8010d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d003      	beq.n	8010dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 f8db 	bl	8010f62 <HAL_TIM_IC_CaptureCallback>
 8010dac:	e005      	b.n	8010dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f000 f8cd 	bl	8010f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 f8de 	bl	8010f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	691b      	ldr	r3, [r3, #16]
 8010dc6:	f003 0308 	and.w	r3, r3, #8
 8010dca:	2b08      	cmp	r3, #8
 8010dcc:	d122      	bne.n	8010e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	f003 0308 	and.w	r3, r3, #8
 8010dd8:	2b08      	cmp	r3, #8
 8010dda:	d11b      	bne.n	8010e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f06f 0208 	mvn.w	r2, #8
 8010de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2204      	movs	r2, #4
 8010dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	69db      	ldr	r3, [r3, #28]
 8010df2:	f003 0303 	and.w	r3, r3, #3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d003      	beq.n	8010e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 f8b1 	bl	8010f62 <HAL_TIM_IC_CaptureCallback>
 8010e00:	e005      	b.n	8010e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f000 f8a3 	bl	8010f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f8b4 	bl	8010f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2200      	movs	r2, #0
 8010e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	691b      	ldr	r3, [r3, #16]
 8010e1a:	f003 0310 	and.w	r3, r3, #16
 8010e1e:	2b10      	cmp	r3, #16
 8010e20:	d122      	bne.n	8010e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	f003 0310 	and.w	r3, r3, #16
 8010e2c:	2b10      	cmp	r3, #16
 8010e2e:	d11b      	bne.n	8010e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f06f 0210 	mvn.w	r2, #16
 8010e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2208      	movs	r2, #8
 8010e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	69db      	ldr	r3, [r3, #28]
 8010e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f887 	bl	8010f62 <HAL_TIM_IC_CaptureCallback>
 8010e54:	e005      	b.n	8010e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 f879 	bl	8010f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f88a 	bl	8010f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	f003 0301 	and.w	r3, r3, #1
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d10e      	bne.n	8010e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	f003 0301 	and.w	r3, r3, #1
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d107      	bne.n	8010e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f06f 0201 	mvn.w	r2, #1
 8010e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f003 f86a 	bl	8013f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	691b      	ldr	r3, [r3, #16]
 8010e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e9e:	2b80      	cmp	r3, #128	; 0x80
 8010ea0:	d10e      	bne.n	8010ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eac:	2b80      	cmp	r3, #128	; 0x80
 8010eae:	d107      	bne.n	8010ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 f914 	bl	80110e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ece:	d10e      	bne.n	8010eee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eda:	2b80      	cmp	r3, #128	; 0x80
 8010edc:	d107      	bne.n	8010eee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f907 	bl	80110fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	691b      	ldr	r3, [r3, #16]
 8010ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef8:	2b40      	cmp	r3, #64	; 0x40
 8010efa:	d10e      	bne.n	8010f1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f06:	2b40      	cmp	r3, #64	; 0x40
 8010f08:	d107      	bne.n	8010f1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 f838 	bl	8010f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	691b      	ldr	r3, [r3, #16]
 8010f20:	f003 0320 	and.w	r3, r3, #32
 8010f24:	2b20      	cmp	r3, #32
 8010f26:	d10e      	bne.n	8010f46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	f003 0320 	and.w	r3, r3, #32
 8010f32:	2b20      	cmp	r3, #32
 8010f34:	d107      	bne.n	8010f46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f06f 0220 	mvn.w	r2, #32
 8010f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 f8c7 	bl	80110d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010f46:	bf00      	nop
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f4e:	b480      	push	{r7}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010f56:	bf00      	nop
 8010f58:	370c      	adds	r7, #12
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr

08010f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010f62:	b480      	push	{r7}
 8010f64:	b083      	sub	sp, #12
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010f6a:	bf00      	nop
 8010f6c:	370c      	adds	r7, #12
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f76:	b480      	push	{r7}
 8010f78:	b083      	sub	sp, #12
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f7e:	bf00      	nop
 8010f80:	370c      	adds	r7, #12
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr

08010f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f8a:	b480      	push	{r7}
 8010f8c:	b083      	sub	sp, #12
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f92:	bf00      	nop
 8010f94:	370c      	adds	r7, #12
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr
	...

08010fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	4a40      	ldr	r2, [pc, #256]	; (80110b4 <TIM_Base_SetConfig+0x114>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d013      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fbe:	d00f      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4a3d      	ldr	r2, [pc, #244]	; (80110b8 <TIM_Base_SetConfig+0x118>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d00b      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a3c      	ldr	r2, [pc, #240]	; (80110bc <TIM_Base_SetConfig+0x11c>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d007      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a3b      	ldr	r2, [pc, #236]	; (80110c0 <TIM_Base_SetConfig+0x120>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d003      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a3a      	ldr	r2, [pc, #232]	; (80110c4 <TIM_Base_SetConfig+0x124>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d108      	bne.n	8010ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	68fa      	ldr	r2, [r7, #12]
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4a2f      	ldr	r2, [pc, #188]	; (80110b4 <TIM_Base_SetConfig+0x114>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d01f      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011000:	d01b      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a2c      	ldr	r2, [pc, #176]	; (80110b8 <TIM_Base_SetConfig+0x118>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d017      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a2b      	ldr	r2, [pc, #172]	; (80110bc <TIM_Base_SetConfig+0x11c>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d013      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a2a      	ldr	r2, [pc, #168]	; (80110c0 <TIM_Base_SetConfig+0x120>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d00f      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a29      	ldr	r2, [pc, #164]	; (80110c4 <TIM_Base_SetConfig+0x124>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d00b      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a28      	ldr	r2, [pc, #160]	; (80110c8 <TIM_Base_SetConfig+0x128>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d007      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a27      	ldr	r2, [pc, #156]	; (80110cc <TIM_Base_SetConfig+0x12c>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d003      	beq.n	801103a <TIM_Base_SetConfig+0x9a>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a26      	ldr	r2, [pc, #152]	; (80110d0 <TIM_Base_SetConfig+0x130>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d108      	bne.n	801104c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	68fa      	ldr	r2, [r7, #12]
 8011048:	4313      	orrs	r3, r2
 801104a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	695b      	ldr	r3, [r3, #20]
 8011056:	4313      	orrs	r3, r2
 8011058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	689a      	ldr	r2, [r3, #8]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4a10      	ldr	r2, [pc, #64]	; (80110b4 <TIM_Base_SetConfig+0x114>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d00f      	beq.n	8011098 <TIM_Base_SetConfig+0xf8>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	4a12      	ldr	r2, [pc, #72]	; (80110c4 <TIM_Base_SetConfig+0x124>)
 801107c:	4293      	cmp	r3, r2
 801107e:	d00b      	beq.n	8011098 <TIM_Base_SetConfig+0xf8>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	4a11      	ldr	r2, [pc, #68]	; (80110c8 <TIM_Base_SetConfig+0x128>)
 8011084:	4293      	cmp	r3, r2
 8011086:	d007      	beq.n	8011098 <TIM_Base_SetConfig+0xf8>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	4a10      	ldr	r2, [pc, #64]	; (80110cc <TIM_Base_SetConfig+0x12c>)
 801108c:	4293      	cmp	r3, r2
 801108e:	d003      	beq.n	8011098 <TIM_Base_SetConfig+0xf8>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	4a0f      	ldr	r2, [pc, #60]	; (80110d0 <TIM_Base_SetConfig+0x130>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d103      	bne.n	80110a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	691a      	ldr	r2, [r3, #16]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	615a      	str	r2, [r3, #20]
}
 80110a6:	bf00      	nop
 80110a8:	3714      	adds	r7, #20
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop
 80110b4:	40012c00 	.word	0x40012c00
 80110b8:	40000400 	.word	0x40000400
 80110bc:	40000800 	.word	0x40000800
 80110c0:	40000c00 	.word	0x40000c00
 80110c4:	40013400 	.word	0x40013400
 80110c8:	40014000 	.word	0x40014000
 80110cc:	40014400 	.word	0x40014400
 80110d0:	40014800 	.word	0x40014800

080110d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80110dc:	bf00      	nop
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b083      	sub	sp, #12
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80110f0:	bf00      	nop
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011110:	b084      	sub	sp, #16
 8011112:	b580      	push	{r7, lr}
 8011114:	b084      	sub	sp, #16
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
 801111a:	f107 001c 	add.w	r0, r7, #28
 801111e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f001 fa40 	bl	80125b4 <USB_CoreReset>
 8011134:	4603      	mov	r3, r0
 8011136:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8011138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	639a      	str	r2, [r3, #56]	; 0x38
 801114a:	e005      	b.n	8011158 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8011158:	7bfb      	ldrb	r3, [r7, #15]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011164:	b004      	add	sp, #16
 8011166:	4770      	bx	lr

08011168 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011168:	b480      	push	{r7}
 801116a:	b087      	sub	sp, #28
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	4613      	mov	r3, r2
 8011174:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011176:	79fb      	ldrb	r3, [r7, #7]
 8011178:	2b02      	cmp	r3, #2
 801117a:	d165      	bne.n	8011248 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	4a3e      	ldr	r2, [pc, #248]	; (8011278 <USB_SetTurnaroundTime+0x110>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d906      	bls.n	8011192 <USB_SetTurnaroundTime+0x2a>
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	4a3d      	ldr	r2, [pc, #244]	; (801127c <USB_SetTurnaroundTime+0x114>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d202      	bcs.n	8011192 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801118c:	230f      	movs	r3, #15
 801118e:	617b      	str	r3, [r7, #20]
 8011190:	e05c      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	4a39      	ldr	r2, [pc, #228]	; (801127c <USB_SetTurnaroundTime+0x114>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d306      	bcc.n	80111a8 <USB_SetTurnaroundTime+0x40>
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	4a38      	ldr	r2, [pc, #224]	; (8011280 <USB_SetTurnaroundTime+0x118>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d202      	bcs.n	80111a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80111a2:	230e      	movs	r3, #14
 80111a4:	617b      	str	r3, [r7, #20]
 80111a6:	e051      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	4a35      	ldr	r2, [pc, #212]	; (8011280 <USB_SetTurnaroundTime+0x118>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d306      	bcc.n	80111be <USB_SetTurnaroundTime+0x56>
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	4a34      	ldr	r2, [pc, #208]	; (8011284 <USB_SetTurnaroundTime+0x11c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d202      	bcs.n	80111be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80111b8:	230d      	movs	r3, #13
 80111ba:	617b      	str	r3, [r7, #20]
 80111bc:	e046      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	4a30      	ldr	r2, [pc, #192]	; (8011284 <USB_SetTurnaroundTime+0x11c>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d306      	bcc.n	80111d4 <USB_SetTurnaroundTime+0x6c>
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	4a2f      	ldr	r2, [pc, #188]	; (8011288 <USB_SetTurnaroundTime+0x120>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d802      	bhi.n	80111d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80111ce:	230c      	movs	r3, #12
 80111d0:	617b      	str	r3, [r7, #20]
 80111d2:	e03b      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	4a2c      	ldr	r2, [pc, #176]	; (8011288 <USB_SetTurnaroundTime+0x120>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d906      	bls.n	80111ea <USB_SetTurnaroundTime+0x82>
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	4a2b      	ldr	r2, [pc, #172]	; (801128c <USB_SetTurnaroundTime+0x124>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d802      	bhi.n	80111ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80111e4:	230b      	movs	r3, #11
 80111e6:	617b      	str	r3, [r7, #20]
 80111e8:	e030      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	4a27      	ldr	r2, [pc, #156]	; (801128c <USB_SetTurnaroundTime+0x124>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d906      	bls.n	8011200 <USB_SetTurnaroundTime+0x98>
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	4a26      	ldr	r2, [pc, #152]	; (8011290 <USB_SetTurnaroundTime+0x128>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d802      	bhi.n	8011200 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80111fa:	230a      	movs	r3, #10
 80111fc:	617b      	str	r3, [r7, #20]
 80111fe:	e025      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	4a23      	ldr	r2, [pc, #140]	; (8011290 <USB_SetTurnaroundTime+0x128>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d906      	bls.n	8011216 <USB_SetTurnaroundTime+0xae>
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	4a22      	ldr	r2, [pc, #136]	; (8011294 <USB_SetTurnaroundTime+0x12c>)
 801120c:	4293      	cmp	r3, r2
 801120e:	d202      	bcs.n	8011216 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011210:	2309      	movs	r3, #9
 8011212:	617b      	str	r3, [r7, #20]
 8011214:	e01a      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	4a1e      	ldr	r2, [pc, #120]	; (8011294 <USB_SetTurnaroundTime+0x12c>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d306      	bcc.n	801122c <USB_SetTurnaroundTime+0xc4>
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	4a1d      	ldr	r2, [pc, #116]	; (8011298 <USB_SetTurnaroundTime+0x130>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d802      	bhi.n	801122c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011226:	2308      	movs	r3, #8
 8011228:	617b      	str	r3, [r7, #20]
 801122a:	e00f      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	4a1a      	ldr	r2, [pc, #104]	; (8011298 <USB_SetTurnaroundTime+0x130>)
 8011230:	4293      	cmp	r3, r2
 8011232:	d906      	bls.n	8011242 <USB_SetTurnaroundTime+0xda>
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	4a19      	ldr	r2, [pc, #100]	; (801129c <USB_SetTurnaroundTime+0x134>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d202      	bcs.n	8011242 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801123c:	2307      	movs	r3, #7
 801123e:	617b      	str	r3, [r7, #20]
 8011240:	e004      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011242:	2306      	movs	r3, #6
 8011244:	617b      	str	r3, [r7, #20]
 8011246:	e001      	b.n	801124c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011248:	2309      	movs	r3, #9
 801124a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	68da      	ldr	r2, [r3, #12]
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	029b      	lsls	r3, r3, #10
 8011260:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011264:	431a      	orrs	r2, r3
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801126a:	2300      	movs	r3, #0
}
 801126c:	4618      	mov	r0, r3
 801126e:	371c      	adds	r7, #28
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	00d8acbf 	.word	0x00d8acbf
 801127c:	00e4e1c0 	.word	0x00e4e1c0
 8011280:	00f42400 	.word	0x00f42400
 8011284:	01067380 	.word	0x01067380
 8011288:	011a499f 	.word	0x011a499f
 801128c:	01312cff 	.word	0x01312cff
 8011290:	014ca43f 	.word	0x014ca43f
 8011294:	016e3600 	.word	0x016e3600
 8011298:	01a6ab1f 	.word	0x01a6ab1f
 801129c:	01e84800 	.word	0x01e84800

080112a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	f043 0201 	orr.w	r2, r3, #1
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b083      	sub	sp, #12
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	f023 0201 	bic.w	r2, r3, #1
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	460b      	mov	r3, r1
 80112ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80112f0:	2300      	movs	r3, #0
 80112f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011300:	78fb      	ldrb	r3, [r7, #3]
 8011302:	2b01      	cmp	r3, #1
 8011304:	d115      	bne.n	8011332 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011312:	2001      	movs	r0, #1
 8011314:	f7fa f8f4 	bl	800b500 <HAL_Delay>
      ms++;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	3301      	adds	r3, #1
 801131c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f001 f8cf 	bl	80124c2 <USB_GetMode>
 8011324:	4603      	mov	r3, r0
 8011326:	2b01      	cmp	r3, #1
 8011328:	d01e      	beq.n	8011368 <USB_SetCurrentMode+0x84>
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2b31      	cmp	r3, #49	; 0x31
 801132e:	d9f0      	bls.n	8011312 <USB_SetCurrentMode+0x2e>
 8011330:	e01a      	b.n	8011368 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011332:	78fb      	ldrb	r3, [r7, #3]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d115      	bne.n	8011364 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011344:	2001      	movs	r0, #1
 8011346:	f7fa f8db 	bl	800b500 <HAL_Delay>
      ms++;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	3301      	adds	r3, #1
 801134e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f001 f8b6 	bl	80124c2 <USB_GetMode>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d005      	beq.n	8011368 <USB_SetCurrentMode+0x84>
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2b31      	cmp	r3, #49	; 0x31
 8011360:	d9f0      	bls.n	8011344 <USB_SetCurrentMode+0x60>
 8011362:	e001      	b.n	8011368 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011364:	2301      	movs	r3, #1
 8011366:	e005      	b.n	8011374 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2b32      	cmp	r3, #50	; 0x32
 801136c:	d101      	bne.n	8011372 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	e000      	b.n	8011374 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801137c:	b084      	sub	sp, #16
 801137e:	b580      	push	{r7, lr}
 8011380:	b086      	sub	sp, #24
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
 8011386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801138a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801138e:	2300      	movs	r3, #0
 8011390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011396:	2300      	movs	r3, #0
 8011398:	613b      	str	r3, [r7, #16]
 801139a:	e009      	b.n	80113b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	3340      	adds	r3, #64	; 0x40
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	4413      	add	r3, r2
 80113a6:	2200      	movs	r2, #0
 80113a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	3301      	adds	r3, #1
 80113ae:	613b      	str	r3, [r7, #16]
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	2b0e      	cmp	r3, #14
 80113b4:	d9f2      	bls.n	801139c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80113b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d11c      	bne.n	80113f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113ca:	f043 0302 	orr.w	r3, r3, #2
 80113ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	e005      	b.n	8011402 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011408:	461a      	mov	r2, r3
 801140a:	2300      	movs	r3, #0
 801140c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011414:	4619      	mov	r1, r3
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801141c:	461a      	mov	r2, r3
 801141e:	680b      	ldr	r3, [r1, #0]
 8011420:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011422:	2103      	movs	r1, #3
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 f955 	bl	80116d4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801142a:	2110      	movs	r1, #16
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 f8f1 	bl	8011614 <USB_FlushTxFifo>
 8011432:	4603      	mov	r3, r0
 8011434:	2b00      	cmp	r3, #0
 8011436:	d001      	beq.n	801143c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8011438:	2301      	movs	r3, #1
 801143a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f000 f91b 	bl	8011678 <USB_FlushRxFifo>
 8011442:	4603      	mov	r3, r0
 8011444:	2b00      	cmp	r3, #0
 8011446:	d001      	beq.n	801144c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8011448:	2301      	movs	r3, #1
 801144a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011452:	461a      	mov	r2, r3
 8011454:	2300      	movs	r3, #0
 8011456:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801145e:	461a      	mov	r2, r3
 8011460:	2300      	movs	r3, #0
 8011462:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801146a:	461a      	mov	r2, r3
 801146c:	2300      	movs	r3, #0
 801146e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011470:	2300      	movs	r3, #0
 8011472:	613b      	str	r3, [r7, #16]
 8011474:	e043      	b.n	80114fe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	015a      	lsls	r2, r3, #5
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	4413      	add	r3, r2
 801147e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801148c:	d118      	bne.n	80114c0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d10a      	bne.n	80114aa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	015a      	lsls	r2, r3, #5
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	4413      	add	r3, r2
 801149c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a0:	461a      	mov	r2, r3
 80114a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	e013      	b.n	80114d2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	015a      	lsls	r2, r3, #5
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	4413      	add	r3, r2
 80114b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114b6:	461a      	mov	r2, r3
 80114b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80114bc:	6013      	str	r3, [r2, #0]
 80114be:	e008      	b.n	80114d2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	015a      	lsls	r2, r3, #5
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	4413      	add	r3, r2
 80114c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114cc:	461a      	mov	r2, r3
 80114ce:	2300      	movs	r3, #0
 80114d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	015a      	lsls	r2, r3, #5
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	4413      	add	r3, r2
 80114da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114de:	461a      	mov	r2, r3
 80114e0:	2300      	movs	r3, #0
 80114e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	015a      	lsls	r2, r3, #5
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	4413      	add	r3, r2
 80114ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114f0:	461a      	mov	r2, r3
 80114f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80114f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	3301      	adds	r3, #1
 80114fc:	613b      	str	r3, [r7, #16]
 80114fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011500:	693a      	ldr	r2, [r7, #16]
 8011502:	429a      	cmp	r2, r3
 8011504:	d3b7      	bcc.n	8011476 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011506:	2300      	movs	r3, #0
 8011508:	613b      	str	r3, [r7, #16]
 801150a:	e043      	b.n	8011594 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	015a      	lsls	r2, r3, #5
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	4413      	add	r3, r2
 8011514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801151e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011522:	d118      	bne.n	8011556 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d10a      	bne.n	8011540 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	015a      	lsls	r2, r3, #5
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	4413      	add	r3, r2
 8011532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011536:	461a      	mov	r2, r3
 8011538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801153c:	6013      	str	r3, [r2, #0]
 801153e:	e013      	b.n	8011568 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	015a      	lsls	r2, r3, #5
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	4413      	add	r3, r2
 8011548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801154c:	461a      	mov	r2, r3
 801154e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011552:	6013      	str	r3, [r2, #0]
 8011554:	e008      	b.n	8011568 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	015a      	lsls	r2, r3, #5
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011562:	461a      	mov	r2, r3
 8011564:	2300      	movs	r3, #0
 8011566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	015a      	lsls	r2, r3, #5
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	4413      	add	r3, r2
 8011570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011574:	461a      	mov	r2, r3
 8011576:	2300      	movs	r3, #0
 8011578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	015a      	lsls	r2, r3, #5
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	4413      	add	r3, r2
 8011582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011586:	461a      	mov	r2, r3
 8011588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801158c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	3301      	adds	r3, #1
 8011592:	613b      	str	r3, [r7, #16]
 8011594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011596:	693a      	ldr	r2, [r7, #16]
 8011598:	429a      	cmp	r2, r3
 801159a:	d3b7      	bcc.n	801150c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	68fa      	ldr	r2, [r7, #12]
 80115a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80115aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2200      	movs	r2, #0
 80115b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80115bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	699b      	ldr	r3, [r3, #24]
 80115c2:	f043 0210 	orr.w	r2, r3, #16
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	699a      	ldr	r2, [r3, #24]
 80115ce:	4b10      	ldr	r3, [pc, #64]	; (8011610 <USB_DevInit+0x294>)
 80115d0:	4313      	orrs	r3, r2
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80115d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d005      	beq.n	80115e8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	699b      	ldr	r3, [r3, #24]
 80115e0:	f043 0208 	orr.w	r2, r3, #8
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80115e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d107      	bne.n	80115fe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	699b      	ldr	r3, [r3, #24]
 80115f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80115f6:	f043 0304 	orr.w	r3, r3, #4
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80115fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801160a:	b004      	add	sp, #16
 801160c:	4770      	bx	lr
 801160e:	bf00      	nop
 8011610:	803c3800 	.word	0x803c3800

08011614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011614:	b480      	push	{r7}
 8011616:	b085      	sub	sp, #20
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801161e:	2300      	movs	r3, #0
 8011620:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	3301      	adds	r3, #1
 8011626:	60fb      	str	r3, [r7, #12]
 8011628:	4a12      	ldr	r2, [pc, #72]	; (8011674 <USB_FlushTxFifo+0x60>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d901      	bls.n	8011632 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801162e:	2303      	movs	r3, #3
 8011630:	e01a      	b.n	8011668 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	2b00      	cmp	r3, #0
 8011638:	daf3      	bge.n	8011622 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801163a:	2300      	movs	r3, #0
 801163c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	019b      	lsls	r3, r3, #6
 8011642:	f043 0220 	orr.w	r2, r3, #32
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	3301      	adds	r3, #1
 801164e:	60fb      	str	r3, [r7, #12]
 8011650:	4a08      	ldr	r2, [pc, #32]	; (8011674 <USB_FlushTxFifo+0x60>)
 8011652:	4293      	cmp	r3, r2
 8011654:	d901      	bls.n	801165a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8011656:	2303      	movs	r3, #3
 8011658:	e006      	b.n	8011668 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	f003 0320 	and.w	r3, r3, #32
 8011662:	2b20      	cmp	r3, #32
 8011664:	d0f1      	beq.n	801164a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr
 8011674:	00030d40 	.word	0x00030d40

08011678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011678:	b480      	push	{r7}
 801167a:	b085      	sub	sp, #20
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011680:	2300      	movs	r3, #0
 8011682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	3301      	adds	r3, #1
 8011688:	60fb      	str	r3, [r7, #12]
 801168a:	4a11      	ldr	r2, [pc, #68]	; (80116d0 <USB_FlushRxFifo+0x58>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d901      	bls.n	8011694 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8011690:	2303      	movs	r3, #3
 8011692:	e017      	b.n	80116c4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	691b      	ldr	r3, [r3, #16]
 8011698:	2b00      	cmp	r3, #0
 801169a:	daf3      	bge.n	8011684 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801169c:	2300      	movs	r3, #0
 801169e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2210      	movs	r2, #16
 80116a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	3301      	adds	r3, #1
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	4a08      	ldr	r2, [pc, #32]	; (80116d0 <USB_FlushRxFifo+0x58>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d901      	bls.n	80116b6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80116b2:	2303      	movs	r3, #3
 80116b4:	e006      	b.n	80116c4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	f003 0310 	and.w	r3, r3, #16
 80116be:	2b10      	cmp	r3, #16
 80116c0:	d0f1      	beq.n	80116a6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr
 80116d0:	00030d40 	.word	0x00030d40

080116d4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	460b      	mov	r3, r1
 80116de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	78fb      	ldrb	r3, [r7, #3]
 80116ee:	68f9      	ldr	r1, [r7, #12]
 80116f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80116f4:	4313      	orrs	r3, r2
 80116f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80116f8:	2300      	movs	r3, #0
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3714      	adds	r7, #20
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr

08011706 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011706:	b480      	push	{r7}
 8011708:	b087      	sub	sp, #28
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	f003 0306 	and.w	r3, r3, #6
 801171e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b02      	cmp	r3, #2
 8011724:	d002      	beq.n	801172c <USB_GetDevSpeed+0x26>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b06      	cmp	r3, #6
 801172a:	d102      	bne.n	8011732 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801172c:	2302      	movs	r3, #2
 801172e:	75fb      	strb	r3, [r7, #23]
 8011730:	e001      	b.n	8011736 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011732:	230f      	movs	r3, #15
 8011734:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011736:	7dfb      	ldrb	r3, [r7, #23]
}
 8011738:	4618      	mov	r0, r3
 801173a:	371c      	adds	r7, #28
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011744:	b480      	push	{r7}
 8011746:	b085      	sub	sp, #20
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	785b      	ldrb	r3, [r3, #1]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d13a      	bne.n	80117d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011766:	69da      	ldr	r2, [r3, #28]
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	f003 030f 	and.w	r3, r3, #15
 8011770:	2101      	movs	r1, #1
 8011772:	fa01 f303 	lsl.w	r3, r1, r3
 8011776:	b29b      	uxth	r3, r3
 8011778:	68f9      	ldr	r1, [r7, #12]
 801177a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801177e:	4313      	orrs	r3, r2
 8011780:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	015a      	lsls	r2, r3, #5
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	4413      	add	r3, r2
 801178a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011794:	2b00      	cmp	r3, #0
 8011796:	d155      	bne.n	8011844 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	015a      	lsls	r2, r3, #5
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4413      	add	r3, r2
 80117a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	78db      	ldrb	r3, [r3, #3]
 80117b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80117b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	059b      	lsls	r3, r3, #22
 80117ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80117bc:	4313      	orrs	r3, r2
 80117be:	68ba      	ldr	r2, [r7, #8]
 80117c0:	0151      	lsls	r1, r2, #5
 80117c2:	68fa      	ldr	r2, [r7, #12]
 80117c4:	440a      	add	r2, r1
 80117c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117d2:	6013      	str	r3, [r2, #0]
 80117d4:	e036      	b.n	8011844 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117dc:	69da      	ldr	r2, [r3, #28]
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	f003 030f 	and.w	r3, r3, #15
 80117e6:	2101      	movs	r1, #1
 80117e8:	fa01 f303 	lsl.w	r3, r1, r3
 80117ec:	041b      	lsls	r3, r3, #16
 80117ee:	68f9      	ldr	r1, [r7, #12]
 80117f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80117f4:	4313      	orrs	r3, r2
 80117f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	015a      	lsls	r2, r3, #5
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	4413      	add	r3, r2
 8011800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801180a:	2b00      	cmp	r3, #0
 801180c:	d11a      	bne.n	8011844 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	015a      	lsls	r2, r3, #5
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	4413      	add	r3, r2
 8011816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	689b      	ldr	r3, [r3, #8]
 8011820:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	78db      	ldrb	r3, [r3, #3]
 8011828:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801182a:	430b      	orrs	r3, r1
 801182c:	4313      	orrs	r3, r2
 801182e:	68ba      	ldr	r2, [r7, #8]
 8011830:	0151      	lsls	r1, r2, #5
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	440a      	add	r2, r1
 8011836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011842:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011844:	2300      	movs	r3, #0
}
 8011846:	4618      	mov	r0, r3
 8011848:	3714      	adds	r7, #20
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr
	...

08011854 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011854:	b480      	push	{r7}
 8011856:	b085      	sub	sp, #20
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	785b      	ldrb	r3, [r3, #1]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d161      	bne.n	8011934 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	015a      	lsls	r2, r3, #5
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	4413      	add	r3, r2
 8011878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011886:	d11f      	bne.n	80118c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	015a      	lsls	r2, r3, #5
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4413      	add	r3, r2
 8011890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	0151      	lsls	r1, r2, #5
 801189a:	68fa      	ldr	r2, [r7, #12]
 801189c:	440a      	add	r2, r1
 801189e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80118a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	015a      	lsls	r2, r3, #5
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	4413      	add	r3, r2
 80118b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	0151      	lsls	r1, r2, #5
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	440a      	add	r2, r1
 80118be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80118c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	f003 030f 	and.w	r3, r3, #15
 80118d8:	2101      	movs	r1, #1
 80118da:	fa01 f303 	lsl.w	r3, r1, r3
 80118de:	b29b      	uxth	r3, r3
 80118e0:	43db      	mvns	r3, r3
 80118e2:	68f9      	ldr	r1, [r7, #12]
 80118e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118e8:	4013      	ands	r3, r2
 80118ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118f2:	69da      	ldr	r2, [r3, #28]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	f003 030f 	and.w	r3, r3, #15
 80118fc:	2101      	movs	r1, #1
 80118fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011902:	b29b      	uxth	r3, r3
 8011904:	43db      	mvns	r3, r3
 8011906:	68f9      	ldr	r1, [r7, #12]
 8011908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801190c:	4013      	ands	r3, r2
 801190e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	015a      	lsls	r2, r3, #5
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	4413      	add	r3, r2
 8011918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	0159      	lsls	r1, r3, #5
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	440b      	add	r3, r1
 8011926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801192a:	4619      	mov	r1, r3
 801192c:	4b35      	ldr	r3, [pc, #212]	; (8011a04 <USB_DeactivateEndpoint+0x1b0>)
 801192e:	4013      	ands	r3, r2
 8011930:	600b      	str	r3, [r1, #0]
 8011932:	e060      	b.n	80119f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	015a      	lsls	r2, r3, #5
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	4413      	add	r3, r2
 801193c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801194a:	d11f      	bne.n	801198c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	015a      	lsls	r2, r3, #5
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	4413      	add	r3, r2
 8011954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	0151      	lsls	r1, r2, #5
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	440a      	add	r2, r1
 8011962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801196a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	015a      	lsls	r2, r3, #5
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	4413      	add	r3, r2
 8011974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	68ba      	ldr	r2, [r7, #8]
 801197c:	0151      	lsls	r1, r2, #5
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	440a      	add	r2, r1
 8011982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801198a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	f003 030f 	and.w	r3, r3, #15
 801199c:	2101      	movs	r1, #1
 801199e:	fa01 f303 	lsl.w	r3, r1, r3
 80119a2:	041b      	lsls	r3, r3, #16
 80119a4:	43db      	mvns	r3, r3
 80119a6:	68f9      	ldr	r1, [r7, #12]
 80119a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119ac:	4013      	ands	r3, r2
 80119ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119b6:	69da      	ldr	r2, [r3, #28]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	f003 030f 	and.w	r3, r3, #15
 80119c0:	2101      	movs	r1, #1
 80119c2:	fa01 f303 	lsl.w	r3, r1, r3
 80119c6:	041b      	lsls	r3, r3, #16
 80119c8:	43db      	mvns	r3, r3
 80119ca:	68f9      	ldr	r1, [r7, #12]
 80119cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119d0:	4013      	ands	r3, r2
 80119d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	015a      	lsls	r2, r3, #5
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	4413      	add	r3, r2
 80119dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	0159      	lsls	r1, r3, #5
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	440b      	add	r3, r1
 80119ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ee:	4619      	mov	r1, r3
 80119f0:	4b05      	ldr	r3, [pc, #20]	; (8011a08 <USB_DeactivateEndpoint+0x1b4>)
 80119f2:	4013      	ands	r3, r2
 80119f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80119f6:	2300      	movs	r3, #0
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3714      	adds	r7, #20
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr
 8011a04:	ec337800 	.word	0xec337800
 8011a08:	eff37800 	.word	0xeff37800

08011a0c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	785b      	ldrb	r3, [r3, #1]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	f040 810a 	bne.w	8011c3e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	695b      	ldr	r3, [r3, #20]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d132      	bne.n	8011a98 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a3e:	691b      	ldr	r3, [r3, #16]
 8011a40:	693a      	ldr	r2, [r7, #16]
 8011a42:	0151      	lsls	r1, r2, #5
 8011a44:	697a      	ldr	r2, [r7, #20]
 8011a46:	440a      	add	r2, r1
 8011a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	015a      	lsls	r2, r3, #5
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a62:	691b      	ldr	r3, [r3, #16]
 8011a64:	693a      	ldr	r2, [r7, #16]
 8011a66:	0151      	lsls	r1, r2, #5
 8011a68:	697a      	ldr	r2, [r7, #20]
 8011a6a:	440a      	add	r2, r1
 8011a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	015a      	lsls	r2, r3, #5
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	693a      	ldr	r2, [r7, #16]
 8011a86:	0151      	lsls	r1, r2, #5
 8011a88:	697a      	ldr	r2, [r7, #20]
 8011a8a:	440a      	add	r2, r1
 8011a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a90:	0cdb      	lsrs	r3, r3, #19
 8011a92:	04db      	lsls	r3, r3, #19
 8011a94:	6113      	str	r3, [r2, #16]
 8011a96:	e074      	b.n	8011b82 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	015a      	lsls	r2, r3, #5
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aa4:	691b      	ldr	r3, [r3, #16]
 8011aa6:	693a      	ldr	r2, [r7, #16]
 8011aa8:	0151      	lsls	r1, r2, #5
 8011aaa:	697a      	ldr	r2, [r7, #20]
 8011aac:	440a      	add	r2, r1
 8011aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ab2:	0cdb      	lsrs	r3, r3, #19
 8011ab4:	04db      	lsls	r3, r3, #19
 8011ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	015a      	lsls	r2, r3, #5
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	4413      	add	r3, r2
 8011ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ac4:	691b      	ldr	r3, [r3, #16]
 8011ac6:	693a      	ldr	r2, [r7, #16]
 8011ac8:	0151      	lsls	r1, r2, #5
 8011aca:	697a      	ldr	r2, [r7, #20]
 8011acc:	440a      	add	r2, r1
 8011ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ad2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011ad6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	015a      	lsls	r2, r3, #5
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ae8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	6959      	ldr	r1, [r3, #20]
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	440b      	add	r3, r1
 8011af4:	1e59      	subs	r1, r3, #1
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	689b      	ldr	r3, [r3, #8]
 8011afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8011afe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011b00:	4baf      	ldr	r3, [pc, #700]	; (8011dc0 <USB_EPStartXfer+0x3b4>)
 8011b02:	400b      	ands	r3, r1
 8011b04:	6939      	ldr	r1, [r7, #16]
 8011b06:	0148      	lsls	r0, r1, #5
 8011b08:	6979      	ldr	r1, [r7, #20]
 8011b0a:	4401      	add	r1, r0
 8011b0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011b10:	4313      	orrs	r3, r2
 8011b12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	015a      	lsls	r2, r3, #5
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b20:	691a      	ldr	r2, [r3, #16]
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	695b      	ldr	r3, [r3, #20]
 8011b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b2a:	6939      	ldr	r1, [r7, #16]
 8011b2c:	0148      	lsls	r0, r1, #5
 8011b2e:	6979      	ldr	r1, [r7, #20]
 8011b30:	4401      	add	r1, r0
 8011b32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011b36:	4313      	orrs	r3, r2
 8011b38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	78db      	ldrb	r3, [r3, #3]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d11f      	bne.n	8011b82 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	015a      	lsls	r2, r3, #5
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	4413      	add	r3, r2
 8011b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	693a      	ldr	r2, [r7, #16]
 8011b52:	0151      	lsls	r1, r2, #5
 8011b54:	697a      	ldr	r2, [r7, #20]
 8011b56:	440a      	add	r2, r1
 8011b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011b60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	015a      	lsls	r2, r3, #5
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	4413      	add	r3, r2
 8011b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	693a      	ldr	r2, [r7, #16]
 8011b72:	0151      	lsls	r1, r2, #5
 8011b74:	697a      	ldr	r2, [r7, #20]
 8011b76:	440a      	add	r2, r1
 8011b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b80:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	015a      	lsls	r2, r3, #5
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	4413      	add	r3, r2
 8011b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	693a      	ldr	r2, [r7, #16]
 8011b92:	0151      	lsls	r1, r2, #5
 8011b94:	697a      	ldr	r2, [r7, #20]
 8011b96:	440a      	add	r2, r1
 8011b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ba0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	78db      	ldrb	r3, [r3, #3]
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d015      	beq.n	8011bd6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	695b      	ldr	r3, [r3, #20]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	f000 8100 	beq.w	8011db4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	f003 030f 	and.w	r3, r3, #15
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8011bca:	6979      	ldr	r1, [r7, #20]
 8011bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	634b      	str	r3, [r1, #52]	; 0x34
 8011bd4:	e0ee      	b.n	8011db4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d110      	bne.n	8011c08 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	015a      	lsls	r2, r3, #5
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	4413      	add	r3, r2
 8011bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	693a      	ldr	r2, [r7, #16]
 8011bf6:	0151      	lsls	r1, r2, #5
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	440a      	add	r2, r1
 8011bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011c04:	6013      	str	r3, [r2, #0]
 8011c06:	e00f      	b.n	8011c28 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	015a      	lsls	r2, r3, #5
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	4413      	add	r3, r2
 8011c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	693a      	ldr	r2, [r7, #16]
 8011c18:	0151      	lsls	r1, r2, #5
 8011c1a:	697a      	ldr	r2, [r7, #20]
 8011c1c:	440a      	add	r2, r1
 8011c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c26:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	68d9      	ldr	r1, [r3, #12]
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	781a      	ldrb	r2, [r3, #0]
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	695b      	ldr	r3, [r3, #20]
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 f9e2 	bl	8012000 <USB_WritePacket>
 8011c3c:	e0ba      	b.n	8011db4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	015a      	lsls	r2, r3, #5
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	4413      	add	r3, r2
 8011c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c4a:	691b      	ldr	r3, [r3, #16]
 8011c4c:	693a      	ldr	r2, [r7, #16]
 8011c4e:	0151      	lsls	r1, r2, #5
 8011c50:	697a      	ldr	r2, [r7, #20]
 8011c52:	440a      	add	r2, r1
 8011c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c58:	0cdb      	lsrs	r3, r3, #19
 8011c5a:	04db      	lsls	r3, r3, #19
 8011c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	015a      	lsls	r2, r3, #5
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	4413      	add	r3, r2
 8011c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	693a      	ldr	r2, [r7, #16]
 8011c6e:	0151      	lsls	r1, r2, #5
 8011c70:	697a      	ldr	r2, [r7, #20]
 8011c72:	440a      	add	r2, r1
 8011c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011c80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	695b      	ldr	r3, [r3, #20]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d123      	bne.n	8011cd2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	015a      	lsls	r2, r3, #5
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	4413      	add	r3, r2
 8011c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c96:	691a      	ldr	r2, [r3, #16]
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	689b      	ldr	r3, [r3, #8]
 8011c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ca0:	6939      	ldr	r1, [r7, #16]
 8011ca2:	0148      	lsls	r0, r1, #5
 8011ca4:	6979      	ldr	r1, [r7, #20]
 8011ca6:	4401      	add	r1, r0
 8011ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011cac:	4313      	orrs	r3, r2
 8011cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	015a      	lsls	r2, r3, #5
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cbc:	691b      	ldr	r3, [r3, #16]
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	0151      	lsls	r1, r2, #5
 8011cc2:	697a      	ldr	r2, [r7, #20]
 8011cc4:	440a      	add	r2, r1
 8011cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011cce:	6113      	str	r3, [r2, #16]
 8011cd0:	e033      	b.n	8011d3a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	695a      	ldr	r2, [r3, #20]
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	689b      	ldr	r3, [r3, #8]
 8011cda:	4413      	add	r3, r2
 8011cdc:	1e5a      	subs	r2, r3, #1
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	689b      	ldr	r3, [r3, #8]
 8011ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ce6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	015a      	lsls	r2, r3, #5
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	4413      	add	r3, r2
 8011cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cf4:	691a      	ldr	r2, [r3, #16]
 8011cf6:	89fb      	ldrh	r3, [r7, #14]
 8011cf8:	04d9      	lsls	r1, r3, #19
 8011cfa:	4b31      	ldr	r3, [pc, #196]	; (8011dc0 <USB_EPStartXfer+0x3b4>)
 8011cfc:	400b      	ands	r3, r1
 8011cfe:	6939      	ldr	r1, [r7, #16]
 8011d00:	0148      	lsls	r0, r1, #5
 8011d02:	6979      	ldr	r1, [r7, #20]
 8011d04:	4401      	add	r1, r0
 8011d06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	015a      	lsls	r2, r3, #5
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	4413      	add	r3, r2
 8011d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d1a:	691a      	ldr	r2, [r3, #16]
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	689b      	ldr	r3, [r3, #8]
 8011d20:	89f9      	ldrh	r1, [r7, #14]
 8011d22:	fb01 f303 	mul.w	r3, r1, r3
 8011d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d2a:	6939      	ldr	r1, [r7, #16]
 8011d2c:	0148      	lsls	r0, r1, #5
 8011d2e:	6979      	ldr	r1, [r7, #20]
 8011d30:	4401      	add	r1, r0
 8011d32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d36:	4313      	orrs	r3, r2
 8011d38:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	78db      	ldrb	r3, [r3, #3]
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d128      	bne.n	8011d94 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d48:	689b      	ldr	r3, [r3, #8]
 8011d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d110      	bne.n	8011d74 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	015a      	lsls	r2, r3, #5
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	4413      	add	r3, r2
 8011d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	693a      	ldr	r2, [r7, #16]
 8011d62:	0151      	lsls	r1, r2, #5
 8011d64:	697a      	ldr	r2, [r7, #20]
 8011d66:	440a      	add	r2, r1
 8011d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d70:	6013      	str	r3, [r2, #0]
 8011d72:	e00f      	b.n	8011d94 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	015a      	lsls	r2, r3, #5
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	693a      	ldr	r2, [r7, #16]
 8011d84:	0151      	lsls	r1, r2, #5
 8011d86:	697a      	ldr	r2, [r7, #20]
 8011d88:	440a      	add	r2, r1
 8011d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	015a      	lsls	r2, r3, #5
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	693a      	ldr	r2, [r7, #16]
 8011da4:	0151      	lsls	r1, r2, #5
 8011da6:	697a      	ldr	r2, [r7, #20]
 8011da8:	440a      	add	r2, r1
 8011daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011dae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3718      	adds	r7, #24
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	1ff80000 	.word	0x1ff80000

08011dc4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	785b      	ldrb	r3, [r3, #1]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	f040 80ab 	bne.w	8011f38 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	695b      	ldr	r3, [r3, #20]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d132      	bne.n	8011e50 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	015a      	lsls	r2, r3, #5
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	4413      	add	r3, r2
 8011df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011df6:	691b      	ldr	r3, [r3, #16]
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	0151      	lsls	r1, r2, #5
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	440a      	add	r2, r1
 8011e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011e08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	015a      	lsls	r2, r3, #5
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	4413      	add	r3, r2
 8011e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e1a:	691b      	ldr	r3, [r3, #16]
 8011e1c:	68ba      	ldr	r2, [r7, #8]
 8011e1e:	0151      	lsls	r1, r2, #5
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	440a      	add	r2, r1
 8011e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011e2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	015a      	lsls	r2, r3, #5
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	4413      	add	r3, r2
 8011e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	0151      	lsls	r1, r2, #5
 8011e40:	68fa      	ldr	r2, [r7, #12]
 8011e42:	440a      	add	r2, r1
 8011e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e48:	0cdb      	lsrs	r3, r3, #19
 8011e4a:	04db      	lsls	r3, r3, #19
 8011e4c:	6113      	str	r3, [r2, #16]
 8011e4e:	e04e      	b.n	8011eee <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	015a      	lsls	r2, r3, #5
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	4413      	add	r3, r2
 8011e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e5c:	691b      	ldr	r3, [r3, #16]
 8011e5e:	68ba      	ldr	r2, [r7, #8]
 8011e60:	0151      	lsls	r1, r2, #5
 8011e62:	68fa      	ldr	r2, [r7, #12]
 8011e64:	440a      	add	r2, r1
 8011e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e6a:	0cdb      	lsrs	r3, r3, #19
 8011e6c:	04db      	lsls	r3, r3, #19
 8011e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	015a      	lsls	r2, r3, #5
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	4413      	add	r3, r2
 8011e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e7c:	691b      	ldr	r3, [r3, #16]
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	0151      	lsls	r1, r2, #5
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	440a      	add	r2, r1
 8011e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011e8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011e92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	695a      	ldr	r2, [r3, #20]
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d903      	bls.n	8011ea8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	015a      	lsls	r2, r3, #5
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	4413      	add	r3, r2
 8011eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eb4:	691b      	ldr	r3, [r3, #16]
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	0151      	lsls	r1, r2, #5
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	440a      	add	r2, r1
 8011ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ec6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	015a      	lsls	r2, r3, #5
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	4413      	add	r3, r2
 8011ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ed4:	691a      	ldr	r2, [r3, #16]
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	695b      	ldr	r3, [r3, #20]
 8011eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ede:	68b9      	ldr	r1, [r7, #8]
 8011ee0:	0148      	lsls	r0, r1, #5
 8011ee2:	68f9      	ldr	r1, [r7, #12]
 8011ee4:	4401      	add	r1, r0
 8011ee6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011eea:	4313      	orrs	r3, r2
 8011eec:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	015a      	lsls	r2, r3, #5
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	68ba      	ldr	r2, [r7, #8]
 8011efe:	0151      	lsls	r1, r2, #5
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	440a      	add	r2, r1
 8011f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011f0c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	695b      	ldr	r3, [r3, #20]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d06d      	beq.n	8011ff2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	f003 030f 	and.w	r3, r3, #15
 8011f26:	2101      	movs	r1, #1
 8011f28:	fa01 f303 	lsl.w	r3, r1, r3
 8011f2c:	68f9      	ldr	r1, [r7, #12]
 8011f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f32:	4313      	orrs	r3, r2
 8011f34:	634b      	str	r3, [r1, #52]	; 0x34
 8011f36:	e05c      	b.n	8011ff2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	015a      	lsls	r2, r3, #5
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	4413      	add	r3, r2
 8011f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	68ba      	ldr	r2, [r7, #8]
 8011f48:	0151      	lsls	r1, r2, #5
 8011f4a:	68fa      	ldr	r2, [r7, #12]
 8011f4c:	440a      	add	r2, r1
 8011f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f52:	0cdb      	lsrs	r3, r3, #19
 8011f54:	04db      	lsls	r3, r3, #19
 8011f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	015a      	lsls	r2, r3, #5
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	4413      	add	r3, r2
 8011f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f64:	691b      	ldr	r3, [r3, #16]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	0151      	lsls	r1, r2, #5
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	440a      	add	r2, r1
 8011f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011f7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d003      	beq.n	8011f8c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	689a      	ldr	r2, [r3, #8]
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	015a      	lsls	r2, r3, #5
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	4413      	add	r3, r2
 8011f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f98:	691b      	ldr	r3, [r3, #16]
 8011f9a:	68ba      	ldr	r2, [r7, #8]
 8011f9c:	0151      	lsls	r1, r2, #5
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	440a      	add	r2, r1
 8011fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	015a      	lsls	r2, r3, #5
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	4413      	add	r3, r2
 8011fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb8:	691a      	ldr	r2, [r3, #16]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	689b      	ldr	r3, [r3, #8]
 8011fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011fc2:	68b9      	ldr	r1, [r7, #8]
 8011fc4:	0148      	lsls	r0, r1, #5
 8011fc6:	68f9      	ldr	r1, [r7, #12]
 8011fc8:	4401      	add	r1, r0
 8011fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	015a      	lsls	r2, r3, #5
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	4413      	add	r3, r2
 8011fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	0151      	lsls	r1, r2, #5
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	440a      	add	r2, r1
 8011fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ff0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3714      	adds	r7, #20
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8012000:	b480      	push	{r7}
 8012002:	b089      	sub	sp, #36	; 0x24
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	4611      	mov	r1, r2
 801200c:	461a      	mov	r2, r3
 801200e:	460b      	mov	r3, r1
 8012010:	71fb      	strb	r3, [r7, #7]
 8012012:	4613      	mov	r3, r2
 8012014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801201e:	88bb      	ldrh	r3, [r7, #4]
 8012020:	3303      	adds	r3, #3
 8012022:	089b      	lsrs	r3, r3, #2
 8012024:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8012026:	2300      	movs	r3, #0
 8012028:	61bb      	str	r3, [r7, #24]
 801202a:	e018      	b.n	801205e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801202c:	79fb      	ldrb	r3, [r7, #7]
 801202e:	031a      	lsls	r2, r3, #12
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	4413      	add	r3, r2
 8012034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012038:	461a      	mov	r2, r3
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8012040:	69fb      	ldr	r3, [r7, #28]
 8012042:	3301      	adds	r3, #1
 8012044:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	3301      	adds	r3, #1
 801204a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	3301      	adds	r3, #1
 8012050:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	3301      	adds	r3, #1
 8012056:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012058:	69bb      	ldr	r3, [r7, #24]
 801205a:	3301      	adds	r3, #1
 801205c:	61bb      	str	r3, [r7, #24]
 801205e:	69ba      	ldr	r2, [r7, #24]
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	429a      	cmp	r2, r3
 8012064:	d3e2      	bcc.n	801202c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8012066:	2300      	movs	r3, #0
}
 8012068:	4618      	mov	r0, r3
 801206a:	3724      	adds	r7, #36	; 0x24
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr

08012074 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012074:	b480      	push	{r7}
 8012076:	b08b      	sub	sp, #44	; 0x2c
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	4613      	mov	r3, r2
 8012080:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801208a:	88fb      	ldrh	r3, [r7, #6]
 801208c:	089b      	lsrs	r3, r3, #2
 801208e:	b29b      	uxth	r3, r3
 8012090:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012092:	88fb      	ldrh	r3, [r7, #6]
 8012094:	f003 0303 	and.w	r3, r3, #3
 8012098:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801209a:	2300      	movs	r3, #0
 801209c:	623b      	str	r3, [r7, #32]
 801209e:	e014      	b.n	80120ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80120ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ae:	3301      	adds	r3, #1
 80120b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80120b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b4:	3301      	adds	r3, #1
 80120b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	3301      	adds	r3, #1
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80120be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c0:	3301      	adds	r3, #1
 80120c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	3301      	adds	r3, #1
 80120c8:	623b      	str	r3, [r7, #32]
 80120ca:	6a3a      	ldr	r2, [r7, #32]
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d3e6      	bcc.n	80120a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80120d2:	8bfb      	ldrh	r3, [r7, #30]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d01e      	beq.n	8012116 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80120d8:	2300      	movs	r3, #0
 80120da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120e2:	461a      	mov	r2, r3
 80120e4:	f107 0310 	add.w	r3, r7, #16
 80120e8:	6812      	ldr	r2, [r2, #0]
 80120ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80120ec:	693a      	ldr	r2, [r7, #16]
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	00db      	lsls	r3, r3, #3
 80120f4:	fa22 f303 	lsr.w	r3, r2, r3
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fc:	701a      	strb	r2, [r3, #0]
      i++;
 80120fe:	6a3b      	ldr	r3, [r7, #32]
 8012100:	3301      	adds	r3, #1
 8012102:	623b      	str	r3, [r7, #32]
      pDest++;
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	3301      	adds	r3, #1
 8012108:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801210a:	8bfb      	ldrh	r3, [r7, #30]
 801210c:	3b01      	subs	r3, #1
 801210e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012110:	8bfb      	ldrh	r3, [r7, #30]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1ea      	bne.n	80120ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012118:	4618      	mov	r0, r3
 801211a:	372c      	adds	r7, #44	; 0x2c
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012124:	b480      	push	{r7}
 8012126:	b085      	sub	sp, #20
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	785b      	ldrb	r3, [r3, #1]
 801213c:	2b01      	cmp	r3, #1
 801213e:	d12c      	bne.n	801219a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	015a      	lsls	r2, r3, #5
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	4413      	add	r3, r2
 8012148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	2b00      	cmp	r3, #0
 8012150:	db12      	blt.n	8012178 <USB_EPSetStall+0x54>
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d00f      	beq.n	8012178 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	015a      	lsls	r2, r3, #5
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	4413      	add	r3, r2
 8012160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	0151      	lsls	r1, r2, #5
 801216a:	68fa      	ldr	r2, [r7, #12]
 801216c:	440a      	add	r2, r1
 801216e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012172:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012176:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	015a      	lsls	r2, r3, #5
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	4413      	add	r3, r2
 8012180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	0151      	lsls	r1, r2, #5
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	440a      	add	r2, r1
 801218e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012196:	6013      	str	r3, [r2, #0]
 8012198:	e02b      	b.n	80121f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	015a      	lsls	r2, r3, #5
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	4413      	add	r3, r2
 80121a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	db12      	blt.n	80121d2 <USB_EPSetStall+0xae>
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00f      	beq.n	80121d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	015a      	lsls	r2, r3, #5
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	4413      	add	r3, r2
 80121ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	0151      	lsls	r1, r2, #5
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	440a      	add	r2, r1
 80121c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80121d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	015a      	lsls	r2, r3, #5
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	4413      	add	r3, r2
 80121da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	68ba      	ldr	r2, [r7, #8]
 80121e2:	0151      	lsls	r1, r2, #5
 80121e4:	68fa      	ldr	r2, [r7, #12]
 80121e6:	440a      	add	r2, r1
 80121e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80121f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80121f2:	2300      	movs	r3, #0
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3714      	adds	r7, #20
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012200:	b480      	push	{r7}
 8012202:	b085      	sub	sp, #20
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	785b      	ldrb	r3, [r3, #1]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d128      	bne.n	801226e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	015a      	lsls	r2, r3, #5
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	4413      	add	r3, r2
 8012224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	68ba      	ldr	r2, [r7, #8]
 801222c:	0151      	lsls	r1, r2, #5
 801222e:	68fa      	ldr	r2, [r7, #12]
 8012230:	440a      	add	r2, r1
 8012232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801223a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	78db      	ldrb	r3, [r3, #3]
 8012240:	2b03      	cmp	r3, #3
 8012242:	d003      	beq.n	801224c <USB_EPClearStall+0x4c>
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	78db      	ldrb	r3, [r3, #3]
 8012248:	2b02      	cmp	r3, #2
 801224a:	d138      	bne.n	80122be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	015a      	lsls	r2, r3, #5
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	4413      	add	r3, r2
 8012254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	68ba      	ldr	r2, [r7, #8]
 801225c:	0151      	lsls	r1, r2, #5
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	440a      	add	r2, r1
 8012262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801226a:	6013      	str	r3, [r2, #0]
 801226c:	e027      	b.n	80122be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	015a      	lsls	r2, r3, #5
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	4413      	add	r3, r2
 8012276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	68ba      	ldr	r2, [r7, #8]
 801227e:	0151      	lsls	r1, r2, #5
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	440a      	add	r2, r1
 8012284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801228c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	78db      	ldrb	r3, [r3, #3]
 8012292:	2b03      	cmp	r3, #3
 8012294:	d003      	beq.n	801229e <USB_EPClearStall+0x9e>
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	78db      	ldrb	r3, [r3, #3]
 801229a:	2b02      	cmp	r3, #2
 801229c:	d10f      	bne.n	80122be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	015a      	lsls	r2, r3, #5
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	4413      	add	r3, r2
 80122a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	68ba      	ldr	r2, [r7, #8]
 80122ae:	0151      	lsls	r1, r2, #5
 80122b0:	68fa      	ldr	r2, [r7, #12]
 80122b2:	440a      	add	r2, r1
 80122b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80122be:	2300      	movs	r3, #0
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3714      	adds	r7, #20
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b085      	sub	sp, #20
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	68fa      	ldr	r2, [r7, #12]
 80122e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80122ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80122ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	78fb      	ldrb	r3, [r7, #3]
 80122fa:	011b      	lsls	r3, r3, #4
 80122fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012300:	68f9      	ldr	r1, [r7, #12]
 8012302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012306:	4313      	orrs	r3, r2
 8012308:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	68fa      	ldr	r2, [r7, #12]
 801232e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012332:	f023 0303 	bic.w	r3, r3, #3
 8012336:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012346:	f023 0302 	bic.w	r3, r3, #2
 801234a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801234c:	2300      	movs	r3, #0
}
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr

0801235a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801235a:	b480      	push	{r7}
 801235c:	b085      	sub	sp, #20
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012374:	f023 0303 	bic.w	r3, r3, #3
 8012378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	68fa      	ldr	r2, [r7, #12]
 8012384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012388:	f043 0302 	orr.w	r3, r3, #2
 801238c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3714      	adds	r7, #20
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr

0801239c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	695b      	ldr	r3, [r3, #20]
 80123a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	699b      	ldr	r3, [r3, #24]
 80123ae:	68fa      	ldr	r2, [r7, #12]
 80123b0:	4013      	ands	r3, r2
 80123b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80123b4:	68fb      	ldr	r3, [r7, #12]
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3714      	adds	r7, #20
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80123c2:	b480      	push	{r7}
 80123c4:	b085      	sub	sp, #20
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123d4:	699b      	ldr	r3, [r3, #24]
 80123d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123de:	69db      	ldr	r3, [r3, #28]
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	4013      	ands	r3, r2
 80123e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	0c1b      	lsrs	r3, r3, #16
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3714      	adds	r7, #20
 80123ee:	46bd      	mov	sp, r7
 80123f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f4:	4770      	bx	lr

080123f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80123f6:	b480      	push	{r7}
 80123f8:	b085      	sub	sp, #20
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012408:	699b      	ldr	r3, [r3, #24]
 801240a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012412:	69db      	ldr	r3, [r3, #28]
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	4013      	ands	r3, r2
 8012418:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	b29b      	uxth	r3, r3
}
 801241e:	4618      	mov	r0, r3
 8012420:	3714      	adds	r7, #20
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr

0801242a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801242a:	b480      	push	{r7}
 801242c:	b085      	sub	sp, #20
 801242e:	af00      	add	r7, sp, #0
 8012430:	6078      	str	r0, [r7, #4]
 8012432:	460b      	mov	r3, r1
 8012434:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801243a:	78fb      	ldrb	r3, [r7, #3]
 801243c:	015a      	lsls	r2, r3, #5
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	4413      	add	r3, r2
 8012442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012450:	695b      	ldr	r3, [r3, #20]
 8012452:	68ba      	ldr	r2, [r7, #8]
 8012454:	4013      	ands	r3, r2
 8012456:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012458:	68bb      	ldr	r3, [r7, #8]
}
 801245a:	4618      	mov	r0, r3
 801245c:	3714      	adds	r7, #20
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012466:	b480      	push	{r7}
 8012468:	b087      	sub	sp, #28
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	460b      	mov	r3, r1
 8012470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801247c:	691b      	ldr	r3, [r3, #16]
 801247e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012488:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801248a:	78fb      	ldrb	r3, [r7, #3]
 801248c:	f003 030f 	and.w	r3, r3, #15
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	fa22 f303 	lsr.w	r3, r2, r3
 8012496:	01db      	lsls	r3, r3, #7
 8012498:	b2db      	uxtb	r3, r3
 801249a:	693a      	ldr	r2, [r7, #16]
 801249c:	4313      	orrs	r3, r2
 801249e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80124a0:	78fb      	ldrb	r3, [r7, #3]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ac:	689b      	ldr	r3, [r3, #8]
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	4013      	ands	r3, r2
 80124b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80124b4:	68bb      	ldr	r3, [r7, #8]
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	371c      	adds	r7, #28
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80124c2:	b480      	push	{r7}
 80124c4:	b083      	sub	sp, #12
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	f003 0301 	and.w	r3, r3, #1
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	370c      	adds	r7, #12
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr

080124de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80124de:	b480      	push	{r7}
 80124e0:	b085      	sub	sp, #20
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	68fa      	ldr	r2, [r7, #12]
 80124f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80124fc:	f023 0307 	bic.w	r3, r3, #7
 8012500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012516:	2300      	movs	r3, #0
}
 8012518:	4618      	mov	r0, r3
 801251a:	3714      	adds	r7, #20
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr

08012524 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8012524:	b480      	push	{r7}
 8012526:	b085      	sub	sp, #20
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	333c      	adds	r3, #60	; 0x3c
 8012536:	3304      	adds	r3, #4
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	4a1c      	ldr	r2, [pc, #112]	; (80125b0 <USB_EP0_OutStart+0x8c>)
 8012540:	4293      	cmp	r3, r2
 8012542:	d90a      	bls.n	801255a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012554:	d101      	bne.n	801255a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8012556:	2300      	movs	r3, #0
 8012558:	e024      	b.n	80125a4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012560:	461a      	mov	r2, r3
 8012562:	2300      	movs	r3, #0
 8012564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	68fa      	ldr	r2, [r7, #12]
 8012570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012580:	691b      	ldr	r3, [r3, #16]
 8012582:	68fa      	ldr	r2, [r7, #12]
 8012584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012588:	f043 0318 	orr.w	r3, r3, #24
 801258c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801259c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80125a0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80125a2:	2300      	movs	r3, #0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3714      	adds	r7, #20
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr
 80125b0:	4f54300a 	.word	0x4f54300a

080125b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b085      	sub	sp, #20
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80125bc:	2300      	movs	r3, #0
 80125be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3301      	adds	r3, #1
 80125c4:	60fb      	str	r3, [r7, #12]
 80125c6:	4a13      	ldr	r2, [pc, #76]	; (8012614 <USB_CoreReset+0x60>)
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d901      	bls.n	80125d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80125cc:	2303      	movs	r3, #3
 80125ce:	e01a      	b.n	8012606 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	daf3      	bge.n	80125c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80125d8:	2300      	movs	r3, #0
 80125da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	691b      	ldr	r3, [r3, #16]
 80125e0:	f043 0201 	orr.w	r2, r3, #1
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	3301      	adds	r3, #1
 80125ec:	60fb      	str	r3, [r7, #12]
 80125ee:	4a09      	ldr	r2, [pc, #36]	; (8012614 <USB_CoreReset+0x60>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d901      	bls.n	80125f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80125f4:	2303      	movs	r3, #3
 80125f6:	e006      	b.n	8012606 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b01      	cmp	r3, #1
 8012602:	d0f1      	beq.n	80125e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3714      	adds	r7, #20
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	00030d40 	.word	0x00030d40

08012618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8012618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012650 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801261c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801261e:	e003      	b.n	8012628 <LoopCopyDataInit>

08012620 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8012620:	4b0c      	ldr	r3, [pc, #48]	; (8012654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8012622:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8012624:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8012626:	3104      	adds	r1, #4

08012628 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8012628:	480b      	ldr	r0, [pc, #44]	; (8012658 <LoopForever+0xa>)
	ldr	r3, =_edata
 801262a:	4b0c      	ldr	r3, [pc, #48]	; (801265c <LoopForever+0xe>)
	adds	r2, r0, r1
 801262c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801262e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8012630:	d3f6      	bcc.n	8012620 <CopyDataInit>
	ldr	r2, =_sbss
 8012632:	4a0b      	ldr	r2, [pc, #44]	; (8012660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8012634:	e002      	b.n	801263c <LoopFillZerobss>

08012636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8012636:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8012638:	f842 3b04 	str.w	r3, [r2], #4

0801263c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <LoopForever+0x16>)
	cmp	r2, r3
 801263e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8012640:	d3f9      	bcc.n	8012636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8012642:	f003 f863 	bl	801570c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012646:	f005 fd97 	bl	8018178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801264a:	f000 fa67 	bl	8012b1c <main>

0801264e <LoopForever>:

LoopForever:
    b LoopForever
 801264e:	e7fe      	b.n	801264e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8012650:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8012654:	0801a090 	.word	0x0801a090
	ldr	r0, =_sdata
 8012658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801265c:	20000658 	.word	0x20000658
	ldr	r2, =_sbss
 8012660:	20000658 	.word	0x20000658
	ldr	r3, = _ebss
 8012664:	20002808 	.word	0x20002808

08012668 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8012668:	e7fe      	b.n	8012668 <ADC1_IRQHandler>

0801266a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b086      	sub	sp, #24
 801266e:	af00      	add	r7, sp, #0
 8012670:	60f8      	str	r0, [r7, #12]
 8012672:	60b9      	str	r1, [r7, #8]
 8012674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012676:	2300      	movs	r3, #0
 8012678:	617b      	str	r3, [r7, #20]
 801267a:	e00a      	b.n	8012692 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801267c:	f3af 8000 	nop.w
 8012680:	4601      	mov	r1, r0
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	1c5a      	adds	r2, r3, #1
 8012686:	60ba      	str	r2, [r7, #8]
 8012688:	b2ca      	uxtb	r2, r1
 801268a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	3301      	adds	r3, #1
 8012690:	617b      	str	r3, [r7, #20]
 8012692:	697a      	ldr	r2, [r7, #20]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	429a      	cmp	r2, r3
 8012698:	dbf0      	blt.n	801267c <_read+0x12>
	}

return len;
 801269a:	687b      	ldr	r3, [r7, #4]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b086      	sub	sp, #24
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126b0:	2300      	movs	r3, #0
 80126b2:	617b      	str	r3, [r7, #20]
 80126b4:	e009      	b.n	80126ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	1c5a      	adds	r2, r3, #1
 80126ba:	60ba      	str	r2, [r7, #8]
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	4618      	mov	r0, r3
 80126c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	3301      	adds	r3, #1
 80126c8:	617b      	str	r3, [r7, #20]
 80126ca:	697a      	ldr	r2, [r7, #20]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	dbf1      	blt.n	80126b6 <_write+0x12>
	}
	return len;
 80126d2:	687b      	ldr	r3, [r7, #4]
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3718      	adds	r7, #24
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <_sbrk>:

caddr_t _sbrk(int incr)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80126e4:	4b11      	ldr	r3, [pc, #68]	; (801272c <_sbrk+0x50>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d102      	bne.n	80126f2 <_sbrk+0x16>
		heap_end = &end;
 80126ec:	4b0f      	ldr	r3, [pc, #60]	; (801272c <_sbrk+0x50>)
 80126ee:	4a10      	ldr	r2, [pc, #64]	; (8012730 <_sbrk+0x54>)
 80126f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80126f2:	4b0e      	ldr	r3, [pc, #56]	; (801272c <_sbrk+0x50>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80126f8:	4b0c      	ldr	r3, [pc, #48]	; (801272c <_sbrk+0x50>)
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	4413      	add	r3, r2
 8012700:	466a      	mov	r2, sp
 8012702:	4293      	cmp	r3, r2
 8012704:	d907      	bls.n	8012716 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8012706:	f005 fd31 	bl	801816c <__errno>
 801270a:	4603      	mov	r3, r0
 801270c:	220c      	movs	r2, #12
 801270e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8012710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012714:	e006      	b.n	8012724 <_sbrk+0x48>
	}

	heap_end += incr;
 8012716:	4b05      	ldr	r3, [pc, #20]	; (801272c <_sbrk+0x50>)
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4413      	add	r3, r2
 801271e:	4a03      	ldr	r2, [pc, #12]	; (801272c <_sbrk+0x50>)
 8012720:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8012722:	68fb      	ldr	r3, [r7, #12]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	20000a64 	.word	0x20000a64
 8012730:	20002808 	.word	0x20002808

08012734 <_close>:

int _close(int file)
{
 8012734:	b480      	push	{r7}
 8012736:	b083      	sub	sp, #12
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
	return -1;
 801273c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012740:	4618      	mov	r0, r3
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr

0801274c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801275c:	605a      	str	r2, [r3, #4]
	return 0;
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <_isatty>:

int _isatty(int file)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
	return 1;
 8012774:	2301      	movs	r3, #1
}
 8012776:	4618      	mov	r0, r3
 8012778:	370c      	adds	r7, #12
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr

08012782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012782:	b480      	push	{r7}
 8012784:	b085      	sub	sp, #20
 8012786:	af00      	add	r7, sp, #0
 8012788:	60f8      	str	r0, [r7, #12]
 801278a:	60b9      	str	r1, [r7, #8]
 801278c:	607a      	str	r2, [r7, #4]
	return 0;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3714      	adds	r7, #20
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr

0801279c <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b0be      	sub	sp, #248	; 0xf8
 80127a0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef       RCC_ClkInitStruct   = {0};
 80127a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80127a6:	2200      	movs	r2, #0
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	605a      	str	r2, [r3, #4]
 80127ac:	609a      	str	r2, [r3, #8]
 80127ae:	60da      	str	r2, [r3, #12]
 80127b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef       RCC_OscInitStruct   = {0};
 80127b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80127b6:	2244      	movs	r2, #68	; 0x44
 80127b8:	2100      	movs	r1, #0
 80127ba:	4618      	mov	r0, r3
 80127bc:	f005 fc69 	bl	8018092 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80127c0:	1d3b      	adds	r3, r7, #4
 80127c2:	229c      	movs	r2, #156	; 0x9c
 80127c4:	2100      	movs	r1, #0
 80127c6:	4618      	mov	r0, r3
 80127c8:	f005 fc63 	bl	8018092 <memset>

  __HAL_RCC_PWR_CLK_ENABLE();
 80127cc:	4b3a      	ldr	r3, [pc, #232]	; (80128b8 <SystemClock_Config+0x11c>)
 80127ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127d0:	4a39      	ldr	r2, [pc, #228]	; (80128b8 <SystemClock_Config+0x11c>)
 80127d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127d6:	6593      	str	r3, [r2, #88]	; 0x58
 80127d8:	4b37      	ldr	r3, [pc, #220]	; (80128b8 <SystemClock_Config+0x11c>)
 80127da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80127e0:	603b      	str	r3, [r7, #0]
 80127e2:	683b      	ldr	r3, [r7, #0]
  HAL_PWR_EnableBkUpAccess();
 80127e4:	f7fb f994 	bl	800db10 <HAL_PWR_EnableBkUpAccess>

  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80127e8:	2304      	movs	r3, #4
 80127ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
 80127ee:	2301      	movs	r3, #1
 80127f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80127f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7fb f9e9 	bl	800dbd0 <HAL_RCC_OscConfig>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d001      	beq.n	8012808 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8012804:	f001 fbbb 	bl	8013f7e <Error_Handler>
  }

  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8012808:	f7fc fc1a 	bl	800f040 <HAL_RCCEx_DisableLSECSS>

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 801280c:	2310      	movs	r3, #16
 801280e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8012812:	2301      	movs	r3, #1
 8012814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8012818:	2300      	movs	r3, #0
 801281a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 801281e:	23b0      	movs	r3, #176	; 0xb0
 8012820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8012824:	2302      	movs	r3, #2
 8012826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 801282a:	2301      	movs	r3, #1
 801282c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 8012830:	2306      	movs	r3, #6
 8012832:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8012836:	2328      	movs	r3, #40	; 0x28
 8012838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 801283c:	2307      	movs	r3, #7
 801283e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8012842:	2304      	movs	r3, #4
 8012844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8012848:	2304      	movs	r3, #4
 801284a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801284e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012852:	4618      	mov	r0, r3
 8012854:	f7fb f9bc 	bl	800dbd0 <HAL_RCC_OscConfig>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d001      	beq.n	8012862 <SystemClock_Config+0xc6>
  {
    /* Initialization Error */
    Error_Handler();
 801285e:	f001 fb8e 	bl	8013f7e <Error_Handler>
  }

  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8012862:	f7fc fc05 	bl	800f070 <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801286a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.UsbClockSelection    = RCC_USBCLKSOURCE_MSI;
 801286c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8012870:	67bb      	str	r3, [r7, #120]	; 0x78
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8012872:	1d3b      	adds	r3, r7, #4
 8012874:	4618      	mov	r0, r3
 8012876:	f7fc f853 	bl	800e920 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 801287a:	230f      	movs	r3, #15
 801287c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8012880:	2303      	movs	r3, #3
 8012882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8012886:	2300      	movs	r3, #0
 8012888:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801288c:	2300      	movs	r3, #0
 801288e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012892:	2300      	movs	r3, #0
 8012894:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8012898:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801289c:	2104      	movs	r1, #4
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fb fdbc 	bl	800e41c <HAL_RCC_ClockConfig>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <SystemClock_Config+0x112>
  {
    /* Initialization Error */
    Error_Handler();
 80128aa:	f001 fb68 	bl	8013f7e <Error_Handler>
  }
}
 80128ae:	bf00      	nop
 80128b0:	37f8      	adds	r7, #248	; 0xf8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	40021000 	.word	0x40021000

080128bc <BUILD_REPLY_HEADER>:
  * @brief  Build the reply header
  * @param  Msg the pointer to the message to be built
  * @retval None
  */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	795a      	ldrb	r2, [r3, #5]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2232      	movs	r2, #50	; 0x32
 80128d0:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	799b      	ldrb	r3, [r3, #6]
 80128d6:	3b80      	subs	r3, #128	; 0x80
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	719a      	strb	r2, [r3, #6]
}
 80128de:	bf00      	nop
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr
	...

080128ec <INIT_STREAMING_HEADER>:
  * @brief  Initialize the streaming header
  * @param  Msg the pointer to the header to be initialized
  * @retval None
  */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 80128ec:	b480      	push	{r7}
 80128ee:	b083      	sub	sp, #12
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 80128f4:	4b09      	ldr	r3, [pc, #36]	; (801291c <INIT_STREAMING_HEADER+0x30>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2232      	movs	r2, #50	; 0x32
 8012902:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2208      	movs	r2, #8
 8012908:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2203      	movs	r2, #3
 801290e:	601a      	str	r2, [r3, #0]
}
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr
 801291c:	200001f3 	.word	0x200001f3

08012920 <HandleMSG>:
  * @retval 1 if the message is correctly handled, 0 otherwise
  */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | SUBCMD | PAYLOAD
        1          1        1       1        N    */
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  uint32_t i;
  int ret = 1;
 8012928:	2301      	movs	r3, #1
 801292a:	60bb      	str	r3, [r7, #8]

  if (Msg->Len < 2U)
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d801      	bhi.n	8012938 <HandleMSG+0x18>
  {
    return 0;
 8012934:	2300      	movs	r3, #0
 8012936:	e0e4      	b.n	8012b02 <HandleMSG+0x1e2>
  }
  
  if (Msg->Data[0] != DEV_ADDR) 
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	791b      	ldrb	r3, [r3, #4]
 801293c:	2b32      	cmp	r3, #50	; 0x32
 801293e:	d001      	beq.n	8012944 <HandleMSG+0x24>
  {
    return 0;
 8012940:	2300      	movs	r3, #0
 8012942:	e0de      	b.n	8012b02 <HandleMSG+0x1e2>
  }
  
  switch (Msg->Data[2])   /* CMD */
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	799b      	ldrb	r3, [r3, #6]
 8012948:	2b0e      	cmp	r3, #14
 801294a:	dc25      	bgt.n	8012998 <HandleMSG+0x78>
 801294c:	2b00      	cmp	r3, #0
 801294e:	f340 80d4 	ble.w	8012afa <HandleMSG+0x1da>
 8012952:	3b01      	subs	r3, #1
 8012954:	2b0d      	cmp	r3, #13
 8012956:	f200 80d0 	bhi.w	8012afa <HandleMSG+0x1da>
 801295a:	a201      	add	r2, pc, #4	; (adr r2, 8012960 <HandleMSG+0x40>)
 801295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012960:	0801299f 	.word	0x0801299f
 8012964:	080129d9 	.word	0x080129d9
 8012968:	08012afb 	.word	0x08012afb
 801296c:	08012a21 	.word	0x08012a21
 8012970:	08012afb 	.word	0x08012afb
 8012974:	08012afb 	.word	0x08012afb
 8012978:	08012afb 	.word	0x08012afb
 801297c:	08012a63 	.word	0x08012a63
 8012980:	08012aa3 	.word	0x08012aa3
 8012984:	08012afb 	.word	0x08012afb
 8012988:	08012afb 	.word	0x08012afb
 801298c:	08012ac9 	.word	0x08012ac9
 8012990:	08012afb 	.word	0x08012afb
 8012994:	080129bf 	.word	0x080129bf
 8012998:	2b50      	cmp	r3, #80	; 0x50
 801299a:	d058      	beq.n	8012a4e <HandleMSG+0x12e>
 801299c:	e0ad      	b.n	8012afa <HandleMSG+0x1da>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b03      	cmp	r3, #3
 80129a4:	d001      	beq.n	80129aa <HandleMSG+0x8a>
      {
        return 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	e0ab      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      BUILD_REPLY_HEADER(Msg);
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7ff ff86 	bl	80128bc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2203      	movs	r2, #3
 80129b4:	601a      	str	r2, [r3, #0]
      VCOM_send_MSG(Msg);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f003 fc80 	bl	80162bc <VCOM_send_MSG>
      break;
 80129bc:	e0a0      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2b03      	cmp	r3, #3
 80129c4:	d001      	beq.n	80129ca <HandleMSG+0xaa>
      {
        return 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e09b      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      BUILD_REPLY_HEADER(Msg);
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f7ff ff76 	bl	80128bc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2203      	movs	r2, #3
 80129d4:	601a      	str	r2, [r3, #0]
      break;
 80129d6:	e093      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b03      	cmp	r3, #3
 80129de:	d001      	beq.n	80129e4 <HandleMSG+0xc4>
      {
        return 0;
 80129e0:	2300      	movs	r3, #0
 80129e2:	e08e      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      BUILD_REPLY_HEADER(Msg);
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f7ff ff69 	bl	80128bc <BUILD_REPLY_HEADER>
      i = 0;
 80129ea:	2300      	movs	r3, #0
 80129ec:	60fb      	str	r3, [r7, #12]
      while (i < (sizeof(PresentationString) - 1U))
 80129ee:	e00c      	b.n	8012a0a <HandleMSG+0xea>
      {
        Msg->Data[3U + i] = PresentationString[i];
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	3303      	adds	r3, #3
 80129f4:	4945      	ldr	r1, [pc, #276]	; (8012b0c <HandleMSG+0x1ec>)
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	440a      	add	r2, r1
 80129fa:	7811      	ldrb	r1, [r2, #0]
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	4413      	add	r3, r2
 8012a00:	460a      	mov	r2, r1
 8012a02:	711a      	strb	r2, [r3, #4]
        i++;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	3301      	adds	r3, #1
 8012a08:	60fb      	str	r3, [r7, #12]
      while (i < (sizeof(PresentationString) - 1U))
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b29      	cmp	r3, #41	; 0x29
 8012a0e:	d9ef      	bls.n	80129f0 <HandleMSG+0xd0>
      }
      Msg->Len = 3U + i;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	1cda      	adds	r2, r3, #3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	601a      	str	r2, [r3, #0]
      VCOM_send_MSG(Msg);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f003 fc4f 	bl	80162bc <VCOM_send_MSG>
      break;
 8012a1e:	e06f      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_CheckModeSupport:
      if (Msg->Len < 3U)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2b02      	cmp	r3, #2
 8012a26:	d801      	bhi.n	8012a2c <HandleMSG+0x10c>
      {
        return 0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e06a      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      BUILD_REPLY_HEADER(Msg);
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7ff ff45 	bl	80128bc <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], DATALOG_EXT_MODE, 4);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	3307      	adds	r3, #7
 8012a36:	2204      	movs	r2, #4
 8012a38:	2165      	movs	r1, #101	; 0x65
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f002 fd74 	bl	8015528 <Serialize_s32>
      Msg->Len = 3 + 4;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2207      	movs	r2, #7
 8012a44:	601a      	str	r2, [r3, #0]
      VCOM_send_MSG(Msg);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f003 fc38 	bl	80162bc <VCOM_send_MSG>
      break;
 8012a4c:	e058      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_Sensor:
      /* Check if the command lenght is at least 5 bytes */
      if (Msg->Len < 5U)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b04      	cmp	r3, #4
 8012a54:	d801      	bhi.n	8012a5a <HandleMSG+0x13a>
      {
        return 0;
 8012a56:	2300      	movs	r3, #0
 8012a58:	e053      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      Handle_Sensor_command(Msg);
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f001 fafa 	bl	8014054 <Handle_Sensor_command>
      break;
 8012a60:	e04e      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b02      	cmp	r3, #2
 8012a68:	d801      	bhi.n	8012a6e <HandleMSG+0x14e>
      {
        return 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	e049      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	3307      	adds	r3, #7
 8012a72:	2104      	movs	r1, #4
 8012a74:	4618      	mov	r0, r3
 8012a76:	f002 fd31 	bl	80154dc <Deserialize>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	4a24      	ldr	r2, [pc, #144]	; (8012b10 <HandleMSG+0x1f0>)
 8012a7e:	6013      	str	r3, [r2, #0]
      DataLoggerActive = 1;
 8012a80:	4b24      	ldr	r3, [pc, #144]	; (8012b14 <HandleMSG+0x1f4>)
 8012a82:	2201      	movs	r2, #1
 8012a84:	701a      	strb	r2, [r3, #0]
      DataStreamingDest = Msg->Data[1];
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	795a      	ldrb	r2, [r3, #5]
 8012a8a:	4b23      	ldr	r3, [pc, #140]	; (8012b18 <HandleMSG+0x1f8>)
 8012a8c:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f7ff ff14 	bl	80128bc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2203      	movs	r2, #3
 8012a98:	601a      	str	r2, [r3, #0]
      VCOM_send_MSG(Msg);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f003 fc0e 	bl	80162bc <VCOM_send_MSG>
      break;
 8012aa0:	e02e      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	d801      	bhi.n	8012aae <HandleMSG+0x18e>
      {
        return 0;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	e029      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      SensorsEnabled = 0;
 8012aae:	4b18      	ldr	r3, [pc, #96]	; (8012b10 <HandleMSG+0x1f0>)
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	601a      	str	r2, [r3, #0]
      DataLoggerActive = 0;
 8012ab4:	4b17      	ldr	r3, [pc, #92]	; (8012b14 <HandleMSG+0x1f4>)
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff fefe 	bl	80128bc <BUILD_REPLY_HEADER>
      VCOM_send_MSG(Msg);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f003 fbfb 	bl	80162bc <VCOM_send_MSG>
      break;
 8012ac6:	e01b      	b.n	8012b00 <HandleMSG+0x1e0>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	d801      	bhi.n	8012ad4 <HandleMSG+0x1b4>
      {
        return 0;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	e016      	b.n	8012b02 <HandleMSG+0x1e2>
      }
      BUILD_REPLY_HEADER(Msg);
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff fef1 	bl	80128bc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2203      	movs	r2, #3
 8012ade:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	79d8      	ldrb	r0, [r3, #7]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	7a19      	ldrb	r1, [r3, #8]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	7a5b      	ldrb	r3, [r3, #9]
 8012aec:	461a      	mov	r2, r3
 8012aee:	f001 f9bd 	bl	8013e6c <RTC_TimeRegulate>
      VCOM_send_MSG(Msg);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f003 fbe2 	bl	80162bc <VCOM_send_MSG>
      break;
 8012af8:	e002      	b.n	8012b00 <HandleMSG+0x1e0>

    default:
      ret = 0;
 8012afa:	2300      	movs	r3, #0
 8012afc:	60bb      	str	r3, [r7, #8]
      break;
 8012afe:	bf00      	nop
  }
  
  return ret;
 8012b00:	68bb      	ldr	r3, [r7, #8]
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3710      	adds	r7, #16
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	200001c8 	.word	0x200001c8
 8012b10:	20000a74 	.word	0x20000a74
 8012b14:	20000a68 	.word	0x20000a68
 8012b18:	200001f3 	.word	0x200001f3

08012b1c <main>:
  *
  * @param  None
  * @retval None
  */
int main(void)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8012b22:	af00      	add	r7, sp, #0
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
   */
  HAL_Init();
 8012b24:	f7f8 fc70 	bl	800b408 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8012b28:	f7ff fe38 	bl	801279c <SystemClock_Config>

  /* Initialize LEDs */
  BSP_LED_Init(LED_BLUE);
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f7f5 fe79 	bl	8008824 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8012b32:	2001      	movs	r0, #1
 8012b34:	f7f5 fe76 	bl	8008824 <BSP_LED_Init>

  MCR_HEART_BIT();
 8012b38:	2000      	movs	r0, #0
 8012b3a:	f7f5 fed9 	bl	80088f0 <BSP_LED_On>
 8012b3e:	2001      	movs	r0, #1
 8012b40:	f7f5 fed6 	bl	80088f0 <BSP_LED_On>
 8012b44:	20c8      	movs	r0, #200	; 0xc8
 8012b46:	f7f8 fcdb 	bl	800b500 <HAL_Delay>
 8012b4a:	2000      	movs	r0, #0
 8012b4c:	f7f5 fefc 	bl	8008948 <BSP_LED_Off>
 8012b50:	2001      	movs	r0, #1
 8012b52:	f7f5 fef9 	bl	8008948 <BSP_LED_Off>
 8012b56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012b5a:	f7f8 fcd1 	bl	800b500 <HAL_Delay>
 8012b5e:	2000      	movs	r0, #0
 8012b60:	f7f5 fec6 	bl	80088f0 <BSP_LED_On>
 8012b64:	2001      	movs	r0, #1
 8012b66:	f7f5 fec3 	bl	80088f0 <BSP_LED_On>
 8012b6a:	20c8      	movs	r0, #200	; 0xc8
 8012b6c:	f7f8 fcc8 	bl	800b500 <HAL_Delay>
 8012b70:	2000      	movs	r0, #0
 8012b72:	f7f5 fee9 	bl	8008948 <BSP_LED_Off>
 8012b76:	2001      	movs	r0, #1
 8012b78:	f7f5 fee6 	bl	8008948 <BSP_LED_Off>
 8012b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012b80:	f7f8 fcbe 	bl	800b500 <HAL_Delay>

  BSP_LED_On(LED_GREEN);
 8012b84:	2001      	movs	r0, #1
 8012b86:	f7f5 feb3 	bl	80088f0 <BSP_LED_On>

  /* Initialize GPIO */
  GPIO_Init();
 8012b8a:	f000 f923 	bl	8012dd4 <GPIO_Init>
  
  /* Initialize button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8012b8e:	2101      	movs	r1, #1
 8012b90:	2000      	movs	r0, #0
 8012b92:	f7f5 ff1f 	bl	80089d4 <BSP_PB_Init>

  /* Initialize VCOM (Virtual COM Port) */
  VCOM_init();
 8012b96:	f003 fa91 	bl	80160bc <VCOM_init>

  /* Initialize RTC */
  RTC_Config();
 8012b9a:	f001 f90d 	bl	8013db8 <RTC_Config>
  RTC_TimeStampConfig();
 8012b9e:	f001 f931 	bl	8013e04 <RTC_TimeStampConfig>
  
  /* Initialize cycle counter */
  DWT_Delay_Init();
 8012ba2:	f001 f9ef 	bl	8013f84 <DWT_Delay_Init>

  /* Initialize sensors */
  Initialize_All_Sensors();
 8012ba6:	f000 f9a9 	bl	8012efc <Initialize_All_Sensors>

  for (;;)
  {
    /* Process incomming messages */
    if (VCOM_receive_MSG(&msg_cmd, TMsg_MaxLen) == OK)
 8012baa:	463b      	mov	r3, r7
 8012bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f003 faa3 	bl	80160fc <VCOM_receive_MSG>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d112      	bne.n	8012be2 <main+0xc6>
    {
      if (msg_cmd.Data[0] == DEV_ADDR)
 8012bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012bc0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012bc4:	791b      	ldrb	r3, [r3, #4]
 8012bc6:	2b32      	cmp	r3, #50	; 0x32
 8012bc8:	d10b      	bne.n	8012be2 <main+0xc6>
      {
        HandleMSG((TMsg *)&msg_cmd);
 8012bca:	463b      	mov	r3, r7
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ff fea7 	bl	8012920 <HandleMSG>
        if (DataLoggerActive)
 8012bd2:	4b73      	ldr	r3, [pc, #460]	; (8012da0 <main+0x284>)
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d002      	beq.n	8012be2 <main+0xc6>
        {
          TerminalActive = 0;
 8012bdc:	4b71      	ldr	r3, [pc, #452]	; (8012da4 <main+0x288>)
 8012bde:	2200      	movs	r2, #0
 8012be0:	701a      	strb	r2, [r3, #0]
        }
      }
    }

    /* Enable/Disable sensors */
    if (Previous_Sensors_Enabled != SensorsEnabled)
 8012be2:	4b71      	ldr	r3, [pc, #452]	; (8012da8 <main+0x28c>)
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	4b71      	ldr	r3, [pc, #452]	; (8012dac <main+0x290>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d005      	beq.n	8012bfa <main+0xde>
    {
      Previous_Sensors_Enabled = SensorsEnabled;
 8012bee:	4b6f      	ldr	r3, [pc, #444]	; (8012dac <main+0x290>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a6d      	ldr	r2, [pc, #436]	; (8012da8 <main+0x28c>)
 8012bf4:	6013      	str	r3, [r2, #0]
      Enable_Disable_Sensors();
 8012bf6:	f000 f9b5 	bl	8012f64 <Enable_Disable_Sensors>
    }
    
    /* For terminal output enable all sensors */
    if (TerminalActive == 1U)
 8012bfa:	4b6a      	ldr	r3, [pc, #424]	; (8012da4 <main+0x288>)
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d103      	bne.n	8012c0c <main+0xf0>
    {
      SensorsEnabled = 0xFFFFFFFF;
 8012c04:	4b69      	ldr	r3, [pc, #420]	; (8012dac <main+0x290>)
 8012c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* LED control */
    if ((DataLoggerActive != 0U) || (TerminalActive != 0))
 8012c0c:	4b64      	ldr	r3, [pc, #400]	; (8012da0 <main+0x284>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d104      	bne.n	8012c20 <main+0x104>
 8012c16:	4b63      	ldr	r3, [pc, #396]	; (8012da4 <main+0x288>)
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d003      	beq.n	8012c28 <main+0x10c>
    {
      BSP_LED_Toggle(LED_BLUE);
 8012c20:	2000      	movs	r0, #0
 8012c22:	f7f5 febd 	bl	80089a0 <BSP_LED_Toggle>
 8012c26:	e002      	b.n	8012c2e <main+0x112>
    }
    else
    {
      BSP_LED_Off(LED_BLUE);
 8012c28:	2000      	movs	r0, #0
 8012c2a:	f7f5 fe8d 	bl	8008948 <BSP_LED_Off>
    }

    /* Read data from enable sensors and prepare data stream */
    if ((DataLoggerActive != 0U) || (TerminalActive != 0))
 8012c2e:	4b5c      	ldr	r3, [pc, #368]	; (8012da0 <main+0x284>)
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d104      	bne.n	8012c42 <main+0x126>
 8012c38:	4b5a      	ldr	r3, [pc, #360]	; (8012da4 <main+0x288>)
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d079      	beq.n	8012d36 <main+0x21a>
    {  
      Time_Handler(&msg_dat);
 8012c42:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012c46:	4618      	mov	r0, r3
 8012c48:	f000 fa76 	bl	8013138 <Time_Handler>
      
      if ((SensorsEnabled & PRESSURE_SENSOR_ENABLED) == PRESSURE_SENSOR_ENABLED)
 8012c4c:	4b57      	ldr	r3, [pc, #348]	; (8012dac <main+0x290>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f003 0301 	and.w	r3, r3, #1
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d007      	beq.n	8012c68 <main+0x14c>
      {
        Press_Sensor_Handler(&msg_dat, PrsInstance);
 8012c58:	4b55      	ldr	r3, [pc, #340]	; (8012db0 <main+0x294>)
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012c60:	4611      	mov	r1, r2
 8012c62:	4618      	mov	r0, r3
 8012c64:	f000 fab0 	bl	80131c8 <Press_Sensor_Handler>
      }
      
      if ((SensorsEnabled & TEMPERATURE_SENSOR_ENABLED) == TEMPERATURE_SENSOR_ENABLED)
 8012c68:	4b50      	ldr	r3, [pc, #320]	; (8012dac <main+0x290>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f003 0302 	and.w	r3, r3, #2
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d007      	beq.n	8012c84 <main+0x168>
      {
        Temp_Sensor_Handler(&msg_dat, TmpInstance);
 8012c74:	4b4f      	ldr	r3, [pc, #316]	; (8012db4 <main+0x298>)
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f000 fb14 	bl	80132ac <Temp_Sensor_Handler>
      }
      
      if ((SensorsEnabled & HUMIDITY_SENSOR_ENABLED) == HUMIDITY_SENSOR_ENABLED)
 8012c84:	4b49      	ldr	r3, [pc, #292]	; (8012dac <main+0x290>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f003 0304 	and.w	r3, r3, #4
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d007      	beq.n	8012ca0 <main+0x184>
      {
        Hum_Sensor_Handler(&msg_dat, HumInstance);
 8012c90:	4b49      	ldr	r3, [pc, #292]	; (8012db8 <main+0x29c>)
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012c98:	4611      	mov	r1, r2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f000 fbaa 	bl	80133f4 <Hum_Sensor_Handler>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR_ENABLED) == ACCELEROMETER_SENSOR_ENABLED)
 8012ca0:	4b42      	ldr	r3, [pc, #264]	; (8012dac <main+0x290>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f003 0310 	and.w	r3, r3, #16
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d007      	beq.n	8012cbc <main+0x1a0>
      {
        Accelero_Sensor_Handler(&msg_dat, AccInstance);
 8012cac:	4b43      	ldr	r3, [pc, #268]	; (8012dbc <main+0x2a0>)
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 fc0e 	bl	80134d8 <Accelero_Sensor_Handler>
      }
      
      if ((SensorsEnabled & GYROSCOPE_SENSOR_ENABLED) == GYROSCOPE_SENSOR_ENABLED)
 8012cbc:	4b3b      	ldr	r3, [pc, #236]	; (8012dac <main+0x290>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f003 0320 	and.w	r3, r3, #32
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d007      	beq.n	8012cd8 <main+0x1bc>
      {
        Gyro_Sensor_Handler(&msg_dat, GyrInstance);
 8012cc8:	4b3d      	ldr	r3, [pc, #244]	; (8012dc0 <main+0x2a4>)
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 fc88 	bl	80135e8 <Gyro_Sensor_Handler>
      }
      
      if ((SensorsEnabled & MAGNETIC_SENSOR_ENABLED) == MAGNETIC_SENSOR_ENABLED)
 8012cd8:	4b34      	ldr	r3, [pc, #208]	; (8012dac <main+0x290>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d007      	beq.n	8012cf4 <main+0x1d8>
      {
        Magneto_Sensor_Handler(&msg_dat, MagInstance);
 8012ce4:	4b37      	ldr	r3, [pc, #220]	; (8012dc4 <main+0x2a8>)
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012cec:	4611      	mov	r1, r2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f000 fd02 	bl	80136f8 <Magneto_Sensor_Handler>
      }
      
      if ((SensorsEnabled & INTERRUPTS_ENABLED) == INTERRUPTS_ENABLED)
 8012cf4:	4b2d      	ldr	r3, [pc, #180]	; (8012dac <main+0x290>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d004      	beq.n	8012d0a <main+0x1ee>
      {
        Sensors_Interrupt_Handler(&msg_dat);
 8012d00:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012d04:	4618      	mov	r0, r3
 8012d06:	f000 fd7f 	bl	8013808 <Sensors_Interrupt_Handler>
      }

      if ((SensorsEnabled & MLC_ENABLED) == MLC_ENABLED)
 8012d0a:	4b28      	ldr	r3, [pc, #160]	; (8012dac <main+0x290>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d004      	beq.n	8012d20 <main+0x204>
      {
        MLC_Handler(&msg_dat);
 8012d16:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f000 fe82 	bl	8013a24 <MLC_Handler>
      }

      if ((SensorsEnabled & FSM_ENABLED) == FSM_ENABLED)
 8012d20:	4b22      	ldr	r3, [pc, #136]	; (8012dac <main+0x290>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d004      	beq.n	8012d36 <main+0x21a>
      {
        FSM_Handler(&msg_dat);
 8012d2c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012d30:	4618      	mov	r0, r3
 8012d32:	f000 ff33 	bl	8013b9c <FSM_Handler>
      }
    }

    /* Send data stream in a new data are available */
    if (DataLoggerActive != 0U)
 8012d36:	4b1a      	ldr	r3, [pc, #104]	; (8012da0 <main+0x284>)
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d023      	beq.n	8012d88 <main+0x26c>
    {
      if (NewData != 0)
 8012d40:	4b21      	ldr	r3, [pc, #132]	; (8012dc8 <main+0x2ac>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d01f      	beq.n	8012d88 <main+0x26c>
      {
        INIT_STREAMING_HEADER(&msg_dat);
 8012d48:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7ff fdcd 	bl	80128ec <INIT_STREAMING_HEADER>
 8012d52:	4b1e      	ldr	r3, [pc, #120]	; (8012dcc <main+0x2b0>)
 8012d54:	881a      	ldrh	r2, [r3, #0]
        (void)memcpy(&msg_dat.Data[7], (void *)&NewDataFlags, 2);
 8012d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d5e:	f8a3 200b 	strh.w	r2, [r3, #11]
        msg_dat.Len = MsgIndex;
 8012d62:	4b1b      	ldr	r3, [pc, #108]	; (8012dd0 <main+0x2b4>)
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	461a      	mov	r2, r3
 8012d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d70:	601a      	str	r2, [r3, #0]
        VCOM_send_MSG(&msg_dat);
 8012d72:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012d76:	4618      	mov	r0, r3
 8012d78:	f003 faa0 	bl	80162bc <VCOM_send_MSG>
        NewData = 0;
 8012d7c:	4b12      	ldr	r3, [pc, #72]	; (8012dc8 <main+0x2ac>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	701a      	strb	r2, [r3, #0]
        NewDataFlags = 0;
 8012d82:	4b12      	ldr	r3, [pc, #72]	; (8012dcc <main+0x2b0>)
 8012d84:	2200      	movs	r2, #0
 8012d86:	801a      	strh	r2, [r3, #0]
      }
    }
    
    /* For terminal output reduce speed */
    if (TerminalActive)
 8012d88:	4b06      	ldr	r3, [pc, #24]	; (8012da4 <main+0x288>)
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f43f af0b 	beq.w	8012baa <main+0x8e>
    {
      HAL_Delay(500);
 8012d94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012d98:	f7f8 fbb2 	bl	800b500 <HAL_Delay>
    if (VCOM_receive_MSG(&msg_cmd, TMsg_MaxLen) == OK)
 8012d9c:	e705      	b.n	8012baa <main+0x8e>
 8012d9e:	bf00      	nop
 8012da0:	20000a68 	.word	0x20000a68
 8012da4:	20000ba0 	.word	0x20000ba0
 8012da8:	20000bac 	.word	0x20000bac
 8012dac:	20000a74 	.word	0x20000a74
 8012db0:	20000200 	.word	0x20000200
 8012db4:	20000be4 	.word	0x20000be4
 8012db8:	20000be0 	.word	0x20000be0
 8012dbc:	200001f4 	.word	0x200001f4
 8012dc0:	200001f8 	.word	0x200001f8
 8012dc4:	200001fc 	.word	0x200001fc
 8012dc8:	20000bb0 	.word	0x20000bb0
 8012dcc:	20000bb2 	.word	0x20000bb2
 8012dd0:	20000bb4 	.word	0x20000bb4

08012dd4 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void GPIO_Init(void)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08a      	sub	sp, #40	; 0x28
 8012dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012dda:	f107 0314 	add.w	r3, r7, #20
 8012dde:	2200      	movs	r2, #0
 8012de0:	601a      	str	r2, [r3, #0]
 8012de2:	605a      	str	r2, [r3, #4]
 8012de4:	609a      	str	r2, [r3, #8]
 8012de6:	60da      	str	r2, [r3, #12]
 8012de8:	611a      	str	r2, [r3, #16]
  // LIS2MDL INT                        PD12
  // HTS221                             PD13
  // STTS751                            PG5
  
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012dea:	4b3f      	ldr	r3, [pc, #252]	; (8012ee8 <GPIO_Init+0x114>)
 8012dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dee:	4a3e      	ldr	r2, [pc, #248]	; (8012ee8 <GPIO_Init+0x114>)
 8012df0:	f043 0301 	orr.w	r3, r3, #1
 8012df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012df6:	4b3c      	ldr	r3, [pc, #240]	; (8012ee8 <GPIO_Init+0x114>)
 8012df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dfa:	f003 0301 	and.w	r3, r3, #1
 8012dfe:	613b      	str	r3, [r7, #16]
 8012e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012e02:	4b39      	ldr	r3, [pc, #228]	; (8012ee8 <GPIO_Init+0x114>)
 8012e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e06:	4a38      	ldr	r2, [pc, #224]	; (8012ee8 <GPIO_Init+0x114>)
 8012e08:	f043 0304 	orr.w	r3, r3, #4
 8012e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e0e:	4b36      	ldr	r3, [pc, #216]	; (8012ee8 <GPIO_Init+0x114>)
 8012e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e12:	f003 0304 	and.w	r3, r3, #4
 8012e16:	60fb      	str	r3, [r7, #12]
 8012e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012e1a:	4b33      	ldr	r3, [pc, #204]	; (8012ee8 <GPIO_Init+0x114>)
 8012e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e1e:	4a32      	ldr	r2, [pc, #200]	; (8012ee8 <GPIO_Init+0x114>)
 8012e20:	f043 0308 	orr.w	r3, r3, #8
 8012e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e26:	4b30      	ldr	r3, [pc, #192]	; (8012ee8 <GPIO_Init+0x114>)
 8012e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e2a:	f003 0308 	and.w	r3, r3, #8
 8012e2e:	60bb      	str	r3, [r7, #8]
 8012e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012e32:	4b2d      	ldr	r3, [pc, #180]	; (8012ee8 <GPIO_Init+0x114>)
 8012e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e36:	4a2c      	ldr	r2, [pc, #176]	; (8012ee8 <GPIO_Init+0x114>)
 8012e38:	f043 0310 	orr.w	r3, r3, #16
 8012e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e3e:	4b2a      	ldr	r3, [pc, #168]	; (8012ee8 <GPIO_Init+0x114>)
 8012e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e42:	f003 0310 	and.w	r3, r3, #16
 8012e46:	607b      	str	r3, [r7, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012e4a:	4b27      	ldr	r3, [pc, #156]	; (8012ee8 <GPIO_Init+0x114>)
 8012e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e4e:	4a26      	ldr	r2, [pc, #152]	; (8012ee8 <GPIO_Init+0x114>)
 8012e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e56:	4b24      	ldr	r3, [pc, #144]	; (8012ee8 <GPIO_Init+0x114>)
 8012e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e5e:	603b      	str	r3, [r7, #0]
 8012e60:	683b      	ldr	r3, [r7, #0]

  /* Configure GPIO pins : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8012e62:	2304      	movs	r3, #4
 8012e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e66:	2300      	movs	r3, #0
 8012e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e6e:	f107 0314 	add.w	r3, r7, #20
 8012e72:	4619      	mov	r1, r3
 8012e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012e78:	f7f8 fc78 	bl	800b76c <HAL_GPIO_Init>
  
  /* Configure GPIO pins : PC5 PC13*/
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8012e7c:	f242 0320 	movw	r3, #8224	; 0x2020
 8012e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e82:	2300      	movs	r3, #0
 8012e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e86:	2300      	movs	r3, #0
 8012e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e8a:	f107 0314 	add.w	r3, r7, #20
 8012e8e:	4619      	mov	r1, r3
 8012e90:	4816      	ldr	r0, [pc, #88]	; (8012eec <GPIO_Init+0x118>)
 8012e92:	f7f8 fc6b 	bl	800b76c <HAL_GPIO_Init>
  
  /* Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8012e96:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8012e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012ea4:	f107 0314 	add.w	r3, r7, #20
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	4811      	ldr	r0, [pc, #68]	; (8012ef0 <GPIO_Init+0x11c>)
 8012eac:	f7f8 fc5e 	bl	800b76c <HAL_GPIO_Init>
  
  /* Configure GPIO pins : PE3 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8012eb0:	2348      	movs	r3, #72	; 0x48
 8012eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012ebc:	f107 0314 	add.w	r3, r7, #20
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	480c      	ldr	r0, [pc, #48]	; (8012ef4 <GPIO_Init+0x120>)
 8012ec4:	f7f8 fc52 	bl	800b76c <HAL_GPIO_Init>
  
  /* Configure GPIO pins : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8012ec8:	2320      	movs	r3, #32
 8012eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012ed4:	f107 0314 	add.w	r3, r7, #20
 8012ed8:	4619      	mov	r1, r3
 8012eda:	4807      	ldr	r0, [pc, #28]	; (8012ef8 <GPIO_Init+0x124>)
 8012edc:	f7f8 fc46 	bl	800b76c <HAL_GPIO_Init>
}
 8012ee0:	bf00      	nop
 8012ee2:	3728      	adds	r7, #40	; 0x28
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	40021000 	.word	0x40021000
 8012eec:	48000800 	.word	0x48000800
 8012ef0:	48000c00 	.word	0x48000c00
 8012ef4:	48001000 	.word	0x48001000
 8012ef8:	48001800 	.word	0x48001800

08012efc <Initialize_All_Sensors>:
  * @brief  Initialize all sensors
  * @param  None
  * @retval None
  */
static void Initialize_All_Sensors(void)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Init(AccInstance, MOTION_ACCELERO);
 8012f00:	4b12      	ldr	r3, [pc, #72]	; (8012f4c <Initialize_All_Sensors+0x50>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2102      	movs	r1, #2
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7f6 ffb6 	bl	8009e78 <BSP_MOTION_SENSOR_Init>
  (void)BSP_MOTION_SENSOR_Init(GyrInstance, MOTION_GYRO);
 8012f0c:	4b10      	ldr	r3, [pc, #64]	; (8012f50 <Initialize_All_Sensors+0x54>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2101      	movs	r1, #1
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7f6 ffb0 	bl	8009e78 <BSP_MOTION_SENSOR_Init>
  (void)BSP_MOTION_SENSOR_Init(MagInstance, MOTION_MAGNETO);
 8012f18:	4b0e      	ldr	r3, [pc, #56]	; (8012f54 <Initialize_All_Sensors+0x58>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2104      	movs	r1, #4
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7f6 ffaa 	bl	8009e78 <BSP_MOTION_SENSOR_Init>
  (void)BSP_ENV_SENSOR_Init(HumInstance, ENV_HUMIDITY);
 8012f24:	4b0c      	ldr	r3, [pc, #48]	; (8012f58 <Initialize_All_Sensors+0x5c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2104      	movs	r1, #4
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7f6 fa28 	bl	8009380 <BSP_ENV_SENSOR_Init>
  (void)BSP_ENV_SENSOR_Init(TmpInstance, ENV_TEMPERATURE);
 8012f30:	4b0a      	ldr	r3, [pc, #40]	; (8012f5c <Initialize_All_Sensors+0x60>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2101      	movs	r1, #1
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7f6 fa22 	bl	8009380 <BSP_ENV_SENSOR_Init>
  (void)BSP_ENV_SENSOR_Init(PrsInstance, ENV_PRESSURE);
 8012f3c:	4b08      	ldr	r3, [pc, #32]	; (8012f60 <Initialize_All_Sensors+0x64>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2102      	movs	r1, #2
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f6 fa1c 	bl	8009380 <BSP_ENV_SENSOR_Init>
}
 8012f48:	bf00      	nop
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	200001f4 	.word	0x200001f4
 8012f50:	200001f8 	.word	0x200001f8
 8012f54:	200001fc 	.word	0x200001fc
 8012f58:	20000be0 	.word	0x20000be0
 8012f5c:	20000be4 	.word	0x20000be4
 8012f60:	20000200 	.word	0x20000200

08012f64 <Enable_Disable_Sensors>:
 * @brief  Enable/disable desired sensors
 * @param  None
 * @retval None
 */
static void Enable_Disable_Sensors(void)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	af00      	add	r7, sp, #0
  if ((SensorsEnabled & ACCELEROMETER_SENSOR_ENABLED) == ACCELEROMETER_SENSOR_ENABLED)
 8012f68:	4b39      	ldr	r3, [pc, #228]	; (8013050 <Enable_Disable_Sensors+0xec>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f003 0310 	and.w	r3, r3, #16
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d006      	beq.n	8012f82 <Enable_Disable_Sensors+0x1e>
  {
    (void)BSP_MOTION_SENSOR_Enable(AccInstance, MOTION_ACCELERO);
 8012f74:	4b37      	ldr	r3, [pc, #220]	; (8013054 <Enable_Disable_Sensors+0xf0>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2102      	movs	r1, #2
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7f7 f8ae 	bl	800a0dc <BSP_MOTION_SENSOR_Enable>
 8012f80:	e005      	b.n	8012f8e <Enable_Disable_Sensors+0x2a>
  }
  else
  {
    (void)BSP_MOTION_SENSOR_Disable(AccInstance, MOTION_ACCELERO);
 8012f82:	4b34      	ldr	r3, [pc, #208]	; (8013054 <Enable_Disable_Sensors+0xf0>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2102      	movs	r1, #2
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f7 f8e9 	bl	800a160 <BSP_MOTION_SENSOR_Disable>
  }
  
  if ((SensorsEnabled & GYROSCOPE_SENSOR_ENABLED) == GYROSCOPE_SENSOR_ENABLED)
 8012f8e:	4b30      	ldr	r3, [pc, #192]	; (8013050 <Enable_Disable_Sensors+0xec>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	f003 0320 	and.w	r3, r3, #32
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d006      	beq.n	8012fa8 <Enable_Disable_Sensors+0x44>
  {
    (void)BSP_MOTION_SENSOR_Enable(GyrInstance, MOTION_GYRO);
 8012f9a:	4b2f      	ldr	r3, [pc, #188]	; (8013058 <Enable_Disable_Sensors+0xf4>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2101      	movs	r1, #1
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7f7 f89b 	bl	800a0dc <BSP_MOTION_SENSOR_Enable>
 8012fa6:	e005      	b.n	8012fb4 <Enable_Disable_Sensors+0x50>
  }
  else
  {
    (void)BSP_MOTION_SENSOR_Disable(GyrInstance, MOTION_GYRO);
 8012fa8:	4b2b      	ldr	r3, [pc, #172]	; (8013058 <Enable_Disable_Sensors+0xf4>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	2101      	movs	r1, #1
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7f7 f8d6 	bl	800a160 <BSP_MOTION_SENSOR_Disable>
  }
  
  if ((SensorsEnabled & MAGNETIC_SENSOR_ENABLED) == MAGNETIC_SENSOR_ENABLED)
 8012fb4:	4b26      	ldr	r3, [pc, #152]	; (8013050 <Enable_Disable_Sensors+0xec>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d006      	beq.n	8012fce <Enable_Disable_Sensors+0x6a>
  {
    (void)BSP_MOTION_SENSOR_Enable(MagInstance, MOTION_MAGNETO);
 8012fc0:	4b26      	ldr	r3, [pc, #152]	; (801305c <Enable_Disable_Sensors+0xf8>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2104      	movs	r1, #4
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7f7 f888 	bl	800a0dc <BSP_MOTION_SENSOR_Enable>
 8012fcc:	e005      	b.n	8012fda <Enable_Disable_Sensors+0x76>
  }
  else
  {
    (void)BSP_MOTION_SENSOR_Disable(MagInstance, MOTION_MAGNETO);
 8012fce:	4b23      	ldr	r3, [pc, #140]	; (801305c <Enable_Disable_Sensors+0xf8>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2104      	movs	r1, #4
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7f7 f8c3 	bl	800a160 <BSP_MOTION_SENSOR_Disable>
  }
  
  if ((SensorsEnabled & HUMIDITY_SENSOR_ENABLED) == HUMIDITY_SENSOR_ENABLED)
 8012fda:	4b1d      	ldr	r3, [pc, #116]	; (8013050 <Enable_Disable_Sensors+0xec>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f003 0304 	and.w	r3, r3, #4
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d006      	beq.n	8012ff4 <Enable_Disable_Sensors+0x90>
  {
    (void)BSP_ENV_SENSOR_Enable(HumInstance, ENV_HUMIDITY);
 8012fe6:	4b1e      	ldr	r3, [pc, #120]	; (8013060 <Enable_Disable_Sensors+0xfc>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2104      	movs	r1, #4
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7f6 fac3 	bl	8009578 <BSP_ENV_SENSOR_Enable>
 8012ff2:	e005      	b.n	8013000 <Enable_Disable_Sensors+0x9c>
  }
  else
  {
    (void)BSP_ENV_SENSOR_Disable(HumInstance, ENV_HUMIDITY);
 8012ff4:	4b1a      	ldr	r3, [pc, #104]	; (8013060 <Enable_Disable_Sensors+0xfc>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	2104      	movs	r1, #4
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7f6 fafe 	bl	80095fc <BSP_ENV_SENSOR_Disable>
  }
  
  if ((SensorsEnabled & TEMPERATURE_SENSOR_ENABLED) == TEMPERATURE_SENSOR_ENABLED)
 8013000:	4b13      	ldr	r3, [pc, #76]	; (8013050 <Enable_Disable_Sensors+0xec>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	f003 0302 	and.w	r3, r3, #2
 8013008:	2b00      	cmp	r3, #0
 801300a:	d006      	beq.n	801301a <Enable_Disable_Sensors+0xb6>
  {
    (void)BSP_ENV_SENSOR_Enable(TmpInstance, ENV_TEMPERATURE);
 801300c:	4b15      	ldr	r3, [pc, #84]	; (8013064 <Enable_Disable_Sensors+0x100>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2101      	movs	r1, #1
 8013012:	4618      	mov	r0, r3
 8013014:	f7f6 fab0 	bl	8009578 <BSP_ENV_SENSOR_Enable>
 8013018:	e005      	b.n	8013026 <Enable_Disable_Sensors+0xc2>
  }
  else
  {
    (void)BSP_ENV_SENSOR_Disable(TmpInstance, ENV_TEMPERATURE);
 801301a:	4b12      	ldr	r3, [pc, #72]	; (8013064 <Enable_Disable_Sensors+0x100>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	2101      	movs	r1, #1
 8013020:	4618      	mov	r0, r3
 8013022:	f7f6 faeb 	bl	80095fc <BSP_ENV_SENSOR_Disable>
  }
  
  if ((SensorsEnabled & PRESSURE_SENSOR_ENABLED) == PRESSURE_SENSOR_ENABLED)
 8013026:	4b0a      	ldr	r3, [pc, #40]	; (8013050 <Enable_Disable_Sensors+0xec>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	f003 0301 	and.w	r3, r3, #1
 801302e:	2b00      	cmp	r3, #0
 8013030:	d006      	beq.n	8013040 <Enable_Disable_Sensors+0xdc>
  {
    (void)BSP_ENV_SENSOR_Enable(PrsInstance, ENV_PRESSURE);
 8013032:	4b0d      	ldr	r3, [pc, #52]	; (8013068 <Enable_Disable_Sensors+0x104>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	2102      	movs	r1, #2
 8013038:	4618      	mov	r0, r3
 801303a:	f7f6 fa9d 	bl	8009578 <BSP_ENV_SENSOR_Enable>
  }
  else
  {
    (void)BSP_ENV_SENSOR_Disable(PrsInstance, ENV_PRESSURE);
  }
}
 801303e:	e005      	b.n	801304c <Enable_Disable_Sensors+0xe8>
    (void)BSP_ENV_SENSOR_Disable(PrsInstance, ENV_PRESSURE);
 8013040:	4b09      	ldr	r3, [pc, #36]	; (8013068 <Enable_Disable_Sensors+0x104>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2102      	movs	r1, #2
 8013046:	4618      	mov	r0, r3
 8013048:	f7f6 fad8 	bl	80095fc <BSP_ENV_SENSOR_Disable>
}
 801304c:	bf00      	nop
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20000a74 	.word	0x20000a74
 8013054:	200001f4 	.word	0x200001f4
 8013058:	200001f8 	.word	0x200001f8
 801305c:	200001fc 	.word	0x200001fc
 8013060:	20000be0 	.word	0x20000be0
 8013064:	20000be4 	.word	0x20000be4
 8013068:	20000200 	.word	0x20000200
 801306c:	00000000 	.word	0x00000000

08013070 <Float_To_Int>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void Float_To_Int(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8013070:	b5b0      	push	{r4, r5, r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	ed87 0a03 	vstr	s0, [r7, #12]
 801307a:	60b8      	str	r0, [r7, #8]
 801307c:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 801307e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308a:	db03      	blt.n	8013094 <Float_To_Int+0x24>
  {
    out_value->sign = 0;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	2200      	movs	r2, #0
 8013090:	701a      	strb	r2, [r3, #0]
 8013092:	e008      	b.n	80130a6 <Float_To_Int+0x36>
  }
  else
  {
    out_value->sign = 1;
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	2201      	movs	r2, #1
 8013098:	701a      	strb	r2, [r3, #0]
    in = -in;
 801309a:	edd7 7a03 	vldr	s15, [r7, #12]
 801309e:	eef1 7a67 	vneg.f32	s15, s15
 80130a2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  out_value->out_int = (int32_t)in;
 80130a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80130aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130ae:	ee17 2a90 	vmov	r2, s15
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	ee07 3a90 	vmov	s15, r3
 80130be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80130c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130ca:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f7ed fa52 	bl	8000578 <__aeabi_f2d>
 80130d4:	4604      	mov	r4, r0
 80130d6:	460d      	mov	r5, r1
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ed fa3b 	bl	8000554 <__aeabi_i2d>
 80130de:	4602      	mov	r2, r0
 80130e0:	460b      	mov	r3, r1
 80130e2:	ec43 2b11 	vmov	d1, r2, r3
 80130e6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8013130 <Float_To_Int+0xc0>
 80130ea:	f005 ff41 	bl	8018f70 <pow>
 80130ee:	ec53 2b10 	vmov	r2, r3, d0
 80130f2:	4620      	mov	r0, r4
 80130f4:	4629      	mov	r1, r5
 80130f6:	f7ed fa97 	bl	8000628 <__aeabi_dmul>
 80130fa:	4602      	mov	r2, r0
 80130fc:	460b      	mov	r3, r1
 80130fe:	ec43 2b17 	vmov	d7, r2, r3
 8013102:	eeb0 0a47 	vmov.f32	s0, s14
 8013106:	eef0 0a67 	vmov.f32	s1, s15
 801310a:	f005 ffad 	bl	8019068 <trunc>
 801310e:	ec53 2b10 	vmov	r2, r3, d0
 8013112:	4610      	mov	r0, r2
 8013114:	4619      	mov	r1, r3
 8013116:	f7ed fd37 	bl	8000b88 <__aeabi_d2iz>
 801311a:	4603      	mov	r3, r0
 801311c:	461a      	mov	r2, r3
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	609a      	str	r2, [r3, #8]
}
 8013122:	bf00      	nop
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bdb0      	pop	{r4, r5, r7, pc}
 801312a:	bf00      	nop
 801312c:	f3af 8000 	nop.w
 8013130:	00000000 	.word	0x00000000
 8013134:	40240000 	.word	0x40240000

08013138 <Time_Handler>:
 * @brief  Handles the precise time
 * @param  Msg the time part of the stream
 * @retval None
 */
static void Time_Handler(TMsg *Msg)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  uint32_t time_us;

  if (DataLoggerActive != 0U)
 8013140:	4b1b      	ldr	r3, [pc, #108]	; (80131b0 <Time_Handler+0x78>)
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	b2db      	uxtb	r3, r3
 8013146:	2b00      	cmp	r3, #0
 8013148:	d011      	beq.n	801316e <Time_Handler+0x36>
  {
    time_us = DWT_GetTickUS() - StartTime;
 801314a:	f000 ff49 	bl	8013fe0 <DWT_GetTickUS>
 801314e:	4602      	mov	r2, r0
 8013150:	4b18      	ldr	r3, [pc, #96]	; (80131b4 <Time_Handler+0x7c>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	1ad3      	subs	r3, r2, r3
 8013156:	60fb      	str	r3, [r7, #12]
    Serialize(&Msg->Data[3], time_us, 4);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3307      	adds	r3, #7
 801315c:	2204      	movs	r2, #4
 801315e:	68f9      	ldr	r1, [r7, #12]
 8013160:	4618      	mov	r0, r3
 8013162:	f002 f99b 	bl	801549c <Serialize>
    MsgIndex = 9;
 8013166:	4b14      	ldr	r3, [pc, #80]	; (80131b8 <Time_Handler+0x80>)
 8013168:	2209      	movs	r2, #9
 801316a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* Nothing to do */
  }
}
 801316c:	e01b      	b.n	80131a6 <Time_Handler+0x6e>
  else if (TerminalActive != 0U)
 801316e:	4b13      	ldr	r3, [pc, #76]	; (80131bc <Time_Handler+0x84>)
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	b2db      	uxtb	r3, r3
 8013174:	2b00      	cmp	r3, #0
 8013176:	d016      	beq.n	80131a6 <Time_Handler+0x6e>
    time_us = DWT_GetTickUS() - StartTime;
 8013178:	f000 ff32 	bl	8013fe0 <DWT_GetTickUS>
 801317c:	4602      	mov	r2, r0
 801317e:	4b0d      	ldr	r3, [pc, #52]	; (80131b4 <Time_Handler+0x7c>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	60fb      	str	r3, [r7, #12]
    (void)snprintf(DataOut, MAX_BUF_SIZE, "TimeStamp: %ld\r\n", time_us);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	4a0d      	ldr	r2, [pc, #52]	; (80131c0 <Time_Handler+0x88>)
 801318a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801318e:	480d      	ldr	r0, [pc, #52]	; (80131c4 <Time_Handler+0x8c>)
 8013190:	f004 ff08 	bl	8017fa4 <sniprintf>
    (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 8013194:	480b      	ldr	r0, [pc, #44]	; (80131c4 <Time_Handler+0x8c>)
 8013196:	f7ed f833 	bl	8000200 <strlen>
 801319a:	4603      	mov	r3, r0
 801319c:	b29b      	uxth	r3, r3
 801319e:	4619      	mov	r1, r3
 80131a0:	4808      	ldr	r0, [pc, #32]	; (80131c4 <Time_Handler+0x8c>)
 80131a2:	f003 f8ab 	bl	80162fc <VCOM_write>
}
 80131a6:	bf00      	nop
 80131a8:	3710      	adds	r7, #16
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	20000a68 	.word	0x20000a68
 80131b4:	20000a78 	.word	0x20000a78
 80131b8:	20000bb4 	.word	0x20000bb4
 80131bc:	20000ba0 	.word	0x20000ba0
 80131c0:	08019e84 	.word	0x08019e84
 80131c4:	20000a7c 	.word	0x20000a7c

080131c8 <Press_Sensor_Handler>:
 * @param  Msg the PRESSURE part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Press_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b08a      	sub	sp, #40	; 0x28
 80131cc:	af02      	add	r7, sp, #8
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
  float pressure;
  uint8_t status = 0;
 80131d2:	2300      	movs	r3, #0
 80131d4:	76fb      	strb	r3, [r7, #27]

  if (BSP_ENV_SENSOR_Get_DRDY_Status(Instance, ENV_PRESSURE, &status) == BSP_ERROR_NONE && status == 1U)
 80131d6:	f107 031b 	add.w	r3, r7, #27
 80131da:	461a      	mov	r2, r3
 80131dc:	2102      	movs	r1, #2
 80131de:	6838      	ldr	r0, [r7, #0]
 80131e0:	f7f6 fcfc 	bl	8009bdc <BSP_ENV_SENSOR_Get_DRDY_Status>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d14d      	bne.n	8013286 <Press_Sensor_Handler+0xbe>
 80131ea:	7efb      	ldrb	r3, [r7, #27]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d14a      	bne.n	8013286 <Press_Sensor_Handler+0xbe>
  {
    NewData++;
 80131f0:	4b27      	ldr	r3, [pc, #156]	; (8013290 <Press_Sensor_Handler+0xc8>)
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	3301      	adds	r3, #1
 80131f6:	b2da      	uxtb	r2, r3
 80131f8:	4b25      	ldr	r3, [pc, #148]	; (8013290 <Press_Sensor_Handler+0xc8>)
 80131fa:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 1U;
 80131fc:	4b25      	ldr	r3, [pc, #148]	; (8013294 <Press_Sensor_Handler+0xcc>)
 80131fe:	881b      	ldrh	r3, [r3, #0]
 8013200:	f043 0301 	orr.w	r3, r3, #1
 8013204:	b29a      	uxth	r2, r3
 8013206:	4b23      	ldr	r3, [pc, #140]	; (8013294 <Press_Sensor_Handler+0xcc>)
 8013208:	801a      	strh	r2, [r3, #0]

    (void)BSP_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure);
 801320a:	f107 031c 	add.w	r3, r7, #28
 801320e:	461a      	mov	r2, r3
 8013210:	2102      	movs	r1, #2
 8013212:	6838      	ldr	r0, [r7, #0]
 8013214:	f7f6 fabe 	bl	8009794 <BSP_ENV_SENSOR_GetValue>

    if (DataLoggerActive != 0U)
 8013218:	4b1f      	ldr	r3, [pc, #124]	; (8013298 <Press_Sensor_Handler+0xd0>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2b00      	cmp	r3, #0
 8013220:	d00e      	beq.n	8013240 <Press_Sensor_Handler+0x78>
    {
      (void)memcpy(&Msg->Data[MsgIndex], (void *)&pressure, sizeof(float));
 8013222:	4b1e      	ldr	r3, [pc, #120]	; (801329c <Press_Sensor_Handler+0xd4>)
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	461a      	mov	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4413      	add	r3, r2
 801322c:	3304      	adds	r3, #4
 801322e:	69fa      	ldr	r2, [r7, #28]
 8013230:	601a      	str	r2, [r3, #0]
      MsgIndex = MsgIndex + 4;
 8013232:	4b1a      	ldr	r3, [pc, #104]	; (801329c <Press_Sensor_Handler+0xd4>)
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	3304      	adds	r3, #4
 8013238:	b2da      	uxtb	r2, r3
 801323a:	4b18      	ldr	r3, [pc, #96]	; (801329c <Press_Sensor_Handler+0xd4>)
 801323c:	701a      	strb	r2, [r3, #0]
    else
    {
      /* Nothing to do */
    }
  }
}
 801323e:	e022      	b.n	8013286 <Press_Sensor_Handler+0xbe>
    else if (TerminalActive != 0U)
 8013240:	4b17      	ldr	r3, [pc, #92]	; (80132a0 <Press_Sensor_Handler+0xd8>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	d01d      	beq.n	8013286 <Press_Sensor_Handler+0xbe>
      Float_To_Int(pressure, &out_value, 2);
 801324a:	edd7 7a07 	vldr	s15, [r7, #28]
 801324e:	f107 030c 	add.w	r3, r7, #12
 8013252:	2102      	movs	r1, #2
 8013254:	4618      	mov	r0, r3
 8013256:	eeb0 0a67 	vmov.f32	s0, s15
 801325a:	f7ff ff09 	bl	8013070 <Float_To_Int>
      (void)snprintf(DataOut, MAX_BUF_SIZE, "PRESS: %d.%02d\r\n", (int)out_value.out_int, (int)out_value.out_dec);
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	461a      	mov	r2, r3
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	4613      	mov	r3, r2
 8013268:	4a0e      	ldr	r2, [pc, #56]	; (80132a4 <Press_Sensor_Handler+0xdc>)
 801326a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801326e:	480e      	ldr	r0, [pc, #56]	; (80132a8 <Press_Sensor_Handler+0xe0>)
 8013270:	f004 fe98 	bl	8017fa4 <sniprintf>
      (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 8013274:	480c      	ldr	r0, [pc, #48]	; (80132a8 <Press_Sensor_Handler+0xe0>)
 8013276:	f7ec ffc3 	bl	8000200 <strlen>
 801327a:	4603      	mov	r3, r0
 801327c:	b29b      	uxth	r3, r3
 801327e:	4619      	mov	r1, r3
 8013280:	4809      	ldr	r0, [pc, #36]	; (80132a8 <Press_Sensor_Handler+0xe0>)
 8013282:	f003 f83b 	bl	80162fc <VCOM_write>
}
 8013286:	bf00      	nop
 8013288:	3720      	adds	r7, #32
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	20000bb0 	.word	0x20000bb0
 8013294:	20000bb2 	.word	0x20000bb2
 8013298:	20000a68 	.word	0x20000a68
 801329c:	20000bb4 	.word	0x20000bb4
 80132a0:	20000ba0 	.word	0x20000ba0
 80132a4:	08019e98 	.word	0x08019e98
 80132a8:	20000a7c 	.word	0x20000a7c

080132ac <Temp_Sensor_Handler>:
 * @param  Msg the TEMPERATURE part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Temp_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b08a      	sub	sp, #40	; 0x28
 80132b0:	af02      	add	r7, sp, #8
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  float temperature;
  uint8_t status = 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	75fb      	strb	r3, [r7, #23]
  uint8_t drdy = 0;
 80132ba:	2300      	movs	r3, #0
 80132bc:	77fb      	strb	r3, [r7, #31]
  static uint8_t stts751_is_busy = 0;

  if (Instance == STTS751_0)
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	d11c      	bne.n	80132fe <Temp_Sensor_Handler+0x52>
  {
    if (BSP_ENV_SENSOR_Get_DRDY_Status(Instance, ENV_TEMPERATURE, &status) == BSP_ERROR_NONE)
 80132c4:	f107 0317 	add.w	r3, r7, #23
 80132c8:	461a      	mov	r2, r3
 80132ca:	2101      	movs	r1, #1
 80132cc:	6838      	ldr	r0, [r7, #0]
 80132ce:	f7f6 fc85 	bl	8009bdc <BSP_ENV_SENSOR_Get_DRDY_Status>
 80132d2:	4603      	mov	r3, r0
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d124      	bne.n	8013322 <Temp_Sensor_Handler+0x76>
    {
      if (status == 0)
 80132d8:	7dfb      	ldrb	r3, [r7, #23]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d105      	bne.n	80132ea <Temp_Sensor_Handler+0x3e>
      {
        stts751_is_busy = 1;
 80132de:	4b3d      	ldr	r3, [pc, #244]	; (80133d4 <Temp_Sensor_Handler+0x128>)
 80132e0:	2201      	movs	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
        drdy = 0;
 80132e4:	2300      	movs	r3, #0
 80132e6:	77fb      	strb	r3, [r7, #31]
 80132e8:	e01b      	b.n	8013322 <Temp_Sensor_Handler+0x76>
      }
      else
      {
        if (stts751_is_busy == 1)
 80132ea:	4b3a      	ldr	r3, [pc, #232]	; (80133d4 <Temp_Sensor_Handler+0x128>)
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d117      	bne.n	8013322 <Temp_Sensor_Handler+0x76>
        {
          stts751_is_busy = 0;
 80132f2:	4b38      	ldr	r3, [pc, #224]	; (80133d4 <Temp_Sensor_Handler+0x128>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	701a      	strb	r2, [r3, #0]
          drdy = 1;
 80132f8:	2301      	movs	r3, #1
 80132fa:	77fb      	strb	r3, [r7, #31]
 80132fc:	e011      	b.n	8013322 <Temp_Sensor_Handler+0x76>
      }
    }
  }
  else
  {
    if (BSP_ENV_SENSOR_Get_DRDY_Status(Instance, ENV_TEMPERATURE, &status) == BSP_ERROR_NONE && status == 1U)
 80132fe:	f107 0317 	add.w	r3, r7, #23
 8013302:	461a      	mov	r2, r3
 8013304:	2101      	movs	r1, #1
 8013306:	6838      	ldr	r0, [r7, #0]
 8013308:	f7f6 fc68 	bl	8009bdc <BSP_ENV_SENSOR_Get_DRDY_Status>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d105      	bne.n	801331e <Temp_Sensor_Handler+0x72>
 8013312:	7dfb      	ldrb	r3, [r7, #23]
 8013314:	2b01      	cmp	r3, #1
 8013316:	d102      	bne.n	801331e <Temp_Sensor_Handler+0x72>
    {
      drdy = 1;
 8013318:	2301      	movs	r3, #1
 801331a:	77fb      	strb	r3, [r7, #31]
 801331c:	e001      	b.n	8013322 <Temp_Sensor_Handler+0x76>
    }
    else
    {
      drdy = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	77fb      	strb	r3, [r7, #31]
    }
  }

  if (drdy == 1)
 8013322:	7ffb      	ldrb	r3, [r7, #31]
 8013324:	2b01      	cmp	r3, #1
 8013326:	d150      	bne.n	80133ca <Temp_Sensor_Handler+0x11e>
  {
    NewData++;
 8013328:	4b2b      	ldr	r3, [pc, #172]	; (80133d8 <Temp_Sensor_Handler+0x12c>)
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	3301      	adds	r3, #1
 801332e:	b2da      	uxtb	r2, r3
 8013330:	4b29      	ldr	r3, [pc, #164]	; (80133d8 <Temp_Sensor_Handler+0x12c>)
 8013332:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 2U;
 8013334:	4b29      	ldr	r3, [pc, #164]	; (80133dc <Temp_Sensor_Handler+0x130>)
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	f043 0302 	orr.w	r3, r3, #2
 801333c:	b29a      	uxth	r2, r3
 801333e:	4b27      	ldr	r3, [pc, #156]	; (80133dc <Temp_Sensor_Handler+0x130>)
 8013340:	801a      	strh	r2, [r3, #0]

    (void)BSP_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature);
 8013342:	f107 0318 	add.w	r3, r7, #24
 8013346:	461a      	mov	r2, r3
 8013348:	2101      	movs	r1, #1
 801334a:	6838      	ldr	r0, [r7, #0]
 801334c:	f7f6 fa22 	bl	8009794 <BSP_ENV_SENSOR_GetValue>

    if (DataLoggerActive != 0U)
 8013350:	4b23      	ldr	r3, [pc, #140]	; (80133e0 <Temp_Sensor_Handler+0x134>)
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	b2db      	uxtb	r3, r3
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00e      	beq.n	8013378 <Temp_Sensor_Handler+0xcc>
    {
      (void)memcpy(&Msg->Data[MsgIndex], (void *)&temperature, sizeof(float));
 801335a:	4b22      	ldr	r3, [pc, #136]	; (80133e4 <Temp_Sensor_Handler+0x138>)
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	461a      	mov	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	4413      	add	r3, r2
 8013364:	3304      	adds	r3, #4
 8013366:	69ba      	ldr	r2, [r7, #24]
 8013368:	601a      	str	r2, [r3, #0]
      MsgIndex = MsgIndex + 4;
 801336a:	4b1e      	ldr	r3, [pc, #120]	; (80133e4 <Temp_Sensor_Handler+0x138>)
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	3304      	adds	r3, #4
 8013370:	b2da      	uxtb	r2, r3
 8013372:	4b1c      	ldr	r3, [pc, #112]	; (80133e4 <Temp_Sensor_Handler+0x138>)
 8013374:	701a      	strb	r2, [r3, #0]
    else
    {
      /* Nothing to do */
    }
  }
}
 8013376:	e028      	b.n	80133ca <Temp_Sensor_Handler+0x11e>
    else if (TerminalActive != 0U)
 8013378:	4b1b      	ldr	r3, [pc, #108]	; (80133e8 <Temp_Sensor_Handler+0x13c>)
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	b2db      	uxtb	r3, r3
 801337e:	2b00      	cmp	r3, #0
 8013380:	d023      	beq.n	80133ca <Temp_Sensor_Handler+0x11e>
      Float_To_Int(temperature, &out_value, 2);
 8013382:	edd7 7a06 	vldr	s15, [r7, #24]
 8013386:	f107 0308 	add.w	r3, r7, #8
 801338a:	2102      	movs	r1, #2
 801338c:	4618      	mov	r0, r3
 801338e:	eeb0 0a67 	vmov.f32	s0, s15
 8013392:	f7ff fe6d 	bl	8013070 <Float_To_Int>
      (void)snprintf(DataOut, MAX_BUF_SIZE, "TEMP: %c%d.%02d\r\n", ((out_value.sign != 0) ? '-' : '+'),
 8013396:	f997 3008 	ldrsb.w	r3, [r7, #8]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d001      	beq.n	80133a2 <Temp_Sensor_Handler+0xf6>
 801339e:	232d      	movs	r3, #45	; 0x2d
 80133a0:	e000      	b.n	80133a4 <Temp_Sensor_Handler+0xf8>
 80133a2:	232b      	movs	r3, #43	; 0x2b
                     (int)out_value.out_int, (int)out_value.out_dec);
 80133a4:	68fa      	ldr	r2, [r7, #12]
 80133a6:	6939      	ldr	r1, [r7, #16]
      (void)snprintf(DataOut, MAX_BUF_SIZE, "TEMP: %c%d.%02d\r\n", ((out_value.sign != 0) ? '-' : '+'),
 80133a8:	9101      	str	r1, [sp, #4]
 80133aa:	9200      	str	r2, [sp, #0]
 80133ac:	4a0f      	ldr	r2, [pc, #60]	; (80133ec <Temp_Sensor_Handler+0x140>)
 80133ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80133b2:	480f      	ldr	r0, [pc, #60]	; (80133f0 <Temp_Sensor_Handler+0x144>)
 80133b4:	f004 fdf6 	bl	8017fa4 <sniprintf>
      (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 80133b8:	480d      	ldr	r0, [pc, #52]	; (80133f0 <Temp_Sensor_Handler+0x144>)
 80133ba:	f7ec ff21 	bl	8000200 <strlen>
 80133be:	4603      	mov	r3, r0
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	4619      	mov	r1, r3
 80133c4:	480a      	ldr	r0, [pc, #40]	; (80133f0 <Temp_Sensor_Handler+0x144>)
 80133c6:	f002 ff99 	bl	80162fc <VCOM_write>
}
 80133ca:	bf00      	nop
 80133cc:	3720      	adds	r7, #32
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}
 80133d2:	bf00      	nop
 80133d4:	20000bbc 	.word	0x20000bbc
 80133d8:	20000bb0 	.word	0x20000bb0
 80133dc:	20000bb2 	.word	0x20000bb2
 80133e0:	20000a68 	.word	0x20000a68
 80133e4:	20000bb4 	.word	0x20000bb4
 80133e8:	20000ba0 	.word	0x20000ba0
 80133ec:	08019eac 	.word	0x08019eac
 80133f0:	20000a7c 	.word	0x20000a7c

080133f4 <Hum_Sensor_Handler>:
 * @param  Msg the HUMIDITY part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Hum_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b08a      	sub	sp, #40	; 0x28
 80133f8:	af02      	add	r7, sp, #8
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
  float humidity;
  uint8_t status = 0;
 80133fe:	2300      	movs	r3, #0
 8013400:	76fb      	strb	r3, [r7, #27]

  if (BSP_ENV_SENSOR_Get_DRDY_Status(Instance, ENV_HUMIDITY, &status) == BSP_ERROR_NONE && status == 1U)
 8013402:	f107 031b 	add.w	r3, r7, #27
 8013406:	461a      	mov	r2, r3
 8013408:	2104      	movs	r1, #4
 801340a:	6838      	ldr	r0, [r7, #0]
 801340c:	f7f6 fbe6 	bl	8009bdc <BSP_ENV_SENSOR_Get_DRDY_Status>
 8013410:	4603      	mov	r3, r0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d14d      	bne.n	80134b2 <Hum_Sensor_Handler+0xbe>
 8013416:	7efb      	ldrb	r3, [r7, #27]
 8013418:	2b01      	cmp	r3, #1
 801341a:	d14a      	bne.n	80134b2 <Hum_Sensor_Handler+0xbe>
  {
    NewData++;
 801341c:	4b27      	ldr	r3, [pc, #156]	; (80134bc <Hum_Sensor_Handler+0xc8>)
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	3301      	adds	r3, #1
 8013422:	b2da      	uxtb	r2, r3
 8013424:	4b25      	ldr	r3, [pc, #148]	; (80134bc <Hum_Sensor_Handler+0xc8>)
 8013426:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 4U;
 8013428:	4b25      	ldr	r3, [pc, #148]	; (80134c0 <Hum_Sensor_Handler+0xcc>)
 801342a:	881b      	ldrh	r3, [r3, #0]
 801342c:	f043 0304 	orr.w	r3, r3, #4
 8013430:	b29a      	uxth	r2, r3
 8013432:	4b23      	ldr	r3, [pc, #140]	; (80134c0 <Hum_Sensor_Handler+0xcc>)
 8013434:	801a      	strh	r2, [r3, #0]

    (void)BSP_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity);
 8013436:	f107 031c 	add.w	r3, r7, #28
 801343a:	461a      	mov	r2, r3
 801343c:	2104      	movs	r1, #4
 801343e:	6838      	ldr	r0, [r7, #0]
 8013440:	f7f6 f9a8 	bl	8009794 <BSP_ENV_SENSOR_GetValue>

    if (DataLoggerActive != 0U)
 8013444:	4b1f      	ldr	r3, [pc, #124]	; (80134c4 <Hum_Sensor_Handler+0xd0>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	b2db      	uxtb	r3, r3
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00e      	beq.n	801346c <Hum_Sensor_Handler+0x78>
    {
      (void)memcpy(&Msg->Data[MsgIndex], (void *)&humidity, sizeof(float));
 801344e:	4b1e      	ldr	r3, [pc, #120]	; (80134c8 <Hum_Sensor_Handler+0xd4>)
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	461a      	mov	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	4413      	add	r3, r2
 8013458:	3304      	adds	r3, #4
 801345a:	69fa      	ldr	r2, [r7, #28]
 801345c:	601a      	str	r2, [r3, #0]
      MsgIndex = MsgIndex + 4;
 801345e:	4b1a      	ldr	r3, [pc, #104]	; (80134c8 <Hum_Sensor_Handler+0xd4>)
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	3304      	adds	r3, #4
 8013464:	b2da      	uxtb	r2, r3
 8013466:	4b18      	ldr	r3, [pc, #96]	; (80134c8 <Hum_Sensor_Handler+0xd4>)
 8013468:	701a      	strb	r2, [r3, #0]
    else
    {
      /* Nothing to do */
    }
  }
}
 801346a:	e022      	b.n	80134b2 <Hum_Sensor_Handler+0xbe>
    else if (TerminalActive != 0U)
 801346c:	4b17      	ldr	r3, [pc, #92]	; (80134cc <Hum_Sensor_Handler+0xd8>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	b2db      	uxtb	r3, r3
 8013472:	2b00      	cmp	r3, #0
 8013474:	d01d      	beq.n	80134b2 <Hum_Sensor_Handler+0xbe>
      Float_To_Int(humidity, &out_value, 2);
 8013476:	edd7 7a07 	vldr	s15, [r7, #28]
 801347a:	f107 030c 	add.w	r3, r7, #12
 801347e:	2102      	movs	r1, #2
 8013480:	4618      	mov	r0, r3
 8013482:	eeb0 0a67 	vmov.f32	s0, s15
 8013486:	f7ff fdf3 	bl	8013070 <Float_To_Int>
      (void)snprintf(DataOut, MAX_BUF_SIZE, "HUM: %d.%02d\r\n", (int)out_value.out_int, (int)out_value.out_dec);
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	461a      	mov	r2, r3
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	4613      	mov	r3, r2
 8013494:	4a0e      	ldr	r2, [pc, #56]	; (80134d0 <Hum_Sensor_Handler+0xdc>)
 8013496:	f44f 7180 	mov.w	r1, #256	; 0x100
 801349a:	480e      	ldr	r0, [pc, #56]	; (80134d4 <Hum_Sensor_Handler+0xe0>)
 801349c:	f004 fd82 	bl	8017fa4 <sniprintf>
      (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 80134a0:	480c      	ldr	r0, [pc, #48]	; (80134d4 <Hum_Sensor_Handler+0xe0>)
 80134a2:	f7ec fead 	bl	8000200 <strlen>
 80134a6:	4603      	mov	r3, r0
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	4619      	mov	r1, r3
 80134ac:	4809      	ldr	r0, [pc, #36]	; (80134d4 <Hum_Sensor_Handler+0xe0>)
 80134ae:	f002 ff25 	bl	80162fc <VCOM_write>
}
 80134b2:	bf00      	nop
 80134b4:	3720      	adds	r7, #32
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	20000bb0 	.word	0x20000bb0
 80134c0:	20000bb2 	.word	0x20000bb2
 80134c4:	20000a68 	.word	0x20000a68
 80134c8:	20000bb4 	.word	0x20000bb4
 80134cc:	20000ba0 	.word	0x20000ba0
 80134d0:	08019ec0 	.word	0x08019ec0
 80134d4:	20000a7c 	.word	0x20000a7c

080134d8 <Accelero_Sensor_Handler>:
 * @param  Msg the ACCELERO part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b08e      	sub	sp, #56	; 0x38
 80134dc:	af02      	add	r7, sp, #8
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  int32_t data[6];
  BSP_MOTION_SENSOR_Axes_t acceleration;
  uint8_t status = 0;
 80134e2:	2300      	movs	r3, #0
 80134e4:	72fb      	strb	r3, [r7, #11]

  if (BSP_MOTION_SENSOR_Get_DRDY_Status(Instance, MOTION_ACCELERO, &status) == BSP_ERROR_NONE && status == 1U)
 80134e6:	f107 030b 	add.w	r3, r7, #11
 80134ea:	461a      	mov	r2, r3
 80134ec:	2102      	movs	r1, #2
 80134ee:	6838      	ldr	r0, [r7, #0]
 80134f0:	f7f7 fe0a 	bl	800b108 <BSP_MOTION_SENSOR_Get_DRDY_Status>
 80134f4:	4603      	mov	r3, r0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d163      	bne.n	80135c2 <Accelero_Sensor_Handler+0xea>
 80134fa:	7afb      	ldrb	r3, [r7, #11]
 80134fc:	2b01      	cmp	r3, #1
 80134fe:	d160      	bne.n	80135c2 <Accelero_Sensor_Handler+0xea>
  {
    NewData++;
 8013500:	4b32      	ldr	r3, [pc, #200]	; (80135cc <Accelero_Sensor_Handler+0xf4>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	3301      	adds	r3, #1
 8013506:	b2da      	uxtb	r2, r3
 8013508:	4b30      	ldr	r3, [pc, #192]	; (80135cc <Accelero_Sensor_Handler+0xf4>)
 801350a:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 8U;
 801350c:	4b30      	ldr	r3, [pc, #192]	; (80135d0 <Accelero_Sensor_Handler+0xf8>)
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	f043 0308 	orr.w	r3, r3, #8
 8013514:	b29a      	uxth	r2, r3
 8013516:	4b2e      	ldr	r3, [pc, #184]	; (80135d0 <Accelero_Sensor_Handler+0xf8>)
 8013518:	801a      	strh	r2, [r3, #0]

    (void)BSP_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration);
 801351a:	f107 030c 	add.w	r3, r7, #12
 801351e:	461a      	mov	r2, r3
 8013520:	2102      	movs	r1, #2
 8013522:	6838      	ldr	r0, [r7, #0]
 8013524:	f7f6 fe5e 	bl	800a1e4 <BSP_MOTION_SENSOR_GetAxes>

    if (DataLoggerActive != 0U)
 8013528:	4b2a      	ldr	r3, [pc, #168]	; (80135d4 <Accelero_Sensor_Handler+0xfc>)
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	b2db      	uxtb	r3, r3
 801352e:	2b00      	cmp	r3, #0
 8013530:	d027      	beq.n	8013582 <Accelero_Sensor_Handler+0xaa>
    {
      Serialize_s32(&Msg->Data[MsgIndex + 0], acceleration.x, 4);
 8013532:	4b29      	ldr	r3, [pc, #164]	; (80135d8 <Accelero_Sensor_Handler+0x100>)
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	461a      	mov	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4413      	add	r3, r2
 801353c:	3304      	adds	r3, #4
 801353e:	68f9      	ldr	r1, [r7, #12]
 8013540:	2204      	movs	r2, #4
 8013542:	4618      	mov	r0, r3
 8013544:	f001 fff0 	bl	8015528 <Serialize_s32>
      Serialize_s32(&Msg->Data[MsgIndex + 4], acceleration.y, 4);
 8013548:	4b23      	ldr	r3, [pc, #140]	; (80135d8 <Accelero_Sensor_Handler+0x100>)
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	3304      	adds	r3, #4
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	4413      	add	r3, r2
 8013552:	3304      	adds	r3, #4
 8013554:	6939      	ldr	r1, [r7, #16]
 8013556:	2204      	movs	r2, #4
 8013558:	4618      	mov	r0, r3
 801355a:	f001 ffe5 	bl	8015528 <Serialize_s32>
      Serialize_s32(&Msg->Data[MsgIndex + 8], acceleration.z, 4);
 801355e:	4b1e      	ldr	r3, [pc, #120]	; (80135d8 <Accelero_Sensor_Handler+0x100>)
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	3308      	adds	r3, #8
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	4413      	add	r3, r2
 8013568:	3304      	adds	r3, #4
 801356a:	6979      	ldr	r1, [r7, #20]
 801356c:	2204      	movs	r2, #4
 801356e:	4618      	mov	r0, r3
 8013570:	f001 ffda 	bl	8015528 <Serialize_s32>
      MsgIndex = MsgIndex + 12;
 8013574:	4b18      	ldr	r3, [pc, #96]	; (80135d8 <Accelero_Sensor_Handler+0x100>)
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	330c      	adds	r3, #12
 801357a:	b2da      	uxtb	r2, r3
 801357c:	4b16      	ldr	r3, [pc, #88]	; (80135d8 <Accelero_Sensor_Handler+0x100>)
 801357e:	701a      	strb	r2, [r3, #0]
    else
    {
      /* Nothing to do */
    }
  }
}
 8013580:	e01f      	b.n	80135c2 <Accelero_Sensor_Handler+0xea>
    else if (TerminalActive != 0U)
 8013582:	4b16      	ldr	r3, [pc, #88]	; (80135dc <Accelero_Sensor_Handler+0x104>)
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	b2db      	uxtb	r3, r3
 8013588:	2b00      	cmp	r3, #0
 801358a:	d01a      	beq.n	80135c2 <Accelero_Sensor_Handler+0xea>
      data[0] = acceleration.x;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	61bb      	str	r3, [r7, #24]
      data[1] = acceleration.y;
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	61fb      	str	r3, [r7, #28]
      data[2] = acceleration.z;
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	623b      	str	r3, [r7, #32]
      (void)snprintf(DataOut, MAX_BUF_SIZE, "ACC_X: %d, ACC_Y: %d, ACC_Z: %d\r\n", (int)data[0], (int)data[1], (int)data[2]);
 8013598:	69b9      	ldr	r1, [r7, #24]
 801359a:	69fb      	ldr	r3, [r7, #28]
 801359c:	6a3a      	ldr	r2, [r7, #32]
 801359e:	9201      	str	r2, [sp, #4]
 80135a0:	9300      	str	r3, [sp, #0]
 80135a2:	460b      	mov	r3, r1
 80135a4:	4a0e      	ldr	r2, [pc, #56]	; (80135e0 <Accelero_Sensor_Handler+0x108>)
 80135a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80135aa:	480e      	ldr	r0, [pc, #56]	; (80135e4 <Accelero_Sensor_Handler+0x10c>)
 80135ac:	f004 fcfa 	bl	8017fa4 <sniprintf>
      (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 80135b0:	480c      	ldr	r0, [pc, #48]	; (80135e4 <Accelero_Sensor_Handler+0x10c>)
 80135b2:	f7ec fe25 	bl	8000200 <strlen>
 80135b6:	4603      	mov	r3, r0
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	4619      	mov	r1, r3
 80135bc:	4809      	ldr	r0, [pc, #36]	; (80135e4 <Accelero_Sensor_Handler+0x10c>)
 80135be:	f002 fe9d 	bl	80162fc <VCOM_write>
}
 80135c2:	bf00      	nop
 80135c4:	3730      	adds	r7, #48	; 0x30
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	20000bb0 	.word	0x20000bb0
 80135d0:	20000bb2 	.word	0x20000bb2
 80135d4:	20000a68 	.word	0x20000a68
 80135d8:	20000bb4 	.word	0x20000bb4
 80135dc:	20000ba0 	.word	0x20000ba0
 80135e0:	08019ed0 	.word	0x08019ed0
 80135e4:	20000a7c 	.word	0x20000a7c

080135e8 <Gyro_Sensor_Handler>:
 * @param  Msg the GYRO part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b08e      	sub	sp, #56	; 0x38
 80135ec:	af02      	add	r7, sp, #8
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  int32_t data[6];
  BSP_MOTION_SENSOR_Axes_t angular_velocity;
  uint8_t status = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	72fb      	strb	r3, [r7, #11]

  if (BSP_MOTION_SENSOR_Get_DRDY_Status(Instance, MOTION_GYRO, &status) == BSP_ERROR_NONE && status == 1U)
 80135f6:	f107 030b 	add.w	r3, r7, #11
 80135fa:	461a      	mov	r2, r3
 80135fc:	2101      	movs	r1, #1
 80135fe:	6838      	ldr	r0, [r7, #0]
 8013600:	f7f7 fd82 	bl	800b108 <BSP_MOTION_SENSOR_Get_DRDY_Status>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d163      	bne.n	80136d2 <Gyro_Sensor_Handler+0xea>
 801360a:	7afb      	ldrb	r3, [r7, #11]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d160      	bne.n	80136d2 <Gyro_Sensor_Handler+0xea>
  {
    NewData++;
 8013610:	4b32      	ldr	r3, [pc, #200]	; (80136dc <Gyro_Sensor_Handler+0xf4>)
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	3301      	adds	r3, #1
 8013616:	b2da      	uxtb	r2, r3
 8013618:	4b30      	ldr	r3, [pc, #192]	; (80136dc <Gyro_Sensor_Handler+0xf4>)
 801361a:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 16U;
 801361c:	4b30      	ldr	r3, [pc, #192]	; (80136e0 <Gyro_Sensor_Handler+0xf8>)
 801361e:	881b      	ldrh	r3, [r3, #0]
 8013620:	f043 0310 	orr.w	r3, r3, #16
 8013624:	b29a      	uxth	r2, r3
 8013626:	4b2e      	ldr	r3, [pc, #184]	; (80136e0 <Gyro_Sensor_Handler+0xf8>)
 8013628:	801a      	strh	r2, [r3, #0]

    (void)BSP_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity);
 801362a:	f107 030c 	add.w	r3, r7, #12
 801362e:	461a      	mov	r2, r3
 8013630:	2101      	movs	r1, #1
 8013632:	6838      	ldr	r0, [r7, #0]
 8013634:	f7f6 fdd6 	bl	800a1e4 <BSP_MOTION_SENSOR_GetAxes>

    if (DataLoggerActive != 0U)
 8013638:	4b2a      	ldr	r3, [pc, #168]	; (80136e4 <Gyro_Sensor_Handler+0xfc>)
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	b2db      	uxtb	r3, r3
 801363e:	2b00      	cmp	r3, #0
 8013640:	d027      	beq.n	8013692 <Gyro_Sensor_Handler+0xaa>
    {
      Serialize_s32(&Msg->Data[MsgIndex + 0], angular_velocity.x, 4);
 8013642:	4b29      	ldr	r3, [pc, #164]	; (80136e8 <Gyro_Sensor_Handler+0x100>)
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	461a      	mov	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4413      	add	r3, r2
 801364c:	3304      	adds	r3, #4
 801364e:	68f9      	ldr	r1, [r7, #12]
 8013650:	2204      	movs	r2, #4
 8013652:	4618      	mov	r0, r3
 8013654:	f001 ff68 	bl	8015528 <Serialize_s32>
      Serialize_s32(&Msg->Data[MsgIndex + 4], angular_velocity.y, 4);
 8013658:	4b23      	ldr	r3, [pc, #140]	; (80136e8 <Gyro_Sensor_Handler+0x100>)
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	3304      	adds	r3, #4
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	4413      	add	r3, r2
 8013662:	3304      	adds	r3, #4
 8013664:	6939      	ldr	r1, [r7, #16]
 8013666:	2204      	movs	r2, #4
 8013668:	4618      	mov	r0, r3
 801366a:	f001 ff5d 	bl	8015528 <Serialize_s32>
      Serialize_s32(&Msg->Data[MsgIndex + 8], angular_velocity.z, 4);
 801366e:	4b1e      	ldr	r3, [pc, #120]	; (80136e8 <Gyro_Sensor_Handler+0x100>)
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	3308      	adds	r3, #8
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	4413      	add	r3, r2
 8013678:	3304      	adds	r3, #4
 801367a:	6979      	ldr	r1, [r7, #20]
 801367c:	2204      	movs	r2, #4
 801367e:	4618      	mov	r0, r3
 8013680:	f001 ff52 	bl	8015528 <Serialize_s32>
      MsgIndex = MsgIndex + 12;
 8013684:	4b18      	ldr	r3, [pc, #96]	; (80136e8 <Gyro_Sensor_Handler+0x100>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	330c      	adds	r3, #12
 801368a:	b2da      	uxtb	r2, r3
 801368c:	4b16      	ldr	r3, [pc, #88]	; (80136e8 <Gyro_Sensor_Handler+0x100>)
 801368e:	701a      	strb	r2, [r3, #0]
    else
    {
      /* Nothing to do */
    }
  }
}
 8013690:	e01f      	b.n	80136d2 <Gyro_Sensor_Handler+0xea>
    else if (TerminalActive != 0U)
 8013692:	4b16      	ldr	r3, [pc, #88]	; (80136ec <Gyro_Sensor_Handler+0x104>)
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	b2db      	uxtb	r3, r3
 8013698:	2b00      	cmp	r3, #0
 801369a:	d01a      	beq.n	80136d2 <Gyro_Sensor_Handler+0xea>
      data[0] = angular_velocity.x;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	61bb      	str	r3, [r7, #24]
      data[1] = angular_velocity.y;
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	61fb      	str	r3, [r7, #28]
      data[2] = angular_velocity.z;
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	623b      	str	r3, [r7, #32]
      (void)snprintf(DataOut, MAX_BUF_SIZE, "GYR_X: %d, GYR_Y: %d, GYR_Z: %d\r\n", (int)data[0], (int)data[1], (int)data[2]);
 80136a8:	69b9      	ldr	r1, [r7, #24]
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	6a3a      	ldr	r2, [r7, #32]
 80136ae:	9201      	str	r2, [sp, #4]
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	460b      	mov	r3, r1
 80136b4:	4a0e      	ldr	r2, [pc, #56]	; (80136f0 <Gyro_Sensor_Handler+0x108>)
 80136b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80136ba:	480e      	ldr	r0, [pc, #56]	; (80136f4 <Gyro_Sensor_Handler+0x10c>)
 80136bc:	f004 fc72 	bl	8017fa4 <sniprintf>
      (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 80136c0:	480c      	ldr	r0, [pc, #48]	; (80136f4 <Gyro_Sensor_Handler+0x10c>)
 80136c2:	f7ec fd9d 	bl	8000200 <strlen>
 80136c6:	4603      	mov	r3, r0
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	4619      	mov	r1, r3
 80136cc:	4809      	ldr	r0, [pc, #36]	; (80136f4 <Gyro_Sensor_Handler+0x10c>)
 80136ce:	f002 fe15 	bl	80162fc <VCOM_write>
}
 80136d2:	bf00      	nop
 80136d4:	3730      	adds	r7, #48	; 0x30
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	20000bb0 	.word	0x20000bb0
 80136e0:	20000bb2 	.word	0x20000bb2
 80136e4:	20000a68 	.word	0x20000a68
 80136e8:	20000bb4 	.word	0x20000bb4
 80136ec:	20000ba0 	.word	0x20000ba0
 80136f0:	08019ef4 	.word	0x08019ef4
 80136f4:	20000a7c 	.word	0x20000a7c

080136f8 <Magneto_Sensor_Handler>:
 * @param  Msg the MAGNETO part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b08c      	sub	sp, #48	; 0x30
 80136fc:	af02      	add	r7, sp, #8
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
  int32_t data[3];
  BSP_MOTION_SENSOR_Axes_t magnetic_field;
  uint8_t status = 0;
 8013702:	2300      	movs	r3, #0
 8013704:	73fb      	strb	r3, [r7, #15]

  if (BSP_MOTION_SENSOR_Get_DRDY_Status(Instance, MOTION_MAGNETO, &status) == BSP_ERROR_NONE && status == 1U)
 8013706:	f107 030f 	add.w	r3, r7, #15
 801370a:	461a      	mov	r2, r3
 801370c:	2104      	movs	r1, #4
 801370e:	6838      	ldr	r0, [r7, #0]
 8013710:	f7f7 fcfa 	bl	800b108 <BSP_MOTION_SENSOR_Get_DRDY_Status>
 8013714:	4603      	mov	r3, r0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d163      	bne.n	80137e2 <Magneto_Sensor_Handler+0xea>
 801371a:	7bfb      	ldrb	r3, [r7, #15]
 801371c:	2b01      	cmp	r3, #1
 801371e:	d160      	bne.n	80137e2 <Magneto_Sensor_Handler+0xea>
  {
    NewData++;
 8013720:	4b32      	ldr	r3, [pc, #200]	; (80137ec <Magneto_Sensor_Handler+0xf4>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	3301      	adds	r3, #1
 8013726:	b2da      	uxtb	r2, r3
 8013728:	4b30      	ldr	r3, [pc, #192]	; (80137ec <Magneto_Sensor_Handler+0xf4>)
 801372a:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 32U;
 801372c:	4b30      	ldr	r3, [pc, #192]	; (80137f0 <Magneto_Sensor_Handler+0xf8>)
 801372e:	881b      	ldrh	r3, [r3, #0]
 8013730:	f043 0320 	orr.w	r3, r3, #32
 8013734:	b29a      	uxth	r2, r3
 8013736:	4b2e      	ldr	r3, [pc, #184]	; (80137f0 <Magneto_Sensor_Handler+0xf8>)
 8013738:	801a      	strh	r2, [r3, #0]

    (void)BSP_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field);
 801373a:	f107 0310 	add.w	r3, r7, #16
 801373e:	461a      	mov	r2, r3
 8013740:	2104      	movs	r1, #4
 8013742:	6838      	ldr	r0, [r7, #0]
 8013744:	f7f6 fd4e 	bl	800a1e4 <BSP_MOTION_SENSOR_GetAxes>

    if (DataLoggerActive != 0U)
 8013748:	4b2a      	ldr	r3, [pc, #168]	; (80137f4 <Magneto_Sensor_Handler+0xfc>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d027      	beq.n	80137a2 <Magneto_Sensor_Handler+0xaa>
    {
      Serialize_s32(&Msg->Data[MsgIndex + 0], (int32_t)magnetic_field.x, 4);
 8013752:	4b29      	ldr	r3, [pc, #164]	; (80137f8 <Magneto_Sensor_Handler+0x100>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	461a      	mov	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	4413      	add	r3, r2
 801375c:	3304      	adds	r3, #4
 801375e:	6939      	ldr	r1, [r7, #16]
 8013760:	2204      	movs	r2, #4
 8013762:	4618      	mov	r0, r3
 8013764:	f001 fee0 	bl	8015528 <Serialize_s32>
      Serialize_s32(&Msg->Data[MsgIndex + 4], (int32_t)magnetic_field.y, 4);
 8013768:	4b23      	ldr	r3, [pc, #140]	; (80137f8 <Magneto_Sensor_Handler+0x100>)
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	3304      	adds	r3, #4
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	4413      	add	r3, r2
 8013772:	3304      	adds	r3, #4
 8013774:	6979      	ldr	r1, [r7, #20]
 8013776:	2204      	movs	r2, #4
 8013778:	4618      	mov	r0, r3
 801377a:	f001 fed5 	bl	8015528 <Serialize_s32>
      Serialize_s32(&Msg->Data[MsgIndex + 8], (int32_t)magnetic_field.z, 4);
 801377e:	4b1e      	ldr	r3, [pc, #120]	; (80137f8 <Magneto_Sensor_Handler+0x100>)
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	3308      	adds	r3, #8
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	4413      	add	r3, r2
 8013788:	3304      	adds	r3, #4
 801378a:	69b9      	ldr	r1, [r7, #24]
 801378c:	2204      	movs	r2, #4
 801378e:	4618      	mov	r0, r3
 8013790:	f001 feca 	bl	8015528 <Serialize_s32>
      MsgIndex = MsgIndex + 12;
 8013794:	4b18      	ldr	r3, [pc, #96]	; (80137f8 <Magneto_Sensor_Handler+0x100>)
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	330c      	adds	r3, #12
 801379a:	b2da      	uxtb	r2, r3
 801379c:	4b16      	ldr	r3, [pc, #88]	; (80137f8 <Magneto_Sensor_Handler+0x100>)
 801379e:	701a      	strb	r2, [r3, #0]
    else
    {
      /* Nothing to do */
    }
  }
}
 80137a0:	e01f      	b.n	80137e2 <Magneto_Sensor_Handler+0xea>
    else if (TerminalActive != 0U)
 80137a2:	4b16      	ldr	r3, [pc, #88]	; (80137fc <Magneto_Sensor_Handler+0x104>)
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d01a      	beq.n	80137e2 <Magneto_Sensor_Handler+0xea>
      data[0] = magnetic_field.x;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	61fb      	str	r3, [r7, #28]
      data[1] = magnetic_field.y;
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	623b      	str	r3, [r7, #32]
      data[2] = magnetic_field.z;
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)snprintf(DataOut, MAX_BUF_SIZE, "MAG_X: %d, MAG_Y: %d, MAG_Z: %d\r\n", (int)data[0], (int)data[1], (int)data[2]);
 80137b8:	69f9      	ldr	r1, [r7, #28]
 80137ba:	6a3b      	ldr	r3, [r7, #32]
 80137bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137be:	9201      	str	r2, [sp, #4]
 80137c0:	9300      	str	r3, [sp, #0]
 80137c2:	460b      	mov	r3, r1
 80137c4:	4a0e      	ldr	r2, [pc, #56]	; (8013800 <Magneto_Sensor_Handler+0x108>)
 80137c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80137ca:	480e      	ldr	r0, [pc, #56]	; (8013804 <Magneto_Sensor_Handler+0x10c>)
 80137cc:	f004 fbea 	bl	8017fa4 <sniprintf>
      (void)VCOM_write(DataOut, (uint16_t)strlen(DataOut));
 80137d0:	480c      	ldr	r0, [pc, #48]	; (8013804 <Magneto_Sensor_Handler+0x10c>)
 80137d2:	f7ec fd15 	bl	8000200 <strlen>
 80137d6:	4603      	mov	r3, r0
 80137d8:	b29b      	uxth	r3, r3
 80137da:	4619      	mov	r1, r3
 80137dc:	4809      	ldr	r0, [pc, #36]	; (8013804 <Magneto_Sensor_Handler+0x10c>)
 80137de:	f002 fd8d 	bl	80162fc <VCOM_write>
}
 80137e2:	bf00      	nop
 80137e4:	3728      	adds	r7, #40	; 0x28
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	20000bb0 	.word	0x20000bb0
 80137f0:	20000bb2 	.word	0x20000bb2
 80137f4:	20000a68 	.word	0x20000a68
 80137f8:	20000bb4 	.word	0x20000bb4
 80137fc:	20000ba0 	.word	0x20000ba0
 8013800:	08019f18 	.word	0x08019f18
 8013804:	20000a7c 	.word	0x20000a7c

08013808 <Sensors_Interrupt_Handler>:
 * @brief  Handles the sensors interrupts
 * @param  Msg the INTERRUPT part of the stream
 * @retval None
 */
static void Sensors_Interrupt_Handler(TMsg *Msg)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  uint8_t int_status = 0;
 8013810:	2300      	movs	r3, #0
 8013812:	73fb      	strb	r3, [r7, #15]
  // Bit 4: LIS2DW12 INT2 (PD14) / LIS3DHH INT2 (PE6)
  // Bit 5: LIS2MDL INT (PD12)
  // Bit 6: HTS221 (PD13)
  // Bit 7: STTS751 (PG5)
  
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) int_status |= (1 << 0); else int_status &= ~(1 << 0);
 8013814:	2104      	movs	r1, #4
 8013816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801381a:	f7f8 fa2b 	bl	800bc74 <HAL_GPIO_ReadPin>
 801381e:	4603      	mov	r3, r0
 8013820:	2b01      	cmp	r3, #1
 8013822:	d104      	bne.n	801382e <Sensors_Interrupt_Handler+0x26>
 8013824:	7bfb      	ldrb	r3, [r7, #15]
 8013826:	f043 0301 	orr.w	r3, r3, #1
 801382a:	73fb      	strb	r3, [r7, #15]
 801382c:	e003      	b.n	8013836 <Sensors_Interrupt_Handler+0x2e>
 801382e:	7bfb      	ldrb	r3, [r7, #15]
 8013830:	f023 0301 	bic.w	r3, r3, #1
 8013834:	73fb      	strb	r3, [r7, #15]
  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET) int_status |= (1 << 1); else int_status &= ~(1 << 1);
 8013836:	2108      	movs	r1, #8
 8013838:	486f      	ldr	r0, [pc, #444]	; (80139f8 <Sensors_Interrupt_Handler+0x1f0>)
 801383a:	f7f8 fa1b 	bl	800bc74 <HAL_GPIO_ReadPin>
 801383e:	4603      	mov	r3, r0
 8013840:	2b01      	cmp	r3, #1
 8013842:	d104      	bne.n	801384e <Sensors_Interrupt_Handler+0x46>
 8013844:	7bfb      	ldrb	r3, [r7, #15]
 8013846:	f043 0302 	orr.w	r3, r3, #2
 801384a:	73fb      	strb	r3, [r7, #15]
 801384c:	e003      	b.n	8013856 <Sensors_Interrupt_Handler+0x4e>
 801384e:	7bfb      	ldrb	r3, [r7, #15]
 8013850:	f023 0302 	bic.w	r3, r3, #2
 8013854:	73fb      	strb	r3, [r7, #15]
  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) int_status |= (1 << 2); else int_status &= ~(1 << 2);
 8013856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801385a:	4868      	ldr	r0, [pc, #416]	; (80139fc <Sensors_Interrupt_Handler+0x1f4>)
 801385c:	f7f8 fa0a 	bl	800bc74 <HAL_GPIO_ReadPin>
 8013860:	4603      	mov	r3, r0
 8013862:	2b01      	cmp	r3, #1
 8013864:	d104      	bne.n	8013870 <Sensors_Interrupt_Handler+0x68>
 8013866:	7bfb      	ldrb	r3, [r7, #15]
 8013868:	f043 0304 	orr.w	r3, r3, #4
 801386c:	73fb      	strb	r3, [r7, #15]
 801386e:	e003      	b.n	8013878 <Sensors_Interrupt_Handler+0x70>
 8013870:	7bfb      	ldrb	r3, [r7, #15]
 8013872:	f023 0304 	bic.w	r3, r3, #4
 8013876:	73fb      	strb	r3, [r7, #15]
  
  if (AccInstance == LIS2DW12_0)
 8013878:	4b61      	ldr	r3, [pc, #388]	; (8013a00 <Sensors_Interrupt_Handler+0x1f8>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d121      	bne.n	80138c4 <Sensors_Interrupt_Handler+0xbc>
  {
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) int_status |= (1 << 3); else int_status &= ~(1 << 3);
 8013880:	2120      	movs	r1, #32
 8013882:	4860      	ldr	r0, [pc, #384]	; (8013a04 <Sensors_Interrupt_Handler+0x1fc>)
 8013884:	f7f8 f9f6 	bl	800bc74 <HAL_GPIO_ReadPin>
 8013888:	4603      	mov	r3, r0
 801388a:	2b01      	cmp	r3, #1
 801388c:	d104      	bne.n	8013898 <Sensors_Interrupt_Handler+0x90>
 801388e:	7bfb      	ldrb	r3, [r7, #15]
 8013890:	f043 0308 	orr.w	r3, r3, #8
 8013894:	73fb      	strb	r3, [r7, #15]
 8013896:	e003      	b.n	80138a0 <Sensors_Interrupt_Handler+0x98>
 8013898:	7bfb      	ldrb	r3, [r7, #15]
 801389a:	f023 0308 	bic.w	r3, r3, #8
 801389e:	73fb      	strb	r3, [r7, #15]
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) int_status |= (1 << 4); else int_status &= ~(1 << 4);
 80138a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80138a4:	4855      	ldr	r0, [pc, #340]	; (80139fc <Sensors_Interrupt_Handler+0x1f4>)
 80138a6:	f7f8 f9e5 	bl	800bc74 <HAL_GPIO_ReadPin>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d104      	bne.n	80138ba <Sensors_Interrupt_Handler+0xb2>
 80138b0:	7bfb      	ldrb	r3, [r7, #15]
 80138b2:	f043 0310 	orr.w	r3, r3, #16
 80138b6:	73fb      	strb	r3, [r7, #15]
 80138b8:	e032      	b.n	8013920 <Sensors_Interrupt_Handler+0x118>
 80138ba:	7bfb      	ldrb	r3, [r7, #15]
 80138bc:	f023 0310 	bic.w	r3, r3, #16
 80138c0:	73fb      	strb	r3, [r7, #15]
 80138c2:	e02d      	b.n	8013920 <Sensors_Interrupt_Handler+0x118>
  }
  else if (AccInstance == LIS3DHH_0)
 80138c4:	4b4e      	ldr	r3, [pc, #312]	; (8013a00 <Sensors_Interrupt_Handler+0x1f8>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2b02      	cmp	r3, #2
 80138ca:	d121      	bne.n	8013910 <Sensors_Interrupt_Handler+0x108>
  {
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) int_status |= (1 << 3); else int_status &= ~(1 << 3);
 80138cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80138d0:	484c      	ldr	r0, [pc, #304]	; (8013a04 <Sensors_Interrupt_Handler+0x1fc>)
 80138d2:	f7f8 f9cf 	bl	800bc74 <HAL_GPIO_ReadPin>
 80138d6:	4603      	mov	r3, r0
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d104      	bne.n	80138e6 <Sensors_Interrupt_Handler+0xde>
 80138dc:	7bfb      	ldrb	r3, [r7, #15]
 80138de:	f043 0308 	orr.w	r3, r3, #8
 80138e2:	73fb      	strb	r3, [r7, #15]
 80138e4:	e003      	b.n	80138ee <Sensors_Interrupt_Handler+0xe6>
 80138e6:	7bfb      	ldrb	r3, [r7, #15]
 80138e8:	f023 0308 	bic.w	r3, r3, #8
 80138ec:	73fb      	strb	r3, [r7, #15]
    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET) int_status |= (1 << 4); else int_status &= ~(1 << 4);
 80138ee:	2140      	movs	r1, #64	; 0x40
 80138f0:	4841      	ldr	r0, [pc, #260]	; (80139f8 <Sensors_Interrupt_Handler+0x1f0>)
 80138f2:	f7f8 f9bf 	bl	800bc74 <HAL_GPIO_ReadPin>
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d104      	bne.n	8013906 <Sensors_Interrupt_Handler+0xfe>
 80138fc:	7bfb      	ldrb	r3, [r7, #15]
 80138fe:	f043 0310 	orr.w	r3, r3, #16
 8013902:	73fb      	strb	r3, [r7, #15]
 8013904:	e00c      	b.n	8013920 <Sensors_Interrupt_Handler+0x118>
 8013906:	7bfb      	ldrb	r3, [r7, #15]
 8013908:	f023 0310 	bic.w	r3, r3, #16
 801390c:	73fb      	strb	r3, [r7, #15]
 801390e:	e007      	b.n	8013920 <Sensors_Interrupt_Handler+0x118>
  }
  else
  {
    int_status &= ~(1 << 3);
 8013910:	7bfb      	ldrb	r3, [r7, #15]
 8013912:	f023 0308 	bic.w	r3, r3, #8
 8013916:	73fb      	strb	r3, [r7, #15]
    int_status &= ~(1 << 4);
 8013918:	7bfb      	ldrb	r3, [r7, #15]
 801391a:	f023 0310 	bic.w	r3, r3, #16
 801391e:	73fb      	strb	r3, [r7, #15]
  }
  
  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) int_status |= (1 << 5); else int_status &= ~(1 << 5);
 8013920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013924:	4835      	ldr	r0, [pc, #212]	; (80139fc <Sensors_Interrupt_Handler+0x1f4>)
 8013926:	f7f8 f9a5 	bl	800bc74 <HAL_GPIO_ReadPin>
 801392a:	4603      	mov	r3, r0
 801392c:	2b01      	cmp	r3, #1
 801392e:	d104      	bne.n	801393a <Sensors_Interrupt_Handler+0x132>
 8013930:	7bfb      	ldrb	r3, [r7, #15]
 8013932:	f043 0320 	orr.w	r3, r3, #32
 8013936:	73fb      	strb	r3, [r7, #15]
 8013938:	e003      	b.n	8013942 <Sensors_Interrupt_Handler+0x13a>
 801393a:	7bfb      	ldrb	r3, [r7, #15]
 801393c:	f023 0320 	bic.w	r3, r3, #32
 8013940:	73fb      	strb	r3, [r7, #15]
  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) int_status |= (1 << 6); else int_status &= ~(1 << 6);
 8013942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013946:	482d      	ldr	r0, [pc, #180]	; (80139fc <Sensors_Interrupt_Handler+0x1f4>)
 8013948:	f7f8 f994 	bl	800bc74 <HAL_GPIO_ReadPin>
 801394c:	4603      	mov	r3, r0
 801394e:	2b01      	cmp	r3, #1
 8013950:	d104      	bne.n	801395c <Sensors_Interrupt_Handler+0x154>
 8013952:	7bfb      	ldrb	r3, [r7, #15]
 8013954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013958:	73fb      	strb	r3, [r7, #15]
 801395a:	e003      	b.n	8013964 <Sensors_Interrupt_Handler+0x15c>
 801395c:	7bfb      	ldrb	r3, [r7, #15]
 801395e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013962:	73fb      	strb	r3, [r7, #15]
  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) == GPIO_PIN_SET) int_status |= (1 << 7); else int_status &= ~(1 << 7);
 8013964:	2120      	movs	r1, #32
 8013966:	4828      	ldr	r0, [pc, #160]	; (8013a08 <Sensors_Interrupt_Handler+0x200>)
 8013968:	f7f8 f984 	bl	800bc74 <HAL_GPIO_ReadPin>
 801396c:	4603      	mov	r3, r0
 801396e:	2b01      	cmp	r3, #1
 8013970:	d104      	bne.n	801397c <Sensors_Interrupt_Handler+0x174>
 8013972:	7bfb      	ldrb	r3, [r7, #15]
 8013974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013978:	73fb      	strb	r3, [r7, #15]
 801397a:	e003      	b.n	8013984 <Sensors_Interrupt_Handler+0x17c>
 801397c:	7bfb      	ldrb	r3, [r7, #15]
 801397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013982:	73fb      	strb	r3, [r7, #15]

  if ((mem_int_status != int_status) || (UpdateInterrupt == 1) || ((HAL_GetTick() - LastUpdate) > 100))
 8013984:	4b21      	ldr	r3, [pc, #132]	; (8013a0c <Sensors_Interrupt_Handler+0x204>)
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	7bfa      	ldrb	r2, [r7, #15]
 801398a:	429a      	cmp	r2, r3
 801398c:	d10b      	bne.n	80139a6 <Sensors_Interrupt_Handler+0x19e>
 801398e:	4b20      	ldr	r3, [pc, #128]	; (8013a10 <Sensors_Interrupt_Handler+0x208>)
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d007      	beq.n	80139a6 <Sensors_Interrupt_Handler+0x19e>
 8013996:	f7f7 fda7 	bl	800b4e8 <HAL_GetTick>
 801399a:	4602      	mov	r2, r0
 801399c:	4b1d      	ldr	r3, [pc, #116]	; (8013a14 <Sensors_Interrupt_Handler+0x20c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	1ad3      	subs	r3, r2, r3
 80139a2:	2b64      	cmp	r3, #100	; 0x64
 80139a4:	d924      	bls.n	80139f0 <Sensors_Interrupt_Handler+0x1e8>
  {
    UpdateInterrupt = 0;
 80139a6:	4b1a      	ldr	r3, [pc, #104]	; (8013a10 <Sensors_Interrupt_Handler+0x208>)
 80139a8:	2200      	movs	r2, #0
 80139aa:	701a      	strb	r2, [r3, #0]
    NewData++;
 80139ac:	4b1a      	ldr	r3, [pc, #104]	; (8013a18 <Sensors_Interrupt_Handler+0x210>)
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	3301      	adds	r3, #1
 80139b2:	b2da      	uxtb	r2, r3
 80139b4:	4b18      	ldr	r3, [pc, #96]	; (8013a18 <Sensors_Interrupt_Handler+0x210>)
 80139b6:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 64U;
 80139b8:	4b18      	ldr	r3, [pc, #96]	; (8013a1c <Sensors_Interrupt_Handler+0x214>)
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139c0:	b29a      	uxth	r2, r3
 80139c2:	4b16      	ldr	r3, [pc, #88]	; (8013a1c <Sensors_Interrupt_Handler+0x214>)
 80139c4:	801a      	strh	r2, [r3, #0]
    Msg->Data[MsgIndex] = int_status;
 80139c6:	4b16      	ldr	r3, [pc, #88]	; (8013a20 <Sensors_Interrupt_Handler+0x218>)
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	461a      	mov	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4413      	add	r3, r2
 80139d0:	7bfa      	ldrb	r2, [r7, #15]
 80139d2:	711a      	strb	r2, [r3, #4]
    MsgIndex = MsgIndex + 1;
 80139d4:	4b12      	ldr	r3, [pc, #72]	; (8013a20 <Sensors_Interrupt_Handler+0x218>)
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	3301      	adds	r3, #1
 80139da:	b2da      	uxtb	r2, r3
 80139dc:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <Sensors_Interrupt_Handler+0x218>)
 80139de:	701a      	strb	r2, [r3, #0]
    
    mem_int_status = int_status;
 80139e0:	4a0a      	ldr	r2, [pc, #40]	; (8013a0c <Sensors_Interrupt_Handler+0x204>)
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
 80139e4:	7013      	strb	r3, [r2, #0]
    LastUpdate = HAL_GetTick();
 80139e6:	f7f7 fd7f 	bl	800b4e8 <HAL_GetTick>
 80139ea:	4603      	mov	r3, r0
 80139ec:	4a09      	ldr	r2, [pc, #36]	; (8013a14 <Sensors_Interrupt_Handler+0x20c>)
 80139ee:	6013      	str	r3, [r2, #0]
  }
}
 80139f0:	bf00      	nop
 80139f2:	3710      	adds	r7, #16
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	48001000 	.word	0x48001000
 80139fc:	48000c00 	.word	0x48000c00
 8013a00:	200001f4 	.word	0x200001f4
 8013a04:	48000800 	.word	0x48000800
 8013a08:	48001800 	.word	0x48001800
 8013a0c:	20000bbd 	.word	0x20000bbd
 8013a10:	20000a70 	.word	0x20000a70
 8013a14:	20000bb8 	.word	0x20000bb8
 8013a18:	20000bb0 	.word	0x20000bb0
 8013a1c:	20000bb2 	.word	0x20000bb2
 8013a20:	20000bb4 	.word	0x20000bb4

08013a24 <MLC_Handler>:
 * @brief  Handles the MLC status data
 * @param  Msg the MLC part of the stream
 * @retval None
 */
static void MLC_Handler(TMsg *Msg)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b086      	sub	sp, #24
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
  int32_t i = 0;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	617b      	str	r3, [r7, #20]
  uint8_t new_status = 0;
 8013a30:	2300      	movs	r3, #0
 8013a32:	74fb      	strb	r3, [r7, #19]
  uint8_t mlc_status[8];
  static uint8_t mem_mlc_status[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  
  if ((AccInstance == LSM6DSOX_0) && (GyrInstance == LSM6DSOX_0))
 8013a34:	4b53      	ldr	r3, [pc, #332]	; (8013b84 <MLC_Handler+0x160>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	2b03      	cmp	r3, #3
 8013a3a:	d14d      	bne.n	8013ad8 <MLC_Handler+0xb4>
 8013a3c:	4b52      	ldr	r3, [pc, #328]	; (8013b88 <MLC_Handler+0x164>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b03      	cmp	r3, #3
 8013a42:	d149      	bne.n	8013ad8 <MLC_Handler+0xb4>
  {
    (void)BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0, LSM6DSOX_FUNC_CFG_ACCESS, LSM6DSOX_EMBEDDED_FUNC_BANK << 6);
 8013a44:	2280      	movs	r2, #128	; 0x80
 8013a46:	2101      	movs	r1, #1
 8013a48:	2003      	movs	r0, #3
 8013a4a:	f7f7 fc6f 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>

    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC0_SRC, &mlc_status[0]);
 8013a4e:	f107 0308 	add.w	r3, r7, #8
 8013a52:	461a      	mov	r2, r3
 8013a54:	2170      	movs	r1, #112	; 0x70
 8013a56:	2003      	movs	r0, #3
 8013a58:	f7f7 fbfa 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC1_SRC, &mlc_status[1]);
 8013a5c:	f107 0308 	add.w	r3, r7, #8
 8013a60:	3301      	adds	r3, #1
 8013a62:	461a      	mov	r2, r3
 8013a64:	2171      	movs	r1, #113	; 0x71
 8013a66:	2003      	movs	r0, #3
 8013a68:	f7f7 fbf2 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC2_SRC, &mlc_status[2]);
 8013a6c:	f107 0308 	add.w	r3, r7, #8
 8013a70:	3302      	adds	r3, #2
 8013a72:	461a      	mov	r2, r3
 8013a74:	2172      	movs	r1, #114	; 0x72
 8013a76:	2003      	movs	r0, #3
 8013a78:	f7f7 fbea 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC3_SRC, &mlc_status[3]);
 8013a7c:	f107 0308 	add.w	r3, r7, #8
 8013a80:	3303      	adds	r3, #3
 8013a82:	461a      	mov	r2, r3
 8013a84:	2173      	movs	r1, #115	; 0x73
 8013a86:	2003      	movs	r0, #3
 8013a88:	f7f7 fbe2 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC4_SRC, &mlc_status[4]);
 8013a8c:	f107 0308 	add.w	r3, r7, #8
 8013a90:	3304      	adds	r3, #4
 8013a92:	461a      	mov	r2, r3
 8013a94:	2174      	movs	r1, #116	; 0x74
 8013a96:	2003      	movs	r0, #3
 8013a98:	f7f7 fbda 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC5_SRC, &mlc_status[5]);
 8013a9c:	f107 0308 	add.w	r3, r7, #8
 8013aa0:	3305      	adds	r3, #5
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	2175      	movs	r1, #117	; 0x75
 8013aa6:	2003      	movs	r0, #3
 8013aa8:	f7f7 fbd2 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC6_SRC, &mlc_status[6]);
 8013aac:	f107 0308 	add.w	r3, r7, #8
 8013ab0:	3306      	adds	r3, #6
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	2176      	movs	r1, #118	; 0x76
 8013ab6:	2003      	movs	r0, #3
 8013ab8:	f7f7 fbca 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_MLC7_SRC, &mlc_status[7]);
 8013abc:	f107 0308 	add.w	r3, r7, #8
 8013ac0:	3307      	adds	r3, #7
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	2177      	movs	r1, #119	; 0x77
 8013ac6:	2003      	movs	r0, #3
 8013ac8:	f7f7 fbc2 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>

    (void)BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0, LSM6DSOX_FUNC_CFG_ACCESS, LSM6DSOX_USER_BANK << 6);
 8013acc:	2200      	movs	r2, #0
 8013ace:	2101      	movs	r1, #1
 8013ad0:	2003      	movs	r0, #3
 8013ad2:	f7f7 fc2b 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>
 8013ad6:	e00f      	b.n	8013af8 <MLC_Handler+0xd4>
  }
    else
  {
    mlc_status[0] = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	723b      	strb	r3, [r7, #8]
    mlc_status[1] = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	727b      	strb	r3, [r7, #9]
    mlc_status[2] = 0;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	72bb      	strb	r3, [r7, #10]
    mlc_status[3] = 0;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	72fb      	strb	r3, [r7, #11]
    mlc_status[4] = 0;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	733b      	strb	r3, [r7, #12]
    mlc_status[5] = 0;
 8013aec:	2300      	movs	r3, #0
 8013aee:	737b      	strb	r3, [r7, #13]
    mlc_status[6] = 0;
 8013af0:	2300      	movs	r3, #0
 8013af2:	73bb      	strb	r3, [r7, #14]
    mlc_status[7] = 0;
 8013af4:	2300      	movs	r3, #0
 8013af6:	73fb      	strb	r3, [r7, #15]
  }
  
  for (i = 0; i < 8; i++)
 8013af8:	2300      	movs	r3, #0
 8013afa:	617b      	str	r3, [r7, #20]
 8013afc:	e010      	b.n	8013b20 <MLC_Handler+0xfc>
  {
    if (mlc_status[i] != mem_mlc_status[i])
 8013afe:	f107 0208 	add.w	r2, r7, #8
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	4413      	add	r3, r2
 8013b06:	781a      	ldrb	r2, [r3, #0]
 8013b08:	4920      	ldr	r1, [pc, #128]	; (8013b8c <MLC_Handler+0x168>)
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	440b      	add	r3, r1
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d002      	beq.n	8013b1a <MLC_Handler+0xf6>
    {
      new_status = 1;
 8013b14:	2301      	movs	r3, #1
 8013b16:	74fb      	strb	r3, [r7, #19]
      break;
 8013b18:	e005      	b.n	8013b26 <MLC_Handler+0x102>
  for (i = 0; i < 8; i++)
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	617b      	str	r3, [r7, #20]
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	2b07      	cmp	r3, #7
 8013b24:	ddeb      	ble.n	8013afe <MLC_Handler+0xda>
    }
  }

  if (new_status == 1)
 8013b26:	7cfb      	ldrb	r3, [r7, #19]
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d126      	bne.n	8013b7a <MLC_Handler+0x156>
  {
    memcpy((void *)&Msg->Data[MsgIndex], (void *)&mlc_status, 8);
 8013b2c:	4b18      	ldr	r3, [pc, #96]	; (8013b90 <MLC_Handler+0x16c>)
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	461a      	mov	r2, r3
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	4413      	add	r3, r2
 8013b36:	3304      	adds	r3, #4
 8013b38:	461a      	mov	r2, r3
 8013b3a:	f107 0308 	add.w	r3, r7, #8
 8013b3e:	cb03      	ldmia	r3!, {r0, r1}
 8013b40:	6010      	str	r0, [r2, #0]
 8013b42:	6051      	str	r1, [r2, #4]
    memcpy((void *)&mem_mlc_status, (void *)mlc_status, 8);
 8013b44:	4b11      	ldr	r3, [pc, #68]	; (8013b8c <MLC_Handler+0x168>)
 8013b46:	461a      	mov	r2, r3
 8013b48:	f107 0308 	add.w	r3, r7, #8
 8013b4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b50:	e882 0003 	stmia.w	r2, {r0, r1}
    MsgIndex = MsgIndex + 8;
 8013b54:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <MLC_Handler+0x16c>)
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	3308      	adds	r3, #8
 8013b5a:	b2da      	uxtb	r2, r3
 8013b5c:	4b0c      	ldr	r3, [pc, #48]	; (8013b90 <MLC_Handler+0x16c>)
 8013b5e:	701a      	strb	r2, [r3, #0]

    NewData++;
 8013b60:	4b0c      	ldr	r3, [pc, #48]	; (8013b94 <MLC_Handler+0x170>)
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	3301      	adds	r3, #1
 8013b66:	b2da      	uxtb	r2, r3
 8013b68:	4b0a      	ldr	r3, [pc, #40]	; (8013b94 <MLC_Handler+0x170>)
 8013b6a:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 128U;
 8013b6c:	4b0a      	ldr	r3, [pc, #40]	; (8013b98 <MLC_Handler+0x174>)
 8013b6e:	881b      	ldrh	r3, [r3, #0]
 8013b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	4b08      	ldr	r3, [pc, #32]	; (8013b98 <MLC_Handler+0x174>)
 8013b78:	801a      	strh	r2, [r3, #0]
  }
}
 8013b7a:	bf00      	nop
 8013b7c:	3718      	adds	r7, #24
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	200001f4 	.word	0x200001f4
 8013b88:	200001f8 	.word	0x200001f8
 8013b8c:	20000bc0 	.word	0x20000bc0
 8013b90:	20000bb4 	.word	0x20000bb4
 8013b94:	20000bb0 	.word	0x20000bb0
 8013b98:	20000bb2 	.word	0x20000bb2

08013b9c <FSM_Handler>:
 * @brief  Handles the FSM status data
 * @param  Msg the FSM part of the stream
 * @retval None
 */
static void FSM_Handler(TMsg *Msg)
{
 8013b9c:	b5b0      	push	{r4, r5, r7, lr}
 8013b9e:	b088      	sub	sp, #32
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  int32_t i = 0;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	61fb      	str	r3, [r7, #28]
  uint8_t new_status = 0;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	76fb      	strb	r3, [r7, #27]
  uint8_t fsm_status[16];
  static uint8_t mem_fsm_status[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  if ((AccInstance == LSM6DSOX_0) && (GyrInstance == LSM6DSOX_0))
 8013bac:	4b7c      	ldr	r3, [pc, #496]	; (8013da0 <FSM_Handler+0x204>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2b03      	cmp	r3, #3
 8013bb2:	f040 808f 	bne.w	8013cd4 <FSM_Handler+0x138>
 8013bb6:	4b7b      	ldr	r3, [pc, #492]	; (8013da4 <FSM_Handler+0x208>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b03      	cmp	r3, #3
 8013bbc:	f040 808a 	bne.w	8013cd4 <FSM_Handler+0x138>
  {
    (void)BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0, LSM6DSOX_FUNC_CFG_ACCESS, LSM6DSOX_EMBEDDED_FUNC_BANK << 6);
 8013bc0:	2280      	movs	r2, #128	; 0x80
 8013bc2:	2101      	movs	r1, #1
 8013bc4:	2003      	movs	r0, #3
 8013bc6:	f7f7 fbb1 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>

    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS1, &fsm_status[0]);
 8013bca:	f107 0308 	add.w	r3, r7, #8
 8013bce:	461a      	mov	r2, r3
 8013bd0:	214c      	movs	r1, #76	; 0x4c
 8013bd2:	2003      	movs	r0, #3
 8013bd4:	f7f7 fb3c 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS2, &fsm_status[1]);
 8013bd8:	f107 0308 	add.w	r3, r7, #8
 8013bdc:	3301      	adds	r3, #1
 8013bde:	461a      	mov	r2, r3
 8013be0:	214d      	movs	r1, #77	; 0x4d
 8013be2:	2003      	movs	r0, #3
 8013be4:	f7f7 fb34 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS3, &fsm_status[2]);
 8013be8:	f107 0308 	add.w	r3, r7, #8
 8013bec:	3302      	adds	r3, #2
 8013bee:	461a      	mov	r2, r3
 8013bf0:	214e      	movs	r1, #78	; 0x4e
 8013bf2:	2003      	movs	r0, #3
 8013bf4:	f7f7 fb2c 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS4, &fsm_status[3]);
 8013bf8:	f107 0308 	add.w	r3, r7, #8
 8013bfc:	3303      	adds	r3, #3
 8013bfe:	461a      	mov	r2, r3
 8013c00:	214f      	movs	r1, #79	; 0x4f
 8013c02:	2003      	movs	r0, #3
 8013c04:	f7f7 fb24 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS5, &fsm_status[4]);
 8013c08:	f107 0308 	add.w	r3, r7, #8
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	461a      	mov	r2, r3
 8013c10:	2150      	movs	r1, #80	; 0x50
 8013c12:	2003      	movs	r0, #3
 8013c14:	f7f7 fb1c 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS6, &fsm_status[5]);
 8013c18:	f107 0308 	add.w	r3, r7, #8
 8013c1c:	3305      	adds	r3, #5
 8013c1e:	461a      	mov	r2, r3
 8013c20:	2151      	movs	r1, #81	; 0x51
 8013c22:	2003      	movs	r0, #3
 8013c24:	f7f7 fb14 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS7, &fsm_status[6]);
 8013c28:	f107 0308 	add.w	r3, r7, #8
 8013c2c:	3306      	adds	r3, #6
 8013c2e:	461a      	mov	r2, r3
 8013c30:	2152      	movs	r1, #82	; 0x52
 8013c32:	2003      	movs	r0, #3
 8013c34:	f7f7 fb0c 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS8, &fsm_status[7]);
 8013c38:	f107 0308 	add.w	r3, r7, #8
 8013c3c:	3307      	adds	r3, #7
 8013c3e:	461a      	mov	r2, r3
 8013c40:	2153      	movs	r1, #83	; 0x53
 8013c42:	2003      	movs	r0, #3
 8013c44:	f7f7 fb04 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS9, &fsm_status[8]);
 8013c48:	f107 0308 	add.w	r3, r7, #8
 8013c4c:	3308      	adds	r3, #8
 8013c4e:	461a      	mov	r2, r3
 8013c50:	2154      	movs	r1, #84	; 0x54
 8013c52:	2003      	movs	r0, #3
 8013c54:	f7f7 fafc 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS10, &fsm_status[9]);
 8013c58:	f107 0308 	add.w	r3, r7, #8
 8013c5c:	3309      	adds	r3, #9
 8013c5e:	461a      	mov	r2, r3
 8013c60:	2155      	movs	r1, #85	; 0x55
 8013c62:	2003      	movs	r0, #3
 8013c64:	f7f7 faf4 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS11, &fsm_status[10]);
 8013c68:	f107 0308 	add.w	r3, r7, #8
 8013c6c:	330a      	adds	r3, #10
 8013c6e:	461a      	mov	r2, r3
 8013c70:	2156      	movs	r1, #86	; 0x56
 8013c72:	2003      	movs	r0, #3
 8013c74:	f7f7 faec 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS12, &fsm_status[11]);
 8013c78:	f107 0308 	add.w	r3, r7, #8
 8013c7c:	330b      	adds	r3, #11
 8013c7e:	461a      	mov	r2, r3
 8013c80:	2157      	movs	r1, #87	; 0x57
 8013c82:	2003      	movs	r0, #3
 8013c84:	f7f7 fae4 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS13, &fsm_status[12]);
 8013c88:	f107 0308 	add.w	r3, r7, #8
 8013c8c:	330c      	adds	r3, #12
 8013c8e:	461a      	mov	r2, r3
 8013c90:	2158      	movs	r1, #88	; 0x58
 8013c92:	2003      	movs	r0, #3
 8013c94:	f7f7 fadc 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS14, &fsm_status[13]);
 8013c98:	f107 0308 	add.w	r3, r7, #8
 8013c9c:	330d      	adds	r3, #13
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	2159      	movs	r1, #89	; 0x59
 8013ca2:	2003      	movs	r0, #3
 8013ca4:	f7f7 fad4 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS15, &fsm_status[14]);
 8013ca8:	f107 0308 	add.w	r3, r7, #8
 8013cac:	330e      	adds	r3, #14
 8013cae:	461a      	mov	r2, r3
 8013cb0:	215a      	movs	r1, #90	; 0x5a
 8013cb2:	2003      	movs	r0, #3
 8013cb4:	f7f7 facc 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
    (void)BSP_MOTION_SENSOR_Read_Register(LSM6DSOX_0, LSM6DSOX_FSM_OUTS16, &fsm_status[15]);
 8013cb8:	f107 0308 	add.w	r3, r7, #8
 8013cbc:	330f      	adds	r3, #15
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	215b      	movs	r1, #91	; 0x5b
 8013cc2:	2003      	movs	r0, #3
 8013cc4:	f7f7 fac4 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>

    (void)BSP_MOTION_SENSOR_Write_Register(LSM6DSOX_0, LSM6DSOX_FUNC_CFG_ACCESS, LSM6DSOX_USER_BANK << 6);
 8013cc8:	2200      	movs	r2, #0
 8013cca:	2101      	movs	r1, #1
 8013ccc:	2003      	movs	r0, #3
 8013cce:	f7f7 fb2d 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>
 8013cd2:	e01f      	b.n	8013d14 <FSM_Handler+0x178>
  }
  else
  {
    fsm_status[0] = 0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	723b      	strb	r3, [r7, #8]
    fsm_status[1] = 0;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	727b      	strb	r3, [r7, #9]
    fsm_status[2] = 0;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	72bb      	strb	r3, [r7, #10]
    fsm_status[3] = 0;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	72fb      	strb	r3, [r7, #11]
    fsm_status[4] = 0;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	733b      	strb	r3, [r7, #12]
    fsm_status[5] = 0;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	737b      	strb	r3, [r7, #13]
    fsm_status[6] = 0;
 8013cec:	2300      	movs	r3, #0
 8013cee:	73bb      	strb	r3, [r7, #14]
    fsm_status[7] = 0;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	73fb      	strb	r3, [r7, #15]
    fsm_status[8] = 0;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	743b      	strb	r3, [r7, #16]
    fsm_status[9] = 0;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	747b      	strb	r3, [r7, #17]
    fsm_status[10] = 0;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	74bb      	strb	r3, [r7, #18]
    fsm_status[11] = 0;
 8013d00:	2300      	movs	r3, #0
 8013d02:	74fb      	strb	r3, [r7, #19]
    fsm_status[12] = 0;
 8013d04:	2300      	movs	r3, #0
 8013d06:	753b      	strb	r3, [r7, #20]
    fsm_status[13] = 0;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	757b      	strb	r3, [r7, #21]
    fsm_status[14] = 0;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	75bb      	strb	r3, [r7, #22]
    fsm_status[15] = 0;
 8013d10:	2300      	movs	r3, #0
 8013d12:	75fb      	strb	r3, [r7, #23]
  }

  for (i = 0; i < 8; i++)
 8013d14:	2300      	movs	r3, #0
 8013d16:	61fb      	str	r3, [r7, #28]
 8013d18:	e010      	b.n	8013d3c <FSM_Handler+0x1a0>
  {
    if (fsm_status[i] != mem_fsm_status[i])
 8013d1a:	f107 0208 	add.w	r2, r7, #8
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	4413      	add	r3, r2
 8013d22:	781a      	ldrb	r2, [r3, #0]
 8013d24:	4920      	ldr	r1, [pc, #128]	; (8013da8 <FSM_Handler+0x20c>)
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	440b      	add	r3, r1
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d002      	beq.n	8013d36 <FSM_Handler+0x19a>
    {
      new_status = 1;
 8013d30:	2301      	movs	r3, #1
 8013d32:	76fb      	strb	r3, [r7, #27]
      break;
 8013d34:	e005      	b.n	8013d42 <FSM_Handler+0x1a6>
  for (i = 0; i < 8; i++)
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	61fb      	str	r3, [r7, #28]
 8013d3c:	69fb      	ldr	r3, [r7, #28]
 8013d3e:	2b07      	cmp	r3, #7
 8013d40:	ddeb      	ble.n	8013d1a <FSM_Handler+0x17e>
    }
  }

  if (new_status == 1)
 8013d42:	7efb      	ldrb	r3, [r7, #27]
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d127      	bne.n	8013d98 <FSM_Handler+0x1fc>
  {
    memcpy((void *)&Msg->Data[MsgIndex], (void *)&fsm_status, 16);
 8013d48:	4b18      	ldr	r3, [pc, #96]	; (8013dac <FSM_Handler+0x210>)
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4413      	add	r3, r2
 8013d52:	3304      	adds	r3, #4
 8013d54:	461d      	mov	r5, r3
 8013d56:	f107 0408 	add.w	r4, r7, #8
 8013d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d5c:	6028      	str	r0, [r5, #0]
 8013d5e:	6069      	str	r1, [r5, #4]
 8013d60:	60aa      	str	r2, [r5, #8]
 8013d62:	60eb      	str	r3, [r5, #12]
    memcpy((void *)&mem_fsm_status, (void *)fsm_status, 16);
 8013d64:	4b10      	ldr	r3, [pc, #64]	; (8013da8 <FSM_Handler+0x20c>)
 8013d66:	461c      	mov	r4, r3
 8013d68:	f107 0308 	add.w	r3, r7, #8
 8013d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    MsgIndex = MsgIndex + 16;
 8013d72:	4b0e      	ldr	r3, [pc, #56]	; (8013dac <FSM_Handler+0x210>)
 8013d74:	781b      	ldrb	r3, [r3, #0]
 8013d76:	3310      	adds	r3, #16
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	4b0c      	ldr	r3, [pc, #48]	; (8013dac <FSM_Handler+0x210>)
 8013d7c:	701a      	strb	r2, [r3, #0]

    NewData++;
 8013d7e:	4b0c      	ldr	r3, [pc, #48]	; (8013db0 <FSM_Handler+0x214>)
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	3301      	adds	r3, #1
 8013d84:	b2da      	uxtb	r2, r3
 8013d86:	4b0a      	ldr	r3, [pc, #40]	; (8013db0 <FSM_Handler+0x214>)
 8013d88:	701a      	strb	r2, [r3, #0]
    NewDataFlags |= 256U;
 8013d8a:	4b0a      	ldr	r3, [pc, #40]	; (8013db4 <FSM_Handler+0x218>)
 8013d8c:	881b      	ldrh	r3, [r3, #0]
 8013d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	4b07      	ldr	r3, [pc, #28]	; (8013db4 <FSM_Handler+0x218>)
 8013d96:	801a      	strh	r2, [r3, #0]
  }
}
 8013d98:	bf00      	nop
 8013d9a:	3720      	adds	r7, #32
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8013da0:	200001f4 	.word	0x200001f4
 8013da4:	200001f8 	.word	0x200001f8
 8013da8:	20000bc8 	.word	0x20000bc8
 8013dac:	20000bb4 	.word	0x20000bb4
 8013db0:	20000bb0 	.word	0x20000bb0
 8013db4:	20000bb2 	.word	0x20000bb2

08013db8 <RTC_Config>:
  * @brief  Configures the RTC
  * @param  None
  * @retval None
  */
static void RTC_Config(void)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	af00      	add	r7, sp, #0
  RtcHandle.Instance = RTC;
 8013dbc:	4b0f      	ldr	r3, [pc, #60]	; (8013dfc <RTC_Config+0x44>)
 8013dbe:	4a10      	ldr	r2, [pc, #64]	; (8013e00 <RTC_Config+0x48>)
 8013dc0:	601a      	str	r2, [r3, #0]
    - Synch Prediv   = Value according to source clock
    - OutPut         = Output Disable
    - OutPutPolarity = High Polarity
    - OutPutType     = Open Drain
   */
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_12;
 8013dc2:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <RTC_Config+0x44>)
 8013dc4:	2240      	movs	r2, #64	; 0x40
 8013dc6:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV_LSE;
 8013dc8:	4b0c      	ldr	r3, [pc, #48]	; (8013dfc <RTC_Config+0x44>)
 8013dca:	227f      	movs	r2, #127	; 0x7f
 8013dcc:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv    = RTC_SYNCH_PREDIV_LSE;
 8013dce:	4b0b      	ldr	r3, [pc, #44]	; (8013dfc <RTC_Config+0x44>)
 8013dd0:	22ff      	movs	r2, #255	; 0xff
 8013dd2:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8013dd4:	4b09      	ldr	r3, [pc, #36]	; (8013dfc <RTC_Config+0x44>)
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8013dda:	4b08      	ldr	r3, [pc, #32]	; (8013dfc <RTC_Config+0x44>)
 8013ddc:	2200      	movs	r2, #0
 8013dde:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8013de0:	4b06      	ldr	r3, [pc, #24]	; (8013dfc <RTC_Config+0x44>)
 8013de2:	2200      	movs	r2, #0
 8013de4:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&RtcHandle) != HAL_OK)
 8013de6:	4805      	ldr	r0, [pc, #20]	; (8013dfc <RTC_Config+0x44>)
 8013de8:	f7fb fb3a 	bl	800f460 <HAL_RTC_Init>
 8013dec:	4603      	mov	r3, r0
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <RTC_Config+0x3e>
  {
    /* Initialization Error */
    Error_Handler();
 8013df2:	f000 f8c4 	bl	8013f7e <Error_Handler>
  }
}
 8013df6:	bf00      	nop
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	20000b7c 	.word	0x20000b7c
 8013e00:	40002800 	.word	0x40002800

08013e04 <RTC_TimeStampConfig>:
  * @brief  Configures the current time and date
  * @param  None
  * @retval None
  */
static void RTC_TimeStampConfig(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af00      	add	r7, sp, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;

  /* Configure the Date using BCD format */
  /* Set Date: Monday January 1st 2000 */
  sdatestructure.Year    = 0x00;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	75fb      	strb	r3, [r7, #23]
  sdatestructure.Month   = RTC_MONTH_JANUARY;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	757b      	strb	r3, [r7, #21]
  sdatestructure.Date    = 0x01;
 8013e12:	2301      	movs	r3, #1
 8013e14:	75bb      	strb	r3, [r7, #22]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;
 8013e16:	2301      	movs	r3, #1
 8013e18:	753b      	strb	r3, [r7, #20]

  if (HAL_RTC_SetDate(&RtcHandle, &sdatestructure, FORMAT_BCD) != HAL_OK)
 8013e1a:	f107 0314 	add.w	r3, r7, #20
 8013e1e:	2201      	movs	r2, #1
 8013e20:	4619      	mov	r1, r3
 8013e22:	4811      	ldr	r0, [pc, #68]	; (8013e68 <RTC_TimeStampConfig+0x64>)
 8013e24:	f7fb fc34 	bl	800f690 <HAL_RTC_SetDate>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d001      	beq.n	8013e32 <RTC_TimeStampConfig+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
 8013e2e:	f000 f8a6 	bl	8013f7e <Error_Handler>
  }

  /* Configure the Time using BCD format */
  /* Set Time: 00:00:00 */
  stimestructure.Hours          = 0x00;
 8013e32:	2300      	movs	r3, #0
 8013e34:	703b      	strb	r3, [r7, #0]
  stimestructure.Minutes        = 0x00;
 8013e36:	2300      	movs	r3, #0
 8013e38:	707b      	strb	r3, [r7, #1]
  stimestructure.Seconds        = 0x00;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	70bb      	strb	r3, [r7, #2]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	70fb      	strb	r3, [r7, #3]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8013e42:	2300      	movs	r3, #0
 8013e44:	60fb      	str	r3, [r7, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8013e46:	2300      	movs	r3, #0
 8013e48:	613b      	str	r3, [r7, #16]

  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, FORMAT_BCD) != HAL_OK)
 8013e4a:	463b      	mov	r3, r7
 8013e4c:	2201      	movs	r2, #1
 8013e4e:	4619      	mov	r1, r3
 8013e50:	4805      	ldr	r0, [pc, #20]	; (8013e68 <RTC_TimeStampConfig+0x64>)
 8013e52:	f7fb fb80 	bl	800f556 <HAL_RTC_SetTime>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <RTC_TimeStampConfig+0x5c>
  {
    /* Initialization Error */
    Error_Handler();
 8013e5c:	f000 f88f 	bl	8013f7e <Error_Handler>
  }
}
 8013e60:	bf00      	nop
 8013e62:	3718      	adds	r7, #24
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	20000b7c 	.word	0x20000b7c

08013e6c <RTC_TimeRegulate>:
  * @param  mm the minute value to be set
  * @param  ss the second value to be set
  * @retval None
  */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b088      	sub	sp, #32
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	4603      	mov	r3, r0
 8013e74:	71fb      	strb	r3, [r7, #7]
 8013e76:	460b      	mov	r3, r1
 8013e78:	71bb      	strb	r3, [r7, #6]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	717b      	strb	r3, [r7, #5]

  RTC_TimeTypeDef stimestructure;

  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	73fb      	strb	r3, [r7, #15]
  stimestructure.Hours          = hh;
 8013e82:	79fb      	ldrb	r3, [r7, #7]
 8013e84:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 8013e86:	79bb      	ldrb	r3, [r7, #6]
 8013e88:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 8013e8a:	797b      	ldrb	r3, [r7, #5]
 8013e8c:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	613b      	str	r3, [r7, #16]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013e92:	2300      	movs	r3, #0
 8013e94:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8013e96:	2300      	movs	r3, #0
 8013e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, FORMAT_BIN) != HAL_OK)
 8013e9a:	f107 030c 	add.w	r3, r7, #12
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	4806      	ldr	r0, [pc, #24]	; (8013ebc <RTC_TimeRegulate+0x50>)
 8013ea4:	f7fb fb57 	bl	800f556 <HAL_RTC_SetTime>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d001      	beq.n	8013eb2 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8013eae:	f000 f866 	bl	8013f7e <Error_Handler>
  }
}
 8013eb2:	bf00      	nop
 8013eb4:	3720      	adds	r7, #32
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	20000b7c 	.word	0x20000b7c

08013ec0 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callbacks
 * @param  GPIOPin the pin connected to EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIOPin)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	80fb      	strh	r3, [r7, #6]
  int do_operation = 0;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	60fb      	str	r3, [r7, #12]
  uint32_t int_current_time2_local;

  if (GPIOPin == KEY_BUTTON_PIN)
 8013ece:	88fb      	ldrh	r3, [r7, #6]
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d13d      	bne.n	8013f50 <HAL_GPIO_EXTI_Callback+0x90>
  {
    int_current_time2_local = IntCurrentTime2;
 8013ed4:	4b20      	ldr	r3, [pc, #128]	; (8013f58 <HAL_GPIO_EXTI_Callback+0x98>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	60bb      	str	r3, [r7, #8]

    /* Manage software debouncing*/
    if (IntCurrentTime1 == 0U && int_current_time2_local == 0U)
 8013eda:	4b20      	ldr	r3, [pc, #128]	; (8013f5c <HAL_GPIO_EXTI_Callback+0x9c>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d10a      	bne.n	8013ef8 <HAL_GPIO_EXTI_Callback+0x38>
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d107      	bne.n	8013ef8 <HAL_GPIO_EXTI_Callback+0x38>
    {
      IntCurrentTime1 = HAL_GetTick();
 8013ee8:	f7f7 fafe 	bl	800b4e8 <HAL_GetTick>
 8013eec:	4603      	mov	r3, r0
 8013eee:	4a1b      	ldr	r2, [pc, #108]	; (8013f5c <HAL_GPIO_EXTI_Callback+0x9c>)
 8013ef0:	6013      	str	r3, [r2, #0]
      do_operation = 1;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	60fb      	str	r3, [r7, #12]
 8013ef6:	e014      	b.n	8013f22 <HAL_GPIO_EXTI_Callback+0x62>
    }
    else
    {
      IntCurrentTime2 = HAL_GetTick();
 8013ef8:	f7f7 faf6 	bl	800b4e8 <HAL_GetTick>
 8013efc:	4603      	mov	r3, r0
 8013efe:	4a16      	ldr	r2, [pc, #88]	; (8013f58 <HAL_GPIO_EXTI_Callback+0x98>)
 8013f00:	6013      	str	r3, [r2, #0]
      int_current_time2_local = IntCurrentTime2;
 8013f02:	4b15      	ldr	r3, [pc, #84]	; (8013f58 <HAL_GPIO_EXTI_Callback+0x98>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	60bb      	str	r3, [r7, #8]

      /* If I receive a button interrupt after more than 300 ms from the first one I get it, otherwise I discard it */
      if ((int_current_time2_local - IntCurrentTime1) > 300U)
 8013f08:	4b14      	ldr	r3, [pc, #80]	; (8013f5c <HAL_GPIO_EXTI_Callback+0x9c>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	68ba      	ldr	r2, [r7, #8]
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013f14:	d905      	bls.n	8013f22 <HAL_GPIO_EXTI_Callback+0x62>
      {
        IntCurrentTime1 = IntCurrentTime2;
 8013f16:	4b10      	ldr	r3, [pc, #64]	; (8013f58 <HAL_GPIO_EXTI_Callback+0x98>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4a10      	ldr	r2, [pc, #64]	; (8013f5c <HAL_GPIO_EXTI_Callback+0x9c>)
 8013f1c:	6013      	str	r3, [r2, #0]
        do_operation = 1;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	60fb      	str	r3, [r7, #12]
      }
    }

    if (do_operation != 0)
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d013      	beq.n	8013f50 <HAL_GPIO_EXTI_Callback+0x90>
    {
      if (DataLoggerActive != 0U)
 8013f28:	4b0d      	ldr	r3, [pc, #52]	; (8013f60 <HAL_GPIO_EXTI_Callback+0xa0>)
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d003      	beq.n	8013f3a <HAL_GPIO_EXTI_Callback+0x7a>
      {
        TerminalActive = 0; /* always off */
 8013f32:	4b0c      	ldr	r3, [pc, #48]	; (8013f64 <HAL_GPIO_EXTI_Callback+0xa4>)
 8013f34:	2200      	movs	r2, #0
 8013f36:	701a      	strb	r2, [r3, #0]
      {
        TerminalActive = (TerminalActive != 0U) ? 0U : 1U; /* toggle on each button pressed */
      }
    }
  }
}
 8013f38:	e00a      	b.n	8013f50 <HAL_GPIO_EXTI_Callback+0x90>
        TerminalActive = (TerminalActive != 0U) ? 0U : 1U; /* toggle on each button pressed */
 8013f3a:	4b0a      	ldr	r3, [pc, #40]	; (8013f64 <HAL_GPIO_EXTI_Callback+0xa4>)
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	bf0c      	ite	eq
 8013f44:	2301      	moveq	r3, #1
 8013f46:	2300      	movne	r3, #0
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	4b05      	ldr	r3, [pc, #20]	; (8013f64 <HAL_GPIO_EXTI_Callback+0xa4>)
 8013f4e:	701a      	strb	r2, [r3, #0]
}
 8013f50:	bf00      	nop
 8013f52:	3710      	adds	r7, #16
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	20000ba8 	.word	0x20000ba8
 8013f5c:	20000ba4 	.word	0x20000ba4
 8013f60:	20000a68 	.word	0x20000a68
 8013f64:	20000ba0 	.word	0x20000ba0

08013f68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
    CDC_TIM_PeriodElapsedCallback(htim);
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f001 fd3f 	bl	80159f4 <CDC_TIM_PeriodElapsedCallback>
}
 8013f76:	bf00      	nop
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8013f7e:	b480      	push	{r7}
 8013f80:	af00      	add	r7, sp, #0
  while (1)
 8013f82:	e7fe      	b.n	8013f82 <Error_Handler+0x4>

08013f84 <DWT_Delay_Init>:
/**
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_GetTickUS function
 * @retval Error DWT counter (1: clock cycle counter not started, 0: clock cycle counter works)
 */
static uint32_t DWT_Delay_Init(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8013f88:	4b13      	ldr	r3, [pc, #76]	; (8013fd8 <DWT_Delay_Init+0x54>)
 8013f8a:	68db      	ldr	r3, [r3, #12]
 8013f8c:	4a12      	ldr	r2, [pc, #72]	; (8013fd8 <DWT_Delay_Init+0x54>)
 8013f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013f92:	60d3      	str	r3, [r2, #12]

  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013f94:	4b10      	ldr	r3, [pc, #64]	; (8013fd8 <DWT_Delay_Init+0x54>)
 8013f96:	68db      	ldr	r3, [r3, #12]
 8013f98:	4a0f      	ldr	r2, [pc, #60]	; (8013fd8 <DWT_Delay_Init+0x54>)
 8013f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013f9e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8013fa0:	4b0e      	ldr	r3, [pc, #56]	; (8013fdc <DWT_Delay_Init+0x58>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	4a0d      	ldr	r2, [pc, #52]	; (8013fdc <DWT_Delay_Init+0x58>)
 8013fa6:	f023 0301 	bic.w	r3, r3, #1
 8013faa:	6013      	str	r3, [r2, #0]

  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8013fac:	4b0b      	ldr	r3, [pc, #44]	; (8013fdc <DWT_Delay_Init+0x58>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4a0a      	ldr	r2, [pc, #40]	; (8013fdc <DWT_Delay_Init+0x58>)
 8013fb2:	f043 0301 	orr.w	r3, r3, #1
 8013fb6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8013fb8:	4b08      	ldr	r3, [pc, #32]	; (8013fdc <DWT_Delay_Init+0x58>)
 8013fba:	2200      	movs	r2, #0
 8013fbc:	605a      	str	r2, [r3, #4]

  /* Delay 1ms */
  HAL_Delay(1);
 8013fbe:	2001      	movs	r0, #1
 8013fc0:	f7f7 fa9e 	bl	800b500 <HAL_Delay>

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8013fc4:	4b05      	ldr	r3, [pc, #20]	; (8013fdc <DWT_Delay_Init+0x58>)
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <DWT_Delay_Init+0x4c>
  {
     return 0; /* Clock cycle counter started */
 8013fcc:	2300      	movs	r3, #0
 8013fce:	e000      	b.n	8013fd2 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /* Clock cycle counter not started */
 8013fd0:	2301      	movs	r3, #1
  }
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	e000edf0 	.word	0xe000edf0
 8013fdc:	e0001000 	.word	0xe0001000

08013fe0 <DWT_GetTickUS>:
 * @brief  Get relative time in micro seconds
 * @note   Call at least every 2^32 cycles. Do not call from interrupt context!
 * @retval Relative time in micro seconds
 */
uint32_t DWT_GetTickUS(void)
{
 8013fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013fe4:	b082      	sub	sp, #8
 8013fe6:	af00      	add	r7, sp, #0
  static uint64_t last_cycle_count_64 = 0;
  uint32_t clock_MHz = HAL_RCC_GetHCLKFreq() / 1000000;
 8013fe8:	f7fa fbce 	bl	800e788 <HAL_RCC_GetHCLKFreq>
 8013fec:	4603      	mov	r3, r0
 8013fee:	4a16      	ldr	r2, [pc, #88]	; (8014048 <DWT_GetTickUS+0x68>)
 8013ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8013ff4:	0c9b      	lsrs	r3, r3, #18
 8013ff6:	607b      	str	r3, [r7, #4]

  last_cycle_count_64 += DWT->CYCCNT - (uint32_t)(last_cycle_count_64);
 8013ff8:	4b14      	ldr	r3, [pc, #80]	; (801404c <DWT_GetTickUS+0x6c>)
 8013ffa:	6859      	ldr	r1, [r3, #4]
 8013ffc:	4b14      	ldr	r3, [pc, #80]	; (8014050 <DWT_GetTickUS+0x70>)
 8013ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014002:	4613      	mov	r3, r2
 8014004:	1acb      	subs	r3, r1, r3
 8014006:	2200      	movs	r2, #0
 8014008:	461c      	mov	r4, r3
 801400a:	4615      	mov	r5, r2
 801400c:	4b10      	ldr	r3, [pc, #64]	; (8014050 <DWT_GetTickUS+0x70>)
 801400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014012:	eb14 0802 	adds.w	r8, r4, r2
 8014016:	eb45 0903 	adc.w	r9, r5, r3
 801401a:	4b0d      	ldr	r3, [pc, #52]	; (8014050 <DWT_GetTickUS+0x70>)
 801401c:	e9c3 8900 	strd	r8, r9, [r3]

  return (uint32_t)(last_cycle_count_64 / clock_MHz);
 8014020:	4b0b      	ldr	r3, [pc, #44]	; (8014050 <DWT_GetTickUS+0x70>)
 8014022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2200      	movs	r2, #0
 801402a:	469a      	mov	sl, r3
 801402c:	4693      	mov	fp, r2
 801402e:	4652      	mov	r2, sl
 8014030:	465b      	mov	r3, fp
 8014032:	f7ec fdd1 	bl	8000bd8 <__aeabi_uldivmod>
 8014036:	4602      	mov	r2, r0
 8014038:	460b      	mov	r3, r1
 801403a:	4613      	mov	r3, r2
}
 801403c:	4618      	mov	r0, r3
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014046:	bf00      	nop
 8014048:	431bde83 	.word	0x431bde83
 801404c:	e0001000 	.word	0xe0001000
 8014050:	20000bd8 	.word	0x20000bd8

08014054 <Handle_Sensor_command>:
  * @brief  Handle Sensors command
  * @param  Msg the pointer to the message to be handled
  * @retval 1 if the message is correctly handled, 0 otherwise
  */
int Handle_Sensor_command(TMsg *Msg)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b084      	sub	sp, #16
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 int ret;

  /* Commands */
  switch (Msg->Data[3])
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	79db      	ldrb	r3, [r3, #7]
 8014060:	3b01      	subs	r3, #1
 8014062:	2b1e      	cmp	r3, #30
 8014064:	d877      	bhi.n	8014156 <Handle_Sensor_command+0x102>
 8014066:	a201      	add	r2, pc, #4	; (adr r2, 801406c <Handle_Sensor_command+0x18>)
 8014068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801406c:	080140e9 	.word	0x080140e9
 8014070:	080140f3 	.word	0x080140f3
 8014074:	080140fd 	.word	0x080140fd
 8014078:	08014107 	.word	0x08014107
 801407c:	08014111 	.word	0x08014111
 8014080:	08014125 	.word	0x08014125
 8014084:	0801412f 	.word	0x0801412f
 8014088:	08014157 	.word	0x08014157
 801408c:	08014157 	.word	0x08014157
 8014090:	08014157 	.word	0x08014157
 8014094:	08014157 	.word	0x08014157
 8014098:	08014157 	.word	0x08014157
 801409c:	08014157 	.word	0x08014157
 80140a0:	08014157 	.word	0x08014157
 80140a4:	08014157 	.word	0x08014157
 80140a8:	08014157 	.word	0x08014157
 80140ac:	08014157 	.word	0x08014157
 80140b0:	08014157 	.word	0x08014157
 80140b4:	08014157 	.word	0x08014157
 80140b8:	08014143 	.word	0x08014143
 80140bc:	0801414d 	.word	0x0801414d
 80140c0:	08014157 	.word	0x08014157
 80140c4:	08014157 	.word	0x08014157
 80140c8:	08014157 	.word	0x08014157
 80140cc:	08014157 	.word	0x08014157
 80140d0:	08014157 	.word	0x08014157
 80140d4:	08014157 	.word	0x08014157
 80140d8:	08014157 	.word	0x08014157
 80140dc:	08014157 	.word	0x08014157
 80140e0:	0801411b 	.word	0x0801411b
 80140e4:	08014139 	.word	0x08014139
  {
    case SC_GET_SENSOR_NAME:
      ret = SC_Get_Sensor_Name(Msg);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 f83d 	bl	8014168 <SC_Get_Sensor_Name>
 80140ee:	60f8      	str	r0, [r7, #12]
      break;
 80140f0:	e034      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_READ_REGISTER:
      ret = SC_Read_Register(Msg);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 f8c6 	bl	8014284 <SC_Read_Register>
 80140f8:	60f8      	str	r0, [r7, #12]
      break;
 80140fa:	e02f      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_WRITE_REGISTER:
      ret = SC_Write_Register(Msg);
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 f961 	bl	80143c4 <SC_Write_Register>
 8014102:	60f8      	str	r0, [r7, #12]
      break;
 8014104:	e02a      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_GET_FULL_SCALE_LIST:
      ret = SC_Get_Full_Scale_List(Msg);
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 f9f8 	bl	80144fc <SC_Get_Full_Scale_List>
 801410c:	60f8      	str	r0, [r7, #12]
      break;
 801410e:	e025      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_SET_FULL_SCALE:
      ret = SC_Set_Full_Scale(Msg);
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 fa71 	bl	80145f8 <SC_Set_Full_Scale>
 8014116:	60f8      	str	r0, [r7, #12]
      break;
 8014118:	e020      	b.n	801415c <Handle_Sensor_command+0x108>
      
    case SC_GET_FULL_SCALE:
      ret = SC_Get_Full_Scale(Msg);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fad6 	bl	80146cc <SC_Get_Full_Scale>
 8014120:	60f8      	str	r0, [r7, #12]
      break;
 8014122:	e01b      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_GET_ODR_LIST:
      ret = SC_Get_ODR_List(Msg);
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 fb3f 	bl	80147a8 <SC_Get_ODR_List>
 801412a:	60f8      	str	r0, [r7, #12]
      break;
 801412c:	e016      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_SET_ODR:
      ret = SC_Set_ODR(Msg);
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 fbbe 	bl	80148b0 <SC_Set_ODR>
 8014134:	60f8      	str	r0, [r7, #12]
      break;
 8014136:	e011      	b.n	801415c <Handle_Sensor_command+0x108>
      
    case SC_GET_ODR:
      ret = SC_Get_ODR(Msg);
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 fc67 	bl	8014a0c <SC_Get_ODR>
 801413e:	60f8      	str	r0, [r7, #12]
      break;
 8014140:	e00c      	b.n	801415c <Handle_Sensor_command+0x108>
      
    case SC_GET_SENSOR_LIST:
      ret = SC_Get_Sensor_List(Msg);
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fd04 	bl	8014b50 <SC_Get_Sensor_List>
 8014148:	60f8      	str	r0, [r7, #12]
      break;
 801414a:	e007      	b.n	801415c <Handle_Sensor_command+0x108>

    case SC_SET_SENSOR_INDEX:
      ret = SC_Set_Sensor_Index(Msg);
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fe87 	bl	8014e60 <SC_Set_Sensor_Index>
 8014152:	60f8      	str	r0, [r7, #12]
      break;
 8014154:	e002      	b.n	801415c <Handle_Sensor_command+0x108>

    default:
      ret = 0;
 8014156:	2300      	movs	r3, #0
 8014158:	60fb      	str	r3, [r7, #12]
      break;
 801415a:	bf00      	nop
  }

  return ret;
 801415c:	68fb      	ldr	r3, [r7, #12]
}
 801415e:	4618      	mov	r0, r3
 8014160:	3710      	adds	r7, #16
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop

08014168 <SC_Get_Sensor_Name>:
 * @brief  Get sensor name
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Get_Sensor_Name(TMsg *Msg)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b084      	sub	sp, #16
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8014170:	2301      	movs	r3, #1
 8014172:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	7a1b      	ldrb	r3, [r3, #8]
 8014178:	3b01      	subs	r3, #1
 801417a:	2b05      	cmp	r3, #5
 801417c:	d862      	bhi.n	8014244 <SC_Get_Sensor_Name+0xdc>
 801417e:	a201      	add	r2, pc, #4	; (adr r2, 8014184 <SC_Get_Sensor_Name+0x1c>)
 8014180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014184:	0801419d 	.word	0x0801419d
 8014188:	080141b9 	.word	0x080141b9
 801418c:	080141d5 	.word	0x080141d5
 8014190:	080141f1 	.word	0x080141f1
 8014194:	0801420d 	.word	0x0801420d
 8014198:	08014229 	.word	0x08014229
  {
    case SC_ACCELEROMETER:
      Send_Sensor_Name(Msg, AccNameList[AccIndex]);
 801419c:	4b2d      	ldr	r3, [pc, #180]	; (8014254 <SC_Get_Sensor_Name+0xec>)
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	461a      	mov	r2, r3
 80141a2:	4613      	mov	r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	4413      	add	r3, r2
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	4a2b      	ldr	r2, [pc, #172]	; (8014258 <SC_Get_Sensor_Name+0xf0>)
 80141ac:	4413      	add	r3, r2
 80141ae:	4619      	mov	r1, r3
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 ffd3 	bl	801515c <Send_Sensor_Name>
      break;
 80141b6:	e048      	b.n	801424a <SC_Get_Sensor_Name+0xe2>

    case SC_GYROSCOPE:
      Send_Sensor_Name(Msg, GyrNameList[GyrIndex]);
 80141b8:	4b28      	ldr	r3, [pc, #160]	; (801425c <SC_Get_Sensor_Name+0xf4>)
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	461a      	mov	r2, r3
 80141be:	4613      	mov	r3, r2
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	4413      	add	r3, r2
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	4a26      	ldr	r2, [pc, #152]	; (8014260 <SC_Get_Sensor_Name+0xf8>)
 80141c8:	4413      	add	r3, r2
 80141ca:	4619      	mov	r1, r3
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 ffc5 	bl	801515c <Send_Sensor_Name>
      break;
 80141d2:	e03a      	b.n	801424a <SC_Get_Sensor_Name+0xe2>

    case SC_MAGNETOMETER:
      Send_Sensor_Name(Msg, MagNameList[MagIndex]);
 80141d4:	4b23      	ldr	r3, [pc, #140]	; (8014264 <SC_Get_Sensor_Name+0xfc>)
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	461a      	mov	r2, r3
 80141da:	4613      	mov	r3, r2
 80141dc:	009b      	lsls	r3, r3, #2
 80141de:	4413      	add	r3, r2
 80141e0:	005b      	lsls	r3, r3, #1
 80141e2:	4a21      	ldr	r2, [pc, #132]	; (8014268 <SC_Get_Sensor_Name+0x100>)
 80141e4:	4413      	add	r3, r2
 80141e6:	4619      	mov	r1, r3
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 ffb7 	bl	801515c <Send_Sensor_Name>
      break;
 80141ee:	e02c      	b.n	801424a <SC_Get_Sensor_Name+0xe2>

    case SC_TEMPERATURE:
      Send_Sensor_Name(Msg, TmpNameList[TmpIndex]);
 80141f0:	4b1e      	ldr	r3, [pc, #120]	; (801426c <SC_Get_Sensor_Name+0x104>)
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	461a      	mov	r2, r3
 80141f6:	4613      	mov	r3, r2
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	4413      	add	r3, r2
 80141fc:	005b      	lsls	r3, r3, #1
 80141fe:	4a1c      	ldr	r2, [pc, #112]	; (8014270 <SC_Get_Sensor_Name+0x108>)
 8014200:	4413      	add	r3, r2
 8014202:	4619      	mov	r1, r3
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f000 ffa9 	bl	801515c <Send_Sensor_Name>
      break;
 801420a:	e01e      	b.n	801424a <SC_Get_Sensor_Name+0xe2>

    case SC_HUMIDITY:
      Send_Sensor_Name(Msg, HumNameList[HumIndex]);
 801420c:	4b19      	ldr	r3, [pc, #100]	; (8014274 <SC_Get_Sensor_Name+0x10c>)
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	461a      	mov	r2, r3
 8014212:	4613      	mov	r3, r2
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	4413      	add	r3, r2
 8014218:	005b      	lsls	r3, r3, #1
 801421a:	4a17      	ldr	r2, [pc, #92]	; (8014278 <SC_Get_Sensor_Name+0x110>)
 801421c:	4413      	add	r3, r2
 801421e:	4619      	mov	r1, r3
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 ff9b 	bl	801515c <Send_Sensor_Name>
      break;
 8014226:	e010      	b.n	801424a <SC_Get_Sensor_Name+0xe2>

    case SC_PRESSURE:
      Send_Sensor_Name(Msg, PrsNameList[PrsIndex]);
 8014228:	4b14      	ldr	r3, [pc, #80]	; (801427c <SC_Get_Sensor_Name+0x114>)
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	461a      	mov	r2, r3
 801422e:	4613      	mov	r3, r2
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	4413      	add	r3, r2
 8014234:	005b      	lsls	r3, r3, #1
 8014236:	4a12      	ldr	r2, [pc, #72]	; (8014280 <SC_Get_Sensor_Name+0x118>)
 8014238:	4413      	add	r3, r2
 801423a:	4619      	mov	r1, r3
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 ff8d 	bl	801515c <Send_Sensor_Name>
      break;
 8014242:	e002      	b.n	801424a <SC_Get_Sensor_Name+0xe2>

    default:
      ret = 0;
 8014244:	2300      	movs	r3, #0
 8014246:	60fb      	str	r3, [r7, #12]
      break;
 8014248:	bf00      	nop
  }

  return ret;
 801424a:	68fb      	ldr	r3, [r7, #12]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3710      	adds	r7, #16
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}
 8014254:	20000c77 	.word	0x20000c77
 8014258:	20000204 	.word	0x20000204
 801425c:	20000c78 	.word	0x20000c78
 8014260:	20000224 	.word	0x20000224
 8014264:	20000c79 	.word	0x20000c79
 8014268:	20000230 	.word	0x20000230
 801426c:	20000c7b 	.word	0x20000c7b
 8014270:	20000248 	.word	0x20000248
 8014274:	20000c7a 	.word	0x20000c7a
 8014278:	2000023c 	.word	0x2000023c
 801427c:	20000c7c 	.word	0x20000c7c
 8014280:	20000268 	.word	0x20000268

08014284 <SC_Read_Register>:
 * @brief  Read sensor register
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Read_Register(TMsg *Msg)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b084      	sub	sp, #16
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  uint8_t reg_value = 0;
 801428c:	2300      	movs	r3, #0
 801428e:	72fb      	strb	r3, [r7, #11]
  int ret = 1;
 8014290:	2301      	movs	r3, #1
 8014292:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	7a1b      	ldrb	r3, [r3, #8]
 8014298:	3b01      	subs	r3, #1
 801429a:	2b05      	cmp	r3, #5
 801429c:	d862      	bhi.n	8014364 <SC_Read_Register+0xe0>
 801429e:	a201      	add	r2, pc, #4	; (adr r2, 80142a4 <SC_Read_Register+0x20>)
 80142a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a4:	080142bd 	.word	0x080142bd
 80142a8:	080142d9 	.word	0x080142d9
 80142ac:	080142f5 	.word	0x080142f5
 80142b0:	08014311 	.word	0x08014311
 80142b4:	0801432d 	.word	0x0801432d
 80142b8:	08014349 	.word	0x08014349
  {
    case SC_ACCELEROMETER:
      if (BSP_MOTION_SENSOR_Read_Register(AccInstance, Msg->Data[5], &reg_value) != BSP_ERROR_NONE)
 80142bc:	4b3b      	ldr	r3, [pc, #236]	; (80143ac <SC_Read_Register+0x128>)
 80142be:	6818      	ldr	r0, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	7a5b      	ldrb	r3, [r3, #9]
 80142c4:	f107 020b 	add.w	r2, r7, #11
 80142c8:	4619      	mov	r1, r3
 80142ca:	f7f6 ffc1 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d04a      	beq.n	801436a <SC_Read_Register+0xe6>
      {
        return 0;
 80142d4:	2300      	movs	r3, #0
 80142d6:	e065      	b.n	80143a4 <SC_Read_Register+0x120>
      }
      break;

    case SC_GYROSCOPE:
      if (BSP_MOTION_SENSOR_Read_Register(GyrInstance, Msg->Data[5], &reg_value) != BSP_ERROR_NONE)
 80142d8:	4b35      	ldr	r3, [pc, #212]	; (80143b0 <SC_Read_Register+0x12c>)
 80142da:	6818      	ldr	r0, [r3, #0]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	7a5b      	ldrb	r3, [r3, #9]
 80142e0:	f107 020b 	add.w	r2, r7, #11
 80142e4:	4619      	mov	r1, r3
 80142e6:	f7f6 ffb3 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d03e      	beq.n	801436e <SC_Read_Register+0xea>
      {
        return 0;
 80142f0:	2300      	movs	r3, #0
 80142f2:	e057      	b.n	80143a4 <SC_Read_Register+0x120>
      }
      break;

    case SC_MAGNETOMETER:
      if (BSP_MOTION_SENSOR_Read_Register(MagInstance, Msg->Data[5], &reg_value) != BSP_ERROR_NONE)
 80142f4:	4b2f      	ldr	r3, [pc, #188]	; (80143b4 <SC_Read_Register+0x130>)
 80142f6:	6818      	ldr	r0, [r3, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	7a5b      	ldrb	r3, [r3, #9]
 80142fc:	f107 020b 	add.w	r2, r7, #11
 8014300:	4619      	mov	r1, r3
 8014302:	f7f6 ffa5 	bl	800b250 <BSP_MOTION_SENSOR_Read_Register>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d032      	beq.n	8014372 <SC_Read_Register+0xee>
      {
        return 0;
 801430c:	2300      	movs	r3, #0
 801430e:	e049      	b.n	80143a4 <SC_Read_Register+0x120>
      }
      break;

    case SC_TEMPERATURE:
      if (BSP_ENV_SENSOR_Read_Register(TmpInstance, Msg->Data[5], &reg_value) != BSP_ERROR_NONE)
 8014310:	4b29      	ldr	r3, [pc, #164]	; (80143b8 <SC_Read_Register+0x134>)
 8014312:	6818      	ldr	r0, [r3, #0]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	7a5b      	ldrb	r3, [r3, #9]
 8014318:	f107 020b 	add.w	r2, r7, #11
 801431c:	4619      	mov	r1, r3
 801431e:	f7f5 fcfb 	bl	8009d18 <BSP_ENV_SENSOR_Read_Register>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d026      	beq.n	8014376 <SC_Read_Register+0xf2>
      {
        return 0;
 8014328:	2300      	movs	r3, #0
 801432a:	e03b      	b.n	80143a4 <SC_Read_Register+0x120>
      }
      break;

    case SC_HUMIDITY:
      if (BSP_ENV_SENSOR_Read_Register(HumInstance, Msg->Data[5], &reg_value) != BSP_ERROR_NONE)
 801432c:	4b23      	ldr	r3, [pc, #140]	; (80143bc <SC_Read_Register+0x138>)
 801432e:	6818      	ldr	r0, [r3, #0]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	7a5b      	ldrb	r3, [r3, #9]
 8014334:	f107 020b 	add.w	r2, r7, #11
 8014338:	4619      	mov	r1, r3
 801433a:	f7f5 fced 	bl	8009d18 <BSP_ENV_SENSOR_Read_Register>
 801433e:	4603      	mov	r3, r0
 8014340:	2b00      	cmp	r3, #0
 8014342:	d01a      	beq.n	801437a <SC_Read_Register+0xf6>
      {
        return 0;
 8014344:	2300      	movs	r3, #0
 8014346:	e02d      	b.n	80143a4 <SC_Read_Register+0x120>
      }
      break;

    case SC_PRESSURE:
      if (BSP_ENV_SENSOR_Read_Register(PrsInstance, Msg->Data[5], &reg_value) != BSP_ERROR_NONE)
 8014348:	4b1d      	ldr	r3, [pc, #116]	; (80143c0 <SC_Read_Register+0x13c>)
 801434a:	6818      	ldr	r0, [r3, #0]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	7a5b      	ldrb	r3, [r3, #9]
 8014350:	f107 020b 	add.w	r2, r7, #11
 8014354:	4619      	mov	r1, r3
 8014356:	f7f5 fcdf 	bl	8009d18 <BSP_ENV_SENSOR_Read_Register>
 801435a:	4603      	mov	r3, r0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00e      	beq.n	801437e <SC_Read_Register+0xfa>
      {
        return 0;
 8014360:	2300      	movs	r3, #0
 8014362:	e01f      	b.n	80143a4 <SC_Read_Register+0x120>
      }
      break;

    default:
      ret = 0;
 8014364:	2300      	movs	r3, #0
 8014366:	60fb      	str	r3, [r7, #12]
      break;
 8014368:	e00a      	b.n	8014380 <SC_Read_Register+0xfc>
      break;
 801436a:	bf00      	nop
 801436c:	e008      	b.n	8014380 <SC_Read_Register+0xfc>
      break;
 801436e:	bf00      	nop
 8014370:	e006      	b.n	8014380 <SC_Read_Register+0xfc>
      break;
 8014372:	bf00      	nop
 8014374:	e004      	b.n	8014380 <SC_Read_Register+0xfc>
      break;
 8014376:	bf00      	nop
 8014378:	e002      	b.n	8014380 <SC_Read_Register+0xfc>
      break;
 801437a:	bf00      	nop
 801437c:	e000      	b.n	8014380 <SC_Read_Register+0xfc>
      break;
 801437e:	bf00      	nop
  }

  if (ret == 0)
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <SC_Read_Register+0x106>
  {
    return ret;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	e00c      	b.n	80143a4 <SC_Read_Register+0x120>
  }

  BUILD_REPLY_HEADER(Msg);
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f7fe fa96 	bl	80128bc <BUILD_REPLY_HEADER>
  Msg->Data[6] = reg_value;
 8014390:	7afa      	ldrb	r2, [r7, #11]
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	729a      	strb	r2, [r3, #10]
  Msg->Len = 7;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2207      	movs	r2, #7
 801439a:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f001 ff8d 	bl	80162bc <VCOM_send_MSG>
  return 1;
 80143a2:	2301      	movs	r3, #1
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3710      	adds	r7, #16
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	200001f4 	.word	0x200001f4
 80143b0:	200001f8 	.word	0x200001f8
 80143b4:	200001fc 	.word	0x200001fc
 80143b8:	20000be4 	.word	0x20000be4
 80143bc:	20000be0 	.word	0x20000be0
 80143c0:	20000200 	.word	0x20000200

080143c4 <SC_Write_Register>:
 * @brief  Write to sensor register
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
int SC_Write_Register(TMsg *Msg)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  int ret = 1;
 80143cc:	2301      	movs	r3, #1
 80143ce:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	7a1b      	ldrb	r3, [r3, #8]
 80143d4:	3b01      	subs	r3, #1
 80143d6:	2b05      	cmp	r3, #5
 80143d8:	d862      	bhi.n	80144a0 <SC_Write_Register+0xdc>
 80143da:	a201      	add	r2, pc, #4	; (adr r2, 80143e0 <SC_Write_Register+0x1c>)
 80143dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e0:	080143f9 	.word	0x080143f9
 80143e4:	08014415 	.word	0x08014415
 80143e8:	08014431 	.word	0x08014431
 80143ec:	0801444d 	.word	0x0801444d
 80143f0:	08014469 	.word	0x08014469
 80143f4:	08014485 	.word	0x08014485
  {
    case SC_ACCELEROMETER:
      if (BSP_MOTION_SENSOR_Write_Register(AccInstance, Msg->Data[5], Msg->Data[6]) != BSP_ERROR_NONE)
 80143f8:	4b3a      	ldr	r3, [pc, #232]	; (80144e4 <SC_Write_Register+0x120>)
 80143fa:	6818      	ldr	r0, [r3, #0]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	7a59      	ldrb	r1, [r3, #9]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	7a9b      	ldrb	r3, [r3, #10]
 8014404:	461a      	mov	r2, r3
 8014406:	f7f6 ff91 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d04a      	beq.n	80144a6 <SC_Write_Register+0xe2>
      {
        return 0;
 8014410:	2300      	movs	r3, #0
 8014412:	e062      	b.n	80144da <SC_Write_Register+0x116>
      }
      break;

    case SC_GYROSCOPE:
      if (BSP_MOTION_SENSOR_Write_Register(GyrInstance, Msg->Data[5], Msg->Data[6]) != BSP_ERROR_NONE)
 8014414:	4b34      	ldr	r3, [pc, #208]	; (80144e8 <SC_Write_Register+0x124>)
 8014416:	6818      	ldr	r0, [r3, #0]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	7a59      	ldrb	r1, [r3, #9]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	7a9b      	ldrb	r3, [r3, #10]
 8014420:	461a      	mov	r2, r3
 8014422:	f7f6 ff83 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d03e      	beq.n	80144aa <SC_Write_Register+0xe6>
      {
        return 0;
 801442c:	2300      	movs	r3, #0
 801442e:	e054      	b.n	80144da <SC_Write_Register+0x116>
      }
      break;

    case SC_MAGNETOMETER:
      if (BSP_MOTION_SENSOR_Write_Register(MagInstance, Msg->Data[5], Msg->Data[6]) != BSP_ERROR_NONE)
 8014430:	4b2e      	ldr	r3, [pc, #184]	; (80144ec <SC_Write_Register+0x128>)
 8014432:	6818      	ldr	r0, [r3, #0]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	7a59      	ldrb	r1, [r3, #9]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	7a9b      	ldrb	r3, [r3, #10]
 801443c:	461a      	mov	r2, r3
 801443e:	f7f6 ff75 	bl	800b32c <BSP_MOTION_SENSOR_Write_Register>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d032      	beq.n	80144ae <SC_Write_Register+0xea>
      {
        return 0;
 8014448:	2300      	movs	r3, #0
 801444a:	e046      	b.n	80144da <SC_Write_Register+0x116>
      }
      break;

    case SC_TEMPERATURE:
      if (BSP_ENV_SENSOR_Write_Register(TmpInstance, Msg->Data[5], Msg->Data[6]) != BSP_ERROR_NONE)
 801444c:	4b28      	ldr	r3, [pc, #160]	; (80144f0 <SC_Write_Register+0x12c>)
 801444e:	6818      	ldr	r0, [r3, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	7a59      	ldrb	r1, [r3, #9]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	7a9b      	ldrb	r3, [r3, #10]
 8014458:	461a      	mov	r2, r3
 801445a:	f7f5 fcb5 	bl	8009dc8 <BSP_ENV_SENSOR_Write_Register>
 801445e:	4603      	mov	r3, r0
 8014460:	2b00      	cmp	r3, #0
 8014462:	d026      	beq.n	80144b2 <SC_Write_Register+0xee>
      {
        return 0;
 8014464:	2300      	movs	r3, #0
 8014466:	e038      	b.n	80144da <SC_Write_Register+0x116>
      }
      break;

    case SC_HUMIDITY:
      if (BSP_ENV_SENSOR_Write_Register(HumInstance, Msg->Data[5], Msg->Data[6]) != BSP_ERROR_NONE)
 8014468:	4b22      	ldr	r3, [pc, #136]	; (80144f4 <SC_Write_Register+0x130>)
 801446a:	6818      	ldr	r0, [r3, #0]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	7a59      	ldrb	r1, [r3, #9]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	7a9b      	ldrb	r3, [r3, #10]
 8014474:	461a      	mov	r2, r3
 8014476:	f7f5 fca7 	bl	8009dc8 <BSP_ENV_SENSOR_Write_Register>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d01a      	beq.n	80144b6 <SC_Write_Register+0xf2>
      {
        return 0;
 8014480:	2300      	movs	r3, #0
 8014482:	e02a      	b.n	80144da <SC_Write_Register+0x116>
      }
      break;

    case SC_PRESSURE:
      if (BSP_ENV_SENSOR_Write_Register(PrsInstance, Msg->Data[5], Msg->Data[6]) != BSP_ERROR_NONE)
 8014484:	4b1c      	ldr	r3, [pc, #112]	; (80144f8 <SC_Write_Register+0x134>)
 8014486:	6818      	ldr	r0, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	7a59      	ldrb	r1, [r3, #9]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	7a9b      	ldrb	r3, [r3, #10]
 8014490:	461a      	mov	r2, r3
 8014492:	f7f5 fc99 	bl	8009dc8 <BSP_ENV_SENSOR_Write_Register>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d00e      	beq.n	80144ba <SC_Write_Register+0xf6>
      {
        return 0;
 801449c:	2300      	movs	r3, #0
 801449e:	e01c      	b.n	80144da <SC_Write_Register+0x116>
      }
      break;

    default:
      ret = 0;
 80144a0:	2300      	movs	r3, #0
 80144a2:	60fb      	str	r3, [r7, #12]
      break;
 80144a4:	e00a      	b.n	80144bc <SC_Write_Register+0xf8>
      break;
 80144a6:	bf00      	nop
 80144a8:	e008      	b.n	80144bc <SC_Write_Register+0xf8>
      break;
 80144aa:	bf00      	nop
 80144ac:	e006      	b.n	80144bc <SC_Write_Register+0xf8>
      break;
 80144ae:	bf00      	nop
 80144b0:	e004      	b.n	80144bc <SC_Write_Register+0xf8>
      break;
 80144b2:	bf00      	nop
 80144b4:	e002      	b.n	80144bc <SC_Write_Register+0xf8>
      break;
 80144b6:	bf00      	nop
 80144b8:	e000      	b.n	80144bc <SC_Write_Register+0xf8>
      break;
 80144ba:	bf00      	nop
  }

  if (ret == 0)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d101      	bne.n	80144c6 <SC_Write_Register+0x102>
  {
    return ret;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	e009      	b.n	80144da <SC_Write_Register+0x116>
  }

  BUILD_REPLY_HEADER(Msg);
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f7fe f9f8 	bl	80128bc <BUILD_REPLY_HEADER>
  Msg->Len = 7;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2207      	movs	r2, #7
 80144d0:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f001 fef2 	bl	80162bc <VCOM_send_MSG>
  return 1;
 80144d8:	2301      	movs	r3, #1
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3710      	adds	r7, #16
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	200001f4 	.word	0x200001f4
 80144e8:	200001f8 	.word	0x200001f8
 80144ec:	200001fc 	.word	0x200001fc
 80144f0:	20000be4 	.word	0x20000be4
 80144f4:	20000be0 	.word	0x20000be0
 80144f8:	20000200 	.word	0x20000200

080144fc <SC_Get_Full_Scale_List>:
 * @brief  Get sensor full scale list
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
int SC_Get_Full_Scale_List(TMsg *Msg)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8014504:	2301      	movs	r3, #1
 8014506:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	7a1b      	ldrb	r3, [r3, #8]
 801450c:	3b01      	subs	r3, #1
 801450e:	2b05      	cmp	r3, #5
 8014510:	d852      	bhi.n	80145b8 <SC_Get_Full_Scale_List+0xbc>
 8014512:	a201      	add	r2, pc, #4	; (adr r2, 8014518 <SC_Get_Full_Scale_List+0x1c>)
 8014514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014518:	08014531 	.word	0x08014531
 801451c:	0801454d 	.word	0x0801454d
 8014520:	08014569 	.word	0x08014569
 8014524:	0801457d 	.word	0x0801457d
 8014528:	08014591 	.word	0x08014591
 801452c:	080145a5 	.word	0x080145a5
  {
    case SC_ACCELEROMETER:
      Send_Sensor_FS_List(Msg, AccFsList[AccIndex]);
 8014530:	4b25      	ldr	r3, [pc, #148]	; (80145c8 <SC_Get_Full_Scale_List+0xcc>)
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	461a      	mov	r2, r3
 8014536:	4613      	mov	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	4413      	add	r3, r2
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	4a23      	ldr	r2, [pc, #140]	; (80145cc <SC_Get_Full_Scale_List+0xd0>)
 8014540:	4413      	add	r3, r2
 8014542:	4619      	mov	r1, r3
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f000 fe34 	bl	80151b2 <Send_Sensor_FS_List>
      break;
 801454a:	e038      	b.n	80145be <SC_Get_Full_Scale_List+0xc2>

    case SC_GYROSCOPE:
      Send_Sensor_FS_List(Msg, GyrFsList[GyrIndex]);
 801454c:	4b20      	ldr	r3, [pc, #128]	; (80145d0 <SC_Get_Full_Scale_List+0xd4>)
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	461a      	mov	r2, r3
 8014552:	4613      	mov	r3, r2
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	4413      	add	r3, r2
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	4a1e      	ldr	r2, [pc, #120]	; (80145d4 <SC_Get_Full_Scale_List+0xd8>)
 801455c:	4413      	add	r3, r2
 801455e:	4619      	mov	r1, r3
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f000 fe26 	bl	80151b2 <Send_Sensor_FS_List>
      break;
 8014566:	e02a      	b.n	80145be <SC_Get_Full_Scale_List+0xc2>

    case SC_MAGNETOMETER:
      Send_Sensor_FS_List(Msg, MagFsList[MagIndex]);
 8014568:	4b1b      	ldr	r3, [pc, #108]	; (80145d8 <SC_Get_Full_Scale_List+0xdc>)
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	00db      	lsls	r3, r3, #3
 801456e:	4a1b      	ldr	r2, [pc, #108]	; (80145dc <SC_Get_Full_Scale_List+0xe0>)
 8014570:	4413      	add	r3, r2
 8014572:	4619      	mov	r1, r3
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 fe1c 	bl	80151b2 <Send_Sensor_FS_List>
      break;
 801457a:	e020      	b.n	80145be <SC_Get_Full_Scale_List+0xc2>

    case SC_TEMPERATURE:
      Send_Sensor_FS_List(Msg, TmpFsList[TmpIndex]);
 801457c:	4b18      	ldr	r3, [pc, #96]	; (80145e0 <SC_Get_Full_Scale_List+0xe4>)
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	4a18      	ldr	r2, [pc, #96]	; (80145e4 <SC_Get_Full_Scale_List+0xe8>)
 8014584:	4413      	add	r3, r2
 8014586:	4619      	mov	r1, r3
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 fe12 	bl	80151b2 <Send_Sensor_FS_List>
      break;
 801458e:	e016      	b.n	80145be <SC_Get_Full_Scale_List+0xc2>

    case SC_HUMIDITY:
      Send_Sensor_FS_List(Msg, HumFsList[HumIndex]);
 8014590:	4b15      	ldr	r3, [pc, #84]	; (80145e8 <SC_Get_Full_Scale_List+0xec>)
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	4a15      	ldr	r2, [pc, #84]	; (80145ec <SC_Get_Full_Scale_List+0xf0>)
 8014598:	4413      	add	r3, r2
 801459a:	4619      	mov	r1, r3
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f000 fe08 	bl	80151b2 <Send_Sensor_FS_List>
      break;
 80145a2:	e00c      	b.n	80145be <SC_Get_Full_Scale_List+0xc2>

    case SC_PRESSURE:
      Send_Sensor_FS_List(Msg, PrsFsList[PrsIndex]);
 80145a4:	4b12      	ldr	r3, [pc, #72]	; (80145f0 <SC_Get_Full_Scale_List+0xf4>)
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	4a12      	ldr	r2, [pc, #72]	; (80145f4 <SC_Get_Full_Scale_List+0xf8>)
 80145ac:	4413      	add	r3, r2
 80145ae:	4619      	mov	r1, r3
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f000 fdfe 	bl	80151b2 <Send_Sensor_FS_List>
      break;
 80145b6:	e002      	b.n	80145be <SC_Get_Full_Scale_List+0xc2>

    default:
      ret = 0;
 80145b8:	2300      	movs	r3, #0
 80145ba:	60fb      	str	r3, [r7, #12]
      break;
 80145bc:	bf00      	nop
  }

  return ret;
 80145be:	68fb      	ldr	r3, [r7, #12]
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3710      	adds	r7, #16
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	20000c77 	.word	0x20000c77
 80145cc:	20000298 	.word	0x20000298
 80145d0:	20000c78 	.word	0x20000c78
 80145d4:	200002d4 	.word	0x200002d4
 80145d8:	20000c79 	.word	0x20000c79
 80145dc:	200002e8 	.word	0x200002e8
 80145e0:	20000c7b 	.word	0x20000c7b
 80145e4:	20000bf0 	.word	0x20000bf0
 80145e8:	20000c7a 	.word	0x20000c7a
 80145ec:	20000bec 	.word	0x20000bec
 80145f0:	20000c7c 	.word	0x20000c7c
 80145f4:	20000bfc 	.word	0x20000bfc

080145f8 <SC_Set_Full_Scale>:
 * @brief  Set sensor full scale
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Set_Full_Scale(TMsg *Msg)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  uint32_t full_scale = Deserialize(&Msg->Data[5], 4);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	3309      	adds	r3, #9
 8014604:	2104      	movs	r1, #4
 8014606:	4618      	mov	r0, r3
 8014608:	f000 ff68 	bl	80154dc <Deserialize>
 801460c:	60b8      	str	r0, [r7, #8]
  int ret = 1;
 801460e:	2301      	movs	r3, #1
 8014610:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	7a1b      	ldrb	r3, [r3, #8]
 8014616:	3b01      	subs	r3, #1
 8014618:	2b05      	cmp	r3, #5
 801461a:	d833      	bhi.n	8014684 <SC_Set_Full_Scale+0x8c>
 801461c:	a201      	add	r2, pc, #4	; (adr r2, 8014624 <SC_Set_Full_Scale+0x2c>)
 801461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014622:	bf00      	nop
 8014624:	0801463d 	.word	0x0801463d
 8014628:	08014655 	.word	0x08014655
 801462c:	0801466d 	.word	0x0801466d
 8014630:	0801468b 	.word	0x0801468b
 8014634:	0801468b 	.word	0x0801468b
 8014638:	0801468b 	.word	0x0801468b
  {
    case SC_ACCELEROMETER:
      if (BSP_MOTION_SENSOR_SetFullScale(AccInstance, MOTION_ACCELERO, (int32_t)full_scale) != BSP_ERROR_NONE)
 801463c:	4b20      	ldr	r3, [pc, #128]	; (80146c0 <SC_Set_Full_Scale+0xc8>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	68ba      	ldr	r2, [r7, #8]
 8014642:	2102      	movs	r1, #2
 8014644:	4618      	mov	r0, r3
 8014646:	f7f5 fedf 	bl	800a408 <BSP_MOTION_SENSOR_SetFullScale>
 801464a:	4603      	mov	r3, r0
 801464c:	2b00      	cmp	r3, #0
 801464e:	d01e      	beq.n	801468e <SC_Set_Full_Scale+0x96>
      {
        return 0;
 8014650:	2300      	movs	r3, #0
 8014652:	e030      	b.n	80146b6 <SC_Set_Full_Scale+0xbe>
      }
      break;

    case SC_GYROSCOPE:
      if (BSP_MOTION_SENSOR_SetFullScale(GyrInstance, MOTION_GYRO, (int32_t)full_scale) != BSP_ERROR_NONE)
 8014654:	4b1b      	ldr	r3, [pc, #108]	; (80146c4 <SC_Set_Full_Scale+0xcc>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	68ba      	ldr	r2, [r7, #8]
 801465a:	2101      	movs	r1, #1
 801465c:	4618      	mov	r0, r3
 801465e:	f7f5 fed3 	bl	800a408 <BSP_MOTION_SENSOR_SetFullScale>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d014      	beq.n	8014692 <SC_Set_Full_Scale+0x9a>
      {
        return 0;
 8014668:	2300      	movs	r3, #0
 801466a:	e024      	b.n	80146b6 <SC_Set_Full_Scale+0xbe>
      }
      break;

    case SC_MAGNETOMETER:
      if (BSP_MOTION_SENSOR_SetFullScale(MagInstance, MOTION_MAGNETO, (int32_t)full_scale) != BSP_ERROR_NONE)
 801466c:	4b16      	ldr	r3, [pc, #88]	; (80146c8 <SC_Set_Full_Scale+0xd0>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	68ba      	ldr	r2, [r7, #8]
 8014672:	2104      	movs	r1, #4
 8014674:	4618      	mov	r0, r3
 8014676:	f7f5 fec7 	bl	800a408 <BSP_MOTION_SENSOR_SetFullScale>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d00a      	beq.n	8014696 <SC_Set_Full_Scale+0x9e>
      {
        return 0;
 8014680:	2300      	movs	r3, #0
 8014682:	e018      	b.n	80146b6 <SC_Set_Full_Scale+0xbe>
    case SC_HUMIDITY:
    case SC_PRESSURE:
      break;

    default:
      ret = 0;
 8014684:	2300      	movs	r3, #0
 8014686:	60fb      	str	r3, [r7, #12]
      break;
 8014688:	e006      	b.n	8014698 <SC_Set_Full_Scale+0xa0>
      break;
 801468a:	bf00      	nop
 801468c:	e004      	b.n	8014698 <SC_Set_Full_Scale+0xa0>
      break;
 801468e:	bf00      	nop
 8014690:	e002      	b.n	8014698 <SC_Set_Full_Scale+0xa0>
      break;
 8014692:	bf00      	nop
 8014694:	e000      	b.n	8014698 <SC_Set_Full_Scale+0xa0>
      break;
 8014696:	bf00      	nop
  }

  if (ret == 0)
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d101      	bne.n	80146a2 <SC_Set_Full_Scale+0xaa>
  {
    return ret;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	e009      	b.n	80146b6 <SC_Set_Full_Scale+0xbe>
  }

  BUILD_REPLY_HEADER(Msg);
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f7fe f90a 	bl	80128bc <BUILD_REPLY_HEADER>
  Msg->Len = 9;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2209      	movs	r2, #9
 80146ac:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f001 fe04 	bl	80162bc <VCOM_send_MSG>
  return 1;
 80146b4:	2301      	movs	r3, #1
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	200001f4 	.word	0x200001f4
 80146c4:	200001f8 	.word	0x200001f8
 80146c8:	200001fc 	.word	0x200001fc

080146cc <SC_Get_Full_Scale>:
 * @brief  Get sensor full scale
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Get_Full_Scale(TMsg *Msg)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  int32_t full_scale = 0;
 80146d4:	2300      	movs	r3, #0
 80146d6:	60bb      	str	r3, [r7, #8]
  int ret = 1;
 80146d8:	2301      	movs	r3, #1
 80146da:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	7a1b      	ldrb	r3, [r3, #8]
 80146e0:	3b01      	subs	r3, #1
 80146e2:	2b05      	cmp	r3, #5
 80146e4:	d835      	bhi.n	8014752 <SC_Get_Full_Scale+0x86>
 80146e6:	a201      	add	r2, pc, #4	; (adr r2, 80146ec <SC_Get_Full_Scale+0x20>)
 80146e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ec:	08014705 	.word	0x08014705
 80146f0:	0801471f 	.word	0x0801471f
 80146f4:	08014739 	.word	0x08014739
 80146f8:	08014759 	.word	0x08014759
 80146fc:	08014759 	.word	0x08014759
 8014700:	08014759 	.word	0x08014759
  {
    case SC_ACCELEROMETER:
      if (BSP_MOTION_SENSOR_GetFullScale(AccInstance, MOTION_ACCELERO, &full_scale) != BSP_ERROR_NONE)
 8014704:	4b25      	ldr	r3, [pc, #148]	; (801479c <SC_Get_Full_Scale+0xd0>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f107 0208 	add.w	r2, r7, #8
 801470c:	2102      	movs	r1, #2
 801470e:	4618      	mov	r0, r3
 8014710:	f7f5 fdf0 	bl	800a2f4 <BSP_MOTION_SENSOR_GetFullScale>
 8014714:	4603      	mov	r3, r0
 8014716:	2b00      	cmp	r3, #0
 8014718:	d020      	beq.n	801475c <SC_Get_Full_Scale+0x90>
      {
        return 0;
 801471a:	2300      	movs	r3, #0
 801471c:	e03a      	b.n	8014794 <SC_Get_Full_Scale+0xc8>
      }
      break;

    case SC_GYROSCOPE:
      if (BSP_MOTION_SENSOR_GetFullScale(GyrInstance, MOTION_GYRO, &full_scale) != BSP_ERROR_NONE)
 801471e:	4b20      	ldr	r3, [pc, #128]	; (80147a0 <SC_Get_Full_Scale+0xd4>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f107 0208 	add.w	r2, r7, #8
 8014726:	2101      	movs	r1, #1
 8014728:	4618      	mov	r0, r3
 801472a:	f7f5 fde3 	bl	800a2f4 <BSP_MOTION_SENSOR_GetFullScale>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d015      	beq.n	8014760 <SC_Get_Full_Scale+0x94>
      {
        return 0;
 8014734:	2300      	movs	r3, #0
 8014736:	e02d      	b.n	8014794 <SC_Get_Full_Scale+0xc8>
      }
      break;

    case SC_MAGNETOMETER:
      if (BSP_MOTION_SENSOR_GetFullScale(MagInstance, MOTION_MAGNETO, &full_scale) != BSP_ERROR_NONE)
 8014738:	4b1a      	ldr	r3, [pc, #104]	; (80147a4 <SC_Get_Full_Scale+0xd8>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	f107 0208 	add.w	r2, r7, #8
 8014740:	2104      	movs	r1, #4
 8014742:	4618      	mov	r0, r3
 8014744:	f7f5 fdd6 	bl	800a2f4 <BSP_MOTION_SENSOR_GetFullScale>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d00a      	beq.n	8014764 <SC_Get_Full_Scale+0x98>
      {
        return 0;
 801474e:	2300      	movs	r3, #0
 8014750:	e020      	b.n	8014794 <SC_Get_Full_Scale+0xc8>
    case SC_HUMIDITY:
    case SC_PRESSURE:
      break;

    default:
      ret = 0;
 8014752:	2300      	movs	r3, #0
 8014754:	60fb      	str	r3, [r7, #12]
      break;
 8014756:	e006      	b.n	8014766 <SC_Get_Full_Scale+0x9a>
      break;
 8014758:	bf00      	nop
 801475a:	e004      	b.n	8014766 <SC_Get_Full_Scale+0x9a>
      break;
 801475c:	bf00      	nop
 801475e:	e002      	b.n	8014766 <SC_Get_Full_Scale+0x9a>
      break;
 8014760:	bf00      	nop
 8014762:	e000      	b.n	8014766 <SC_Get_Full_Scale+0x9a>
      break;
 8014764:	bf00      	nop
  }

  if (ret == 0)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d101      	bne.n	8014770 <SC_Get_Full_Scale+0xa4>
  {
    return ret;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	e011      	b.n	8014794 <SC_Get_Full_Scale+0xc8>
  }

  BUILD_REPLY_HEADER(Msg);
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7fe f8a3 	bl	80128bc <BUILD_REPLY_HEADER>
  Serialize(&Msg->Data[5], full_scale, 4);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	3309      	adds	r3, #9
 801477a:	68ba      	ldr	r2, [r7, #8]
 801477c:	4611      	mov	r1, r2
 801477e:	2204      	movs	r2, #4
 8014780:	4618      	mov	r0, r3
 8014782:	f000 fe8b 	bl	801549c <Serialize>
  Msg->Len = 9;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2209      	movs	r2, #9
 801478a:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f001 fd95 	bl	80162bc <VCOM_send_MSG>
  return ret;
 8014792:	68fb      	ldr	r3, [r7, #12]
}
 8014794:	4618      	mov	r0, r3
 8014796:	3710      	adds	r7, #16
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}
 801479c:	200001f4 	.word	0x200001f4
 80147a0:	200001f8 	.word	0x200001f8
 80147a4:	200001fc 	.word	0x200001fc

080147a8 <SC_Get_ODR_List>:
 * @brief  Get sensor output data rate list
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Get_ODR_List(TMsg *Msg)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  int ret = 1;
 80147b0:	2301      	movs	r3, #1
 80147b2:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	7a1b      	ldrb	r3, [r3, #8]
 80147b8:	3b01      	subs	r3, #1
 80147ba:	2b05      	cmp	r3, #5
 80147bc:	d857      	bhi.n	801486e <SC_Get_ODR_List+0xc6>
 80147be:	a201      	add	r2, pc, #4	; (adr r2, 80147c4 <SC_Get_ODR_List+0x1c>)
 80147c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c4:	080147dd 	.word	0x080147dd
 80147c8:	080147f7 	.word	0x080147f7
 80147cc:	08014811 	.word	0x08014811
 80147d0:	0801482d 	.word	0x0801482d
 80147d4:	08014847 	.word	0x08014847
 80147d8:	0801485b 	.word	0x0801485b
  {
    case SC_ACCELEROMETER:
      Send_Sensor_ODR_List(Msg, AccOdrList[AccIndex]);
 80147dc:	4b28      	ldr	r3, [pc, #160]	; (8014880 <SC_Get_ODR_List+0xd8>)
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	461a      	mov	r2, r3
 80147e2:	232c      	movs	r3, #44	; 0x2c
 80147e4:	fb02 f303 	mul.w	r3, r2, r3
 80147e8:	4a26      	ldr	r2, [pc, #152]	; (8014884 <SC_Get_ODR_List+0xdc>)
 80147ea:	4413      	add	r3, r2
 80147ec:	4619      	mov	r1, r3
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f000 fd1a 	bl	8015228 <Send_Sensor_ODR_List>
      break;
 80147f4:	e03e      	b.n	8014874 <SC_Get_ODR_List+0xcc>

    case SC_GYROSCOPE:
      Send_Sensor_ODR_List(Msg, GyrOdrList[GyrIndex]);
 80147f6:	4b24      	ldr	r3, [pc, #144]	; (8014888 <SC_Get_ODR_List+0xe0>)
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	232c      	movs	r3, #44	; 0x2c
 80147fe:	fb02 f303 	mul.w	r3, r2, r3
 8014802:	4a22      	ldr	r2, [pc, #136]	; (801488c <SC_Get_ODR_List+0xe4>)
 8014804:	4413      	add	r3, r2
 8014806:	4619      	mov	r1, r3
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 fd0d 	bl	8015228 <Send_Sensor_ODR_List>
      break;
 801480e:	e031      	b.n	8014874 <SC_Get_ODR_List+0xcc>

    case SC_MAGNETOMETER:
      Send_Sensor_ODR_List(Msg, MagOdrList[MagIndex]);
 8014810:	4b1f      	ldr	r3, [pc, #124]	; (8014890 <SC_Get_ODR_List+0xe8>)
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	461a      	mov	r2, r3
 8014816:	4613      	mov	r3, r2
 8014818:	009b      	lsls	r3, r3, #2
 801481a:	4413      	add	r3, r2
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	4a1d      	ldr	r2, [pc, #116]	; (8014894 <SC_Get_ODR_List+0xec>)
 8014820:	4413      	add	r3, r2
 8014822:	4619      	mov	r1, r3
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f000 fcff 	bl	8015228 <Send_Sensor_ODR_List>
      break;
 801482a:	e023      	b.n	8014874 <SC_Get_ODR_List+0xcc>

    case SC_TEMPERATURE:
      Send_Sensor_ODR_List(Msg, TmpOdrList[TmpIndex]);
 801482c:	4b1a      	ldr	r3, [pc, #104]	; (8014898 <SC_Get_ODR_List+0xf0>)
 801482e:	781b      	ldrb	r3, [r3, #0]
 8014830:	461a      	mov	r2, r3
 8014832:	232c      	movs	r3, #44	; 0x2c
 8014834:	fb02 f303 	mul.w	r3, r2, r3
 8014838:	4a18      	ldr	r2, [pc, #96]	; (801489c <SC_Get_ODR_List+0xf4>)
 801483a:	4413      	add	r3, r2
 801483c:	4619      	mov	r1, r3
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 fcf2 	bl	8015228 <Send_Sensor_ODR_List>
      break;
 8014844:	e016      	b.n	8014874 <SC_Get_ODR_List+0xcc>

    case SC_HUMIDITY:
      Send_Sensor_ODR_List(Msg, HumOdrList[HumIndex]);
 8014846:	4b16      	ldr	r3, [pc, #88]	; (80148a0 <SC_Get_ODR_List+0xf8>)
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	011b      	lsls	r3, r3, #4
 801484c:	4a15      	ldr	r2, [pc, #84]	; (80148a4 <SC_Get_ODR_List+0xfc>)
 801484e:	4413      	add	r3, r2
 8014850:	4619      	mov	r1, r3
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 fce8 	bl	8015228 <Send_Sensor_ODR_List>
      break;
 8014858:	e00c      	b.n	8014874 <SC_Get_ODR_List+0xcc>

    case SC_PRESSURE:
      Send_Sensor_ODR_List(Msg, PrsOdrList[PrsIndex]);
 801485a:	4b13      	ldr	r3, [pc, #76]	; (80148a8 <SC_Get_ODR_List+0x100>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	015b      	lsls	r3, r3, #5
 8014860:	4a12      	ldr	r2, [pc, #72]	; (80148ac <SC_Get_ODR_List+0x104>)
 8014862:	4413      	add	r3, r2
 8014864:	4619      	mov	r1, r3
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f000 fcde 	bl	8015228 <Send_Sensor_ODR_List>
      break;
 801486c:	e002      	b.n	8014874 <SC_Get_ODR_List+0xcc>

    default:
      ret = 0;
 801486e:	2300      	movs	r3, #0
 8014870:	60fb      	str	r3, [r7, #12]
      break;
 8014872:	bf00      	nop
  }

  return ret;
 8014874:	68fb      	ldr	r3, [r7, #12]
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	20000c77 	.word	0x20000c77
 8014884:	200002f0 	.word	0x200002f0
 8014888:	20000c78 	.word	0x20000c78
 801488c:	20000374 	.word	0x20000374
 8014890:	20000c79 	.word	0x20000c79
 8014894:	200003a0 	.word	0x200003a0
 8014898:	20000c7b 	.word	0x20000c7b
 801489c:	200003c4 	.word	0x200003c4
 80148a0:	20000c7a 	.word	0x20000c7a
 80148a4:	200003b4 	.word	0x200003b4
 80148a8:	20000c7c 	.word	0x20000c7c
 80148ac:	20000448 	.word	0x20000448

080148b0 <SC_Set_ODR>:
 * @brief  Set sensor output data rate
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Set_ODR(TMsg *Msg)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
  float odr = 0.0f;
 80148b8:	f04f 0300 	mov.w	r3, #0
 80148bc:	60bb      	str	r3, [r7, #8]
  int ret = 1;
 80148be:	2301      	movs	r3, #1
 80148c0:	60fb      	str	r3, [r7, #12]

  ArrayToFloat(&Msg->Data[5], &odr);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	3309      	adds	r3, #9
 80148c6:	f107 0208 	add.w	r2, r7, #8
 80148ca:	4611      	mov	r1, r2
 80148cc:	4618      	mov	r0, r3
 80148ce:	f000 fd04 	bl	80152da <ArrayToFloat>

  /* Sensor Type */
  switch (Msg->Data[4])
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	7a1b      	ldrb	r3, [r3, #8]
 80148d6:	3b01      	subs	r3, #1
 80148d8:	2b05      	cmp	r3, #5
 80148da:	d869      	bhi.n	80149b0 <SC_Set_ODR+0x100>
 80148dc:	a201      	add	r2, pc, #4	; (adr r2, 80148e4 <SC_Set_ODR+0x34>)
 80148de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e2:	bf00      	nop
 80148e4:	080148fd 	.word	0x080148fd
 80148e8:	0801491b 	.word	0x0801491b
 80148ec:	08014939 	.word	0x08014939
 80148f0:	08014957 	.word	0x08014957
 80148f4:	08014975 	.word	0x08014975
 80148f8:	08014993 	.word	0x08014993
  {
    case SC_ACCELEROMETER:
      if (BSP_MOTION_SENSOR_SetOutputDataRate(AccInstance, MOTION_ACCELERO, odr) != BSP_ERROR_NONE)
 80148fc:	4b3d      	ldr	r3, [pc, #244]	; (80149f4 <SC_Set_ODR+0x144>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	edd7 7a02 	vldr	s15, [r7, #8]
 8014904:	eeb0 0a67 	vmov.f32	s0, s15
 8014908:	2102      	movs	r1, #2
 801490a:	4618      	mov	r0, r3
 801490c:	f7f5 fd36 	bl	800a37c <BSP_MOTION_SENSOR_SetOutputDataRate>
 8014910:	4603      	mov	r3, r0
 8014912:	2b00      	cmp	r3, #0
 8014914:	d04f      	beq.n	80149b6 <SC_Set_ODR+0x106>
      {
        return 0;
 8014916:	2300      	movs	r3, #0
 8014918:	e067      	b.n	80149ea <SC_Set_ODR+0x13a>
      }
      break;

    case SC_GYROSCOPE:
      if (BSP_MOTION_SENSOR_SetOutputDataRate(GyrInstance, MOTION_GYRO, odr) != BSP_ERROR_NONE)
 801491a:	4b37      	ldr	r3, [pc, #220]	; (80149f8 <SC_Set_ODR+0x148>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014922:	eeb0 0a67 	vmov.f32	s0, s15
 8014926:	2101      	movs	r1, #1
 8014928:	4618      	mov	r0, r3
 801492a:	f7f5 fd27 	bl	800a37c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d042      	beq.n	80149ba <SC_Set_ODR+0x10a>
      {
        return 0;
 8014934:	2300      	movs	r3, #0
 8014936:	e058      	b.n	80149ea <SC_Set_ODR+0x13a>
      }
      break;

    case SC_MAGNETOMETER:
      if (BSP_MOTION_SENSOR_SetOutputDataRate(MagInstance, MOTION_MAGNETO, odr) != BSP_ERROR_NONE)
 8014938:	4b30      	ldr	r3, [pc, #192]	; (80149fc <SC_Set_ODR+0x14c>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014940:	eeb0 0a67 	vmov.f32	s0, s15
 8014944:	2104      	movs	r1, #4
 8014946:	4618      	mov	r0, r3
 8014948:	f7f5 fd18 	bl	800a37c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d035      	beq.n	80149be <SC_Set_ODR+0x10e>
      {
        return 0;
 8014952:	2300      	movs	r3, #0
 8014954:	e049      	b.n	80149ea <SC_Set_ODR+0x13a>
      }
      break;

    case SC_TEMPERATURE:
      if (BSP_ENV_SENSOR_SetOutputDataRate(TmpInstance, ENV_TEMPERATURE, odr) != BSP_ERROR_NONE)
 8014956:	4b2a      	ldr	r3, [pc, #168]	; (8014a00 <SC_Set_ODR+0x150>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	edd7 7a02 	vldr	s15, [r7, #8]
 801495e:	eeb0 0a67 	vmov.f32	s0, s15
 8014962:	2101      	movs	r1, #1
 8014964:	4618      	mov	r0, r3
 8014966:	f7f4 fecf 	bl	8009708 <BSP_ENV_SENSOR_SetOutputDataRate>
 801496a:	4603      	mov	r3, r0
 801496c:	2b00      	cmp	r3, #0
 801496e:	d028      	beq.n	80149c2 <SC_Set_ODR+0x112>
      {
        return 0;
 8014970:	2300      	movs	r3, #0
 8014972:	e03a      	b.n	80149ea <SC_Set_ODR+0x13a>
      }
      break;

    case SC_HUMIDITY:
      if (BSP_ENV_SENSOR_SetOutputDataRate(HumInstance, ENV_HUMIDITY, odr) != BSP_ERROR_NONE)
 8014974:	4b23      	ldr	r3, [pc, #140]	; (8014a04 <SC_Set_ODR+0x154>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	edd7 7a02 	vldr	s15, [r7, #8]
 801497c:	eeb0 0a67 	vmov.f32	s0, s15
 8014980:	2104      	movs	r1, #4
 8014982:	4618      	mov	r0, r3
 8014984:	f7f4 fec0 	bl	8009708 <BSP_ENV_SENSOR_SetOutputDataRate>
 8014988:	4603      	mov	r3, r0
 801498a:	2b00      	cmp	r3, #0
 801498c:	d01b      	beq.n	80149c6 <SC_Set_ODR+0x116>
      {
        return 0;
 801498e:	2300      	movs	r3, #0
 8014990:	e02b      	b.n	80149ea <SC_Set_ODR+0x13a>
      }
      break;

    case SC_PRESSURE:
      if (BSP_ENV_SENSOR_SetOutputDataRate(PrsInstance, ENV_PRESSURE, odr) != BSP_ERROR_NONE)
 8014992:	4b1d      	ldr	r3, [pc, #116]	; (8014a08 <SC_Set_ODR+0x158>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	edd7 7a02 	vldr	s15, [r7, #8]
 801499a:	eeb0 0a67 	vmov.f32	s0, s15
 801499e:	2102      	movs	r1, #2
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7f4 feb1 	bl	8009708 <BSP_ENV_SENSOR_SetOutputDataRate>
 80149a6:	4603      	mov	r3, r0
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00e      	beq.n	80149ca <SC_Set_ODR+0x11a>
      {
        return 0;
 80149ac:	2300      	movs	r3, #0
 80149ae:	e01c      	b.n	80149ea <SC_Set_ODR+0x13a>
      }
      break;

    default:
      ret = 0;
 80149b0:	2300      	movs	r3, #0
 80149b2:	60fb      	str	r3, [r7, #12]
      break;
 80149b4:	e00a      	b.n	80149cc <SC_Set_ODR+0x11c>
      break;
 80149b6:	bf00      	nop
 80149b8:	e008      	b.n	80149cc <SC_Set_ODR+0x11c>
      break;
 80149ba:	bf00      	nop
 80149bc:	e006      	b.n	80149cc <SC_Set_ODR+0x11c>
      break;
 80149be:	bf00      	nop
 80149c0:	e004      	b.n	80149cc <SC_Set_ODR+0x11c>
      break;
 80149c2:	bf00      	nop
 80149c4:	e002      	b.n	80149cc <SC_Set_ODR+0x11c>
      break;
 80149c6:	bf00      	nop
 80149c8:	e000      	b.n	80149cc <SC_Set_ODR+0x11c>
      break;
 80149ca:	bf00      	nop
  }

  if (ret == 0)
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d101      	bne.n	80149d6 <SC_Set_ODR+0x126>
  {
    return ret;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	e009      	b.n	80149ea <SC_Set_ODR+0x13a>
  }

  BUILD_REPLY_HEADER(Msg);
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7fd ff70 	bl	80128bc <BUILD_REPLY_HEADER>
  Msg->Len = 9;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2209      	movs	r2, #9
 80149e0:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f001 fc6a 	bl	80162bc <VCOM_send_MSG>
  return 1;
 80149e8:	2301      	movs	r3, #1
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3710      	adds	r7, #16
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	200001f4 	.word	0x200001f4
 80149f8:	200001f8 	.word	0x200001f8
 80149fc:	200001fc 	.word	0x200001fc
 8014a00:	20000be4 	.word	0x20000be4
 8014a04:	20000be0 	.word	0x20000be0
 8014a08:	20000200 	.word	0x20000200

08014a0c <SC_Get_ODR>:
 * @brief  Get sensor output data rate
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Get_ODR(TMsg *Msg)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
  float odr = 0.0f;
 8014a14:	f04f 0300 	mov.w	r3, #0
 8014a18:	60bb      	str	r3, [r7, #8]
  int ret = 1;
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	7a1b      	ldrb	r3, [r3, #8]
 8014a22:	3b01      	subs	r3, #1
 8014a24:	2b05      	cmp	r3, #5
 8014a26:	d85d      	bhi.n	8014ae4 <SC_Get_ODR+0xd8>
 8014a28:	a201      	add	r2, pc, #4	; (adr r2, 8014a30 <SC_Get_ODR+0x24>)
 8014a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a2e:	bf00      	nop
 8014a30:	08014a49 	.word	0x08014a49
 8014a34:	08014a63 	.word	0x08014a63
 8014a38:	08014a7d 	.word	0x08014a7d
 8014a3c:	08014a97 	.word	0x08014a97
 8014a40:	08014ab1 	.word	0x08014ab1
 8014a44:	08014acb 	.word	0x08014acb
  {
    case SC_ACCELEROMETER:
      if (BSP_MOTION_SENSOR_GetOutputDataRate(AccInstance, MOTION_ACCELERO, &odr) != BSP_ERROR_NONE)
 8014a48:	4b3b      	ldr	r3, [pc, #236]	; (8014b38 <SC_Get_ODR+0x12c>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	f107 0208 	add.w	r2, r7, #8
 8014a50:	2102      	movs	r1, #2
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7f5 fc0a 	bl	800a26c <BSP_MOTION_SENSOR_GetOutputDataRate>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d045      	beq.n	8014aea <SC_Get_ODR+0xde>
      {
        return 0;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e066      	b.n	8014b30 <SC_Get_ODR+0x124>
      }
      break;

    case SC_GYROSCOPE:
      if (BSP_MOTION_SENSOR_GetOutputDataRate(GyrInstance, MOTION_GYRO, &odr) != BSP_ERROR_NONE)
 8014a62:	4b36      	ldr	r3, [pc, #216]	; (8014b3c <SC_Get_ODR+0x130>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f107 0208 	add.w	r2, r7, #8
 8014a6a:	2101      	movs	r1, #1
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7f5 fbfd 	bl	800a26c <BSP_MOTION_SENSOR_GetOutputDataRate>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d03a      	beq.n	8014aee <SC_Get_ODR+0xe2>
      {
        return 0;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	e059      	b.n	8014b30 <SC_Get_ODR+0x124>
      }
      break;

    case SC_MAGNETOMETER:
      if (BSP_MOTION_SENSOR_GetOutputDataRate(MagInstance, MOTION_MAGNETO, &odr) != BSP_ERROR_NONE)
 8014a7c:	4b30      	ldr	r3, [pc, #192]	; (8014b40 <SC_Get_ODR+0x134>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	f107 0208 	add.w	r2, r7, #8
 8014a84:	2104      	movs	r1, #4
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7f5 fbf0 	bl	800a26c <BSP_MOTION_SENSOR_GetOutputDataRate>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d02f      	beq.n	8014af2 <SC_Get_ODR+0xe6>
      {
        return 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	e04c      	b.n	8014b30 <SC_Get_ODR+0x124>
      }
      break;

    case SC_TEMPERATURE:
      if (BSP_ENV_SENSOR_GetOutputDataRate(TmpInstance, ENV_TEMPERATURE, &odr) != BSP_ERROR_NONE)
 8014a96:	4b2b      	ldr	r3, [pc, #172]	; (8014b44 <SC_Get_ODR+0x138>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	f107 0208 	add.w	r2, r7, #8
 8014a9e:	2101      	movs	r1, #1
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7f4 fded 	bl	8009680 <BSP_ENV_SENSOR_GetOutputDataRate>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d024      	beq.n	8014af6 <SC_Get_ODR+0xea>
      {
        return 0;
 8014aac:	2300      	movs	r3, #0
 8014aae:	e03f      	b.n	8014b30 <SC_Get_ODR+0x124>
      }
      break;

    case SC_HUMIDITY:
      if (BSP_ENV_SENSOR_GetOutputDataRate(HumInstance, ENV_HUMIDITY, &odr) != BSP_ERROR_NONE)
 8014ab0:	4b25      	ldr	r3, [pc, #148]	; (8014b48 <SC_Get_ODR+0x13c>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	f107 0208 	add.w	r2, r7, #8
 8014ab8:	2104      	movs	r1, #4
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7f4 fde0 	bl	8009680 <BSP_ENV_SENSOR_GetOutputDataRate>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d019      	beq.n	8014afa <SC_Get_ODR+0xee>
      {
        return 0;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	e032      	b.n	8014b30 <SC_Get_ODR+0x124>
      }
      break;

    case SC_PRESSURE:
      if (BSP_ENV_SENSOR_GetOutputDataRate(PrsInstance, ENV_PRESSURE, &odr) != BSP_ERROR_NONE)
 8014aca:	4b20      	ldr	r3, [pc, #128]	; (8014b4c <SC_Get_ODR+0x140>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f107 0208 	add.w	r2, r7, #8
 8014ad2:	2102      	movs	r1, #2
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7f4 fdd3 	bl	8009680 <BSP_ENV_SENSOR_GetOutputDataRate>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00e      	beq.n	8014afe <SC_Get_ODR+0xf2>
      {
        return 0;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	e025      	b.n	8014b30 <SC_Get_ODR+0x124>
      }
      break;

    default:
      ret = 0;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	60fb      	str	r3, [r7, #12]
      break;
 8014ae8:	e00a      	b.n	8014b00 <SC_Get_ODR+0xf4>
      break;
 8014aea:	bf00      	nop
 8014aec:	e008      	b.n	8014b00 <SC_Get_ODR+0xf4>
      break;
 8014aee:	bf00      	nop
 8014af0:	e006      	b.n	8014b00 <SC_Get_ODR+0xf4>
      break;
 8014af2:	bf00      	nop
 8014af4:	e004      	b.n	8014b00 <SC_Get_ODR+0xf4>
      break;
 8014af6:	bf00      	nop
 8014af8:	e002      	b.n	8014b00 <SC_Get_ODR+0xf4>
      break;
 8014afa:	bf00      	nop
 8014afc:	e000      	b.n	8014b00 <SC_Get_ODR+0xf4>
      break;
 8014afe:	bf00      	nop
  }

  if (ret == 0)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d101      	bne.n	8014b0a <SC_Get_ODR+0xfe>
  {
    return ret;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	e012      	b.n	8014b30 <SC_Get_ODR+0x124>
  }

  BUILD_REPLY_HEADER(Msg);
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7fd fed6 	bl	80128bc <BUILD_REPLY_HEADER>
  FloatToArray(&Msg->Data[5], odr);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	3309      	adds	r3, #9
 8014b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b18:	eeb0 0a67 	vmov.f32	s0, s15
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f000 fbcd 	bl	80152bc <FloatToArray>
  Msg->Len = 9;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2209      	movs	r2, #9
 8014b26:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f001 fbc7 	bl	80162bc <VCOM_send_MSG>
  return ret;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	200001f4 	.word	0x200001f4
 8014b3c:	200001f8 	.word	0x200001f8
 8014b40:	200001fc 	.word	0x200001fc
 8014b44:	20000be4 	.word	0x20000be4
 8014b48:	20000be0 	.word	0x20000be0
 8014b4c:	20000200 	.word	0x20000200

08014b50 <SC_Get_Sensor_List>:
 * @brief  Get sensor list
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Get_Sensor_List(TMsg *Msg)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	60fb      	str	r3, [r7, #12]
  int i;

  /* Sensor Type */
  switch (Msg->Data[4])
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	7a1b      	ldrb	r3, [r3, #8]
 8014b60:	3b01      	subs	r3, #1
 8014b62:	2b05      	cmp	r3, #5
 8014b64:	f200 815a 	bhi.w	8014e1c <SC_Get_Sensor_List+0x2cc>
 8014b68:	a201      	add	r2, pc, #4	; (adr r2, 8014b70 <SC_Get_Sensor_List+0x20>)
 8014b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b6e:	bf00      	nop
 8014b70:	08014b89 	.word	0x08014b89
 8014b74:	08014bf7 	.word	0x08014bf7
 8014b78:	08014c65 	.word	0x08014c65
 8014b7c:	08014cd3 	.word	0x08014cd3
 8014b80:	08014d41 	.word	0x08014d41
 8014b84:	08014daf 	.word	0x08014daf
  {
    case SC_ACCELEROMETER:
      /* Concatenate all sensor names of same kind to one string (comma separated) */
      for (i = 0; i < sizeof(AccNamesString); i++)
 8014b88:	2300      	movs	r3, #0
 8014b8a:	60bb      	str	r3, [r7, #8]
 8014b8c:	e007      	b.n	8014b9e <SC_Get_Sensor_List+0x4e>
      {
        AccNamesString[i] = '\0';
 8014b8e:	4aa7      	ldr	r2, [pc, #668]	; (8014e2c <SC_Get_Sensor_List+0x2dc>)
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	4413      	add	r3, r2
 8014b94:	2200      	movs	r2, #0
 8014b96:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < sizeof(AccNamesString); i++)
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	60bb      	str	r3, [r7, #8]
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2b20      	cmp	r3, #32
 8014ba2:	d9f4      	bls.n	8014b8e <SC_Get_Sensor_List+0x3e>
      }
      (void)strcat((char *)AccNamesString, (char *)AccNameList[0]);
 8014ba4:	49a2      	ldr	r1, [pc, #648]	; (8014e30 <SC_Get_Sensor_List+0x2e0>)
 8014ba6:	48a1      	ldr	r0, [pc, #644]	; (8014e2c <SC_Get_Sensor_List+0x2dc>)
 8014ba8:	f003 fa7b 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(AccNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014bac:	2301      	movs	r3, #1
 8014bae:	60bb      	str	r3, [r7, #8]
 8014bb0:	e019      	b.n	8014be6 <SC_Get_Sensor_List+0x96>
      {
        (void)strcat((char *)AccNamesString, ",");
 8014bb2:	489e      	ldr	r0, [pc, #632]	; (8014e2c <SC_Get_Sensor_List+0x2dc>)
 8014bb4:	f7eb fb24 	bl	8000200 <strlen>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	461a      	mov	r2, r3
 8014bbc:	4b9b      	ldr	r3, [pc, #620]	; (8014e2c <SC_Get_Sensor_List+0x2dc>)
 8014bbe:	4413      	add	r3, r2
 8014bc0:	499c      	ldr	r1, [pc, #624]	; (8014e34 <SC_Get_Sensor_List+0x2e4>)
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	8013      	strh	r3, [r2, #0]
        (void)strcat((char *)AccNamesString, (char *)AccNameList[i]);
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	4613      	mov	r3, r2
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	4413      	add	r3, r2
 8014bd2:	005b      	lsls	r3, r3, #1
 8014bd4:	4a96      	ldr	r2, [pc, #600]	; (8014e30 <SC_Get_Sensor_List+0x2e0>)
 8014bd6:	4413      	add	r3, r2
 8014bd8:	4619      	mov	r1, r3
 8014bda:	4894      	ldr	r0, [pc, #592]	; (8014e2c <SC_Get_Sensor_List+0x2dc>)
 8014bdc:	f003 fa61 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(AccNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	3301      	adds	r3, #1
 8014be4:	60bb      	str	r3, [r7, #8]
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	2b02      	cmp	r3, #2
 8014bea:	d9e2      	bls.n	8014bb2 <SC_Get_Sensor_List+0x62>
      }
      Send_Sensor_Name(Msg, AccNamesString);
 8014bec:	498f      	ldr	r1, [pc, #572]	; (8014e2c <SC_Get_Sensor_List+0x2dc>)
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 fab4 	bl	801515c <Send_Sensor_Name>
      break;
 8014bf4:	e115      	b.n	8014e22 <SC_Get_Sensor_List+0x2d2>

    case SC_GYROSCOPE:
      /* Concatenate all sensor names of same kind to one string (comma separated) */
      for (i = 0; i < sizeof(GyrNamesString); i++)
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	60bb      	str	r3, [r7, #8]
 8014bfa:	e007      	b.n	8014c0c <SC_Get_Sensor_List+0xbc>
      {
        GyrNamesString[i] = '\0';
 8014bfc:	4a8e      	ldr	r2, [pc, #568]	; (8014e38 <SC_Get_Sensor_List+0x2e8>)
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	4413      	add	r3, r2
 8014c02:	2200      	movs	r2, #0
 8014c04:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < sizeof(GyrNamesString); i++)
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	60bb      	str	r3, [r7, #8]
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	2b0a      	cmp	r3, #10
 8014c10:	d9f4      	bls.n	8014bfc <SC_Get_Sensor_List+0xac>
      }
      (void)strcat((char *)GyrNamesString, (char *)GyrNameList[0]);
 8014c12:	498a      	ldr	r1, [pc, #552]	; (8014e3c <SC_Get_Sensor_List+0x2ec>)
 8014c14:	4888      	ldr	r0, [pc, #544]	; (8014e38 <SC_Get_Sensor_List+0x2e8>)
 8014c16:	f003 fa44 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(GyrNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	60bb      	str	r3, [r7, #8]
 8014c1e:	e019      	b.n	8014c54 <SC_Get_Sensor_List+0x104>
      {
        (void)strcat((char *)GyrNamesString, ",");
 8014c20:	4885      	ldr	r0, [pc, #532]	; (8014e38 <SC_Get_Sensor_List+0x2e8>)
 8014c22:	f7eb faed 	bl	8000200 <strlen>
 8014c26:	4603      	mov	r3, r0
 8014c28:	461a      	mov	r2, r3
 8014c2a:	4b83      	ldr	r3, [pc, #524]	; (8014e38 <SC_Get_Sensor_List+0x2e8>)
 8014c2c:	4413      	add	r3, r2
 8014c2e:	4981      	ldr	r1, [pc, #516]	; (8014e34 <SC_Get_Sensor_List+0x2e4>)
 8014c30:	461a      	mov	r2, r3
 8014c32:	460b      	mov	r3, r1
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	8013      	strh	r3, [r2, #0]
        (void)strcat((char *)GyrNamesString, (char *)GyrNameList[i]);
 8014c38:	68ba      	ldr	r2, [r7, #8]
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4413      	add	r3, r2
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	4a7e      	ldr	r2, [pc, #504]	; (8014e3c <SC_Get_Sensor_List+0x2ec>)
 8014c44:	4413      	add	r3, r2
 8014c46:	4619      	mov	r1, r3
 8014c48:	487b      	ldr	r0, [pc, #492]	; (8014e38 <SC_Get_Sensor_List+0x2e8>)
 8014c4a:	f003 fa2a 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(GyrNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	3301      	adds	r3, #1
 8014c52:	60bb      	str	r3, [r7, #8]
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d0e2      	beq.n	8014c20 <SC_Get_Sensor_List+0xd0>
      }
      Send_Sensor_Name(Msg, GyrNamesString);
 8014c5a:	4977      	ldr	r1, [pc, #476]	; (8014e38 <SC_Get_Sensor_List+0x2e8>)
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f000 fa7d 	bl	801515c <Send_Sensor_Name>
      break;
 8014c62:	e0de      	b.n	8014e22 <SC_Get_Sensor_List+0x2d2>

    case SC_MAGNETOMETER:
      /* Concatenate all sensor names of same kind to one string (comma separated) */
      for (i = 0; i < sizeof(MagNamesString); i++)
 8014c64:	2300      	movs	r3, #0
 8014c66:	60bb      	str	r3, [r7, #8]
 8014c68:	e007      	b.n	8014c7a <SC_Get_Sensor_List+0x12a>
      {
        MagNamesString[i] = '\0';
 8014c6a:	4a75      	ldr	r2, [pc, #468]	; (8014e40 <SC_Get_Sensor_List+0x2f0>)
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	4413      	add	r3, r2
 8014c70:	2200      	movs	r2, #0
 8014c72:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < sizeof(MagNamesString); i++)
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	3301      	adds	r3, #1
 8014c78:	60bb      	str	r3, [r7, #8]
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	2b0a      	cmp	r3, #10
 8014c7e:	d9f4      	bls.n	8014c6a <SC_Get_Sensor_List+0x11a>
      }
      (void)strcat((char *)MagNamesString, (char *)MagNameList[0]);
 8014c80:	4970      	ldr	r1, [pc, #448]	; (8014e44 <SC_Get_Sensor_List+0x2f4>)
 8014c82:	486f      	ldr	r0, [pc, #444]	; (8014e40 <SC_Get_Sensor_List+0x2f0>)
 8014c84:	f003 fa0d 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(MagNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014c88:	2301      	movs	r3, #1
 8014c8a:	60bb      	str	r3, [r7, #8]
 8014c8c:	e019      	b.n	8014cc2 <SC_Get_Sensor_List+0x172>
      {
        (void)strcat((char *)MagNamesString, ",");
 8014c8e:	486c      	ldr	r0, [pc, #432]	; (8014e40 <SC_Get_Sensor_List+0x2f0>)
 8014c90:	f7eb fab6 	bl	8000200 <strlen>
 8014c94:	4603      	mov	r3, r0
 8014c96:	461a      	mov	r2, r3
 8014c98:	4b69      	ldr	r3, [pc, #420]	; (8014e40 <SC_Get_Sensor_List+0x2f0>)
 8014c9a:	4413      	add	r3, r2
 8014c9c:	4965      	ldr	r1, [pc, #404]	; (8014e34 <SC_Get_Sensor_List+0x2e4>)
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	8013      	strh	r3, [r2, #0]
        (void)strcat((char *)MagNamesString, (char *)MagNameList[i]);
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	4613      	mov	r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4413      	add	r3, r2
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	4a64      	ldr	r2, [pc, #400]	; (8014e44 <SC_Get_Sensor_List+0x2f4>)
 8014cb2:	4413      	add	r3, r2
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	4862      	ldr	r0, [pc, #392]	; (8014e40 <SC_Get_Sensor_List+0x2f0>)
 8014cb8:	f003 f9f3 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(MagNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	60bb      	str	r3, [r7, #8]
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d0e2      	beq.n	8014c8e <SC_Get_Sensor_List+0x13e>
      }
      Send_Sensor_Name(Msg, MagNamesString);
 8014cc8:	495d      	ldr	r1, [pc, #372]	; (8014e40 <SC_Get_Sensor_List+0x2f0>)
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f000 fa46 	bl	801515c <Send_Sensor_Name>
      break;
 8014cd0:	e0a7      	b.n	8014e22 <SC_Get_Sensor_List+0x2d2>

    case SC_TEMPERATURE:
      /* Concatenate all sensor names of same kind to one string (comma separated) */
      for (i = 0; i < sizeof(TmpNamesString); i++)
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	60bb      	str	r3, [r7, #8]
 8014cd6:	e007      	b.n	8014ce8 <SC_Get_Sensor_List+0x198>
      {
        TmpNamesString[i] = '\0';
 8014cd8:	4a5b      	ldr	r2, [pc, #364]	; (8014e48 <SC_Get_Sensor_List+0x2f8>)
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	4413      	add	r3, r2
 8014cde:	2200      	movs	r2, #0
 8014ce0:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < sizeof(TmpNamesString); i++)
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	3301      	adds	r3, #1
 8014ce6:	60bb      	str	r3, [r7, #8]
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	2b20      	cmp	r3, #32
 8014cec:	d9f4      	bls.n	8014cd8 <SC_Get_Sensor_List+0x188>
      }
      (void)strcat((char *)TmpNamesString, (char *)TmpNameList[0]);
 8014cee:	4957      	ldr	r1, [pc, #348]	; (8014e4c <SC_Get_Sensor_List+0x2fc>)
 8014cf0:	4855      	ldr	r0, [pc, #340]	; (8014e48 <SC_Get_Sensor_List+0x2f8>)
 8014cf2:	f003 f9d6 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(TmpNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	60bb      	str	r3, [r7, #8]
 8014cfa:	e019      	b.n	8014d30 <SC_Get_Sensor_List+0x1e0>
      {
        (void)strcat((char *)TmpNamesString, ",");
 8014cfc:	4852      	ldr	r0, [pc, #328]	; (8014e48 <SC_Get_Sensor_List+0x2f8>)
 8014cfe:	f7eb fa7f 	bl	8000200 <strlen>
 8014d02:	4603      	mov	r3, r0
 8014d04:	461a      	mov	r2, r3
 8014d06:	4b50      	ldr	r3, [pc, #320]	; (8014e48 <SC_Get_Sensor_List+0x2f8>)
 8014d08:	4413      	add	r3, r2
 8014d0a:	494a      	ldr	r1, [pc, #296]	; (8014e34 <SC_Get_Sensor_List+0x2e4>)
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	460b      	mov	r3, r1
 8014d10:	881b      	ldrh	r3, [r3, #0]
 8014d12:	8013      	strh	r3, [r2, #0]
        (void)strcat((char *)TmpNamesString, (char *)TmpNameList[i]);
 8014d14:	68ba      	ldr	r2, [r7, #8]
 8014d16:	4613      	mov	r3, r2
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	4413      	add	r3, r2
 8014d1c:	005b      	lsls	r3, r3, #1
 8014d1e:	4a4b      	ldr	r2, [pc, #300]	; (8014e4c <SC_Get_Sensor_List+0x2fc>)
 8014d20:	4413      	add	r3, r2
 8014d22:	4619      	mov	r1, r3
 8014d24:	4848      	ldr	r0, [pc, #288]	; (8014e48 <SC_Get_Sensor_List+0x2f8>)
 8014d26:	f003 f9bc 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(TmpNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	60bb      	str	r3, [r7, #8]
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	2b02      	cmp	r3, #2
 8014d34:	d9e2      	bls.n	8014cfc <SC_Get_Sensor_List+0x1ac>
      }
      Send_Sensor_Name(Msg, TmpNamesString);
 8014d36:	4944      	ldr	r1, [pc, #272]	; (8014e48 <SC_Get_Sensor_List+0x2f8>)
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fa0f 	bl	801515c <Send_Sensor_Name>
      break;
 8014d3e:	e070      	b.n	8014e22 <SC_Get_Sensor_List+0x2d2>

    case SC_HUMIDITY:
      /* Concatenate all sensor names of same kind to one string (comma separated) */
      for (i = 0; i < sizeof(HumNamesString); i++)
 8014d40:	2300      	movs	r3, #0
 8014d42:	60bb      	str	r3, [r7, #8]
 8014d44:	e007      	b.n	8014d56 <SC_Get_Sensor_List+0x206>
      {
        HumNamesString[i] = '\0';
 8014d46:	4a42      	ldr	r2, [pc, #264]	; (8014e50 <SC_Get_Sensor_List+0x300>)
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	4413      	add	r3, r2
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < sizeof(HumNamesString); i++)
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	3301      	adds	r3, #1
 8014d54:	60bb      	str	r3, [r7, #8]
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2b0a      	cmp	r3, #10
 8014d5a:	d9f4      	bls.n	8014d46 <SC_Get_Sensor_List+0x1f6>
      }
      (void)strcat((char *)HumNamesString, (char *)HumNameList[0]);
 8014d5c:	493d      	ldr	r1, [pc, #244]	; (8014e54 <SC_Get_Sensor_List+0x304>)
 8014d5e:	483c      	ldr	r0, [pc, #240]	; (8014e50 <SC_Get_Sensor_List+0x300>)
 8014d60:	f003 f99f 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(HumNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014d64:	2301      	movs	r3, #1
 8014d66:	60bb      	str	r3, [r7, #8]
 8014d68:	e019      	b.n	8014d9e <SC_Get_Sensor_List+0x24e>
      {
        (void)strcat((char *)HumNamesString, ",");
 8014d6a:	4839      	ldr	r0, [pc, #228]	; (8014e50 <SC_Get_Sensor_List+0x300>)
 8014d6c:	f7eb fa48 	bl	8000200 <strlen>
 8014d70:	4603      	mov	r3, r0
 8014d72:	461a      	mov	r2, r3
 8014d74:	4b36      	ldr	r3, [pc, #216]	; (8014e50 <SC_Get_Sensor_List+0x300>)
 8014d76:	4413      	add	r3, r2
 8014d78:	492e      	ldr	r1, [pc, #184]	; (8014e34 <SC_Get_Sensor_List+0x2e4>)
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	881b      	ldrh	r3, [r3, #0]
 8014d80:	8013      	strh	r3, [r2, #0]
        (void)strcat((char *)HumNamesString, (char *)HumNameList[i]);
 8014d82:	68ba      	ldr	r2, [r7, #8]
 8014d84:	4613      	mov	r3, r2
 8014d86:	009b      	lsls	r3, r3, #2
 8014d88:	4413      	add	r3, r2
 8014d8a:	005b      	lsls	r3, r3, #1
 8014d8c:	4a31      	ldr	r2, [pc, #196]	; (8014e54 <SC_Get_Sensor_List+0x304>)
 8014d8e:	4413      	add	r3, r2
 8014d90:	4619      	mov	r1, r3
 8014d92:	482f      	ldr	r0, [pc, #188]	; (8014e50 <SC_Get_Sensor_List+0x300>)
 8014d94:	f003 f985 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(HumNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	60bb      	str	r3, [r7, #8]
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d0e2      	beq.n	8014d6a <SC_Get_Sensor_List+0x21a>
      }
      Send_Sensor_Name(Msg, HumNamesString);
 8014da4:	492a      	ldr	r1, [pc, #168]	; (8014e50 <SC_Get_Sensor_List+0x300>)
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f000 f9d8 	bl	801515c <Send_Sensor_Name>
      break;
 8014dac:	e039      	b.n	8014e22 <SC_Get_Sensor_List+0x2d2>

    case SC_PRESSURE:
      /* Concatenate all sensor names of same kind to one string (comma separated) */
      for (i = 0; i < sizeof(PrsNamesString); i++)
 8014dae:	2300      	movs	r3, #0
 8014db0:	60bb      	str	r3, [r7, #8]
 8014db2:	e007      	b.n	8014dc4 <SC_Get_Sensor_List+0x274>
      {
        PrsNamesString[i] = '\0';
 8014db4:	4a28      	ldr	r2, [pc, #160]	; (8014e58 <SC_Get_Sensor_List+0x308>)
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	4413      	add	r3, r2
 8014dba:	2200      	movs	r2, #0
 8014dbc:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < sizeof(PrsNamesString); i++)
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	60bb      	str	r3, [r7, #8]
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	2b0a      	cmp	r3, #10
 8014dc8:	d9f4      	bls.n	8014db4 <SC_Get_Sensor_List+0x264>
      }
      (void)strcat((char *)PrsNamesString, (char *)PrsNameList[0]);
 8014dca:	4924      	ldr	r1, [pc, #144]	; (8014e5c <SC_Get_Sensor_List+0x30c>)
 8014dcc:	4822      	ldr	r0, [pc, #136]	; (8014e58 <SC_Get_Sensor_List+0x308>)
 8014dce:	f003 f968 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(PrsNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	60bb      	str	r3, [r7, #8]
 8014dd6:	e019      	b.n	8014e0c <SC_Get_Sensor_List+0x2bc>
      {
        (void)strcat((char *)PrsNamesString, ",");
 8014dd8:	481f      	ldr	r0, [pc, #124]	; (8014e58 <SC_Get_Sensor_List+0x308>)
 8014dda:	f7eb fa11 	bl	8000200 <strlen>
 8014dde:	4603      	mov	r3, r0
 8014de0:	461a      	mov	r2, r3
 8014de2:	4b1d      	ldr	r3, [pc, #116]	; (8014e58 <SC_Get_Sensor_List+0x308>)
 8014de4:	4413      	add	r3, r2
 8014de6:	4913      	ldr	r1, [pc, #76]	; (8014e34 <SC_Get_Sensor_List+0x2e4>)
 8014de8:	461a      	mov	r2, r3
 8014dea:	460b      	mov	r3, r1
 8014dec:	881b      	ldrh	r3, [r3, #0]
 8014dee:	8013      	strh	r3, [r2, #0]
        (void)strcat((char *)PrsNamesString, (char *)PrsNameList[i]);
 8014df0:	68ba      	ldr	r2, [r7, #8]
 8014df2:	4613      	mov	r3, r2
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	4413      	add	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4a18      	ldr	r2, [pc, #96]	; (8014e5c <SC_Get_Sensor_List+0x30c>)
 8014dfc:	4413      	add	r3, r2
 8014dfe:	4619      	mov	r1, r3
 8014e00:	4815      	ldr	r0, [pc, #84]	; (8014e58 <SC_Get_Sensor_List+0x308>)
 8014e02:	f003 f94e 	bl	80180a2 <strcat>
      for (i = 1; i < sizeof(PrsNameList) / SENSOR_NAME_MAX_LENGTH; i++)
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	60bb      	str	r3, [r7, #8]
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d0e2      	beq.n	8014dd8 <SC_Get_Sensor_List+0x288>
      }
      Send_Sensor_Name(Msg, PrsNamesString);
 8014e12:	4911      	ldr	r1, [pc, #68]	; (8014e58 <SC_Get_Sensor_List+0x308>)
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 f9a1 	bl	801515c <Send_Sensor_Name>
      break;
 8014e1a:	e002      	b.n	8014e22 <SC_Get_Sensor_List+0x2d2>

    default:
      ret = 0;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	60fb      	str	r3, [r7, #12]
      break;
 8014e20:	bf00      	nop
  }

  return ret;
 8014e22:	68fb      	ldr	r3, [r7, #12]
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3710      	adds	r7, #16
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	20000c00 	.word	0x20000c00
 8014e30:	20000204 	.word	0x20000204
 8014e34:	08019f3c 	.word	0x08019f3c
 8014e38:	20000c24 	.word	0x20000c24
 8014e3c:	20000224 	.word	0x20000224
 8014e40:	20000c30 	.word	0x20000c30
 8014e44:	20000230 	.word	0x20000230
 8014e48:	20000c3c 	.word	0x20000c3c
 8014e4c:	20000248 	.word	0x20000248
 8014e50:	20000c60 	.word	0x20000c60
 8014e54:	2000023c 	.word	0x2000023c
 8014e58:	20000c6c 	.word	0x20000c6c
 8014e5c:	20000268 	.word	0x20000268

08014e60 <SC_Set_Sensor_Index>:
 * @brief  Set sensor index
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
static int SC_Set_Sensor_Index(TMsg *Msg)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b084      	sub	sp, #16
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	60fb      	str	r3, [r7, #12]

  /* Sensor Type */
  switch (Msg->Data[4])
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	7a1b      	ldrb	r3, [r3, #8]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	2b05      	cmp	r3, #5
 8014e74:	f200 813a 	bhi.w	80150ec <SC_Set_Sensor_Index+0x28c>
 8014e78:	a201      	add	r2, pc, #4	; (adr r2, 8014e80 <SC_Set_Sensor_Index+0x20>)
 8014e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e7e:	bf00      	nop
 8014e80:	08014e99 	.word	0x08014e99
 8014e84:	08014efd 	.word	0x08014efd
 8014e88:	08014f61 	.word	0x08014f61
 8014e8c:	08014fc5 	.word	0x08014fc5
 8014e90:	08015029 	.word	0x08015029
 8014e94:	0801508b 	.word	0x0801508b
  {
    case SC_ACCELEROMETER:
      AccIndex = Msg->Data[5];
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	7a5a      	ldrb	r2, [r3, #9]
 8014e9c:	4b9d      	ldr	r3, [pc, #628]	; (8015114 <SC_Set_Sensor_Index+0x2b4>)
 8014e9e:	701a      	strb	r2, [r3, #0]
      if (AccInstance != AccInstanceList[AccIndex])
 8014ea0:	4b9c      	ldr	r3, [pc, #624]	; (8015114 <SC_Set_Sensor_Index+0x2b4>)
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	4b9c      	ldr	r3, [pc, #624]	; (8015118 <SC_Set_Sensor_Index+0x2b8>)
 8014ea8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014eac:	4b9b      	ldr	r3, [pc, #620]	; (801511c <SC_Set_Sensor_Index+0x2bc>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	f000 811e 	beq.w	80150f2 <SC_Set_Sensor_Index+0x292>
      {
        if (BSP_MOTION_SENSOR_Disable(AccInstance, MOTION_ACCELERO) != BSP_ERROR_NONE)
 8014eb6:	4b99      	ldr	r3, [pc, #612]	; (801511c <SC_Set_Sensor_Index+0x2bc>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	2102      	movs	r1, #2
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7f5 f94f 	bl	800a160 <BSP_MOTION_SENSOR_Disable>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d001      	beq.n	8014ecc <SC_Set_Sensor_Index+0x6c>
        {
          ret = 0;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	60fb      	str	r3, [r7, #12]
        }
        if (BSP_MOTION_SENSOR_Init(AccInstanceList[AccIndex], MOTION_ACCELERO) != BSP_ERROR_NONE)
 8014ecc:	4b91      	ldr	r3, [pc, #580]	; (8015114 <SC_Set_Sensor_Index+0x2b4>)
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	4b91      	ldr	r3, [pc, #580]	; (8015118 <SC_Set_Sensor_Index+0x2b8>)
 8014ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ed8:	2102      	movs	r1, #2
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7f4 ffcc 	bl	8009e78 <BSP_MOTION_SENSOR_Init>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d001      	beq.n	8014eea <SC_Set_Sensor_Index+0x8a>
        {
          ret = 0;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	60fb      	str	r3, [r7, #12]
        }
        AccInstance = AccInstanceList[AccIndex];
 8014eea:	4b8a      	ldr	r3, [pc, #552]	; (8015114 <SC_Set_Sensor_Index+0x2b4>)
 8014eec:	781b      	ldrb	r3, [r3, #0]
 8014eee:	461a      	mov	r2, r3
 8014ef0:	4b89      	ldr	r3, [pc, #548]	; (8015118 <SC_Set_Sensor_Index+0x2b8>)
 8014ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef6:	4a89      	ldr	r2, [pc, #548]	; (801511c <SC_Set_Sensor_Index+0x2bc>)
 8014ef8:	6013      	str	r3, [r2, #0]
      }
      break;
 8014efa:	e0fa      	b.n	80150f2 <SC_Set_Sensor_Index+0x292>

    case SC_GYROSCOPE:
      GyrIndex = Msg->Data[5];
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	7a5a      	ldrb	r2, [r3, #9]
 8014f00:	4b87      	ldr	r3, [pc, #540]	; (8015120 <SC_Set_Sensor_Index+0x2c0>)
 8014f02:	701a      	strb	r2, [r3, #0]
      if (GyrInstance != GyrInstanceList[GyrIndex])
 8014f04:	4b86      	ldr	r3, [pc, #536]	; (8015120 <SC_Set_Sensor_Index+0x2c0>)
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	461a      	mov	r2, r3
 8014f0a:	4b86      	ldr	r3, [pc, #536]	; (8015124 <SC_Set_Sensor_Index+0x2c4>)
 8014f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014f10:	4b85      	ldr	r3, [pc, #532]	; (8015128 <SC_Set_Sensor_Index+0x2c8>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	f000 80ee 	beq.w	80150f6 <SC_Set_Sensor_Index+0x296>
      {
        if (BSP_MOTION_SENSOR_Disable(GyrInstance, MOTION_GYRO) != BSP_ERROR_NONE)
 8014f1a:	4b83      	ldr	r3, [pc, #524]	; (8015128 <SC_Set_Sensor_Index+0x2c8>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2101      	movs	r1, #1
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7f5 f91d 	bl	800a160 <BSP_MOTION_SENSOR_Disable>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d001      	beq.n	8014f30 <SC_Set_Sensor_Index+0xd0>
        {
          ret = 0;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	60fb      	str	r3, [r7, #12]
        }
        if (BSP_MOTION_SENSOR_Init(GyrInstanceList[GyrIndex], MOTION_GYRO) != BSP_ERROR_NONE)
 8014f30:	4b7b      	ldr	r3, [pc, #492]	; (8015120 <SC_Set_Sensor_Index+0x2c0>)
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	461a      	mov	r2, r3
 8014f36:	4b7b      	ldr	r3, [pc, #492]	; (8015124 <SC_Set_Sensor_Index+0x2c4>)
 8014f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f3c:	2101      	movs	r1, #1
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7f4 ff9a 	bl	8009e78 <BSP_MOTION_SENSOR_Init>
 8014f44:	4603      	mov	r3, r0
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d001      	beq.n	8014f4e <SC_Set_Sensor_Index+0xee>
        {
          ret = 0;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	60fb      	str	r3, [r7, #12]
        }
        GyrInstance = GyrInstanceList[GyrIndex];
 8014f4e:	4b74      	ldr	r3, [pc, #464]	; (8015120 <SC_Set_Sensor_Index+0x2c0>)
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	461a      	mov	r2, r3
 8014f54:	4b73      	ldr	r3, [pc, #460]	; (8015124 <SC_Set_Sensor_Index+0x2c4>)
 8014f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5a:	4a73      	ldr	r2, [pc, #460]	; (8015128 <SC_Set_Sensor_Index+0x2c8>)
 8014f5c:	6013      	str	r3, [r2, #0]
      }
      break;
 8014f5e:	e0ca      	b.n	80150f6 <SC_Set_Sensor_Index+0x296>

    case SC_MAGNETOMETER:
      MagIndex = Msg->Data[5];
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	7a5a      	ldrb	r2, [r3, #9]
 8014f64:	4b71      	ldr	r3, [pc, #452]	; (801512c <SC_Set_Sensor_Index+0x2cc>)
 8014f66:	701a      	strb	r2, [r3, #0]
      if (MagInstance != MagInstanceList[MagIndex])
 8014f68:	4b70      	ldr	r3, [pc, #448]	; (801512c <SC_Set_Sensor_Index+0x2cc>)
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	4b70      	ldr	r3, [pc, #448]	; (8015130 <SC_Set_Sensor_Index+0x2d0>)
 8014f70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014f74:	4b6f      	ldr	r3, [pc, #444]	; (8015134 <SC_Set_Sensor_Index+0x2d4>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	f000 80be 	beq.w	80150fa <SC_Set_Sensor_Index+0x29a>
      {
        if (BSP_MOTION_SENSOR_Disable(MagInstance, MOTION_MAGNETO) != BSP_ERROR_NONE)
 8014f7e:	4b6d      	ldr	r3, [pc, #436]	; (8015134 <SC_Set_Sensor_Index+0x2d4>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2104      	movs	r1, #4
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7f5 f8eb 	bl	800a160 <BSP_MOTION_SENSOR_Disable>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d001      	beq.n	8014f94 <SC_Set_Sensor_Index+0x134>
        {
          ret = 0;
 8014f90:	2300      	movs	r3, #0
 8014f92:	60fb      	str	r3, [r7, #12]
        }
        if (BSP_MOTION_SENSOR_Init(MagInstanceList[MagIndex], MOTION_MAGNETO) != BSP_ERROR_NONE)
 8014f94:	4b65      	ldr	r3, [pc, #404]	; (801512c <SC_Set_Sensor_Index+0x2cc>)
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	461a      	mov	r2, r3
 8014f9a:	4b65      	ldr	r3, [pc, #404]	; (8015130 <SC_Set_Sensor_Index+0x2d0>)
 8014f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fa0:	2104      	movs	r1, #4
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7f4 ff68 	bl	8009e78 <BSP_MOTION_SENSOR_Init>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d001      	beq.n	8014fb2 <SC_Set_Sensor_Index+0x152>
        {
          ret = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	60fb      	str	r3, [r7, #12]
        }
        MagInstance = MagInstanceList[MagIndex];
 8014fb2:	4b5e      	ldr	r3, [pc, #376]	; (801512c <SC_Set_Sensor_Index+0x2cc>)
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	4b5d      	ldr	r3, [pc, #372]	; (8015130 <SC_Set_Sensor_Index+0x2d0>)
 8014fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fbe:	4a5d      	ldr	r2, [pc, #372]	; (8015134 <SC_Set_Sensor_Index+0x2d4>)
 8014fc0:	6013      	str	r3, [r2, #0]
      }
      break;
 8014fc2:	e09a      	b.n	80150fa <SC_Set_Sensor_Index+0x29a>

    case SC_TEMPERATURE:
      TmpIndex = Msg->Data[5];
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	7a5a      	ldrb	r2, [r3, #9]
 8014fc8:	4b5b      	ldr	r3, [pc, #364]	; (8015138 <SC_Set_Sensor_Index+0x2d8>)
 8014fca:	701a      	strb	r2, [r3, #0]
      if (TmpInstance != TmpInstanceList[TmpIndex])
 8014fcc:	4b5a      	ldr	r3, [pc, #360]	; (8015138 <SC_Set_Sensor_Index+0x2d8>)
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	4b5a      	ldr	r3, [pc, #360]	; (801513c <SC_Set_Sensor_Index+0x2dc>)
 8014fd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014fd8:	4b59      	ldr	r3, [pc, #356]	; (8015140 <SC_Set_Sensor_Index+0x2e0>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	f000 808e 	beq.w	80150fe <SC_Set_Sensor_Index+0x29e>
      {
        if (BSP_ENV_SENSOR_Disable(TmpInstance, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 8014fe2:	4b57      	ldr	r3, [pc, #348]	; (8015140 <SC_Set_Sensor_Index+0x2e0>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2101      	movs	r1, #1
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7f4 fb07 	bl	80095fc <BSP_ENV_SENSOR_Disable>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d001      	beq.n	8014ff8 <SC_Set_Sensor_Index+0x198>
        {
          ret = 0;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	60fb      	str	r3, [r7, #12]
        }
        if (BSP_ENV_SENSOR_Init(TmpInstanceList[TmpIndex], ENV_TEMPERATURE) != BSP_ERROR_NONE)
 8014ff8:	4b4f      	ldr	r3, [pc, #316]	; (8015138 <SC_Set_Sensor_Index+0x2d8>)
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	461a      	mov	r2, r3
 8014ffe:	4b4f      	ldr	r3, [pc, #316]	; (801513c <SC_Set_Sensor_Index+0x2dc>)
 8015000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015004:	2101      	movs	r1, #1
 8015006:	4618      	mov	r0, r3
 8015008:	f7f4 f9ba 	bl	8009380 <BSP_ENV_SENSOR_Init>
 801500c:	4603      	mov	r3, r0
 801500e:	2b00      	cmp	r3, #0
 8015010:	d001      	beq.n	8015016 <SC_Set_Sensor_Index+0x1b6>
        {
          ret = 0;
 8015012:	2300      	movs	r3, #0
 8015014:	60fb      	str	r3, [r7, #12]
        }
        TmpInstance = TmpInstanceList[TmpIndex];
 8015016:	4b48      	ldr	r3, [pc, #288]	; (8015138 <SC_Set_Sensor_Index+0x2d8>)
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	461a      	mov	r2, r3
 801501c:	4b47      	ldr	r3, [pc, #284]	; (801513c <SC_Set_Sensor_Index+0x2dc>)
 801501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015022:	4a47      	ldr	r2, [pc, #284]	; (8015140 <SC_Set_Sensor_Index+0x2e0>)
 8015024:	6013      	str	r3, [r2, #0]
      }
      break;
 8015026:	e06a      	b.n	80150fe <SC_Set_Sensor_Index+0x29e>

    case SC_HUMIDITY:
      HumIndex = Msg->Data[5];
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	7a5a      	ldrb	r2, [r3, #9]
 801502c:	4b45      	ldr	r3, [pc, #276]	; (8015144 <SC_Set_Sensor_Index+0x2e4>)
 801502e:	701a      	strb	r2, [r3, #0]
      if (HumInstance != HumInstanceList[HumIndex])
 8015030:	4b44      	ldr	r3, [pc, #272]	; (8015144 <SC_Set_Sensor_Index+0x2e4>)
 8015032:	781b      	ldrb	r3, [r3, #0]
 8015034:	461a      	mov	r2, r3
 8015036:	4b44      	ldr	r3, [pc, #272]	; (8015148 <SC_Set_Sensor_Index+0x2e8>)
 8015038:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801503c:	4b43      	ldr	r3, [pc, #268]	; (801514c <SC_Set_Sensor_Index+0x2ec>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	429a      	cmp	r2, r3
 8015042:	d05e      	beq.n	8015102 <SC_Set_Sensor_Index+0x2a2>
      {
        if (BSP_ENV_SENSOR_Disable(HumInstance, ENV_HUMIDITY) != BSP_ERROR_NONE)
 8015044:	4b41      	ldr	r3, [pc, #260]	; (801514c <SC_Set_Sensor_Index+0x2ec>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2104      	movs	r1, #4
 801504a:	4618      	mov	r0, r3
 801504c:	f7f4 fad6 	bl	80095fc <BSP_ENV_SENSOR_Disable>
 8015050:	4603      	mov	r3, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	d001      	beq.n	801505a <SC_Set_Sensor_Index+0x1fa>
        {
          ret = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	60fb      	str	r3, [r7, #12]
        }
        if (BSP_ENV_SENSOR_Init(HumInstanceList[HumIndex], ENV_HUMIDITY) != BSP_ERROR_NONE)
 801505a:	4b3a      	ldr	r3, [pc, #232]	; (8015144 <SC_Set_Sensor_Index+0x2e4>)
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	461a      	mov	r2, r3
 8015060:	4b39      	ldr	r3, [pc, #228]	; (8015148 <SC_Set_Sensor_Index+0x2e8>)
 8015062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015066:	2104      	movs	r1, #4
 8015068:	4618      	mov	r0, r3
 801506a:	f7f4 f989 	bl	8009380 <BSP_ENV_SENSOR_Init>
 801506e:	4603      	mov	r3, r0
 8015070:	2b00      	cmp	r3, #0
 8015072:	d001      	beq.n	8015078 <SC_Set_Sensor_Index+0x218>
        {
          ret = 0;
 8015074:	2300      	movs	r3, #0
 8015076:	60fb      	str	r3, [r7, #12]
        }
        HumInstance = HumInstanceList[HumIndex];
 8015078:	4b32      	ldr	r3, [pc, #200]	; (8015144 <SC_Set_Sensor_Index+0x2e4>)
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	461a      	mov	r2, r3
 801507e:	4b32      	ldr	r3, [pc, #200]	; (8015148 <SC_Set_Sensor_Index+0x2e8>)
 8015080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015084:	4a31      	ldr	r2, [pc, #196]	; (801514c <SC_Set_Sensor_Index+0x2ec>)
 8015086:	6013      	str	r3, [r2, #0]
      }
      break;
 8015088:	e03b      	b.n	8015102 <SC_Set_Sensor_Index+0x2a2>

    case SC_PRESSURE:
      PrsIndex = Msg->Data[5];
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	7a5a      	ldrb	r2, [r3, #9]
 801508e:	4b30      	ldr	r3, [pc, #192]	; (8015150 <SC_Set_Sensor_Index+0x2f0>)
 8015090:	701a      	strb	r2, [r3, #0]
      if (PrsInstance != PrsInstanceList[PrsIndex])
 8015092:	4b2f      	ldr	r3, [pc, #188]	; (8015150 <SC_Set_Sensor_Index+0x2f0>)
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	461a      	mov	r2, r3
 8015098:	4b2e      	ldr	r3, [pc, #184]	; (8015154 <SC_Set_Sensor_Index+0x2f4>)
 801509a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801509e:	4b2e      	ldr	r3, [pc, #184]	; (8015158 <SC_Set_Sensor_Index+0x2f8>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d02f      	beq.n	8015106 <SC_Set_Sensor_Index+0x2a6>
      {
        if (BSP_ENV_SENSOR_Disable(PrsInstance, ENV_PRESSURE) != BSP_ERROR_NONE)
 80150a6:	4b2c      	ldr	r3, [pc, #176]	; (8015158 <SC_Set_Sensor_Index+0x2f8>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2102      	movs	r1, #2
 80150ac:	4618      	mov	r0, r3
 80150ae:	f7f4 faa5 	bl	80095fc <BSP_ENV_SENSOR_Disable>
 80150b2:	4603      	mov	r3, r0
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d001      	beq.n	80150bc <SC_Set_Sensor_Index+0x25c>
        {
          ret = 0;
 80150b8:	2300      	movs	r3, #0
 80150ba:	60fb      	str	r3, [r7, #12]
        }
        if (BSP_ENV_SENSOR_Init(PrsInstanceList[PrsIndex], ENV_PRESSURE) != BSP_ERROR_NONE)
 80150bc:	4b24      	ldr	r3, [pc, #144]	; (8015150 <SC_Set_Sensor_Index+0x2f0>)
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	461a      	mov	r2, r3
 80150c2:	4b24      	ldr	r3, [pc, #144]	; (8015154 <SC_Set_Sensor_Index+0x2f4>)
 80150c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c8:	2102      	movs	r1, #2
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7f4 f958 	bl	8009380 <BSP_ENV_SENSOR_Init>
 80150d0:	4603      	mov	r3, r0
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d001      	beq.n	80150da <SC_Set_Sensor_Index+0x27a>
        {
          ret = 0;
 80150d6:	2300      	movs	r3, #0
 80150d8:	60fb      	str	r3, [r7, #12]
        }
        PrsInstance = PrsInstanceList[PrsIndex];
 80150da:	4b1d      	ldr	r3, [pc, #116]	; (8015150 <SC_Set_Sensor_Index+0x2f0>)
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	461a      	mov	r2, r3
 80150e0:	4b1c      	ldr	r3, [pc, #112]	; (8015154 <SC_Set_Sensor_Index+0x2f4>)
 80150e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e6:	4a1c      	ldr	r2, [pc, #112]	; (8015158 <SC_Set_Sensor_Index+0x2f8>)
 80150e8:	6013      	str	r3, [r2, #0]
      }
      break;
 80150ea:	e00c      	b.n	8015106 <SC_Set_Sensor_Index+0x2a6>

    default:
      ret = 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	60fb      	str	r3, [r7, #12]
      break;
 80150f0:	e00a      	b.n	8015108 <SC_Set_Sensor_Index+0x2a8>
      break;
 80150f2:	bf00      	nop
 80150f4:	e008      	b.n	8015108 <SC_Set_Sensor_Index+0x2a8>
      break;
 80150f6:	bf00      	nop
 80150f8:	e006      	b.n	8015108 <SC_Set_Sensor_Index+0x2a8>
      break;
 80150fa:	bf00      	nop
 80150fc:	e004      	b.n	8015108 <SC_Set_Sensor_Index+0x2a8>
      break;
 80150fe:	bf00      	nop
 8015100:	e002      	b.n	8015108 <SC_Set_Sensor_Index+0x2a8>
      break;
 8015102:	bf00      	nop
 8015104:	e000      	b.n	8015108 <SC_Set_Sensor_Index+0x2a8>
      break;
 8015106:	bf00      	nop
  }

  return ret;
 8015108:	68fb      	ldr	r3, [r7, #12]
}
 801510a:	4618      	mov	r0, r3
 801510c:	3710      	adds	r7, #16
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
 8015112:	bf00      	nop
 8015114:	20000c77 	.word	0x20000c77
 8015118:	20000274 	.word	0x20000274
 801511c:	200001f4 	.word	0x200001f4
 8015120:	20000c78 	.word	0x20000c78
 8015124:	20000280 	.word	0x20000280
 8015128:	200001f8 	.word	0x200001f8
 801512c:	20000c79 	.word	0x20000c79
 8015130:	20000284 	.word	0x20000284
 8015134:	200001fc 	.word	0x200001fc
 8015138:	20000c7b 	.word	0x20000c7b
 801513c:	20000288 	.word	0x20000288
 8015140:	20000be4 	.word	0x20000be4
 8015144:	20000c7a 	.word	0x20000c7a
 8015148:	20000be8 	.word	0x20000be8
 801514c:	20000be0 	.word	0x20000be0
 8015150:	20000c7c 	.word	0x20000c7c
 8015154:	20000294 	.word	0x20000294
 8015158:	20000200 	.word	0x20000200

0801515c <Send_Sensor_Name>:
 * @param  Msg the pointer to the message to be handled
 * @param  SensorName the sensor name
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
void Send_Sensor_Name(TMsg *Msg, uint8_t* sensor_name)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
 8015164:	6039      	str	r1, [r7, #0]
  int i = 0;
 8015166:	2300      	movs	r3, #0
 8015168:	60fb      	str	r3, [r7, #12]
  BUILD_REPLY_HEADER(Msg);
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f7fd fba6 	bl	80128bc <BUILD_REPLY_HEADER>

  while (i < strlen((char const*)sensor_name))
 8015170:	e00c      	b.n	801518c <Send_Sensor_Name+0x30>
  {
    Msg->Data[5 + i] = sensor_name[i];
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	683a      	ldr	r2, [r7, #0]
 8015176:	441a      	add	r2, r3
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	3305      	adds	r3, #5
 801517c:	7811      	ldrb	r1, [r2, #0]
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	4413      	add	r3, r2
 8015182:	460a      	mov	r2, r1
 8015184:	711a      	strb	r2, [r3, #4]
    i++;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	3301      	adds	r3, #1
 801518a:	60fb      	str	r3, [r7, #12]
  while (i < strlen((char const*)sensor_name))
 801518c:	6838      	ldr	r0, [r7, #0]
 801518e:	f7eb f837 	bl	8000200 <strlen>
 8015192:	4602      	mov	r2, r0
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	429a      	cmp	r2, r3
 8015198:	d8eb      	bhi.n	8015172 <Send_Sensor_Name+0x16>
  }

  Msg->Len = 5 + i;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	3305      	adds	r3, #5
 801519e:	461a      	mov	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f001 f889 	bl	80162bc <VCOM_send_MSG>
}
 80151aa:	bf00      	nop
 80151ac:	3710      	adds	r7, #16
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}

080151b2 <Send_Sensor_FS_List>:
 * @param  Msg the pointer to the message to be handled
 * @param  FsList the sensor full scale list
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
void Send_Sensor_FS_List(TMsg *Msg, uint32_t* fs_list)
{
 80151b2:	b580      	push	{r7, lr}
 80151b4:	b084      	sub	sp, #16
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	6078      	str	r0, [r7, #4]
 80151ba:	6039      	str	r1, [r7, #0]
  int i = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	60fb      	str	r3, [r7, #12]
  BUILD_REPLY_HEADER(Msg);
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f7fd fb7b 	bl	80128bc <BUILD_REPLY_HEADER>

  Serialize(&Msg->Data[5], fs_list[0], 4);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f103 0009 	add.w	r0, r3, #9
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2204      	movs	r2, #4
 80151d2:	4619      	mov	r1, r3
 80151d4:	f000 f962 	bl	801549c <Serialize>

  for (i = 0; i < fs_list[0]; i++)
 80151d8:	2300      	movs	r3, #0
 80151da:	60fb      	str	r3, [r7, #12]
 80151dc:	e012      	b.n	8015204 <Send_Sensor_FS_List+0x52>
  {
    Serialize(&Msg->Data[9 + i * 4], fs_list[i + 1], 4);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	009b      	lsls	r3, r3, #2
 80151e2:	3309      	adds	r3, #9
 80151e4:	687a      	ldr	r2, [r7, #4]
 80151e6:	4413      	add	r3, r2
 80151e8:	1d18      	adds	r0, r3, #4
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	3301      	adds	r3, #1
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	683a      	ldr	r2, [r7, #0]
 80151f2:	4413      	add	r3, r2
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	2204      	movs	r2, #4
 80151f8:	4619      	mov	r1, r3
 80151fa:	f000 f94f 	bl	801549c <Serialize>
  for (i = 0; i < fs_list[0]; i++)
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	3301      	adds	r3, #1
 8015202:	60fb      	str	r3, [r7, #12]
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	429a      	cmp	r2, r3
 801520c:	d8e7      	bhi.n	80151de <Send_Sensor_FS_List+0x2c>
  }

  Msg->Len = 9 + i * 4;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	3309      	adds	r3, #9
 8015214:	461a      	mov	r2, r3
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f001 f84e 	bl	80162bc <VCOM_send_MSG>
}
 8015220:	bf00      	nop
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <Send_Sensor_ODR_List>:
 * @param  Msg the pointer to the message to be handled
 * @param  OdrList the sensor output data rate list
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
void Send_Sensor_ODR_List(TMsg *Msg, float* odr_list)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6039      	str	r1, [r7, #0]
  int i = 0;
 8015232:	2300      	movs	r3, #0
 8015234:	60fb      	str	r3, [r7, #12]
  BUILD_REPLY_HEADER(Msg);
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7fd fb40 	bl	80128bc <BUILD_REPLY_HEADER>

  Serialize(&Msg->Data[5], (int) odr_list[0], 4);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f103 0009 	add.w	r0, r3, #9
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	edd3 7a00 	vldr	s15, [r3]
 8015248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801524c:	ee17 3a90 	vmov	r3, s15
 8015250:	2204      	movs	r2, #4
 8015252:	4619      	mov	r1, r3
 8015254:	f000 f922 	bl	801549c <Serialize>

  for (i = 0; i < odr_list[0]; i++)
 8015258:	2300      	movs	r3, #0
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	e014      	b.n	8015288 <Send_Sensor_ODR_List+0x60>
  {
    FloatToArray(&Msg->Data[9 + i * 4], odr_list[i + 1]);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	3309      	adds	r3, #9
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	4413      	add	r3, r2
 8015268:	1d19      	adds	r1, r3, #4
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	3301      	adds	r3, #1
 801526e:	009b      	lsls	r3, r3, #2
 8015270:	683a      	ldr	r2, [r7, #0]
 8015272:	4413      	add	r3, r2
 8015274:	edd3 7a00 	vldr	s15, [r3]
 8015278:	eeb0 0a67 	vmov.f32	s0, s15
 801527c:	4608      	mov	r0, r1
 801527e:	f000 f81d 	bl	80152bc <FloatToArray>
  for (i = 0; i < odr_list[0]; i++)
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	3301      	adds	r3, #1
 8015286:	60fb      	str	r3, [r7, #12]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	ee07 3a90 	vmov	s15, r3
 801528e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	edd3 7a00 	vldr	s15, [r3]
 8015298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a0:	d4dd      	bmi.n	801525e <Send_Sensor_ODR_List+0x36>
  }

  Msg->Len = 9 + i * 4;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	009b      	lsls	r3, r3, #2
 80152a6:	3309      	adds	r3, #9
 80152a8:	461a      	mov	r2, r3
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	601a      	str	r2, [r3, #0]
  VCOM_send_MSG(Msg);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f001 f804 	bl	80162bc <VCOM_send_MSG>
}
 80152b4:	bf00      	nop
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <FloatToArray>:
 * @param  Dest the pointer to the destination
 * @param  data the source data
 * @retval None
 */
void FloatToArray(uint8_t *Dest, float data)
{
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	ed87 0a00 	vstr	s0, [r7]
 80152c8:	683a      	ldr	r2, [r7, #0]
  memcpy(Dest, (void *) &data, 4);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	601a      	str	r2, [r3, #0]
}
 80152ce:	bf00      	nop
 80152d0:	370c      	adds	r7, #12
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <ArrayToFloat>:
 * @param  Source the pointer to the source data
 * @param  data the pointer to the destination
 * @retval None
 */
void ArrayToFloat(uint8_t *Source, float *data)
{
 80152da:	b480      	push	{r7}
 80152dc:	b083      	sub	sp, #12
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	6039      	str	r1, [r7, #0]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	461a      	mov	r2, r3
  memcpy((void *) data, Source, 4);
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	601a      	str	r2, [r3, #0]
}
 80152ee:	bf00      	nop
 80152f0:	370c      	adds	r7, #12
 80152f2:	46bd      	mov	sp, r7
 80152f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f8:	4770      	bx	lr

080152fa <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
*/
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 80152fa:	b480      	push	{r7}
 80152fc:	b083      	sub	sp, #12
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
 8015302:	460b      	mov	r3, r1
 8015304:	70fb      	strb	r3, [r7, #3]
  switch(Source)
 8015306:	78fb      	ldrb	r3, [r7, #3]
 8015308:	2bf0      	cmp	r3, #240	; 0xf0
 801530a:	d002      	beq.n	8015312 <ByteStuffCopyByte+0x18>
 801530c:	2bf1      	cmp	r3, #241	; 0xf1
 801530e:	d009      	beq.n	8015324 <ByteStuffCopyByte+0x2a>
 8015310:	e011      	b.n	8015336 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	22f1      	movs	r2, #241	; 0xf1
 8015316:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	3301      	adds	r3, #1
 801531c:	22f2      	movs	r2, #242	; 0xf2
 801531e:	701a      	strb	r2, [r3, #0]
      return 2;
 8015320:	2302      	movs	r3, #2
 8015322:	e00c      	b.n	801533e <ByteStuffCopyByte+0x44>
    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	22f1      	movs	r2, #241	; 0xf1
 8015328:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	3301      	adds	r3, #1
 801532e:	22f1      	movs	r2, #241	; 0xf1
 8015330:	701a      	strb	r2, [r3, #0]
      return 2;
 8015332:	2302      	movs	r3, #2
 8015334:	e003      	b.n	801533e <ByteStuffCopyByte+0x44>
    default:
      Dest[0] = Source;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	78fa      	ldrb	r2, [r7, #3]
 801533a:	701a      	strb	r2, [r3, #0]
      return 1;
 801533c:	2301      	movs	r3, #1
  }
}
 801533e:	4618      	mov	r0, r3
 8015340:	370c      	adds	r7, #12
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b084      	sub	sp, #16
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
 8015352:	6039      	str	r1, [r7, #0]
  int i, Count;

  Count = 0;
 8015354:	2300      	movs	r3, #0
 8015356:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8015358:	2300      	movs	r3, #0
 801535a:	60fb      	str	r3, [r7, #12]
 801535c:	e011      	b.n	8015382 <ByteStuffCopy+0x38>
  {
    Count += ByteStuffCopyByte(&Dest[Count], Source->Data[i]);
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	18d0      	adds	r0, r2, r3
 8015364:	683a      	ldr	r2, [r7, #0]
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	4413      	add	r3, r2
 801536a:	3304      	adds	r3, #4
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	4619      	mov	r1, r3
 8015370:	f7ff ffc3 	bl	80152fa <ByteStuffCopyByte>
 8015374:	4602      	mov	r2, r0
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	4413      	add	r3, r2
 801537a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	3301      	adds	r3, #1
 8015380:	60fb      	str	r3, [r7, #12]
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	429a      	cmp	r2, r3
 801538a:	d8e8      	bhi.n	801535e <ByteStuffCopy+0x14>
  }
  Dest[Count] = TMsg_EOF;
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	4413      	add	r3, r2
 8015392:	22f0      	movs	r2, #240	; 0xf0
 8015394:	701a      	strb	r2, [r3, #0]
  Count++;
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	3301      	adds	r3, #1
 801539a:	60bb      	str	r3, [r7, #8]
  return Count;
 801539c:	68bb      	ldr	r3, [r7, #8]
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3710      	adds	r7, #16
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 80153a6:	b480      	push	{r7}
 80153a8:	b083      	sub	sp, #12
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	4603      	mov	r3, r0
 80153ae:	603a      	str	r2, [r7, #0]
 80153b0:	71fb      	strb	r3, [r7, #7]
 80153b2:	460b      	mov	r3, r1
 80153b4:	71bb      	strb	r3, [r7, #6]
  if (Source0 == TMsg_BS)
 80153b6:	79fb      	ldrb	r3, [r7, #7]
 80153b8:	2bf1      	cmp	r3, #241	; 0xf1
 80153ba:	d111      	bne.n	80153e0 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == TMsg_BS)
 80153bc:	79bb      	ldrb	r3, [r7, #6]
 80153be:	2bf1      	cmp	r3, #241	; 0xf1
 80153c0:	d104      	bne.n	80153cc <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	22f1      	movs	r2, #241	; 0xf1
 80153c6:	701a      	strb	r2, [r3, #0]
      return 2;
 80153c8:	2302      	movs	r3, #2
 80153ca:	e00d      	b.n	80153e8 <ReverseByteStuffCopyByte2+0x42>
    }
    if (Source1 == TMsg_BS_EOF)
 80153cc:	79bb      	ldrb	r3, [r7, #6]
 80153ce:	2bf2      	cmp	r3, #242	; 0xf2
 80153d0:	d104      	bne.n	80153dc <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	22f0      	movs	r2, #240	; 0xf0
 80153d6:	701a      	strb	r2, [r3, #0]
      return 2;
 80153d8:	2302      	movs	r3, #2
 80153da:	e005      	b.n	80153e8 <ReverseByteStuffCopyByte2+0x42>
    }
    return 0; // invalid sequence
 80153dc:	2300      	movs	r3, #0
 80153de:	e003      	b.n	80153e8 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	79fa      	ldrb	r2, [r7, #7]
 80153e4:	701a      	strb	r2, [r3, #0]
    return 1;
 80153e6:	2301      	movs	r3, #1
  }
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	370c      	adds	r7, #12
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr

080153f4 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b085      	sub	sp, #20
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
  uint8_t CHK = 0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	73fb      	strb	r3, [r7, #15]
  int i;

  for(i = 0; i < Msg->Len; i++)
 8015400:	2300      	movs	r3, #0
 8015402:	60bb      	str	r3, [r7, #8]
 8015404:	e00a      	b.n	801541c <CHK_ComputeAndAdd+0x28>
  {
    CHK -= Msg->Data[i];
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	4413      	add	r3, r2
 801540c:	3304      	adds	r3, #4
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	7bfa      	ldrb	r2, [r7, #15]
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	73fb      	strb	r3, [r7, #15]
  for(i = 0; i < Msg->Len; i++)
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	3301      	adds	r3, #1
 801541a:	60bb      	str	r3, [r7, #8]
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	429a      	cmp	r2, r3
 8015424:	d8ef      	bhi.n	8015406 <CHK_ComputeAndAdd+0x12>
  }
  Msg->Data[i] = CHK;
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	4413      	add	r3, r2
 801542c:	3304      	adds	r3, #4
 801542e:	7bfa      	ldrb	r2, [r7, #15]
 8015430:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	1c5a      	adds	r2, r3, #1
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	601a      	str	r2, [r3, #0]
}
 801543c:	bf00      	nop
 801543e:	3714      	adds	r7, #20
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8015448:	b480      	push	{r7}
 801544a:	b085      	sub	sp, #20
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  uint8_t CHK = 0;
 8015450:	2300      	movs	r3, #0
 8015452:	73fb      	strb	r3, [r7, #15]
  int i;

  for(i = 0; i < Msg->Len; i++)
 8015454:	2300      	movs	r3, #0
 8015456:	60bb      	str	r3, [r7, #8]
 8015458:	e00a      	b.n	8015470 <CHK_CheckAndRemove+0x28>
  {
    CHK += Msg->Data[i];
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	4413      	add	r3, r2
 8015460:	3304      	adds	r3, #4
 8015462:	781a      	ldrb	r2, [r3, #0]
 8015464:	7bfb      	ldrb	r3, [r7, #15]
 8015466:	4413      	add	r3, r2
 8015468:	73fb      	strb	r3, [r7, #15]
  for(i = 0; i < Msg->Len; i++)
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	3301      	adds	r3, #1
 801546e:	60bb      	str	r3, [r7, #8]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	429a      	cmp	r2, r3
 8015478:	d8ef      	bhi.n	801545a <CHK_CheckAndRemove+0x12>
  }
  Msg->Len--;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	1e5a      	subs	r2, r3, #1
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	601a      	str	r2, [r3, #0]
  return (CHK == 0);
 8015484:	7bfb      	ldrb	r3, [r7, #15]
 8015486:	2b00      	cmp	r3, #0
 8015488:	bf0c      	ite	eq
 801548a:	2301      	moveq	r3, #1
 801548c:	2300      	movne	r3, #0
 801548e:	b2db      	uxtb	r3, r3
}
 8015490:	4618      	mov	r0, r3
 8015492:	3714      	adds	r7, #20
 8015494:	46bd      	mov	sp, r7
 8015496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549a:	4770      	bx	lr

0801549c <Serialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize(uint8_t *Dest, uint32_t Source, uint32_t Len)
{
 801549c:	b480      	push	{r7}
 801549e:	b087      	sub	sp, #28
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < Len; i++)
 80154a8:	2300      	movs	r3, #0
 80154aa:	617b      	str	r3, [r7, #20]
 80154ac:	e00b      	b.n	80154c6 <Serialize+0x2a>
  {
    Dest[i] = Source & 0xFF;
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	4413      	add	r3, r2
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	b2d2      	uxtb	r2, r2
 80154b8:	701a      	strb	r2, [r3, #0]
    Source >>= 8;
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	0a1b      	lsrs	r3, r3, #8
 80154be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	3301      	adds	r3, #1
 80154c4:	617b      	str	r3, [r7, #20]
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	687a      	ldr	r2, [r7, #4]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d8ef      	bhi.n	80154ae <Serialize+0x12>
  }
}
 80154ce:	bf00      	nop
 80154d0:	bf00      	nop
 80154d2:	371c      	adds	r7, #28
 80154d4:	46bd      	mov	sp, r7
 80154d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154da:	4770      	bx	lr

080154dc <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 80154dc:	b480      	push	{r7}
 80154de:	b085      	sub	sp, #20
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
  uint32_t app;
  app = Source[--Len];
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	3b01      	subs	r3, #1
 80154ea:	603b      	str	r3, [r7, #0]
 80154ec:	687a      	ldr	r2, [r7, #4]
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	4413      	add	r3, r2
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	60fb      	str	r3, [r7, #12]
  while(Len > 0)
 80154f6:	e00d      	b.n	8015514 <Deserialize+0x38>
  {
    app <<= 8;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	021b      	lsls	r3, r3, #8
 80154fc:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	3b01      	subs	r3, #1
 8015502:	603b      	str	r3, [r7, #0]
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	4413      	add	r3, r2
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	461a      	mov	r2, r3
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	4413      	add	r3, r2
 8015512:	60fb      	str	r3, [r7, #12]
  while(Len > 0)
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d1ee      	bne.n	80154f8 <Deserialize+0x1c>
  }
  return app;
 801551a:	68fb      	ldr	r3, [r7, #12]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3714      	adds	r7, #20
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8015528:	b480      	push	{r7}
 801552a:	b087      	sub	sp, #28
 801552c:	af00      	add	r7, sp, #0
 801552e:	60f8      	str	r0, [r7, #12]
 8015530:	60b9      	str	r1, [r7, #8]
 8015532:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < Len; i++)
 8015534:	2300      	movs	r3, #0
 8015536:	617b      	str	r3, [r7, #20]
 8015538:	e00b      	b.n	8015552 <Serialize_s32+0x2a>
  {
    Dest[i] = Source & 0xFF;
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	68fa      	ldr	r2, [r7, #12]
 801553e:	4413      	add	r3, r2
 8015540:	68ba      	ldr	r2, [r7, #8]
 8015542:	b2d2      	uxtb	r2, r2
 8015544:	701a      	strb	r2, [r3, #0]
    Source >>= 8;
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	121b      	asrs	r3, r3, #8
 801554a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	3301      	adds	r3, #1
 8015550:	617b      	str	r3, [r7, #20]
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	687a      	ldr	r2, [r7, #4]
 8015556:	429a      	cmp	r2, r3
 8015558:	d8ef      	bhi.n	801553a <Serialize_s32+0x12>
  }
}
 801555a:	bf00      	nop
 801555c:	bf00      	nop
 801555e:	371c      	adds	r7, #28
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr

08015568 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08a      	sub	sp, #40	; 0x28
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015570:	4b1a      	ldr	r3, [pc, #104]	; (80155dc <HAL_PCD_MspInit+0x74>)
 8015572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015574:	4a19      	ldr	r2, [pc, #100]	; (80155dc <HAL_PCD_MspInit+0x74>)
 8015576:	f043 0301 	orr.w	r3, r3, #1
 801557a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801557c:	4b17      	ldr	r3, [pc, #92]	; (80155dc <HAL_PCD_MspInit+0x74>)
 801557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015580:	f003 0301 	and.w	r3, r3, #1
 8015584:	613b      	str	r3, [r7, #16]
 8015586:	693b      	ldr	r3, [r7, #16]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8015588:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801558c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801558e:	2302      	movs	r3, #2
 8015590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015592:	2300      	movs	r3, #0
 8015594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015596:	2303      	movs	r3, #3
 8015598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801559a:	230a      	movs	r3, #10
 801559c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801559e:	f107 0314 	add.w	r3, r7, #20
 80155a2:	4619      	mov	r1, r3
 80155a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80155a8:	f7f6 f8e0 	bl	800b76c <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80155ac:	4b0b      	ldr	r3, [pc, #44]	; (80155dc <HAL_PCD_MspInit+0x74>)
 80155ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155b0:	4a0a      	ldr	r2, [pc, #40]	; (80155dc <HAL_PCD_MspInit+0x74>)
 80155b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80155b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80155b8:	4b08      	ldr	r3, [pc, #32]	; (80155dc <HAL_PCD_MspInit+0x74>)
 80155ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80155c0:	60fb      	str	r3, [r7, #12]
 80155c2:	68fb      	ldr	r3, [r7, #12]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80155c4:	2200      	movs	r2, #0
 80155c6:	2106      	movs	r1, #6
 80155c8:	2043      	movs	r0, #67	; 0x43
 80155ca:	f7f6 f898 	bl	800b6fe <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80155ce:	2043      	movs	r0, #67	; 0x43
 80155d0:	f7f6 f8b1 	bl	800b736 <HAL_NVIC_EnableIRQ>
}
 80155d4:	bf00      	nop
 80155d6:	3728      	adds	r7, #40	; 0x28
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	40021000 	.word	0x40021000

080155e0 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b0bc      	sub	sp, #240	; 0xf0
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80155e8:	4b22      	ldr	r3, [pc, #136]	; (8015674 <HAL_RTC_MspInit+0x94>)
 80155ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155ec:	4a21      	ldr	r2, [pc, #132]	; (8015674 <HAL_RTC_MspInit+0x94>)
 80155ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80155f2:	6593      	str	r3, [r2, #88]	; 0x58
 80155f4:	4b1f      	ldr	r3, [pc, #124]	; (8015674 <HAL_RTC_MspInit+0x94>)
 80155f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80155fc:	60fb      	str	r3, [r7, #12]
 80155fe:	68fb      	ldr	r3, [r7, #12]
  HAL_PWR_DisableBkUpAccess();
 8015600:	f7f8 fa96 	bl	800db30 <HAL_PWR_DisableBkUpAccess>

  /*##-1- Configure the RTC clock source ######################################*/
  /* -a- Enable LSI Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI;
 8015604:	2308      	movs	r3, #8
 8015606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801560a:	2300      	movs	r3, #0
 801560c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8015610:	2301      	movs	r3, #1
 8015612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801561a:	4618      	mov	r0, r3
 801561c:	f7f8 fad8 	bl	800dbd0 <HAL_RCC_OscConfig>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d000      	beq.n	8015628 <HAL_RTC_MspInit+0x48>
  {
    while(1);
 8015626:	e7fe      	b.n	8015626 <HAL_RTC_MspInit+0x46>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8015628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801562c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 801562e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015636:	f107 0310 	add.w	r3, r7, #16
 801563a:	4618      	mov	r0, r3
 801563c:	f7f9 f970 	bl	800e920 <HAL_RCCEx_PeriphCLKConfig>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d000      	beq.n	8015648 <HAL_RTC_MspInit+0x68>
  {
    while(1);
 8015646:	e7fe      	b.n	8015646 <HAL_RTC_MspInit+0x66>
  }
  HAL_PWR_EnableBkUpAccess();
 8015648:	f7f8 fa62 	bl	800db10 <HAL_PWR_EnableBkUpAccess>

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 801564c:	4b09      	ldr	r3, [pc, #36]	; (8015674 <HAL_RTC_MspInit+0x94>)
 801564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015652:	4a08      	ldr	r2, [pc, #32]	; (8015674 <HAL_RTC_MspInit+0x94>)
 8015654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /*##-3- Configure the NVIC for RTC Wake up #################################*/
  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0x00, 0);
 801565c:	2200      	movs	r2, #0
 801565e:	2100      	movs	r1, #0
 8015660:	2003      	movs	r0, #3
 8015662:	f7f6 f84c 	bl	800b6fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8015666:	2003      	movs	r0, #3
 8015668:	f7f6 f865 	bl	800b736 <HAL_NVIC_EnableIRQ>
}
 801566c:	bf00      	nop
 801566e:	37f0      	adds	r7, #240	; 0xf0
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}
 8015674:	40021000 	.word	0x40021000

08015678 <NMI_Handler>:
  * @brief  This function handles NMI exception
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8015678:	b480      	push	{r7}
 801567a:	af00      	add	r7, sp, #0
}
 801567c:	bf00      	nop
 801567e:	46bd      	mov	sp, r7
 8015680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015684:	4770      	bx	lr

08015686 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8015686:	b480      	push	{r7}
 8015688:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 801568a:	e7fe      	b.n	801568a <HardFault_Handler+0x4>

0801568c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801568c:	b480      	push	{r7}
 801568e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8015690:	e7fe      	b.n	8015690 <MemManage_Handler+0x4>

08015692 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8015692:	b480      	push	{r7}
 8015694:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8015696:	e7fe      	b.n	8015696 <BusFault_Handler+0x4>

08015698 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8015698:	b480      	push	{r7}
 801569a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 801569c:	e7fe      	b.n	801569c <UsageFault_Handler+0x4>

0801569e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 801569e:	b480      	push	{r7}
 80156a0:	af00      	add	r7, sp, #0
}
 80156a2:	bf00      	nop
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80156ac:	b480      	push	{r7}
 80156ae:	af00      	add	r7, sp, #0
}
 80156b0:	bf00      	nop
 80156b2:	46bd      	mov	sp, r7
 80156b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b8:	4770      	bx	lr

080156ba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80156ba:	b480      	push	{r7}
 80156bc:	af00      	add	r7, sp, #0
}
 80156be:	bf00      	nop
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80156cc:	f7f5 fef8 	bl	800b4c0 <HAL_IncTick>
}
 80156d0:	bf00      	nop
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <EXTI1_IRQHandler>:
 * @brief  This function handles External line 1 interrupt request
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80156d8:	2002      	movs	r0, #2
 80156da:	f7f6 fb15 	bl	800bd08 <HAL_GPIO_EXTI_IRQHandler>
}
 80156de:	bf00      	nop
 80156e0:	bd80      	pop	{r7, pc}
	...

080156e4 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 80156e8:	4802      	ldr	r0, [pc, #8]	; (80156f4 <OTG_FS_IRQHandler+0x10>)
 80156ea:	f7f7 fac3 	bl	800cc74 <HAL_PCD_IRQHandler>
}
 80156ee:	bf00      	nop
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	20001cd4 	.word	0x20001cd4

080156f8 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80156fc:	4802      	ldr	r0, [pc, #8]	; (8015708 <TIM3_IRQHandler+0x10>)
 80156fe:	f7fb fb07 	bl	8010d10 <HAL_TIM_IRQHandler>
}
 8015702:	bf00      	nop
 8015704:	bd80      	pop	{r7, pc}
 8015706:	bf00      	nop
 8015708:	20001c88 	.word	0x20001c88

0801570c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 801570c:	b480      	push	{r7}
 801570e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015710:	4b17      	ldr	r3, [pc, #92]	; (8015770 <SystemInit+0x64>)
 8015712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015716:	4a16      	ldr	r2, [pc, #88]	; (8015770 <SystemInit+0x64>)
 8015718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801571c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8015720:	4b14      	ldr	r3, [pc, #80]	; (8015774 <SystemInit+0x68>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	4a13      	ldr	r2, [pc, #76]	; (8015774 <SystemInit+0x68>)
 8015726:	f043 0301 	orr.w	r3, r3, #1
 801572a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801572c:	4b11      	ldr	r3, [pc, #68]	; (8015774 <SystemInit+0x68>)
 801572e:	2200      	movs	r2, #0
 8015730:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8015732:	4b10      	ldr	r3, [pc, #64]	; (8015774 <SystemInit+0x68>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4a0f      	ldr	r2, [pc, #60]	; (8015774 <SystemInit+0x68>)
 8015738:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801573c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8015740:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8015742:	4b0c      	ldr	r3, [pc, #48]	; (8015774 <SystemInit+0x68>)
 8015744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015748:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801574a:	4b0a      	ldr	r3, [pc, #40]	; (8015774 <SystemInit+0x68>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	4a09      	ldr	r2, [pc, #36]	; (8015774 <SystemInit+0x68>)
 8015750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015754:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8015756:	4b07      	ldr	r3, [pc, #28]	; (8015774 <SystemInit+0x68>)
 8015758:	2200      	movs	r2, #0
 801575a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801575c:	4b04      	ldr	r3, [pc, #16]	; (8015770 <SystemInit+0x64>)
 801575e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015762:	609a      	str	r2, [r3, #8]
#endif
}
 8015764:	bf00      	nop
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	e000ed00 	.word	0xe000ed00
 8015774:	40021000 	.word	0x40021000

08015778 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
  /* Enable TIM peripherals Clock */
  TIMx_CLK_ENABLE();
 801577e:	4b16      	ldr	r3, [pc, #88]	; (80157d8 <CDC_Itf_Init+0x60>)
 8015780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015782:	4a15      	ldr	r2, [pc, #84]	; (80157d8 <CDC_Itf_Init+0x60>)
 8015784:	f043 0302 	orr.w	r3, r3, #2
 8015788:	6593      	str	r3, [r2, #88]	; 0x58
 801578a:	4b13      	ldr	r3, [pc, #76]	; (80157d8 <CDC_Itf_Init+0x60>)
 801578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801578e:	f003 0302 	and.w	r3, r3, #2
 8015792:	607b      	str	r3, [r7, #4]
 8015794:	687b      	ldr	r3, [r7, #4]

   /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 8015796:	2200      	movs	r2, #0
 8015798:	2106      	movs	r1, #6
 801579a:	201d      	movs	r0, #29
 801579c:	f7f5 ffaf 	bl	800b6fe <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80157a0:	201d      	movs	r0, #29
 80157a2:	f7f5 ffc8 	bl	800b736 <HAL_NVIC_EnableIRQ>

  /* Configure the TIM Base generation */
  CDC_TIM_Config();
 80157a6:	f000 f989 	bl	8015abc <CDC_TIM_Config>

  /* Start the TIM Base generation in interrupt mode - Start Channel1 */
  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80157aa:	480c      	ldr	r0, [pc, #48]	; (80157dc <CDC_Itf_Init+0x64>)
 80157ac:	f7fb fa40 	bl	8010c30 <HAL_TIM_Base_Start_IT>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d001      	beq.n	80157ba <CDC_Itf_Init+0x42>
  {
    /* Starting Error */
    Error_Handler();
 80157b6:	f7fe fbe2 	bl	8013f7e <Error_Handler>
  }

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 80157ba:	2200      	movs	r2, #0
 80157bc:	4908      	ldr	r1, [pc, #32]	; (80157e0 <CDC_Itf_Init+0x68>)
 80157be:	4809      	ldr	r0, [pc, #36]	; (80157e4 <CDC_Itf_Init+0x6c>)
 80157c0:	f001 f843 	bl	801684a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 80157c4:	4908      	ldr	r1, [pc, #32]	; (80157e8 <CDC_Itf_Init+0x70>)
 80157c6:	4807      	ldr	r0, [pc, #28]	; (80157e4 <CDC_Itf_Init+0x6c>)
 80157c8:	f001 f85d 	bl	8016886 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 80157cc:	2300      	movs	r3, #0
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3708      	adds	r7, #8
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	40021000 	.word	0x40021000
 80157dc:	20001c88 	.word	0x20001c88
 80157e0:	20001480 	.word	0x20001480
 80157e4:	200021dc 	.word	0x200021dc
 80157e8:	20000c80 	.word	0x20000c80

080157ec <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 80157ec:	b480      	push	{r7}
 80157ee:	af00      	add	r7, sp, #0
  return (USBD_OK);
 80157f0:	2300      	movs	r3, #0
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr

080157fc <CDC_Itf_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	4603      	mov	r3, r0
 8015804:	6039      	str	r1, [r7, #0]
 8015806:	71fb      	strb	r3, [r7, #7]
 8015808:	4613      	mov	r3, r2
 801580a:	80bb      	strh	r3, [r7, #4]
  switch (cmd)
 801580c:	79fb      	ldrb	r3, [r7, #7]
 801580e:	2b23      	cmp	r3, #35	; 0x23
 8015810:	f200 8098 	bhi.w	8015944 <CDC_Itf_Control+0x148>
 8015814:	a201      	add	r2, pc, #4	; (adr r2, 801581c <CDC_Itf_Control+0x20>)
 8015816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801581a:	bf00      	nop
 801581c:	08015945 	.word	0x08015945
 8015820:	08015945 	.word	0x08015945
 8015824:	08015945 	.word	0x08015945
 8015828:	08015945 	.word	0x08015945
 801582c:	08015945 	.word	0x08015945
 8015830:	08015945 	.word	0x08015945
 8015834:	08015945 	.word	0x08015945
 8015838:	08015945 	.word	0x08015945
 801583c:	08015945 	.word	0x08015945
 8015840:	08015945 	.word	0x08015945
 8015844:	08015945 	.word	0x08015945
 8015848:	08015945 	.word	0x08015945
 801584c:	08015945 	.word	0x08015945
 8015850:	08015945 	.word	0x08015945
 8015854:	08015945 	.word	0x08015945
 8015858:	08015945 	.word	0x08015945
 801585c:	08015945 	.word	0x08015945
 8015860:	08015945 	.word	0x08015945
 8015864:	08015945 	.word	0x08015945
 8015868:	08015945 	.word	0x08015945
 801586c:	08015945 	.word	0x08015945
 8015870:	08015945 	.word	0x08015945
 8015874:	08015945 	.word	0x08015945
 8015878:	08015945 	.word	0x08015945
 801587c:	08015945 	.word	0x08015945
 8015880:	08015945 	.word	0x08015945
 8015884:	08015945 	.word	0x08015945
 8015888:	08015945 	.word	0x08015945
 801588c:	08015945 	.word	0x08015945
 8015890:	08015945 	.word	0x08015945
 8015894:	08015945 	.word	0x08015945
 8015898:	08015945 	.word	0x08015945
 801589c:	080158ad 	.word	0x080158ad
 80158a0:	080158f1 	.word	0x080158f1
 80158a4:	08015945 	.word	0x08015945
 80158a8:	08015945 	.word	0x08015945
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	461a      	mov	r2, r3
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	3301      	adds	r3, #1
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	021b      	lsls	r3, r3, #8
 80158ba:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	3302      	adds	r3, #2
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	041b      	lsls	r3, r3, #16
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80158c4:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	3303      	adds	r3, #3
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	061b      	lsls	r3, r3, #24
 80158ce:	4313      	orrs	r3, r2
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80158d0:	461a      	mov	r2, r3
 80158d2:	4b20      	ldr	r3, [pc, #128]	; (8015954 <CDC_Itf_Control+0x158>)
 80158d4:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	791a      	ldrb	r2, [r3, #4]
 80158da:	4b1e      	ldr	r3, [pc, #120]	; (8015954 <CDC_Itf_Control+0x158>)
 80158dc:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	795a      	ldrb	r2, [r3, #5]
 80158e2:	4b1c      	ldr	r3, [pc, #112]	; (8015954 <CDC_Itf_Control+0x158>)
 80158e4:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	799a      	ldrb	r2, [r3, #6]
 80158ea:	4b1a      	ldr	r3, [pc, #104]	; (8015954 <CDC_Itf_Control+0x158>)
 80158ec:	719a      	strb	r2, [r3, #6]
    break;
 80158ee:	e02a      	b.n	8015946 <CDC_Itf_Control+0x14a>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80158f0:	4b18      	ldr	r3, [pc, #96]	; (8015954 <CDC_Itf_Control+0x158>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80158fa:	4b16      	ldr	r3, [pc, #88]	; (8015954 <CDC_Itf_Control+0x158>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	0a1a      	lsrs	r2, r3, #8
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	3301      	adds	r3, #1
 8015904:	b2d2      	uxtb	r2, r2
 8015906:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8015908:	4b12      	ldr	r3, [pc, #72]	; (8015954 <CDC_Itf_Control+0x158>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	0c1a      	lsrs	r2, r3, #16
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	3302      	adds	r3, #2
 8015912:	b2d2      	uxtb	r2, r2
 8015914:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8015916:	4b0f      	ldr	r3, [pc, #60]	; (8015954 <CDC_Itf_Control+0x158>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	0e1a      	lsrs	r2, r3, #24
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	3303      	adds	r3, #3
 8015920:	b2d2      	uxtb	r2, r2
 8015922:	701a      	strb	r2, [r3, #0]
    pbuf[4] = LineCoding.format;
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	3304      	adds	r3, #4
 8015928:	4a0a      	ldr	r2, [pc, #40]	; (8015954 <CDC_Itf_Control+0x158>)
 801592a:	7912      	ldrb	r2, [r2, #4]
 801592c:	701a      	strb	r2, [r3, #0]
    pbuf[5] = LineCoding.paritytype;
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	3305      	adds	r3, #5
 8015932:	4a08      	ldr	r2, [pc, #32]	; (8015954 <CDC_Itf_Control+0x158>)
 8015934:	7952      	ldrb	r2, [r2, #5]
 8015936:	701a      	strb	r2, [r3, #0]
    pbuf[6] = LineCoding.datatype;
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	3306      	adds	r3, #6
 801593c:	4a05      	ldr	r2, [pc, #20]	; (8015954 <CDC_Itf_Control+0x158>)
 801593e:	7992      	ldrb	r2, [r2, #6]
 8015940:	701a      	strb	r2, [r3, #0]
    break;
 8015942:	e000      	b.n	8015946 <CDC_Itf_Control+0x14a>
  case CDC_SEND_BREAK:
     /* Add your code here */
    break;

  default:
    break;
 8015944:	bf00      	nop
  }

  return (USBD_OK);
 8015946:	2300      	movs	r3, #0
}
 8015948:	4618      	mov	r0, r3
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr
 8015954:	2000046c 	.word	0x2000046c

08015958 <CDC_Fill_Buffer>:
  * @param  Written: Number of really written data bytes.
  * @retval Result of the operation: USBD_OK if all operations are OK,
  *         else USBD_FAIL
  */
uint8_t CDC_Fill_Buffer(uint8_t *Buf, uint32_t TotalLen, uint32_t *Written)
{
 8015958:	b480      	push	{r7}
 801595a:	b087      	sub	sp, #28
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	607a      	str	r2, [r7, #4]
  uint32_t i;

  for (i = 0; i < TotalLen; i++)
 8015964:	2300      	movs	r3, #0
 8015966:	617b      	str	r3, [r7, #20]
 8015968:	e01f      	b.n	80159aa <CDC_Fill_Buffer+0x52>
  {
    /* ERROR: Buffer overrun.
       NOTE: Write pointer 'UserTxBufPtrIn' points to last free position, which
       is -1 position from read pointer 'UserTxBufPtrOut' and MUST NEVER be written.
    */
    if ((UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE == UserTxBufPtrOut)
 801596a:	4b15      	ldr	r3, [pc, #84]	; (80159c0 <CDC_Fill_Buffer+0x68>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	3301      	adds	r3, #1
 8015970:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015974:	4b13      	ldr	r3, [pc, #76]	; (80159c4 <CDC_Fill_Buffer+0x6c>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	429a      	cmp	r2, r3
 801597a:	d104      	bne.n	8015986 <CDC_Fill_Buffer+0x2e>
    {
      *Written = i;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	697a      	ldr	r2, [r7, #20]
 8015980:	601a      	str	r2, [r3, #0]
      return (USBD_FAIL);
 8015982:	2303      	movs	r3, #3
 8015984:	e016      	b.n	80159b4 <CDC_Fill_Buffer+0x5c>
    }

    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8015986:	68fa      	ldr	r2, [r7, #12]
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	441a      	add	r2, r3
 801598c:	4b0c      	ldr	r3, [pc, #48]	; (80159c0 <CDC_Fill_Buffer+0x68>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	7811      	ldrb	r1, [r2, #0]
 8015992:	4a0d      	ldr	r2, [pc, #52]	; (80159c8 <CDC_Fill_Buffer+0x70>)
 8015994:	54d1      	strb	r1, [r2, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_TX_DATA_SIZE;
 8015996:	4b0a      	ldr	r3, [pc, #40]	; (80159c0 <CDC_Fill_Buffer+0x68>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	3301      	adds	r3, #1
 801599c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159a0:	4a07      	ldr	r2, [pc, #28]	; (80159c0 <CDC_Fill_Buffer+0x68>)
 80159a2:	6013      	str	r3, [r2, #0]
  for (i = 0; i < TotalLen; i++)
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	3301      	adds	r3, #1
 80159a8:	617b      	str	r3, [r7, #20]
 80159aa:	697a      	ldr	r2, [r7, #20]
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d3db      	bcc.n	801596a <CDC_Fill_Buffer+0x12>
  }

  return (USBD_OK);
 80159b2:	2300      	movs	r3, #0
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	371c      	adds	r7, #28
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr
 80159c0:	20001c84 	.word	0x20001c84
 80159c4:	20001c80 	.word	0x20001c80
 80159c8:	20001480 	.word	0x20001480

080159cc <CDC_Next_Packet_Rx>:
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK,
  *         else USBD_FAIL
  */
uint8_t CDC_Next_Packet_Rx(void)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	af00      	add	r7, sp, #0

  /* VCOM data overrun - current VCOM data received are not complete read by application. */
  if (VCOM_RxData == 1)
 80159d0:	4b06      	ldr	r3, [pc, #24]	; (80159ec <CDC_Next_Packet_Rx+0x20>)
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	b2db      	uxtb	r3, r3
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d101      	bne.n	80159de <CDC_Next_Packet_Rx+0x12>
  {
    Error_Handler();
 80159da:	f7fe fad0 	bl	8013f7e <Error_Handler>
  }

  return USBD_CDC_ReceivePacket(&USBD_Device);
 80159de:	4804      	ldr	r0, [pc, #16]	; (80159f0 <CDC_Next_Packet_Rx+0x24>)
 80159e0:	f000 ff9a 	bl	8016918 <USBD_CDC_ReceivePacket>
 80159e4:	4603      	mov	r3, r0
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	200024ac 	.word	0x200024ac
 80159f0:	200021dc 	.word	0x200021dc

080159f4 <CDC_TIM_PeriodElapsedCallback>:
  * @brief  CDC_TIM period elapsed callback
  * @param  htim: CDC_TIM handle
  * @retval None
  */
void CDC_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b084      	sub	sp, #16
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80159fc:	4b1d      	ldr	r3, [pc, #116]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	4b1d      	ldr	r3, [pc, #116]	; (8015a78 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d030      	beq.n	8015a6a <CDC_TIM_PeriodElapsedCallback+0x76>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8015a08:	4b1a      	ldr	r3, [pc, #104]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a0a:	681a      	ldr	r2, [r3, #0]
 8015a0c:	4b1a      	ldr	r3, [pc, #104]	; (8015a78 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d905      	bls.n	8015a20 <CDC_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_TX_DATA_SIZE - UserTxBufPtrOut;
 8015a14:	4b17      	ldr	r3, [pc, #92]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	e005      	b.n	8015a2c <CDC_TIM_PeriodElapsedCallback+0x38>
    }
    else
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8015a20:	4b15      	ldr	r3, [pc, #84]	; (8015a78 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8015a22:	681a      	ldr	r2, [r3, #0]
 8015a24:	4b13      	ldr	r3, [pc, #76]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	1ad3      	subs	r3, r2, r3
 8015a2a:	60fb      	str	r3, [r7, #12]
    }

    buffptr = UserTxBufPtrOut;
 8015a2c:	4b11      	ldr	r3, [pc, #68]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	60bb      	str	r3, [r7, #8]

    USBD_CDC_SetTxBuffer(&USBD_Device, &UserTxBuffer[buffptr], buffsize);
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	4a11      	ldr	r2, [pc, #68]	; (8015a7c <CDC_TIM_PeriodElapsedCallback+0x88>)
 8015a36:	4413      	add	r3, r2
 8015a38:	68fa      	ldr	r2, [r7, #12]
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	4810      	ldr	r0, [pc, #64]	; (8015a80 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8015a3e:	f000 ff04 	bl	801684a <USBD_CDC_SetTxBuffer>

    if (USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8015a42:	480f      	ldr	r0, [pc, #60]	; (8015a80 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8015a44:	f000 ff38 	bl	80168b8 <USBD_CDC_TransmitPacket>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d10d      	bne.n	8015a6a <CDC_TIM_PeriodElapsedCallback+0x76>
    {
      UserTxBufPtrOut += buffsize;
 8015a4e:	4b09      	ldr	r3, [pc, #36]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	4413      	add	r3, r2
 8015a56:	4a07      	ldr	r2, [pc, #28]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a58:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut >= APP_TX_DATA_SIZE)
 8015a5a:	4b06      	ldr	r3, [pc, #24]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015a62:	d302      	bcc.n	8015a6a <CDC_TIM_PeriodElapsedCallback+0x76>
      {
        UserTxBufPtrOut = 0;
 8015a64:	4b03      	ldr	r3, [pc, #12]	; (8015a74 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8015a66:	2200      	movs	r2, #0
 8015a68:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8015a6a:	bf00      	nop
 8015a6c:	3710      	adds	r7, #16
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	20001c80 	.word	0x20001c80
 8015a78:	20001c84 	.word	0x20001c84
 8015a7c:	20001480 	.word	0x20001480
 8015a80:	200021dc 	.word	0x200021dc

08015a84 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data received via USB
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t *Buf, uint32_t *Len)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b083      	sub	sp, #12
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
  VCOM_RxData   = 1;
 8015a8e:	4b08      	ldr	r3, [pc, #32]	; (8015ab0 <CDC_Itf_Receive+0x2c>)
 8015a90:	2201      	movs	r2, #1
 8015a92:	701a      	strb	r2, [r3, #0]
  VCOM_RxBuffer = Buf;
 8015a94:	4a07      	ldr	r2, [pc, #28]	; (8015ab4 <CDC_Itf_Receive+0x30>)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6013      	str	r3, [r2, #0]
  VCOM_RxLength = *Len;
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	4a06      	ldr	r2, [pc, #24]	; (8015ab8 <CDC_Itf_Receive+0x34>)
 8015aa0:	6013      	str	r3, [r2, #0]
  return (USBD_OK);
 8015aa2:	2300      	movs	r3, #0
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr
 8015ab0:	200024ac 	.word	0x200024ac
 8015ab4:	200024b0 	.word	0x200024b0
 8015ab8:	200024b4 	.word	0x200024b4

08015abc <CDC_TIM_Config>:
  * @brief  CDC_TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void CDC_TIM_Config(void)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	af00      	add	r7, sp, #0
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8015ac0:	4b0c      	ldr	r3, [pc, #48]	; (8015af4 <CDC_TIM_Config+0x38>)
 8015ac2:	4a0d      	ldr	r2, [pc, #52]	; (8015af8 <CDC_TIM_Config+0x3c>)
 8015ac4:	601a      	str	r2, [r3, #0]
      - Period            = 10000 - 1
      - Prescaler         = ((SystemCoreClock / 2) / 10000) - 1
      - ClockDivision     = 0
      - Counter direction = Up
  */
  TimHandle.Init.Period        = (CDC_POLLING_INTERVAL * 1000) - 1;
 8015ac6:	4b0b      	ldr	r3, [pc, #44]	; (8015af4 <CDC_TIM_Config+0x38>)
 8015ac8:	f241 3287 	movw	r2, #4999	; 0x1387
 8015acc:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler     = 80 - 1;
 8015ace:	4b09      	ldr	r3, [pc, #36]	; (8015af4 <CDC_TIM_Config+0x38>)
 8015ad0:	224f      	movs	r2, #79	; 0x4f
 8015ad2:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8015ad4:	4b07      	ldr	r3, [pc, #28]	; (8015af4 <CDC_TIM_Config+0x38>)
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8015ada:	4b06      	ldr	r3, [pc, #24]	; (8015af4 <CDC_TIM_Config+0x38>)
 8015adc:	2200      	movs	r2, #0
 8015ade:	609a      	str	r2, [r3, #8]

  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8015ae0:	4804      	ldr	r0, [pc, #16]	; (8015af4 <CDC_TIM_Config+0x38>)
 8015ae2:	f7fb f843 	bl	8010b6c <HAL_TIM_Base_Init>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d001      	beq.n	8015af0 <CDC_TIM_Config+0x34>
  {
    /* Initialization Error */
    Error_Handler();
 8015aec:	f7fe fa47 	bl	8013f7e <Error_Handler>
  }
}
 8015af0:	bf00      	nop
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	20001c88 	.word	0x20001c88
 8015af8:	40000400 	.word	0x40000400

08015afc <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015b10:	4619      	mov	r1, r3
 8015b12:	4610      	mov	r0, r2
 8015b14:	f000 ffe7 	bl	8016ae6 <USBD_LL_SetupStage>
}
 8015b18:	bf00      	nop
 8015b1a:	3708      	adds	r7, #8
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b32:	78fa      	ldrb	r2, [r7, #3]
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	4613      	mov	r3, r2
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	1a9b      	subs	r3, r3, r2
 8015b3c:	009b      	lsls	r3, r3, #2
 8015b3e:	440b      	add	r3, r1
 8015b40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	78fb      	ldrb	r3, [r7, #3]
 8015b48:	4619      	mov	r1, r3
 8015b4a:	f001 f821 	bl	8016b90 <USBD_LL_DataOutStage>
}
 8015b4e:	bf00      	nop
 8015b50:	3708      	adds	r7, #8
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b082      	sub	sp, #8
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	460b      	mov	r3, r1
 8015b60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b68:	78fa      	ldrb	r2, [r7, #3]
 8015b6a:	6879      	ldr	r1, [r7, #4]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	00db      	lsls	r3, r3, #3
 8015b70:	1a9b      	subs	r3, r3, r2
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	440b      	add	r3, r1
 8015b76:	3348      	adds	r3, #72	; 0x48
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	78fb      	ldrb	r3, [r7, #3]
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	f001 f86a 	bl	8016c56 <USBD_LL_DataInStage>
}
 8015b82:	bf00      	nop
 8015b84:	3708      	adds	r7, #8
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8015b8a:	b580      	push	{r7, lr}
 8015b8c:	b082      	sub	sp, #8
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f001 f97e 	bl	8016e9a <USBD_LL_SOF>
}
 8015b9e:	bf00      	nop
 8015ba0:	3708      	adds	r7, #8
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}

08015ba6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8015ba6:	b580      	push	{r7, lr}
 8015ba8:	b082      	sub	sp, #8
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f001 f8e4 	bl	8016d82 <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bc0:	2101      	movs	r1, #1
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f001 f92b 	bl	8016e1e <USBD_LL_SetSpeed>
}
 8015bc8:	bf00      	nop
 8015bca:	3708      	adds	r7, #8
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bde:	4618      	mov	r0, r3
 8015be0:	f001 f92d 	bl	8016e3e <USBD_LL_Suspend>
}
 8015be4:	bf00      	nop
 8015be6:	3708      	adds	r7, #8
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b082      	sub	sp, #8
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f001 f935 	bl	8016e6a <USBD_LL_Resume>
}
 8015c00:	bf00      	nop
 8015c02:	3708      	adds	r7, #8
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	460b      	mov	r3, r1
 8015c12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c1a:	78fa      	ldrb	r2, [r7, #3]
 8015c1c:	4611      	mov	r1, r2
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f001 f983 	bl	8016f2a <USBD_LL_IsoOUTIncomplete>
}
 8015c24:	bf00      	nop
 8015c26:	3708      	adds	r7, #8
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b082      	sub	sp, #8
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	460b      	mov	r3, r1
 8015c36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c3e:	78fa      	ldrb	r2, [r7, #3]
 8015c40:	4611      	mov	r1, r2
 8015c42:	4618      	mov	r0, r3
 8015c44:	f001 f94b 	bl	8016ede <USBD_LL_IsoINIncomplete>
}
 8015c48:	bf00      	nop
 8015c4a:	3708      	adds	r7, #8
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f001 f989 	bl	8016f76 <USBD_LL_DevConnected>
}
 8015c64:	bf00      	nop
 8015c66:	3708      	adds	r7, #8
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}

08015c6c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b082      	sub	sp, #8
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f001 f986 	bl	8016f8c <USBD_LL_DevDisconnected>
}
 8015c80:	bf00      	nop
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8015c90:	4b21      	ldr	r3, [pc, #132]	; (8015d18 <USBD_LL_Init+0x90>)
 8015c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015c96:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 5;
 8015c98:	4b1f      	ldr	r3, [pc, #124]	; (8015d18 <USBD_LL_Init+0x90>)
 8015c9a:	2205      	movs	r2, #5
 8015c9c:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8015c9e:	4b1e      	ldr	r3, [pc, #120]	; (8015d18 <USBD_LL_Init+0x90>)
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8015ca4:	4b1c      	ldr	r3, [pc, #112]	; (8015d18 <USBD_LL_Init+0x90>)
 8015ca6:	2240      	movs	r2, #64	; 0x40
 8015ca8:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 8015caa:	4b1b      	ldr	r3, [pc, #108]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cac:	2200      	movs	r2, #0
 8015cae:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 8015cb0:	4b19      	ldr	r3, [pc, #100]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	621a      	str	r2, [r3, #32]
  hpcd.Init.lpm_enable = 0;
 8015cb6:	4b18      	ldr	r3, [pc, #96]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cb8:	2200      	movs	r2, #0
 8015cba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8015cbc:	4b16      	ldr	r3, [pc, #88]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015cc2:	4b15      	ldr	r3, [pc, #84]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cc4:	2202      	movs	r2, #2
 8015cc6:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 8015cc8:	4b13      	ldr	r3, [pc, #76]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cca:	2200      	movs	r2, #0
 8015ccc:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8015cce:	4b12      	ldr	r3, [pc, #72]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cd0:	2202      	movs	r2, #2
 8015cd2:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8015cd4:	4b10      	ldr	r3, [pc, #64]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8015cda:	4a0f      	ldr	r2, [pc, #60]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	4a0c      	ldr	r2, [pc, #48]	; (8015d18 <USBD_LL_Init+0x90>)
 8015ce6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8015cea:	480b      	ldr	r0, [pc, #44]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cec:	f7f6 fe6f 	bl	800c9ce <HAL_PCD_Init>

  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8015cf0:	2180      	movs	r1, #128	; 0x80
 8015cf2:	4809      	ldr	r0, [pc, #36]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cf4:	f7f7 fecb 	bl	800da8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8015cf8:	2240      	movs	r2, #64	; 0x40
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	4806      	ldr	r0, [pc, #24]	; (8015d18 <USBD_LL_Init+0x90>)
 8015cfe:	f7f7 fe7f 	bl	800da00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8015d02:	2280      	movs	r2, #128	; 0x80
 8015d04:	2101      	movs	r1, #1
 8015d06:	4804      	ldr	r0, [pc, #16]	; (8015d18 <USBD_LL_Init+0x90>)
 8015d08:	f7f7 fe7a 	bl	800da00 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
 8015d0c:	2300      	movs	r3, #0
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3708      	adds	r7, #8
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}
 8015d16:	bf00      	nop
 8015d18:	20001cd4 	.word	0x20001cd4

08015d1c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f7f6 ff73 	bl	800cc16 <HAL_PCD_Start>
  return USBD_OK;
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3708      	adds	r7, #8
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}

08015d3a <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b082      	sub	sp, #8
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
 8015d42:	4608      	mov	r0, r1
 8015d44:	4611      	mov	r1, r2
 8015d46:	461a      	mov	r2, r3
 8015d48:	4603      	mov	r3, r0
 8015d4a:	70fb      	strb	r3, [r7, #3]
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	70bb      	strb	r3, [r7, #2]
 8015d50:	4613      	mov	r3, r2
 8015d52:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d5a:	78bb      	ldrb	r3, [r7, #2]
 8015d5c:	883a      	ldrh	r2, [r7, #0]
 8015d5e:	78f9      	ldrb	r1, [r7, #3]
 8015d60:	f7f7 fb46 	bl	800d3f0 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);

  return USBD_OK;
 8015d64:	2300      	movs	r3, #0
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3708      	adds	r7, #8
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b082      	sub	sp, #8
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
 8015d76:	460b      	mov	r3, r1
 8015d78:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d80:	78fa      	ldrb	r2, [r7, #3]
 8015d82:	4611      	mov	r1, r2
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7f7 fb9b 	bl	800d4c0 <HAL_PCD_EP_Close>
  return USBD_OK;
 8015d8a:	2300      	movs	r3, #0
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015da6:	78fa      	ldrb	r2, [r7, #3]
 8015da8:	4611      	mov	r1, r2
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7f7 fc65 	bl	800d67a <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3708      	adds	r7, #8
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b082      	sub	sp, #8
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	6078      	str	r0, [r7, #4]
 8015dc2:	460b      	mov	r3, r1
 8015dc4:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015dcc:	78fa      	ldrb	r2, [r7, #3]
 8015dce:	4611      	mov	r1, r2
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f7 fcb4 	bl	800d73e <HAL_PCD_EP_ClrStall>
  return USBD_OK;
 8015dd6:	2300      	movs	r3, #0
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3708      	adds	r7, #8
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015de0:	b480      	push	{r7}
 8015de2:	b085      	sub	sp, #20
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
 8015de8:	460b      	mov	r3, r1
 8015dea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015df2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	da0b      	bge.n	8015e14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015dfc:	78fb      	ldrb	r3, [r7, #3]
 8015dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e02:	68f9      	ldr	r1, [r7, #12]
 8015e04:	4613      	mov	r3, r2
 8015e06:	00db      	lsls	r3, r3, #3
 8015e08:	1a9b      	subs	r3, r3, r2
 8015e0a:	009b      	lsls	r3, r3, #2
 8015e0c:	440b      	add	r3, r1
 8015e0e:	333e      	adds	r3, #62	; 0x3e
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	e00b      	b.n	8015e2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015e14:	78fb      	ldrb	r3, [r7, #3]
 8015e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e1a:	68f9      	ldr	r1, [r7, #12]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	00db      	lsls	r3, r3, #3
 8015e20:	1a9b      	subs	r3, r3, r2
 8015e22:	009b      	lsls	r3, r3, #2
 8015e24:	440b      	add	r3, r1
 8015e26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015e2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3714      	adds	r7, #20
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr

08015e38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b082      	sub	sp, #8
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
 8015e40:	460b      	mov	r3, r1
 8015e42:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e4a:	78fa      	ldrb	r2, [r7, #3]
 8015e4c:	4611      	mov	r1, r2
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f7 faa9 	bl	800d3a6 <HAL_PCD_SetAddress>
  return USBD_OK;
 8015e54:	2300      	movs	r3, #0
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	3708      	adds	r7, #8
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}

08015e5e <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev,
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8015e5e:	b580      	push	{r7, lr}
 8015e60:	b084      	sub	sp, #16
 8015e62:	af00      	add	r7, sp, #0
 8015e64:	60f8      	str	r0, [r7, #12]
 8015e66:	607a      	str	r2, [r7, #4]
 8015e68:	603b      	str	r3, [r7, #0]
 8015e6a:	460b      	mov	r3, r1
 8015e6c:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e74:	7af9      	ldrb	r1, [r7, #11]
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	f7f7 fbc1 	bl	800d600 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8015e7e:	2300      	movs	r3, #0
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3710      	adds	r7, #16
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b084      	sub	sp, #16
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	607a      	str	r2, [r7, #4]
 8015e92:	603b      	str	r3, [r7, #0]
 8015e94:	460b      	mov	r3, r1
 8015e96:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e9e:	7af9      	ldrb	r1, [r7, #11]
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	f7f7 fb56 	bl	800d554 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b082      	sub	sp, #8
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
 8015eba:	460b      	mov	r3, r1
 8015ebc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ec4:	78fa      	ldrb	r2, [r7, #3]
 8015ec6:	4611      	mov	r1, r2
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7f7 fb81 	bl	800d5d0 <HAL_PCD_EP_GetRxCount>
 8015ece:	4603      	mov	r3, r0
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3708      	adds	r7, #8
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}

08015ed8 <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ed8:	b480      	push	{r7}
 8015eda:	b083      	sub	sp, #12
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	4603      	mov	r3, r0
 8015ee0:	6039      	str	r1, [r7, #0]
 8015ee2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	2212      	movs	r2, #18
 8015ee8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 8015eea:	4b03      	ldr	r3, [pc, #12]	; (8015ef8 <USBD_VCP_DeviceDescriptor+0x20>)
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	370c      	adds	r7, #12
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef6:	4770      	bx	lr
 8015ef8:	200004a4 	.word	0x200004a4

08015efc <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015efc:	b480      	push	{r7}
 8015efe:	b083      	sub	sp, #12
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	4603      	mov	r3, r0
 8015f04:	6039      	str	r1, [r7, #0]
 8015f06:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	2204      	movs	r2, #4
 8015f0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8015f0e:	4b03      	ldr	r3, [pc, #12]	; (8015f1c <USBD_VCP_LangIDStrDescriptor+0x20>)
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	370c      	adds	r7, #12
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr
 8015f1c:	200004b8 	.word	0x200004b8

08015f20 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b082      	sub	sp, #8
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	4603      	mov	r3, r0
 8015f28:	6039      	str	r1, [r7, #0]
 8015f2a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8015f2c:	683a      	ldr	r2, [r7, #0]
 8015f2e:	4904      	ldr	r1, [pc, #16]	; (8015f40 <USBD_VCP_ProductStrDescriptor+0x20>)
 8015f30:	4804      	ldr	r0, [pc, #16]	; (8015f44 <USBD_VCP_ProductStrDescriptor+0x24>)
 8015f32:	f001 fdbe 	bl	8017ab2 <USBD_GetString>
  return USBD_StrDesc;
 8015f36:	4b02      	ldr	r3, [pc, #8]	; (8015f40 <USBD_VCP_ProductStrDescriptor+0x20>)
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3708      	adds	r7, #8
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}
 8015f40:	200020dc 	.word	0x200020dc
 8015f44:	08019f88 	.word	0x08019f88

08015f48 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	4603      	mov	r3, r0
 8015f50:	6039      	str	r1, [r7, #0]
 8015f52:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015f54:	683a      	ldr	r2, [r7, #0]
 8015f56:	4904      	ldr	r1, [pc, #16]	; (8015f68 <USBD_VCP_ManufacturerStrDescriptor+0x20>)
 8015f58:	4804      	ldr	r0, [pc, #16]	; (8015f6c <USBD_VCP_ManufacturerStrDescriptor+0x24>)
 8015f5a:	f001 fdaa 	bl	8017ab2 <USBD_GetString>
  return USBD_StrDesc;
 8015f5e:	4b02      	ldr	r3, [pc, #8]	; (8015f68 <USBD_VCP_ManufacturerStrDescriptor+0x20>)
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	200020dc 	.word	0x200020dc
 8015f6c:	08019fac 	.word	0x08019fac

08015f70 <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	4603      	mov	r3, r0
 8015f78:	6039      	str	r1, [r7, #0]
 8015f7a:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	221a      	movs	r2, #26
 8015f80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8015f82:	f000 f82f 	bl	8015fe4 <Get_SerialNum>

  return (uint8_t*)USBD_StringSerial;
 8015f86:	4b02      	ldr	r3, [pc, #8]	; (8015f90 <USBD_VCP_SerialStrDescriptor+0x20>)
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	200004bc 	.word	0x200004bc

08015f94 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	6039      	str	r1, [r7, #0]
 8015f9e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8015fa0:	683a      	ldr	r2, [r7, #0]
 8015fa2:	4904      	ldr	r1, [pc, #16]	; (8015fb4 <USBD_VCP_ConfigStrDescriptor+0x20>)
 8015fa4:	4804      	ldr	r0, [pc, #16]	; (8015fb8 <USBD_VCP_ConfigStrDescriptor+0x24>)
 8015fa6:	f001 fd84 	bl	8017ab2 <USBD_GetString>
  return USBD_StrDesc;
 8015faa:	4b02      	ldr	r3, [pc, #8]	; (8015fb4 <USBD_VCP_ConfigStrDescriptor+0x20>)
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	200020dc 	.word	0x200020dc
 8015fb8:	08019fc0 	.word	0x08019fc0

08015fbc <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	6039      	str	r1, [r7, #0]
 8015fc6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	4904      	ldr	r1, [pc, #16]	; (8015fdc <USBD_VCP_InterfaceStrDescriptor+0x20>)
 8015fcc:	4804      	ldr	r0, [pc, #16]	; (8015fe0 <USBD_VCP_InterfaceStrDescriptor+0x24>)
 8015fce:	f001 fd70 	bl	8017ab2 <USBD_GetString>
  return USBD_StrDesc;
 8015fd2:	4b02      	ldr	r3, [pc, #8]	; (8015fdc <USBD_VCP_InterfaceStrDescriptor+0x20>)
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3708      	adds	r7, #8
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	200020dc 	.word	0x200020dc
 8015fe0:	08019fcc 	.word	0x08019fcc

08015fe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b084      	sub	sp, #16
 8015fe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8015fea:	4b0f      	ldr	r3, [pc, #60]	; (8016028 <Get_SerialNum+0x44>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8015ff0:	4b0e      	ldr	r3, [pc, #56]	; (801602c <Get_SerialNum+0x48>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8015ff6:	4b0e      	ldr	r3, [pc, #56]	; (8016030 <Get_SerialNum+0x4c>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	4413      	add	r3, r2
 8016002:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d009      	beq.n	801601e <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 801600a:	2208      	movs	r2, #8
 801600c:	4909      	ldr	r1, [pc, #36]	; (8016034 <Get_SerialNum+0x50>)
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f000 f814 	bl	801603c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8016014:	2204      	movs	r2, #4
 8016016:	4908      	ldr	r1, [pc, #32]	; (8016038 <Get_SerialNum+0x54>)
 8016018:	68b8      	ldr	r0, [r7, #8]
 801601a:	f000 f80f 	bl	801603c <IntToUnicode>
  }
}
 801601e:	bf00      	nop
 8016020:	3710      	adds	r7, #16
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	1fff7a10 	.word	0x1fff7a10
 801602c:	1fff7a14 	.word	0x1fff7a14
 8016030:	1fff7a18 	.word	0x1fff7a18
 8016034:	200004be 	.word	0x200004be
 8016038:	200004ce 	.word	0x200004ce

0801603c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 801603c:	b480      	push	{r7}
 801603e:	b087      	sub	sp, #28
 8016040:	af00      	add	r7, sp, #0
 8016042:	60f8      	str	r0, [r7, #12]
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	4613      	mov	r3, r2
 8016048:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801604a:	2300      	movs	r3, #0
 801604c:	75fb      	strb	r3, [r7, #23]

  for( idx = 0 ; idx < len ; idx ++)
 801604e:	2300      	movs	r3, #0
 8016050:	75fb      	strb	r3, [r7, #23]
 8016052:	e027      	b.n	80160a4 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	0f1b      	lsrs	r3, r3, #28
 8016058:	2b09      	cmp	r3, #9
 801605a:	d80b      	bhi.n	8016074 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	0f1b      	lsrs	r3, r3, #28
 8016060:	b2da      	uxtb	r2, r3
 8016062:	7dfb      	ldrb	r3, [r7, #23]
 8016064:	005b      	lsls	r3, r3, #1
 8016066:	4619      	mov	r1, r3
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	440b      	add	r3, r1
 801606c:	3230      	adds	r2, #48	; 0x30
 801606e:	b2d2      	uxtb	r2, r2
 8016070:	701a      	strb	r2, [r3, #0]
 8016072:	e00a      	b.n	801608a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	0f1b      	lsrs	r3, r3, #28
 8016078:	b2da      	uxtb	r2, r3
 801607a:	7dfb      	ldrb	r3, [r7, #23]
 801607c:	005b      	lsls	r3, r3, #1
 801607e:	4619      	mov	r1, r3
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	440b      	add	r3, r1
 8016084:	3237      	adds	r2, #55	; 0x37
 8016086:	b2d2      	uxtb	r2, r2
 8016088:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	011b      	lsls	r3, r3, #4
 801608e:	60fb      	str	r3, [r7, #12]

    pbuf[ 2* idx + 1] = 0;
 8016090:	7dfb      	ldrb	r3, [r7, #23]
 8016092:	005b      	lsls	r3, r3, #1
 8016094:	3301      	adds	r3, #1
 8016096:	68ba      	ldr	r2, [r7, #8]
 8016098:	4413      	add	r3, r2
 801609a:	2200      	movs	r2, #0
 801609c:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 801609e:	7dfb      	ldrb	r3, [r7, #23]
 80160a0:	3301      	adds	r3, #1
 80160a2:	75fb      	strb	r3, [r7, #23]
 80160a4:	7dfa      	ldrb	r2, [r7, #23]
 80160a6:	79fb      	ldrb	r3, [r7, #7]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d3d3      	bcc.n	8016054 <IntToUnicode+0x18>
  }
}
 80160ac:	bf00      	nop
 80160ae:	bf00      	nop
 80160b0:	371c      	adds	r7, #28
 80160b2:	46bd      	mov	sp, r7
 80160b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b8:	4770      	bx	lr
	...

080160bc <VCOM_init>:
  * @brief  Initialize VCOM (Virtual COM Port)
  * @param  None
  * @retval Init OK: 0, Init ERROR: 1 (_TODO_: implement this)
  */
int VCOM_init(void)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	af00      	add	r7, sp, #0
  /* Enable USB power on Pwrctrl CR2 register */
  HAL_PWREx_EnableVddUSB();
 80160c0:	f7f7 fd66 	bl	800db90 <HAL_PWREx_EnableVddUSB>

  /*** USB CDC Configuration ***/
  /* Init Device Library */
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 80160c4:	2200      	movs	r2, #0
 80160c6:	4909      	ldr	r1, [pc, #36]	; (80160ec <VCOM_init+0x30>)
 80160c8:	4809      	ldr	r0, [pc, #36]	; (80160f0 <VCOM_init+0x34>)
 80160ca:	f000 fc4f 	bl	801696c <USBD_Init>

  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 80160ce:	4909      	ldr	r1, [pc, #36]	; (80160f4 <VCOM_init+0x38>)
 80160d0:	4807      	ldr	r0, [pc, #28]	; (80160f0 <VCOM_init+0x34>)
 80160d2:	f000 fc89 	bl	80169e8 <USBD_RegisterClass>

  /* Add Interface callbacks for CDC Class */
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 80160d6:	4908      	ldr	r1, [pc, #32]	; (80160f8 <VCOM_init+0x3c>)
 80160d8:	4805      	ldr	r0, [pc, #20]	; (80160f0 <VCOM_init+0x34>)
 80160da:	f000 fba1 	bl	8016820 <USBD_CDC_RegisterInterface>

  /* Start Device Process */
  USBD_Start(&USBD_Device);
 80160de:	4804      	ldr	r0, [pc, #16]	; (80160f0 <VCOM_init+0x34>)
 80160e0:	f000 fcb6 	bl	8016a50 <USBD_Start>

  return 0;
 80160e4:	2300      	movs	r3, #0
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	bd80      	pop	{r7, pc}
 80160ea:	bf00      	nop
 80160ec:	20000488 	.word	0x20000488
 80160f0:	200021dc 	.word	0x200021dc
 80160f4:	200004e4 	.word	0x200004e4
 80160f8:	20000474 	.word	0x20000474

080160fc <VCOM_receive_MSG>:
  * @param  Msg the pointer to the message to be received
  * @param  len_max Max. length of message.
  * @retval Message status.
  */
vcom_msg_status_t VCOM_receive_MSG(TMsg *Msg, uint32_t len_max)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b08a      	sub	sp, #40	; 0x28
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
 8016104:	6039      	str	r1, [r7, #0]
  vcom_msg_status_t status;

  /* VCOM data receive not completed or no VCOM data received at all. */
  if (VCOM_RxData == 0)
 8016106:	4b6a      	ldr	r3, [pc, #424]	; (80162b0 <VCOM_receive_MSG+0x1b4>)
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	b2db      	uxtb	r3, r3
 801610c:	2b00      	cmp	r3, #0
 801610e:	d101      	bne.n	8016114 <VCOM_receive_MSG+0x18>
  {
    return NO_DATA;
 8016110:	2301      	movs	r3, #1
 8016112:	e0c8      	b.n	80162a6 <VCOM_receive_MSG+0x1aa>
  }

  /* ERROR: No VCOM data ready. */
  if (VCOM_RxLength == 0 || VCOM_RxBuffer == NULL)
 8016114:	4b67      	ldr	r3, [pc, #412]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d003      	beq.n	8016124 <VCOM_receive_MSG+0x28>
 801611c:	4b66      	ldr	r3, [pc, #408]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d101      	bne.n	8016128 <VCOM_receive_MSG+0x2c>
  {
    Error_Handler();
 8016124:	f7fd ff2b 	bl	8013f7e <Error_Handler>
  }

  /* Read message. */
  uint32_t s0_index = 0;
 8016128:	2300      	movs	r3, #0
 801612a:	623b      	str	r3, [r7, #32]
  uint32_t s1_index = 1;
 801612c:	2301      	movs	r3, #1
 801612e:	61fb      	str	r3, [r7, #28]
  uint32_t d_index  = 0;
 8016130:	2300      	movs	r3, #0
 8016132:	61bb      	str	r3, [r7, #24]
  uint32_t incr     = 0;
 8016134:	2300      	movs	r3, #0
 8016136:	617b      	str	r3, [r7, #20]
    uint8_t  source[2];
    uint8_t* dest;

    /* End of VCOM recieve buffer.
       ERROR: Unexpected end of message. */
    if (s0_index >= VCOM_RxLength)
 8016138:	4b5e      	ldr	r3, [pc, #376]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	6a3a      	ldr	r2, [r7, #32]
 801613e:	429a      	cmp	r2, r3
 8016140:	d303      	bcc.n	801614a <VCOM_receive_MSG+0x4e>
    {
      status = UNEXP_END_ERR;
 8016142:	2302      	movs	r3, #2
 8016144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8016148:	e048      	b.n	80161dc <VCOM_receive_MSG+0xe0>
    }

    source[0] = VCOM_RxBuffer[s0_index];
 801614a:	4b5b      	ldr	r3, [pc, #364]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 801614c:	681a      	ldr	r2, [r3, #0]
 801614e:	6a3b      	ldr	r3, [r7, #32]
 8016150:	4413      	add	r3, r2
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	b2db      	uxtb	r3, r3
 8016156:	733b      	strb	r3, [r7, #12]

    /* End of message found. */
    if (source[0] == TMsg_EOF)
 8016158:	7b3b      	ldrb	r3, [r7, #12]
 801615a:	2bf0      	cmp	r3, #240	; 0xf0
 801615c:	d103      	bne.n	8016166 <VCOM_receive_MSG+0x6a>
    {
      status = OK;
 801615e:	2300      	movs	r3, #0
 8016160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8016164:	e03a      	b.n	80161dc <VCOM_receive_MSG+0xe0>
    }

    /* Message length exceeded */
    if (d_index >= len_max)
 8016166:	69ba      	ldr	r2, [r7, #24]
 8016168:	683b      	ldr	r3, [r7, #0]
 801616a:	429a      	cmp	r2, r3
 801616c:	d303      	bcc.n	8016176 <VCOM_receive_MSG+0x7a>
    {
      status = MSG_LEN_ERR;
 801616e:	2305      	movs	r3, #5
 8016170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8016174:	e032      	b.n	80161dc <VCOM_receive_MSG+0xe0>
    }

    /* End of VCOM recieve buffer.
       ERROR: Unexpected end of message. */
    if (s1_index >= VCOM_RxLength)
 8016176:	4b4f      	ldr	r3, [pc, #316]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	69fa      	ldr	r2, [r7, #28]
 801617c:	429a      	cmp	r2, r3
 801617e:	d303      	bcc.n	8016188 <VCOM_receive_MSG+0x8c>
    {
      status = UNEXP_END_ERR;
 8016180:	2302      	movs	r3, #2
 8016182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8016186:	e029      	b.n	80161dc <VCOM_receive_MSG+0xe0>
    }

    source[1] = VCOM_RxBuffer[s1_index];
 8016188:	4b4b      	ldr	r3, [pc, #300]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 801618a:	681a      	ldr	r2, [r3, #0]
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	4413      	add	r3, r2
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	b2db      	uxtb	r3, r3
 8016194:	737b      	strb	r3, [r7, #13]
    dest      = &Msg->Data[d_index];
 8016196:	687a      	ldr	r2, [r7, #4]
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	4413      	add	r3, r2
 801619c:	3304      	adds	r3, #4
 801619e:	613b      	str	r3, [r7, #16]

    incr = ReverseByteStuffCopyByte2(source[0], source[1], dest);
 80161a0:	7b3b      	ldrb	r3, [r7, #12]
 80161a2:	7b79      	ldrb	r1, [r7, #13]
 80161a4:	693a      	ldr	r2, [r7, #16]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7ff f8fd 	bl	80153a6 <ReverseByteStuffCopyByte2>
 80161ac:	4603      	mov	r3, r0
 80161ae:	617b      	str	r3, [r7, #20]
    Msg->Len = d_index + 1;
 80161b0:	69bb      	ldr	r3, [r7, #24]
 80161b2:	1c5a      	adds	r2, r3, #1
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	601a      	str	r2, [r3, #0]

    /* ERROR: Invalid sequence found. */
    if (incr == 0)
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <VCOM_receive_MSG+0xca>
    {
      status = WRONG_SEQ_ERR;
 80161be:	2303      	movs	r3, #3
 80161c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80161c4:	e00a      	b.n	80161dc <VCOM_receive_MSG+0xe0>
    }

    s0_index += incr;
 80161c6:	6a3a      	ldr	r2, [r7, #32]
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	4413      	add	r3, r2
 80161cc:	623b      	str	r3, [r7, #32]
    s1_index = s0_index + 1;
 80161ce:	6a3b      	ldr	r3, [r7, #32]
 80161d0:	3301      	adds	r3, #1
 80161d2:	61fb      	str	r3, [r7, #28]
    d_index++;
 80161d4:	69bb      	ldr	r3, [r7, #24]
 80161d6:	3301      	adds	r3, #1
 80161d8:	61bb      	str	r3, [r7, #24]
  {
 80161da:	e7ad      	b.n	8016138 <VCOM_receive_MSG+0x3c>
  }

  switch (status)
 80161dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161e0:	2b05      	cmp	r3, #5
 80161e2:	d85f      	bhi.n	80162a4 <VCOM_receive_MSG+0x1a8>
 80161e4:	a201      	add	r2, pc, #4	; (adr r2, 80161ec <VCOM_receive_MSG+0xf0>)
 80161e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ea:	bf00      	nop
 80161ec:	08016205 	.word	0x08016205
 80161f0:	080162a5 	.word	0x080162a5
 80161f4:	08016253 	.word	0x08016253
 80161f8:	0801626d 	.word	0x0801626d
 80161fc:	080162a5 	.word	0x080162a5
 8016200:	08016289 	.word	0x08016289
  {
  case OK:
    {
      /* More data in VCOM recieve buffer. */
      if (s1_index < VCOM_RxLength)
 8016204:	4b2b      	ldr	r3, [pc, #172]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	69fa      	ldr	r2, [r7, #28]
 801620a:	429a      	cmp	r2, r3
 801620c:	d20c      	bcs.n	8016228 <VCOM_receive_MSG+0x12c>
      {
        VCOM_RxBuffer += s1_index;
 801620e:	4b2a      	ldr	r3, [pc, #168]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 8016210:	681a      	ldr	r2, [r3, #0]
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	4413      	add	r3, r2
 8016216:	4a28      	ldr	r2, [pc, #160]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 8016218:	6013      	str	r3, [r2, #0]
        VCOM_RxLength -= s1_index;
 801621a:	4b26      	ldr	r3, [pc, #152]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 801621c:	681a      	ldr	r2, [r3, #0]
 801621e:	69fb      	ldr	r3, [r7, #28]
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	4a24      	ldr	r2, [pc, #144]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016224:	6013      	str	r3, [r2, #0]
 8016226:	e00a      	b.n	801623e <VCOM_receive_MSG+0x142>
      }

      /* End of VCOM recieve buffer. */
      else
      {
        VCOM_RxData   = 0;
 8016228:	4b21      	ldr	r3, [pc, #132]	; (80162b0 <VCOM_receive_MSG+0x1b4>)
 801622a:	2200      	movs	r2, #0
 801622c:	701a      	strb	r2, [r3, #0]
        VCOM_RxBuffer = NULL;
 801622e:	4b22      	ldr	r3, [pc, #136]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 8016230:	2200      	movs	r2, #0
 8016232:	601a      	str	r2, [r3, #0]
        VCOM_RxLength = 0;
 8016234:	4b1f      	ldr	r3, [pc, #124]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016236:	2200      	movs	r2, #0
 8016238:	601a      	str	r2, [r3, #0]

        CDC_Next_Packet_Rx();
 801623a:	f7ff fbc7 	bl	80159cc <CDC_Next_Packet_Rx>
      }

      /* Check message integrity. */
      if (CHK_CheckAndRemove(Msg))
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f7ff f902 	bl	8015448 <CHK_CheckAndRemove>
 8016244:	4603      	mov	r3, r0
 8016246:	2b00      	cmp	r3, #0
 8016248:	d001      	beq.n	801624e <VCOM_receive_MSG+0x152>
      {
        return OK;
 801624a:	2300      	movs	r3, #0
 801624c:	e02b      	b.n	80162a6 <VCOM_receive_MSG+0x1aa>
      }

      else
      {
        return WRONG_CHECK_ERR;
 801624e:	2304      	movs	r3, #4
 8016250:	e029      	b.n	80162a6 <VCOM_receive_MSG+0x1aa>
      }
    }

  case UNEXP_END_ERR:
    {
      VCOM_RxData   = 0;
 8016252:	4b17      	ldr	r3, [pc, #92]	; (80162b0 <VCOM_receive_MSG+0x1b4>)
 8016254:	2200      	movs	r2, #0
 8016256:	701a      	strb	r2, [r3, #0]
      VCOM_RxBuffer = NULL;
 8016258:	4b17      	ldr	r3, [pc, #92]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 801625a:	2200      	movs	r2, #0
 801625c:	601a      	str	r2, [r3, #0]
      VCOM_RxLength = 0;
 801625e:	4b15      	ldr	r3, [pc, #84]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016260:	2200      	movs	r2, #0
 8016262:	601a      	str	r2, [r3, #0]

      CDC_Next_Packet_Rx();
 8016264:	f7ff fbb2 	bl	80159cc <CDC_Next_Packet_Rx>

      return UNEXP_END_ERR;
 8016268:	2302      	movs	r3, #2
 801626a:	e01c      	b.n	80162a6 <VCOM_receive_MSG+0x1aa>
    }

  case WRONG_SEQ_ERR:
    {
      VCOM_RxBuffer += s1_index;
 801626c:	4b12      	ldr	r3, [pc, #72]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 801626e:	681a      	ldr	r2, [r3, #0]
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	4413      	add	r3, r2
 8016274:	4a10      	ldr	r2, [pc, #64]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 8016276:	6013      	str	r3, [r2, #0]
      VCOM_RxLength -= s1_index;
 8016278:	4b0e      	ldr	r3, [pc, #56]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	69fb      	ldr	r3, [r7, #28]
 801627e:	1ad3      	subs	r3, r2, r3
 8016280:	4a0c      	ldr	r2, [pc, #48]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016282:	6013      	str	r3, [r2, #0]

      return WRONG_SEQ_ERR;
 8016284:	2303      	movs	r3, #3
 8016286:	e00e      	b.n	80162a6 <VCOM_receive_MSG+0x1aa>
    }

  case MSG_LEN_ERR:
    {
      VCOM_RxBuffer += s0_index;
 8016288:	4b0b      	ldr	r3, [pc, #44]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 801628a:	681a      	ldr	r2, [r3, #0]
 801628c:	6a3b      	ldr	r3, [r7, #32]
 801628e:	4413      	add	r3, r2
 8016290:	4a09      	ldr	r2, [pc, #36]	; (80162b8 <VCOM_receive_MSG+0x1bc>)
 8016292:	6013      	str	r3, [r2, #0]
      VCOM_RxLength -= s0_index;
 8016294:	4b07      	ldr	r3, [pc, #28]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	6a3b      	ldr	r3, [r7, #32]
 801629a:	1ad3      	subs	r3, r2, r3
 801629c:	4a05      	ldr	r2, [pc, #20]	; (80162b4 <VCOM_receive_MSG+0x1b8>)
 801629e:	6013      	str	r3, [r2, #0]

      return MSG_LEN_ERR;
 80162a0:	2305      	movs	r3, #5
 80162a2:	e000      	b.n	80162a6 <VCOM_receive_MSG+0x1aa>
    }

  default:
    return UNKNOWN_ERROR;
 80162a4:	2306      	movs	r3, #6
  }
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3728      	adds	r7, #40	; 0x28
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	200024ac 	.word	0x200024ac
 80162b4:	200024b4 	.word	0x200024b4
 80162b8:	200024b0 	.word	0x200024b0

080162bc <VCOM_send_MSG>:
  * @brief  Send a message via VCOM
  * @param  Msg the pointer to the message to be sent
  * @retval None
  */
vcom_msg_status_t VCOM_send_MSG(TMsg *Msg)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
  uint32_t length;
  uint32_t written;

  CHK_ComputeAndAdd(Msg);
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f7ff f895 	bl	80153f4 <CHK_ComputeAndAdd>
  length = ByteStuffCopy(dataOut, Msg);
 80162ca:	6879      	ldr	r1, [r7, #4]
 80162cc:	480a      	ldr	r0, [pc, #40]	; (80162f8 <VCOM_send_MSG+0x3c>)
 80162ce:	f7ff f83c 	bl	801534a <ByteStuffCopy>
 80162d2:	4603      	mov	r3, r0
 80162d4:	60fb      	str	r3, [r7, #12]

  if (CDC_Fill_Buffer(dataOut, length, &written) == USBD_OK)
 80162d6:	f107 0308 	add.w	r3, r7, #8
 80162da:	461a      	mov	r2, r3
 80162dc:	68f9      	ldr	r1, [r7, #12]
 80162de:	4806      	ldr	r0, [pc, #24]	; (80162f8 <VCOM_send_MSG+0x3c>)
 80162e0:	f7ff fb3a 	bl	8015958 <CDC_Fill_Buffer>
 80162e4:	4603      	mov	r3, r0
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d101      	bne.n	80162ee <VCOM_send_MSG+0x32>
  {
    return OK;
 80162ea:	2300      	movs	r3, #0
 80162ec:	e000      	b.n	80162f0 <VCOM_send_MSG+0x34>
  }

  else
  {
    return UNKNOWN_ERROR;
 80162ee:	2306      	movs	r3, #6
  }
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3710      	adds	r7, #16
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	200024b8 	.word	0x200024b8

080162fc <VCOM_write>:
 * @param  Pointer to buffer.
 * @param  Number of data bytes to write.
 * @retval Number of really written data bytes.
 */
uint32_t VCOM_write(char *buffer, uint32_t len)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
  uint32_t written;

  CDC_Fill_Buffer((uint8_t *)buffer, len, &written);
 8016306:	f107 030c 	add.w	r3, r7, #12
 801630a:	461a      	mov	r2, r3
 801630c:	6839      	ldr	r1, [r7, #0]
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f7ff fb22 	bl	8015958 <CDC_Fill_Buffer>
  return written;
 8016314:	68fb      	ldr	r3, [r7, #12]
}
 8016316:	4618      	mov	r0, r3
 8016318:	3710      	adds	r7, #16
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}

0801631e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801631e:	b580      	push	{r7, lr}
 8016320:	b084      	sub	sp, #16
 8016322:	af00      	add	r7, sp, #0
 8016324:	6078      	str	r0, [r7, #4]
 8016326:	460b      	mov	r3, r1
 8016328:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801632a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801632e:	f001 fca1 	bl	8017c74 <malloc>
 8016332:	4603      	mov	r3, r0
 8016334:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d105      	bne.n	8016348 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2200      	movs	r2, #0
 8016340:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8016344:	2302      	movs	r3, #2
 8016346:	e066      	b.n	8016416 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	68fa      	ldr	r2, [r7, #12]
 801634c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	7c1b      	ldrb	r3, [r3, #16]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d119      	bne.n	801638c <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016358:	f44f 7300 	mov.w	r3, #512	; 0x200
 801635c:	2202      	movs	r2, #2
 801635e:	2181      	movs	r1, #129	; 0x81
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f7ff fcea 	bl	8015d3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2201      	movs	r2, #1
 801636a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801636c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016370:	2202      	movs	r2, #2
 8016372:	2101      	movs	r1, #1
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f7ff fce0 	bl	8015d3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2201      	movs	r2, #1
 801637e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2210      	movs	r2, #16
 8016386:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801638a:	e016      	b.n	80163ba <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801638c:	2340      	movs	r3, #64	; 0x40
 801638e:	2202      	movs	r2, #2
 8016390:	2181      	movs	r1, #129	; 0x81
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f7ff fcd1 	bl	8015d3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2201      	movs	r2, #1
 801639c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801639e:	2340      	movs	r3, #64	; 0x40
 80163a0:	2202      	movs	r2, #2
 80163a2:	2101      	movs	r1, #1
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f7ff fcc8 	bl	8015d3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2201      	movs	r2, #1
 80163ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2210      	movs	r2, #16
 80163b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80163ba:	2308      	movs	r3, #8
 80163bc:	2203      	movs	r2, #3
 80163be:	2182      	movs	r1, #130	; 0x82
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7ff fcba 	bl	8015d3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2201      	movs	r2, #1
 80163ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	2200      	movs	r2, #0
 80163dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	2200      	movs	r2, #0
 80163e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	7c1b      	ldrb	r3, [r3, #16]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d109      	bne.n	8016404 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80163f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80163fa:	2101      	movs	r1, #1
 80163fc:	6878      	ldr	r0, [r7, #4]
 80163fe:	f7ff fd43 	bl	8015e88 <USBD_LL_PrepareReceive>
 8016402:	e007      	b.n	8016414 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801640a:	2340      	movs	r3, #64	; 0x40
 801640c:	2101      	movs	r1, #1
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f7ff fd3a 	bl	8015e88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016414:	2300      	movs	r3, #0
}
 8016416:	4618      	mov	r0, r3
 8016418:	3710      	adds	r7, #16
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}

0801641e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801641e:	b580      	push	{r7, lr}
 8016420:	b082      	sub	sp, #8
 8016422:	af00      	add	r7, sp, #0
 8016424:	6078      	str	r0, [r7, #4]
 8016426:	460b      	mov	r3, r1
 8016428:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801642a:	2181      	movs	r1, #129	; 0x81
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f7ff fc9e 	bl	8015d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2200      	movs	r2, #0
 8016436:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016438:	2101      	movs	r1, #1
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7ff fc97 	bl	8015d6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016448:	2182      	movs	r1, #130	; 0x82
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f7ff fc8f 	bl	8015d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2200      	movs	r2, #0
 8016454:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2200      	movs	r2, #0
 801645c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00e      	beq.n	8016488 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801647a:	4618      	mov	r0, r3
 801647c:	f001 fc02 	bl	8017c84 <free>
    pdev->pClassData = NULL;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2200      	movs	r2, #0
 8016484:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016488:	2300      	movs	r3, #0
}
 801648a:	4618      	mov	r0, r3
 801648c:	3708      	adds	r7, #8
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
	...

08016494 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b086      	sub	sp, #24
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80164a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80164a6:	2300      	movs	r3, #0
 80164a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80164aa:	2300      	movs	r3, #0
 80164ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80164ae:	2300      	movs	r3, #0
 80164b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d101      	bne.n	80164bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80164b8:	2303      	movs	r3, #3
 80164ba:	e0af      	b.n	801661c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	781b      	ldrb	r3, [r3, #0]
 80164c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d03f      	beq.n	8016548 <USBD_CDC_Setup+0xb4>
 80164c8:	2b20      	cmp	r3, #32
 80164ca:	f040 809f 	bne.w	801660c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	88db      	ldrh	r3, [r3, #6]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d02e      	beq.n	8016534 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	b25b      	sxtb	r3, r3
 80164dc:	2b00      	cmp	r3, #0
 80164de:	da16      	bge.n	801650e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80164e6:	689b      	ldr	r3, [r3, #8]
 80164e8:	683a      	ldr	r2, [r7, #0]
 80164ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80164ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80164ee:	683a      	ldr	r2, [r7, #0]
 80164f0:	88d2      	ldrh	r2, [r2, #6]
 80164f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	88db      	ldrh	r3, [r3, #6]
 80164f8:	2b07      	cmp	r3, #7
 80164fa:	bf28      	it	cs
 80164fc:	2307      	movcs	r3, #7
 80164fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	89fa      	ldrh	r2, [r7, #14]
 8016504:	4619      	mov	r1, r3
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f001 fb33 	bl	8017b72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801650c:	e085      	b.n	801661a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	785a      	ldrb	r2, [r3, #1]
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	88db      	ldrh	r3, [r3, #6]
 801651c:	b2da      	uxtb	r2, r3
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016524:	6939      	ldr	r1, [r7, #16]
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	88db      	ldrh	r3, [r3, #6]
 801652a:	461a      	mov	r2, r3
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f001 fb4c 	bl	8017bca <USBD_CtlPrepareRx>
      break;
 8016532:	e072      	b.n	801661a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801653a:	689b      	ldr	r3, [r3, #8]
 801653c:	683a      	ldr	r2, [r7, #0]
 801653e:	7850      	ldrb	r0, [r2, #1]
 8016540:	2200      	movs	r2, #0
 8016542:	6839      	ldr	r1, [r7, #0]
 8016544:	4798      	blx	r3
      break;
 8016546:	e068      	b.n	801661a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016548:	683b      	ldr	r3, [r7, #0]
 801654a:	785b      	ldrb	r3, [r3, #1]
 801654c:	2b0b      	cmp	r3, #11
 801654e:	d852      	bhi.n	80165f6 <USBD_CDC_Setup+0x162>
 8016550:	a201      	add	r2, pc, #4	; (adr r2, 8016558 <USBD_CDC_Setup+0xc4>)
 8016552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016556:	bf00      	nop
 8016558:	08016589 	.word	0x08016589
 801655c:	08016605 	.word	0x08016605
 8016560:	080165f7 	.word	0x080165f7
 8016564:	080165f7 	.word	0x080165f7
 8016568:	080165f7 	.word	0x080165f7
 801656c:	080165f7 	.word	0x080165f7
 8016570:	080165f7 	.word	0x080165f7
 8016574:	080165f7 	.word	0x080165f7
 8016578:	080165f7 	.word	0x080165f7
 801657c:	080165f7 	.word	0x080165f7
 8016580:	080165b3 	.word	0x080165b3
 8016584:	080165dd 	.word	0x080165dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801658e:	b2db      	uxtb	r3, r3
 8016590:	2b03      	cmp	r3, #3
 8016592:	d107      	bne.n	80165a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016594:	f107 030a 	add.w	r3, r7, #10
 8016598:	2202      	movs	r2, #2
 801659a:	4619      	mov	r1, r3
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f001 fae8 	bl	8017b72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80165a2:	e032      	b.n	801660a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80165a4:	6839      	ldr	r1, [r7, #0]
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f001 fa72 	bl	8017a90 <USBD_CtlError>
            ret = USBD_FAIL;
 80165ac:	2303      	movs	r3, #3
 80165ae:	75fb      	strb	r3, [r7, #23]
          break;
 80165b0:	e02b      	b.n	801660a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165b8:	b2db      	uxtb	r3, r3
 80165ba:	2b03      	cmp	r3, #3
 80165bc:	d107      	bne.n	80165ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80165be:	f107 030d 	add.w	r3, r7, #13
 80165c2:	2201      	movs	r2, #1
 80165c4:	4619      	mov	r1, r3
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f001 fad3 	bl	8017b72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80165cc:	e01d      	b.n	801660a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80165ce:	6839      	ldr	r1, [r7, #0]
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f001 fa5d 	bl	8017a90 <USBD_CtlError>
            ret = USBD_FAIL;
 80165d6:	2303      	movs	r3, #3
 80165d8:	75fb      	strb	r3, [r7, #23]
          break;
 80165da:	e016      	b.n	801660a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	d00f      	beq.n	8016608 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80165e8:	6839      	ldr	r1, [r7, #0]
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f001 fa50 	bl	8017a90 <USBD_CtlError>
            ret = USBD_FAIL;
 80165f0:	2303      	movs	r3, #3
 80165f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80165f4:	e008      	b.n	8016608 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f001 fa49 	bl	8017a90 <USBD_CtlError>
          ret = USBD_FAIL;
 80165fe:	2303      	movs	r3, #3
 8016600:	75fb      	strb	r3, [r7, #23]
          break;
 8016602:	e002      	b.n	801660a <USBD_CDC_Setup+0x176>
          break;
 8016604:	bf00      	nop
 8016606:	e008      	b.n	801661a <USBD_CDC_Setup+0x186>
          break;
 8016608:	bf00      	nop
      }
      break;
 801660a:	e006      	b.n	801661a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f001 fa3e 	bl	8017a90 <USBD_CtlError>
      ret = USBD_FAIL;
 8016614:	2303      	movs	r3, #3
 8016616:	75fb      	strb	r3, [r7, #23]
      break;
 8016618:	bf00      	nop
  }

  return (uint8_t)ret;
 801661a:	7dfb      	ldrb	r3, [r7, #23]
}
 801661c:	4618      	mov	r0, r3
 801661e:	3718      	adds	r7, #24
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	460b      	mov	r3, r1
 801662e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801663e:	2b00      	cmp	r3, #0
 8016640:	d101      	bne.n	8016646 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016642:	2303      	movs	r3, #3
 8016644:	e04f      	b.n	80166e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801664c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801664e:	78fa      	ldrb	r2, [r7, #3]
 8016650:	6879      	ldr	r1, [r7, #4]
 8016652:	4613      	mov	r3, r2
 8016654:	009b      	lsls	r3, r3, #2
 8016656:	4413      	add	r3, r2
 8016658:	009b      	lsls	r3, r3, #2
 801665a:	440b      	add	r3, r1
 801665c:	3318      	adds	r3, #24
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d029      	beq.n	80166b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016664:	78fa      	ldrb	r2, [r7, #3]
 8016666:	6879      	ldr	r1, [r7, #4]
 8016668:	4613      	mov	r3, r2
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	4413      	add	r3, r2
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	440b      	add	r3, r1
 8016672:	3318      	adds	r3, #24
 8016674:	681a      	ldr	r2, [r3, #0]
 8016676:	78f9      	ldrb	r1, [r7, #3]
 8016678:	68f8      	ldr	r0, [r7, #12]
 801667a:	460b      	mov	r3, r1
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	1a5b      	subs	r3, r3, r1
 8016680:	009b      	lsls	r3, r3, #2
 8016682:	4403      	add	r3, r0
 8016684:	3344      	adds	r3, #68	; 0x44
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	fbb2 f1f3 	udiv	r1, r2, r3
 801668c:	fb01 f303 	mul.w	r3, r1, r3
 8016690:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016692:	2b00      	cmp	r3, #0
 8016694:	d110      	bne.n	80166b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016696:	78fa      	ldrb	r2, [r7, #3]
 8016698:	6879      	ldr	r1, [r7, #4]
 801669a:	4613      	mov	r3, r2
 801669c:	009b      	lsls	r3, r3, #2
 801669e:	4413      	add	r3, r2
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	440b      	add	r3, r1
 80166a4:	3318      	adds	r3, #24
 80166a6:	2200      	movs	r2, #0
 80166a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80166aa:	78f9      	ldrb	r1, [r7, #3]
 80166ac:	2300      	movs	r3, #0
 80166ae:	2200      	movs	r2, #0
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f7ff fbd4 	bl	8015e5e <USBD_LL_Transmit>
 80166b6:	e015      	b.n	80166e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	2200      	movs	r2, #0
 80166bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80166c6:	691b      	ldr	r3, [r3, #16]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d00b      	beq.n	80166e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80166d2:	691b      	ldr	r3, [r3, #16]
 80166d4:	68ba      	ldr	r2, [r7, #8]
 80166d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80166da:	68ba      	ldr	r2, [r7, #8]
 80166dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80166e0:	78fa      	ldrb	r2, [r7, #3]
 80166e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80166e4:	2300      	movs	r3, #0
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3710      	adds	r7, #16
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80166ee:	b580      	push	{r7, lr}
 80166f0:	b084      	sub	sp, #16
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
 80166f6:	460b      	mov	r3, r1
 80166f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016700:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016708:	2b00      	cmp	r3, #0
 801670a:	d101      	bne.n	8016710 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801670c:	2303      	movs	r3, #3
 801670e:	e015      	b.n	801673c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016710:	78fb      	ldrb	r3, [r7, #3]
 8016712:	4619      	mov	r1, r3
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f7ff fbcc 	bl	8015eb2 <USBD_LL_GetRxDataSize>
 801671a:	4602      	mov	r2, r0
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016728:	68db      	ldr	r3, [r3, #12]
 801672a:	68fa      	ldr	r2, [r7, #12]
 801672c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016730:	68fa      	ldr	r2, [r7, #12]
 8016732:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016736:	4611      	mov	r1, r2
 8016738:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801673a:	2300      	movs	r3, #0
}
 801673c:	4618      	mov	r0, r3
 801673e:	3710      	adds	r7, #16
 8016740:	46bd      	mov	sp, r7
 8016742:	bd80      	pop	{r7, pc}

08016744 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016752:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d101      	bne.n	801675e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801675a:	2303      	movs	r3, #3
 801675c:	e01b      	b.n	8016796 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016764:	2b00      	cmp	r3, #0
 8016766:	d015      	beq.n	8016794 <USBD_CDC_EP0_RxReady+0x50>
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801676e:	2bff      	cmp	r3, #255	; 0xff
 8016770:	d010      	beq.n	8016794 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016778:	689b      	ldr	r3, [r3, #8]
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8016780:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016782:	68fa      	ldr	r2, [r7, #12]
 8016784:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016788:	b292      	uxth	r2, r2
 801678a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	22ff      	movs	r2, #255	; 0xff
 8016790:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016794:	2300      	movs	r3, #0
}
 8016796:	4618      	mov	r0, r3
 8016798:	3710      	adds	r7, #16
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
	...

080167a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80167a0:	b480      	push	{r7}
 80167a2:	b083      	sub	sp, #12
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2243      	movs	r2, #67	; 0x43
 80167ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80167ae:	4b03      	ldr	r3, [pc, #12]	; (80167bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	370c      	adds	r7, #12
 80167b4:	46bd      	mov	sp, r7
 80167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ba:	4770      	bx	lr
 80167bc:	20000560 	.word	0x20000560

080167c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80167c0:	b480      	push	{r7}
 80167c2:	b083      	sub	sp, #12
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2243      	movs	r2, #67	; 0x43
 80167cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80167ce:	4b03      	ldr	r3, [pc, #12]	; (80167dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	2000051c 	.word	0x2000051c

080167e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2243      	movs	r2, #67	; 0x43
 80167ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80167ee:	4b03      	ldr	r3, [pc, #12]	; (80167fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	370c      	adds	r7, #12
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	200005a4 	.word	0x200005a4

08016800 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016800:	b480      	push	{r7}
 8016802:	b083      	sub	sp, #12
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	220a      	movs	r2, #10
 801680c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801680e:	4b03      	ldr	r3, [pc, #12]	; (801681c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr
 801681c:	200004d8 	.word	0x200004d8

08016820 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016820:	b480      	push	{r7}
 8016822:	b083      	sub	sp, #12
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d101      	bne.n	8016834 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016830:	2303      	movs	r3, #3
 8016832:	e004      	b.n	801683e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	683a      	ldr	r2, [r7, #0]
 8016838:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801683c:	2300      	movs	r3, #0
}
 801683e:	4618      	mov	r0, r3
 8016840:	370c      	adds	r7, #12
 8016842:	46bd      	mov	sp, r7
 8016844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016848:	4770      	bx	lr

0801684a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801684a:	b480      	push	{r7}
 801684c:	b087      	sub	sp, #28
 801684e:	af00      	add	r7, sp, #0
 8016850:	60f8      	str	r0, [r7, #12]
 8016852:	60b9      	str	r1, [r7, #8]
 8016854:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801685c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d101      	bne.n	8016868 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016864:	2303      	movs	r3, #3
 8016866:	e008      	b.n	801687a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	68ba      	ldr	r2, [r7, #8]
 801686c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8016878:	2300      	movs	r3, #0
}
 801687a:	4618      	mov	r0, r3
 801687c:	371c      	adds	r7, #28
 801687e:	46bd      	mov	sp, r7
 8016880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016884:	4770      	bx	lr

08016886 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016886:	b480      	push	{r7}
 8016888:	b085      	sub	sp, #20
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
 801688e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016896:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d101      	bne.n	80168a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801689e:	2303      	movs	r3, #3
 80168a0:	e004      	b.n	80168ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	683a      	ldr	r2, [r7, #0]
 80168a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80168aa:	2300      	movs	r3, #0
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3714      	adds	r7, #20
 80168b0:	46bd      	mov	sp, r7
 80168b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b6:	4770      	bx	lr

080168b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80168c8:	2301      	movs	r3, #1
 80168ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d101      	bne.n	80168da <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80168d6:	2303      	movs	r3, #3
 80168d8:	e01a      	b.n	8016910 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d114      	bne.n	801690e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80168e4:	68bb      	ldr	r3, [r7, #8]
 80168e6:	2201      	movs	r2, #1
 80168e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80168f6:	68bb      	ldr	r3, [r7, #8]
 80168f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8016902:	2181      	movs	r1, #129	; 0x81
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f7ff faaa 	bl	8015e5e <USBD_LL_Transmit>

    ret = USBD_OK;
 801690a:	2300      	movs	r3, #0
 801690c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016910:	4618      	mov	r0, r3
 8016912:	3710      	adds	r7, #16
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016926:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801692e:	2b00      	cmp	r3, #0
 8016930:	d101      	bne.n	8016936 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016932:	2303      	movs	r3, #3
 8016934:	e016      	b.n	8016964 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	7c1b      	ldrb	r3, [r3, #16]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d109      	bne.n	8016952 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016948:	2101      	movs	r1, #1
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f7ff fa9c 	bl	8015e88 <USBD_LL_PrepareReceive>
 8016950:	e007      	b.n	8016962 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016958:	2340      	movs	r3, #64	; 0x40
 801695a:	2101      	movs	r1, #1
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f7ff fa93 	bl	8015e88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016962:	2300      	movs	r3, #0
}
 8016964:	4618      	mov	r0, r3
 8016966:	3710      	adds	r7, #16
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	4613      	mov	r3, r2
 8016978:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d10a      	bne.n	8016996 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8016980:	4817      	ldr	r0, [pc, #92]	; (80169e0 <USBD_Init+0x74>)
 8016982:	f001 faf5 	bl	8017f70 <iprintf>
 8016986:	4817      	ldr	r0, [pc, #92]	; (80169e4 <USBD_Init+0x78>)
 8016988:	f001 faf2 	bl	8017f70 <iprintf>
 801698c:	200a      	movs	r0, #10
 801698e:	f001 fb01 	bl	8017f94 <putchar>
#endif
    return USBD_FAIL;
 8016992:	2303      	movs	r3, #3
 8016994:	e01f      	b.n	80169d6 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2200      	movs	r2, #0
 801699a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2200      	movs	r2, #0
 80169a2:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2200      	movs	r2, #0
 80169aa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d003      	beq.n	80169bc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	68ba      	ldr	r2, [r7, #8]
 80169b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2201      	movs	r2, #1
 80169c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	79fa      	ldrb	r2, [r7, #7]
 80169c8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80169ca:	68f8      	ldr	r0, [r7, #12]
 80169cc:	f7ff f95c 	bl	8015c88 <USBD_LL_Init>
 80169d0:	4603      	mov	r3, r0
 80169d2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80169d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3718      	adds	r7, #24
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	08019fdc 	.word	0x08019fdc
 80169e4:	08019fe4 	.word	0x08019fe4

080169e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b084      	sub	sp, #16
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80169f2:	2300      	movs	r3, #0
 80169f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d10a      	bne.n	8016a12 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80169fc:	4812      	ldr	r0, [pc, #72]	; (8016a48 <USBD_RegisterClass+0x60>)
 80169fe:	f001 fab7 	bl	8017f70 <iprintf>
 8016a02:	4812      	ldr	r0, [pc, #72]	; (8016a4c <USBD_RegisterClass+0x64>)
 8016a04:	f001 fab4 	bl	8017f70 <iprintf>
 8016a08:	200a      	movs	r0, #10
 8016a0a:	f001 fac3 	bl	8017f94 <putchar>
#endif
    return USBD_FAIL;
 8016a0e:	2303      	movs	r3, #3
 8016a10:	e016      	b.n	8016a40 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	683a      	ldr	r2, [r7, #0]
 8016a16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d00b      	beq.n	8016a3e <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2e:	f107 020e 	add.w	r2, r7, #14
 8016a32:	4610      	mov	r0, r2
 8016a34:	4798      	blx	r3
 8016a36:	4602      	mov	r2, r0
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016a3e:	2300      	movs	r3, #0
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3710      	adds	r7, #16
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	08019fdc 	.word	0x08019fdc
 8016a4c:	08019ffc 	.word	0x08019ffc

08016a50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	f7ff f95f 	bl	8015d1c <USBD_LL_Start>
 8016a5e:	4603      	mov	r3, r0
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016a70:	2300      	movs	r3, #0
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	370c      	adds	r7, #12
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr

08016a7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016a7e:	b580      	push	{r7, lr}
 8016a80:	b084      	sub	sp, #16
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	6078      	str	r0, [r7, #4]
 8016a86:	460b      	mov	r3, r1
 8016a88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016a8a:	2303      	movs	r3, #3
 8016a8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d009      	beq.n	8016aac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	78fa      	ldrb	r2, [r7, #3]
 8016aa2:	4611      	mov	r1, r2
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	4798      	blx	r3
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	3710      	adds	r7, #16
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}

08016ab6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016ab6:	b580      	push	{r7, lr}
 8016ab8:	b082      	sub	sp, #8
 8016aba:	af00      	add	r7, sp, #0
 8016abc:	6078      	str	r0, [r7, #4]
 8016abe:	460b      	mov	r3, r1
 8016ac0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d007      	beq.n	8016adc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ad2:	685b      	ldr	r3, [r3, #4]
 8016ad4:	78fa      	ldrb	r2, [r7, #3]
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	4798      	blx	r3
  }

  return USBD_OK;
 8016adc:	2300      	movs	r3, #0
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}

08016ae6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016ae6:	b580      	push	{r7, lr}
 8016ae8:	b084      	sub	sp, #16
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	6078      	str	r0, [r7, #4]
 8016aee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016af6:	6839      	ldr	r1, [r7, #0]
 8016af8:	4618      	mov	r0, r3
 8016afa:	f000 ff8f 	bl	8017a1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	2201      	movs	r2, #1
 8016b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016b1a:	f003 031f 	and.w	r3, r3, #31
 8016b1e:	2b02      	cmp	r3, #2
 8016b20:	d01a      	beq.n	8016b58 <USBD_LL_SetupStage+0x72>
 8016b22:	2b02      	cmp	r3, #2
 8016b24:	d822      	bhi.n	8016b6c <USBD_LL_SetupStage+0x86>
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d002      	beq.n	8016b30 <USBD_LL_SetupStage+0x4a>
 8016b2a:	2b01      	cmp	r3, #1
 8016b2c:	d00a      	beq.n	8016b44 <USBD_LL_SetupStage+0x5e>
 8016b2e:	e01d      	b.n	8016b6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016b36:	4619      	mov	r1, r3
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f000 fa61 	bl	8017000 <USBD_StdDevReq>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	73fb      	strb	r3, [r7, #15]
      break;
 8016b42:	e020      	b.n	8016b86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	6878      	ldr	r0, [r7, #4]
 8016b4e:	f000 fac5 	bl	80170dc <USBD_StdItfReq>
 8016b52:	4603      	mov	r3, r0
 8016b54:	73fb      	strb	r3, [r7, #15]
      break;
 8016b56:	e016      	b.n	8016b86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016b5e:	4619      	mov	r1, r3
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f000 fb04 	bl	801716e <USBD_StdEPReq>
 8016b66:	4603      	mov	r3, r0
 8016b68:	73fb      	strb	r3, [r7, #15]
      break;
 8016b6a:	e00c      	b.n	8016b86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016b72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	4619      	mov	r1, r3
 8016b7a:	6878      	ldr	r0, [r7, #4]
 8016b7c:	f7ff f90a 	bl	8015d94 <USBD_LL_StallEP>
 8016b80:	4603      	mov	r3, r0
 8016b82:	73fb      	strb	r3, [r7, #15]
      break;
 8016b84:	bf00      	nop
  }

  return ret;
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b086      	sub	sp, #24
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	460b      	mov	r3, r1
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016b9e:	7afb      	ldrb	r3, [r7, #11]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d138      	bne.n	8016c16 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016bb2:	2b03      	cmp	r3, #3
 8016bb4:	d14a      	bne.n	8016c4c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	689a      	ldr	r2, [r3, #8]
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	68db      	ldr	r3, [r3, #12]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d913      	bls.n	8016bea <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016bc2:	693b      	ldr	r3, [r7, #16]
 8016bc4:	689a      	ldr	r2, [r3, #8]
 8016bc6:	693b      	ldr	r3, [r7, #16]
 8016bc8:	68db      	ldr	r3, [r3, #12]
 8016bca:	1ad2      	subs	r2, r2, r3
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	68da      	ldr	r2, [r3, #12]
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	689b      	ldr	r3, [r3, #8]
 8016bd8:	4293      	cmp	r3, r2
 8016bda:	bf28      	it	cs
 8016bdc:	4613      	movcs	r3, r2
 8016bde:	461a      	mov	r2, r3
 8016be0:	6879      	ldr	r1, [r7, #4]
 8016be2:	68f8      	ldr	r0, [r7, #12]
 8016be4:	f001 f80e 	bl	8017c04 <USBD_CtlContinueRx>
 8016be8:	e030      	b.n	8016c4c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	2b03      	cmp	r3, #3
 8016bf4:	d10b      	bne.n	8016c0e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bfc:	691b      	ldr	r3, [r3, #16]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d005      	beq.n	8016c0e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c08:	691b      	ldr	r3, [r3, #16]
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016c0e:	68f8      	ldr	r0, [r7, #12]
 8016c10:	f001 f809 	bl	8017c26 <USBD_CtlSendStatus>
 8016c14:	e01a      	b.n	8016c4c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	2b03      	cmp	r3, #3
 8016c20:	d114      	bne.n	8016c4c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c28:	699b      	ldr	r3, [r3, #24]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00e      	beq.n	8016c4c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c34:	699b      	ldr	r3, [r3, #24]
 8016c36:	7afa      	ldrb	r2, [r7, #11]
 8016c38:	4611      	mov	r1, r2
 8016c3a:	68f8      	ldr	r0, [r7, #12]
 8016c3c:	4798      	blx	r3
 8016c3e:	4603      	mov	r3, r0
 8016c40:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016c42:	7dfb      	ldrb	r3, [r7, #23]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d001      	beq.n	8016c4c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016c48:	7dfb      	ldrb	r3, [r7, #23]
 8016c4a:	e000      	b.n	8016c4e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016c4c:	2300      	movs	r3, #0
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3718      	adds	r7, #24
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b086      	sub	sp, #24
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	60f8      	str	r0, [r7, #12]
 8016c5e:	460b      	mov	r3, r1
 8016c60:	607a      	str	r2, [r7, #4]
 8016c62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016c64:	7afb      	ldrb	r3, [r7, #11]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d16b      	bne.n	8016d42 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	3314      	adds	r3, #20
 8016c6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016c76:	2b02      	cmp	r3, #2
 8016c78:	d156      	bne.n	8016d28 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	689a      	ldr	r2, [r3, #8]
 8016c7e:	693b      	ldr	r3, [r7, #16]
 8016c80:	68db      	ldr	r3, [r3, #12]
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d914      	bls.n	8016cb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	689a      	ldr	r2, [r3, #8]
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	68db      	ldr	r3, [r3, #12]
 8016c8e:	1ad2      	subs	r2, r2, r3
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	689b      	ldr	r3, [r3, #8]
 8016c98:	461a      	mov	r2, r3
 8016c9a:	6879      	ldr	r1, [r7, #4]
 8016c9c:	68f8      	ldr	r0, [r7, #12]
 8016c9e:	f000 ff83 	bl	8017ba8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	2100      	movs	r1, #0
 8016ca8:	68f8      	ldr	r0, [r7, #12]
 8016caa:	f7ff f8ed 	bl	8015e88 <USBD_LL_PrepareReceive>
 8016cae:	e03b      	b.n	8016d28 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	68da      	ldr	r2, [r3, #12]
 8016cb4:	693b      	ldr	r3, [r7, #16]
 8016cb6:	689b      	ldr	r3, [r3, #8]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d11c      	bne.n	8016cf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	685a      	ldr	r2, [r3, #4]
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d316      	bcc.n	8016cf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d20f      	bcs.n	8016cf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	2100      	movs	r1, #0
 8016cda:	68f8      	ldr	r0, [r7, #12]
 8016cdc:	f000 ff64 	bl	8017ba8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ce8:	2300      	movs	r3, #0
 8016cea:	2200      	movs	r2, #0
 8016cec:	2100      	movs	r1, #0
 8016cee:	68f8      	ldr	r0, [r7, #12]
 8016cf0:	f7ff f8ca 	bl	8015e88 <USBD_LL_PrepareReceive>
 8016cf4:	e018      	b.n	8016d28 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	2b03      	cmp	r3, #3
 8016d00:	d10b      	bne.n	8016d1a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d08:	68db      	ldr	r3, [r3, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d005      	beq.n	8016d1a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d14:	68db      	ldr	r3, [r3, #12]
 8016d16:	68f8      	ldr	r0, [r7, #12]
 8016d18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d1a:	2180      	movs	r1, #128	; 0x80
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f7ff f839 	bl	8015d94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016d22:	68f8      	ldr	r0, [r7, #12]
 8016d24:	f000 ff92 	bl	8017c4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016d2e:	2b01      	cmp	r3, #1
 8016d30:	d122      	bne.n	8016d78 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016d32:	68f8      	ldr	r0, [r7, #12]
 8016d34:	f7ff fe98 	bl	8016a68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016d40:	e01a      	b.n	8016d78 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	2b03      	cmp	r3, #3
 8016d4c:	d114      	bne.n	8016d78 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d54:	695b      	ldr	r3, [r3, #20]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d00e      	beq.n	8016d78 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d60:	695b      	ldr	r3, [r3, #20]
 8016d62:	7afa      	ldrb	r2, [r7, #11]
 8016d64:	4611      	mov	r1, r2
 8016d66:	68f8      	ldr	r0, [r7, #12]
 8016d68:	4798      	blx	r3
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016d6e:	7dfb      	ldrb	r3, [r7, #23]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d001      	beq.n	8016d78 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016d74:	7dfb      	ldrb	r3, [r7, #23]
 8016d76:	e000      	b.n	8016d7a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016d78:	2300      	movs	r3, #0
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	3718      	adds	r7, #24
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd80      	pop	{r7, pc}

08016d82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016d82:	b580      	push	{r7, lr}
 8016d84:	b082      	sub	sp, #8
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2200      	movs	r2, #0
 8016d96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2200      	movs	r2, #0
 8016da4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d101      	bne.n	8016db6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8016db2:	2303      	movs	r3, #3
 8016db4:	e02f      	b.n	8016e16 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d00f      	beq.n	8016de0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d009      	beq.n	8016de0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	6852      	ldr	r2, [r2, #4]
 8016dd8:	b2d2      	uxtb	r2, r2
 8016dda:	4611      	mov	r1, r2
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016de0:	2340      	movs	r3, #64	; 0x40
 8016de2:	2200      	movs	r2, #0
 8016de4:	2100      	movs	r1, #0
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7fe ffa7 	bl	8015d3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2201      	movs	r2, #1
 8016df0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2240      	movs	r2, #64	; 0x40
 8016df8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016dfc:	2340      	movs	r3, #64	; 0x40
 8016dfe:	2200      	movs	r2, #0
 8016e00:	2180      	movs	r1, #128	; 0x80
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f7fe ff99 	bl	8015d3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2201      	movs	r2, #1
 8016e0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2240      	movs	r2, #64	; 0x40
 8016e12:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016e14:	2300      	movs	r3, #0
}
 8016e16:	4618      	mov	r0, r3
 8016e18:	3708      	adds	r7, #8
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}

08016e1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016e1e:	b480      	push	{r7}
 8016e20:	b083      	sub	sp, #12
 8016e22:	af00      	add	r7, sp, #0
 8016e24:	6078      	str	r0, [r7, #4]
 8016e26:	460b      	mov	r3, r1
 8016e28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	78fa      	ldrb	r2, [r7, #3]
 8016e2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016e30:	2300      	movs	r3, #0
}
 8016e32:	4618      	mov	r0, r3
 8016e34:	370c      	adds	r7, #12
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr

08016e3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016e3e:	b480      	push	{r7}
 8016e40:	b083      	sub	sp, #12
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e4c:	b2da      	uxtb	r2, r3
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2204      	movs	r2, #4
 8016e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016e5c:	2300      	movs	r3, #0
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	370c      	adds	r7, #12
 8016e62:	46bd      	mov	sp, r7
 8016e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e68:	4770      	bx	lr

08016e6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016e6a:	b480      	push	{r7}
 8016e6c:	b083      	sub	sp, #12
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	2b04      	cmp	r3, #4
 8016e7c:	d106      	bne.n	8016e8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016e84:	b2da      	uxtb	r2, r3
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016e8c:	2300      	movs	r3, #0
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	370c      	adds	r7, #12
 8016e92:	46bd      	mov	sp, r7
 8016e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e98:	4770      	bx	lr

08016e9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016e9a:	b580      	push	{r7, lr}
 8016e9c:	b082      	sub	sp, #8
 8016e9e:	af00      	add	r7, sp, #0
 8016ea0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d101      	bne.n	8016eb0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016eac:	2303      	movs	r3, #3
 8016eae:	e012      	b.n	8016ed6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016eb6:	b2db      	uxtb	r3, r3
 8016eb8:	2b03      	cmp	r3, #3
 8016eba:	d10b      	bne.n	8016ed4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ec2:	69db      	ldr	r3, [r3, #28]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d005      	beq.n	8016ed4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ece:	69db      	ldr	r3, [r3, #28]
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ed4:	2300      	movs	r3, #0
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3708      	adds	r7, #8
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}

08016ede <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016ede:	b580      	push	{r7, lr}
 8016ee0:	b082      	sub	sp, #8
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	6078      	str	r0, [r7, #4]
 8016ee6:	460b      	mov	r3, r1
 8016ee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d101      	bne.n	8016ef8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016ef4:	2303      	movs	r3, #3
 8016ef6:	e014      	b.n	8016f22 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	2b03      	cmp	r3, #3
 8016f02:	d10d      	bne.n	8016f20 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f0a:	6a1b      	ldr	r3, [r3, #32]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d007      	beq.n	8016f20 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f16:	6a1b      	ldr	r3, [r3, #32]
 8016f18:	78fa      	ldrb	r2, [r7, #3]
 8016f1a:	4611      	mov	r1, r2
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016f20:	2300      	movs	r3, #0
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3708      	adds	r7, #8
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}

08016f2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016f2a:	b580      	push	{r7, lr}
 8016f2c:	b082      	sub	sp, #8
 8016f2e:	af00      	add	r7, sp, #0
 8016f30:	6078      	str	r0, [r7, #4]
 8016f32:	460b      	mov	r3, r1
 8016f34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d101      	bne.n	8016f44 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016f40:	2303      	movs	r3, #3
 8016f42:	e014      	b.n	8016f6e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f4a:	b2db      	uxtb	r3, r3
 8016f4c:	2b03      	cmp	r3, #3
 8016f4e:	d10d      	bne.n	8016f6c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d007      	beq.n	8016f6c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f64:	78fa      	ldrb	r2, [r7, #3]
 8016f66:	4611      	mov	r1, r2
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016f6c:	2300      	movs	r3, #0
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3708      	adds	r7, #8
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}

08016f76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016f76:	b480      	push	{r7}
 8016f78:	b083      	sub	sp, #12
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016f7e:	2300      	movs	r3, #0
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	370c      	adds	r7, #12
 8016f84:	46bd      	mov	sp, r7
 8016f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8a:	4770      	bx	lr

08016f8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2201      	movs	r2, #1
 8016f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d009      	beq.n	8016fba <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	6852      	ldr	r2, [r2, #4]
 8016fb2:	b2d2      	uxtb	r2, r2
 8016fb4:	4611      	mov	r1, r2
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	4798      	blx	r3
  }

  return USBD_OK;
 8016fba:	2300      	movs	r3, #0
}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	3708      	adds	r7, #8
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}

08016fc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b087      	sub	sp, #28
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016fd0:	697b      	ldr	r3, [r7, #20]
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	3301      	adds	r3, #1
 8016fda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016fe2:	8a3b      	ldrh	r3, [r7, #16]
 8016fe4:	021b      	lsls	r3, r3, #8
 8016fe6:	b21a      	sxth	r2, r3
 8016fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016fec:	4313      	orrs	r3, r2
 8016fee:	b21b      	sxth	r3, r3
 8016ff0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016ff2:	89fb      	ldrh	r3, [r7, #14]
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	371c      	adds	r7, #28
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffe:	4770      	bx	lr

08017000 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b084      	sub	sp, #16
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
 8017008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801700a:	2300      	movs	r3, #0
 801700c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017016:	2b40      	cmp	r3, #64	; 0x40
 8017018:	d005      	beq.n	8017026 <USBD_StdDevReq+0x26>
 801701a:	2b40      	cmp	r3, #64	; 0x40
 801701c:	d853      	bhi.n	80170c6 <USBD_StdDevReq+0xc6>
 801701e:	2b00      	cmp	r3, #0
 8017020:	d00b      	beq.n	801703a <USBD_StdDevReq+0x3a>
 8017022:	2b20      	cmp	r3, #32
 8017024:	d14f      	bne.n	80170c6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801702c:	689b      	ldr	r3, [r3, #8]
 801702e:	6839      	ldr	r1, [r7, #0]
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	4798      	blx	r3
 8017034:	4603      	mov	r3, r0
 8017036:	73fb      	strb	r3, [r7, #15]
      break;
 8017038:	e04a      	b.n	80170d0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801703a:	683b      	ldr	r3, [r7, #0]
 801703c:	785b      	ldrb	r3, [r3, #1]
 801703e:	2b09      	cmp	r3, #9
 8017040:	d83b      	bhi.n	80170ba <USBD_StdDevReq+0xba>
 8017042:	a201      	add	r2, pc, #4	; (adr r2, 8017048 <USBD_StdDevReq+0x48>)
 8017044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017048:	0801709d 	.word	0x0801709d
 801704c:	080170b1 	.word	0x080170b1
 8017050:	080170bb 	.word	0x080170bb
 8017054:	080170a7 	.word	0x080170a7
 8017058:	080170bb 	.word	0x080170bb
 801705c:	0801707b 	.word	0x0801707b
 8017060:	08017071 	.word	0x08017071
 8017064:	080170bb 	.word	0x080170bb
 8017068:	08017093 	.word	0x08017093
 801706c:	08017085 	.word	0x08017085
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017070:	6839      	ldr	r1, [r7, #0]
 8017072:	6878      	ldr	r0, [r7, #4]
 8017074:	f000 f9de 	bl	8017434 <USBD_GetDescriptor>
          break;
 8017078:	e024      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801707a:	6839      	ldr	r1, [r7, #0]
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f000 fb43 	bl	8017708 <USBD_SetAddress>
          break;
 8017082:	e01f      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017084:	6839      	ldr	r1, [r7, #0]
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f000 fb82 	bl	8017790 <USBD_SetConfig>
 801708c:	4603      	mov	r3, r0
 801708e:	73fb      	strb	r3, [r7, #15]
          break;
 8017090:	e018      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017092:	6839      	ldr	r1, [r7, #0]
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f000 fc21 	bl	80178dc <USBD_GetConfig>
          break;
 801709a:	e013      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801709c:	6839      	ldr	r1, [r7, #0]
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f000 fc52 	bl	8017948 <USBD_GetStatus>
          break;
 80170a4:	e00e      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80170a6:	6839      	ldr	r1, [r7, #0]
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f000 fc81 	bl	80179b0 <USBD_SetFeature>
          break;
 80170ae:	e009      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80170b0:	6839      	ldr	r1, [r7, #0]
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f000 fc90 	bl	80179d8 <USBD_ClrFeature>
          break;
 80170b8:	e004      	b.n	80170c4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80170ba:	6839      	ldr	r1, [r7, #0]
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f000 fce7 	bl	8017a90 <USBD_CtlError>
          break;
 80170c2:	bf00      	nop
      }
      break;
 80170c4:	e004      	b.n	80170d0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80170c6:	6839      	ldr	r1, [r7, #0]
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f000 fce1 	bl	8017a90 <USBD_CtlError>
      break;
 80170ce:	bf00      	nop
  }

  return ret;
 80170d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3710      	adds	r7, #16
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop

080170dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b084      	sub	sp, #16
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80170e6:	2300      	movs	r3, #0
 80170e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80170ea:	683b      	ldr	r3, [r7, #0]
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80170f2:	2b40      	cmp	r3, #64	; 0x40
 80170f4:	d005      	beq.n	8017102 <USBD_StdItfReq+0x26>
 80170f6:	2b40      	cmp	r3, #64	; 0x40
 80170f8:	d82f      	bhi.n	801715a <USBD_StdItfReq+0x7e>
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d001      	beq.n	8017102 <USBD_StdItfReq+0x26>
 80170fe:	2b20      	cmp	r3, #32
 8017100:	d12b      	bne.n	801715a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017108:	b2db      	uxtb	r3, r3
 801710a:	3b01      	subs	r3, #1
 801710c:	2b02      	cmp	r3, #2
 801710e:	d81d      	bhi.n	801714c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	889b      	ldrh	r3, [r3, #4]
 8017114:	b2db      	uxtb	r3, r3
 8017116:	2b01      	cmp	r3, #1
 8017118:	d813      	bhi.n	8017142 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017120:	689b      	ldr	r3, [r3, #8]
 8017122:	6839      	ldr	r1, [r7, #0]
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	4798      	blx	r3
 8017128:	4603      	mov	r3, r0
 801712a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801712c:	683b      	ldr	r3, [r7, #0]
 801712e:	88db      	ldrh	r3, [r3, #6]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d110      	bne.n	8017156 <USBD_StdItfReq+0x7a>
 8017134:	7bfb      	ldrb	r3, [r7, #15]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d10d      	bne.n	8017156 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f000 fd73 	bl	8017c26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017140:	e009      	b.n	8017156 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8017142:	6839      	ldr	r1, [r7, #0]
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f000 fca3 	bl	8017a90 <USBD_CtlError>
          break;
 801714a:	e004      	b.n	8017156 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801714c:	6839      	ldr	r1, [r7, #0]
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 fc9e 	bl	8017a90 <USBD_CtlError>
          break;
 8017154:	e000      	b.n	8017158 <USBD_StdItfReq+0x7c>
          break;
 8017156:	bf00      	nop
      }
      break;
 8017158:	e004      	b.n	8017164 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801715a:	6839      	ldr	r1, [r7, #0]
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f000 fc97 	bl	8017a90 <USBD_CtlError>
      break;
 8017162:	bf00      	nop
  }

  return ret;
 8017164:	7bfb      	ldrb	r3, [r7, #15]
}
 8017166:	4618      	mov	r0, r3
 8017168:	3710      	adds	r7, #16
 801716a:	46bd      	mov	sp, r7
 801716c:	bd80      	pop	{r7, pc}

0801716e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801716e:	b580      	push	{r7, lr}
 8017170:	b084      	sub	sp, #16
 8017172:	af00      	add	r7, sp, #0
 8017174:	6078      	str	r0, [r7, #4]
 8017176:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017178:	2300      	movs	r3, #0
 801717a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	889b      	ldrh	r3, [r3, #4]
 8017180:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	781b      	ldrb	r3, [r3, #0]
 8017186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801718a:	2b40      	cmp	r3, #64	; 0x40
 801718c:	d007      	beq.n	801719e <USBD_StdEPReq+0x30>
 801718e:	2b40      	cmp	r3, #64	; 0x40
 8017190:	f200 8145 	bhi.w	801741e <USBD_StdEPReq+0x2b0>
 8017194:	2b00      	cmp	r3, #0
 8017196:	d00c      	beq.n	80171b2 <USBD_StdEPReq+0x44>
 8017198:	2b20      	cmp	r3, #32
 801719a:	f040 8140 	bne.w	801741e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171a4:	689b      	ldr	r3, [r3, #8]
 80171a6:	6839      	ldr	r1, [r7, #0]
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	4798      	blx	r3
 80171ac:	4603      	mov	r3, r0
 80171ae:	73fb      	strb	r3, [r7, #15]
      break;
 80171b0:	e13a      	b.n	8017428 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80171b2:	683b      	ldr	r3, [r7, #0]
 80171b4:	785b      	ldrb	r3, [r3, #1]
 80171b6:	2b03      	cmp	r3, #3
 80171b8:	d007      	beq.n	80171ca <USBD_StdEPReq+0x5c>
 80171ba:	2b03      	cmp	r3, #3
 80171bc:	f300 8129 	bgt.w	8017412 <USBD_StdEPReq+0x2a4>
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d07f      	beq.n	80172c4 <USBD_StdEPReq+0x156>
 80171c4:	2b01      	cmp	r3, #1
 80171c6:	d03c      	beq.n	8017242 <USBD_StdEPReq+0xd4>
 80171c8:	e123      	b.n	8017412 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	2b02      	cmp	r3, #2
 80171d4:	d002      	beq.n	80171dc <USBD_StdEPReq+0x6e>
 80171d6:	2b03      	cmp	r3, #3
 80171d8:	d016      	beq.n	8017208 <USBD_StdEPReq+0x9a>
 80171da:	e02c      	b.n	8017236 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80171dc:	7bbb      	ldrb	r3, [r7, #14]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d00d      	beq.n	80171fe <USBD_StdEPReq+0x90>
 80171e2:	7bbb      	ldrb	r3, [r7, #14]
 80171e4:	2b80      	cmp	r3, #128	; 0x80
 80171e6:	d00a      	beq.n	80171fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80171e8:	7bbb      	ldrb	r3, [r7, #14]
 80171ea:	4619      	mov	r1, r3
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f7fe fdd1 	bl	8015d94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80171f2:	2180      	movs	r1, #128	; 0x80
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f7fe fdcd 	bl	8015d94 <USBD_LL_StallEP>
 80171fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80171fc:	e020      	b.n	8017240 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80171fe:	6839      	ldr	r1, [r7, #0]
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f000 fc45 	bl	8017a90 <USBD_CtlError>
              break;
 8017206:	e01b      	b.n	8017240 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	885b      	ldrh	r3, [r3, #2]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d10e      	bne.n	801722e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017210:	7bbb      	ldrb	r3, [r7, #14]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d00b      	beq.n	801722e <USBD_StdEPReq+0xc0>
 8017216:	7bbb      	ldrb	r3, [r7, #14]
 8017218:	2b80      	cmp	r3, #128	; 0x80
 801721a:	d008      	beq.n	801722e <USBD_StdEPReq+0xc0>
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	88db      	ldrh	r3, [r3, #6]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d104      	bne.n	801722e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017224:	7bbb      	ldrb	r3, [r7, #14]
 8017226:	4619      	mov	r1, r3
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7fe fdb3 	bl	8015d94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 fcf9 	bl	8017c26 <USBD_CtlSendStatus>

              break;
 8017234:	e004      	b.n	8017240 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017236:	6839      	ldr	r1, [r7, #0]
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f000 fc29 	bl	8017a90 <USBD_CtlError>
              break;
 801723e:	bf00      	nop
          }
          break;
 8017240:	e0ec      	b.n	801741c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b02      	cmp	r3, #2
 801724c:	d002      	beq.n	8017254 <USBD_StdEPReq+0xe6>
 801724e:	2b03      	cmp	r3, #3
 8017250:	d016      	beq.n	8017280 <USBD_StdEPReq+0x112>
 8017252:	e030      	b.n	80172b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017254:	7bbb      	ldrb	r3, [r7, #14]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d00d      	beq.n	8017276 <USBD_StdEPReq+0x108>
 801725a:	7bbb      	ldrb	r3, [r7, #14]
 801725c:	2b80      	cmp	r3, #128	; 0x80
 801725e:	d00a      	beq.n	8017276 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017260:	7bbb      	ldrb	r3, [r7, #14]
 8017262:	4619      	mov	r1, r3
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f7fe fd95 	bl	8015d94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801726a:	2180      	movs	r1, #128	; 0x80
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f7fe fd91 	bl	8015d94 <USBD_LL_StallEP>
 8017272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017274:	e025      	b.n	80172c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8017276:	6839      	ldr	r1, [r7, #0]
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f000 fc09 	bl	8017a90 <USBD_CtlError>
              break;
 801727e:	e020      	b.n	80172c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	885b      	ldrh	r3, [r3, #2]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d11b      	bne.n	80172c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017288:	7bbb      	ldrb	r3, [r7, #14]
 801728a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801728e:	2b00      	cmp	r3, #0
 8017290:	d004      	beq.n	801729c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017292:	7bbb      	ldrb	r3, [r7, #14]
 8017294:	4619      	mov	r1, r3
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f7fe fd8f 	bl	8015dba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f000 fcc2 	bl	8017c26 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172a8:	689b      	ldr	r3, [r3, #8]
 80172aa:	6839      	ldr	r1, [r7, #0]
 80172ac:	6878      	ldr	r0, [r7, #4]
 80172ae:	4798      	blx	r3
 80172b0:	4603      	mov	r3, r0
 80172b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80172b4:	e004      	b.n	80172c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80172b6:	6839      	ldr	r1, [r7, #0]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f000 fbe9 	bl	8017a90 <USBD_CtlError>
              break;
 80172be:	e000      	b.n	80172c2 <USBD_StdEPReq+0x154>
              break;
 80172c0:	bf00      	nop
          }
          break;
 80172c2:	e0ab      	b.n	801741c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	d002      	beq.n	80172d6 <USBD_StdEPReq+0x168>
 80172d0:	2b03      	cmp	r3, #3
 80172d2:	d032      	beq.n	801733a <USBD_StdEPReq+0x1cc>
 80172d4:	e097      	b.n	8017406 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80172d6:	7bbb      	ldrb	r3, [r7, #14]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d007      	beq.n	80172ec <USBD_StdEPReq+0x17e>
 80172dc:	7bbb      	ldrb	r3, [r7, #14]
 80172de:	2b80      	cmp	r3, #128	; 0x80
 80172e0:	d004      	beq.n	80172ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80172e2:	6839      	ldr	r1, [r7, #0]
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f000 fbd3 	bl	8017a90 <USBD_CtlError>
                break;
 80172ea:	e091      	b.n	8017410 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80172ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	da0b      	bge.n	801730c <USBD_StdEPReq+0x19e>
 80172f4:	7bbb      	ldrb	r3, [r7, #14]
 80172f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80172fa:	4613      	mov	r3, r2
 80172fc:	009b      	lsls	r3, r3, #2
 80172fe:	4413      	add	r3, r2
 8017300:	009b      	lsls	r3, r3, #2
 8017302:	3310      	adds	r3, #16
 8017304:	687a      	ldr	r2, [r7, #4]
 8017306:	4413      	add	r3, r2
 8017308:	3304      	adds	r3, #4
 801730a:	e00b      	b.n	8017324 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801730c:	7bbb      	ldrb	r3, [r7, #14]
 801730e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017312:	4613      	mov	r3, r2
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	4413      	add	r3, r2
 8017318:	009b      	lsls	r3, r3, #2
 801731a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	4413      	add	r3, r2
 8017322:	3304      	adds	r3, #4
 8017324:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017326:	68bb      	ldr	r3, [r7, #8]
 8017328:	2200      	movs	r2, #0
 801732a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	2202      	movs	r2, #2
 8017330:	4619      	mov	r1, r3
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f000 fc1d 	bl	8017b72 <USBD_CtlSendData>
              break;
 8017338:	e06a      	b.n	8017410 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801733a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801733e:	2b00      	cmp	r3, #0
 8017340:	da11      	bge.n	8017366 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017342:	7bbb      	ldrb	r3, [r7, #14]
 8017344:	f003 020f 	and.w	r2, r3, #15
 8017348:	6879      	ldr	r1, [r7, #4]
 801734a:	4613      	mov	r3, r2
 801734c:	009b      	lsls	r3, r3, #2
 801734e:	4413      	add	r3, r2
 8017350:	009b      	lsls	r3, r3, #2
 8017352:	440b      	add	r3, r1
 8017354:	3324      	adds	r3, #36	; 0x24
 8017356:	881b      	ldrh	r3, [r3, #0]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d117      	bne.n	801738c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801735c:	6839      	ldr	r1, [r7, #0]
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 fb96 	bl	8017a90 <USBD_CtlError>
                  break;
 8017364:	e054      	b.n	8017410 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017366:	7bbb      	ldrb	r3, [r7, #14]
 8017368:	f003 020f 	and.w	r2, r3, #15
 801736c:	6879      	ldr	r1, [r7, #4]
 801736e:	4613      	mov	r3, r2
 8017370:	009b      	lsls	r3, r3, #2
 8017372:	4413      	add	r3, r2
 8017374:	009b      	lsls	r3, r3, #2
 8017376:	440b      	add	r3, r1
 8017378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801737c:	881b      	ldrh	r3, [r3, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d104      	bne.n	801738c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017382:	6839      	ldr	r1, [r7, #0]
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f000 fb83 	bl	8017a90 <USBD_CtlError>
                  break;
 801738a:	e041      	b.n	8017410 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801738c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017390:	2b00      	cmp	r3, #0
 8017392:	da0b      	bge.n	80173ac <USBD_StdEPReq+0x23e>
 8017394:	7bbb      	ldrb	r3, [r7, #14]
 8017396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801739a:	4613      	mov	r3, r2
 801739c:	009b      	lsls	r3, r3, #2
 801739e:	4413      	add	r3, r2
 80173a0:	009b      	lsls	r3, r3, #2
 80173a2:	3310      	adds	r3, #16
 80173a4:	687a      	ldr	r2, [r7, #4]
 80173a6:	4413      	add	r3, r2
 80173a8:	3304      	adds	r3, #4
 80173aa:	e00b      	b.n	80173c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80173ac:	7bbb      	ldrb	r3, [r7, #14]
 80173ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80173b2:	4613      	mov	r3, r2
 80173b4:	009b      	lsls	r3, r3, #2
 80173b6:	4413      	add	r3, r2
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	4413      	add	r3, r2
 80173c2:	3304      	adds	r3, #4
 80173c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80173c6:	7bbb      	ldrb	r3, [r7, #14]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d002      	beq.n	80173d2 <USBD_StdEPReq+0x264>
 80173cc:	7bbb      	ldrb	r3, [r7, #14]
 80173ce:	2b80      	cmp	r3, #128	; 0x80
 80173d0:	d103      	bne.n	80173da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	2200      	movs	r2, #0
 80173d6:	601a      	str	r2, [r3, #0]
 80173d8:	e00e      	b.n	80173f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80173da:	7bbb      	ldrb	r3, [r7, #14]
 80173dc:	4619      	mov	r1, r3
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f7fe fcfe 	bl	8015de0 <USBD_LL_IsStallEP>
 80173e4:	4603      	mov	r3, r0
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d003      	beq.n	80173f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	2201      	movs	r2, #1
 80173ee:	601a      	str	r2, [r3, #0]
 80173f0:	e002      	b.n	80173f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	2200      	movs	r2, #0
 80173f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	2202      	movs	r2, #2
 80173fc:	4619      	mov	r1, r3
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f000 fbb7 	bl	8017b72 <USBD_CtlSendData>
              break;
 8017404:	e004      	b.n	8017410 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8017406:	6839      	ldr	r1, [r7, #0]
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f000 fb41 	bl	8017a90 <USBD_CtlError>
              break;
 801740e:	bf00      	nop
          }
          break;
 8017410:	e004      	b.n	801741c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8017412:	6839      	ldr	r1, [r7, #0]
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	f000 fb3b 	bl	8017a90 <USBD_CtlError>
          break;
 801741a:	bf00      	nop
      }
      break;
 801741c:	e004      	b.n	8017428 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801741e:	6839      	ldr	r1, [r7, #0]
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f000 fb35 	bl	8017a90 <USBD_CtlError>
      break;
 8017426:	bf00      	nop
  }

  return ret;
 8017428:	7bfb      	ldrb	r3, [r7, #15]
}
 801742a:	4618      	mov	r0, r3
 801742c:	3710      	adds	r7, #16
 801742e:	46bd      	mov	sp, r7
 8017430:	bd80      	pop	{r7, pc}
	...

08017434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b084      	sub	sp, #16
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
 801743c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801743e:	2300      	movs	r3, #0
 8017440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017442:	2300      	movs	r3, #0
 8017444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017446:	2300      	movs	r3, #0
 8017448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801744a:	683b      	ldr	r3, [r7, #0]
 801744c:	885b      	ldrh	r3, [r3, #2]
 801744e:	0a1b      	lsrs	r3, r3, #8
 8017450:	b29b      	uxth	r3, r3
 8017452:	3b01      	subs	r3, #1
 8017454:	2b06      	cmp	r3, #6
 8017456:	f200 8128 	bhi.w	80176aa <USBD_GetDescriptor+0x276>
 801745a:	a201      	add	r2, pc, #4	; (adr r2, 8017460 <USBD_GetDescriptor+0x2c>)
 801745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017460:	0801747d 	.word	0x0801747d
 8017464:	08017495 	.word	0x08017495
 8017468:	080174d5 	.word	0x080174d5
 801746c:	080176ab 	.word	0x080176ab
 8017470:	080176ab 	.word	0x080176ab
 8017474:	0801764b 	.word	0x0801764b
 8017478:	08017677 	.word	0x08017677
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	687a      	ldr	r2, [r7, #4]
 8017486:	7c12      	ldrb	r2, [r2, #16]
 8017488:	f107 0108 	add.w	r1, r7, #8
 801748c:	4610      	mov	r0, r2
 801748e:	4798      	blx	r3
 8017490:	60f8      	str	r0, [r7, #12]
      break;
 8017492:	e112      	b.n	80176ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	7c1b      	ldrb	r3, [r3, #16]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d10d      	bne.n	80174b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174a4:	f107 0208 	add.w	r2, r7, #8
 80174a8:	4610      	mov	r0, r2
 80174aa:	4798      	blx	r3
 80174ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	3301      	adds	r3, #1
 80174b2:	2202      	movs	r2, #2
 80174b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80174b6:	e100      	b.n	80176ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174c0:	f107 0208 	add.w	r2, r7, #8
 80174c4:	4610      	mov	r0, r2
 80174c6:	4798      	blx	r3
 80174c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	3301      	adds	r3, #1
 80174ce:	2202      	movs	r2, #2
 80174d0:	701a      	strb	r2, [r3, #0]
      break;
 80174d2:	e0f2      	b.n	80176ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	885b      	ldrh	r3, [r3, #2]
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	2b05      	cmp	r3, #5
 80174dc:	f200 80ac 	bhi.w	8017638 <USBD_GetDescriptor+0x204>
 80174e0:	a201      	add	r2, pc, #4	; (adr r2, 80174e8 <USBD_GetDescriptor+0xb4>)
 80174e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174e6:	bf00      	nop
 80174e8:	08017501 	.word	0x08017501
 80174ec:	08017535 	.word	0x08017535
 80174f0:	08017569 	.word	0x08017569
 80174f4:	0801759d 	.word	0x0801759d
 80174f8:	080175d1 	.word	0x080175d1
 80174fc:	08017605 	.word	0x08017605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017506:	685b      	ldr	r3, [r3, #4]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d00b      	beq.n	8017524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	7c12      	ldrb	r2, [r2, #16]
 8017518:	f107 0108 	add.w	r1, r7, #8
 801751c:	4610      	mov	r0, r2
 801751e:	4798      	blx	r3
 8017520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017522:	e091      	b.n	8017648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017524:	6839      	ldr	r1, [r7, #0]
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f000 fab2 	bl	8017a90 <USBD_CtlError>
            err++;
 801752c:	7afb      	ldrb	r3, [r7, #11]
 801752e:	3301      	adds	r3, #1
 8017530:	72fb      	strb	r3, [r7, #11]
          break;
 8017532:	e089      	b.n	8017648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801753a:	689b      	ldr	r3, [r3, #8]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d00b      	beq.n	8017558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017546:	689b      	ldr	r3, [r3, #8]
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	7c12      	ldrb	r2, [r2, #16]
 801754c:	f107 0108 	add.w	r1, r7, #8
 8017550:	4610      	mov	r0, r2
 8017552:	4798      	blx	r3
 8017554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017556:	e077      	b.n	8017648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017558:	6839      	ldr	r1, [r7, #0]
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f000 fa98 	bl	8017a90 <USBD_CtlError>
            err++;
 8017560:	7afb      	ldrb	r3, [r7, #11]
 8017562:	3301      	adds	r3, #1
 8017564:	72fb      	strb	r3, [r7, #11]
          break;
 8017566:	e06f      	b.n	8017648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801756e:	68db      	ldr	r3, [r3, #12]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d00b      	beq.n	801758c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801757a:	68db      	ldr	r3, [r3, #12]
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	7c12      	ldrb	r2, [r2, #16]
 8017580:	f107 0108 	add.w	r1, r7, #8
 8017584:	4610      	mov	r0, r2
 8017586:	4798      	blx	r3
 8017588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801758a:	e05d      	b.n	8017648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801758c:	6839      	ldr	r1, [r7, #0]
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f000 fa7e 	bl	8017a90 <USBD_CtlError>
            err++;
 8017594:	7afb      	ldrb	r3, [r7, #11]
 8017596:	3301      	adds	r3, #1
 8017598:	72fb      	strb	r3, [r7, #11]
          break;
 801759a:	e055      	b.n	8017648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175a2:	691b      	ldr	r3, [r3, #16]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d00b      	beq.n	80175c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175ae:	691b      	ldr	r3, [r3, #16]
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	7c12      	ldrb	r2, [r2, #16]
 80175b4:	f107 0108 	add.w	r1, r7, #8
 80175b8:	4610      	mov	r0, r2
 80175ba:	4798      	blx	r3
 80175bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175be:	e043      	b.n	8017648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80175c0:	6839      	ldr	r1, [r7, #0]
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f000 fa64 	bl	8017a90 <USBD_CtlError>
            err++;
 80175c8:	7afb      	ldrb	r3, [r7, #11]
 80175ca:	3301      	adds	r3, #1
 80175cc:	72fb      	strb	r3, [r7, #11]
          break;
 80175ce:	e03b      	b.n	8017648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175d6:	695b      	ldr	r3, [r3, #20]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d00b      	beq.n	80175f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175e2:	695b      	ldr	r3, [r3, #20]
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	7c12      	ldrb	r2, [r2, #16]
 80175e8:	f107 0108 	add.w	r1, r7, #8
 80175ec:	4610      	mov	r0, r2
 80175ee:	4798      	blx	r3
 80175f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175f2:	e029      	b.n	8017648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80175f4:	6839      	ldr	r1, [r7, #0]
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f000 fa4a 	bl	8017a90 <USBD_CtlError>
            err++;
 80175fc:	7afb      	ldrb	r3, [r7, #11]
 80175fe:	3301      	adds	r3, #1
 8017600:	72fb      	strb	r3, [r7, #11]
          break;
 8017602:	e021      	b.n	8017648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801760a:	699b      	ldr	r3, [r3, #24]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d00b      	beq.n	8017628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017616:	699b      	ldr	r3, [r3, #24]
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	7c12      	ldrb	r2, [r2, #16]
 801761c:	f107 0108 	add.w	r1, r7, #8
 8017620:	4610      	mov	r0, r2
 8017622:	4798      	blx	r3
 8017624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017626:	e00f      	b.n	8017648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017628:	6839      	ldr	r1, [r7, #0]
 801762a:	6878      	ldr	r0, [r7, #4]
 801762c:	f000 fa30 	bl	8017a90 <USBD_CtlError>
            err++;
 8017630:	7afb      	ldrb	r3, [r7, #11]
 8017632:	3301      	adds	r3, #1
 8017634:	72fb      	strb	r3, [r7, #11]
          break;
 8017636:	e007      	b.n	8017648 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017638:	6839      	ldr	r1, [r7, #0]
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f000 fa28 	bl	8017a90 <USBD_CtlError>
          err++;
 8017640:	7afb      	ldrb	r3, [r7, #11]
 8017642:	3301      	adds	r3, #1
 8017644:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017646:	bf00      	nop
      }
      break;
 8017648:	e037      	b.n	80176ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	7c1b      	ldrb	r3, [r3, #16]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d109      	bne.n	8017666 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801765a:	f107 0208 	add.w	r2, r7, #8
 801765e:	4610      	mov	r0, r2
 8017660:	4798      	blx	r3
 8017662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017664:	e029      	b.n	80176ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017666:	6839      	ldr	r1, [r7, #0]
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f000 fa11 	bl	8017a90 <USBD_CtlError>
        err++;
 801766e:	7afb      	ldrb	r3, [r7, #11]
 8017670:	3301      	adds	r3, #1
 8017672:	72fb      	strb	r3, [r7, #11]
      break;
 8017674:	e021      	b.n	80176ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	7c1b      	ldrb	r3, [r3, #16]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d10d      	bne.n	801769a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017686:	f107 0208 	add.w	r2, r7, #8
 801768a:	4610      	mov	r0, r2
 801768c:	4798      	blx	r3
 801768e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	3301      	adds	r3, #1
 8017694:	2207      	movs	r2, #7
 8017696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017698:	e00f      	b.n	80176ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801769a:	6839      	ldr	r1, [r7, #0]
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f000 f9f7 	bl	8017a90 <USBD_CtlError>
        err++;
 80176a2:	7afb      	ldrb	r3, [r7, #11]
 80176a4:	3301      	adds	r3, #1
 80176a6:	72fb      	strb	r3, [r7, #11]
      break;
 80176a8:	e007      	b.n	80176ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80176aa:	6839      	ldr	r1, [r7, #0]
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f000 f9ef 	bl	8017a90 <USBD_CtlError>
      err++;
 80176b2:	7afb      	ldrb	r3, [r7, #11]
 80176b4:	3301      	adds	r3, #1
 80176b6:	72fb      	strb	r3, [r7, #11]
      break;
 80176b8:	bf00      	nop
  }

  if (err != 0U)
 80176ba:	7afb      	ldrb	r3, [r7, #11]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d11e      	bne.n	80176fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	88db      	ldrh	r3, [r3, #6]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d016      	beq.n	80176f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80176c8:	893b      	ldrh	r3, [r7, #8]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d00e      	beq.n	80176ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	88da      	ldrh	r2, [r3, #6]
 80176d2:	893b      	ldrh	r3, [r7, #8]
 80176d4:	4293      	cmp	r3, r2
 80176d6:	bf28      	it	cs
 80176d8:	4613      	movcs	r3, r2
 80176da:	b29b      	uxth	r3, r3
 80176dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80176de:	893b      	ldrh	r3, [r7, #8]
 80176e0:	461a      	mov	r2, r3
 80176e2:	68f9      	ldr	r1, [r7, #12]
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f000 fa44 	bl	8017b72 <USBD_CtlSendData>
 80176ea:	e009      	b.n	8017700 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80176ec:	6839      	ldr	r1, [r7, #0]
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	f000 f9ce 	bl	8017a90 <USBD_CtlError>
 80176f4:	e004      	b.n	8017700 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f000 fa95 	bl	8017c26 <USBD_CtlSendStatus>
 80176fc:	e000      	b.n	8017700 <USBD_GetDescriptor+0x2cc>
    return;
 80176fe:	bf00      	nop
  }
}
 8017700:	3710      	adds	r7, #16
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}
 8017706:	bf00      	nop

08017708 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	889b      	ldrh	r3, [r3, #4]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d131      	bne.n	801777e <USBD_SetAddress+0x76>
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	88db      	ldrh	r3, [r3, #6]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d12d      	bne.n	801777e <USBD_SetAddress+0x76>
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	885b      	ldrh	r3, [r3, #2]
 8017726:	2b7f      	cmp	r3, #127	; 0x7f
 8017728:	d829      	bhi.n	801777e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	885b      	ldrh	r3, [r3, #2]
 801772e:	b2db      	uxtb	r3, r3
 8017730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801773c:	b2db      	uxtb	r3, r3
 801773e:	2b03      	cmp	r3, #3
 8017740:	d104      	bne.n	801774c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017742:	6839      	ldr	r1, [r7, #0]
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f000 f9a3 	bl	8017a90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801774a:	e01d      	b.n	8017788 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	7bfa      	ldrb	r2, [r7, #15]
 8017750:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017754:	7bfb      	ldrb	r3, [r7, #15]
 8017756:	4619      	mov	r1, r3
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f7fe fb6d 	bl	8015e38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f000 fa61 	bl	8017c26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017764:	7bfb      	ldrb	r3, [r7, #15]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d004      	beq.n	8017774 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2202      	movs	r2, #2
 801776e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017772:	e009      	b.n	8017788 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2201      	movs	r2, #1
 8017778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801777c:	e004      	b.n	8017788 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801777e:	6839      	ldr	r1, [r7, #0]
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f000 f985 	bl	8017a90 <USBD_CtlError>
  }
}
 8017786:	bf00      	nop
 8017788:	bf00      	nop
 801778a:	3710      	adds	r7, #16
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}

08017790 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b084      	sub	sp, #16
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801779a:	2300      	movs	r3, #0
 801779c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	885b      	ldrh	r3, [r3, #2]
 80177a2:	b2da      	uxtb	r2, r3
 80177a4:	4b4c      	ldr	r3, [pc, #304]	; (80178d8 <USBD_SetConfig+0x148>)
 80177a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80177a8:	4b4b      	ldr	r3, [pc, #300]	; (80178d8 <USBD_SetConfig+0x148>)
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d905      	bls.n	80177bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80177b0:	6839      	ldr	r1, [r7, #0]
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 f96c 	bl	8017a90 <USBD_CtlError>
    return USBD_FAIL;
 80177b8:	2303      	movs	r3, #3
 80177ba:	e088      	b.n	80178ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	2b02      	cmp	r3, #2
 80177c6:	d002      	beq.n	80177ce <USBD_SetConfig+0x3e>
 80177c8:	2b03      	cmp	r3, #3
 80177ca:	d025      	beq.n	8017818 <USBD_SetConfig+0x88>
 80177cc:	e071      	b.n	80178b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80177ce:	4b42      	ldr	r3, [pc, #264]	; (80178d8 <USBD_SetConfig+0x148>)
 80177d0:	781b      	ldrb	r3, [r3, #0]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d01c      	beq.n	8017810 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80177d6:	4b40      	ldr	r3, [pc, #256]	; (80178d8 <USBD_SetConfig+0x148>)
 80177d8:	781b      	ldrb	r3, [r3, #0]
 80177da:	461a      	mov	r2, r3
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80177e0:	4b3d      	ldr	r3, [pc, #244]	; (80178d8 <USBD_SetConfig+0x148>)
 80177e2:	781b      	ldrb	r3, [r3, #0]
 80177e4:	4619      	mov	r1, r3
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f7ff f949 	bl	8016a7e <USBD_SetClassConfig>
 80177ec:	4603      	mov	r3, r0
 80177ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80177f0:	7bfb      	ldrb	r3, [r7, #15]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d004      	beq.n	8017800 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80177f6:	6839      	ldr	r1, [r7, #0]
 80177f8:	6878      	ldr	r0, [r7, #4]
 80177fa:	f000 f949 	bl	8017a90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80177fe:	e065      	b.n	80178cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f000 fa10 	bl	8017c26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2203      	movs	r2, #3
 801780a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801780e:	e05d      	b.n	80178cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017810:	6878      	ldr	r0, [r7, #4]
 8017812:	f000 fa08 	bl	8017c26 <USBD_CtlSendStatus>
      break;
 8017816:	e059      	b.n	80178cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017818:	4b2f      	ldr	r3, [pc, #188]	; (80178d8 <USBD_SetConfig+0x148>)
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d112      	bne.n	8017846 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2202      	movs	r2, #2
 8017824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017828:	4b2b      	ldr	r3, [pc, #172]	; (80178d8 <USBD_SetConfig+0x148>)
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	461a      	mov	r2, r3
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017832:	4b29      	ldr	r3, [pc, #164]	; (80178d8 <USBD_SetConfig+0x148>)
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	4619      	mov	r1, r3
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f7ff f93c 	bl	8016ab6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f000 f9f1 	bl	8017c26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017844:	e042      	b.n	80178cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017846:	4b24      	ldr	r3, [pc, #144]	; (80178d8 <USBD_SetConfig+0x148>)
 8017848:	781b      	ldrb	r3, [r3, #0]
 801784a:	461a      	mov	r2, r3
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	685b      	ldr	r3, [r3, #4]
 8017850:	429a      	cmp	r2, r3
 8017852:	d02a      	beq.n	80178aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	685b      	ldr	r3, [r3, #4]
 8017858:	b2db      	uxtb	r3, r3
 801785a:	4619      	mov	r1, r3
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	f7ff f92a 	bl	8016ab6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017862:	4b1d      	ldr	r3, [pc, #116]	; (80178d8 <USBD_SetConfig+0x148>)
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	461a      	mov	r2, r3
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801786c:	4b1a      	ldr	r3, [pc, #104]	; (80178d8 <USBD_SetConfig+0x148>)
 801786e:	781b      	ldrb	r3, [r3, #0]
 8017870:	4619      	mov	r1, r3
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f7ff f903 	bl	8016a7e <USBD_SetClassConfig>
 8017878:	4603      	mov	r3, r0
 801787a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801787c:	7bfb      	ldrb	r3, [r7, #15]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d00f      	beq.n	80178a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8017882:	6839      	ldr	r1, [r7, #0]
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f000 f903 	bl	8017a90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	b2db      	uxtb	r3, r3
 8017890:	4619      	mov	r1, r3
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff f90f 	bl	8016ab6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2202      	movs	r2, #2
 801789c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80178a0:	e014      	b.n	80178cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f000 f9bf 	bl	8017c26 <USBD_CtlSendStatus>
      break;
 80178a8:	e010      	b.n	80178cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f000 f9bb 	bl	8017c26 <USBD_CtlSendStatus>
      break;
 80178b0:	e00c      	b.n	80178cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80178b2:	6839      	ldr	r1, [r7, #0]
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f000 f8eb 	bl	8017a90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80178ba:	4b07      	ldr	r3, [pc, #28]	; (80178d8 <USBD_SetConfig+0x148>)
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	4619      	mov	r1, r3
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f7ff f8f8 	bl	8016ab6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80178c6:	2303      	movs	r3, #3
 80178c8:	73fb      	strb	r3, [r7, #15]
      break;
 80178ca:	bf00      	nop
  }

  return ret;
 80178cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3710      	adds	r7, #16
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}
 80178d6:	bf00      	nop
 80178d8:	200026b8 	.word	0x200026b8

080178dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80178e6:	683b      	ldr	r3, [r7, #0]
 80178e8:	88db      	ldrh	r3, [r3, #6]
 80178ea:	2b01      	cmp	r3, #1
 80178ec:	d004      	beq.n	80178f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80178ee:	6839      	ldr	r1, [r7, #0]
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f000 f8cd 	bl	8017a90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80178f6:	e023      	b.n	8017940 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	2b02      	cmp	r3, #2
 8017902:	dc02      	bgt.n	801790a <USBD_GetConfig+0x2e>
 8017904:	2b00      	cmp	r3, #0
 8017906:	dc03      	bgt.n	8017910 <USBD_GetConfig+0x34>
 8017908:	e015      	b.n	8017936 <USBD_GetConfig+0x5a>
 801790a:	2b03      	cmp	r3, #3
 801790c:	d00b      	beq.n	8017926 <USBD_GetConfig+0x4a>
 801790e:	e012      	b.n	8017936 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2200      	movs	r2, #0
 8017914:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	3308      	adds	r3, #8
 801791a:	2201      	movs	r2, #1
 801791c:	4619      	mov	r1, r3
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f000 f927 	bl	8017b72 <USBD_CtlSendData>
        break;
 8017924:	e00c      	b.n	8017940 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	3304      	adds	r3, #4
 801792a:	2201      	movs	r2, #1
 801792c:	4619      	mov	r1, r3
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f000 f91f 	bl	8017b72 <USBD_CtlSendData>
        break;
 8017934:	e004      	b.n	8017940 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017936:	6839      	ldr	r1, [r7, #0]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 f8a9 	bl	8017a90 <USBD_CtlError>
        break;
 801793e:	bf00      	nop
}
 8017940:	bf00      	nop
 8017942:	3708      	adds	r7, #8
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}

08017948 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b082      	sub	sp, #8
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017958:	b2db      	uxtb	r3, r3
 801795a:	3b01      	subs	r3, #1
 801795c:	2b02      	cmp	r3, #2
 801795e:	d81e      	bhi.n	801799e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	88db      	ldrh	r3, [r3, #6]
 8017964:	2b02      	cmp	r3, #2
 8017966:	d004      	beq.n	8017972 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017968:	6839      	ldr	r1, [r7, #0]
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f000 f890 	bl	8017a90 <USBD_CtlError>
        break;
 8017970:	e01a      	b.n	80179a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2201      	movs	r2, #1
 8017976:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801797e:	2b00      	cmp	r3, #0
 8017980:	d005      	beq.n	801798e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	f043 0202 	orr.w	r2, r3, #2
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	330c      	adds	r3, #12
 8017992:	2202      	movs	r2, #2
 8017994:	4619      	mov	r1, r3
 8017996:	6878      	ldr	r0, [r7, #4]
 8017998:	f000 f8eb 	bl	8017b72 <USBD_CtlSendData>
      break;
 801799c:	e004      	b.n	80179a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801799e:	6839      	ldr	r1, [r7, #0]
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f000 f875 	bl	8017a90 <USBD_CtlError>
      break;
 80179a6:	bf00      	nop
  }
}
 80179a8:	bf00      	nop
 80179aa:	3708      	adds	r7, #8
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}

080179b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b082      	sub	sp, #8
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	885b      	ldrh	r3, [r3, #2]
 80179be:	2b01      	cmp	r3, #1
 80179c0:	d106      	bne.n	80179d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2201      	movs	r2, #1
 80179c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	f000 f92b 	bl	8017c26 <USBD_CtlSendStatus>
  }
}
 80179d0:	bf00      	nop
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80179e8:	b2db      	uxtb	r3, r3
 80179ea:	3b01      	subs	r3, #1
 80179ec:	2b02      	cmp	r3, #2
 80179ee:	d80b      	bhi.n	8017a08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179f0:	683b      	ldr	r3, [r7, #0]
 80179f2:	885b      	ldrh	r3, [r3, #2]
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d10c      	bne.n	8017a12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2200      	movs	r2, #0
 80179fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f000 f910 	bl	8017c26 <USBD_CtlSendStatus>
      }
      break;
 8017a06:	e004      	b.n	8017a12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017a08:	6839      	ldr	r1, [r7, #0]
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	f000 f840 	bl	8017a90 <USBD_CtlError>
      break;
 8017a10:	e000      	b.n	8017a14 <USBD_ClrFeature+0x3c>
      break;
 8017a12:	bf00      	nop
  }
}
 8017a14:	bf00      	nop
 8017a16:	3708      	adds	r7, #8
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b084      	sub	sp, #16
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017a26:	683b      	ldr	r3, [r7, #0]
 8017a28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	781a      	ldrb	r2, [r3, #0]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	3301      	adds	r3, #1
 8017a36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	781a      	ldrb	r2, [r3, #0]
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	3301      	adds	r3, #1
 8017a44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017a46:	68f8      	ldr	r0, [r7, #12]
 8017a48:	f7ff fabc 	bl	8016fc4 <SWAPBYTE>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	461a      	mov	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	3301      	adds	r3, #1
 8017a58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017a60:	68f8      	ldr	r0, [r7, #12]
 8017a62:	f7ff faaf 	bl	8016fc4 <SWAPBYTE>
 8017a66:	4603      	mov	r3, r0
 8017a68:	461a      	mov	r2, r3
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	3301      	adds	r3, #1
 8017a72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	3301      	adds	r3, #1
 8017a78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017a7a:	68f8      	ldr	r0, [r7, #12]
 8017a7c:	f7ff faa2 	bl	8016fc4 <SWAPBYTE>
 8017a80:	4603      	mov	r3, r0
 8017a82:	461a      	mov	r2, r3
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	80da      	strh	r2, [r3, #6]
}
 8017a88:	bf00      	nop
 8017a8a:	3710      	adds	r7, #16
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017a9a:	2180      	movs	r1, #128	; 0x80
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f7fe f979 	bl	8015d94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017aa2:	2100      	movs	r1, #0
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7fe f975 	bl	8015d94 <USBD_LL_StallEP>
}
 8017aaa:	bf00      	nop
 8017aac:	3708      	adds	r7, #8
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}

08017ab2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017ab2:	b580      	push	{r7, lr}
 8017ab4:	b086      	sub	sp, #24
 8017ab6:	af00      	add	r7, sp, #0
 8017ab8:	60f8      	str	r0, [r7, #12]
 8017aba:	60b9      	str	r1, [r7, #8]
 8017abc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d036      	beq.n	8017b36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017acc:	6938      	ldr	r0, [r7, #16]
 8017ace:	f000 f836 	bl	8017b3e <USBD_GetLen>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	b29b      	uxth	r3, r3
 8017ad8:	005b      	lsls	r3, r3, #1
 8017ada:	b29a      	uxth	r2, r3
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017ae0:	7dfb      	ldrb	r3, [r7, #23]
 8017ae2:	68ba      	ldr	r2, [r7, #8]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	7812      	ldrb	r2, [r2, #0]
 8017aea:	701a      	strb	r2, [r3, #0]
  idx++;
 8017aec:	7dfb      	ldrb	r3, [r7, #23]
 8017aee:	3301      	adds	r3, #1
 8017af0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017af2:	7dfb      	ldrb	r3, [r7, #23]
 8017af4:	68ba      	ldr	r2, [r7, #8]
 8017af6:	4413      	add	r3, r2
 8017af8:	2203      	movs	r2, #3
 8017afa:	701a      	strb	r2, [r3, #0]
  idx++;
 8017afc:	7dfb      	ldrb	r3, [r7, #23]
 8017afe:	3301      	adds	r3, #1
 8017b00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017b02:	e013      	b.n	8017b2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017b04:	7dfb      	ldrb	r3, [r7, #23]
 8017b06:	68ba      	ldr	r2, [r7, #8]
 8017b08:	4413      	add	r3, r2
 8017b0a:	693a      	ldr	r2, [r7, #16]
 8017b0c:	7812      	ldrb	r2, [r2, #0]
 8017b0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	3301      	adds	r3, #1
 8017b14:	613b      	str	r3, [r7, #16]
    idx++;
 8017b16:	7dfb      	ldrb	r3, [r7, #23]
 8017b18:	3301      	adds	r3, #1
 8017b1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017b1c:	7dfb      	ldrb	r3, [r7, #23]
 8017b1e:	68ba      	ldr	r2, [r7, #8]
 8017b20:	4413      	add	r3, r2
 8017b22:	2200      	movs	r2, #0
 8017b24:	701a      	strb	r2, [r3, #0]
    idx++;
 8017b26:	7dfb      	ldrb	r3, [r7, #23]
 8017b28:	3301      	adds	r3, #1
 8017b2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017b2c:	693b      	ldr	r3, [r7, #16]
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d1e7      	bne.n	8017b04 <USBD_GetString+0x52>
 8017b34:	e000      	b.n	8017b38 <USBD_GetString+0x86>
    return;
 8017b36:	bf00      	nop
  }
}
 8017b38:	3718      	adds	r7, #24
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}

08017b3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017b3e:	b480      	push	{r7}
 8017b40:	b085      	sub	sp, #20
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017b46:	2300      	movs	r3, #0
 8017b48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017b4e:	e005      	b.n	8017b5c <USBD_GetLen+0x1e>
  {
    len++;
 8017b50:	7bfb      	ldrb	r3, [r7, #15]
 8017b52:	3301      	adds	r3, #1
 8017b54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	3301      	adds	r3, #1
 8017b5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d1f5      	bne.n	8017b50 <USBD_GetLen+0x12>
  }

  return len;
 8017b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b66:	4618      	mov	r0, r3
 8017b68:	3714      	adds	r7, #20
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b70:	4770      	bx	lr

08017b72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017b72:	b580      	push	{r7, lr}
 8017b74:	b084      	sub	sp, #16
 8017b76:	af00      	add	r7, sp, #0
 8017b78:	60f8      	str	r0, [r7, #12]
 8017b7a:	60b9      	str	r1, [r7, #8]
 8017b7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	2202      	movs	r2, #2
 8017b82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	687a      	ldr	r2, [r7, #4]
 8017b8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	687a      	ldr	r2, [r7, #4]
 8017b90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	68ba      	ldr	r2, [r7, #8]
 8017b96:	2100      	movs	r1, #0
 8017b98:	68f8      	ldr	r0, [r7, #12]
 8017b9a:	f7fe f960 	bl	8015e5e <USBD_LL_Transmit>

  return USBD_OK;
 8017b9e:	2300      	movs	r3, #0
}
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	3710      	adds	r7, #16
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}

08017ba8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b084      	sub	sp, #16
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	60b9      	str	r1, [r7, #8]
 8017bb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	68ba      	ldr	r2, [r7, #8]
 8017bb8:	2100      	movs	r1, #0
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	f7fe f94f 	bl	8015e5e <USBD_LL_Transmit>

  return USBD_OK;
 8017bc0:	2300      	movs	r3, #0
}
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3710      	adds	r7, #16
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	bd80      	pop	{r7, pc}

08017bca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017bca:	b580      	push	{r7, lr}
 8017bcc:	b084      	sub	sp, #16
 8017bce:	af00      	add	r7, sp, #0
 8017bd0:	60f8      	str	r0, [r7, #12]
 8017bd2:	60b9      	str	r1, [r7, #8]
 8017bd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2203      	movs	r2, #3
 8017bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	687a      	ldr	r2, [r7, #4]
 8017be2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	68ba      	ldr	r2, [r7, #8]
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	68f8      	ldr	r0, [r7, #12]
 8017bf6:	f7fe f947 	bl	8015e88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017bfa:	2300      	movs	r3, #0
}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	3710      	adds	r7, #16
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}

08017c04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b084      	sub	sp, #16
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	68ba      	ldr	r2, [r7, #8]
 8017c14:	2100      	movs	r1, #0
 8017c16:	68f8      	ldr	r0, [r7, #12]
 8017c18:	f7fe f936 	bl	8015e88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c1c:	2300      	movs	r3, #0
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b082      	sub	sp, #8
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2204      	movs	r2, #4
 8017c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017c36:	2300      	movs	r3, #0
 8017c38:	2200      	movs	r2, #0
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	6878      	ldr	r0, [r7, #4]
 8017c3e:	f7fe f90e 	bl	8015e5e <USBD_LL_Transmit>

  return USBD_OK;
 8017c42:	2300      	movs	r3, #0
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3708      	adds	r7, #8
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}

08017c4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b082      	sub	sp, #8
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	2205      	movs	r2, #5
 8017c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	2200      	movs	r2, #0
 8017c60:	2100      	movs	r1, #0
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7fe f910 	bl	8015e88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c68:	2300      	movs	r3, #0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
	...

08017c74 <malloc>:
 8017c74:	4b02      	ldr	r3, [pc, #8]	; (8017c80 <malloc+0xc>)
 8017c76:	4601      	mov	r1, r0
 8017c78:	6818      	ldr	r0, [r3, #0]
 8017c7a:	f000 b82b 	b.w	8017cd4 <_malloc_r>
 8017c7e:	bf00      	nop
 8017c80:	20000640 	.word	0x20000640

08017c84 <free>:
 8017c84:	4b02      	ldr	r3, [pc, #8]	; (8017c90 <free+0xc>)
 8017c86:	4601      	mov	r1, r0
 8017c88:	6818      	ldr	r0, [r3, #0]
 8017c8a:	f000 baab 	b.w	80181e4 <_free_r>
 8017c8e:	bf00      	nop
 8017c90:	20000640 	.word	0x20000640

08017c94 <sbrk_aligned>:
 8017c94:	b570      	push	{r4, r5, r6, lr}
 8017c96:	4e0e      	ldr	r6, [pc, #56]	; (8017cd0 <sbrk_aligned+0x3c>)
 8017c98:	460c      	mov	r4, r1
 8017c9a:	6831      	ldr	r1, [r6, #0]
 8017c9c:	4605      	mov	r5, r0
 8017c9e:	b911      	cbnz	r1, 8017ca6 <sbrk_aligned+0x12>
 8017ca0:	f000 fa42 	bl	8018128 <_sbrk_r>
 8017ca4:	6030      	str	r0, [r6, #0]
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	4628      	mov	r0, r5
 8017caa:	f000 fa3d 	bl	8018128 <_sbrk_r>
 8017cae:	1c43      	adds	r3, r0, #1
 8017cb0:	d00a      	beq.n	8017cc8 <sbrk_aligned+0x34>
 8017cb2:	1cc4      	adds	r4, r0, #3
 8017cb4:	f024 0403 	bic.w	r4, r4, #3
 8017cb8:	42a0      	cmp	r0, r4
 8017cba:	d007      	beq.n	8017ccc <sbrk_aligned+0x38>
 8017cbc:	1a21      	subs	r1, r4, r0
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	f000 fa32 	bl	8018128 <_sbrk_r>
 8017cc4:	3001      	adds	r0, #1
 8017cc6:	d101      	bne.n	8017ccc <sbrk_aligned+0x38>
 8017cc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017ccc:	4620      	mov	r0, r4
 8017cce:	bd70      	pop	{r4, r5, r6, pc}
 8017cd0:	200026c0 	.word	0x200026c0

08017cd4 <_malloc_r>:
 8017cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cd8:	1ccd      	adds	r5, r1, #3
 8017cda:	f025 0503 	bic.w	r5, r5, #3
 8017cde:	3508      	adds	r5, #8
 8017ce0:	2d0c      	cmp	r5, #12
 8017ce2:	bf38      	it	cc
 8017ce4:	250c      	movcc	r5, #12
 8017ce6:	2d00      	cmp	r5, #0
 8017ce8:	4607      	mov	r7, r0
 8017cea:	db01      	blt.n	8017cf0 <_malloc_r+0x1c>
 8017cec:	42a9      	cmp	r1, r5
 8017cee:	d905      	bls.n	8017cfc <_malloc_r+0x28>
 8017cf0:	230c      	movs	r3, #12
 8017cf2:	603b      	str	r3, [r7, #0]
 8017cf4:	2600      	movs	r6, #0
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017dd0 <_malloc_r+0xfc>
 8017d00:	f000 f868 	bl	8017dd4 <__malloc_lock>
 8017d04:	f8d8 3000 	ldr.w	r3, [r8]
 8017d08:	461c      	mov	r4, r3
 8017d0a:	bb5c      	cbnz	r4, 8017d64 <_malloc_r+0x90>
 8017d0c:	4629      	mov	r1, r5
 8017d0e:	4638      	mov	r0, r7
 8017d10:	f7ff ffc0 	bl	8017c94 <sbrk_aligned>
 8017d14:	1c43      	adds	r3, r0, #1
 8017d16:	4604      	mov	r4, r0
 8017d18:	d155      	bne.n	8017dc6 <_malloc_r+0xf2>
 8017d1a:	f8d8 4000 	ldr.w	r4, [r8]
 8017d1e:	4626      	mov	r6, r4
 8017d20:	2e00      	cmp	r6, #0
 8017d22:	d145      	bne.n	8017db0 <_malloc_r+0xdc>
 8017d24:	2c00      	cmp	r4, #0
 8017d26:	d048      	beq.n	8017dba <_malloc_r+0xe6>
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	4631      	mov	r1, r6
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	eb04 0903 	add.w	r9, r4, r3
 8017d32:	f000 f9f9 	bl	8018128 <_sbrk_r>
 8017d36:	4581      	cmp	r9, r0
 8017d38:	d13f      	bne.n	8017dba <_malloc_r+0xe6>
 8017d3a:	6821      	ldr	r1, [r4, #0]
 8017d3c:	1a6d      	subs	r5, r5, r1
 8017d3e:	4629      	mov	r1, r5
 8017d40:	4638      	mov	r0, r7
 8017d42:	f7ff ffa7 	bl	8017c94 <sbrk_aligned>
 8017d46:	3001      	adds	r0, #1
 8017d48:	d037      	beq.n	8017dba <_malloc_r+0xe6>
 8017d4a:	6823      	ldr	r3, [r4, #0]
 8017d4c:	442b      	add	r3, r5
 8017d4e:	6023      	str	r3, [r4, #0]
 8017d50:	f8d8 3000 	ldr.w	r3, [r8]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d038      	beq.n	8017dca <_malloc_r+0xf6>
 8017d58:	685a      	ldr	r2, [r3, #4]
 8017d5a:	42a2      	cmp	r2, r4
 8017d5c:	d12b      	bne.n	8017db6 <_malloc_r+0xe2>
 8017d5e:	2200      	movs	r2, #0
 8017d60:	605a      	str	r2, [r3, #4]
 8017d62:	e00f      	b.n	8017d84 <_malloc_r+0xb0>
 8017d64:	6822      	ldr	r2, [r4, #0]
 8017d66:	1b52      	subs	r2, r2, r5
 8017d68:	d41f      	bmi.n	8017daa <_malloc_r+0xd6>
 8017d6a:	2a0b      	cmp	r2, #11
 8017d6c:	d917      	bls.n	8017d9e <_malloc_r+0xca>
 8017d6e:	1961      	adds	r1, r4, r5
 8017d70:	42a3      	cmp	r3, r4
 8017d72:	6025      	str	r5, [r4, #0]
 8017d74:	bf18      	it	ne
 8017d76:	6059      	strne	r1, [r3, #4]
 8017d78:	6863      	ldr	r3, [r4, #4]
 8017d7a:	bf08      	it	eq
 8017d7c:	f8c8 1000 	streq.w	r1, [r8]
 8017d80:	5162      	str	r2, [r4, r5]
 8017d82:	604b      	str	r3, [r1, #4]
 8017d84:	4638      	mov	r0, r7
 8017d86:	f104 060b 	add.w	r6, r4, #11
 8017d8a:	f000 f829 	bl	8017de0 <__malloc_unlock>
 8017d8e:	f026 0607 	bic.w	r6, r6, #7
 8017d92:	1d23      	adds	r3, r4, #4
 8017d94:	1af2      	subs	r2, r6, r3
 8017d96:	d0ae      	beq.n	8017cf6 <_malloc_r+0x22>
 8017d98:	1b9b      	subs	r3, r3, r6
 8017d9a:	50a3      	str	r3, [r4, r2]
 8017d9c:	e7ab      	b.n	8017cf6 <_malloc_r+0x22>
 8017d9e:	42a3      	cmp	r3, r4
 8017da0:	6862      	ldr	r2, [r4, #4]
 8017da2:	d1dd      	bne.n	8017d60 <_malloc_r+0x8c>
 8017da4:	f8c8 2000 	str.w	r2, [r8]
 8017da8:	e7ec      	b.n	8017d84 <_malloc_r+0xb0>
 8017daa:	4623      	mov	r3, r4
 8017dac:	6864      	ldr	r4, [r4, #4]
 8017dae:	e7ac      	b.n	8017d0a <_malloc_r+0x36>
 8017db0:	4634      	mov	r4, r6
 8017db2:	6876      	ldr	r6, [r6, #4]
 8017db4:	e7b4      	b.n	8017d20 <_malloc_r+0x4c>
 8017db6:	4613      	mov	r3, r2
 8017db8:	e7cc      	b.n	8017d54 <_malloc_r+0x80>
 8017dba:	230c      	movs	r3, #12
 8017dbc:	603b      	str	r3, [r7, #0]
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	f000 f80e 	bl	8017de0 <__malloc_unlock>
 8017dc4:	e797      	b.n	8017cf6 <_malloc_r+0x22>
 8017dc6:	6025      	str	r5, [r4, #0]
 8017dc8:	e7dc      	b.n	8017d84 <_malloc_r+0xb0>
 8017dca:	605b      	str	r3, [r3, #4]
 8017dcc:	deff      	udf	#255	; 0xff
 8017dce:	bf00      	nop
 8017dd0:	200026bc 	.word	0x200026bc

08017dd4 <__malloc_lock>:
 8017dd4:	4801      	ldr	r0, [pc, #4]	; (8017ddc <__malloc_lock+0x8>)
 8017dd6:	f000 b9f4 	b.w	80181c2 <__retarget_lock_acquire_recursive>
 8017dda:	bf00      	nop
 8017ddc:	20002804 	.word	0x20002804

08017de0 <__malloc_unlock>:
 8017de0:	4801      	ldr	r0, [pc, #4]	; (8017de8 <__malloc_unlock+0x8>)
 8017de2:	f000 b9ef 	b.w	80181c4 <__retarget_lock_release_recursive>
 8017de6:	bf00      	nop
 8017de8:	20002804 	.word	0x20002804

08017dec <std>:
 8017dec:	2300      	movs	r3, #0
 8017dee:	b510      	push	{r4, lr}
 8017df0:	4604      	mov	r4, r0
 8017df2:	e9c0 3300 	strd	r3, r3, [r0]
 8017df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017dfa:	6083      	str	r3, [r0, #8]
 8017dfc:	8181      	strh	r1, [r0, #12]
 8017dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8017e00:	81c2      	strh	r2, [r0, #14]
 8017e02:	6183      	str	r3, [r0, #24]
 8017e04:	4619      	mov	r1, r3
 8017e06:	2208      	movs	r2, #8
 8017e08:	305c      	adds	r0, #92	; 0x5c
 8017e0a:	f000 f942 	bl	8018092 <memset>
 8017e0e:	4b0d      	ldr	r3, [pc, #52]	; (8017e44 <std+0x58>)
 8017e10:	6263      	str	r3, [r4, #36]	; 0x24
 8017e12:	4b0d      	ldr	r3, [pc, #52]	; (8017e48 <std+0x5c>)
 8017e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8017e16:	4b0d      	ldr	r3, [pc, #52]	; (8017e4c <std+0x60>)
 8017e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017e1a:	4b0d      	ldr	r3, [pc, #52]	; (8017e50 <std+0x64>)
 8017e1c:	6323      	str	r3, [r4, #48]	; 0x30
 8017e1e:	4b0d      	ldr	r3, [pc, #52]	; (8017e54 <std+0x68>)
 8017e20:	6224      	str	r4, [r4, #32]
 8017e22:	429c      	cmp	r4, r3
 8017e24:	d006      	beq.n	8017e34 <std+0x48>
 8017e26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017e2a:	4294      	cmp	r4, r2
 8017e2c:	d002      	beq.n	8017e34 <std+0x48>
 8017e2e:	33d0      	adds	r3, #208	; 0xd0
 8017e30:	429c      	cmp	r4, r3
 8017e32:	d105      	bne.n	8017e40 <std+0x54>
 8017e34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e3c:	f000 b9c0 	b.w	80181c0 <__retarget_lock_init_recursive>
 8017e40:	bd10      	pop	{r4, pc}
 8017e42:	bf00      	nop
 8017e44:	0801800d 	.word	0x0801800d
 8017e48:	0801802f 	.word	0x0801802f
 8017e4c:	08018067 	.word	0x08018067
 8017e50:	0801808b 	.word	0x0801808b
 8017e54:	200026c4 	.word	0x200026c4

08017e58 <stdio_exit_handler>:
 8017e58:	4a02      	ldr	r2, [pc, #8]	; (8017e64 <stdio_exit_handler+0xc>)
 8017e5a:	4903      	ldr	r1, [pc, #12]	; (8017e68 <stdio_exit_handler+0x10>)
 8017e5c:	4803      	ldr	r0, [pc, #12]	; (8017e6c <stdio_exit_handler+0x14>)
 8017e5e:	f000 b869 	b.w	8017f34 <_fwalk_sglue>
 8017e62:	bf00      	nop
 8017e64:	200005e8 	.word	0x200005e8
 8017e68:	08018be1 	.word	0x08018be1
 8017e6c:	200005f4 	.word	0x200005f4

08017e70 <cleanup_stdio>:
 8017e70:	6841      	ldr	r1, [r0, #4]
 8017e72:	4b0c      	ldr	r3, [pc, #48]	; (8017ea4 <cleanup_stdio+0x34>)
 8017e74:	4299      	cmp	r1, r3
 8017e76:	b510      	push	{r4, lr}
 8017e78:	4604      	mov	r4, r0
 8017e7a:	d001      	beq.n	8017e80 <cleanup_stdio+0x10>
 8017e7c:	f000 feb0 	bl	8018be0 <_fflush_r>
 8017e80:	68a1      	ldr	r1, [r4, #8]
 8017e82:	4b09      	ldr	r3, [pc, #36]	; (8017ea8 <cleanup_stdio+0x38>)
 8017e84:	4299      	cmp	r1, r3
 8017e86:	d002      	beq.n	8017e8e <cleanup_stdio+0x1e>
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f000 fea9 	bl	8018be0 <_fflush_r>
 8017e8e:	68e1      	ldr	r1, [r4, #12]
 8017e90:	4b06      	ldr	r3, [pc, #24]	; (8017eac <cleanup_stdio+0x3c>)
 8017e92:	4299      	cmp	r1, r3
 8017e94:	d004      	beq.n	8017ea0 <cleanup_stdio+0x30>
 8017e96:	4620      	mov	r0, r4
 8017e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e9c:	f000 bea0 	b.w	8018be0 <_fflush_r>
 8017ea0:	bd10      	pop	{r4, pc}
 8017ea2:	bf00      	nop
 8017ea4:	200026c4 	.word	0x200026c4
 8017ea8:	2000272c 	.word	0x2000272c
 8017eac:	20002794 	.word	0x20002794

08017eb0 <global_stdio_init.part.0>:
 8017eb0:	b510      	push	{r4, lr}
 8017eb2:	4b0b      	ldr	r3, [pc, #44]	; (8017ee0 <global_stdio_init.part.0+0x30>)
 8017eb4:	4c0b      	ldr	r4, [pc, #44]	; (8017ee4 <global_stdio_init.part.0+0x34>)
 8017eb6:	4a0c      	ldr	r2, [pc, #48]	; (8017ee8 <global_stdio_init.part.0+0x38>)
 8017eb8:	601a      	str	r2, [r3, #0]
 8017eba:	4620      	mov	r0, r4
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	2104      	movs	r1, #4
 8017ec0:	f7ff ff94 	bl	8017dec <std>
 8017ec4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017ec8:	2201      	movs	r2, #1
 8017eca:	2109      	movs	r1, #9
 8017ecc:	f7ff ff8e 	bl	8017dec <std>
 8017ed0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017ed4:	2202      	movs	r2, #2
 8017ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017eda:	2112      	movs	r1, #18
 8017edc:	f7ff bf86 	b.w	8017dec <std>
 8017ee0:	200027fc 	.word	0x200027fc
 8017ee4:	200026c4 	.word	0x200026c4
 8017ee8:	08017e59 	.word	0x08017e59

08017eec <__sfp_lock_acquire>:
 8017eec:	4801      	ldr	r0, [pc, #4]	; (8017ef4 <__sfp_lock_acquire+0x8>)
 8017eee:	f000 b968 	b.w	80181c2 <__retarget_lock_acquire_recursive>
 8017ef2:	bf00      	nop
 8017ef4:	20002805 	.word	0x20002805

08017ef8 <__sfp_lock_release>:
 8017ef8:	4801      	ldr	r0, [pc, #4]	; (8017f00 <__sfp_lock_release+0x8>)
 8017efa:	f000 b963 	b.w	80181c4 <__retarget_lock_release_recursive>
 8017efe:	bf00      	nop
 8017f00:	20002805 	.word	0x20002805

08017f04 <__sinit>:
 8017f04:	b510      	push	{r4, lr}
 8017f06:	4604      	mov	r4, r0
 8017f08:	f7ff fff0 	bl	8017eec <__sfp_lock_acquire>
 8017f0c:	6a23      	ldr	r3, [r4, #32]
 8017f0e:	b11b      	cbz	r3, 8017f18 <__sinit+0x14>
 8017f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f14:	f7ff bff0 	b.w	8017ef8 <__sfp_lock_release>
 8017f18:	4b04      	ldr	r3, [pc, #16]	; (8017f2c <__sinit+0x28>)
 8017f1a:	6223      	str	r3, [r4, #32]
 8017f1c:	4b04      	ldr	r3, [pc, #16]	; (8017f30 <__sinit+0x2c>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d1f5      	bne.n	8017f10 <__sinit+0xc>
 8017f24:	f7ff ffc4 	bl	8017eb0 <global_stdio_init.part.0>
 8017f28:	e7f2      	b.n	8017f10 <__sinit+0xc>
 8017f2a:	bf00      	nop
 8017f2c:	08017e71 	.word	0x08017e71
 8017f30:	200027fc 	.word	0x200027fc

08017f34 <_fwalk_sglue>:
 8017f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f38:	4607      	mov	r7, r0
 8017f3a:	4688      	mov	r8, r1
 8017f3c:	4614      	mov	r4, r2
 8017f3e:	2600      	movs	r6, #0
 8017f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017f44:	f1b9 0901 	subs.w	r9, r9, #1
 8017f48:	d505      	bpl.n	8017f56 <_fwalk_sglue+0x22>
 8017f4a:	6824      	ldr	r4, [r4, #0]
 8017f4c:	2c00      	cmp	r4, #0
 8017f4e:	d1f7      	bne.n	8017f40 <_fwalk_sglue+0xc>
 8017f50:	4630      	mov	r0, r6
 8017f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f56:	89ab      	ldrh	r3, [r5, #12]
 8017f58:	2b01      	cmp	r3, #1
 8017f5a:	d907      	bls.n	8017f6c <_fwalk_sglue+0x38>
 8017f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f60:	3301      	adds	r3, #1
 8017f62:	d003      	beq.n	8017f6c <_fwalk_sglue+0x38>
 8017f64:	4629      	mov	r1, r5
 8017f66:	4638      	mov	r0, r7
 8017f68:	47c0      	blx	r8
 8017f6a:	4306      	orrs	r6, r0
 8017f6c:	3568      	adds	r5, #104	; 0x68
 8017f6e:	e7e9      	b.n	8017f44 <_fwalk_sglue+0x10>

08017f70 <iprintf>:
 8017f70:	b40f      	push	{r0, r1, r2, r3}
 8017f72:	b507      	push	{r0, r1, r2, lr}
 8017f74:	4906      	ldr	r1, [pc, #24]	; (8017f90 <iprintf+0x20>)
 8017f76:	ab04      	add	r3, sp, #16
 8017f78:	6808      	ldr	r0, [r1, #0]
 8017f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f7e:	6881      	ldr	r1, [r0, #8]
 8017f80:	9301      	str	r3, [sp, #4]
 8017f82:	f000 fafd 	bl	8018580 <_vfiprintf_r>
 8017f86:	b003      	add	sp, #12
 8017f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f8c:	b004      	add	sp, #16
 8017f8e:	4770      	bx	lr
 8017f90:	20000640 	.word	0x20000640

08017f94 <putchar>:
 8017f94:	4b02      	ldr	r3, [pc, #8]	; (8017fa0 <putchar+0xc>)
 8017f96:	4601      	mov	r1, r0
 8017f98:	6818      	ldr	r0, [r3, #0]
 8017f9a:	6882      	ldr	r2, [r0, #8]
 8017f9c:	f000 be48 	b.w	8018c30 <_putc_r>
 8017fa0:	20000640 	.word	0x20000640

08017fa4 <sniprintf>:
 8017fa4:	b40c      	push	{r2, r3}
 8017fa6:	b530      	push	{r4, r5, lr}
 8017fa8:	4b17      	ldr	r3, [pc, #92]	; (8018008 <sniprintf+0x64>)
 8017faa:	1e0c      	subs	r4, r1, #0
 8017fac:	681d      	ldr	r5, [r3, #0]
 8017fae:	b09d      	sub	sp, #116	; 0x74
 8017fb0:	da08      	bge.n	8017fc4 <sniprintf+0x20>
 8017fb2:	238b      	movs	r3, #139	; 0x8b
 8017fb4:	602b      	str	r3, [r5, #0]
 8017fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fba:	b01d      	add	sp, #116	; 0x74
 8017fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fc0:	b002      	add	sp, #8
 8017fc2:	4770      	bx	lr
 8017fc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017fcc:	bf14      	ite	ne
 8017fce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017fd2:	4623      	moveq	r3, r4
 8017fd4:	9304      	str	r3, [sp, #16]
 8017fd6:	9307      	str	r3, [sp, #28]
 8017fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fdc:	9002      	str	r0, [sp, #8]
 8017fde:	9006      	str	r0, [sp, #24]
 8017fe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017fe4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017fe6:	ab21      	add	r3, sp, #132	; 0x84
 8017fe8:	a902      	add	r1, sp, #8
 8017fea:	4628      	mov	r0, r5
 8017fec:	9301      	str	r3, [sp, #4]
 8017fee:	f000 f99f 	bl	8018330 <_svfiprintf_r>
 8017ff2:	1c43      	adds	r3, r0, #1
 8017ff4:	bfbc      	itt	lt
 8017ff6:	238b      	movlt	r3, #139	; 0x8b
 8017ff8:	602b      	strlt	r3, [r5, #0]
 8017ffa:	2c00      	cmp	r4, #0
 8017ffc:	d0dd      	beq.n	8017fba <sniprintf+0x16>
 8017ffe:	9b02      	ldr	r3, [sp, #8]
 8018000:	2200      	movs	r2, #0
 8018002:	701a      	strb	r2, [r3, #0]
 8018004:	e7d9      	b.n	8017fba <sniprintf+0x16>
 8018006:	bf00      	nop
 8018008:	20000640 	.word	0x20000640

0801800c <__sread>:
 801800c:	b510      	push	{r4, lr}
 801800e:	460c      	mov	r4, r1
 8018010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018014:	f000 f876 	bl	8018104 <_read_r>
 8018018:	2800      	cmp	r0, #0
 801801a:	bfab      	itete	ge
 801801c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801801e:	89a3      	ldrhlt	r3, [r4, #12]
 8018020:	181b      	addge	r3, r3, r0
 8018022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018026:	bfac      	ite	ge
 8018028:	6563      	strge	r3, [r4, #84]	; 0x54
 801802a:	81a3      	strhlt	r3, [r4, #12]
 801802c:	bd10      	pop	{r4, pc}

0801802e <__swrite>:
 801802e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018032:	461f      	mov	r7, r3
 8018034:	898b      	ldrh	r3, [r1, #12]
 8018036:	05db      	lsls	r3, r3, #23
 8018038:	4605      	mov	r5, r0
 801803a:	460c      	mov	r4, r1
 801803c:	4616      	mov	r6, r2
 801803e:	d505      	bpl.n	801804c <__swrite+0x1e>
 8018040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018044:	2302      	movs	r3, #2
 8018046:	2200      	movs	r2, #0
 8018048:	f000 f84a 	bl	80180e0 <_lseek_r>
 801804c:	89a3      	ldrh	r3, [r4, #12]
 801804e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018056:	81a3      	strh	r3, [r4, #12]
 8018058:	4632      	mov	r2, r6
 801805a:	463b      	mov	r3, r7
 801805c:	4628      	mov	r0, r5
 801805e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018062:	f000 b871 	b.w	8018148 <_write_r>

08018066 <__sseek>:
 8018066:	b510      	push	{r4, lr}
 8018068:	460c      	mov	r4, r1
 801806a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801806e:	f000 f837 	bl	80180e0 <_lseek_r>
 8018072:	1c43      	adds	r3, r0, #1
 8018074:	89a3      	ldrh	r3, [r4, #12]
 8018076:	bf15      	itete	ne
 8018078:	6560      	strne	r0, [r4, #84]	; 0x54
 801807a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801807e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018082:	81a3      	strheq	r3, [r4, #12]
 8018084:	bf18      	it	ne
 8018086:	81a3      	strhne	r3, [r4, #12]
 8018088:	bd10      	pop	{r4, pc}

0801808a <__sclose>:
 801808a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801808e:	f000 b817 	b.w	80180c0 <_close_r>

08018092 <memset>:
 8018092:	4402      	add	r2, r0
 8018094:	4603      	mov	r3, r0
 8018096:	4293      	cmp	r3, r2
 8018098:	d100      	bne.n	801809c <memset+0xa>
 801809a:	4770      	bx	lr
 801809c:	f803 1b01 	strb.w	r1, [r3], #1
 80180a0:	e7f9      	b.n	8018096 <memset+0x4>

080180a2 <strcat>:
 80180a2:	b510      	push	{r4, lr}
 80180a4:	4602      	mov	r2, r0
 80180a6:	7814      	ldrb	r4, [r2, #0]
 80180a8:	4613      	mov	r3, r2
 80180aa:	3201      	adds	r2, #1
 80180ac:	2c00      	cmp	r4, #0
 80180ae:	d1fa      	bne.n	80180a6 <strcat+0x4>
 80180b0:	3b01      	subs	r3, #1
 80180b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180ba:	2a00      	cmp	r2, #0
 80180bc:	d1f9      	bne.n	80180b2 <strcat+0x10>
 80180be:	bd10      	pop	{r4, pc}

080180c0 <_close_r>:
 80180c0:	b538      	push	{r3, r4, r5, lr}
 80180c2:	4d06      	ldr	r5, [pc, #24]	; (80180dc <_close_r+0x1c>)
 80180c4:	2300      	movs	r3, #0
 80180c6:	4604      	mov	r4, r0
 80180c8:	4608      	mov	r0, r1
 80180ca:	602b      	str	r3, [r5, #0]
 80180cc:	f7fa fb32 	bl	8012734 <_close>
 80180d0:	1c43      	adds	r3, r0, #1
 80180d2:	d102      	bne.n	80180da <_close_r+0x1a>
 80180d4:	682b      	ldr	r3, [r5, #0]
 80180d6:	b103      	cbz	r3, 80180da <_close_r+0x1a>
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	bd38      	pop	{r3, r4, r5, pc}
 80180dc:	20002800 	.word	0x20002800

080180e0 <_lseek_r>:
 80180e0:	b538      	push	{r3, r4, r5, lr}
 80180e2:	4d07      	ldr	r5, [pc, #28]	; (8018100 <_lseek_r+0x20>)
 80180e4:	4604      	mov	r4, r0
 80180e6:	4608      	mov	r0, r1
 80180e8:	4611      	mov	r1, r2
 80180ea:	2200      	movs	r2, #0
 80180ec:	602a      	str	r2, [r5, #0]
 80180ee:	461a      	mov	r2, r3
 80180f0:	f7fa fb47 	bl	8012782 <_lseek>
 80180f4:	1c43      	adds	r3, r0, #1
 80180f6:	d102      	bne.n	80180fe <_lseek_r+0x1e>
 80180f8:	682b      	ldr	r3, [r5, #0]
 80180fa:	b103      	cbz	r3, 80180fe <_lseek_r+0x1e>
 80180fc:	6023      	str	r3, [r4, #0]
 80180fe:	bd38      	pop	{r3, r4, r5, pc}
 8018100:	20002800 	.word	0x20002800

08018104 <_read_r>:
 8018104:	b538      	push	{r3, r4, r5, lr}
 8018106:	4d07      	ldr	r5, [pc, #28]	; (8018124 <_read_r+0x20>)
 8018108:	4604      	mov	r4, r0
 801810a:	4608      	mov	r0, r1
 801810c:	4611      	mov	r1, r2
 801810e:	2200      	movs	r2, #0
 8018110:	602a      	str	r2, [r5, #0]
 8018112:	461a      	mov	r2, r3
 8018114:	f7fa faa9 	bl	801266a <_read>
 8018118:	1c43      	adds	r3, r0, #1
 801811a:	d102      	bne.n	8018122 <_read_r+0x1e>
 801811c:	682b      	ldr	r3, [r5, #0]
 801811e:	b103      	cbz	r3, 8018122 <_read_r+0x1e>
 8018120:	6023      	str	r3, [r4, #0]
 8018122:	bd38      	pop	{r3, r4, r5, pc}
 8018124:	20002800 	.word	0x20002800

08018128 <_sbrk_r>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	4d06      	ldr	r5, [pc, #24]	; (8018144 <_sbrk_r+0x1c>)
 801812c:	2300      	movs	r3, #0
 801812e:	4604      	mov	r4, r0
 8018130:	4608      	mov	r0, r1
 8018132:	602b      	str	r3, [r5, #0]
 8018134:	f7fa fad2 	bl	80126dc <_sbrk>
 8018138:	1c43      	adds	r3, r0, #1
 801813a:	d102      	bne.n	8018142 <_sbrk_r+0x1a>
 801813c:	682b      	ldr	r3, [r5, #0]
 801813e:	b103      	cbz	r3, 8018142 <_sbrk_r+0x1a>
 8018140:	6023      	str	r3, [r4, #0]
 8018142:	bd38      	pop	{r3, r4, r5, pc}
 8018144:	20002800 	.word	0x20002800

08018148 <_write_r>:
 8018148:	b538      	push	{r3, r4, r5, lr}
 801814a:	4d07      	ldr	r5, [pc, #28]	; (8018168 <_write_r+0x20>)
 801814c:	4604      	mov	r4, r0
 801814e:	4608      	mov	r0, r1
 8018150:	4611      	mov	r1, r2
 8018152:	2200      	movs	r2, #0
 8018154:	602a      	str	r2, [r5, #0]
 8018156:	461a      	mov	r2, r3
 8018158:	f7fa faa4 	bl	80126a4 <_write>
 801815c:	1c43      	adds	r3, r0, #1
 801815e:	d102      	bne.n	8018166 <_write_r+0x1e>
 8018160:	682b      	ldr	r3, [r5, #0]
 8018162:	b103      	cbz	r3, 8018166 <_write_r+0x1e>
 8018164:	6023      	str	r3, [r4, #0]
 8018166:	bd38      	pop	{r3, r4, r5, pc}
 8018168:	20002800 	.word	0x20002800

0801816c <__errno>:
 801816c:	4b01      	ldr	r3, [pc, #4]	; (8018174 <__errno+0x8>)
 801816e:	6818      	ldr	r0, [r3, #0]
 8018170:	4770      	bx	lr
 8018172:	bf00      	nop
 8018174:	20000640 	.word	0x20000640

08018178 <__libc_init_array>:
 8018178:	b570      	push	{r4, r5, r6, lr}
 801817a:	4d0d      	ldr	r5, [pc, #52]	; (80181b0 <__libc_init_array+0x38>)
 801817c:	4c0d      	ldr	r4, [pc, #52]	; (80181b4 <__libc_init_array+0x3c>)
 801817e:	1b64      	subs	r4, r4, r5
 8018180:	10a4      	asrs	r4, r4, #2
 8018182:	2600      	movs	r6, #0
 8018184:	42a6      	cmp	r6, r4
 8018186:	d109      	bne.n	801819c <__libc_init_array+0x24>
 8018188:	4d0b      	ldr	r5, [pc, #44]	; (80181b8 <__libc_init_array+0x40>)
 801818a:	4c0c      	ldr	r4, [pc, #48]	; (80181bc <__libc_init_array+0x44>)
 801818c:	f001 fe64 	bl	8019e58 <_init>
 8018190:	1b64      	subs	r4, r4, r5
 8018192:	10a4      	asrs	r4, r4, #2
 8018194:	2600      	movs	r6, #0
 8018196:	42a6      	cmp	r6, r4
 8018198:	d105      	bne.n	80181a6 <__libc_init_array+0x2e>
 801819a:	bd70      	pop	{r4, r5, r6, pc}
 801819c:	f855 3b04 	ldr.w	r3, [r5], #4
 80181a0:	4798      	blx	r3
 80181a2:	3601      	adds	r6, #1
 80181a4:	e7ee      	b.n	8018184 <__libc_init_array+0xc>
 80181a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80181aa:	4798      	blx	r3
 80181ac:	3601      	adds	r6, #1
 80181ae:	e7f2      	b.n	8018196 <__libc_init_array+0x1e>
 80181b0:	0801a080 	.word	0x0801a080
 80181b4:	0801a080 	.word	0x0801a080
 80181b8:	0801a080 	.word	0x0801a080
 80181bc:	0801a084 	.word	0x0801a084

080181c0 <__retarget_lock_init_recursive>:
 80181c0:	4770      	bx	lr

080181c2 <__retarget_lock_acquire_recursive>:
 80181c2:	4770      	bx	lr

080181c4 <__retarget_lock_release_recursive>:
 80181c4:	4770      	bx	lr

080181c6 <memcpy>:
 80181c6:	440a      	add	r2, r1
 80181c8:	4291      	cmp	r1, r2
 80181ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80181ce:	d100      	bne.n	80181d2 <memcpy+0xc>
 80181d0:	4770      	bx	lr
 80181d2:	b510      	push	{r4, lr}
 80181d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80181dc:	4291      	cmp	r1, r2
 80181de:	d1f9      	bne.n	80181d4 <memcpy+0xe>
 80181e0:	bd10      	pop	{r4, pc}
	...

080181e4 <_free_r>:
 80181e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181e6:	2900      	cmp	r1, #0
 80181e8:	d044      	beq.n	8018274 <_free_r+0x90>
 80181ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181ee:	9001      	str	r0, [sp, #4]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	f1a1 0404 	sub.w	r4, r1, #4
 80181f6:	bfb8      	it	lt
 80181f8:	18e4      	addlt	r4, r4, r3
 80181fa:	f7ff fdeb 	bl	8017dd4 <__malloc_lock>
 80181fe:	4a1e      	ldr	r2, [pc, #120]	; (8018278 <_free_r+0x94>)
 8018200:	9801      	ldr	r0, [sp, #4]
 8018202:	6813      	ldr	r3, [r2, #0]
 8018204:	b933      	cbnz	r3, 8018214 <_free_r+0x30>
 8018206:	6063      	str	r3, [r4, #4]
 8018208:	6014      	str	r4, [r2, #0]
 801820a:	b003      	add	sp, #12
 801820c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018210:	f7ff bde6 	b.w	8017de0 <__malloc_unlock>
 8018214:	42a3      	cmp	r3, r4
 8018216:	d908      	bls.n	801822a <_free_r+0x46>
 8018218:	6825      	ldr	r5, [r4, #0]
 801821a:	1961      	adds	r1, r4, r5
 801821c:	428b      	cmp	r3, r1
 801821e:	bf01      	itttt	eq
 8018220:	6819      	ldreq	r1, [r3, #0]
 8018222:	685b      	ldreq	r3, [r3, #4]
 8018224:	1949      	addeq	r1, r1, r5
 8018226:	6021      	streq	r1, [r4, #0]
 8018228:	e7ed      	b.n	8018206 <_free_r+0x22>
 801822a:	461a      	mov	r2, r3
 801822c:	685b      	ldr	r3, [r3, #4]
 801822e:	b10b      	cbz	r3, 8018234 <_free_r+0x50>
 8018230:	42a3      	cmp	r3, r4
 8018232:	d9fa      	bls.n	801822a <_free_r+0x46>
 8018234:	6811      	ldr	r1, [r2, #0]
 8018236:	1855      	adds	r5, r2, r1
 8018238:	42a5      	cmp	r5, r4
 801823a:	d10b      	bne.n	8018254 <_free_r+0x70>
 801823c:	6824      	ldr	r4, [r4, #0]
 801823e:	4421      	add	r1, r4
 8018240:	1854      	adds	r4, r2, r1
 8018242:	42a3      	cmp	r3, r4
 8018244:	6011      	str	r1, [r2, #0]
 8018246:	d1e0      	bne.n	801820a <_free_r+0x26>
 8018248:	681c      	ldr	r4, [r3, #0]
 801824a:	685b      	ldr	r3, [r3, #4]
 801824c:	6053      	str	r3, [r2, #4]
 801824e:	440c      	add	r4, r1
 8018250:	6014      	str	r4, [r2, #0]
 8018252:	e7da      	b.n	801820a <_free_r+0x26>
 8018254:	d902      	bls.n	801825c <_free_r+0x78>
 8018256:	230c      	movs	r3, #12
 8018258:	6003      	str	r3, [r0, #0]
 801825a:	e7d6      	b.n	801820a <_free_r+0x26>
 801825c:	6825      	ldr	r5, [r4, #0]
 801825e:	1961      	adds	r1, r4, r5
 8018260:	428b      	cmp	r3, r1
 8018262:	bf04      	itt	eq
 8018264:	6819      	ldreq	r1, [r3, #0]
 8018266:	685b      	ldreq	r3, [r3, #4]
 8018268:	6063      	str	r3, [r4, #4]
 801826a:	bf04      	itt	eq
 801826c:	1949      	addeq	r1, r1, r5
 801826e:	6021      	streq	r1, [r4, #0]
 8018270:	6054      	str	r4, [r2, #4]
 8018272:	e7ca      	b.n	801820a <_free_r+0x26>
 8018274:	b003      	add	sp, #12
 8018276:	bd30      	pop	{r4, r5, pc}
 8018278:	200026bc 	.word	0x200026bc

0801827c <__ssputs_r>:
 801827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018280:	688e      	ldr	r6, [r1, #8]
 8018282:	461f      	mov	r7, r3
 8018284:	42be      	cmp	r6, r7
 8018286:	680b      	ldr	r3, [r1, #0]
 8018288:	4682      	mov	sl, r0
 801828a:	460c      	mov	r4, r1
 801828c:	4690      	mov	r8, r2
 801828e:	d82c      	bhi.n	80182ea <__ssputs_r+0x6e>
 8018290:	898a      	ldrh	r2, [r1, #12]
 8018292:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018296:	d026      	beq.n	80182e6 <__ssputs_r+0x6a>
 8018298:	6965      	ldr	r5, [r4, #20]
 801829a:	6909      	ldr	r1, [r1, #16]
 801829c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182a0:	eba3 0901 	sub.w	r9, r3, r1
 80182a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80182a8:	1c7b      	adds	r3, r7, #1
 80182aa:	444b      	add	r3, r9
 80182ac:	106d      	asrs	r5, r5, #1
 80182ae:	429d      	cmp	r5, r3
 80182b0:	bf38      	it	cc
 80182b2:	461d      	movcc	r5, r3
 80182b4:	0553      	lsls	r3, r2, #21
 80182b6:	d527      	bpl.n	8018308 <__ssputs_r+0x8c>
 80182b8:	4629      	mov	r1, r5
 80182ba:	f7ff fd0b 	bl	8017cd4 <_malloc_r>
 80182be:	4606      	mov	r6, r0
 80182c0:	b360      	cbz	r0, 801831c <__ssputs_r+0xa0>
 80182c2:	6921      	ldr	r1, [r4, #16]
 80182c4:	464a      	mov	r2, r9
 80182c6:	f7ff ff7e 	bl	80181c6 <memcpy>
 80182ca:	89a3      	ldrh	r3, [r4, #12]
 80182cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80182d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182d4:	81a3      	strh	r3, [r4, #12]
 80182d6:	6126      	str	r6, [r4, #16]
 80182d8:	6165      	str	r5, [r4, #20]
 80182da:	444e      	add	r6, r9
 80182dc:	eba5 0509 	sub.w	r5, r5, r9
 80182e0:	6026      	str	r6, [r4, #0]
 80182e2:	60a5      	str	r5, [r4, #8]
 80182e4:	463e      	mov	r6, r7
 80182e6:	42be      	cmp	r6, r7
 80182e8:	d900      	bls.n	80182ec <__ssputs_r+0x70>
 80182ea:	463e      	mov	r6, r7
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	4632      	mov	r2, r6
 80182f0:	4641      	mov	r1, r8
 80182f2:	f000 fd67 	bl	8018dc4 <memmove>
 80182f6:	68a3      	ldr	r3, [r4, #8]
 80182f8:	1b9b      	subs	r3, r3, r6
 80182fa:	60a3      	str	r3, [r4, #8]
 80182fc:	6823      	ldr	r3, [r4, #0]
 80182fe:	4433      	add	r3, r6
 8018300:	6023      	str	r3, [r4, #0]
 8018302:	2000      	movs	r0, #0
 8018304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018308:	462a      	mov	r2, r5
 801830a:	f000 fd75 	bl	8018df8 <_realloc_r>
 801830e:	4606      	mov	r6, r0
 8018310:	2800      	cmp	r0, #0
 8018312:	d1e0      	bne.n	80182d6 <__ssputs_r+0x5a>
 8018314:	6921      	ldr	r1, [r4, #16]
 8018316:	4650      	mov	r0, sl
 8018318:	f7ff ff64 	bl	80181e4 <_free_r>
 801831c:	230c      	movs	r3, #12
 801831e:	f8ca 3000 	str.w	r3, [sl]
 8018322:	89a3      	ldrh	r3, [r4, #12]
 8018324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018328:	81a3      	strh	r3, [r4, #12]
 801832a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801832e:	e7e9      	b.n	8018304 <__ssputs_r+0x88>

08018330 <_svfiprintf_r>:
 8018330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018334:	4698      	mov	r8, r3
 8018336:	898b      	ldrh	r3, [r1, #12]
 8018338:	061b      	lsls	r3, r3, #24
 801833a:	b09d      	sub	sp, #116	; 0x74
 801833c:	4607      	mov	r7, r0
 801833e:	460d      	mov	r5, r1
 8018340:	4614      	mov	r4, r2
 8018342:	d50e      	bpl.n	8018362 <_svfiprintf_r+0x32>
 8018344:	690b      	ldr	r3, [r1, #16]
 8018346:	b963      	cbnz	r3, 8018362 <_svfiprintf_r+0x32>
 8018348:	2140      	movs	r1, #64	; 0x40
 801834a:	f7ff fcc3 	bl	8017cd4 <_malloc_r>
 801834e:	6028      	str	r0, [r5, #0]
 8018350:	6128      	str	r0, [r5, #16]
 8018352:	b920      	cbnz	r0, 801835e <_svfiprintf_r+0x2e>
 8018354:	230c      	movs	r3, #12
 8018356:	603b      	str	r3, [r7, #0]
 8018358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801835c:	e0d0      	b.n	8018500 <_svfiprintf_r+0x1d0>
 801835e:	2340      	movs	r3, #64	; 0x40
 8018360:	616b      	str	r3, [r5, #20]
 8018362:	2300      	movs	r3, #0
 8018364:	9309      	str	r3, [sp, #36]	; 0x24
 8018366:	2320      	movs	r3, #32
 8018368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801836c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018370:	2330      	movs	r3, #48	; 0x30
 8018372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018518 <_svfiprintf_r+0x1e8>
 8018376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801837a:	f04f 0901 	mov.w	r9, #1
 801837e:	4623      	mov	r3, r4
 8018380:	469a      	mov	sl, r3
 8018382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018386:	b10a      	cbz	r2, 801838c <_svfiprintf_r+0x5c>
 8018388:	2a25      	cmp	r2, #37	; 0x25
 801838a:	d1f9      	bne.n	8018380 <_svfiprintf_r+0x50>
 801838c:	ebba 0b04 	subs.w	fp, sl, r4
 8018390:	d00b      	beq.n	80183aa <_svfiprintf_r+0x7a>
 8018392:	465b      	mov	r3, fp
 8018394:	4622      	mov	r2, r4
 8018396:	4629      	mov	r1, r5
 8018398:	4638      	mov	r0, r7
 801839a:	f7ff ff6f 	bl	801827c <__ssputs_r>
 801839e:	3001      	adds	r0, #1
 80183a0:	f000 80a9 	beq.w	80184f6 <_svfiprintf_r+0x1c6>
 80183a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183a6:	445a      	add	r2, fp
 80183a8:	9209      	str	r2, [sp, #36]	; 0x24
 80183aa:	f89a 3000 	ldrb.w	r3, [sl]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	f000 80a1 	beq.w	80184f6 <_svfiprintf_r+0x1c6>
 80183b4:	2300      	movs	r3, #0
 80183b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183be:	f10a 0a01 	add.w	sl, sl, #1
 80183c2:	9304      	str	r3, [sp, #16]
 80183c4:	9307      	str	r3, [sp, #28]
 80183c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80183ca:	931a      	str	r3, [sp, #104]	; 0x68
 80183cc:	4654      	mov	r4, sl
 80183ce:	2205      	movs	r2, #5
 80183d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183d4:	4850      	ldr	r0, [pc, #320]	; (8018518 <_svfiprintf_r+0x1e8>)
 80183d6:	f7e7 ff1b 	bl	8000210 <memchr>
 80183da:	9a04      	ldr	r2, [sp, #16]
 80183dc:	b9d8      	cbnz	r0, 8018416 <_svfiprintf_r+0xe6>
 80183de:	06d0      	lsls	r0, r2, #27
 80183e0:	bf44      	itt	mi
 80183e2:	2320      	movmi	r3, #32
 80183e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183e8:	0711      	lsls	r1, r2, #28
 80183ea:	bf44      	itt	mi
 80183ec:	232b      	movmi	r3, #43	; 0x2b
 80183ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183f2:	f89a 3000 	ldrb.w	r3, [sl]
 80183f6:	2b2a      	cmp	r3, #42	; 0x2a
 80183f8:	d015      	beq.n	8018426 <_svfiprintf_r+0xf6>
 80183fa:	9a07      	ldr	r2, [sp, #28]
 80183fc:	4654      	mov	r4, sl
 80183fe:	2000      	movs	r0, #0
 8018400:	f04f 0c0a 	mov.w	ip, #10
 8018404:	4621      	mov	r1, r4
 8018406:	f811 3b01 	ldrb.w	r3, [r1], #1
 801840a:	3b30      	subs	r3, #48	; 0x30
 801840c:	2b09      	cmp	r3, #9
 801840e:	d94d      	bls.n	80184ac <_svfiprintf_r+0x17c>
 8018410:	b1b0      	cbz	r0, 8018440 <_svfiprintf_r+0x110>
 8018412:	9207      	str	r2, [sp, #28]
 8018414:	e014      	b.n	8018440 <_svfiprintf_r+0x110>
 8018416:	eba0 0308 	sub.w	r3, r0, r8
 801841a:	fa09 f303 	lsl.w	r3, r9, r3
 801841e:	4313      	orrs	r3, r2
 8018420:	9304      	str	r3, [sp, #16]
 8018422:	46a2      	mov	sl, r4
 8018424:	e7d2      	b.n	80183cc <_svfiprintf_r+0x9c>
 8018426:	9b03      	ldr	r3, [sp, #12]
 8018428:	1d19      	adds	r1, r3, #4
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	9103      	str	r1, [sp, #12]
 801842e:	2b00      	cmp	r3, #0
 8018430:	bfbb      	ittet	lt
 8018432:	425b      	neglt	r3, r3
 8018434:	f042 0202 	orrlt.w	r2, r2, #2
 8018438:	9307      	strge	r3, [sp, #28]
 801843a:	9307      	strlt	r3, [sp, #28]
 801843c:	bfb8      	it	lt
 801843e:	9204      	strlt	r2, [sp, #16]
 8018440:	7823      	ldrb	r3, [r4, #0]
 8018442:	2b2e      	cmp	r3, #46	; 0x2e
 8018444:	d10c      	bne.n	8018460 <_svfiprintf_r+0x130>
 8018446:	7863      	ldrb	r3, [r4, #1]
 8018448:	2b2a      	cmp	r3, #42	; 0x2a
 801844a:	d134      	bne.n	80184b6 <_svfiprintf_r+0x186>
 801844c:	9b03      	ldr	r3, [sp, #12]
 801844e:	1d1a      	adds	r2, r3, #4
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	9203      	str	r2, [sp, #12]
 8018454:	2b00      	cmp	r3, #0
 8018456:	bfb8      	it	lt
 8018458:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801845c:	3402      	adds	r4, #2
 801845e:	9305      	str	r3, [sp, #20]
 8018460:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018528 <_svfiprintf_r+0x1f8>
 8018464:	7821      	ldrb	r1, [r4, #0]
 8018466:	2203      	movs	r2, #3
 8018468:	4650      	mov	r0, sl
 801846a:	f7e7 fed1 	bl	8000210 <memchr>
 801846e:	b138      	cbz	r0, 8018480 <_svfiprintf_r+0x150>
 8018470:	9b04      	ldr	r3, [sp, #16]
 8018472:	eba0 000a 	sub.w	r0, r0, sl
 8018476:	2240      	movs	r2, #64	; 0x40
 8018478:	4082      	lsls	r2, r0
 801847a:	4313      	orrs	r3, r2
 801847c:	3401      	adds	r4, #1
 801847e:	9304      	str	r3, [sp, #16]
 8018480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018484:	4825      	ldr	r0, [pc, #148]	; (801851c <_svfiprintf_r+0x1ec>)
 8018486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801848a:	2206      	movs	r2, #6
 801848c:	f7e7 fec0 	bl	8000210 <memchr>
 8018490:	2800      	cmp	r0, #0
 8018492:	d038      	beq.n	8018506 <_svfiprintf_r+0x1d6>
 8018494:	4b22      	ldr	r3, [pc, #136]	; (8018520 <_svfiprintf_r+0x1f0>)
 8018496:	bb1b      	cbnz	r3, 80184e0 <_svfiprintf_r+0x1b0>
 8018498:	9b03      	ldr	r3, [sp, #12]
 801849a:	3307      	adds	r3, #7
 801849c:	f023 0307 	bic.w	r3, r3, #7
 80184a0:	3308      	adds	r3, #8
 80184a2:	9303      	str	r3, [sp, #12]
 80184a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184a6:	4433      	add	r3, r6
 80184a8:	9309      	str	r3, [sp, #36]	; 0x24
 80184aa:	e768      	b.n	801837e <_svfiprintf_r+0x4e>
 80184ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80184b0:	460c      	mov	r4, r1
 80184b2:	2001      	movs	r0, #1
 80184b4:	e7a6      	b.n	8018404 <_svfiprintf_r+0xd4>
 80184b6:	2300      	movs	r3, #0
 80184b8:	3401      	adds	r4, #1
 80184ba:	9305      	str	r3, [sp, #20]
 80184bc:	4619      	mov	r1, r3
 80184be:	f04f 0c0a 	mov.w	ip, #10
 80184c2:	4620      	mov	r0, r4
 80184c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184c8:	3a30      	subs	r2, #48	; 0x30
 80184ca:	2a09      	cmp	r2, #9
 80184cc:	d903      	bls.n	80184d6 <_svfiprintf_r+0x1a6>
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d0c6      	beq.n	8018460 <_svfiprintf_r+0x130>
 80184d2:	9105      	str	r1, [sp, #20]
 80184d4:	e7c4      	b.n	8018460 <_svfiprintf_r+0x130>
 80184d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80184da:	4604      	mov	r4, r0
 80184dc:	2301      	movs	r3, #1
 80184de:	e7f0      	b.n	80184c2 <_svfiprintf_r+0x192>
 80184e0:	ab03      	add	r3, sp, #12
 80184e2:	9300      	str	r3, [sp, #0]
 80184e4:	462a      	mov	r2, r5
 80184e6:	4b0f      	ldr	r3, [pc, #60]	; (8018524 <_svfiprintf_r+0x1f4>)
 80184e8:	a904      	add	r1, sp, #16
 80184ea:	4638      	mov	r0, r7
 80184ec:	f3af 8000 	nop.w
 80184f0:	1c42      	adds	r2, r0, #1
 80184f2:	4606      	mov	r6, r0
 80184f4:	d1d6      	bne.n	80184a4 <_svfiprintf_r+0x174>
 80184f6:	89ab      	ldrh	r3, [r5, #12]
 80184f8:	065b      	lsls	r3, r3, #25
 80184fa:	f53f af2d 	bmi.w	8018358 <_svfiprintf_r+0x28>
 80184fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018500:	b01d      	add	sp, #116	; 0x74
 8018502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018506:	ab03      	add	r3, sp, #12
 8018508:	9300      	str	r3, [sp, #0]
 801850a:	462a      	mov	r2, r5
 801850c:	4b05      	ldr	r3, [pc, #20]	; (8018524 <_svfiprintf_r+0x1f4>)
 801850e:	a904      	add	r1, sp, #16
 8018510:	4638      	mov	r0, r7
 8018512:	f000 f9bd 	bl	8018890 <_printf_i>
 8018516:	e7eb      	b.n	80184f0 <_svfiprintf_r+0x1c0>
 8018518:	0801a011 	.word	0x0801a011
 801851c:	0801a01b 	.word	0x0801a01b
 8018520:	00000000 	.word	0x00000000
 8018524:	0801827d 	.word	0x0801827d
 8018528:	0801a017 	.word	0x0801a017

0801852c <__sfputc_r>:
 801852c:	6893      	ldr	r3, [r2, #8]
 801852e:	3b01      	subs	r3, #1
 8018530:	2b00      	cmp	r3, #0
 8018532:	b410      	push	{r4}
 8018534:	6093      	str	r3, [r2, #8]
 8018536:	da08      	bge.n	801854a <__sfputc_r+0x1e>
 8018538:	6994      	ldr	r4, [r2, #24]
 801853a:	42a3      	cmp	r3, r4
 801853c:	db01      	blt.n	8018542 <__sfputc_r+0x16>
 801853e:	290a      	cmp	r1, #10
 8018540:	d103      	bne.n	801854a <__sfputc_r+0x1e>
 8018542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018546:	f000 bba7 	b.w	8018c98 <__swbuf_r>
 801854a:	6813      	ldr	r3, [r2, #0]
 801854c:	1c58      	adds	r0, r3, #1
 801854e:	6010      	str	r0, [r2, #0]
 8018550:	7019      	strb	r1, [r3, #0]
 8018552:	4608      	mov	r0, r1
 8018554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018558:	4770      	bx	lr

0801855a <__sfputs_r>:
 801855a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801855c:	4606      	mov	r6, r0
 801855e:	460f      	mov	r7, r1
 8018560:	4614      	mov	r4, r2
 8018562:	18d5      	adds	r5, r2, r3
 8018564:	42ac      	cmp	r4, r5
 8018566:	d101      	bne.n	801856c <__sfputs_r+0x12>
 8018568:	2000      	movs	r0, #0
 801856a:	e007      	b.n	801857c <__sfputs_r+0x22>
 801856c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018570:	463a      	mov	r2, r7
 8018572:	4630      	mov	r0, r6
 8018574:	f7ff ffda 	bl	801852c <__sfputc_r>
 8018578:	1c43      	adds	r3, r0, #1
 801857a:	d1f3      	bne.n	8018564 <__sfputs_r+0xa>
 801857c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018580 <_vfiprintf_r>:
 8018580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018584:	460d      	mov	r5, r1
 8018586:	b09d      	sub	sp, #116	; 0x74
 8018588:	4614      	mov	r4, r2
 801858a:	4698      	mov	r8, r3
 801858c:	4606      	mov	r6, r0
 801858e:	b118      	cbz	r0, 8018598 <_vfiprintf_r+0x18>
 8018590:	6a03      	ldr	r3, [r0, #32]
 8018592:	b90b      	cbnz	r3, 8018598 <_vfiprintf_r+0x18>
 8018594:	f7ff fcb6 	bl	8017f04 <__sinit>
 8018598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801859a:	07d9      	lsls	r1, r3, #31
 801859c:	d405      	bmi.n	80185aa <_vfiprintf_r+0x2a>
 801859e:	89ab      	ldrh	r3, [r5, #12]
 80185a0:	059a      	lsls	r2, r3, #22
 80185a2:	d402      	bmi.n	80185aa <_vfiprintf_r+0x2a>
 80185a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185a6:	f7ff fe0c 	bl	80181c2 <__retarget_lock_acquire_recursive>
 80185aa:	89ab      	ldrh	r3, [r5, #12]
 80185ac:	071b      	lsls	r3, r3, #28
 80185ae:	d501      	bpl.n	80185b4 <_vfiprintf_r+0x34>
 80185b0:	692b      	ldr	r3, [r5, #16]
 80185b2:	b99b      	cbnz	r3, 80185dc <_vfiprintf_r+0x5c>
 80185b4:	4629      	mov	r1, r5
 80185b6:	4630      	mov	r0, r6
 80185b8:	f000 fbac 	bl	8018d14 <__swsetup_r>
 80185bc:	b170      	cbz	r0, 80185dc <_vfiprintf_r+0x5c>
 80185be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185c0:	07dc      	lsls	r4, r3, #31
 80185c2:	d504      	bpl.n	80185ce <_vfiprintf_r+0x4e>
 80185c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185c8:	b01d      	add	sp, #116	; 0x74
 80185ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ce:	89ab      	ldrh	r3, [r5, #12]
 80185d0:	0598      	lsls	r0, r3, #22
 80185d2:	d4f7      	bmi.n	80185c4 <_vfiprintf_r+0x44>
 80185d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185d6:	f7ff fdf5 	bl	80181c4 <__retarget_lock_release_recursive>
 80185da:	e7f3      	b.n	80185c4 <_vfiprintf_r+0x44>
 80185dc:	2300      	movs	r3, #0
 80185de:	9309      	str	r3, [sp, #36]	; 0x24
 80185e0:	2320      	movs	r3, #32
 80185e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80185e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80185ea:	2330      	movs	r3, #48	; 0x30
 80185ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80187a0 <_vfiprintf_r+0x220>
 80185f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80185f4:	f04f 0901 	mov.w	r9, #1
 80185f8:	4623      	mov	r3, r4
 80185fa:	469a      	mov	sl, r3
 80185fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018600:	b10a      	cbz	r2, 8018606 <_vfiprintf_r+0x86>
 8018602:	2a25      	cmp	r2, #37	; 0x25
 8018604:	d1f9      	bne.n	80185fa <_vfiprintf_r+0x7a>
 8018606:	ebba 0b04 	subs.w	fp, sl, r4
 801860a:	d00b      	beq.n	8018624 <_vfiprintf_r+0xa4>
 801860c:	465b      	mov	r3, fp
 801860e:	4622      	mov	r2, r4
 8018610:	4629      	mov	r1, r5
 8018612:	4630      	mov	r0, r6
 8018614:	f7ff ffa1 	bl	801855a <__sfputs_r>
 8018618:	3001      	adds	r0, #1
 801861a:	f000 80a9 	beq.w	8018770 <_vfiprintf_r+0x1f0>
 801861e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018620:	445a      	add	r2, fp
 8018622:	9209      	str	r2, [sp, #36]	; 0x24
 8018624:	f89a 3000 	ldrb.w	r3, [sl]
 8018628:	2b00      	cmp	r3, #0
 801862a:	f000 80a1 	beq.w	8018770 <_vfiprintf_r+0x1f0>
 801862e:	2300      	movs	r3, #0
 8018630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018638:	f10a 0a01 	add.w	sl, sl, #1
 801863c:	9304      	str	r3, [sp, #16]
 801863e:	9307      	str	r3, [sp, #28]
 8018640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018644:	931a      	str	r3, [sp, #104]	; 0x68
 8018646:	4654      	mov	r4, sl
 8018648:	2205      	movs	r2, #5
 801864a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801864e:	4854      	ldr	r0, [pc, #336]	; (80187a0 <_vfiprintf_r+0x220>)
 8018650:	f7e7 fdde 	bl	8000210 <memchr>
 8018654:	9a04      	ldr	r2, [sp, #16]
 8018656:	b9d8      	cbnz	r0, 8018690 <_vfiprintf_r+0x110>
 8018658:	06d1      	lsls	r1, r2, #27
 801865a:	bf44      	itt	mi
 801865c:	2320      	movmi	r3, #32
 801865e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018662:	0713      	lsls	r3, r2, #28
 8018664:	bf44      	itt	mi
 8018666:	232b      	movmi	r3, #43	; 0x2b
 8018668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801866c:	f89a 3000 	ldrb.w	r3, [sl]
 8018670:	2b2a      	cmp	r3, #42	; 0x2a
 8018672:	d015      	beq.n	80186a0 <_vfiprintf_r+0x120>
 8018674:	9a07      	ldr	r2, [sp, #28]
 8018676:	4654      	mov	r4, sl
 8018678:	2000      	movs	r0, #0
 801867a:	f04f 0c0a 	mov.w	ip, #10
 801867e:	4621      	mov	r1, r4
 8018680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018684:	3b30      	subs	r3, #48	; 0x30
 8018686:	2b09      	cmp	r3, #9
 8018688:	d94d      	bls.n	8018726 <_vfiprintf_r+0x1a6>
 801868a:	b1b0      	cbz	r0, 80186ba <_vfiprintf_r+0x13a>
 801868c:	9207      	str	r2, [sp, #28]
 801868e:	e014      	b.n	80186ba <_vfiprintf_r+0x13a>
 8018690:	eba0 0308 	sub.w	r3, r0, r8
 8018694:	fa09 f303 	lsl.w	r3, r9, r3
 8018698:	4313      	orrs	r3, r2
 801869a:	9304      	str	r3, [sp, #16]
 801869c:	46a2      	mov	sl, r4
 801869e:	e7d2      	b.n	8018646 <_vfiprintf_r+0xc6>
 80186a0:	9b03      	ldr	r3, [sp, #12]
 80186a2:	1d19      	adds	r1, r3, #4
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	9103      	str	r1, [sp, #12]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	bfbb      	ittet	lt
 80186ac:	425b      	neglt	r3, r3
 80186ae:	f042 0202 	orrlt.w	r2, r2, #2
 80186b2:	9307      	strge	r3, [sp, #28]
 80186b4:	9307      	strlt	r3, [sp, #28]
 80186b6:	bfb8      	it	lt
 80186b8:	9204      	strlt	r2, [sp, #16]
 80186ba:	7823      	ldrb	r3, [r4, #0]
 80186bc:	2b2e      	cmp	r3, #46	; 0x2e
 80186be:	d10c      	bne.n	80186da <_vfiprintf_r+0x15a>
 80186c0:	7863      	ldrb	r3, [r4, #1]
 80186c2:	2b2a      	cmp	r3, #42	; 0x2a
 80186c4:	d134      	bne.n	8018730 <_vfiprintf_r+0x1b0>
 80186c6:	9b03      	ldr	r3, [sp, #12]
 80186c8:	1d1a      	adds	r2, r3, #4
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	9203      	str	r2, [sp, #12]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	bfb8      	it	lt
 80186d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80186d6:	3402      	adds	r4, #2
 80186d8:	9305      	str	r3, [sp, #20]
 80186da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80187b0 <_vfiprintf_r+0x230>
 80186de:	7821      	ldrb	r1, [r4, #0]
 80186e0:	2203      	movs	r2, #3
 80186e2:	4650      	mov	r0, sl
 80186e4:	f7e7 fd94 	bl	8000210 <memchr>
 80186e8:	b138      	cbz	r0, 80186fa <_vfiprintf_r+0x17a>
 80186ea:	9b04      	ldr	r3, [sp, #16]
 80186ec:	eba0 000a 	sub.w	r0, r0, sl
 80186f0:	2240      	movs	r2, #64	; 0x40
 80186f2:	4082      	lsls	r2, r0
 80186f4:	4313      	orrs	r3, r2
 80186f6:	3401      	adds	r4, #1
 80186f8:	9304      	str	r3, [sp, #16]
 80186fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186fe:	4829      	ldr	r0, [pc, #164]	; (80187a4 <_vfiprintf_r+0x224>)
 8018700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018704:	2206      	movs	r2, #6
 8018706:	f7e7 fd83 	bl	8000210 <memchr>
 801870a:	2800      	cmp	r0, #0
 801870c:	d03f      	beq.n	801878e <_vfiprintf_r+0x20e>
 801870e:	4b26      	ldr	r3, [pc, #152]	; (80187a8 <_vfiprintf_r+0x228>)
 8018710:	bb1b      	cbnz	r3, 801875a <_vfiprintf_r+0x1da>
 8018712:	9b03      	ldr	r3, [sp, #12]
 8018714:	3307      	adds	r3, #7
 8018716:	f023 0307 	bic.w	r3, r3, #7
 801871a:	3308      	adds	r3, #8
 801871c:	9303      	str	r3, [sp, #12]
 801871e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018720:	443b      	add	r3, r7
 8018722:	9309      	str	r3, [sp, #36]	; 0x24
 8018724:	e768      	b.n	80185f8 <_vfiprintf_r+0x78>
 8018726:	fb0c 3202 	mla	r2, ip, r2, r3
 801872a:	460c      	mov	r4, r1
 801872c:	2001      	movs	r0, #1
 801872e:	e7a6      	b.n	801867e <_vfiprintf_r+0xfe>
 8018730:	2300      	movs	r3, #0
 8018732:	3401      	adds	r4, #1
 8018734:	9305      	str	r3, [sp, #20]
 8018736:	4619      	mov	r1, r3
 8018738:	f04f 0c0a 	mov.w	ip, #10
 801873c:	4620      	mov	r0, r4
 801873e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018742:	3a30      	subs	r2, #48	; 0x30
 8018744:	2a09      	cmp	r2, #9
 8018746:	d903      	bls.n	8018750 <_vfiprintf_r+0x1d0>
 8018748:	2b00      	cmp	r3, #0
 801874a:	d0c6      	beq.n	80186da <_vfiprintf_r+0x15a>
 801874c:	9105      	str	r1, [sp, #20]
 801874e:	e7c4      	b.n	80186da <_vfiprintf_r+0x15a>
 8018750:	fb0c 2101 	mla	r1, ip, r1, r2
 8018754:	4604      	mov	r4, r0
 8018756:	2301      	movs	r3, #1
 8018758:	e7f0      	b.n	801873c <_vfiprintf_r+0x1bc>
 801875a:	ab03      	add	r3, sp, #12
 801875c:	9300      	str	r3, [sp, #0]
 801875e:	462a      	mov	r2, r5
 8018760:	4b12      	ldr	r3, [pc, #72]	; (80187ac <_vfiprintf_r+0x22c>)
 8018762:	a904      	add	r1, sp, #16
 8018764:	4630      	mov	r0, r6
 8018766:	f3af 8000 	nop.w
 801876a:	4607      	mov	r7, r0
 801876c:	1c78      	adds	r0, r7, #1
 801876e:	d1d6      	bne.n	801871e <_vfiprintf_r+0x19e>
 8018770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018772:	07d9      	lsls	r1, r3, #31
 8018774:	d405      	bmi.n	8018782 <_vfiprintf_r+0x202>
 8018776:	89ab      	ldrh	r3, [r5, #12]
 8018778:	059a      	lsls	r2, r3, #22
 801877a:	d402      	bmi.n	8018782 <_vfiprintf_r+0x202>
 801877c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801877e:	f7ff fd21 	bl	80181c4 <__retarget_lock_release_recursive>
 8018782:	89ab      	ldrh	r3, [r5, #12]
 8018784:	065b      	lsls	r3, r3, #25
 8018786:	f53f af1d 	bmi.w	80185c4 <_vfiprintf_r+0x44>
 801878a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801878c:	e71c      	b.n	80185c8 <_vfiprintf_r+0x48>
 801878e:	ab03      	add	r3, sp, #12
 8018790:	9300      	str	r3, [sp, #0]
 8018792:	462a      	mov	r2, r5
 8018794:	4b05      	ldr	r3, [pc, #20]	; (80187ac <_vfiprintf_r+0x22c>)
 8018796:	a904      	add	r1, sp, #16
 8018798:	4630      	mov	r0, r6
 801879a:	f000 f879 	bl	8018890 <_printf_i>
 801879e:	e7e4      	b.n	801876a <_vfiprintf_r+0x1ea>
 80187a0:	0801a011 	.word	0x0801a011
 80187a4:	0801a01b 	.word	0x0801a01b
 80187a8:	00000000 	.word	0x00000000
 80187ac:	0801855b 	.word	0x0801855b
 80187b0:	0801a017 	.word	0x0801a017

080187b4 <_printf_common>:
 80187b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b8:	4616      	mov	r6, r2
 80187ba:	4699      	mov	r9, r3
 80187bc:	688a      	ldr	r2, [r1, #8]
 80187be:	690b      	ldr	r3, [r1, #16]
 80187c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80187c4:	4293      	cmp	r3, r2
 80187c6:	bfb8      	it	lt
 80187c8:	4613      	movlt	r3, r2
 80187ca:	6033      	str	r3, [r6, #0]
 80187cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80187d0:	4607      	mov	r7, r0
 80187d2:	460c      	mov	r4, r1
 80187d4:	b10a      	cbz	r2, 80187da <_printf_common+0x26>
 80187d6:	3301      	adds	r3, #1
 80187d8:	6033      	str	r3, [r6, #0]
 80187da:	6823      	ldr	r3, [r4, #0]
 80187dc:	0699      	lsls	r1, r3, #26
 80187de:	bf42      	ittt	mi
 80187e0:	6833      	ldrmi	r3, [r6, #0]
 80187e2:	3302      	addmi	r3, #2
 80187e4:	6033      	strmi	r3, [r6, #0]
 80187e6:	6825      	ldr	r5, [r4, #0]
 80187e8:	f015 0506 	ands.w	r5, r5, #6
 80187ec:	d106      	bne.n	80187fc <_printf_common+0x48>
 80187ee:	f104 0a19 	add.w	sl, r4, #25
 80187f2:	68e3      	ldr	r3, [r4, #12]
 80187f4:	6832      	ldr	r2, [r6, #0]
 80187f6:	1a9b      	subs	r3, r3, r2
 80187f8:	42ab      	cmp	r3, r5
 80187fa:	dc26      	bgt.n	801884a <_printf_common+0x96>
 80187fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018800:	1e13      	subs	r3, r2, #0
 8018802:	6822      	ldr	r2, [r4, #0]
 8018804:	bf18      	it	ne
 8018806:	2301      	movne	r3, #1
 8018808:	0692      	lsls	r2, r2, #26
 801880a:	d42b      	bmi.n	8018864 <_printf_common+0xb0>
 801880c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018810:	4649      	mov	r1, r9
 8018812:	4638      	mov	r0, r7
 8018814:	47c0      	blx	r8
 8018816:	3001      	adds	r0, #1
 8018818:	d01e      	beq.n	8018858 <_printf_common+0xa4>
 801881a:	6823      	ldr	r3, [r4, #0]
 801881c:	6922      	ldr	r2, [r4, #16]
 801881e:	f003 0306 	and.w	r3, r3, #6
 8018822:	2b04      	cmp	r3, #4
 8018824:	bf02      	ittt	eq
 8018826:	68e5      	ldreq	r5, [r4, #12]
 8018828:	6833      	ldreq	r3, [r6, #0]
 801882a:	1aed      	subeq	r5, r5, r3
 801882c:	68a3      	ldr	r3, [r4, #8]
 801882e:	bf0c      	ite	eq
 8018830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018834:	2500      	movne	r5, #0
 8018836:	4293      	cmp	r3, r2
 8018838:	bfc4      	itt	gt
 801883a:	1a9b      	subgt	r3, r3, r2
 801883c:	18ed      	addgt	r5, r5, r3
 801883e:	2600      	movs	r6, #0
 8018840:	341a      	adds	r4, #26
 8018842:	42b5      	cmp	r5, r6
 8018844:	d11a      	bne.n	801887c <_printf_common+0xc8>
 8018846:	2000      	movs	r0, #0
 8018848:	e008      	b.n	801885c <_printf_common+0xa8>
 801884a:	2301      	movs	r3, #1
 801884c:	4652      	mov	r2, sl
 801884e:	4649      	mov	r1, r9
 8018850:	4638      	mov	r0, r7
 8018852:	47c0      	blx	r8
 8018854:	3001      	adds	r0, #1
 8018856:	d103      	bne.n	8018860 <_printf_common+0xac>
 8018858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018860:	3501      	adds	r5, #1
 8018862:	e7c6      	b.n	80187f2 <_printf_common+0x3e>
 8018864:	18e1      	adds	r1, r4, r3
 8018866:	1c5a      	adds	r2, r3, #1
 8018868:	2030      	movs	r0, #48	; 0x30
 801886a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801886e:	4422      	add	r2, r4
 8018870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018878:	3302      	adds	r3, #2
 801887a:	e7c7      	b.n	801880c <_printf_common+0x58>
 801887c:	2301      	movs	r3, #1
 801887e:	4622      	mov	r2, r4
 8018880:	4649      	mov	r1, r9
 8018882:	4638      	mov	r0, r7
 8018884:	47c0      	blx	r8
 8018886:	3001      	adds	r0, #1
 8018888:	d0e6      	beq.n	8018858 <_printf_common+0xa4>
 801888a:	3601      	adds	r6, #1
 801888c:	e7d9      	b.n	8018842 <_printf_common+0x8e>
	...

08018890 <_printf_i>:
 8018890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018894:	7e0f      	ldrb	r7, [r1, #24]
 8018896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018898:	2f78      	cmp	r7, #120	; 0x78
 801889a:	4691      	mov	r9, r2
 801889c:	4680      	mov	r8, r0
 801889e:	460c      	mov	r4, r1
 80188a0:	469a      	mov	sl, r3
 80188a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80188a6:	d807      	bhi.n	80188b8 <_printf_i+0x28>
 80188a8:	2f62      	cmp	r7, #98	; 0x62
 80188aa:	d80a      	bhi.n	80188c2 <_printf_i+0x32>
 80188ac:	2f00      	cmp	r7, #0
 80188ae:	f000 80d4 	beq.w	8018a5a <_printf_i+0x1ca>
 80188b2:	2f58      	cmp	r7, #88	; 0x58
 80188b4:	f000 80c0 	beq.w	8018a38 <_printf_i+0x1a8>
 80188b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80188bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80188c0:	e03a      	b.n	8018938 <_printf_i+0xa8>
 80188c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80188c6:	2b15      	cmp	r3, #21
 80188c8:	d8f6      	bhi.n	80188b8 <_printf_i+0x28>
 80188ca:	a101      	add	r1, pc, #4	; (adr r1, 80188d0 <_printf_i+0x40>)
 80188cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80188d0:	08018929 	.word	0x08018929
 80188d4:	0801893d 	.word	0x0801893d
 80188d8:	080188b9 	.word	0x080188b9
 80188dc:	080188b9 	.word	0x080188b9
 80188e0:	080188b9 	.word	0x080188b9
 80188e4:	080188b9 	.word	0x080188b9
 80188e8:	0801893d 	.word	0x0801893d
 80188ec:	080188b9 	.word	0x080188b9
 80188f0:	080188b9 	.word	0x080188b9
 80188f4:	080188b9 	.word	0x080188b9
 80188f8:	080188b9 	.word	0x080188b9
 80188fc:	08018a41 	.word	0x08018a41
 8018900:	08018969 	.word	0x08018969
 8018904:	080189fb 	.word	0x080189fb
 8018908:	080188b9 	.word	0x080188b9
 801890c:	080188b9 	.word	0x080188b9
 8018910:	08018a63 	.word	0x08018a63
 8018914:	080188b9 	.word	0x080188b9
 8018918:	08018969 	.word	0x08018969
 801891c:	080188b9 	.word	0x080188b9
 8018920:	080188b9 	.word	0x080188b9
 8018924:	08018a03 	.word	0x08018a03
 8018928:	682b      	ldr	r3, [r5, #0]
 801892a:	1d1a      	adds	r2, r3, #4
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	602a      	str	r2, [r5, #0]
 8018930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018938:	2301      	movs	r3, #1
 801893a:	e09f      	b.n	8018a7c <_printf_i+0x1ec>
 801893c:	6820      	ldr	r0, [r4, #0]
 801893e:	682b      	ldr	r3, [r5, #0]
 8018940:	0607      	lsls	r7, r0, #24
 8018942:	f103 0104 	add.w	r1, r3, #4
 8018946:	6029      	str	r1, [r5, #0]
 8018948:	d501      	bpl.n	801894e <_printf_i+0xbe>
 801894a:	681e      	ldr	r6, [r3, #0]
 801894c:	e003      	b.n	8018956 <_printf_i+0xc6>
 801894e:	0646      	lsls	r6, r0, #25
 8018950:	d5fb      	bpl.n	801894a <_printf_i+0xba>
 8018952:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018956:	2e00      	cmp	r6, #0
 8018958:	da03      	bge.n	8018962 <_printf_i+0xd2>
 801895a:	232d      	movs	r3, #45	; 0x2d
 801895c:	4276      	negs	r6, r6
 801895e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018962:	485a      	ldr	r0, [pc, #360]	; (8018acc <_printf_i+0x23c>)
 8018964:	230a      	movs	r3, #10
 8018966:	e012      	b.n	801898e <_printf_i+0xfe>
 8018968:	682b      	ldr	r3, [r5, #0]
 801896a:	6820      	ldr	r0, [r4, #0]
 801896c:	1d19      	adds	r1, r3, #4
 801896e:	6029      	str	r1, [r5, #0]
 8018970:	0605      	lsls	r5, r0, #24
 8018972:	d501      	bpl.n	8018978 <_printf_i+0xe8>
 8018974:	681e      	ldr	r6, [r3, #0]
 8018976:	e002      	b.n	801897e <_printf_i+0xee>
 8018978:	0641      	lsls	r1, r0, #25
 801897a:	d5fb      	bpl.n	8018974 <_printf_i+0xe4>
 801897c:	881e      	ldrh	r6, [r3, #0]
 801897e:	4853      	ldr	r0, [pc, #332]	; (8018acc <_printf_i+0x23c>)
 8018980:	2f6f      	cmp	r7, #111	; 0x6f
 8018982:	bf0c      	ite	eq
 8018984:	2308      	moveq	r3, #8
 8018986:	230a      	movne	r3, #10
 8018988:	2100      	movs	r1, #0
 801898a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801898e:	6865      	ldr	r5, [r4, #4]
 8018990:	60a5      	str	r5, [r4, #8]
 8018992:	2d00      	cmp	r5, #0
 8018994:	bfa2      	ittt	ge
 8018996:	6821      	ldrge	r1, [r4, #0]
 8018998:	f021 0104 	bicge.w	r1, r1, #4
 801899c:	6021      	strge	r1, [r4, #0]
 801899e:	b90e      	cbnz	r6, 80189a4 <_printf_i+0x114>
 80189a0:	2d00      	cmp	r5, #0
 80189a2:	d04b      	beq.n	8018a3c <_printf_i+0x1ac>
 80189a4:	4615      	mov	r5, r2
 80189a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80189aa:	fb03 6711 	mls	r7, r3, r1, r6
 80189ae:	5dc7      	ldrb	r7, [r0, r7]
 80189b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80189b4:	4637      	mov	r7, r6
 80189b6:	42bb      	cmp	r3, r7
 80189b8:	460e      	mov	r6, r1
 80189ba:	d9f4      	bls.n	80189a6 <_printf_i+0x116>
 80189bc:	2b08      	cmp	r3, #8
 80189be:	d10b      	bne.n	80189d8 <_printf_i+0x148>
 80189c0:	6823      	ldr	r3, [r4, #0]
 80189c2:	07de      	lsls	r6, r3, #31
 80189c4:	d508      	bpl.n	80189d8 <_printf_i+0x148>
 80189c6:	6923      	ldr	r3, [r4, #16]
 80189c8:	6861      	ldr	r1, [r4, #4]
 80189ca:	4299      	cmp	r1, r3
 80189cc:	bfde      	ittt	le
 80189ce:	2330      	movle	r3, #48	; 0x30
 80189d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80189d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80189d8:	1b52      	subs	r2, r2, r5
 80189da:	6122      	str	r2, [r4, #16]
 80189dc:	f8cd a000 	str.w	sl, [sp]
 80189e0:	464b      	mov	r3, r9
 80189e2:	aa03      	add	r2, sp, #12
 80189e4:	4621      	mov	r1, r4
 80189e6:	4640      	mov	r0, r8
 80189e8:	f7ff fee4 	bl	80187b4 <_printf_common>
 80189ec:	3001      	adds	r0, #1
 80189ee:	d14a      	bne.n	8018a86 <_printf_i+0x1f6>
 80189f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189f4:	b004      	add	sp, #16
 80189f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189fa:	6823      	ldr	r3, [r4, #0]
 80189fc:	f043 0320 	orr.w	r3, r3, #32
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	4833      	ldr	r0, [pc, #204]	; (8018ad0 <_printf_i+0x240>)
 8018a04:	2778      	movs	r7, #120	; 0x78
 8018a06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018a0a:	6823      	ldr	r3, [r4, #0]
 8018a0c:	6829      	ldr	r1, [r5, #0]
 8018a0e:	061f      	lsls	r7, r3, #24
 8018a10:	f851 6b04 	ldr.w	r6, [r1], #4
 8018a14:	d402      	bmi.n	8018a1c <_printf_i+0x18c>
 8018a16:	065f      	lsls	r7, r3, #25
 8018a18:	bf48      	it	mi
 8018a1a:	b2b6      	uxthmi	r6, r6
 8018a1c:	07df      	lsls	r7, r3, #31
 8018a1e:	bf48      	it	mi
 8018a20:	f043 0320 	orrmi.w	r3, r3, #32
 8018a24:	6029      	str	r1, [r5, #0]
 8018a26:	bf48      	it	mi
 8018a28:	6023      	strmi	r3, [r4, #0]
 8018a2a:	b91e      	cbnz	r6, 8018a34 <_printf_i+0x1a4>
 8018a2c:	6823      	ldr	r3, [r4, #0]
 8018a2e:	f023 0320 	bic.w	r3, r3, #32
 8018a32:	6023      	str	r3, [r4, #0]
 8018a34:	2310      	movs	r3, #16
 8018a36:	e7a7      	b.n	8018988 <_printf_i+0xf8>
 8018a38:	4824      	ldr	r0, [pc, #144]	; (8018acc <_printf_i+0x23c>)
 8018a3a:	e7e4      	b.n	8018a06 <_printf_i+0x176>
 8018a3c:	4615      	mov	r5, r2
 8018a3e:	e7bd      	b.n	80189bc <_printf_i+0x12c>
 8018a40:	682b      	ldr	r3, [r5, #0]
 8018a42:	6826      	ldr	r6, [r4, #0]
 8018a44:	6961      	ldr	r1, [r4, #20]
 8018a46:	1d18      	adds	r0, r3, #4
 8018a48:	6028      	str	r0, [r5, #0]
 8018a4a:	0635      	lsls	r5, r6, #24
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	d501      	bpl.n	8018a54 <_printf_i+0x1c4>
 8018a50:	6019      	str	r1, [r3, #0]
 8018a52:	e002      	b.n	8018a5a <_printf_i+0x1ca>
 8018a54:	0670      	lsls	r0, r6, #25
 8018a56:	d5fb      	bpl.n	8018a50 <_printf_i+0x1c0>
 8018a58:	8019      	strh	r1, [r3, #0]
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	6123      	str	r3, [r4, #16]
 8018a5e:	4615      	mov	r5, r2
 8018a60:	e7bc      	b.n	80189dc <_printf_i+0x14c>
 8018a62:	682b      	ldr	r3, [r5, #0]
 8018a64:	1d1a      	adds	r2, r3, #4
 8018a66:	602a      	str	r2, [r5, #0]
 8018a68:	681d      	ldr	r5, [r3, #0]
 8018a6a:	6862      	ldr	r2, [r4, #4]
 8018a6c:	2100      	movs	r1, #0
 8018a6e:	4628      	mov	r0, r5
 8018a70:	f7e7 fbce 	bl	8000210 <memchr>
 8018a74:	b108      	cbz	r0, 8018a7a <_printf_i+0x1ea>
 8018a76:	1b40      	subs	r0, r0, r5
 8018a78:	6060      	str	r0, [r4, #4]
 8018a7a:	6863      	ldr	r3, [r4, #4]
 8018a7c:	6123      	str	r3, [r4, #16]
 8018a7e:	2300      	movs	r3, #0
 8018a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a84:	e7aa      	b.n	80189dc <_printf_i+0x14c>
 8018a86:	6923      	ldr	r3, [r4, #16]
 8018a88:	462a      	mov	r2, r5
 8018a8a:	4649      	mov	r1, r9
 8018a8c:	4640      	mov	r0, r8
 8018a8e:	47d0      	blx	sl
 8018a90:	3001      	adds	r0, #1
 8018a92:	d0ad      	beq.n	80189f0 <_printf_i+0x160>
 8018a94:	6823      	ldr	r3, [r4, #0]
 8018a96:	079b      	lsls	r3, r3, #30
 8018a98:	d413      	bmi.n	8018ac2 <_printf_i+0x232>
 8018a9a:	68e0      	ldr	r0, [r4, #12]
 8018a9c:	9b03      	ldr	r3, [sp, #12]
 8018a9e:	4298      	cmp	r0, r3
 8018aa0:	bfb8      	it	lt
 8018aa2:	4618      	movlt	r0, r3
 8018aa4:	e7a6      	b.n	80189f4 <_printf_i+0x164>
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	4632      	mov	r2, r6
 8018aaa:	4649      	mov	r1, r9
 8018aac:	4640      	mov	r0, r8
 8018aae:	47d0      	blx	sl
 8018ab0:	3001      	adds	r0, #1
 8018ab2:	d09d      	beq.n	80189f0 <_printf_i+0x160>
 8018ab4:	3501      	adds	r5, #1
 8018ab6:	68e3      	ldr	r3, [r4, #12]
 8018ab8:	9903      	ldr	r1, [sp, #12]
 8018aba:	1a5b      	subs	r3, r3, r1
 8018abc:	42ab      	cmp	r3, r5
 8018abe:	dcf2      	bgt.n	8018aa6 <_printf_i+0x216>
 8018ac0:	e7eb      	b.n	8018a9a <_printf_i+0x20a>
 8018ac2:	2500      	movs	r5, #0
 8018ac4:	f104 0619 	add.w	r6, r4, #25
 8018ac8:	e7f5      	b.n	8018ab6 <_printf_i+0x226>
 8018aca:	bf00      	nop
 8018acc:	0801a022 	.word	0x0801a022
 8018ad0:	0801a033 	.word	0x0801a033

08018ad4 <__sflush_r>:
 8018ad4:	898a      	ldrh	r2, [r1, #12]
 8018ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ada:	4605      	mov	r5, r0
 8018adc:	0710      	lsls	r0, r2, #28
 8018ade:	460c      	mov	r4, r1
 8018ae0:	d458      	bmi.n	8018b94 <__sflush_r+0xc0>
 8018ae2:	684b      	ldr	r3, [r1, #4]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	dc05      	bgt.n	8018af4 <__sflush_r+0x20>
 8018ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	dc02      	bgt.n	8018af4 <__sflush_r+0x20>
 8018aee:	2000      	movs	r0, #0
 8018af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018af6:	2e00      	cmp	r6, #0
 8018af8:	d0f9      	beq.n	8018aee <__sflush_r+0x1a>
 8018afa:	2300      	movs	r3, #0
 8018afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b00:	682f      	ldr	r7, [r5, #0]
 8018b02:	6a21      	ldr	r1, [r4, #32]
 8018b04:	602b      	str	r3, [r5, #0]
 8018b06:	d032      	beq.n	8018b6e <__sflush_r+0x9a>
 8018b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b0a:	89a3      	ldrh	r3, [r4, #12]
 8018b0c:	075a      	lsls	r2, r3, #29
 8018b0e:	d505      	bpl.n	8018b1c <__sflush_r+0x48>
 8018b10:	6863      	ldr	r3, [r4, #4]
 8018b12:	1ac0      	subs	r0, r0, r3
 8018b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b16:	b10b      	cbz	r3, 8018b1c <__sflush_r+0x48>
 8018b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b1a:	1ac0      	subs	r0, r0, r3
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	4602      	mov	r2, r0
 8018b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b22:	6a21      	ldr	r1, [r4, #32]
 8018b24:	4628      	mov	r0, r5
 8018b26:	47b0      	blx	r6
 8018b28:	1c43      	adds	r3, r0, #1
 8018b2a:	89a3      	ldrh	r3, [r4, #12]
 8018b2c:	d106      	bne.n	8018b3c <__sflush_r+0x68>
 8018b2e:	6829      	ldr	r1, [r5, #0]
 8018b30:	291d      	cmp	r1, #29
 8018b32:	d82b      	bhi.n	8018b8c <__sflush_r+0xb8>
 8018b34:	4a29      	ldr	r2, [pc, #164]	; (8018bdc <__sflush_r+0x108>)
 8018b36:	410a      	asrs	r2, r1
 8018b38:	07d6      	lsls	r6, r2, #31
 8018b3a:	d427      	bmi.n	8018b8c <__sflush_r+0xb8>
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	6062      	str	r2, [r4, #4]
 8018b40:	04d9      	lsls	r1, r3, #19
 8018b42:	6922      	ldr	r2, [r4, #16]
 8018b44:	6022      	str	r2, [r4, #0]
 8018b46:	d504      	bpl.n	8018b52 <__sflush_r+0x7e>
 8018b48:	1c42      	adds	r2, r0, #1
 8018b4a:	d101      	bne.n	8018b50 <__sflush_r+0x7c>
 8018b4c:	682b      	ldr	r3, [r5, #0]
 8018b4e:	b903      	cbnz	r3, 8018b52 <__sflush_r+0x7e>
 8018b50:	6560      	str	r0, [r4, #84]	; 0x54
 8018b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b54:	602f      	str	r7, [r5, #0]
 8018b56:	2900      	cmp	r1, #0
 8018b58:	d0c9      	beq.n	8018aee <__sflush_r+0x1a>
 8018b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b5e:	4299      	cmp	r1, r3
 8018b60:	d002      	beq.n	8018b68 <__sflush_r+0x94>
 8018b62:	4628      	mov	r0, r5
 8018b64:	f7ff fb3e 	bl	80181e4 <_free_r>
 8018b68:	2000      	movs	r0, #0
 8018b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8018b6c:	e7c0      	b.n	8018af0 <__sflush_r+0x1c>
 8018b6e:	2301      	movs	r3, #1
 8018b70:	4628      	mov	r0, r5
 8018b72:	47b0      	blx	r6
 8018b74:	1c41      	adds	r1, r0, #1
 8018b76:	d1c8      	bne.n	8018b0a <__sflush_r+0x36>
 8018b78:	682b      	ldr	r3, [r5, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d0c5      	beq.n	8018b0a <__sflush_r+0x36>
 8018b7e:	2b1d      	cmp	r3, #29
 8018b80:	d001      	beq.n	8018b86 <__sflush_r+0xb2>
 8018b82:	2b16      	cmp	r3, #22
 8018b84:	d101      	bne.n	8018b8a <__sflush_r+0xb6>
 8018b86:	602f      	str	r7, [r5, #0]
 8018b88:	e7b1      	b.n	8018aee <__sflush_r+0x1a>
 8018b8a:	89a3      	ldrh	r3, [r4, #12]
 8018b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b90:	81a3      	strh	r3, [r4, #12]
 8018b92:	e7ad      	b.n	8018af0 <__sflush_r+0x1c>
 8018b94:	690f      	ldr	r7, [r1, #16]
 8018b96:	2f00      	cmp	r7, #0
 8018b98:	d0a9      	beq.n	8018aee <__sflush_r+0x1a>
 8018b9a:	0793      	lsls	r3, r2, #30
 8018b9c:	680e      	ldr	r6, [r1, #0]
 8018b9e:	bf08      	it	eq
 8018ba0:	694b      	ldreq	r3, [r1, #20]
 8018ba2:	600f      	str	r7, [r1, #0]
 8018ba4:	bf18      	it	ne
 8018ba6:	2300      	movne	r3, #0
 8018ba8:	eba6 0807 	sub.w	r8, r6, r7
 8018bac:	608b      	str	r3, [r1, #8]
 8018bae:	f1b8 0f00 	cmp.w	r8, #0
 8018bb2:	dd9c      	ble.n	8018aee <__sflush_r+0x1a>
 8018bb4:	6a21      	ldr	r1, [r4, #32]
 8018bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018bb8:	4643      	mov	r3, r8
 8018bba:	463a      	mov	r2, r7
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	47b0      	blx	r6
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	dc06      	bgt.n	8018bd2 <__sflush_r+0xfe>
 8018bc4:	89a3      	ldrh	r3, [r4, #12]
 8018bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bca:	81a3      	strh	r3, [r4, #12]
 8018bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018bd0:	e78e      	b.n	8018af0 <__sflush_r+0x1c>
 8018bd2:	4407      	add	r7, r0
 8018bd4:	eba8 0800 	sub.w	r8, r8, r0
 8018bd8:	e7e9      	b.n	8018bae <__sflush_r+0xda>
 8018bda:	bf00      	nop
 8018bdc:	dfbffffe 	.word	0xdfbffffe

08018be0 <_fflush_r>:
 8018be0:	b538      	push	{r3, r4, r5, lr}
 8018be2:	690b      	ldr	r3, [r1, #16]
 8018be4:	4605      	mov	r5, r0
 8018be6:	460c      	mov	r4, r1
 8018be8:	b913      	cbnz	r3, 8018bf0 <_fflush_r+0x10>
 8018bea:	2500      	movs	r5, #0
 8018bec:	4628      	mov	r0, r5
 8018bee:	bd38      	pop	{r3, r4, r5, pc}
 8018bf0:	b118      	cbz	r0, 8018bfa <_fflush_r+0x1a>
 8018bf2:	6a03      	ldr	r3, [r0, #32]
 8018bf4:	b90b      	cbnz	r3, 8018bfa <_fflush_r+0x1a>
 8018bf6:	f7ff f985 	bl	8017f04 <__sinit>
 8018bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d0f3      	beq.n	8018bea <_fflush_r+0xa>
 8018c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c04:	07d0      	lsls	r0, r2, #31
 8018c06:	d404      	bmi.n	8018c12 <_fflush_r+0x32>
 8018c08:	0599      	lsls	r1, r3, #22
 8018c0a:	d402      	bmi.n	8018c12 <_fflush_r+0x32>
 8018c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c0e:	f7ff fad8 	bl	80181c2 <__retarget_lock_acquire_recursive>
 8018c12:	4628      	mov	r0, r5
 8018c14:	4621      	mov	r1, r4
 8018c16:	f7ff ff5d 	bl	8018ad4 <__sflush_r>
 8018c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c1c:	07da      	lsls	r2, r3, #31
 8018c1e:	4605      	mov	r5, r0
 8018c20:	d4e4      	bmi.n	8018bec <_fflush_r+0xc>
 8018c22:	89a3      	ldrh	r3, [r4, #12]
 8018c24:	059b      	lsls	r3, r3, #22
 8018c26:	d4e1      	bmi.n	8018bec <_fflush_r+0xc>
 8018c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c2a:	f7ff facb 	bl	80181c4 <__retarget_lock_release_recursive>
 8018c2e:	e7dd      	b.n	8018bec <_fflush_r+0xc>

08018c30 <_putc_r>:
 8018c30:	b570      	push	{r4, r5, r6, lr}
 8018c32:	460d      	mov	r5, r1
 8018c34:	4614      	mov	r4, r2
 8018c36:	4606      	mov	r6, r0
 8018c38:	b118      	cbz	r0, 8018c42 <_putc_r+0x12>
 8018c3a:	6a03      	ldr	r3, [r0, #32]
 8018c3c:	b90b      	cbnz	r3, 8018c42 <_putc_r+0x12>
 8018c3e:	f7ff f961 	bl	8017f04 <__sinit>
 8018c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c44:	07d8      	lsls	r0, r3, #31
 8018c46:	d405      	bmi.n	8018c54 <_putc_r+0x24>
 8018c48:	89a3      	ldrh	r3, [r4, #12]
 8018c4a:	0599      	lsls	r1, r3, #22
 8018c4c:	d402      	bmi.n	8018c54 <_putc_r+0x24>
 8018c4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c50:	f7ff fab7 	bl	80181c2 <__retarget_lock_acquire_recursive>
 8018c54:	68a3      	ldr	r3, [r4, #8]
 8018c56:	3b01      	subs	r3, #1
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	60a3      	str	r3, [r4, #8]
 8018c5c:	da05      	bge.n	8018c6a <_putc_r+0x3a>
 8018c5e:	69a2      	ldr	r2, [r4, #24]
 8018c60:	4293      	cmp	r3, r2
 8018c62:	db12      	blt.n	8018c8a <_putc_r+0x5a>
 8018c64:	b2eb      	uxtb	r3, r5
 8018c66:	2b0a      	cmp	r3, #10
 8018c68:	d00f      	beq.n	8018c8a <_putc_r+0x5a>
 8018c6a:	6823      	ldr	r3, [r4, #0]
 8018c6c:	1c5a      	adds	r2, r3, #1
 8018c6e:	6022      	str	r2, [r4, #0]
 8018c70:	701d      	strb	r5, [r3, #0]
 8018c72:	b2ed      	uxtb	r5, r5
 8018c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c76:	07da      	lsls	r2, r3, #31
 8018c78:	d405      	bmi.n	8018c86 <_putc_r+0x56>
 8018c7a:	89a3      	ldrh	r3, [r4, #12]
 8018c7c:	059b      	lsls	r3, r3, #22
 8018c7e:	d402      	bmi.n	8018c86 <_putc_r+0x56>
 8018c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c82:	f7ff fa9f 	bl	80181c4 <__retarget_lock_release_recursive>
 8018c86:	4628      	mov	r0, r5
 8018c88:	bd70      	pop	{r4, r5, r6, pc}
 8018c8a:	4629      	mov	r1, r5
 8018c8c:	4622      	mov	r2, r4
 8018c8e:	4630      	mov	r0, r6
 8018c90:	f000 f802 	bl	8018c98 <__swbuf_r>
 8018c94:	4605      	mov	r5, r0
 8018c96:	e7ed      	b.n	8018c74 <_putc_r+0x44>

08018c98 <__swbuf_r>:
 8018c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c9a:	460e      	mov	r6, r1
 8018c9c:	4614      	mov	r4, r2
 8018c9e:	4605      	mov	r5, r0
 8018ca0:	b118      	cbz	r0, 8018caa <__swbuf_r+0x12>
 8018ca2:	6a03      	ldr	r3, [r0, #32]
 8018ca4:	b90b      	cbnz	r3, 8018caa <__swbuf_r+0x12>
 8018ca6:	f7ff f92d 	bl	8017f04 <__sinit>
 8018caa:	69a3      	ldr	r3, [r4, #24]
 8018cac:	60a3      	str	r3, [r4, #8]
 8018cae:	89a3      	ldrh	r3, [r4, #12]
 8018cb0:	071a      	lsls	r2, r3, #28
 8018cb2:	d525      	bpl.n	8018d00 <__swbuf_r+0x68>
 8018cb4:	6923      	ldr	r3, [r4, #16]
 8018cb6:	b31b      	cbz	r3, 8018d00 <__swbuf_r+0x68>
 8018cb8:	6823      	ldr	r3, [r4, #0]
 8018cba:	6922      	ldr	r2, [r4, #16]
 8018cbc:	1a98      	subs	r0, r3, r2
 8018cbe:	6963      	ldr	r3, [r4, #20]
 8018cc0:	b2f6      	uxtb	r6, r6
 8018cc2:	4283      	cmp	r3, r0
 8018cc4:	4637      	mov	r7, r6
 8018cc6:	dc04      	bgt.n	8018cd2 <__swbuf_r+0x3a>
 8018cc8:	4621      	mov	r1, r4
 8018cca:	4628      	mov	r0, r5
 8018ccc:	f7ff ff88 	bl	8018be0 <_fflush_r>
 8018cd0:	b9e0      	cbnz	r0, 8018d0c <__swbuf_r+0x74>
 8018cd2:	68a3      	ldr	r3, [r4, #8]
 8018cd4:	3b01      	subs	r3, #1
 8018cd6:	60a3      	str	r3, [r4, #8]
 8018cd8:	6823      	ldr	r3, [r4, #0]
 8018cda:	1c5a      	adds	r2, r3, #1
 8018cdc:	6022      	str	r2, [r4, #0]
 8018cde:	701e      	strb	r6, [r3, #0]
 8018ce0:	6962      	ldr	r2, [r4, #20]
 8018ce2:	1c43      	adds	r3, r0, #1
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d004      	beq.n	8018cf2 <__swbuf_r+0x5a>
 8018ce8:	89a3      	ldrh	r3, [r4, #12]
 8018cea:	07db      	lsls	r3, r3, #31
 8018cec:	d506      	bpl.n	8018cfc <__swbuf_r+0x64>
 8018cee:	2e0a      	cmp	r6, #10
 8018cf0:	d104      	bne.n	8018cfc <__swbuf_r+0x64>
 8018cf2:	4621      	mov	r1, r4
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	f7ff ff73 	bl	8018be0 <_fflush_r>
 8018cfa:	b938      	cbnz	r0, 8018d0c <__swbuf_r+0x74>
 8018cfc:	4638      	mov	r0, r7
 8018cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d00:	4621      	mov	r1, r4
 8018d02:	4628      	mov	r0, r5
 8018d04:	f000 f806 	bl	8018d14 <__swsetup_r>
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	d0d5      	beq.n	8018cb8 <__swbuf_r+0x20>
 8018d0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018d10:	e7f4      	b.n	8018cfc <__swbuf_r+0x64>
	...

08018d14 <__swsetup_r>:
 8018d14:	b538      	push	{r3, r4, r5, lr}
 8018d16:	4b2a      	ldr	r3, [pc, #168]	; (8018dc0 <__swsetup_r+0xac>)
 8018d18:	4605      	mov	r5, r0
 8018d1a:	6818      	ldr	r0, [r3, #0]
 8018d1c:	460c      	mov	r4, r1
 8018d1e:	b118      	cbz	r0, 8018d28 <__swsetup_r+0x14>
 8018d20:	6a03      	ldr	r3, [r0, #32]
 8018d22:	b90b      	cbnz	r3, 8018d28 <__swsetup_r+0x14>
 8018d24:	f7ff f8ee 	bl	8017f04 <__sinit>
 8018d28:	89a3      	ldrh	r3, [r4, #12]
 8018d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d2e:	0718      	lsls	r0, r3, #28
 8018d30:	d422      	bmi.n	8018d78 <__swsetup_r+0x64>
 8018d32:	06d9      	lsls	r1, r3, #27
 8018d34:	d407      	bmi.n	8018d46 <__swsetup_r+0x32>
 8018d36:	2309      	movs	r3, #9
 8018d38:	602b      	str	r3, [r5, #0]
 8018d3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018d3e:	81a3      	strh	r3, [r4, #12]
 8018d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d44:	e034      	b.n	8018db0 <__swsetup_r+0x9c>
 8018d46:	0758      	lsls	r0, r3, #29
 8018d48:	d512      	bpl.n	8018d70 <__swsetup_r+0x5c>
 8018d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d4c:	b141      	cbz	r1, 8018d60 <__swsetup_r+0x4c>
 8018d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d52:	4299      	cmp	r1, r3
 8018d54:	d002      	beq.n	8018d5c <__swsetup_r+0x48>
 8018d56:	4628      	mov	r0, r5
 8018d58:	f7ff fa44 	bl	80181e4 <_free_r>
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	6363      	str	r3, [r4, #52]	; 0x34
 8018d60:	89a3      	ldrh	r3, [r4, #12]
 8018d62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018d66:	81a3      	strh	r3, [r4, #12]
 8018d68:	2300      	movs	r3, #0
 8018d6a:	6063      	str	r3, [r4, #4]
 8018d6c:	6923      	ldr	r3, [r4, #16]
 8018d6e:	6023      	str	r3, [r4, #0]
 8018d70:	89a3      	ldrh	r3, [r4, #12]
 8018d72:	f043 0308 	orr.w	r3, r3, #8
 8018d76:	81a3      	strh	r3, [r4, #12]
 8018d78:	6923      	ldr	r3, [r4, #16]
 8018d7a:	b94b      	cbnz	r3, 8018d90 <__swsetup_r+0x7c>
 8018d7c:	89a3      	ldrh	r3, [r4, #12]
 8018d7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018d86:	d003      	beq.n	8018d90 <__swsetup_r+0x7c>
 8018d88:	4621      	mov	r1, r4
 8018d8a:	4628      	mov	r0, r5
 8018d8c:	f000 f889 	bl	8018ea2 <__smakebuf_r>
 8018d90:	89a0      	ldrh	r0, [r4, #12]
 8018d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d96:	f010 0301 	ands.w	r3, r0, #1
 8018d9a:	d00a      	beq.n	8018db2 <__swsetup_r+0x9e>
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	60a3      	str	r3, [r4, #8]
 8018da0:	6963      	ldr	r3, [r4, #20]
 8018da2:	425b      	negs	r3, r3
 8018da4:	61a3      	str	r3, [r4, #24]
 8018da6:	6923      	ldr	r3, [r4, #16]
 8018da8:	b943      	cbnz	r3, 8018dbc <__swsetup_r+0xa8>
 8018daa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018dae:	d1c4      	bne.n	8018d3a <__swsetup_r+0x26>
 8018db0:	bd38      	pop	{r3, r4, r5, pc}
 8018db2:	0781      	lsls	r1, r0, #30
 8018db4:	bf58      	it	pl
 8018db6:	6963      	ldrpl	r3, [r4, #20]
 8018db8:	60a3      	str	r3, [r4, #8]
 8018dba:	e7f4      	b.n	8018da6 <__swsetup_r+0x92>
 8018dbc:	2000      	movs	r0, #0
 8018dbe:	e7f7      	b.n	8018db0 <__swsetup_r+0x9c>
 8018dc0:	20000640 	.word	0x20000640

08018dc4 <memmove>:
 8018dc4:	4288      	cmp	r0, r1
 8018dc6:	b510      	push	{r4, lr}
 8018dc8:	eb01 0402 	add.w	r4, r1, r2
 8018dcc:	d902      	bls.n	8018dd4 <memmove+0x10>
 8018dce:	4284      	cmp	r4, r0
 8018dd0:	4623      	mov	r3, r4
 8018dd2:	d807      	bhi.n	8018de4 <memmove+0x20>
 8018dd4:	1e43      	subs	r3, r0, #1
 8018dd6:	42a1      	cmp	r1, r4
 8018dd8:	d008      	beq.n	8018dec <memmove+0x28>
 8018dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018de2:	e7f8      	b.n	8018dd6 <memmove+0x12>
 8018de4:	4402      	add	r2, r0
 8018de6:	4601      	mov	r1, r0
 8018de8:	428a      	cmp	r2, r1
 8018dea:	d100      	bne.n	8018dee <memmove+0x2a>
 8018dec:	bd10      	pop	{r4, pc}
 8018dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018df6:	e7f7      	b.n	8018de8 <memmove+0x24>

08018df8 <_realloc_r>:
 8018df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dfc:	4680      	mov	r8, r0
 8018dfe:	4614      	mov	r4, r2
 8018e00:	460e      	mov	r6, r1
 8018e02:	b921      	cbnz	r1, 8018e0e <_realloc_r+0x16>
 8018e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e08:	4611      	mov	r1, r2
 8018e0a:	f7fe bf63 	b.w	8017cd4 <_malloc_r>
 8018e0e:	b92a      	cbnz	r2, 8018e1c <_realloc_r+0x24>
 8018e10:	f7ff f9e8 	bl	80181e4 <_free_r>
 8018e14:	4625      	mov	r5, r4
 8018e16:	4628      	mov	r0, r5
 8018e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e1c:	f000 f8a0 	bl	8018f60 <_malloc_usable_size_r>
 8018e20:	4284      	cmp	r4, r0
 8018e22:	4607      	mov	r7, r0
 8018e24:	d802      	bhi.n	8018e2c <_realloc_r+0x34>
 8018e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018e2a:	d812      	bhi.n	8018e52 <_realloc_r+0x5a>
 8018e2c:	4621      	mov	r1, r4
 8018e2e:	4640      	mov	r0, r8
 8018e30:	f7fe ff50 	bl	8017cd4 <_malloc_r>
 8018e34:	4605      	mov	r5, r0
 8018e36:	2800      	cmp	r0, #0
 8018e38:	d0ed      	beq.n	8018e16 <_realloc_r+0x1e>
 8018e3a:	42bc      	cmp	r4, r7
 8018e3c:	4622      	mov	r2, r4
 8018e3e:	4631      	mov	r1, r6
 8018e40:	bf28      	it	cs
 8018e42:	463a      	movcs	r2, r7
 8018e44:	f7ff f9bf 	bl	80181c6 <memcpy>
 8018e48:	4631      	mov	r1, r6
 8018e4a:	4640      	mov	r0, r8
 8018e4c:	f7ff f9ca 	bl	80181e4 <_free_r>
 8018e50:	e7e1      	b.n	8018e16 <_realloc_r+0x1e>
 8018e52:	4635      	mov	r5, r6
 8018e54:	e7df      	b.n	8018e16 <_realloc_r+0x1e>

08018e56 <__swhatbuf_r>:
 8018e56:	b570      	push	{r4, r5, r6, lr}
 8018e58:	460c      	mov	r4, r1
 8018e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e5e:	2900      	cmp	r1, #0
 8018e60:	b096      	sub	sp, #88	; 0x58
 8018e62:	4615      	mov	r5, r2
 8018e64:	461e      	mov	r6, r3
 8018e66:	da0d      	bge.n	8018e84 <__swhatbuf_r+0x2e>
 8018e68:	89a3      	ldrh	r3, [r4, #12]
 8018e6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018e6e:	f04f 0100 	mov.w	r1, #0
 8018e72:	bf0c      	ite	eq
 8018e74:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018e78:	2340      	movne	r3, #64	; 0x40
 8018e7a:	2000      	movs	r0, #0
 8018e7c:	6031      	str	r1, [r6, #0]
 8018e7e:	602b      	str	r3, [r5, #0]
 8018e80:	b016      	add	sp, #88	; 0x58
 8018e82:	bd70      	pop	{r4, r5, r6, pc}
 8018e84:	466a      	mov	r2, sp
 8018e86:	f000 f849 	bl	8018f1c <_fstat_r>
 8018e8a:	2800      	cmp	r0, #0
 8018e8c:	dbec      	blt.n	8018e68 <__swhatbuf_r+0x12>
 8018e8e:	9901      	ldr	r1, [sp, #4]
 8018e90:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018e94:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018e98:	4259      	negs	r1, r3
 8018e9a:	4159      	adcs	r1, r3
 8018e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ea0:	e7eb      	b.n	8018e7a <__swhatbuf_r+0x24>

08018ea2 <__smakebuf_r>:
 8018ea2:	898b      	ldrh	r3, [r1, #12]
 8018ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ea6:	079d      	lsls	r5, r3, #30
 8018ea8:	4606      	mov	r6, r0
 8018eaa:	460c      	mov	r4, r1
 8018eac:	d507      	bpl.n	8018ebe <__smakebuf_r+0x1c>
 8018eae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018eb2:	6023      	str	r3, [r4, #0]
 8018eb4:	6123      	str	r3, [r4, #16]
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	6163      	str	r3, [r4, #20]
 8018eba:	b002      	add	sp, #8
 8018ebc:	bd70      	pop	{r4, r5, r6, pc}
 8018ebe:	ab01      	add	r3, sp, #4
 8018ec0:	466a      	mov	r2, sp
 8018ec2:	f7ff ffc8 	bl	8018e56 <__swhatbuf_r>
 8018ec6:	9900      	ldr	r1, [sp, #0]
 8018ec8:	4605      	mov	r5, r0
 8018eca:	4630      	mov	r0, r6
 8018ecc:	f7fe ff02 	bl	8017cd4 <_malloc_r>
 8018ed0:	b948      	cbnz	r0, 8018ee6 <__smakebuf_r+0x44>
 8018ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ed6:	059a      	lsls	r2, r3, #22
 8018ed8:	d4ef      	bmi.n	8018eba <__smakebuf_r+0x18>
 8018eda:	f023 0303 	bic.w	r3, r3, #3
 8018ede:	f043 0302 	orr.w	r3, r3, #2
 8018ee2:	81a3      	strh	r3, [r4, #12]
 8018ee4:	e7e3      	b.n	8018eae <__smakebuf_r+0xc>
 8018ee6:	89a3      	ldrh	r3, [r4, #12]
 8018ee8:	6020      	str	r0, [r4, #0]
 8018eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018eee:	81a3      	strh	r3, [r4, #12]
 8018ef0:	9b00      	ldr	r3, [sp, #0]
 8018ef2:	6163      	str	r3, [r4, #20]
 8018ef4:	9b01      	ldr	r3, [sp, #4]
 8018ef6:	6120      	str	r0, [r4, #16]
 8018ef8:	b15b      	cbz	r3, 8018f12 <__smakebuf_r+0x70>
 8018efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018efe:	4630      	mov	r0, r6
 8018f00:	f000 f81e 	bl	8018f40 <_isatty_r>
 8018f04:	b128      	cbz	r0, 8018f12 <__smakebuf_r+0x70>
 8018f06:	89a3      	ldrh	r3, [r4, #12]
 8018f08:	f023 0303 	bic.w	r3, r3, #3
 8018f0c:	f043 0301 	orr.w	r3, r3, #1
 8018f10:	81a3      	strh	r3, [r4, #12]
 8018f12:	89a3      	ldrh	r3, [r4, #12]
 8018f14:	431d      	orrs	r5, r3
 8018f16:	81a5      	strh	r5, [r4, #12]
 8018f18:	e7cf      	b.n	8018eba <__smakebuf_r+0x18>
	...

08018f1c <_fstat_r>:
 8018f1c:	b538      	push	{r3, r4, r5, lr}
 8018f1e:	4d07      	ldr	r5, [pc, #28]	; (8018f3c <_fstat_r+0x20>)
 8018f20:	2300      	movs	r3, #0
 8018f22:	4604      	mov	r4, r0
 8018f24:	4608      	mov	r0, r1
 8018f26:	4611      	mov	r1, r2
 8018f28:	602b      	str	r3, [r5, #0]
 8018f2a:	f7f9 fc0f 	bl	801274c <_fstat>
 8018f2e:	1c43      	adds	r3, r0, #1
 8018f30:	d102      	bne.n	8018f38 <_fstat_r+0x1c>
 8018f32:	682b      	ldr	r3, [r5, #0]
 8018f34:	b103      	cbz	r3, 8018f38 <_fstat_r+0x1c>
 8018f36:	6023      	str	r3, [r4, #0]
 8018f38:	bd38      	pop	{r3, r4, r5, pc}
 8018f3a:	bf00      	nop
 8018f3c:	20002800 	.word	0x20002800

08018f40 <_isatty_r>:
 8018f40:	b538      	push	{r3, r4, r5, lr}
 8018f42:	4d06      	ldr	r5, [pc, #24]	; (8018f5c <_isatty_r+0x1c>)
 8018f44:	2300      	movs	r3, #0
 8018f46:	4604      	mov	r4, r0
 8018f48:	4608      	mov	r0, r1
 8018f4a:	602b      	str	r3, [r5, #0]
 8018f4c:	f7f9 fc0e 	bl	801276c <_isatty>
 8018f50:	1c43      	adds	r3, r0, #1
 8018f52:	d102      	bne.n	8018f5a <_isatty_r+0x1a>
 8018f54:	682b      	ldr	r3, [r5, #0]
 8018f56:	b103      	cbz	r3, 8018f5a <_isatty_r+0x1a>
 8018f58:	6023      	str	r3, [r4, #0]
 8018f5a:	bd38      	pop	{r3, r4, r5, pc}
 8018f5c:	20002800 	.word	0x20002800

08018f60 <_malloc_usable_size_r>:
 8018f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f64:	1f18      	subs	r0, r3, #4
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	bfbc      	itt	lt
 8018f6a:	580b      	ldrlt	r3, [r1, r0]
 8018f6c:	18c0      	addlt	r0, r0, r3
 8018f6e:	4770      	bx	lr

08018f70 <pow>:
 8018f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f72:	ed2d 8b02 	vpush	{d8}
 8018f76:	eeb0 8a40 	vmov.f32	s16, s0
 8018f7a:	eef0 8a60 	vmov.f32	s17, s1
 8018f7e:	ec55 4b11 	vmov	r4, r5, d1
 8018f82:	f000 f8ad 	bl	80190e0 <__ieee754_pow>
 8018f86:	4622      	mov	r2, r4
 8018f88:	462b      	mov	r3, r5
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	4629      	mov	r1, r5
 8018f8e:	ec57 6b10 	vmov	r6, r7, d0
 8018f92:	f7e7 fde3 	bl	8000b5c <__aeabi_dcmpun>
 8018f96:	2800      	cmp	r0, #0
 8018f98:	d13b      	bne.n	8019012 <pow+0xa2>
 8018f9a:	ec51 0b18 	vmov	r0, r1, d8
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	f7e7 fda9 	bl	8000af8 <__aeabi_dcmpeq>
 8018fa6:	b1b8      	cbz	r0, 8018fd8 <pow+0x68>
 8018fa8:	2200      	movs	r2, #0
 8018faa:	2300      	movs	r3, #0
 8018fac:	4620      	mov	r0, r4
 8018fae:	4629      	mov	r1, r5
 8018fb0:	f7e7 fda2 	bl	8000af8 <__aeabi_dcmpeq>
 8018fb4:	2800      	cmp	r0, #0
 8018fb6:	d146      	bne.n	8019046 <pow+0xd6>
 8018fb8:	ec45 4b10 	vmov	d0, r4, r5
 8018fbc:	f000 f848 	bl	8019050 <finite>
 8018fc0:	b338      	cbz	r0, 8019012 <pow+0xa2>
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	4629      	mov	r1, r5
 8018fca:	f7e7 fd9f 	bl	8000b0c <__aeabi_dcmplt>
 8018fce:	b300      	cbz	r0, 8019012 <pow+0xa2>
 8018fd0:	f7ff f8cc 	bl	801816c <__errno>
 8018fd4:	2322      	movs	r3, #34	; 0x22
 8018fd6:	e01b      	b.n	8019010 <pow+0xa0>
 8018fd8:	ec47 6b10 	vmov	d0, r6, r7
 8018fdc:	f000 f838 	bl	8019050 <finite>
 8018fe0:	b9e0      	cbnz	r0, 801901c <pow+0xac>
 8018fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8018fe6:	eef0 0a68 	vmov.f32	s1, s17
 8018fea:	f000 f831 	bl	8019050 <finite>
 8018fee:	b1a8      	cbz	r0, 801901c <pow+0xac>
 8018ff0:	ec45 4b10 	vmov	d0, r4, r5
 8018ff4:	f000 f82c 	bl	8019050 <finite>
 8018ff8:	b180      	cbz	r0, 801901c <pow+0xac>
 8018ffa:	4632      	mov	r2, r6
 8018ffc:	463b      	mov	r3, r7
 8018ffe:	4630      	mov	r0, r6
 8019000:	4639      	mov	r1, r7
 8019002:	f7e7 fdab 	bl	8000b5c <__aeabi_dcmpun>
 8019006:	2800      	cmp	r0, #0
 8019008:	d0e2      	beq.n	8018fd0 <pow+0x60>
 801900a:	f7ff f8af 	bl	801816c <__errno>
 801900e:	2321      	movs	r3, #33	; 0x21
 8019010:	6003      	str	r3, [r0, #0]
 8019012:	ecbd 8b02 	vpop	{d8}
 8019016:	ec47 6b10 	vmov	d0, r6, r7
 801901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801901c:	2200      	movs	r2, #0
 801901e:	2300      	movs	r3, #0
 8019020:	4630      	mov	r0, r6
 8019022:	4639      	mov	r1, r7
 8019024:	f7e7 fd68 	bl	8000af8 <__aeabi_dcmpeq>
 8019028:	2800      	cmp	r0, #0
 801902a:	d0f2      	beq.n	8019012 <pow+0xa2>
 801902c:	eeb0 0a48 	vmov.f32	s0, s16
 8019030:	eef0 0a68 	vmov.f32	s1, s17
 8019034:	f000 f80c 	bl	8019050 <finite>
 8019038:	2800      	cmp	r0, #0
 801903a:	d0ea      	beq.n	8019012 <pow+0xa2>
 801903c:	ec45 4b10 	vmov	d0, r4, r5
 8019040:	f000 f806 	bl	8019050 <finite>
 8019044:	e7c3      	b.n	8018fce <pow+0x5e>
 8019046:	4f01      	ldr	r7, [pc, #4]	; (801904c <pow+0xdc>)
 8019048:	2600      	movs	r6, #0
 801904a:	e7e2      	b.n	8019012 <pow+0xa2>
 801904c:	3ff00000 	.word	0x3ff00000

08019050 <finite>:
 8019050:	b082      	sub	sp, #8
 8019052:	ed8d 0b00 	vstr	d0, [sp]
 8019056:	9801      	ldr	r0, [sp, #4]
 8019058:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801905c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019060:	0fc0      	lsrs	r0, r0, #31
 8019062:	b002      	add	sp, #8
 8019064:	4770      	bx	lr
	...

08019068 <trunc>:
 8019068:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 801906c:	ec5c bb10 	vmov	fp, ip, d0
 8019070:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8019074:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8019078:	2913      	cmp	r1, #19
 801907a:	4664      	mov	r4, ip
 801907c:	dc11      	bgt.n	80190a2 <trunc+0x3a>
 801907e:	2900      	cmp	r1, #0
 8019080:	bfa7      	ittee	ge
 8019082:	4b15      	ldrge	r3, [pc, #84]	; (80190d8 <trunc+0x70>)
 8019084:	fa43 f101 	asrge.w	r1, r3, r1
 8019088:	2200      	movlt	r2, #0
 801908a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 801908e:	bfa4      	itt	ge
 8019090:	2200      	movge	r2, #0
 8019092:	ea01 030c 	andge.w	r3, r1, ip
 8019096:	4693      	mov	fp, r2
 8019098:	469c      	mov	ip, r3
 801909a:	ec4c bb10 	vmov	d0, fp, ip
 801909e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80190a2:	2933      	cmp	r1, #51	; 0x33
 80190a4:	dd0d      	ble.n	80190c2 <trunc+0x5a>
 80190a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80190aa:	d1f6      	bne.n	801909a <trunc+0x32>
 80190ac:	4663      	mov	r3, ip
 80190ae:	ee10 2a10 	vmov	r2, s0
 80190b2:	ee10 0a10 	vmov	r0, s0
 80190b6:	4621      	mov	r1, r4
 80190b8:	f7e7 f900 	bl	80002bc <__adddf3>
 80190bc:	4683      	mov	fp, r0
 80190be:	468c      	mov	ip, r1
 80190c0:	e7eb      	b.n	801909a <trunc+0x32>
 80190c2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80190c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190ca:	40c3      	lsrs	r3, r0
 80190cc:	ea2b 0603 	bic.w	r6, fp, r3
 80190d0:	46b3      	mov	fp, r6
 80190d2:	46a4      	mov	ip, r4
 80190d4:	e7e1      	b.n	801909a <trunc+0x32>
 80190d6:	bf00      	nop
 80190d8:	fff00000 	.word	0xfff00000
 80190dc:	00000000 	.word	0x00000000

080190e0 <__ieee754_pow>:
 80190e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190e4:	ed2d 8b06 	vpush	{d8-d10}
 80190e8:	b089      	sub	sp, #36	; 0x24
 80190ea:	ed8d 1b00 	vstr	d1, [sp]
 80190ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80190f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80190f6:	ea58 0102 	orrs.w	r1, r8, r2
 80190fa:	ec57 6b10 	vmov	r6, r7, d0
 80190fe:	d115      	bne.n	801912c <__ieee754_pow+0x4c>
 8019100:	19b3      	adds	r3, r6, r6
 8019102:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019106:	4152      	adcs	r2, r2
 8019108:	4299      	cmp	r1, r3
 801910a:	4b89      	ldr	r3, [pc, #548]	; (8019330 <__ieee754_pow+0x250>)
 801910c:	4193      	sbcs	r3, r2
 801910e:	f080 84d1 	bcs.w	8019ab4 <__ieee754_pow+0x9d4>
 8019112:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019116:	4630      	mov	r0, r6
 8019118:	4639      	mov	r1, r7
 801911a:	f7e7 f8cf 	bl	80002bc <__adddf3>
 801911e:	ec41 0b10 	vmov	d0, r0, r1
 8019122:	b009      	add	sp, #36	; 0x24
 8019124:	ecbd 8b06 	vpop	{d8-d10}
 8019128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801912c:	4b81      	ldr	r3, [pc, #516]	; (8019334 <__ieee754_pow+0x254>)
 801912e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019132:	429c      	cmp	r4, r3
 8019134:	ee10 aa10 	vmov	sl, s0
 8019138:	463d      	mov	r5, r7
 801913a:	dc06      	bgt.n	801914a <__ieee754_pow+0x6a>
 801913c:	d101      	bne.n	8019142 <__ieee754_pow+0x62>
 801913e:	2e00      	cmp	r6, #0
 8019140:	d1e7      	bne.n	8019112 <__ieee754_pow+0x32>
 8019142:	4598      	cmp	r8, r3
 8019144:	dc01      	bgt.n	801914a <__ieee754_pow+0x6a>
 8019146:	d10f      	bne.n	8019168 <__ieee754_pow+0x88>
 8019148:	b172      	cbz	r2, 8019168 <__ieee754_pow+0x88>
 801914a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801914e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019152:	ea55 050a 	orrs.w	r5, r5, sl
 8019156:	d1dc      	bne.n	8019112 <__ieee754_pow+0x32>
 8019158:	e9dd 3200 	ldrd	r3, r2, [sp]
 801915c:	18db      	adds	r3, r3, r3
 801915e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019162:	4152      	adcs	r2, r2
 8019164:	429d      	cmp	r5, r3
 8019166:	e7d0      	b.n	801910a <__ieee754_pow+0x2a>
 8019168:	2d00      	cmp	r5, #0
 801916a:	da3b      	bge.n	80191e4 <__ieee754_pow+0x104>
 801916c:	4b72      	ldr	r3, [pc, #456]	; (8019338 <__ieee754_pow+0x258>)
 801916e:	4598      	cmp	r8, r3
 8019170:	dc51      	bgt.n	8019216 <__ieee754_pow+0x136>
 8019172:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019176:	4598      	cmp	r8, r3
 8019178:	f340 84ab 	ble.w	8019ad2 <__ieee754_pow+0x9f2>
 801917c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019180:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019184:	2b14      	cmp	r3, #20
 8019186:	dd0f      	ble.n	80191a8 <__ieee754_pow+0xc8>
 8019188:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801918c:	fa22 f103 	lsr.w	r1, r2, r3
 8019190:	fa01 f303 	lsl.w	r3, r1, r3
 8019194:	4293      	cmp	r3, r2
 8019196:	f040 849c 	bne.w	8019ad2 <__ieee754_pow+0x9f2>
 801919a:	f001 0101 	and.w	r1, r1, #1
 801919e:	f1c1 0302 	rsb	r3, r1, #2
 80191a2:	9304      	str	r3, [sp, #16]
 80191a4:	b182      	cbz	r2, 80191c8 <__ieee754_pow+0xe8>
 80191a6:	e05f      	b.n	8019268 <__ieee754_pow+0x188>
 80191a8:	2a00      	cmp	r2, #0
 80191aa:	d15b      	bne.n	8019264 <__ieee754_pow+0x184>
 80191ac:	f1c3 0314 	rsb	r3, r3, #20
 80191b0:	fa48 f103 	asr.w	r1, r8, r3
 80191b4:	fa01 f303 	lsl.w	r3, r1, r3
 80191b8:	4543      	cmp	r3, r8
 80191ba:	f040 8487 	bne.w	8019acc <__ieee754_pow+0x9ec>
 80191be:	f001 0101 	and.w	r1, r1, #1
 80191c2:	f1c1 0302 	rsb	r3, r1, #2
 80191c6:	9304      	str	r3, [sp, #16]
 80191c8:	4b5c      	ldr	r3, [pc, #368]	; (801933c <__ieee754_pow+0x25c>)
 80191ca:	4598      	cmp	r8, r3
 80191cc:	d132      	bne.n	8019234 <__ieee754_pow+0x154>
 80191ce:	f1b9 0f00 	cmp.w	r9, #0
 80191d2:	f280 8477 	bge.w	8019ac4 <__ieee754_pow+0x9e4>
 80191d6:	4959      	ldr	r1, [pc, #356]	; (801933c <__ieee754_pow+0x25c>)
 80191d8:	4632      	mov	r2, r6
 80191da:	463b      	mov	r3, r7
 80191dc:	2000      	movs	r0, #0
 80191de:	f7e7 fb4d 	bl	800087c <__aeabi_ddiv>
 80191e2:	e79c      	b.n	801911e <__ieee754_pow+0x3e>
 80191e4:	2300      	movs	r3, #0
 80191e6:	9304      	str	r3, [sp, #16]
 80191e8:	2a00      	cmp	r2, #0
 80191ea:	d13d      	bne.n	8019268 <__ieee754_pow+0x188>
 80191ec:	4b51      	ldr	r3, [pc, #324]	; (8019334 <__ieee754_pow+0x254>)
 80191ee:	4598      	cmp	r8, r3
 80191f0:	d1ea      	bne.n	80191c8 <__ieee754_pow+0xe8>
 80191f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80191f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80191fa:	ea53 030a 	orrs.w	r3, r3, sl
 80191fe:	f000 8459 	beq.w	8019ab4 <__ieee754_pow+0x9d4>
 8019202:	4b4f      	ldr	r3, [pc, #316]	; (8019340 <__ieee754_pow+0x260>)
 8019204:	429c      	cmp	r4, r3
 8019206:	dd08      	ble.n	801921a <__ieee754_pow+0x13a>
 8019208:	f1b9 0f00 	cmp.w	r9, #0
 801920c:	f2c0 8456 	blt.w	8019abc <__ieee754_pow+0x9dc>
 8019210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019214:	e783      	b.n	801911e <__ieee754_pow+0x3e>
 8019216:	2302      	movs	r3, #2
 8019218:	e7e5      	b.n	80191e6 <__ieee754_pow+0x106>
 801921a:	f1b9 0f00 	cmp.w	r9, #0
 801921e:	f04f 0000 	mov.w	r0, #0
 8019222:	f04f 0100 	mov.w	r1, #0
 8019226:	f6bf af7a 	bge.w	801911e <__ieee754_pow+0x3e>
 801922a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801922e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019232:	e774      	b.n	801911e <__ieee754_pow+0x3e>
 8019234:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019238:	d106      	bne.n	8019248 <__ieee754_pow+0x168>
 801923a:	4632      	mov	r2, r6
 801923c:	463b      	mov	r3, r7
 801923e:	4630      	mov	r0, r6
 8019240:	4639      	mov	r1, r7
 8019242:	f7e7 f9f1 	bl	8000628 <__aeabi_dmul>
 8019246:	e76a      	b.n	801911e <__ieee754_pow+0x3e>
 8019248:	4b3e      	ldr	r3, [pc, #248]	; (8019344 <__ieee754_pow+0x264>)
 801924a:	4599      	cmp	r9, r3
 801924c:	d10c      	bne.n	8019268 <__ieee754_pow+0x188>
 801924e:	2d00      	cmp	r5, #0
 8019250:	db0a      	blt.n	8019268 <__ieee754_pow+0x188>
 8019252:	ec47 6b10 	vmov	d0, r6, r7
 8019256:	b009      	add	sp, #36	; 0x24
 8019258:	ecbd 8b06 	vpop	{d8-d10}
 801925c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019260:	f000 bd20 	b.w	8019ca4 <__ieee754_sqrt>
 8019264:	2300      	movs	r3, #0
 8019266:	9304      	str	r3, [sp, #16]
 8019268:	ec47 6b10 	vmov	d0, r6, r7
 801926c:	f000 fc62 	bl	8019b34 <fabs>
 8019270:	ec51 0b10 	vmov	r0, r1, d0
 8019274:	f1ba 0f00 	cmp.w	sl, #0
 8019278:	d129      	bne.n	80192ce <__ieee754_pow+0x1ee>
 801927a:	b124      	cbz	r4, 8019286 <__ieee754_pow+0x1a6>
 801927c:	4b2f      	ldr	r3, [pc, #188]	; (801933c <__ieee754_pow+0x25c>)
 801927e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019282:	429a      	cmp	r2, r3
 8019284:	d123      	bne.n	80192ce <__ieee754_pow+0x1ee>
 8019286:	f1b9 0f00 	cmp.w	r9, #0
 801928a:	da05      	bge.n	8019298 <__ieee754_pow+0x1b8>
 801928c:	4602      	mov	r2, r0
 801928e:	460b      	mov	r3, r1
 8019290:	2000      	movs	r0, #0
 8019292:	492a      	ldr	r1, [pc, #168]	; (801933c <__ieee754_pow+0x25c>)
 8019294:	f7e7 faf2 	bl	800087c <__aeabi_ddiv>
 8019298:	2d00      	cmp	r5, #0
 801929a:	f6bf af40 	bge.w	801911e <__ieee754_pow+0x3e>
 801929e:	9b04      	ldr	r3, [sp, #16]
 80192a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80192a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80192a8:	431c      	orrs	r4, r3
 80192aa:	d108      	bne.n	80192be <__ieee754_pow+0x1de>
 80192ac:	4602      	mov	r2, r0
 80192ae:	460b      	mov	r3, r1
 80192b0:	4610      	mov	r0, r2
 80192b2:	4619      	mov	r1, r3
 80192b4:	f7e7 f800 	bl	80002b8 <__aeabi_dsub>
 80192b8:	4602      	mov	r2, r0
 80192ba:	460b      	mov	r3, r1
 80192bc:	e78f      	b.n	80191de <__ieee754_pow+0xfe>
 80192be:	9b04      	ldr	r3, [sp, #16]
 80192c0:	2b01      	cmp	r3, #1
 80192c2:	f47f af2c 	bne.w	801911e <__ieee754_pow+0x3e>
 80192c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80192ca:	4619      	mov	r1, r3
 80192cc:	e727      	b.n	801911e <__ieee754_pow+0x3e>
 80192ce:	0feb      	lsrs	r3, r5, #31
 80192d0:	3b01      	subs	r3, #1
 80192d2:	9306      	str	r3, [sp, #24]
 80192d4:	9a06      	ldr	r2, [sp, #24]
 80192d6:	9b04      	ldr	r3, [sp, #16]
 80192d8:	4313      	orrs	r3, r2
 80192da:	d102      	bne.n	80192e2 <__ieee754_pow+0x202>
 80192dc:	4632      	mov	r2, r6
 80192de:	463b      	mov	r3, r7
 80192e0:	e7e6      	b.n	80192b0 <__ieee754_pow+0x1d0>
 80192e2:	4b19      	ldr	r3, [pc, #100]	; (8019348 <__ieee754_pow+0x268>)
 80192e4:	4598      	cmp	r8, r3
 80192e6:	f340 80fb 	ble.w	80194e0 <__ieee754_pow+0x400>
 80192ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80192ee:	4598      	cmp	r8, r3
 80192f0:	4b13      	ldr	r3, [pc, #76]	; (8019340 <__ieee754_pow+0x260>)
 80192f2:	dd0c      	ble.n	801930e <__ieee754_pow+0x22e>
 80192f4:	429c      	cmp	r4, r3
 80192f6:	dc0f      	bgt.n	8019318 <__ieee754_pow+0x238>
 80192f8:	f1b9 0f00 	cmp.w	r9, #0
 80192fc:	da0f      	bge.n	801931e <__ieee754_pow+0x23e>
 80192fe:	2000      	movs	r0, #0
 8019300:	b009      	add	sp, #36	; 0x24
 8019302:	ecbd 8b06 	vpop	{d8-d10}
 8019306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801930a:	f000 bcc2 	b.w	8019c92 <__math_oflow>
 801930e:	429c      	cmp	r4, r3
 8019310:	dbf2      	blt.n	80192f8 <__ieee754_pow+0x218>
 8019312:	4b0a      	ldr	r3, [pc, #40]	; (801933c <__ieee754_pow+0x25c>)
 8019314:	429c      	cmp	r4, r3
 8019316:	dd19      	ble.n	801934c <__ieee754_pow+0x26c>
 8019318:	f1b9 0f00 	cmp.w	r9, #0
 801931c:	dcef      	bgt.n	80192fe <__ieee754_pow+0x21e>
 801931e:	2000      	movs	r0, #0
 8019320:	b009      	add	sp, #36	; 0x24
 8019322:	ecbd 8b06 	vpop	{d8-d10}
 8019326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801932a:	f000 bca9 	b.w	8019c80 <__math_uflow>
 801932e:	bf00      	nop
 8019330:	fff00000 	.word	0xfff00000
 8019334:	7ff00000 	.word	0x7ff00000
 8019338:	433fffff 	.word	0x433fffff
 801933c:	3ff00000 	.word	0x3ff00000
 8019340:	3fefffff 	.word	0x3fefffff
 8019344:	3fe00000 	.word	0x3fe00000
 8019348:	41e00000 	.word	0x41e00000
 801934c:	4b60      	ldr	r3, [pc, #384]	; (80194d0 <__ieee754_pow+0x3f0>)
 801934e:	2200      	movs	r2, #0
 8019350:	f7e6 ffb2 	bl	80002b8 <__aeabi_dsub>
 8019354:	a354      	add	r3, pc, #336	; (adr r3, 80194a8 <__ieee754_pow+0x3c8>)
 8019356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801935a:	4604      	mov	r4, r0
 801935c:	460d      	mov	r5, r1
 801935e:	f7e7 f963 	bl	8000628 <__aeabi_dmul>
 8019362:	a353      	add	r3, pc, #332	; (adr r3, 80194b0 <__ieee754_pow+0x3d0>)
 8019364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019368:	4606      	mov	r6, r0
 801936a:	460f      	mov	r7, r1
 801936c:	4620      	mov	r0, r4
 801936e:	4629      	mov	r1, r5
 8019370:	f7e7 f95a 	bl	8000628 <__aeabi_dmul>
 8019374:	4b57      	ldr	r3, [pc, #348]	; (80194d4 <__ieee754_pow+0x3f4>)
 8019376:	4682      	mov	sl, r0
 8019378:	468b      	mov	fp, r1
 801937a:	2200      	movs	r2, #0
 801937c:	4620      	mov	r0, r4
 801937e:	4629      	mov	r1, r5
 8019380:	f7e7 f952 	bl	8000628 <__aeabi_dmul>
 8019384:	4602      	mov	r2, r0
 8019386:	460b      	mov	r3, r1
 8019388:	a14b      	add	r1, pc, #300	; (adr r1, 80194b8 <__ieee754_pow+0x3d8>)
 801938a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801938e:	f7e6 ff93 	bl	80002b8 <__aeabi_dsub>
 8019392:	4622      	mov	r2, r4
 8019394:	462b      	mov	r3, r5
 8019396:	f7e7 f947 	bl	8000628 <__aeabi_dmul>
 801939a:	4602      	mov	r2, r0
 801939c:	460b      	mov	r3, r1
 801939e:	2000      	movs	r0, #0
 80193a0:	494d      	ldr	r1, [pc, #308]	; (80194d8 <__ieee754_pow+0x3f8>)
 80193a2:	f7e6 ff89 	bl	80002b8 <__aeabi_dsub>
 80193a6:	4622      	mov	r2, r4
 80193a8:	4680      	mov	r8, r0
 80193aa:	4689      	mov	r9, r1
 80193ac:	462b      	mov	r3, r5
 80193ae:	4620      	mov	r0, r4
 80193b0:	4629      	mov	r1, r5
 80193b2:	f7e7 f939 	bl	8000628 <__aeabi_dmul>
 80193b6:	4602      	mov	r2, r0
 80193b8:	460b      	mov	r3, r1
 80193ba:	4640      	mov	r0, r8
 80193bc:	4649      	mov	r1, r9
 80193be:	f7e7 f933 	bl	8000628 <__aeabi_dmul>
 80193c2:	a33f      	add	r3, pc, #252	; (adr r3, 80194c0 <__ieee754_pow+0x3e0>)
 80193c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c8:	f7e7 f92e 	bl	8000628 <__aeabi_dmul>
 80193cc:	4602      	mov	r2, r0
 80193ce:	460b      	mov	r3, r1
 80193d0:	4650      	mov	r0, sl
 80193d2:	4659      	mov	r1, fp
 80193d4:	f7e6 ff70 	bl	80002b8 <__aeabi_dsub>
 80193d8:	4602      	mov	r2, r0
 80193da:	460b      	mov	r3, r1
 80193dc:	4680      	mov	r8, r0
 80193de:	4689      	mov	r9, r1
 80193e0:	4630      	mov	r0, r6
 80193e2:	4639      	mov	r1, r7
 80193e4:	f7e6 ff6a 	bl	80002bc <__adddf3>
 80193e8:	2000      	movs	r0, #0
 80193ea:	4632      	mov	r2, r6
 80193ec:	463b      	mov	r3, r7
 80193ee:	4604      	mov	r4, r0
 80193f0:	460d      	mov	r5, r1
 80193f2:	f7e6 ff61 	bl	80002b8 <__aeabi_dsub>
 80193f6:	4602      	mov	r2, r0
 80193f8:	460b      	mov	r3, r1
 80193fa:	4640      	mov	r0, r8
 80193fc:	4649      	mov	r1, r9
 80193fe:	f7e6 ff5b 	bl	80002b8 <__aeabi_dsub>
 8019402:	9b04      	ldr	r3, [sp, #16]
 8019404:	9a06      	ldr	r2, [sp, #24]
 8019406:	3b01      	subs	r3, #1
 8019408:	4313      	orrs	r3, r2
 801940a:	4682      	mov	sl, r0
 801940c:	468b      	mov	fp, r1
 801940e:	f040 81e7 	bne.w	80197e0 <__ieee754_pow+0x700>
 8019412:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80194c8 <__ieee754_pow+0x3e8>
 8019416:	eeb0 8a47 	vmov.f32	s16, s14
 801941a:	eef0 8a67 	vmov.f32	s17, s15
 801941e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019422:	2600      	movs	r6, #0
 8019424:	4632      	mov	r2, r6
 8019426:	463b      	mov	r3, r7
 8019428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801942c:	f7e6 ff44 	bl	80002b8 <__aeabi_dsub>
 8019430:	4622      	mov	r2, r4
 8019432:	462b      	mov	r3, r5
 8019434:	f7e7 f8f8 	bl	8000628 <__aeabi_dmul>
 8019438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801943c:	4680      	mov	r8, r0
 801943e:	4689      	mov	r9, r1
 8019440:	4650      	mov	r0, sl
 8019442:	4659      	mov	r1, fp
 8019444:	f7e7 f8f0 	bl	8000628 <__aeabi_dmul>
 8019448:	4602      	mov	r2, r0
 801944a:	460b      	mov	r3, r1
 801944c:	4640      	mov	r0, r8
 801944e:	4649      	mov	r1, r9
 8019450:	f7e6 ff34 	bl	80002bc <__adddf3>
 8019454:	4632      	mov	r2, r6
 8019456:	463b      	mov	r3, r7
 8019458:	4680      	mov	r8, r0
 801945a:	4689      	mov	r9, r1
 801945c:	4620      	mov	r0, r4
 801945e:	4629      	mov	r1, r5
 8019460:	f7e7 f8e2 	bl	8000628 <__aeabi_dmul>
 8019464:	460b      	mov	r3, r1
 8019466:	4604      	mov	r4, r0
 8019468:	460d      	mov	r5, r1
 801946a:	4602      	mov	r2, r0
 801946c:	4649      	mov	r1, r9
 801946e:	4640      	mov	r0, r8
 8019470:	f7e6 ff24 	bl	80002bc <__adddf3>
 8019474:	4b19      	ldr	r3, [pc, #100]	; (80194dc <__ieee754_pow+0x3fc>)
 8019476:	4299      	cmp	r1, r3
 8019478:	ec45 4b19 	vmov	d9, r4, r5
 801947c:	4606      	mov	r6, r0
 801947e:	460f      	mov	r7, r1
 8019480:	468b      	mov	fp, r1
 8019482:	f340 82f0 	ble.w	8019a66 <__ieee754_pow+0x986>
 8019486:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801948a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801948e:	4303      	orrs	r3, r0
 8019490:	f000 81e4 	beq.w	801985c <__ieee754_pow+0x77c>
 8019494:	ec51 0b18 	vmov	r0, r1, d8
 8019498:	2200      	movs	r2, #0
 801949a:	2300      	movs	r3, #0
 801949c:	f7e7 fb36 	bl	8000b0c <__aeabi_dcmplt>
 80194a0:	3800      	subs	r0, #0
 80194a2:	bf18      	it	ne
 80194a4:	2001      	movne	r0, #1
 80194a6:	e72b      	b.n	8019300 <__ieee754_pow+0x220>
 80194a8:	60000000 	.word	0x60000000
 80194ac:	3ff71547 	.word	0x3ff71547
 80194b0:	f85ddf44 	.word	0xf85ddf44
 80194b4:	3e54ae0b 	.word	0x3e54ae0b
 80194b8:	55555555 	.word	0x55555555
 80194bc:	3fd55555 	.word	0x3fd55555
 80194c0:	652b82fe 	.word	0x652b82fe
 80194c4:	3ff71547 	.word	0x3ff71547
 80194c8:	00000000 	.word	0x00000000
 80194cc:	bff00000 	.word	0xbff00000
 80194d0:	3ff00000 	.word	0x3ff00000
 80194d4:	3fd00000 	.word	0x3fd00000
 80194d8:	3fe00000 	.word	0x3fe00000
 80194dc:	408fffff 	.word	0x408fffff
 80194e0:	4bd5      	ldr	r3, [pc, #852]	; (8019838 <__ieee754_pow+0x758>)
 80194e2:	402b      	ands	r3, r5
 80194e4:	2200      	movs	r2, #0
 80194e6:	b92b      	cbnz	r3, 80194f4 <__ieee754_pow+0x414>
 80194e8:	4bd4      	ldr	r3, [pc, #848]	; (801983c <__ieee754_pow+0x75c>)
 80194ea:	f7e7 f89d 	bl	8000628 <__aeabi_dmul>
 80194ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80194f2:	460c      	mov	r4, r1
 80194f4:	1523      	asrs	r3, r4, #20
 80194f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80194fa:	4413      	add	r3, r2
 80194fc:	9305      	str	r3, [sp, #20]
 80194fe:	4bd0      	ldr	r3, [pc, #832]	; (8019840 <__ieee754_pow+0x760>)
 8019500:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019504:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019508:	429c      	cmp	r4, r3
 801950a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801950e:	dd08      	ble.n	8019522 <__ieee754_pow+0x442>
 8019510:	4bcc      	ldr	r3, [pc, #816]	; (8019844 <__ieee754_pow+0x764>)
 8019512:	429c      	cmp	r4, r3
 8019514:	f340 8162 	ble.w	80197dc <__ieee754_pow+0x6fc>
 8019518:	9b05      	ldr	r3, [sp, #20]
 801951a:	3301      	adds	r3, #1
 801951c:	9305      	str	r3, [sp, #20]
 801951e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019522:	2400      	movs	r4, #0
 8019524:	00e3      	lsls	r3, r4, #3
 8019526:	9307      	str	r3, [sp, #28]
 8019528:	4bc7      	ldr	r3, [pc, #796]	; (8019848 <__ieee754_pow+0x768>)
 801952a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801952e:	ed93 7b00 	vldr	d7, [r3]
 8019532:	4629      	mov	r1, r5
 8019534:	ec53 2b17 	vmov	r2, r3, d7
 8019538:	eeb0 9a47 	vmov.f32	s18, s14
 801953c:	eef0 9a67 	vmov.f32	s19, s15
 8019540:	4682      	mov	sl, r0
 8019542:	f7e6 feb9 	bl	80002b8 <__aeabi_dsub>
 8019546:	4652      	mov	r2, sl
 8019548:	4606      	mov	r6, r0
 801954a:	460f      	mov	r7, r1
 801954c:	462b      	mov	r3, r5
 801954e:	ec51 0b19 	vmov	r0, r1, d9
 8019552:	f7e6 feb3 	bl	80002bc <__adddf3>
 8019556:	4602      	mov	r2, r0
 8019558:	460b      	mov	r3, r1
 801955a:	2000      	movs	r0, #0
 801955c:	49bb      	ldr	r1, [pc, #748]	; (801984c <__ieee754_pow+0x76c>)
 801955e:	f7e7 f98d 	bl	800087c <__aeabi_ddiv>
 8019562:	ec41 0b1a 	vmov	d10, r0, r1
 8019566:	4602      	mov	r2, r0
 8019568:	460b      	mov	r3, r1
 801956a:	4630      	mov	r0, r6
 801956c:	4639      	mov	r1, r7
 801956e:	f7e7 f85b 	bl	8000628 <__aeabi_dmul>
 8019572:	2300      	movs	r3, #0
 8019574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019578:	9302      	str	r3, [sp, #8]
 801957a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801957e:	46ab      	mov	fp, r5
 8019580:	106d      	asrs	r5, r5, #1
 8019582:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019586:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801958a:	ec41 0b18 	vmov	d8, r0, r1
 801958e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019592:	2200      	movs	r2, #0
 8019594:	4640      	mov	r0, r8
 8019596:	4649      	mov	r1, r9
 8019598:	4614      	mov	r4, r2
 801959a:	461d      	mov	r5, r3
 801959c:	f7e7 f844 	bl	8000628 <__aeabi_dmul>
 80195a0:	4602      	mov	r2, r0
 80195a2:	460b      	mov	r3, r1
 80195a4:	4630      	mov	r0, r6
 80195a6:	4639      	mov	r1, r7
 80195a8:	f7e6 fe86 	bl	80002b8 <__aeabi_dsub>
 80195ac:	ec53 2b19 	vmov	r2, r3, d9
 80195b0:	4606      	mov	r6, r0
 80195b2:	460f      	mov	r7, r1
 80195b4:	4620      	mov	r0, r4
 80195b6:	4629      	mov	r1, r5
 80195b8:	f7e6 fe7e 	bl	80002b8 <__aeabi_dsub>
 80195bc:	4602      	mov	r2, r0
 80195be:	460b      	mov	r3, r1
 80195c0:	4650      	mov	r0, sl
 80195c2:	4659      	mov	r1, fp
 80195c4:	f7e6 fe78 	bl	80002b8 <__aeabi_dsub>
 80195c8:	4642      	mov	r2, r8
 80195ca:	464b      	mov	r3, r9
 80195cc:	f7e7 f82c 	bl	8000628 <__aeabi_dmul>
 80195d0:	4602      	mov	r2, r0
 80195d2:	460b      	mov	r3, r1
 80195d4:	4630      	mov	r0, r6
 80195d6:	4639      	mov	r1, r7
 80195d8:	f7e6 fe6e 	bl	80002b8 <__aeabi_dsub>
 80195dc:	ec53 2b1a 	vmov	r2, r3, d10
 80195e0:	f7e7 f822 	bl	8000628 <__aeabi_dmul>
 80195e4:	ec53 2b18 	vmov	r2, r3, d8
 80195e8:	ec41 0b19 	vmov	d9, r0, r1
 80195ec:	ec51 0b18 	vmov	r0, r1, d8
 80195f0:	f7e7 f81a 	bl	8000628 <__aeabi_dmul>
 80195f4:	a37c      	add	r3, pc, #496	; (adr r3, 80197e8 <__ieee754_pow+0x708>)
 80195f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195fa:	4604      	mov	r4, r0
 80195fc:	460d      	mov	r5, r1
 80195fe:	f7e7 f813 	bl	8000628 <__aeabi_dmul>
 8019602:	a37b      	add	r3, pc, #492	; (adr r3, 80197f0 <__ieee754_pow+0x710>)
 8019604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019608:	f7e6 fe58 	bl	80002bc <__adddf3>
 801960c:	4622      	mov	r2, r4
 801960e:	462b      	mov	r3, r5
 8019610:	f7e7 f80a 	bl	8000628 <__aeabi_dmul>
 8019614:	a378      	add	r3, pc, #480	; (adr r3, 80197f8 <__ieee754_pow+0x718>)
 8019616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961a:	f7e6 fe4f 	bl	80002bc <__adddf3>
 801961e:	4622      	mov	r2, r4
 8019620:	462b      	mov	r3, r5
 8019622:	f7e7 f801 	bl	8000628 <__aeabi_dmul>
 8019626:	a376      	add	r3, pc, #472	; (adr r3, 8019800 <__ieee754_pow+0x720>)
 8019628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801962c:	f7e6 fe46 	bl	80002bc <__adddf3>
 8019630:	4622      	mov	r2, r4
 8019632:	462b      	mov	r3, r5
 8019634:	f7e6 fff8 	bl	8000628 <__aeabi_dmul>
 8019638:	a373      	add	r3, pc, #460	; (adr r3, 8019808 <__ieee754_pow+0x728>)
 801963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801963e:	f7e6 fe3d 	bl	80002bc <__adddf3>
 8019642:	4622      	mov	r2, r4
 8019644:	462b      	mov	r3, r5
 8019646:	f7e6 ffef 	bl	8000628 <__aeabi_dmul>
 801964a:	a371      	add	r3, pc, #452	; (adr r3, 8019810 <__ieee754_pow+0x730>)
 801964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019650:	f7e6 fe34 	bl	80002bc <__adddf3>
 8019654:	4622      	mov	r2, r4
 8019656:	4606      	mov	r6, r0
 8019658:	460f      	mov	r7, r1
 801965a:	462b      	mov	r3, r5
 801965c:	4620      	mov	r0, r4
 801965e:	4629      	mov	r1, r5
 8019660:	f7e6 ffe2 	bl	8000628 <__aeabi_dmul>
 8019664:	4602      	mov	r2, r0
 8019666:	460b      	mov	r3, r1
 8019668:	4630      	mov	r0, r6
 801966a:	4639      	mov	r1, r7
 801966c:	f7e6 ffdc 	bl	8000628 <__aeabi_dmul>
 8019670:	4642      	mov	r2, r8
 8019672:	4604      	mov	r4, r0
 8019674:	460d      	mov	r5, r1
 8019676:	464b      	mov	r3, r9
 8019678:	ec51 0b18 	vmov	r0, r1, d8
 801967c:	f7e6 fe1e 	bl	80002bc <__adddf3>
 8019680:	ec53 2b19 	vmov	r2, r3, d9
 8019684:	f7e6 ffd0 	bl	8000628 <__aeabi_dmul>
 8019688:	4622      	mov	r2, r4
 801968a:	462b      	mov	r3, r5
 801968c:	f7e6 fe16 	bl	80002bc <__adddf3>
 8019690:	4642      	mov	r2, r8
 8019692:	4682      	mov	sl, r0
 8019694:	468b      	mov	fp, r1
 8019696:	464b      	mov	r3, r9
 8019698:	4640      	mov	r0, r8
 801969a:	4649      	mov	r1, r9
 801969c:	f7e6 ffc4 	bl	8000628 <__aeabi_dmul>
 80196a0:	4b6b      	ldr	r3, [pc, #428]	; (8019850 <__ieee754_pow+0x770>)
 80196a2:	2200      	movs	r2, #0
 80196a4:	4606      	mov	r6, r0
 80196a6:	460f      	mov	r7, r1
 80196a8:	f7e6 fe08 	bl	80002bc <__adddf3>
 80196ac:	4652      	mov	r2, sl
 80196ae:	465b      	mov	r3, fp
 80196b0:	f7e6 fe04 	bl	80002bc <__adddf3>
 80196b4:	2000      	movs	r0, #0
 80196b6:	4604      	mov	r4, r0
 80196b8:	460d      	mov	r5, r1
 80196ba:	4602      	mov	r2, r0
 80196bc:	460b      	mov	r3, r1
 80196be:	4640      	mov	r0, r8
 80196c0:	4649      	mov	r1, r9
 80196c2:	f7e6 ffb1 	bl	8000628 <__aeabi_dmul>
 80196c6:	4b62      	ldr	r3, [pc, #392]	; (8019850 <__ieee754_pow+0x770>)
 80196c8:	4680      	mov	r8, r0
 80196ca:	4689      	mov	r9, r1
 80196cc:	2200      	movs	r2, #0
 80196ce:	4620      	mov	r0, r4
 80196d0:	4629      	mov	r1, r5
 80196d2:	f7e6 fdf1 	bl	80002b8 <__aeabi_dsub>
 80196d6:	4632      	mov	r2, r6
 80196d8:	463b      	mov	r3, r7
 80196da:	f7e6 fded 	bl	80002b8 <__aeabi_dsub>
 80196de:	4602      	mov	r2, r0
 80196e0:	460b      	mov	r3, r1
 80196e2:	4650      	mov	r0, sl
 80196e4:	4659      	mov	r1, fp
 80196e6:	f7e6 fde7 	bl	80002b8 <__aeabi_dsub>
 80196ea:	ec53 2b18 	vmov	r2, r3, d8
 80196ee:	f7e6 ff9b 	bl	8000628 <__aeabi_dmul>
 80196f2:	4622      	mov	r2, r4
 80196f4:	4606      	mov	r6, r0
 80196f6:	460f      	mov	r7, r1
 80196f8:	462b      	mov	r3, r5
 80196fa:	ec51 0b19 	vmov	r0, r1, d9
 80196fe:	f7e6 ff93 	bl	8000628 <__aeabi_dmul>
 8019702:	4602      	mov	r2, r0
 8019704:	460b      	mov	r3, r1
 8019706:	4630      	mov	r0, r6
 8019708:	4639      	mov	r1, r7
 801970a:	f7e6 fdd7 	bl	80002bc <__adddf3>
 801970e:	4606      	mov	r6, r0
 8019710:	460f      	mov	r7, r1
 8019712:	4602      	mov	r2, r0
 8019714:	460b      	mov	r3, r1
 8019716:	4640      	mov	r0, r8
 8019718:	4649      	mov	r1, r9
 801971a:	f7e6 fdcf 	bl	80002bc <__adddf3>
 801971e:	a33e      	add	r3, pc, #248	; (adr r3, 8019818 <__ieee754_pow+0x738>)
 8019720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019724:	2000      	movs	r0, #0
 8019726:	4604      	mov	r4, r0
 8019728:	460d      	mov	r5, r1
 801972a:	f7e6 ff7d 	bl	8000628 <__aeabi_dmul>
 801972e:	4642      	mov	r2, r8
 8019730:	ec41 0b18 	vmov	d8, r0, r1
 8019734:	464b      	mov	r3, r9
 8019736:	4620      	mov	r0, r4
 8019738:	4629      	mov	r1, r5
 801973a:	f7e6 fdbd 	bl	80002b8 <__aeabi_dsub>
 801973e:	4602      	mov	r2, r0
 8019740:	460b      	mov	r3, r1
 8019742:	4630      	mov	r0, r6
 8019744:	4639      	mov	r1, r7
 8019746:	f7e6 fdb7 	bl	80002b8 <__aeabi_dsub>
 801974a:	a335      	add	r3, pc, #212	; (adr r3, 8019820 <__ieee754_pow+0x740>)
 801974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019750:	f7e6 ff6a 	bl	8000628 <__aeabi_dmul>
 8019754:	a334      	add	r3, pc, #208	; (adr r3, 8019828 <__ieee754_pow+0x748>)
 8019756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975a:	4606      	mov	r6, r0
 801975c:	460f      	mov	r7, r1
 801975e:	4620      	mov	r0, r4
 8019760:	4629      	mov	r1, r5
 8019762:	f7e6 ff61 	bl	8000628 <__aeabi_dmul>
 8019766:	4602      	mov	r2, r0
 8019768:	460b      	mov	r3, r1
 801976a:	4630      	mov	r0, r6
 801976c:	4639      	mov	r1, r7
 801976e:	f7e6 fda5 	bl	80002bc <__adddf3>
 8019772:	9a07      	ldr	r2, [sp, #28]
 8019774:	4b37      	ldr	r3, [pc, #220]	; (8019854 <__ieee754_pow+0x774>)
 8019776:	4413      	add	r3, r2
 8019778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801977c:	f7e6 fd9e 	bl	80002bc <__adddf3>
 8019780:	4682      	mov	sl, r0
 8019782:	9805      	ldr	r0, [sp, #20]
 8019784:	468b      	mov	fp, r1
 8019786:	f7e6 fee5 	bl	8000554 <__aeabi_i2d>
 801978a:	9a07      	ldr	r2, [sp, #28]
 801978c:	4b32      	ldr	r3, [pc, #200]	; (8019858 <__ieee754_pow+0x778>)
 801978e:	4413      	add	r3, r2
 8019790:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019794:	4606      	mov	r6, r0
 8019796:	460f      	mov	r7, r1
 8019798:	4652      	mov	r2, sl
 801979a:	465b      	mov	r3, fp
 801979c:	ec51 0b18 	vmov	r0, r1, d8
 80197a0:	f7e6 fd8c 	bl	80002bc <__adddf3>
 80197a4:	4642      	mov	r2, r8
 80197a6:	464b      	mov	r3, r9
 80197a8:	f7e6 fd88 	bl	80002bc <__adddf3>
 80197ac:	4632      	mov	r2, r6
 80197ae:	463b      	mov	r3, r7
 80197b0:	f7e6 fd84 	bl	80002bc <__adddf3>
 80197b4:	2000      	movs	r0, #0
 80197b6:	4632      	mov	r2, r6
 80197b8:	463b      	mov	r3, r7
 80197ba:	4604      	mov	r4, r0
 80197bc:	460d      	mov	r5, r1
 80197be:	f7e6 fd7b 	bl	80002b8 <__aeabi_dsub>
 80197c2:	4642      	mov	r2, r8
 80197c4:	464b      	mov	r3, r9
 80197c6:	f7e6 fd77 	bl	80002b8 <__aeabi_dsub>
 80197ca:	ec53 2b18 	vmov	r2, r3, d8
 80197ce:	f7e6 fd73 	bl	80002b8 <__aeabi_dsub>
 80197d2:	4602      	mov	r2, r0
 80197d4:	460b      	mov	r3, r1
 80197d6:	4650      	mov	r0, sl
 80197d8:	4659      	mov	r1, fp
 80197da:	e610      	b.n	80193fe <__ieee754_pow+0x31e>
 80197dc:	2401      	movs	r4, #1
 80197de:	e6a1      	b.n	8019524 <__ieee754_pow+0x444>
 80197e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019830 <__ieee754_pow+0x750>
 80197e4:	e617      	b.n	8019416 <__ieee754_pow+0x336>
 80197e6:	bf00      	nop
 80197e8:	4a454eef 	.word	0x4a454eef
 80197ec:	3fca7e28 	.word	0x3fca7e28
 80197f0:	93c9db65 	.word	0x93c9db65
 80197f4:	3fcd864a 	.word	0x3fcd864a
 80197f8:	a91d4101 	.word	0xa91d4101
 80197fc:	3fd17460 	.word	0x3fd17460
 8019800:	518f264d 	.word	0x518f264d
 8019804:	3fd55555 	.word	0x3fd55555
 8019808:	db6fabff 	.word	0xdb6fabff
 801980c:	3fdb6db6 	.word	0x3fdb6db6
 8019810:	33333303 	.word	0x33333303
 8019814:	3fe33333 	.word	0x3fe33333
 8019818:	e0000000 	.word	0xe0000000
 801981c:	3feec709 	.word	0x3feec709
 8019820:	dc3a03fd 	.word	0xdc3a03fd
 8019824:	3feec709 	.word	0x3feec709
 8019828:	145b01f5 	.word	0x145b01f5
 801982c:	be3e2fe0 	.word	0xbe3e2fe0
 8019830:	00000000 	.word	0x00000000
 8019834:	3ff00000 	.word	0x3ff00000
 8019838:	7ff00000 	.word	0x7ff00000
 801983c:	43400000 	.word	0x43400000
 8019840:	0003988e 	.word	0x0003988e
 8019844:	000bb679 	.word	0x000bb679
 8019848:	0801a048 	.word	0x0801a048
 801984c:	3ff00000 	.word	0x3ff00000
 8019850:	40080000 	.word	0x40080000
 8019854:	0801a068 	.word	0x0801a068
 8019858:	0801a058 	.word	0x0801a058
 801985c:	a3b3      	add	r3, pc, #716	; (adr r3, 8019b2c <__ieee754_pow+0xa4c>)
 801985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019862:	4640      	mov	r0, r8
 8019864:	4649      	mov	r1, r9
 8019866:	f7e6 fd29 	bl	80002bc <__adddf3>
 801986a:	4622      	mov	r2, r4
 801986c:	ec41 0b1a 	vmov	d10, r0, r1
 8019870:	462b      	mov	r3, r5
 8019872:	4630      	mov	r0, r6
 8019874:	4639      	mov	r1, r7
 8019876:	f7e6 fd1f 	bl	80002b8 <__aeabi_dsub>
 801987a:	4602      	mov	r2, r0
 801987c:	460b      	mov	r3, r1
 801987e:	ec51 0b1a 	vmov	r0, r1, d10
 8019882:	f7e7 f961 	bl	8000b48 <__aeabi_dcmpgt>
 8019886:	2800      	cmp	r0, #0
 8019888:	f47f ae04 	bne.w	8019494 <__ieee754_pow+0x3b4>
 801988c:	4aa2      	ldr	r2, [pc, #648]	; (8019b18 <__ieee754_pow+0xa38>)
 801988e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019892:	4293      	cmp	r3, r2
 8019894:	f340 8107 	ble.w	8019aa6 <__ieee754_pow+0x9c6>
 8019898:	151b      	asrs	r3, r3, #20
 801989a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801989e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80198a2:	fa4a fa03 	asr.w	sl, sl, r3
 80198a6:	44da      	add	sl, fp
 80198a8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80198ac:	489b      	ldr	r0, [pc, #620]	; (8019b1c <__ieee754_pow+0xa3c>)
 80198ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80198b2:	4108      	asrs	r0, r1
 80198b4:	ea00 030a 	and.w	r3, r0, sl
 80198b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80198bc:	f1c1 0114 	rsb	r1, r1, #20
 80198c0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80198c4:	fa4a fa01 	asr.w	sl, sl, r1
 80198c8:	f1bb 0f00 	cmp.w	fp, #0
 80198cc:	f04f 0200 	mov.w	r2, #0
 80198d0:	4620      	mov	r0, r4
 80198d2:	4629      	mov	r1, r5
 80198d4:	bfb8      	it	lt
 80198d6:	f1ca 0a00 	rsblt	sl, sl, #0
 80198da:	f7e6 fced 	bl	80002b8 <__aeabi_dsub>
 80198de:	ec41 0b19 	vmov	d9, r0, r1
 80198e2:	4642      	mov	r2, r8
 80198e4:	464b      	mov	r3, r9
 80198e6:	ec51 0b19 	vmov	r0, r1, d9
 80198ea:	f7e6 fce7 	bl	80002bc <__adddf3>
 80198ee:	a37a      	add	r3, pc, #488	; (adr r3, 8019ad8 <__ieee754_pow+0x9f8>)
 80198f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f4:	2000      	movs	r0, #0
 80198f6:	4604      	mov	r4, r0
 80198f8:	460d      	mov	r5, r1
 80198fa:	f7e6 fe95 	bl	8000628 <__aeabi_dmul>
 80198fe:	ec53 2b19 	vmov	r2, r3, d9
 8019902:	4606      	mov	r6, r0
 8019904:	460f      	mov	r7, r1
 8019906:	4620      	mov	r0, r4
 8019908:	4629      	mov	r1, r5
 801990a:	f7e6 fcd5 	bl	80002b8 <__aeabi_dsub>
 801990e:	4602      	mov	r2, r0
 8019910:	460b      	mov	r3, r1
 8019912:	4640      	mov	r0, r8
 8019914:	4649      	mov	r1, r9
 8019916:	f7e6 fccf 	bl	80002b8 <__aeabi_dsub>
 801991a:	a371      	add	r3, pc, #452	; (adr r3, 8019ae0 <__ieee754_pow+0xa00>)
 801991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019920:	f7e6 fe82 	bl	8000628 <__aeabi_dmul>
 8019924:	a370      	add	r3, pc, #448	; (adr r3, 8019ae8 <__ieee754_pow+0xa08>)
 8019926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801992a:	4680      	mov	r8, r0
 801992c:	4689      	mov	r9, r1
 801992e:	4620      	mov	r0, r4
 8019930:	4629      	mov	r1, r5
 8019932:	f7e6 fe79 	bl	8000628 <__aeabi_dmul>
 8019936:	4602      	mov	r2, r0
 8019938:	460b      	mov	r3, r1
 801993a:	4640      	mov	r0, r8
 801993c:	4649      	mov	r1, r9
 801993e:	f7e6 fcbd 	bl	80002bc <__adddf3>
 8019942:	4604      	mov	r4, r0
 8019944:	460d      	mov	r5, r1
 8019946:	4602      	mov	r2, r0
 8019948:	460b      	mov	r3, r1
 801994a:	4630      	mov	r0, r6
 801994c:	4639      	mov	r1, r7
 801994e:	f7e6 fcb5 	bl	80002bc <__adddf3>
 8019952:	4632      	mov	r2, r6
 8019954:	463b      	mov	r3, r7
 8019956:	4680      	mov	r8, r0
 8019958:	4689      	mov	r9, r1
 801995a:	f7e6 fcad 	bl	80002b8 <__aeabi_dsub>
 801995e:	4602      	mov	r2, r0
 8019960:	460b      	mov	r3, r1
 8019962:	4620      	mov	r0, r4
 8019964:	4629      	mov	r1, r5
 8019966:	f7e6 fca7 	bl	80002b8 <__aeabi_dsub>
 801996a:	4642      	mov	r2, r8
 801996c:	4606      	mov	r6, r0
 801996e:	460f      	mov	r7, r1
 8019970:	464b      	mov	r3, r9
 8019972:	4640      	mov	r0, r8
 8019974:	4649      	mov	r1, r9
 8019976:	f7e6 fe57 	bl	8000628 <__aeabi_dmul>
 801997a:	a35d      	add	r3, pc, #372	; (adr r3, 8019af0 <__ieee754_pow+0xa10>)
 801997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019980:	4604      	mov	r4, r0
 8019982:	460d      	mov	r5, r1
 8019984:	f7e6 fe50 	bl	8000628 <__aeabi_dmul>
 8019988:	a35b      	add	r3, pc, #364	; (adr r3, 8019af8 <__ieee754_pow+0xa18>)
 801998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801998e:	f7e6 fc93 	bl	80002b8 <__aeabi_dsub>
 8019992:	4622      	mov	r2, r4
 8019994:	462b      	mov	r3, r5
 8019996:	f7e6 fe47 	bl	8000628 <__aeabi_dmul>
 801999a:	a359      	add	r3, pc, #356	; (adr r3, 8019b00 <__ieee754_pow+0xa20>)
 801999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a0:	f7e6 fc8c 	bl	80002bc <__adddf3>
 80199a4:	4622      	mov	r2, r4
 80199a6:	462b      	mov	r3, r5
 80199a8:	f7e6 fe3e 	bl	8000628 <__aeabi_dmul>
 80199ac:	a356      	add	r3, pc, #344	; (adr r3, 8019b08 <__ieee754_pow+0xa28>)
 80199ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b2:	f7e6 fc81 	bl	80002b8 <__aeabi_dsub>
 80199b6:	4622      	mov	r2, r4
 80199b8:	462b      	mov	r3, r5
 80199ba:	f7e6 fe35 	bl	8000628 <__aeabi_dmul>
 80199be:	a354      	add	r3, pc, #336	; (adr r3, 8019b10 <__ieee754_pow+0xa30>)
 80199c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199c4:	f7e6 fc7a 	bl	80002bc <__adddf3>
 80199c8:	4622      	mov	r2, r4
 80199ca:	462b      	mov	r3, r5
 80199cc:	f7e6 fe2c 	bl	8000628 <__aeabi_dmul>
 80199d0:	4602      	mov	r2, r0
 80199d2:	460b      	mov	r3, r1
 80199d4:	4640      	mov	r0, r8
 80199d6:	4649      	mov	r1, r9
 80199d8:	f7e6 fc6e 	bl	80002b8 <__aeabi_dsub>
 80199dc:	4604      	mov	r4, r0
 80199de:	460d      	mov	r5, r1
 80199e0:	4602      	mov	r2, r0
 80199e2:	460b      	mov	r3, r1
 80199e4:	4640      	mov	r0, r8
 80199e6:	4649      	mov	r1, r9
 80199e8:	f7e6 fe1e 	bl	8000628 <__aeabi_dmul>
 80199ec:	2200      	movs	r2, #0
 80199ee:	ec41 0b19 	vmov	d9, r0, r1
 80199f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80199f6:	4620      	mov	r0, r4
 80199f8:	4629      	mov	r1, r5
 80199fa:	f7e6 fc5d 	bl	80002b8 <__aeabi_dsub>
 80199fe:	4602      	mov	r2, r0
 8019a00:	460b      	mov	r3, r1
 8019a02:	ec51 0b19 	vmov	r0, r1, d9
 8019a06:	f7e6 ff39 	bl	800087c <__aeabi_ddiv>
 8019a0a:	4632      	mov	r2, r6
 8019a0c:	4604      	mov	r4, r0
 8019a0e:	460d      	mov	r5, r1
 8019a10:	463b      	mov	r3, r7
 8019a12:	4640      	mov	r0, r8
 8019a14:	4649      	mov	r1, r9
 8019a16:	f7e6 fe07 	bl	8000628 <__aeabi_dmul>
 8019a1a:	4632      	mov	r2, r6
 8019a1c:	463b      	mov	r3, r7
 8019a1e:	f7e6 fc4d 	bl	80002bc <__adddf3>
 8019a22:	4602      	mov	r2, r0
 8019a24:	460b      	mov	r3, r1
 8019a26:	4620      	mov	r0, r4
 8019a28:	4629      	mov	r1, r5
 8019a2a:	f7e6 fc45 	bl	80002b8 <__aeabi_dsub>
 8019a2e:	4642      	mov	r2, r8
 8019a30:	464b      	mov	r3, r9
 8019a32:	f7e6 fc41 	bl	80002b8 <__aeabi_dsub>
 8019a36:	460b      	mov	r3, r1
 8019a38:	4602      	mov	r2, r0
 8019a3a:	4939      	ldr	r1, [pc, #228]	; (8019b20 <__ieee754_pow+0xa40>)
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	f7e6 fc3b 	bl	80002b8 <__aeabi_dsub>
 8019a42:	ec41 0b10 	vmov	d0, r0, r1
 8019a46:	ee10 3a90 	vmov	r3, s1
 8019a4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019a52:	da2b      	bge.n	8019aac <__ieee754_pow+0x9cc>
 8019a54:	4650      	mov	r0, sl
 8019a56:	f000 f877 	bl	8019b48 <scalbn>
 8019a5a:	ec51 0b10 	vmov	r0, r1, d0
 8019a5e:	ec53 2b18 	vmov	r2, r3, d8
 8019a62:	f7ff bbee 	b.w	8019242 <__ieee754_pow+0x162>
 8019a66:	4b2f      	ldr	r3, [pc, #188]	; (8019b24 <__ieee754_pow+0xa44>)
 8019a68:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019a6c:	429e      	cmp	r6, r3
 8019a6e:	f77f af0d 	ble.w	801988c <__ieee754_pow+0x7ac>
 8019a72:	4b2d      	ldr	r3, [pc, #180]	; (8019b28 <__ieee754_pow+0xa48>)
 8019a74:	440b      	add	r3, r1
 8019a76:	4303      	orrs	r3, r0
 8019a78:	d009      	beq.n	8019a8e <__ieee754_pow+0x9ae>
 8019a7a:	ec51 0b18 	vmov	r0, r1, d8
 8019a7e:	2200      	movs	r2, #0
 8019a80:	2300      	movs	r3, #0
 8019a82:	f7e7 f843 	bl	8000b0c <__aeabi_dcmplt>
 8019a86:	3800      	subs	r0, #0
 8019a88:	bf18      	it	ne
 8019a8a:	2001      	movne	r0, #1
 8019a8c:	e448      	b.n	8019320 <__ieee754_pow+0x240>
 8019a8e:	4622      	mov	r2, r4
 8019a90:	462b      	mov	r3, r5
 8019a92:	f7e6 fc11 	bl	80002b8 <__aeabi_dsub>
 8019a96:	4642      	mov	r2, r8
 8019a98:	464b      	mov	r3, r9
 8019a9a:	f7e7 f84b 	bl	8000b34 <__aeabi_dcmpge>
 8019a9e:	2800      	cmp	r0, #0
 8019aa0:	f43f aef4 	beq.w	801988c <__ieee754_pow+0x7ac>
 8019aa4:	e7e9      	b.n	8019a7a <__ieee754_pow+0x99a>
 8019aa6:	f04f 0a00 	mov.w	sl, #0
 8019aaa:	e71a      	b.n	80198e2 <__ieee754_pow+0x802>
 8019aac:	ec51 0b10 	vmov	r0, r1, d0
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	e7d4      	b.n	8019a5e <__ieee754_pow+0x97e>
 8019ab4:	491a      	ldr	r1, [pc, #104]	; (8019b20 <__ieee754_pow+0xa40>)
 8019ab6:	2000      	movs	r0, #0
 8019ab8:	f7ff bb31 	b.w	801911e <__ieee754_pow+0x3e>
 8019abc:	2000      	movs	r0, #0
 8019abe:	2100      	movs	r1, #0
 8019ac0:	f7ff bb2d 	b.w	801911e <__ieee754_pow+0x3e>
 8019ac4:	4630      	mov	r0, r6
 8019ac6:	4639      	mov	r1, r7
 8019ac8:	f7ff bb29 	b.w	801911e <__ieee754_pow+0x3e>
 8019acc:	9204      	str	r2, [sp, #16]
 8019ace:	f7ff bb7b 	b.w	80191c8 <__ieee754_pow+0xe8>
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	f7ff bb65 	b.w	80191a2 <__ieee754_pow+0xc2>
 8019ad8:	00000000 	.word	0x00000000
 8019adc:	3fe62e43 	.word	0x3fe62e43
 8019ae0:	fefa39ef 	.word	0xfefa39ef
 8019ae4:	3fe62e42 	.word	0x3fe62e42
 8019ae8:	0ca86c39 	.word	0x0ca86c39
 8019aec:	be205c61 	.word	0xbe205c61
 8019af0:	72bea4d0 	.word	0x72bea4d0
 8019af4:	3e663769 	.word	0x3e663769
 8019af8:	c5d26bf1 	.word	0xc5d26bf1
 8019afc:	3ebbbd41 	.word	0x3ebbbd41
 8019b00:	af25de2c 	.word	0xaf25de2c
 8019b04:	3f11566a 	.word	0x3f11566a
 8019b08:	16bebd93 	.word	0x16bebd93
 8019b0c:	3f66c16c 	.word	0x3f66c16c
 8019b10:	5555553e 	.word	0x5555553e
 8019b14:	3fc55555 	.word	0x3fc55555
 8019b18:	3fe00000 	.word	0x3fe00000
 8019b1c:	fff00000 	.word	0xfff00000
 8019b20:	3ff00000 	.word	0x3ff00000
 8019b24:	4090cbff 	.word	0x4090cbff
 8019b28:	3f6f3400 	.word	0x3f6f3400
 8019b2c:	652b82fe 	.word	0x652b82fe
 8019b30:	3c971547 	.word	0x3c971547

08019b34 <fabs>:
 8019b34:	ec51 0b10 	vmov	r0, r1, d0
 8019b38:	ee10 2a10 	vmov	r2, s0
 8019b3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019b40:	ec43 2b10 	vmov	d0, r2, r3
 8019b44:	4770      	bx	lr
	...

08019b48 <scalbn>:
 8019b48:	b570      	push	{r4, r5, r6, lr}
 8019b4a:	ec55 4b10 	vmov	r4, r5, d0
 8019b4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8019b52:	4606      	mov	r6, r0
 8019b54:	462b      	mov	r3, r5
 8019b56:	b999      	cbnz	r1, 8019b80 <scalbn+0x38>
 8019b58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019b5c:	4323      	orrs	r3, r4
 8019b5e:	d03f      	beq.n	8019be0 <scalbn+0x98>
 8019b60:	4b35      	ldr	r3, [pc, #212]	; (8019c38 <scalbn+0xf0>)
 8019b62:	4629      	mov	r1, r5
 8019b64:	ee10 0a10 	vmov	r0, s0
 8019b68:	2200      	movs	r2, #0
 8019b6a:	f7e6 fd5d 	bl	8000628 <__aeabi_dmul>
 8019b6e:	4b33      	ldr	r3, [pc, #204]	; (8019c3c <scalbn+0xf4>)
 8019b70:	429e      	cmp	r6, r3
 8019b72:	4604      	mov	r4, r0
 8019b74:	460d      	mov	r5, r1
 8019b76:	da10      	bge.n	8019b9a <scalbn+0x52>
 8019b78:	a327      	add	r3, pc, #156	; (adr r3, 8019c18 <scalbn+0xd0>)
 8019b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b7e:	e01f      	b.n	8019bc0 <scalbn+0x78>
 8019b80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8019b84:	4291      	cmp	r1, r2
 8019b86:	d10c      	bne.n	8019ba2 <scalbn+0x5a>
 8019b88:	ee10 2a10 	vmov	r2, s0
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	4629      	mov	r1, r5
 8019b90:	f7e6 fb94 	bl	80002bc <__adddf3>
 8019b94:	4604      	mov	r4, r0
 8019b96:	460d      	mov	r5, r1
 8019b98:	e022      	b.n	8019be0 <scalbn+0x98>
 8019b9a:	460b      	mov	r3, r1
 8019b9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019ba0:	3936      	subs	r1, #54	; 0x36
 8019ba2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8019ba6:	4296      	cmp	r6, r2
 8019ba8:	dd0d      	ble.n	8019bc6 <scalbn+0x7e>
 8019baa:	2d00      	cmp	r5, #0
 8019bac:	a11c      	add	r1, pc, #112	; (adr r1, 8019c20 <scalbn+0xd8>)
 8019bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bb2:	da02      	bge.n	8019bba <scalbn+0x72>
 8019bb4:	a11c      	add	r1, pc, #112	; (adr r1, 8019c28 <scalbn+0xe0>)
 8019bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bba:	a319      	add	r3, pc, #100	; (adr r3, 8019c20 <scalbn+0xd8>)
 8019bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bc0:	f7e6 fd32 	bl	8000628 <__aeabi_dmul>
 8019bc4:	e7e6      	b.n	8019b94 <scalbn+0x4c>
 8019bc6:	1872      	adds	r2, r6, r1
 8019bc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019bcc:	428a      	cmp	r2, r1
 8019bce:	dcec      	bgt.n	8019baa <scalbn+0x62>
 8019bd0:	2a00      	cmp	r2, #0
 8019bd2:	dd08      	ble.n	8019be6 <scalbn+0x9e>
 8019bd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019bd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019bdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019be0:	ec45 4b10 	vmov	d0, r4, r5
 8019be4:	bd70      	pop	{r4, r5, r6, pc}
 8019be6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019bea:	da08      	bge.n	8019bfe <scalbn+0xb6>
 8019bec:	2d00      	cmp	r5, #0
 8019bee:	a10a      	add	r1, pc, #40	; (adr r1, 8019c18 <scalbn+0xd0>)
 8019bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bf4:	dac0      	bge.n	8019b78 <scalbn+0x30>
 8019bf6:	a10e      	add	r1, pc, #56	; (adr r1, 8019c30 <scalbn+0xe8>)
 8019bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bfc:	e7bc      	b.n	8019b78 <scalbn+0x30>
 8019bfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019c02:	3236      	adds	r2, #54	; 0x36
 8019c04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019c08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	4b0c      	ldr	r3, [pc, #48]	; (8019c40 <scalbn+0xf8>)
 8019c10:	2200      	movs	r2, #0
 8019c12:	e7d5      	b.n	8019bc0 <scalbn+0x78>
 8019c14:	f3af 8000 	nop.w
 8019c18:	c2f8f359 	.word	0xc2f8f359
 8019c1c:	01a56e1f 	.word	0x01a56e1f
 8019c20:	8800759c 	.word	0x8800759c
 8019c24:	7e37e43c 	.word	0x7e37e43c
 8019c28:	8800759c 	.word	0x8800759c
 8019c2c:	fe37e43c 	.word	0xfe37e43c
 8019c30:	c2f8f359 	.word	0xc2f8f359
 8019c34:	81a56e1f 	.word	0x81a56e1f
 8019c38:	43500000 	.word	0x43500000
 8019c3c:	ffff3cb0 	.word	0xffff3cb0
 8019c40:	3c900000 	.word	0x3c900000

08019c44 <with_errno>:
 8019c44:	b570      	push	{r4, r5, r6, lr}
 8019c46:	4604      	mov	r4, r0
 8019c48:	460d      	mov	r5, r1
 8019c4a:	4616      	mov	r6, r2
 8019c4c:	f7fe fa8e 	bl	801816c <__errno>
 8019c50:	4629      	mov	r1, r5
 8019c52:	6006      	str	r6, [r0, #0]
 8019c54:	4620      	mov	r0, r4
 8019c56:	bd70      	pop	{r4, r5, r6, pc}

08019c58 <xflow>:
 8019c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c5a:	4614      	mov	r4, r2
 8019c5c:	461d      	mov	r5, r3
 8019c5e:	b108      	cbz	r0, 8019c64 <xflow+0xc>
 8019c60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019c64:	e9cd 2300 	strd	r2, r3, [sp]
 8019c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	4629      	mov	r1, r5
 8019c70:	f7e6 fcda 	bl	8000628 <__aeabi_dmul>
 8019c74:	2222      	movs	r2, #34	; 0x22
 8019c76:	b003      	add	sp, #12
 8019c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c7c:	f7ff bfe2 	b.w	8019c44 <with_errno>

08019c80 <__math_uflow>:
 8019c80:	b508      	push	{r3, lr}
 8019c82:	2200      	movs	r2, #0
 8019c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019c88:	f7ff ffe6 	bl	8019c58 <xflow>
 8019c8c:	ec41 0b10 	vmov	d0, r0, r1
 8019c90:	bd08      	pop	{r3, pc}

08019c92 <__math_oflow>:
 8019c92:	b508      	push	{r3, lr}
 8019c94:	2200      	movs	r2, #0
 8019c96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8019c9a:	f7ff ffdd 	bl	8019c58 <xflow>
 8019c9e:	ec41 0b10 	vmov	d0, r0, r1
 8019ca2:	bd08      	pop	{r3, pc}

08019ca4 <__ieee754_sqrt>:
 8019ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca8:	ec55 4b10 	vmov	r4, r5, d0
 8019cac:	4e67      	ldr	r6, [pc, #412]	; (8019e4c <__ieee754_sqrt+0x1a8>)
 8019cae:	43ae      	bics	r6, r5
 8019cb0:	ee10 0a10 	vmov	r0, s0
 8019cb4:	ee10 2a10 	vmov	r2, s0
 8019cb8:	4629      	mov	r1, r5
 8019cba:	462b      	mov	r3, r5
 8019cbc:	d10d      	bne.n	8019cda <__ieee754_sqrt+0x36>
 8019cbe:	f7e6 fcb3 	bl	8000628 <__aeabi_dmul>
 8019cc2:	4602      	mov	r2, r0
 8019cc4:	460b      	mov	r3, r1
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	4629      	mov	r1, r5
 8019cca:	f7e6 faf7 	bl	80002bc <__adddf3>
 8019cce:	4604      	mov	r4, r0
 8019cd0:	460d      	mov	r5, r1
 8019cd2:	ec45 4b10 	vmov	d0, r4, r5
 8019cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cda:	2d00      	cmp	r5, #0
 8019cdc:	dc0b      	bgt.n	8019cf6 <__ieee754_sqrt+0x52>
 8019cde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019ce2:	4326      	orrs	r6, r4
 8019ce4:	d0f5      	beq.n	8019cd2 <__ieee754_sqrt+0x2e>
 8019ce6:	b135      	cbz	r5, 8019cf6 <__ieee754_sqrt+0x52>
 8019ce8:	f7e6 fae6 	bl	80002b8 <__aeabi_dsub>
 8019cec:	4602      	mov	r2, r0
 8019cee:	460b      	mov	r3, r1
 8019cf0:	f7e6 fdc4 	bl	800087c <__aeabi_ddiv>
 8019cf4:	e7eb      	b.n	8019cce <__ieee754_sqrt+0x2a>
 8019cf6:	1509      	asrs	r1, r1, #20
 8019cf8:	f000 808d 	beq.w	8019e16 <__ieee754_sqrt+0x172>
 8019cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019d00:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8019d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019d08:	07c9      	lsls	r1, r1, #31
 8019d0a:	bf5c      	itt	pl
 8019d0c:	005b      	lslpl	r3, r3, #1
 8019d0e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8019d12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019d16:	bf58      	it	pl
 8019d18:	0052      	lslpl	r2, r2, #1
 8019d1a:	2500      	movs	r5, #0
 8019d1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019d20:	1076      	asrs	r6, r6, #1
 8019d22:	0052      	lsls	r2, r2, #1
 8019d24:	f04f 0e16 	mov.w	lr, #22
 8019d28:	46ac      	mov	ip, r5
 8019d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019d2e:	eb0c 0001 	add.w	r0, ip, r1
 8019d32:	4298      	cmp	r0, r3
 8019d34:	bfde      	ittt	le
 8019d36:	1a1b      	suble	r3, r3, r0
 8019d38:	eb00 0c01 	addle.w	ip, r0, r1
 8019d3c:	186d      	addle	r5, r5, r1
 8019d3e:	005b      	lsls	r3, r3, #1
 8019d40:	f1be 0e01 	subs.w	lr, lr, #1
 8019d44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019d48:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019d4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019d50:	d1ed      	bne.n	8019d2e <__ieee754_sqrt+0x8a>
 8019d52:	4674      	mov	r4, lr
 8019d54:	2720      	movs	r7, #32
 8019d56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019d5a:	4563      	cmp	r3, ip
 8019d5c:	eb01 000e 	add.w	r0, r1, lr
 8019d60:	dc02      	bgt.n	8019d68 <__ieee754_sqrt+0xc4>
 8019d62:	d113      	bne.n	8019d8c <__ieee754_sqrt+0xe8>
 8019d64:	4290      	cmp	r0, r2
 8019d66:	d811      	bhi.n	8019d8c <__ieee754_sqrt+0xe8>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	eb00 0e01 	add.w	lr, r0, r1
 8019d6e:	da57      	bge.n	8019e20 <__ieee754_sqrt+0x17c>
 8019d70:	f1be 0f00 	cmp.w	lr, #0
 8019d74:	db54      	blt.n	8019e20 <__ieee754_sqrt+0x17c>
 8019d76:	f10c 0801 	add.w	r8, ip, #1
 8019d7a:	eba3 030c 	sub.w	r3, r3, ip
 8019d7e:	4290      	cmp	r0, r2
 8019d80:	bf88      	it	hi
 8019d82:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8019d86:	1a12      	subs	r2, r2, r0
 8019d88:	440c      	add	r4, r1
 8019d8a:	46c4      	mov	ip, r8
 8019d8c:	005b      	lsls	r3, r3, #1
 8019d8e:	3f01      	subs	r7, #1
 8019d90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019d94:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019d98:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019d9c:	d1dd      	bne.n	8019d5a <__ieee754_sqrt+0xb6>
 8019d9e:	4313      	orrs	r3, r2
 8019da0:	d01b      	beq.n	8019dda <__ieee754_sqrt+0x136>
 8019da2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019e50 <__ieee754_sqrt+0x1ac>
 8019da6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019e54 <__ieee754_sqrt+0x1b0>
 8019daa:	e9da 0100 	ldrd	r0, r1, [sl]
 8019dae:	e9db 2300 	ldrd	r2, r3, [fp]
 8019db2:	f7e6 fa81 	bl	80002b8 <__aeabi_dsub>
 8019db6:	e9da 8900 	ldrd	r8, r9, [sl]
 8019dba:	4602      	mov	r2, r0
 8019dbc:	460b      	mov	r3, r1
 8019dbe:	4640      	mov	r0, r8
 8019dc0:	4649      	mov	r1, r9
 8019dc2:	f7e6 fead 	bl	8000b20 <__aeabi_dcmple>
 8019dc6:	b140      	cbz	r0, 8019dda <__ieee754_sqrt+0x136>
 8019dc8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8019dcc:	e9da 0100 	ldrd	r0, r1, [sl]
 8019dd0:	e9db 2300 	ldrd	r2, r3, [fp]
 8019dd4:	d126      	bne.n	8019e24 <__ieee754_sqrt+0x180>
 8019dd6:	3501      	adds	r5, #1
 8019dd8:	463c      	mov	r4, r7
 8019dda:	106a      	asrs	r2, r5, #1
 8019ddc:	0863      	lsrs	r3, r4, #1
 8019dde:	07e9      	lsls	r1, r5, #31
 8019de0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019de4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019de8:	bf48      	it	mi
 8019dea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019dee:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019df2:	461c      	mov	r4, r3
 8019df4:	e76d      	b.n	8019cd2 <__ieee754_sqrt+0x2e>
 8019df6:	0ad3      	lsrs	r3, r2, #11
 8019df8:	3815      	subs	r0, #21
 8019dfa:	0552      	lsls	r2, r2, #21
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d0fa      	beq.n	8019df6 <__ieee754_sqrt+0x152>
 8019e00:	02dc      	lsls	r4, r3, #11
 8019e02:	d50a      	bpl.n	8019e1a <__ieee754_sqrt+0x176>
 8019e04:	f1c1 0420 	rsb	r4, r1, #32
 8019e08:	fa22 f404 	lsr.w	r4, r2, r4
 8019e0c:	1e4d      	subs	r5, r1, #1
 8019e0e:	408a      	lsls	r2, r1
 8019e10:	4323      	orrs	r3, r4
 8019e12:	1b41      	subs	r1, r0, r5
 8019e14:	e772      	b.n	8019cfc <__ieee754_sqrt+0x58>
 8019e16:	4608      	mov	r0, r1
 8019e18:	e7f0      	b.n	8019dfc <__ieee754_sqrt+0x158>
 8019e1a:	005b      	lsls	r3, r3, #1
 8019e1c:	3101      	adds	r1, #1
 8019e1e:	e7ef      	b.n	8019e00 <__ieee754_sqrt+0x15c>
 8019e20:	46e0      	mov	r8, ip
 8019e22:	e7aa      	b.n	8019d7a <__ieee754_sqrt+0xd6>
 8019e24:	f7e6 fa4a 	bl	80002bc <__adddf3>
 8019e28:	e9da 8900 	ldrd	r8, r9, [sl]
 8019e2c:	4602      	mov	r2, r0
 8019e2e:	460b      	mov	r3, r1
 8019e30:	4640      	mov	r0, r8
 8019e32:	4649      	mov	r1, r9
 8019e34:	f7e6 fe6a 	bl	8000b0c <__aeabi_dcmplt>
 8019e38:	b120      	cbz	r0, 8019e44 <__ieee754_sqrt+0x1a0>
 8019e3a:	1ca0      	adds	r0, r4, #2
 8019e3c:	bf08      	it	eq
 8019e3e:	3501      	addeq	r5, #1
 8019e40:	3402      	adds	r4, #2
 8019e42:	e7ca      	b.n	8019dda <__ieee754_sqrt+0x136>
 8019e44:	3401      	adds	r4, #1
 8019e46:	f024 0401 	bic.w	r4, r4, #1
 8019e4a:	e7c6      	b.n	8019dda <__ieee754_sqrt+0x136>
 8019e4c:	7ff00000 	.word	0x7ff00000
 8019e50:	20000648 	.word	0x20000648
 8019e54:	20000650 	.word	0x20000650

08019e58 <_init>:
 8019e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e5a:	bf00      	nop
 8019e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e5e:	bc08      	pop	{r3}
 8019e60:	469e      	mov	lr, r3
 8019e62:	4770      	bx	lr

08019e64 <_fini>:
 8019e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e66:	bf00      	nop
 8019e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e6a:	bc08      	pop	{r3}
 8019e6c:	469e      	mov	lr, r3
 8019e6e:	4770      	bx	lr
